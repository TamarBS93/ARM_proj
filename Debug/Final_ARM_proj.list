
Final_ARM_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d034  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003604  0801d204  0801d204  0001e204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020808  08020808  000221cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08020808  08020808  00021808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020810  08020810  000221cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020810  08020810  00021810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020814  08020814  00021814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08020818  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  080208a4  0002208c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08020944  0002212c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002766c  200001cc  080209e4  000221cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20027838  080209e4  00022838  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000221cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003e287  00000000  00000000  000221fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009168  00000000  00000000  00060483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002e00  00000000  00000000  000695f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002457  00000000  00000000  0006c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00014fab  00000000  00000000  0006e847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000472e4  00000000  00000000  000837f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00120624  00000000  00000000  000caad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001eb0fa  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c944  00000000  00000000  001eb140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  001f7a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801d1ec 	.word	0x0801d1ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	0801d1ec 	.word	0x0801d1ec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fe15 	bl	800220e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f8a8 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fb1c 	bl	8000c24 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 fae4 	bl	8000bb8 <MX_DMA_Init>
  MX_I2C1_Init();
 80005f0:	f000 f92c 	bl	800084c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 fa82 	bl	8000afc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 fab0 	bl	8000b5c <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 fa4e 	bl	8000a9c <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000600:	f000 fa1c 	bl	8000a3c <MX_UART4_Init>
  MX_CRC_Init();
 8000604:	f000 f900 	bl	8000808 <MX_CRC_Init>
  MX_I2C4_Init();
 8000608:	f000 f960 	bl	80008cc <MX_I2C4_Init>
  MX_SPI1_Init();
 800060c:	f000 f99e 	bl	800094c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000610:	f000 f9da 	bl	80009c8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000614:	f00c f92c 	bl	800c870 <osKernelInitialize>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UartRx */
  UartRxHandle = osSemaphoreNew(1, 0, &UartRx_attributes);
 8000618:	4a2d      	ldr	r2, [pc, #180]	@ (80006d0 <main+0xf4>)
 800061a:	2100      	movs	r1, #0
 800061c:	2001      	movs	r0, #1
 800061e:	f00c fbd5 	bl	800cdcc <osSemaphoreNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a2b      	ldr	r2, [pc, #172]	@ (80006d4 <main+0xf8>)
 8000626:	6013      	str	r3, [r2, #0]

  /* creation of UartTx */
  UartTxHandle = osSemaphoreNew(1, 0, &UartTx_attributes);
 8000628:	4a2b      	ldr	r2, [pc, #172]	@ (80006d8 <main+0xfc>)
 800062a:	2100      	movs	r1, #0
 800062c:	2001      	movs	r0, #1
 800062e:	f00c fbcd 	bl	800cdcc <osSemaphoreNew>
 8000632:	4603      	mov	r3, r0
 8000634:	4a29      	ldr	r2, [pc, #164]	@ (80006dc <main+0x100>)
 8000636:	6013      	str	r3, [r2, #0]

  /* creation of I2cRx */
  I2cRxHandle = osSemaphoreNew(1, 0, &I2cRx_attributes);
 8000638:	4a29      	ldr	r2, [pc, #164]	@ (80006e0 <main+0x104>)
 800063a:	2100      	movs	r1, #0
 800063c:	2001      	movs	r0, #1
 800063e:	f00c fbc5 	bl	800cdcc <osSemaphoreNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a27      	ldr	r2, [pc, #156]	@ (80006e4 <main+0x108>)
 8000646:	6013      	str	r3, [r2, #0]

  /* creation of I2cTx */
  I2cTxHandle = osSemaphoreNew(1, 0, &I2cTx_attributes);
 8000648:	4a27      	ldr	r2, [pc, #156]	@ (80006e8 <main+0x10c>)
 800064a:	2100      	movs	r1, #0
 800064c:	2001      	movs	r0, #1
 800064e:	f00c fbbd 	bl	800cdcc <osSemaphoreNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a25      	ldr	r2, [pc, #148]	@ (80006ec <main+0x110>)
 8000656:	6013      	str	r3, [r2, #0]

  /* creation of SpiTx */
  SpiTxHandle = osSemaphoreNew(1, 0, &SpiTx_attributes);
 8000658:	4a25      	ldr	r2, [pc, #148]	@ (80006f0 <main+0x114>)
 800065a:	2100      	movs	r1, #0
 800065c:	2001      	movs	r0, #1
 800065e:	f00c fbb5 	bl	800cdcc <osSemaphoreNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a23      	ldr	r2, [pc, #140]	@ (80006f4 <main+0x118>)
 8000666:	6013      	str	r3, [r2, #0]

  /* creation of SpiRx */
  SpiRxHandle = osSemaphoreNew(1, 0, &SpiRx_attributes);
 8000668:	4a23      	ldr	r2, [pc, #140]	@ (80006f8 <main+0x11c>)
 800066a:	2100      	movs	r1, #0
 800066c:	2001      	movs	r0, #1
 800066e:	f00c fbad 	bl	800cdcc <osSemaphoreNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a21      	ldr	r2, [pc, #132]	@ (80006fc <main+0x120>)
 8000676:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of testsQ */
  testsQHandle = osMessageQueueNew (16, 4, &testsQ_attributes);
 8000678:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <main+0x124>)
 800067a:	2104      	movs	r1, #4
 800067c:	2010      	movs	r0, #16
 800067e:	f00c fcff 	bl	800d080 <osMessageQueueNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a1f      	ldr	r2, [pc, #124]	@ (8000704 <main+0x128>)
 8000686:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(lwip_initiation, NULL, &defaultTask_attributes);
 8000688:	4a1f      	ldr	r2, [pc, #124]	@ (8000708 <main+0x12c>)
 800068a:	2100      	movs	r1, #0
 800068c:	481f      	ldr	r0, [pc, #124]	@ (800070c <main+0x130>)
 800068e:	f00c f981 	bl	800c994 <osThreadNew>
 8000692:	4603      	mov	r3, r0
 8000694:	4a1e      	ldr	r2, [pc, #120]	@ (8000710 <main+0x134>)
 8000696:	6013      	str	r3, [r2, #0]

  /* creation of blink_task */
  blink_taskHandle = osThreadNew(blinking_blue, NULL, &blink_task_attributes);
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <main+0x138>)
 800069a:	2100      	movs	r1, #0
 800069c:	481e      	ldr	r0, [pc, #120]	@ (8000718 <main+0x13c>)
 800069e:	f00c f979 	bl	800c994 <osThreadNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a1d      	ldr	r2, [pc, #116]	@ (800071c <main+0x140>)
 80006a6:	6013      	str	r3, [r2, #0]

  /* creation of udp_task */
  udp_taskHandle = osThreadNew(udp_function, NULL, &udp_task_attributes);
 80006a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000720 <main+0x144>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	481d      	ldr	r0, [pc, #116]	@ (8000724 <main+0x148>)
 80006ae:	f00c f971 	bl	800c994 <osThreadNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000728 <main+0x14c>)
 80006b6:	6013      	str	r3, [r2, #0]

  /* creation of performing_task */
  performing_taskHandle = osThreadNew(perform_tests, NULL, &performing_task_attributes);
 80006b8:	4a1c      	ldr	r2, [pc, #112]	@ (800072c <main+0x150>)
 80006ba:	2100      	movs	r1, #0
 80006bc:	481c      	ldr	r0, [pc, #112]	@ (8000730 <main+0x154>)
 80006be:	f00c f969 	bl	800c994 <osThreadNew>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000734 <main+0x158>)
 80006c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006c8:	f00c f906 	bl	800c8d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <main+0xf0>
 80006d0:	0802057c 	.word	0x0802057c
 80006d4:	20000b90 	.word	0x20000b90
 80006d8:	0802058c 	.word	0x0802058c
 80006dc:	20000b94 	.word	0x20000b94
 80006e0:	0802059c 	.word	0x0802059c
 80006e4:	20000b98 	.word	0x20000b98
 80006e8:	080205ac 	.word	0x080205ac
 80006ec:	20000b9c 	.word	0x20000b9c
 80006f0:	080205bc 	.word	0x080205bc
 80006f4:	20000ba0 	.word	0x20000ba0
 80006f8:	080205cc 	.word	0x080205cc
 80006fc:	20000ba4 	.word	0x20000ba4
 8000700:	08020564 	.word	0x08020564
 8000704:	20000b8c 	.word	0x20000b8c
 8000708:	080204d4 	.word	0x080204d4
 800070c:	08001031 	.word	0x08001031
 8000710:	20000b7c 	.word	0x20000b7c
 8000714:	080204f8 	.word	0x080204f8
 8000718:	08001045 	.word	0x08001045
 800071c:	20000b80 	.word	0x20000b80
 8000720:	0802051c 	.word	0x0802051c
 8000724:	08001089 	.word	0x08001089
 8000728:	20000b84 	.word	0x20000b84
 800072c:	08020540 	.word	0x08020540
 8000730:	0800109d 	.word	0x0800109d
 8000734:	20000b88 	.word	0x20000b88

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	@ 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	@ 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f01b fee4 	bl	801c514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800075c:	f006 fc18 	bl	8006f90 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	4b27      	ldr	r3, [pc, #156]	@ (8000800 <SystemClock_Config+0xc8>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a26      	ldr	r2, [pc, #152]	@ (8000800 <SystemClock_Config+0xc8>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40
 800076c:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <SystemClock_Config+0xc8>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000778:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <SystemClock_Config+0xcc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000780:	4a20      	ldr	r2, [pc, #128]	@ (8000804 <SystemClock_Config+0xcc>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <SystemClock_Config+0xcc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000798:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800079c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a8:	2304      	movs	r3, #4
 80007aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007ac:	2348      	movs	r3, #72	@ 0x48
 80007ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007b4:	2303      	movs	r3, #3
 80007b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4618      	mov	r0, r3
 80007be:	f006 fbf7 	bl	8006fb0 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c8:	f000 fcfa 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2102      	movs	r1, #2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f006 fe85 	bl	80074f8 <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007f4:	f000 fce4 	bl	80011c0 <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3750      	adds	r7, #80	@ 0x50
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800080c:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <MX_CRC_Init+0x3c>)
 800080e:	4a0e      	ldr	r2, [pc, #56]	@ (8000848 <MX_CRC_Init+0x40>)
 8000810:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_CRC_Init+0x3c>)
 8000814:	2200      	movs	r2, #0
 8000816:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <MX_CRC_Init+0x3c>)
 800081a:	2200      	movs	r2, #0
 800081c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_CRC_Init+0x3c>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <MX_CRC_Init+0x3c>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_CRC_Init+0x3c>)
 800082c:	2201      	movs	r2, #1
 800082e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_CRC_Init+0x3c>)
 8000832:	f001 fe51 	bl	80024d8 <HAL_CRC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800083c:	f000 fcc0 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200001f0 	.word	0x200001f0
 8000848:	40023000 	.word	0x40023000

0800084c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	@ (80008c4 <MX_I2C1_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	@ (80008c8 <MX_I2C1_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 240;
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800085e:	22f0      	movs	r2, #240	@ 0xf0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000888:	f004 fa14 	bl	8004cb4 <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 fc95 	bl	80011c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800089a:	f006 f9a7 	bl	8006bec <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 fc8c 	bl	80011c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_I2C1_Init+0x74>)
 80008ac:	f006 f9e9 	bl	8006c82 <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 fc83 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000214 	.word	0x20000214
 80008c4:	40005400 	.word	0x40005400
 80008c8:	00808cd2 	.word	0x00808cd2

080008cc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000944 <MX_I2C4_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000948 <MX_I2C4_Init+0x7c>)
 80008da:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80008dc:	4b18      	ldr	r3, [pc, #96]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008ee:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_I2C4_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000906:	480e      	ldr	r0, [pc, #56]	@ (8000940 <MX_I2C4_Init+0x74>)
 8000908:	f004 f9d4 	bl	8004cb4 <HAL_I2C_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000912:	f000 fc55 	bl	80011c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4809      	ldr	r0, [pc, #36]	@ (8000940 <MX_I2C4_Init+0x74>)
 800091a:	f006 f967 	bl	8006bec <HAL_I2CEx_ConfigAnalogFilter>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000924:	f000 fc4c 	bl	80011c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_I2C4_Init+0x74>)
 800092c:	f006 f9a9 	bl	8006c82 <HAL_I2CEx_ConfigDigitalFilter>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 fc43 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000268 	.word	0x20000268
 8000944:	40006000 	.word	0x40006000
 8000948:	00808cd2 	.word	0x00808cd2

0800094c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000950:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000952:	4a1c      	ldr	r2, [pc, #112]	@ (80009c4 <MX_SPI1_Init+0x78>)
 8000954:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000956:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000958:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800095c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095e:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000964:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000966:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800096a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_SPI1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_SPI1_Init+0x74>)
 800097a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800097e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000982:	2210      	movs	r2, #16
 8000984:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_SPI1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_SPI1_Init+0x74>)
 800099a:	2207      	movs	r2, #7
 800099c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_SPI1_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_SPI1_Init+0x74>)
 80009a6:	2208      	movs	r2, #8
 80009a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_SPI1_Init+0x74>)
 80009ac:	f007 fbec 	bl	8008188 <HAL_SPI_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f000 fc03 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000037c 	.word	0x2000037c
 80009c4:	40013000 	.word	0x40013000

080009c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009cc:	4b19      	ldr	r3, [pc, #100]	@ (8000a34 <MX_SPI2_Init+0x6c>)
 80009ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000a38 <MX_SPI2_Init+0x70>)
 80009d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80009d2:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <MX_SPI2_Init+0x6c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009d8:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <MX_SPI2_Init+0x6c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <MX_SPI2_Init+0x6c>)
 80009e0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80009e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e6:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <MX_SPI2_Init+0x6c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_SPI2_Init+0x6c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <MX_SPI2_Init+0x6c>)
 80009f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_SPI2_Init+0x6c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_SPI2_Init+0x6c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <MX_SPI2_Init+0x6c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_SPI2_Init+0x6c>)
 8000a0e:	2207      	movs	r2, #7
 8000a10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <MX_SPI2_Init+0x6c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_SPI2_Init+0x6c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_SPI2_Init+0x6c>)
 8000a20:	f007 fbb2 	bl	8008188 <HAL_SPI_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000a2a:	f000 fbc9 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200003e0 	.word	0x200003e0
 8000a38:	40003800 	.word	0x40003800

08000a3c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_UART4_Init+0x58>)
 8000a42:	4a15      	ldr	r2, [pc, #84]	@ (8000a98 <MX_UART4_Init+0x5c>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a46:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <MX_UART4_Init+0x58>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_UART4_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_UART4_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_UART4_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_UART4_Init+0x58>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <MX_UART4_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_UART4_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <MX_UART4_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_UART4_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_UART4_Init+0x58>)
 8000a80:	f009 f9a4 	bl	8009dcc <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a8a:	f000 fb99 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000444 	.word	0x20000444
 8000a98:	40004c00 	.word	0x40004c00

08000a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000aa2:	4a15      	ldr	r2, [pc, #84]	@ (8000af8 <MX_USART2_UART_Init+0x5c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ae0:	f009 f974 	bl	8009dcc <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aea:	f000 fb69 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200004cc 	.word	0x200004cc
 8000af8:	40004400 	.word	0x40004400

08000afc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b02:	4a15      	ldr	r2, [pc, #84]	@ (8000b58 <MX_USART3_UART_Init+0x5c>)
 8000b04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b40:	f009 f944 	bl	8009dcc <HAL_UART_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b4a:	f000 fb39 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000554 	.word	0x20000554
 8000b58:	40004800 	.word	0x40004800

08000b5c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b60:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b62:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b6a:	2206      	movs	r2, #6
 8000b6c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b70:	2202      	movs	r2, #2
 8000b72:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba0:	f006 f8bb 	bl	8006d1a <HAL_PCD_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000baa:	f000 fb09 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000069c 	.word	0x2000069c

08000bb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bbe:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <MX_DMA_Init+0x68>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a17      	ldr	r2, [pc, #92]	@ (8000c20 <MX_DMA_Init+0x68>)
 8000bc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <MX_DMA_Init+0x68>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2106      	movs	r1, #6
 8000bda:	200b      	movs	r0, #11
 8000bdc:	f001 fc44 	bl	8002468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000be0:	200b      	movs	r0, #11
 8000be2:	f001 fc5d 	bl	80024a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2106      	movs	r1, #6
 8000bea:	200d      	movs	r0, #13
 8000bec:	f001 fc3c 	bl	8002468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000bf0:	200d      	movs	r0, #13
 8000bf2:	f001 fc55 	bl	80024a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2106      	movs	r1, #6
 8000bfa:	2010      	movs	r0, #16
 8000bfc:	f001 fc34 	bl	8002468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c00:	2010      	movs	r0, #16
 8000c02:	f001 fc4d 	bl	80024a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 6, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2106      	movs	r1, #6
 8000c0a:	2011      	movs	r0, #17
 8000c0c:	f001 fc2c 	bl	8002468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c10:	2011      	movs	r0, #17
 8000c12:	f001 fc45 	bl	80024a0 <HAL_NVIC_EnableIRQ>

}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	@ 0x30
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	4b4d      	ldr	r3, [pc, #308]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a4c      	ldr	r2, [pc, #304]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b4a      	ldr	r3, [pc, #296]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	61bb      	str	r3, [r7, #24]
 8000c50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c52:	4b47      	ldr	r3, [pc, #284]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a46      	ldr	r2, [pc, #280]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b44      	ldr	r3, [pc, #272]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b41      	ldr	r3, [pc, #260]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a40      	ldr	r2, [pc, #256]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b3e      	ldr	r3, [pc, #248]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b3b      	ldr	r3, [pc, #236]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a3a      	ldr	r2, [pc, #232]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b38      	ldr	r3, [pc, #224]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c9a:	4b35      	ldr	r3, [pc, #212]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a34      	ldr	r2, [pc, #208]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000ca0:	f043 0320 	orr.w	r3, r3, #32
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b32      	ldr	r3, [pc, #200]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0320 	and.w	r3, r3, #32
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cca:	4b29      	ldr	r3, [pc, #164]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a28      	ldr	r2, [pc, #160]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b26      	ldr	r3, [pc, #152]	@ (8000d70 <MX_GPIO_Init+0x14c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ce8:	4822      	ldr	r0, [pc, #136]	@ (8000d74 <MX_GPIO_Init+0x150>)
 8000cea:	f003 ffaf 	bl	8004c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2140      	movs	r1, #64	@ 0x40
 8000cf2:	4821      	ldr	r0, [pc, #132]	@ (8000d78 <MX_GPIO_Init+0x154>)
 8000cf4:	f003 ffaa 	bl	8004c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	481b      	ldr	r0, [pc, #108]	@ (8000d7c <MX_GPIO_Init+0x158>)
 8000d10:	f003 fce4 	bl	80046dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d14:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4811      	ldr	r0, [pc, #68]	@ (8000d74 <MX_GPIO_Init+0x150>)
 8000d2e:	f003 fcd5 	bl	80046dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d32:	2340      	movs	r3, #64	@ 0x40
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	480b      	ldr	r0, [pc, #44]	@ (8000d78 <MX_GPIO_Init+0x154>)
 8000d4a:	f003 fcc7 	bl	80046dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d4e:	2380      	movs	r3, #128	@ 0x80
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <MX_GPIO_Init+0x154>)
 8000d62:	f003 fcbb 	bl	80046dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d66:	bf00      	nop
 8000d68:	3730      	adds	r7, #48	@ 0x30
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020400 	.word	0x40020400
 8000d78:	40021800 	.word	0x40021800
 8000d7c:	40020800 	.word	0x40020800

08000d80 <vApplicationStackOverflowHook>:
 *
 * @param xTask Task handle of the task whose stack overflowed.
 * @param pcTaskName Pointer to the name of the task whose stack overflowed.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
    // A stack overflow has been detected. This is a critical error.
    // The system is in an unstable state.
    // It is generally not safe to continue execution or call complex functions.

    printf("\n!!! STACK OVERFLOW DETECTED !!!\n");
 8000d8a:	4811      	ldr	r0, [pc, #68]	@ (8000dd0 <vApplicationStackOverflowHook+0x50>)
 8000d8c:	f01b fad2 	bl	801c334 <puts>
    printf("Task: %s\n", pcTaskName);
 8000d90:	6839      	ldr	r1, [r7, #0]
 8000d92:	4810      	ldr	r0, [pc, #64]	@ (8000dd4 <vApplicationStackOverflowHook+0x54>)
 8000d94:	f01b fa66 	bl	801c264 <iprintf>
    printf("Handle: 0x%lX\n", (uint32_t)xTask);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480e      	ldr	r0, [pc, #56]	@ (8000dd8 <vApplicationStackOverflowHook+0x58>)
 8000d9e:	f01b fa61 	bl	801c264 <iprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000da6:	b672      	cpsid	i
 8000da8:	f383 8811 	msr	BASEPRI, r3
 8000dac:	f3bf 8f6f 	isb	sy
 8000db0:	f3bf 8f4f 	dsb	sy
 8000db4:	b662      	cpsie	i
 8000db6:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000db8:	bf00      	nop
    // Disable interrupts to prevent further execution and potential damage
    taskDISABLE_INTERRUPTS();
    for(;;)
    {
        // RED LED toggle for visual indication
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000dba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dbe:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <vApplicationStackOverflowHook+0x5c>)
 8000dc0:	f003 ff5d 	bl	8004c7e <HAL_GPIO_TogglePin>
        osDelay(1000);
 8000dc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dc8:	f00b fe8a 	bl	800cae0 <osDelay>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000dcc:	bf00      	nop
 8000dce:	e7f4      	b.n	8000dba <vApplicationStackOverflowHook+0x3a>
 8000dd0:	0801d270 	.word	0x0801d270
 8000dd4:	0801d294 	.word	0x0801d294
 8000dd8:	0801d2a0 	.word	0x0801d2a0
 8000ddc:	40020400 	.word	0x40020400

08000de0 <udp_receive_init>:
    }
}

void udp_receive_init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	//printf("udp_receive_init() called\n");

    udp_pcb_handle = udp_new();
 8000de4:	f017 fd46 	bl	8018874 <udp_new>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a13      	ldr	r2, [pc, #76]	@ (8000e38 <udp_receive_init+0x58>)
 8000dec:	6013      	str	r3, [r2, #0]
    if (!udp_pcb_handle) {
 8000dee:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <udp_receive_init+0x58>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d103      	bne.n	8000dfe <udp_receive_init+0x1e>
        printf("Failed to create UDP PCB\n");
 8000df6:	4811      	ldr	r0, [pc, #68]	@ (8000e3c <udp_receive_init+0x5c>)
 8000df8:	f01b fa9c 	bl	801c334 <puts>
        return;
 8000dfc:	e01a      	b.n	8000e34 <udp_receive_init+0x54>
    }

    if (udp_bind(udp_pcb_handle, IP_ADDR_ANY, LOCAL_PORT) != ERR_OK) {
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <udp_receive_init+0x58>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f241 328d 	movw	r2, #5005	@ 0x138d
 8000e06:	490e      	ldr	r1, [pc, #56]	@ (8000e40 <udp_receive_init+0x60>)
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f017 fc8b 	bl	8018724 <udp_bind>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <udp_receive_init+0x3c>
        printf("UDP bind failed\n");
 8000e14:	480b      	ldr	r0, [pc, #44]	@ (8000e44 <udp_receive_init+0x64>)
 8000e16:	f01b fa8d 	bl	801c334 <puts>
        return;
 8000e1a:	e00b      	b.n	8000e34 <udp_receive_init+0x54>
    }

    udp_recv(udp_pcb_handle, udp_receive_callback, NULL);
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <udp_receive_init+0x58>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2200      	movs	r2, #0
 8000e22:	4909      	ldr	r1, [pc, #36]	@ (8000e48 <udp_receive_init+0x68>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f017 fd05 	bl	8018834 <udp_recv>
    printf("UDP ready, listening on port %d\n", LOCAL_PORT);
 8000e2a:	f241 318d 	movw	r1, #5005	@ 0x138d
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <udp_receive_init+0x6c>)
 8000e30:	f01b fa18 	bl	801c264 <iprintf>
}
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000ba8 	.word	0x20000ba8
 8000e3c:	0801d2b0 	.word	0x0801d2b0
 8000e40:	08020718 	.word	0x08020718
 8000e44:	0801d2cc 	.word	0x0801d2cc
 8000e48:	08000e51 	.word	0x08000e51
 8000e4c:	0801d2dc 	.word	0x0801d2dc

08000e50 <udp_receive_callback>:

void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	603b      	str	r3, [r7, #0]
    if (p != NULL) {
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d074      	beq.n	8000f4e <udp_receive_callback+0xfe>
        // Copy the sender's IP address
        ip_addr_copy(server_addr, *addr);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a3b      	ldr	r2, [pc, #236]	@ (8000f58 <udp_receive_callback+0x108>)
 8000e6a:	6013      	str	r3, [r2, #0]
        // Copy the sender's port
        server_port = port;
 8000e6c:	4a3b      	ldr	r2, [pc, #236]	@ (8000f5c <udp_receive_callback+0x10c>)
 8000e6e:	8c3b      	ldrh	r3, [r7, #32]
 8000e70:	8013      	strh	r3, [r2, #0]

        printf("Received from %s:%d -> %.*s\n",
 8000e72:	6838      	ldr	r0, [r7, #0]
 8000e74:	f019 f8f8 	bl	801a068 <ip4addr_ntoa>
 8000e78:	4601      	mov	r1, r0
 8000e7a:	8c3a      	ldrh	r2, [r7, #32]
               ipaddr_ntoa(addr), port, p->len, (char *)p->payload);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	895b      	ldrh	r3, [r3, #10]
        printf("Received from %s:%d -> %.*s\n",
 8000e80:	4618      	mov	r0, r3
               ipaddr_ntoa(addr), port, p->len, (char *)p->payload);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
        printf("Received from %s:%d -> %.*s\n",
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4835      	ldr	r0, [pc, #212]	@ (8000f60 <udp_receive_callback+0x110>)
 8000e8c:	f01b f9ea 	bl	801c264 <iprintf>

        if (p->len >= sizeof(test_command_t)) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	895b      	ldrh	r3, [r3, #10]
 8000e94:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8000e98:	d950      	bls.n	8000f3c <udp_receive_callback+0xec>
            test_command_t *cmd = (test_command_t *)pvPortMalloc(sizeof(test_command_t));
 8000e9a:	f240 1007 	movw	r0, #263	@ 0x107
 8000e9e:	f00f fbd3 	bl	8010648 <pvPortMalloc>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	617b      	str	r3, [r7, #20]
            if (cmd != NULL) {
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d029      	beq.n	8000f00 <udp_receive_callback+0xb0>
			   // Copy the data from the pbuf payload to the allocated memory
			   memcpy(cmd, p->payload, sizeof(test_command_t)); // Only copy the struct size
 8000eac:	6978      	ldr	r0, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f240 1207 	movw	r2, #263	@ 0x107
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f01b fbff 	bl	801c6ba <memcpy>
				// Debug print received data
				printf("Received Test Command:\n");
 8000ebc:	4829      	ldr	r0, [pc, #164]	@ (8000f64 <udp_receive_callback+0x114>)
 8000ebe:	f01b fa39 	bl	801c334 <puts>
				printf("test_id: %lu\n", cmd->test_id);
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4827      	ldr	r0, [pc, #156]	@ (8000f68 <udp_receive_callback+0x118>)
 8000eca:	f01b f9cb 	bl	801c264 <iprintf>
				printf("peripheral bitfield: 0x%02X\n", cmd->peripheral);
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	791b      	ldrb	r3, [r3, #4]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4825      	ldr	r0, [pc, #148]	@ (8000f6c <udp_receive_callback+0x11c>)
 8000ed6:	f01b f9c5 	bl	801c264 <iprintf>
				printf("iterations: %u\n", cmd->iterations);
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	795b      	ldrb	r3, [r3, #5]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4823      	ldr	r0, [pc, #140]	@ (8000f70 <udp_receive_callback+0x120>)
 8000ee2:	f01b f9bf 	bl	801c264 <iprintf>
				printf("bit pattern length: %u\n", cmd->bit_pattern_length);
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	799b      	ldrb	r3, [r3, #6]
 8000eea:	4619      	mov	r1, r3
 8000eec:	4821      	ldr	r0, [pc, #132]	@ (8000f74 <udp_receive_callback+0x124>)
 8000eee:	f01b f9b9 	bl	801c264 <iprintf>
				printf("bit pattern: %s\n",cmd->bit_pattern);
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	3307      	adds	r3, #7
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	481f      	ldr	r0, [pc, #124]	@ (8000f78 <udp_receive_callback+0x128>)
 8000efa:	f01b f9b3 	bl	801c264 <iprintf>
 8000efe:	e002      	b.n	8000f06 <udp_receive_callback+0xb6>
            }
            else{
                printf("Failed to allocate memory for test_command_t!\n");
 8000f00:	481e      	ldr	r0, [pc, #120]	@ (8000f7c <udp_receive_callback+0x12c>)
 8000f02:	f01b fa17 	bl	801c334 <puts>
            }
            // Send the POINTER to the newly allocated and copied* data to the queue
            if (xQueueSendToBack(testsQHandle, &cmd, 1) != pdPASS){ // Pass address of pointer
 8000f06:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <udp_receive_callback+0x130>)
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	f107 0114 	add.w	r1, r7, #20
 8000f0e:	2300      	movs	r3, #0
 8000f10:	2201      	movs	r2, #1
 8000f12:	f00c fd95 	bl	800da40 <xQueueGenericSend>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d007      	beq.n	8000f2c <udp_receive_callback+0xdc>
                printf("Failed to send data to tests queue.\n");
 8000f1c:	4819      	ldr	r0, [pc, #100]	@ (8000f84 <udp_receive_callback+0x134>)
 8000f1e:	f01b fa09 	bl	801c334 <puts>
                // If send fails, free the allocated memory immediately
                vPortFree(cmd);
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f00f fc5d 	bl	80107e4 <vPortFree>
 8000f2a:	e00d      	b.n	8000f48 <udp_receive_callback+0xf8>
            } else {
                // Only notify if successfully sent to queue
            	//printf("udp_receive_callback sent a command to the tests queue successfully\n");
                xTaskNotifyGive(performing_taskHandle);
 8000f2c:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <udp_receive_callback+0x138>)
 8000f2e:	6818      	ldr	r0, [r3, #0]
 8000f30:	2300      	movs	r3, #0
 8000f32:	2202      	movs	r2, #2
 8000f34:	2100      	movs	r1, #0
 8000f36:	f00e fcc7 	bl	800f8c8 <xTaskGenericNotify>
 8000f3a:	e005      	b.n	8000f48 <udp_receive_callback+0xf8>
            }
        } else {
            printf("Packet too short: %d bytes\n", p->len);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	895b      	ldrh	r3, [r3, #10]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4812      	ldr	r0, [pc, #72]	@ (8000f8c <udp_receive_callback+0x13c>)
 8000f44:	f01b f98e 	bl	801c264 <iprintf>
        }
        pbuf_free(p);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f011 faf7 	bl	801253c <pbuf_free>
    }
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200001e8 	.word	0x200001e8
 8000f5c:	200001ec 	.word	0x200001ec
 8000f60:	0801d300 	.word	0x0801d300
 8000f64:	0801d320 	.word	0x0801d320
 8000f68:	0801d338 	.word	0x0801d338
 8000f6c:	0801d348 	.word	0x0801d348
 8000f70:	0801d368 	.word	0x0801d368
 8000f74:	0801d378 	.word	0x0801d378
 8000f78:	0801d390 	.word	0x0801d390
 8000f7c:	0801d3a4 	.word	0x0801d3a4
 8000f80:	20000b8c 	.word	0x20000b8c
 8000f84:	0801d3d4 	.word	0x0801d3d4
 8000f88:	20000b88 	.word	0x20000b88
 8000f8c:	0801d3f8 	.word	0x0801d3f8

08000f90 <send_response>:

void send_response(result_pro_t result) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	463b      	mov	r3, r7
 8000f98:	e883 0003 	stmia.w	r3, {r0, r1}
    // Check if we have a valid sender address
    if (ip_addr_isany(&server_addr) == 0) {
 8000f9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <send_response+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d022      	beq.n	8000fea <send_response+0x5a>
        // Create a new pbuf for the response data
        struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, sizeof(result_pro_t), PBUF_RAM);
 8000fa4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000fa8:	2106      	movs	r1, #6
 8000faa:	2036      	movs	r0, #54	@ 0x36
 8000fac:	f010 ffe2 	bl	8011f74 <pbuf_alloc>
 8000fb0:	60f8      	str	r0, [r7, #12]
        if (p != NULL) {
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d018      	beq.n	8000fea <send_response+0x5a>
            // Copy the result struct into the pbuf payload
            memcpy(p->payload, &result, sizeof(result_pro_t));
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	6010      	str	r0, [r2, #0]
 8000fc4:	889b      	ldrh	r3, [r3, #4]
 8000fc6:	8093      	strh	r3, [r2, #4]

            // Send the response to the stored address and port
            if(udp_sendto(udp_pcb_handle, p, &server_addr, server_port) != ERR_OK){
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <send_response+0x68>)
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <send_response+0x6c>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	4a08      	ldr	r2, [pc, #32]	@ (8000ff4 <send_response+0x64>)
 8000fd2:	68f9      	ldr	r1, [r7, #12]
 8000fd4:	f017 f9f0 	bl	80183b8 <udp_sendto>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <send_response+0x54>
            	printf("sendto server failed");
 8000fde:	4808      	ldr	r0, [pc, #32]	@ (8001000 <send_response+0x70>)
 8000fe0:	f01b f940 	bl	801c264 <iprintf>
            }

            // Free the pbuf
            pbuf_free(p);
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f011 faa9 	bl	801253c <pbuf_free>
        }
    }
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001e8 	.word	0x200001e8
 8000ff8:	20000ba8 	.word	0x20000ba8
 8000ffc:	200001ec 	.word	0x200001ec
 8001000:	0801d414 	.word	0x0801d414

08001004 <calculate_crc>:


uint32_t calculate_crc(uint8_t *data, size_t length) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
    // HAL_CRC_Calculate expects 32-bit words, so convert length
    uint32_t word_count = (length + 3) / 4; // Round up
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	3303      	adds	r3, #3
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	60fb      	str	r3, [r7, #12]
    return HAL_CRC_Calculate(&hcrc, (uint32_t *)data, word_count);
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	4804      	ldr	r0, [pc, #16]	@ (800102c <calculate_crc+0x28>)
 800101c:	f001 fac0 	bl	80025a0 <HAL_CRC_Calculate>
 8001020:	4603      	mov	r3, r0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200001f0 	.word	0x200001f0

08001030 <lwip_initiation>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_lwip_initiation */
void lwip_initiation(void *argument)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001038:	f00a fdae 	bl	800bb98 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800103c:	2001      	movs	r0, #1
 800103e:	f00b fd4f 	bl	800cae0 <osDelay>
 8001042:	e7fb      	b.n	800103c <lwip_initiation+0xc>

08001044 <blinking_blue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinking_blue */
void blinking_blue(void *argument)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinking_blue */
  /* Infinite loop */
  for(;;)
  {
	/* visual heartbeat */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800104c:	2180      	movs	r1, #128	@ 0x80
 800104e:	4804      	ldr	r0, [pc, #16]	@ (8001060 <blinking_blue+0x1c>)
 8001050:	f003 fe15 	bl	8004c7e <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001054:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001058:	f00b fd42 	bl	800cae0 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800105c:	bf00      	nop
 800105e:	e7f5      	b.n	800104c <blinking_blue+0x8>
 8001060:	40020400 	.word	0x40020400

08001064 <__io_putchar>:
  /* USER CODE END blinking_blue */
}

/* USER CODE BEGIN Header_udp_function */
int __io_putchar(int ch)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800106c:	1d39      	adds	r1, r7, #4
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	2201      	movs	r2, #1
 8001074:	4803      	ldr	r0, [pc, #12]	@ (8001084 <__io_putchar+0x20>)
 8001076:	f008 fef7 	bl	8009e68 <HAL_UART_Transmit>
    return ch;
 800107a:	687b      	ldr	r3, [r7, #4]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000554 	.word	0x20000554

08001088 <udp_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_udp_function */
void udp_function(void *argument)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN udp_function */
	udp_receive_init();
 8001090:	f7ff fea6 	bl	8000de0 <udp_receive_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001094:	2001      	movs	r0, #1
 8001096:	f00b fd23 	bl	800cae0 <osDelay>
 800109a:	e7fb      	b.n	8001094 <udp_function+0xc>

0800109c <perform_tests>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_perform_tests */
void perform_tests(void *argument)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08e      	sub	sp, #56	@ 0x38
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	test_command_t *cmd;

  /* Infinite loop */
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // waiting for a notification
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	2001      	movs	r0, #1
 80010aa:	f00e fbc1 	bl	800f830 <ulTaskNotifyTake>
	//printf("perform_tests woke up!\n");

	if (xQueueReceive(testsQHandle, &cmd, 0) != pdPASS)
 80010ae:	4b39      	ldr	r3, [pc, #228]	@ (8001194 <perform_tests+0xf8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f107 011c 	add.w	r1, r7, #28
 80010b6:	2200      	movs	r2, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f00c ff07 	bl	800decc <xQueueReceive>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d003      	beq.n	80010cc <perform_tests+0x30>
	{
		printf("perform_tests: No test command received\n");
 80010c4:	4834      	ldr	r0, [pc, #208]	@ (8001198 <perform_tests+0xfc>)
 80010c6:	f01b f935 	bl	801c334 <puts>
 80010ca:	e7eb      	b.n	80010a4 <perform_tests+0x8>
		continue;
	}
	if(cmd->bit_pattern_length > MAX_BIT_PATTERN_LENGTH || cmd->test_id == NULL || cmd->iterations<1){
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <perform_tests+0x40>
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	795b      	ldrb	r3, [r3, #5]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d105      	bne.n	80010e8 <perform_tests+0x4c>
		result_pro_t response = {cmd->test_id, TEST_ERR};
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010e6:	823b      	strh	r3, [r7, #16]
//		response.test_result = TEST_ERR;
		// send response
	}
	result_pro_t response_result;
	switch (cmd->peripheral){
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	791b      	ldrb	r3, [r3, #4]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	2b0f      	cmp	r3, #15
 80010f0:	d84c      	bhi.n	800118c <perform_tests+0xf0>
 80010f2:	a201      	add	r2, pc, #4	@ (adr r2, 80010f8 <perform_tests+0x5c>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	0800118d 	.word	0x0800118d
 80010fc:	08001139 	.word	0x08001139
 8001100:	0800118d 	.word	0x0800118d
 8001104:	08001155 	.word	0x08001155
 8001108:	0800118d 	.word	0x0800118d
 800110c:	0800118d 	.word	0x0800118d
 8001110:	0800118d 	.word	0x0800118d
 8001114:	08001171 	.word	0x08001171
 8001118:	0800118d 	.word	0x0800118d
 800111c:	0800118d 	.word	0x0800118d
 8001120:	0800118d 	.word	0x0800118d
 8001124:	0800118d 	.word	0x0800118d
 8001128:	0800118d 	.word	0x0800118d
 800112c:	0800118d 	.word	0x0800118d
 8001130:	0800118d 	.word	0x0800118d
 8001134:	0800118d 	.word	0x0800118d
	case TIMER:
		break;
	case UART:
		send_response(uart_testing(cmd));
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f01a fce5 	bl	801bb10 <uart_testing>
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800114e:	f7ff ff1f 	bl	8000f90 <send_response>
		break;
 8001152:	e01b      	b.n	800118c <perform_tests+0xf0>
	case SPI:
		send_response(spi_testing(cmd));
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f01a faaf 	bl	801b6c0 <spi_testing>
 8001162:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001166:	e893 0003 	ldmia.w	r3, {r0, r1}
 800116a:	f7ff ff11 	bl	8000f90 <send_response>
		break;
 800116e:	e00d      	b.n	800118c <perform_tests+0xf0>
	case I2C:
		send_response(i2c_testing(cmd));
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f01a f80b 	bl	801b194 <i2c_testing>
 800117e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001182:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001186:	f7ff ff03 	bl	8000f90 <send_response>
		break;
 800118a:	bf00      	nop
	case ADC_P:
		break;
	default:
	}
	//vPortFree(cmd); // until i will handle it
    osDelay(1);
 800118c:	2001      	movs	r0, #1
 800118e:	f00b fca7 	bl	800cae0 <osDelay>
  {
 8001192:	e787      	b.n	80010a4 <perform_tests+0x8>
 8001194:	20000b8c 	.word	0x20000b8c
 8001198:	0801d42c 	.word	0x0801d42c

0800119c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a04      	ldr	r2, [pc, #16]	@ (80011bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d101      	bne.n	80011b2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80011ae:	f001 f83b 	bl	8002228 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40001000 	.word	0x40001000

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <Error_Handler+0x8>

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a10      	ldr	r2, [pc, #64]	@ (8001218 <HAL_MspInit+0x4c>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <HAL_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <HAL_MspInit+0x4c>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001218 <HAL_MspInit+0x4c>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f6:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <HAL_MspInit+0x4c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	210f      	movs	r1, #15
 8001206:	f06f 0001 	mvn.w	r0, #1
 800120a:	f001 f92d 	bl	8002468 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <HAL_CRC_MspInit+0x38>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10b      	bne.n	8001246 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <HAL_CRC_MspInit+0x3c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a09      	ldr	r2, [pc, #36]	@ (8001258 <HAL_CRC_MspInit+0x3c>)
 8001234:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <HAL_CRC_MspInit+0x3c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023000 	.word	0x40023000
 8001258:	40023800 	.word	0x40023800

0800125c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b0ac      	sub	sp, #176	@ 0xb0
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001274:	f107 0318 	add.w	r3, r7, #24
 8001278:	2284      	movs	r2, #132	@ 0x84
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f01b f949 	bl	801c514 <memset>
  if(hi2c->Instance==I2C1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a82      	ldr	r2, [pc, #520]	@ (8001490 <HAL_I2C_MspInit+0x234>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d17b      	bne.n	8001384 <HAL_I2C_MspInit+0x128>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800128c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001290:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001292:	2300      	movs	r3, #0
 8001294:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	4618      	mov	r0, r3
 800129c:	f006 fb84 	bl	80079a8 <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012a6:	f7ff ff8b 	bl	80011c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001494 <HAL_I2C_MspInit+0x238>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a79      	ldr	r2, [pc, #484]	@ (8001494 <HAL_I2C_MspInit+0x238>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b77      	ldr	r3, [pc, #476]	@ (8001494 <HAL_I2C_MspInit+0x238>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ca:	2312      	movs	r3, #18
 80012cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012dc:	2304      	movs	r3, #4
 80012de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012e6:	4619      	mov	r1, r3
 80012e8:	486b      	ldr	r0, [pc, #428]	@ (8001498 <HAL_I2C_MspInit+0x23c>)
 80012ea:	f003 f9f7 	bl	80046dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ee:	4b69      	ldr	r3, [pc, #420]	@ (8001494 <HAL_I2C_MspInit+0x238>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	4a68      	ldr	r2, [pc, #416]	@ (8001494 <HAL_I2C_MspInit+0x238>)
 80012f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fa:	4b66      	ldr	r3, [pc, #408]	@ (8001494 <HAL_I2C_MspInit+0x238>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001306:	4b65      	ldr	r3, [pc, #404]	@ (800149c <HAL_I2C_MspInit+0x240>)
 8001308:	4a65      	ldr	r2, [pc, #404]	@ (80014a0 <HAL_I2C_MspInit+0x244>)
 800130a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800130c:	4b63      	ldr	r3, [pc, #396]	@ (800149c <HAL_I2C_MspInit+0x240>)
 800130e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001312:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001314:	4b61      	ldr	r3, [pc, #388]	@ (800149c <HAL_I2C_MspInit+0x240>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800131a:	4b60      	ldr	r3, [pc, #384]	@ (800149c <HAL_I2C_MspInit+0x240>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001320:	4b5e      	ldr	r3, [pc, #376]	@ (800149c <HAL_I2C_MspInit+0x240>)
 8001322:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001326:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001328:	4b5c      	ldr	r3, [pc, #368]	@ (800149c <HAL_I2C_MspInit+0x240>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800132e:	4b5b      	ldr	r3, [pc, #364]	@ (800149c <HAL_I2C_MspInit+0x240>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001334:	4b59      	ldr	r3, [pc, #356]	@ (800149c <HAL_I2C_MspInit+0x240>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800133a:	4b58      	ldr	r3, [pc, #352]	@ (800149c <HAL_I2C_MspInit+0x240>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001340:	4b56      	ldr	r3, [pc, #344]	@ (800149c <HAL_I2C_MspInit+0x240>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001346:	4855      	ldr	r0, [pc, #340]	@ (800149c <HAL_I2C_MspInit+0x240>)
 8001348:	f001 fad0 	bl	80028ec <HAL_DMA_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8001352:	f7ff ff35 	bl	80011c0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a50      	ldr	r2, [pc, #320]	@ (800149c <HAL_I2C_MspInit+0x240>)
 800135a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800135c:	4a4f      	ldr	r2, [pc, #316]	@ (800149c <HAL_I2C_MspInit+0x240>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2105      	movs	r1, #5
 8001366:	201f      	movs	r0, #31
 8001368:	f001 f87e 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800136c:	201f      	movs	r0, #31
 800136e:	f001 f897 	bl	80024a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2105      	movs	r1, #5
 8001376:	2020      	movs	r0, #32
 8001378:	f001 f876 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800137c:	2020      	movs	r0, #32
 800137e:	f001 f88f 	bl	80024a0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001382:	e080      	b.n	8001486 <HAL_I2C_MspInit+0x22a>
  else if(hi2c->Instance==I2C4)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a46      	ldr	r2, [pc, #280]	@ (80014a4 <HAL_I2C_MspInit+0x248>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d17b      	bne.n	8001486 <HAL_I2C_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800138e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001392:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139a:	f107 0318 	add.w	r3, r7, #24
 800139e:	4618      	mov	r0, r3
 80013a0:	f006 fb02 	bl	80079a8 <HAL_RCCEx_PeriphCLKConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_I2C_MspInit+0x152>
      Error_Handler();
 80013aa:	f7ff ff09 	bl	80011c0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ae:	4b39      	ldr	r3, [pc, #228]	@ (8001494 <HAL_I2C_MspInit+0x238>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a38      	ldr	r2, [pc, #224]	@ (8001494 <HAL_I2C_MspInit+0x238>)
 80013b4:	f043 0320 	orr.w	r3, r3, #32
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b36      	ldr	r3, [pc, #216]	@ (8001494 <HAL_I2C_MspInit+0x238>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013c6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80013ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ce:	2312      	movs	r3, #18
 80013d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80013e0:	2304      	movs	r3, #4
 80013e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013ea:	4619      	mov	r1, r3
 80013ec:	482e      	ldr	r0, [pc, #184]	@ (80014a8 <HAL_I2C_MspInit+0x24c>)
 80013ee:	f003 f975 	bl	80046dc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80013f2:	4b28      	ldr	r3, [pc, #160]	@ (8001494 <HAL_I2C_MspInit+0x238>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	4a27      	ldr	r2, [pc, #156]	@ (8001494 <HAL_I2C_MspInit+0x238>)
 80013f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fe:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <HAL_I2C_MspInit+0x238>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c4_tx.Instance = DMA1_Stream5;
 800140a:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <HAL_I2C_MspInit+0x250>)
 800140c:	4a28      	ldr	r2, [pc, #160]	@ (80014b0 <HAL_I2C_MspInit+0x254>)
 800140e:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Channel = DMA_CHANNEL_2;
 8001410:	4b26      	ldr	r3, [pc, #152]	@ (80014ac <HAL_I2C_MspInit+0x250>)
 8001412:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001416:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001418:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <HAL_I2C_MspInit+0x250>)
 800141a:	2240      	movs	r2, #64	@ 0x40
 800141c:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800141e:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <HAL_I2C_MspInit+0x250>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001424:	4b21      	ldr	r3, [pc, #132]	@ (80014ac <HAL_I2C_MspInit+0x250>)
 8001426:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800142a:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800142c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <HAL_I2C_MspInit+0x250>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001432:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <HAL_I2C_MspInit+0x250>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001438:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <HAL_I2C_MspInit+0x250>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800143e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <HAL_I2C_MspInit+0x250>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
    hdma_i2c4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001444:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <HAL_I2C_MspInit+0x250>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 800144a:	4818      	ldr	r0, [pc, #96]	@ (80014ac <HAL_I2C_MspInit+0x250>)
 800144c:	f001 fa4e 	bl	80028ec <HAL_DMA_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_I2C_MspInit+0x1fe>
      Error_Handler();
 8001456:	f7ff feb3 	bl	80011c0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <HAL_I2C_MspInit+0x250>)
 800145e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001460:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <HAL_I2C_MspInit+0x250>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2105      	movs	r1, #5
 800146a:	205f      	movs	r0, #95	@ 0x5f
 800146c:	f000 fffc 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001470:	205f      	movs	r0, #95	@ 0x5f
 8001472:	f001 f815 	bl	80024a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	2060      	movs	r0, #96	@ 0x60
 800147c:	f000 fff4 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001480:	2060      	movs	r0, #96	@ 0x60
 8001482:	f001 f80d 	bl	80024a0 <HAL_NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	37b0      	adds	r7, #176	@ 0xb0
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40005400 	.word	0x40005400
 8001494:	40023800 	.word	0x40023800
 8001498:	40020400 	.word	0x40020400
 800149c:	200002bc 	.word	0x200002bc
 80014a0:	40026010 	.word	0x40026010
 80014a4:	40006000 	.word	0x40006000
 80014a8:	40021400 	.word	0x40021400
 80014ac:	2000031c 	.word	0x2000031c
 80014b0:	40026088 	.word	0x40026088

080014b4 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a21      	ldr	r2, [pc, #132]	@ (8001548 <HAL_I2C_MspDeInit+0x94>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d11b      	bne.n	80014fe <HAL_I2C_MspDeInit+0x4a>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80014c6:	4b21      	ldr	r3, [pc, #132]	@ (800154c <HAL_I2C_MspDeInit+0x98>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4a20      	ldr	r2, [pc, #128]	@ (800154c <HAL_I2C_MspDeInit+0x98>)
 80014cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80014d0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80014d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014d6:	481e      	ldr	r0, [pc, #120]	@ (8001550 <HAL_I2C_MspDeInit+0x9c>)
 80014d8:	f003 faac 	bl	8004a34 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80014dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e0:	481b      	ldr	r0, [pc, #108]	@ (8001550 <HAL_I2C_MspDeInit+0x9c>)
 80014e2:	f003 faa7 	bl	8004a34 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014ea:	4618      	mov	r0, r3
 80014ec:	f001 faac 	bl	8002a48 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80014f0:	201f      	movs	r0, #31
 80014f2:	f000 ffe3 	bl	80024bc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80014f6:	2020      	movs	r0, #32
 80014f8:	f000 ffe0 	bl	80024bc <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C4_MspDeInit 1 */

    /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 80014fc:	e01f      	b.n	800153e <HAL_I2C_MspDeInit+0x8a>
  else if(hi2c->Instance==I2C4)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a14      	ldr	r2, [pc, #80]	@ (8001554 <HAL_I2C_MspDeInit+0xa0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d11a      	bne.n	800153e <HAL_I2C_MspDeInit+0x8a>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8001508:	4b10      	ldr	r3, [pc, #64]	@ (800154c <HAL_I2C_MspDeInit+0x98>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150c:	4a0f      	ldr	r2, [pc, #60]	@ (800154c <HAL_I2C_MspDeInit+0x98>)
 800150e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001512:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_14);
 8001514:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001518:	480f      	ldr	r0, [pc, #60]	@ (8001558 <HAL_I2C_MspDeInit+0xa4>)
 800151a:	f003 fa8b 	bl	8004a34 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_15);
 800151e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001522:	480d      	ldr	r0, [pc, #52]	@ (8001558 <HAL_I2C_MspDeInit+0xa4>)
 8001524:	f003 fa86 	bl	8004a34 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800152c:	4618      	mov	r0, r3
 800152e:	f001 fa8b 	bl	8002a48 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8001532:	205f      	movs	r0, #95	@ 0x5f
 8001534:	f000 ffc2 	bl	80024bc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 8001538:	2060      	movs	r0, #96	@ 0x60
 800153a:	f000 ffbf 	bl	80024bc <HAL_NVIC_DisableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40005400 	.word	0x40005400
 800154c:	40023800 	.word	0x40023800
 8001550:	40020400 	.word	0x40020400
 8001554:	40006000 	.word	0x40006000
 8001558:	40021400 	.word	0x40021400

0800155c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	@ 0x38
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a52      	ldr	r2, [pc, #328]	@ (80016c4 <HAL_SPI_MspInit+0x168>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d14c      	bne.n	8001618 <HAL_SPI_MspInit+0xbc>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800157e:	4b52      	ldr	r3, [pc, #328]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	4a51      	ldr	r2, [pc, #324]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 8001584:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001588:	6453      	str	r3, [r2, #68]	@ 0x44
 800158a:	4b4f      	ldr	r3, [pc, #316]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001592:	623b      	str	r3, [r7, #32]
 8001594:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b4c      	ldr	r3, [pc, #304]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	4a4b      	ldr	r2, [pc, #300]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a2:	4b49      	ldr	r3, [pc, #292]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	4b46      	ldr	r3, [pc, #280]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a45      	ldr	r2, [pc, #276]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	4b43      	ldr	r3, [pc, #268]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	61bb      	str	r3, [r7, #24]
 80015c4:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015c6:	2360      	movs	r3, #96	@ 0x60
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015d6:	2305      	movs	r3, #5
 80015d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015de:	4619      	mov	r1, r3
 80015e0:	483a      	ldr	r0, [pc, #232]	@ (80016cc <HAL_SPI_MspInit+0x170>)
 80015e2:	f003 f87b 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015e6:	2320      	movs	r3, #32
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015f6:	2305      	movs	r3, #5
 80015f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	4833      	ldr	r0, [pc, #204]	@ (80016d0 <HAL_SPI_MspInit+0x174>)
 8001602:	f003 f86b 	bl	80046dc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2105      	movs	r1, #5
 800160a:	2023      	movs	r0, #35	@ 0x23
 800160c:	f000 ff2c 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001610:	2023      	movs	r0, #35	@ 0x23
 8001612:	f000 ff45 	bl	80024a0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001616:	e051      	b.n	80016bc <HAL_SPI_MspInit+0x160>
  else if(hspi->Instance==SPI2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a2d      	ldr	r2, [pc, #180]	@ (80016d4 <HAL_SPI_MspInit+0x178>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d14c      	bne.n	80016bc <HAL_SPI_MspInit+0x160>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001622:	4b29      	ldr	r3, [pc, #164]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	4a28      	ldr	r2, [pc, #160]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800162c:	6413      	str	r3, [r2, #64]	@ 0x40
 800162e:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	4b23      	ldr	r3, [pc, #140]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a22      	ldr	r2, [pc, #136]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b20      	ldr	r3, [pc, #128]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a1c      	ldr	r2, [pc, #112]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <HAL_SPI_MspInit+0x16c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800166a:	230c      	movs	r3, #12
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800167a:	2305      	movs	r3, #5
 800167c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001682:	4619      	mov	r1, r3
 8001684:	4814      	ldr	r0, [pc, #80]	@ (80016d8 <HAL_SPI_MspInit+0x17c>)
 8001686:	f003 f829 	bl	80046dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800168a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800169c:	2305      	movs	r3, #5
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a4:	4619      	mov	r1, r3
 80016a6:	480a      	ldr	r0, [pc, #40]	@ (80016d0 <HAL_SPI_MspInit+0x174>)
 80016a8:	f003 f818 	bl	80046dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2105      	movs	r1, #5
 80016b0:	2024      	movs	r0, #36	@ 0x24
 80016b2:	f000 fed9 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80016b6:	2024      	movs	r0, #36	@ 0x24
 80016b8:	f000 fef2 	bl	80024a0 <HAL_NVIC_EnableIRQ>
}
 80016bc:	bf00      	nop
 80016be:	3738      	adds	r7, #56	@ 0x38
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40013000 	.word	0x40013000
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40003800 	.word	0x40003800
 80016d8:	40020800 	.word	0x40020800

080016dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0b0      	sub	sp, #192	@ 0xc0
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016f8:	2284      	movs	r2, #132	@ 0x84
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f01a ff09 	bl	801c514 <memset>
  if(huart->Instance==UART4)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a9e      	ldr	r2, [pc, #632]	@ (8001980 <HAL_UART_MspInit+0x2a4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	f040 8095 	bne.w	8001838 <HAL_UART_MspInit+0x15c>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800170e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001712:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001714:	2340      	movs	r3, #64	@ 0x40
 8001716:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001718:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800171c:	4618      	mov	r0, r3
 800171e:	f006 f943 	bl	80079a8 <HAL_RCCEx_PeriphCLKConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001728:	f7ff fd4a 	bl	80011c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800172c:	4b95      	ldr	r3, [pc, #596]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001730:	4a94      	ldr	r2, [pc, #592]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 8001732:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001736:	6413      	str	r3, [r2, #64]	@ 0x40
 8001738:	4b92      	ldr	r3, [pc, #584]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b8f      	ldr	r3, [pc, #572]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001748:	4a8e      	ldr	r2, [pc, #568]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001750:	4b8c      	ldr	r3, [pc, #560]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	623b      	str	r3, [r7, #32]
 800175a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175c:	4b89      	ldr	r3, [pc, #548]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001760:	4a88      	ldr	r2, [pc, #544]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	6313      	str	r3, [r2, #48]	@ 0x30
 8001768:	4b86      	ldr	r3, [pc, #536]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001774:	2301      	movs	r3, #1
 8001776:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800178c:	2308      	movs	r3, #8
 800178e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001796:	4619      	mov	r1, r3
 8001798:	487b      	ldr	r0, [pc, #492]	@ (8001988 <HAL_UART_MspInit+0x2ac>)
 800179a:	f002 ff9f 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800179e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017b8:	2308      	movs	r3, #8
 80017ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017be:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017c2:	4619      	mov	r1, r3
 80017c4:	4871      	ldr	r0, [pc, #452]	@ (800198c <HAL_UART_MspInit+0x2b0>)
 80017c6:	f002 ff89 	bl	80046dc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80017ca:	4b71      	ldr	r3, [pc, #452]	@ (8001990 <HAL_UART_MspInit+0x2b4>)
 80017cc:	4a71      	ldr	r2, [pc, #452]	@ (8001994 <HAL_UART_MspInit+0x2b8>)
 80017ce:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80017d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001990 <HAL_UART_MspInit+0x2b4>)
 80017d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017d6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d8:	4b6d      	ldr	r3, [pc, #436]	@ (8001990 <HAL_UART_MspInit+0x2b4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017de:	4b6c      	ldr	r3, [pc, #432]	@ (8001990 <HAL_UART_MspInit+0x2b4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001990 <HAL_UART_MspInit+0x2b4>)
 80017e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ea:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ec:	4b68      	ldr	r3, [pc, #416]	@ (8001990 <HAL_UART_MspInit+0x2b4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017f2:	4b67      	ldr	r3, [pc, #412]	@ (8001990 <HAL_UART_MspInit+0x2b4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80017f8:	4b65      	ldr	r3, [pc, #404]	@ (8001990 <HAL_UART_MspInit+0x2b4>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017fe:	4b64      	ldr	r3, [pc, #400]	@ (8001990 <HAL_UART_MspInit+0x2b4>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001804:	4b62      	ldr	r3, [pc, #392]	@ (8001990 <HAL_UART_MspInit+0x2b4>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800180a:	4861      	ldr	r0, [pc, #388]	@ (8001990 <HAL_UART_MspInit+0x2b4>)
 800180c:	f001 f86e 	bl	80028ec <HAL_DMA_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001816:	f7ff fcd3 	bl	80011c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a5c      	ldr	r2, [pc, #368]	@ (8001990 <HAL_UART_MspInit+0x2b4>)
 800181e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001820:	4a5b      	ldr	r2, [pc, #364]	@ (8001990 <HAL_UART_MspInit+0x2b4>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2106      	movs	r1, #6
 800182a:	2034      	movs	r0, #52	@ 0x34
 800182c:	f000 fe1c 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001830:	2034      	movs	r0, #52	@ 0x34
 8001832:	f000 fe35 	bl	80024a0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001836:	e101      	b.n	8001a3c <HAL_UART_MspInit+0x360>
  else if(huart->Instance==USART2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a56      	ldr	r2, [pc, #344]	@ (8001998 <HAL_UART_MspInit+0x2bc>)
 800183e:	4293      	cmp	r3, r2
 8001840:	f040 80b2 	bne.w	80019a8 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001844:	2380      	movs	r3, #128	@ 0x80
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001848:	2304      	movs	r3, #4
 800184a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001850:	4618      	mov	r0, r3
 8001852:	f006 f8a9 	bl	80079a8 <HAL_RCCEx_PeriphCLKConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_UART_MspInit+0x184>
      Error_Handler();
 800185c:	f7ff fcb0 	bl	80011c0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001860:	4b48      	ldr	r3, [pc, #288]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001864:	4a47      	ldr	r2, [pc, #284]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 8001866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800186a:	6413      	str	r3, [r2, #64]	@ 0x40
 800186c:	4b45      	ldr	r3, [pc, #276]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	4b42      	ldr	r3, [pc, #264]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187c:	4a41      	ldr	r2, [pc, #260]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6313      	str	r3, [r2, #48]	@ 0x30
 8001884:	4b3f      	ldr	r3, [pc, #252]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001890:	4b3c      	ldr	r3, [pc, #240]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001894:	4a3b      	ldr	r2, [pc, #236]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 8001896:	f043 0308 	orr.w	r3, r3, #8
 800189a:	6313      	str	r3, [r2, #48]	@ 0x30
 800189c:	4b39      	ldr	r3, [pc, #228]	@ (8001984 <HAL_UART_MspInit+0x2a8>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018a8:	2308      	movs	r3, #8
 80018aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018c0:	2307      	movs	r3, #7
 80018c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018ca:	4619      	mov	r1, r3
 80018cc:	482e      	ldr	r0, [pc, #184]	@ (8001988 <HAL_UART_MspInit+0x2ac>)
 80018ce:	f002 ff05 	bl	80046dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018d2:	2320      	movs	r3, #32
 80018d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ea:	2307      	movs	r3, #7
 80018ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018f4:	4619      	mov	r1, r3
 80018f6:	4829      	ldr	r0, [pc, #164]	@ (800199c <HAL_UART_MspInit+0x2c0>)
 80018f8:	f002 fef0 	bl	80046dc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80018fc:	4b28      	ldr	r3, [pc, #160]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 80018fe:	4a29      	ldr	r2, [pc, #164]	@ (80019a4 <HAL_UART_MspInit+0x2c8>)
 8001900:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001902:	4b27      	ldr	r3, [pc, #156]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 8001904:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001908:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800190a:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 800190c:	2240      	movs	r2, #64	@ 0x40
 800190e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001910:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001916:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 8001918:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800191c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800191e:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001924:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800192a:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 800192c:	2200      	movs	r2, #0
 800192e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001930:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 8001932:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001936:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001938:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 800193a:	2204      	movs	r2, #4
 800193c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800193e:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 8001940:	2203      	movs	r2, #3
 8001942:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001944:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 8001946:	2200      	movs	r2, #0
 8001948:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 800194c:	2200      	movs	r2, #0
 800194e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001950:	4813      	ldr	r0, [pc, #76]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 8001952:	f000 ffcb 	bl	80028ec <HAL_DMA_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_UART_MspInit+0x284>
      Error_Handler();
 800195c:	f7ff fc30 	bl	80011c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a0f      	ldr	r2, [pc, #60]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 8001964:	671a      	str	r2, [r3, #112]	@ 0x70
 8001966:	4a0e      	ldr	r2, [pc, #56]	@ (80019a0 <HAL_UART_MspInit+0x2c4>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2105      	movs	r1, #5
 8001970:	2026      	movs	r0, #38	@ 0x26
 8001972:	f000 fd79 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001976:	2026      	movs	r0, #38	@ 0x26
 8001978:	f000 fd92 	bl	80024a0 <HAL_NVIC_EnableIRQ>
}
 800197c:	e05e      	b.n	8001a3c <HAL_UART_MspInit+0x360>
 800197e:	bf00      	nop
 8001980:	40004c00 	.word	0x40004c00
 8001984:	40023800 	.word	0x40023800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020800 	.word	0x40020800
 8001990:	200005dc 	.word	0x200005dc
 8001994:	40026040 	.word	0x40026040
 8001998:	40004400 	.word	0x40004400
 800199c:	40020c00 	.word	0x40020c00
 80019a0:	2000063c 	.word	0x2000063c
 80019a4:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a25      	ldr	r2, [pc, #148]	@ (8001a44 <HAL_UART_MspInit+0x368>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d144      	bne.n	8001a3c <HAL_UART_MspInit+0x360>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019c0:	4618      	mov	r0, r3
 80019c2:	f005 fff1 	bl	80079a8 <HAL_RCCEx_PeriphCLKConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_UART_MspInit+0x2f4>
      Error_Handler();
 80019cc:	f7ff fbf8 	bl	80011c0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a48 <HAL_UART_MspInit+0x36c>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a48 <HAL_UART_MspInit+0x36c>)
 80019d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019da:	6413      	str	r3, [r2, #64]	@ 0x40
 80019dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <HAL_UART_MspInit+0x36c>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e8:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <HAL_UART_MspInit+0x36c>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ec:	4a16      	ldr	r2, [pc, #88]	@ (8001a48 <HAL_UART_MspInit+0x36c>)
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <HAL_UART_MspInit+0x36c>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a20:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a24:	4619      	mov	r1, r3
 8001a26:	4809      	ldr	r0, [pc, #36]	@ (8001a4c <HAL_UART_MspInit+0x370>)
 8001a28:	f002 fe58 	bl	80046dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2105      	movs	r1, #5
 8001a30:	2027      	movs	r0, #39	@ 0x27
 8001a32:	f000 fd19 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a36:	2027      	movs	r0, #39	@ 0x27
 8001a38:	f000 fd32 	bl	80024a0 <HAL_NVIC_EnableIRQ>
}
 8001a3c:	bf00      	nop
 8001a3e:	37c0      	adds	r7, #192	@ 0xc0
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40004800 	.word	0x40004800
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020c00 	.word	0x40020c00

08001a50 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b0ac      	sub	sp, #176	@ 0xb0
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a68:	f107 0318 	add.w	r3, r7, #24
 8001a6c:	2284      	movs	r2, #132	@ 0x84
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f01a fd4f 	bl	801c514 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a7e:	d159      	bne.n	8001b34 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001a80:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a8c:	f107 0318 	add.w	r3, r7, #24
 8001a90:	4618      	mov	r0, r3
 8001a92:	f005 ff89 	bl	80079a8 <HAL_RCCEx_PeriphCLKConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001a9c:	f7ff fb90 	bl	80011c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa0:	4b26      	ldr	r3, [pc, #152]	@ (8001b3c <HAL_PCD_MspInit+0xec>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa4:	4a25      	ldr	r2, [pc, #148]	@ (8001b3c <HAL_PCD_MspInit+0xec>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aac:	4b23      	ldr	r3, [pc, #140]	@ (8001b3c <HAL_PCD_MspInit+0xec>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ab8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001abc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001adc:	4619      	mov	r1, r3
 8001ade:	4818      	ldr	r0, [pc, #96]	@ (8001b40 <HAL_PCD_MspInit+0xf0>)
 8001ae0:	f002 fdfc 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ae4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001afc:	4619      	mov	r1, r3
 8001afe:	4810      	ldr	r0, [pc, #64]	@ (8001b40 <HAL_PCD_MspInit+0xf0>)
 8001b00:	f002 fdec 	bl	80046dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b04:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <HAL_PCD_MspInit+0xec>)
 8001b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b08:	4a0c      	ldr	r2, [pc, #48]	@ (8001b3c <HAL_PCD_MspInit+0xec>)
 8001b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b0e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b10:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <HAL_PCD_MspInit+0xec>)
 8001b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <HAL_PCD_MspInit+0xec>)
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b20:	4a06      	ldr	r2, [pc, #24]	@ (8001b3c <HAL_PCD_MspInit+0xec>)
 8001b22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b26:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b28:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <HAL_PCD_MspInit+0xec>)
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001b34:	bf00      	nop
 8001b36:	37b0      	adds	r7, #176	@ 0xb0
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020000 	.word	0x40020000

08001b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08e      	sub	sp, #56	@ 0x38
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b54:	4b33      	ldr	r3, [pc, #204]	@ (8001c24 <HAL_InitTick+0xe0>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b58:	4a32      	ldr	r2, [pc, #200]	@ (8001c24 <HAL_InitTick+0xe0>)
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
 8001b5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b60:	4b30      	ldr	r3, [pc, #192]	@ (8001c24 <HAL_InitTick+0xe0>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b6c:	f107 0210 	add.w	r2, r7, #16
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f005 fee4 	bl	8007944 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d103      	bne.n	8001b8e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b86:	f005 feb5 	bl	80078f4 <HAL_RCC_GetPCLK1Freq>
 8001b8a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b8c:	e004      	b.n	8001b98 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b8e:	f005 feb1 	bl	80078f4 <HAL_RCC_GetPCLK1Freq>
 8001b92:	4603      	mov	r3, r0
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b9a:	4a23      	ldr	r2, [pc, #140]	@ (8001c28 <HAL_InitTick+0xe4>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	0c9b      	lsrs	r3, r3, #18
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	@ (8001c2c <HAL_InitTick+0xe8>)
 8001ba8:	4a21      	ldr	r2, [pc, #132]	@ (8001c30 <HAL_InitTick+0xec>)
 8001baa:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <HAL_InitTick+0xe8>)
 8001bae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bb2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <HAL_InitTick+0xe8>)
 8001bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <HAL_InitTick+0xe8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <HAL_InitTick+0xe8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc6:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <HAL_InitTick+0xe8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001bcc:	4817      	ldr	r0, [pc, #92]	@ (8001c2c <HAL_InitTick+0xe8>)
 8001bce:	f007 fe2f 	bl	8009830 <HAL_TIM_Base_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001bd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d11b      	bne.n	8001c18 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001be0:	4812      	ldr	r0, [pc, #72]	@ (8001c2c <HAL_InitTick+0xe8>)
 8001be2:	f007 fe87 	bl	80098f4 <HAL_TIM_Base_Start_IT>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001bec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d111      	bne.n	8001c18 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bf4:	2036      	movs	r0, #54	@ 0x36
 8001bf6:	f000 fc53 	bl	80024a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d808      	bhi.n	8001c12 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001c00:	2200      	movs	r2, #0
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	2036      	movs	r0, #54	@ 0x36
 8001c06:	f000 fc2f 	bl	8002468 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <HAL_InitTick+0xf0>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e002      	b.n	8001c18 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3738      	adds	r7, #56	@ 0x38
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	431bde83 	.word	0x431bde83
 8001c2c:	20000bac 	.word	0x20000bac
 8001c30:	40001000 	.word	0x40001000
 8001c34:	20000004 	.word	0x20000004

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <NMI_Handler+0x4>

08001c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("!!! HARD FAULT HANDLER !!!\n");
 8001c46:	4809      	ldr	r0, [pc, #36]	@ (8001c6c <HardFault_Handler+0x2c>)
 8001c48:	f01a fb74 	bl	801c334 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    // RED LED toggle for visual indication
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001c4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c50:	4807      	ldr	r0, [pc, #28]	@ (8001c70 <HardFault_Handler+0x30>)
 8001c52:	f003 f814 	bl	8004c7e <HAL_GPIO_TogglePin>
  	for(volatile int i=0; i<1000000; i++);
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	e002      	b.n	8001c62 <HardFault_Handler+0x22>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a03      	ldr	r2, [pc, #12]	@ (8001c74 <HardFault_Handler+0x34>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	ddf8      	ble.n	8001c5c <HardFault_Handler+0x1c>
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001c6a:	e7ef      	b.n	8001c4c <HardFault_Handler+0xc>
 8001c6c:	0801d454 	.word	0x0801d454
 8001c70:	40020400 	.word	0x40020400
 8001c74:	000f423f 	.word	0x000f423f

08001c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n");
 8001c7c:	4802      	ldr	r0, [pc, #8]	@ (8001c88 <MemManage_Handler+0x10>)
 8001c7e:	f01a fb59 	bl	801c334 <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c82:	bf00      	nop
 8001c84:	e7fd      	b.n	8001c82 <MemManage_Handler+0xa>
 8001c86:	bf00      	nop
 8001c88:	0801d454 	.word	0x0801d454

08001c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n");
 8001c90:	4802      	ldr	r0, [pc, #8]	@ (8001c9c <BusFault_Handler+0x10>)
 8001c92:	f01a fb4f 	bl	801c334 <puts>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c96:	bf00      	nop
 8001c98:	e7fd      	b.n	8001c96 <BusFault_Handler+0xa>
 8001c9a:	bf00      	nop
 8001c9c:	0801d454 	.word	0x0801d454

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001cbc:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <DMA1_Stream0_IRQHandler+0x10>)
 8001cbe:	f001 f813 	bl	8002ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200002bc 	.word	0x200002bc

08001ccc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001cd0:	4802      	ldr	r0, [pc, #8]	@ (8001cdc <DMA1_Stream2_IRQHandler+0x10>)
 8001cd2:	f001 f809 	bl	8002ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200005dc 	.word	0x200005dc

08001ce0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8001ce4:	4802      	ldr	r0, [pc, #8]	@ (8001cf0 <DMA1_Stream5_IRQHandler+0x10>)
 8001ce6:	f000 ffff 	bl	8002ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000031c 	.word	0x2000031c

08001cf4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <DMA1_Stream6_IRQHandler+0x10>)
 8001cfa:	f000 fff5 	bl	8002ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000063c 	.word	0x2000063c

08001d08 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <I2C1_EV_IRQHandler+0x10>)
 8001d0e:	f003 fa67 	bl	80051e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000214 	.word	0x20000214

08001d1c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d20:	4802      	ldr	r0, [pc, #8]	@ (8001d2c <I2C1_ER_IRQHandler+0x10>)
 8001d22:	f003 fa77 	bl	8005214 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000214 	.word	0x20000214

08001d30 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001d34:	4802      	ldr	r0, [pc, #8]	@ (8001d40 <SPI1_IRQHandler+0x10>)
 8001d36:	f006 fe97 	bl	8008a68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000037c 	.word	0x2000037c

08001d44 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001d48:	4802      	ldr	r0, [pc, #8]	@ (8001d54 <SPI2_IRQHandler+0x10>)
 8001d4a:	f006 fe8d 	bl	8008a68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200003e0 	.word	0x200003e0

08001d58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d5c:	4802      	ldr	r0, [pc, #8]	@ (8001d68 <USART2_IRQHandler+0x10>)
 8001d5e:	f008 fa5f 	bl	800a220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200004cc 	.word	0x200004cc

08001d6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d70:	4802      	ldr	r0, [pc, #8]	@ (8001d7c <USART3_IRQHandler+0x10>)
 8001d72:	f008 fa55 	bl	800a220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000554 	.word	0x20000554

08001d80 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001d84:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <UART4_IRQHandler+0x10>)
 8001d86:	f008 fa4b 	bl	800a220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000444 	.word	0x20000444

08001d94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <TIM6_DAC_IRQHandler+0x10>)
 8001d9a:	f007 fe23 	bl	80099e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000bac 	.word	0x20000bac

08001da8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
//	printf("ETH_IRQHandler was called\n");
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <ETH_IRQHandler+0x10>)
 8001dae:	f001 fdad 	bl	800390c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20009f84 	.word	0x20009f84

08001dbc <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001dc0:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <ETH_WKUP_IRQHandler+0x10>)
 8001dc2:	f001 fda3 	bl	800390c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20009f84 	.word	0x20009f84

08001dd0 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <I2C4_EV_IRQHandler+0x10>)
 8001dd6:	f003 fa03 	bl	80051e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000268 	.word	0x20000268

08001de4 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001de8:	4802      	ldr	r0, [pc, #8]	@ (8001df4 <I2C4_ER_IRQHandler+0x10>)
 8001dea:	f003 fa13 	bl	8005214 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000268 	.word	0x20000268

08001df8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return 1;
 8001dfc:	2301      	movs	r3, #1
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_kill>:

int _kill(int pid, int sig)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e12:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <_kill+0x20>)
 8001e14:	2216      	movs	r2, #22
 8001e16:	601a      	str	r2, [r3, #0]
  return -1;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	20027828 	.word	0x20027828

08001e2c <_exit>:

void _exit (int status)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ffe5 	bl	8001e08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e3e:	bf00      	nop
 8001e40:	e7fd      	b.n	8001e3e <_exit+0x12>

08001e42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	e00a      	b.n	8001e6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e54:	f3af 8000 	nop.w
 8001e58:	4601      	mov	r1, r0
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	60ba      	str	r2, [r7, #8]
 8001e60:	b2ca      	uxtb	r2, r1
 8001e62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	3301      	adds	r3, #1
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	dbf0      	blt.n	8001e54 <_read+0x12>
  }

  return len;
 8001e72:	687b      	ldr	r3, [r7, #4]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	e009      	b.n	8001ea2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	60ba      	str	r2, [r7, #8]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff f8e4 	bl	8001064 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	dbf1      	blt.n	8001e8e <_write+0x12>
  }
  return len;
 8001eaa:	687b      	ldr	r3, [r7, #4]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_close>:

int _close(int file)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001edc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <_isatty>:

int _isatty(int file)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ef4:	2301      	movs	r3, #1
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b085      	sub	sp, #20
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f24:	4a14      	ldr	r2, [pc, #80]	@ (8001f78 <_sbrk+0x5c>)
 8001f26:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <_sbrk+0x60>)
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f30:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <_sbrk+0x64>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	@ (8001f84 <_sbrk+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <_sbrk+0x64>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d205      	bcs.n	8001f58 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <_sbrk+0x6c>)
 8001f4e:	220c      	movs	r2, #12
 8001f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	e009      	b.n	8001f6c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f58:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <_sbrk+0x64>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	4a06      	ldr	r2, [pc, #24]	@ (8001f80 <_sbrk+0x64>)
 8001f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	20050000 	.word	0x20050000
 8001f7c:	00000400 	.word	0x00000400
 8001f80:	20000bf8 	.word	0x20000bf8
 8001f84:	20027838 	.word	0x20027838
 8001f88:	20027828 	.word	0x20027828

08001f8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <SystemInit+0x20>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f96:	4a05      	ldr	r2, [pc, #20]	@ (8001fac <SystemInit+0x20>)
 8001f98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fe8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fb4:	f7ff ffea 	bl	8001f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fb8:	480c      	ldr	r0, [pc, #48]	@ (8001fec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fba:	490d      	ldr	r1, [pc, #52]	@ (8001ff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc0:	e002      	b.n	8001fc8 <LoopCopyDataInit>

08001fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc6:	3304      	adds	r3, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fcc:	d3f9      	bcc.n	8001fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fce:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ffc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd4:	e001      	b.n	8001fda <LoopFillZerobss>

08001fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd8:	3204      	adds	r2, #4

08001fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fdc:	d3fb      	bcc.n	8001fd6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001fde:	f01a fb45 	bl	801c66c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fe2:	f7fe fafb 	bl	80005dc <main>
  bx  lr    
 8001fe6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fe8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001ff4:	08020818 	.word	0x08020818
  ldr r2, =_sbss
 8001ff8:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001ffc:	20027838 	.word	0x20027838

08002000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002000:	e7fe      	b.n	8002000 <ADC_IRQHandler>

08002002 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00b      	beq.n	800202a <LAN8742_RegisterBusIO+0x28>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <LAN8742_RegisterBusIO+0x28>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <LAN8742_RegisterBusIO+0x28>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	e014      	b.n	800205a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d139      	bne.n	80020f6 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2220      	movs	r2, #32
 8002094:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e01c      	b.n	80020d6 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	f107 020c 	add.w	r2, r7, #12
 80020a4:	2112      	movs	r1, #18
 80020a6:	6978      	ldr	r0, [r7, #20]
 80020a8:	4798      	blx	r3
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	da03      	bge.n	80020b8 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80020b0:	f06f 0304 	mvn.w	r3, #4
 80020b4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80020b6:	e00b      	b.n	80020d0 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d105      	bne.n	80020d0 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
         break;
 80020ce:	e005      	b.n	80020dc <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	3301      	adds	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b1f      	cmp	r3, #31
 80020da:	d9df      	bls.n	800209c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b1f      	cmp	r3, #31
 80020e2:	d902      	bls.n	80020ea <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80020e4:	f06f 0302 	mvn.w	r3, #2
 80020e8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80020f6:	693b      	ldr	r3, [r7, #16]
 }
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6810      	ldr	r0, [r2, #0]
 8002114:	f107 020c 	add.w	r2, r7, #12
 8002118:	2101      	movs	r1, #1
 800211a:	4798      	blx	r3
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	da02      	bge.n	8002128 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002122:	f06f 0304 	mvn.w	r3, #4
 8002126:	e06e      	b.n	8002206 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6810      	ldr	r0, [r2, #0]
 8002130:	f107 020c 	add.w	r2, r7, #12
 8002134:	2101      	movs	r1, #1
 8002136:	4798      	blx	r3
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	da02      	bge.n	8002144 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800213e:	f06f 0304 	mvn.w	r3, #4
 8002142:	e060      	b.n	8002206 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800214e:	2301      	movs	r3, #1
 8002150:	e059      	b.n	8002206 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6810      	ldr	r0, [r2, #0]
 800215a:	f107 020c 	add.w	r2, r7, #12
 800215e:	2100      	movs	r1, #0
 8002160:	4798      	blx	r3
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	da02      	bge.n	800216e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002168:	f06f 0304 	mvn.w	r3, #4
 800216c:	e04b      	b.n	8002206 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d11b      	bne.n	80021b0 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <LAN8742_GetLinkState+0x90>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800218c:	2302      	movs	r3, #2
 800218e:	e03a      	b.n	8002206 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800219a:	2303      	movs	r3, #3
 800219c:	e033      	b.n	8002206 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80021a8:	2304      	movs	r3, #4
 80021aa:	e02c      	b.n	8002206 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80021ac:	2305      	movs	r3, #5
 80021ae:	e02a      	b.n	8002206 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6810      	ldr	r0, [r2, #0]
 80021b8:	f107 020c 	add.w	r2, r7, #12
 80021bc:	211f      	movs	r1, #31
 80021be:	4798      	blx	r3
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	da02      	bge.n	80021cc <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80021c6:	f06f 0304 	mvn.w	r3, #4
 80021ca:	e01c      	b.n	8002206 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80021d6:	2306      	movs	r3, #6
 80021d8:	e015      	b.n	8002206 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f003 031c 	and.w	r3, r3, #28
 80021e0:	2b18      	cmp	r3, #24
 80021e2:	d101      	bne.n	80021e8 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80021e4:	2302      	movs	r3, #2
 80021e6:	e00e      	b.n	8002206 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 031c 	and.w	r3, r3, #28
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d101      	bne.n	80021f6 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e007      	b.n	8002206 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 031c 	and.w	r3, r3, #28
 80021fc:	2b14      	cmp	r3, #20
 80021fe:	d101      	bne.n	8002204 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002200:	2304      	movs	r3, #4
 8002202:	e000      	b.n	8002206 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002204:	2305      	movs	r3, #5
    }
  }
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002212:	2003      	movs	r0, #3
 8002214:	f000 f91d 	bl	8002452 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002218:	200f      	movs	r0, #15
 800221a:	f7ff fc93 	bl	8001b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800221e:	f7fe ffd5 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_IncTick+0x20>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_IncTick+0x24>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4413      	add	r3, r2
 8002238:	4a04      	ldr	r2, [pc, #16]	@ (800224c <HAL_IncTick+0x24>)
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000008 	.word	0x20000008
 800224c:	20000bfc 	.word	0x20000bfc

08002250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return uwTick;
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <HAL_GetTick+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000bfc 	.word	0x20000bfc

08002268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff ffee 	bl	8002250 <HAL_GetTick>
 8002274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d005      	beq.n	800228e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002282:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <HAL_Delay+0x44>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800228e:	bf00      	nop
 8002290:	f7ff ffde 	bl	8002250 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	429a      	cmp	r2, r3
 800229e:	d8f7      	bhi.n	8002290 <HAL_Delay+0x28>
  {
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000008 	.word	0x20000008

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <__NVIC_SetPriorityGrouping+0x40>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022d8:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022de:	4a04      	ldr	r2, [pc, #16]	@ (80022f0 <__NVIC_SetPriorityGrouping+0x40>)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	60d3      	str	r3, [r2, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00
 80022f4:	05fa0000 	.word	0x05fa0000

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4907      	ldr	r1, [pc, #28]	@ (800234c <__NVIC_EnableIRQ+0x38>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db12      	blt.n	8002388 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	490a      	ldr	r1, [pc, #40]	@ (8002394 <__NVIC_DisableIRQ+0x44>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2001      	movs	r0, #1
 8002372:	fa00 f202 	lsl.w	r2, r0, r2
 8002376:	3320      	adds	r3, #32
 8002378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800237c:	f3bf 8f4f 	dsb	sy
}
 8002380:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002382:	f3bf 8f6f 	isb	sy
}
 8002386:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100

08002398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db0a      	blt.n	80023c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	490c      	ldr	r1, [pc, #48]	@ (80023e4 <__NVIC_SetPriority+0x4c>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c0:	e00a      	b.n	80023d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4908      	ldr	r1, [pc, #32]	@ (80023e8 <__NVIC_SetPriority+0x50>)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3b04      	subs	r3, #4
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	761a      	strb	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	@ 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f1c3 0307 	rsb	r3, r3, #7
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf28      	it	cs
 800240a:	2304      	movcs	r3, #4
 800240c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3304      	adds	r3, #4
 8002412:	2b06      	cmp	r3, #6
 8002414:	d902      	bls.n	800241c <NVIC_EncodePriority+0x30>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3b03      	subs	r3, #3
 800241a:	e000      	b.n	800241e <NVIC_EncodePriority+0x32>
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	401a      	ands	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002434:	f04f 31ff 	mov.w	r1, #4294967295
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43d9      	mvns	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	4313      	orrs	r3, r2
         );
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	@ 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ff28 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800247a:	f7ff ff3d 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 800247e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	6978      	ldr	r0, [r7, #20]
 8002486:	f7ff ffb1 	bl	80023ec <NVIC_EncodePriority>
 800248a:	4602      	mov	r2, r0
 800248c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff80 	bl	8002398 <__NVIC_SetPriority>
}
 8002498:	bf00      	nop
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ff30 	bl	8002314 <__NVIC_EnableIRQ>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ff40 	bl	8002350 <__NVIC_DisableIRQ>
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e054      	b.n	8002594 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7f5b      	ldrb	r3, [r3, #29]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe fe8e 	bl	800121c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	791b      	ldrb	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10c      	bne.n	8002528 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a22      	ldr	r2, [pc, #136]	@ (800259c <HAL_CRC_Init+0xc4>)
 8002514:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0218 	bic.w	r2, r2, #24
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	e00c      	b.n	8002542 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	461a      	mov	r2, r3
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f94c 	bl	80027d0 <HAL_CRCEx_Polynomial_Set>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e028      	b.n	8002594 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	795b      	ldrb	r3, [r3, #5]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d105      	bne.n	8002556 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f04f 32ff 	mov.w	r2, #4294967295
 8002552:	611a      	str	r2, [r3, #16]
 8002554:	e004      	b.n	8002560 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6912      	ldr	r2, [r2, #16]
 800255e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699a      	ldr	r2, [r3, #24]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	04c11db7 	.word	0x04c11db7

080025a0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2202      	movs	r2, #2
 80025b4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0201 	orr.w	r2, r2, #1
 80025c4:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d006      	beq.n	80025dc <HAL_CRC_Calculate+0x3c>
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d829      	bhi.n	8002626 <HAL_CRC_Calculate+0x86>
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d019      	beq.n	800260a <HAL_CRC_Calculate+0x6a>
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d01e      	beq.n	8002618 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80025da:	e024      	b.n	8002626 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e00a      	b.n	80025f8 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	441a      	add	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	3301      	adds	r3, #1
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d3f0      	bcc.n	80025e2 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	613b      	str	r3, [r7, #16]
      break;
 8002608:	e00e      	b.n	8002628 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f812 	bl	8002638 <CRC_Handle_8>
 8002614:	6138      	str	r0, [r7, #16]
      break;
 8002616:	e007      	b.n	8002628 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f89d 	bl	800275c <CRC_Handle_16>
 8002622:	6138      	str	r0, [r7, #16]
      break;
 8002624:	e000      	b.n	8002628 <HAL_CRC_Calculate+0x88>
      break;
 8002626:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800262e:	693b      	ldr	r3, [r7, #16]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	@ 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	e023      	b.n	8002692 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	4413      	add	r3, r2
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	3301      	adds	r3, #1
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	440b      	add	r3, r1
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002664:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	3302      	adds	r3, #2
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	440b      	add	r3, r1
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002674:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	3303      	adds	r3, #3
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	440b      	add	r3, r1
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002688:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800268a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	3301      	adds	r3, #1
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	429a      	cmp	r2, r3
 800269a:	d3d6      	bcc.n	800264a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d051      	beq.n	800274a <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d108      	bne.n	80026c2 <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	4413      	add	r3, r2
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	7013      	strb	r3, [r2, #0]
 80026c0:	e043      	b.n	800274a <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d118      	bne.n	80026fe <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	4413      	add	r3, r2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b21b      	sxth	r3, r3
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	b21a      	sxth	r2, r3
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	3301      	adds	r3, #1
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	440b      	add	r3, r1
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	b21b      	sxth	r3, r3
 80026ea:	4313      	orrs	r3, r2
 80026ec:	b21b      	sxth	r3, r3
 80026ee:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	8b7a      	ldrh	r2, [r7, #26]
 80026fa:	801a      	strh	r2, [r3, #0]
 80026fc:	e025      	b.n	800274a <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b03      	cmp	r3, #3
 8002706:	d120      	bne.n	800274a <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	4413      	add	r3, r2
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b21b      	sxth	r3, r3
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	b21a      	sxth	r2, r3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	3301      	adds	r3, #1
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	440b      	add	r3, r1
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	b21b      	sxth	r3, r3
 8002726:	4313      	orrs	r3, r2
 8002728:	b21b      	sxth	r3, r3
 800272a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	8b7a      	ldrh	r2, [r7, #26]
 8002736:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	3302      	adds	r3, #2
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	4413      	add	r3, r2
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3724      	adds	r7, #36	@ 0x24
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	e013      	b.n	8002796 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	4413      	add	r3, r2
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	041a      	lsls	r2, r3, #16
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	440b      	add	r3, r1
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	4619      	mov	r1, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	3301      	adds	r3, #1
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	429a      	cmp	r2, r3
 800279e:	d3e6      	bcc.n	800276e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	4413      	add	r3, r2
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80027e0:	231f      	movs	r3, #31
 80027e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	75fb      	strb	r3, [r7, #23]
 80027f2:	e063      	b.n	80028bc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80027f4:	bf00      	nop
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1e5a      	subs	r2, r3, #1
 80027fa:	613a      	str	r2, [r7, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <HAL_CRCEx_Polynomial_Set+0x44>
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b18      	cmp	r3, #24
 8002818:	d846      	bhi.n	80028a8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800281a:	a201      	add	r2, pc, #4	@ (adr r2, 8002820 <HAL_CRCEx_Polynomial_Set+0x50>)
 800281c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002820:	080028af 	.word	0x080028af
 8002824:	080028a9 	.word	0x080028a9
 8002828:	080028a9 	.word	0x080028a9
 800282c:	080028a9 	.word	0x080028a9
 8002830:	080028a9 	.word	0x080028a9
 8002834:	080028a9 	.word	0x080028a9
 8002838:	080028a9 	.word	0x080028a9
 800283c:	080028a9 	.word	0x080028a9
 8002840:	0800289d 	.word	0x0800289d
 8002844:	080028a9 	.word	0x080028a9
 8002848:	080028a9 	.word	0x080028a9
 800284c:	080028a9 	.word	0x080028a9
 8002850:	080028a9 	.word	0x080028a9
 8002854:	080028a9 	.word	0x080028a9
 8002858:	080028a9 	.word	0x080028a9
 800285c:	080028a9 	.word	0x080028a9
 8002860:	08002891 	.word	0x08002891
 8002864:	080028a9 	.word	0x080028a9
 8002868:	080028a9 	.word	0x080028a9
 800286c:	080028a9 	.word	0x080028a9
 8002870:	080028a9 	.word	0x080028a9
 8002874:	080028a9 	.word	0x080028a9
 8002878:	080028a9 	.word	0x080028a9
 800287c:	080028a9 	.word	0x080028a9
 8002880:	08002885 	.word	0x08002885
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	2b06      	cmp	r3, #6
 8002888:	d913      	bls.n	80028b2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800288e:	e010      	b.n	80028b2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	2b07      	cmp	r3, #7
 8002894:	d90f      	bls.n	80028b6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800289a:	e00c      	b.n	80028b6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	2b0f      	cmp	r3, #15
 80028a0:	d90b      	bls.n	80028ba <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80028a6:	e008      	b.n	80028ba <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	75fb      	strb	r3, [r7, #23]
        break;
 80028ac:	e006      	b.n	80028bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80028ae:	bf00      	nop
 80028b0:	e004      	b.n	80028bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80028b2:	bf00      	nop
 80028b4:	e002      	b.n	80028bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80028ba:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10d      	bne.n	80028de <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 0118 	bic.w	r1, r3, #24
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	430a      	orrs	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80028de:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	371c      	adds	r7, #28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028f8:	f7ff fcaa 	bl	8002250 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e099      	b.n	8002a3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002928:	e00f      	b.n	800294a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800292a:	f7ff fc91 	bl	8002250 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b05      	cmp	r3, #5
 8002936:	d908      	bls.n	800294a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2220      	movs	r2, #32
 800293c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2203      	movs	r2, #3
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e078      	b.n	8002a3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1e8      	bne.n	800292a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4b38      	ldr	r3, [pc, #224]	@ (8002a44 <HAL_DMA_Init+0x158>)
 8002964:	4013      	ands	r3, r2
 8002966:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002976:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002982:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800298e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4313      	orrs	r3, r2
 800299a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d107      	bne.n	80029b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ac:	4313      	orrs	r3, r2
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f023 0307 	bic.w	r3, r3, #7
 80029ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d117      	bne.n	8002a0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00e      	beq.n	8002a0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fb81 	bl	80030f8 <DMA_CheckFifoParam>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2240      	movs	r2, #64	@ 0x40
 8002a00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e016      	b.n	8002a3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fb38 	bl	800308c <DMA_CalcBaseAndBitshift>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a24:	223f      	movs	r2, #63	@ 0x3f
 8002a26:	409a      	lsls	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	f010803f 	.word	0xf010803f

08002a48 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e050      	b.n	8002afc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d101      	bne.n	8002a6a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
 8002a68:	e048      	b.n	8002afc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0201 	bic.w	r2, r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2200      	movs	r2, #0
 8002a98:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2221      	movs	r2, #33	@ 0x21
 8002aa8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 faee 	bl	800308c <DMA_CalcBaseAndBitshift>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab8:	223f      	movs	r2, #63	@ 0x3f
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_DMA_Start_IT+0x26>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e048      	b.n	8002bbc <HAL_DMA_Start_IT+0xb8>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d137      	bne.n	8002bae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2202      	movs	r2, #2
 8002b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fa6c 	bl	8003030 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5c:	223f      	movs	r2, #63	@ 0x3f
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0216 	orr.w	r2, r2, #22
 8002b72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b82:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0208 	orr.w	r2, r2, #8
 8002b9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e005      	b.n	8002bba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bd2:	f7ff fb3d 	bl	8002250 <HAL_GetTick>
 8002bd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d008      	beq.n	8002bf6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2280      	movs	r2, #128	@ 0x80
 8002be8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e052      	b.n	8002c9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0216 	bic.w	r2, r2, #22
 8002c04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d103      	bne.n	8002c26 <HAL_DMA_Abort+0x62>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0208 	bic.w	r2, r2, #8
 8002c34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0201 	bic.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c46:	e013      	b.n	8002c70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c48:	f7ff fb02 	bl	8002250 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	d90c      	bls.n	8002c70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2203      	movs	r2, #3
 8002c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e015      	b.n	8002c9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1e4      	bne.n	8002c48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c82:	223f      	movs	r2, #63	@ 0x3f
 8002c84:	409a      	lsls	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d004      	beq.n	8002cc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2280      	movs	r2, #128	@ 0x80
 8002cbc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e00c      	b.n	8002cdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2205      	movs	r2, #5
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002cf4:	4b8e      	ldr	r3, [pc, #568]	@ (8002f30 <HAL_DMA_IRQHandler+0x248>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a8e      	ldr	r2, [pc, #568]	@ (8002f34 <HAL_DMA_IRQHandler+0x24c>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	0a9b      	lsrs	r3, r3, #10
 8002d00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d12:	2208      	movs	r2, #8
 8002d14:	409a      	lsls	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01a      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0204 	bic.w	r2, r2, #4
 8002d3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d40:	2208      	movs	r2, #8
 8002d42:	409a      	lsls	r2, r3
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d58:	2201      	movs	r2, #1
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d012      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00b      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d76:	2201      	movs	r2, #1
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d82:	f043 0202 	orr.w	r2, r3, #2
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8e:	2204      	movs	r2, #4
 8002d90:	409a      	lsls	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d012      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00b      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dac:	2204      	movs	r2, #4
 8002dae:	409a      	lsls	r2, r3
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db8:	f043 0204 	orr.w	r2, r3, #4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d043      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d03c      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de2:	2210      	movs	r2, #16
 8002de4:	409a      	lsls	r2, r3
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d018      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d108      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d024      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	4798      	blx	r3
 8002e16:	e01f      	b.n	8002e58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01b      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
 8002e28:	e016      	b.n	8002e58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d107      	bne.n	8002e48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0208 	bic.w	r2, r2, #8
 8002e46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 808f 	beq.w	8002f88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8087 	beq.w	8002f88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7e:	2220      	movs	r2, #32
 8002e80:	409a      	lsls	r2, r3
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b05      	cmp	r3, #5
 8002e90:	d136      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0216 	bic.w	r2, r2, #22
 8002ea0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002eb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <HAL_DMA_IRQHandler+0x1da>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0208 	bic.w	r2, r2, #8
 8002ed0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed6:	223f      	movs	r2, #63	@ 0x3f
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d07e      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
        }
        return;
 8002efe:	e079      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d01d      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10d      	bne.n	8002f38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d031      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
 8002f2c:	e02c      	b.n	8002f88 <HAL_DMA_IRQHandler+0x2a0>
 8002f2e:	bf00      	nop
 8002f30:	20000000 	.word	0x20000000
 8002f34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d023      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4798      	blx	r3
 8002f48:	e01e      	b.n	8002f88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10f      	bne.n	8002f78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0210 	bic.w	r2, r2, #16
 8002f66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d032      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d022      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2205      	movs	r2, #5
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d307      	bcc.n	8002fd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f2      	bne.n	8002fb4 <HAL_DMA_IRQHandler+0x2cc>
 8002fce:	e000      	b.n	8002fd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d005      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
 8002ff2:	e000      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ff4:	bf00      	nop
    }
  }
}
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800300a:	b2db      	uxtb	r3, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800304c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b40      	cmp	r3, #64	@ 0x40
 800305c:	d108      	bne.n	8003070 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800306e:	e007      	b.n	8003080 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	60da      	str	r2, [r3, #12]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	3b10      	subs	r3, #16
 800309c:	4a13      	ldr	r2, [pc, #76]	@ (80030ec <DMA_CalcBaseAndBitshift+0x60>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030a6:	4a12      	ldr	r2, [pc, #72]	@ (80030f0 <DMA_CalcBaseAndBitshift+0x64>)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4413      	add	r3, r2
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d908      	bls.n	80030cc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <DMA_CalcBaseAndBitshift+0x68>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	1d1a      	adds	r2, r3, #4
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80030ca:	e006      	b.n	80030da <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b08      	ldr	r3, [pc, #32]	@ (80030f4 <DMA_CalcBaseAndBitshift+0x68>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	aaaaaaab 	.word	0xaaaaaaab
 80030f0:	080205f4 	.word	0x080205f4
 80030f4:	fffffc00 	.word	0xfffffc00

080030f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003108:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d11f      	bne.n	8003152 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d856      	bhi.n	80031c6 <DMA_CheckFifoParam+0xce>
 8003118:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <DMA_CheckFifoParam+0x28>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003131 	.word	0x08003131
 8003124:	08003143 	.word	0x08003143
 8003128:	08003131 	.word	0x08003131
 800312c:	080031c7 	.word	0x080031c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d046      	beq.n	80031ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003140:	e043      	b.n	80031ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800314a:	d140      	bne.n	80031ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003150:	e03d      	b.n	80031ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800315a:	d121      	bne.n	80031a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b03      	cmp	r3, #3
 8003160:	d837      	bhi.n	80031d2 <DMA_CheckFifoParam+0xda>
 8003162:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <DMA_CheckFifoParam+0x70>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	08003179 	.word	0x08003179
 800316c:	0800317f 	.word	0x0800317f
 8003170:	08003179 	.word	0x08003179
 8003174:	08003191 	.word	0x08003191
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
      break;
 800317c:	e030      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003182:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d025      	beq.n	80031d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318e:	e022      	b.n	80031d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003198:	d11f      	bne.n	80031da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800319e:	e01c      	b.n	80031da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d903      	bls.n	80031ae <DMA_CheckFifoParam+0xb6>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d003      	beq.n	80031b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031ac:	e018      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
      break;
 80031b2:	e015      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00e      	beq.n	80031de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
      break;
 80031c4:	e00b      	b.n	80031de <DMA_CheckFifoParam+0xe6>
      break;
 80031c6:	bf00      	nop
 80031c8:	e00a      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      break;
 80031ca:	bf00      	nop
 80031cc:	e008      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      break;
 80031ce:	bf00      	nop
 80031d0:	e006      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      break;
 80031d2:	bf00      	nop
 80031d4:	e004      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      break;
 80031d6:	bf00      	nop
 80031d8:	e002      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80031da:	bf00      	nop
 80031dc:	e000      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      break;
 80031de:	bf00      	nop
    }
  } 
  
  return status; 
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop

080031f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e086      	b.n	8003310 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003208:	2b00      	cmp	r3, #0
 800320a:	d106      	bne.n	800321a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f009 f903 	bl	800c420 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800321a:	4b3f      	ldr	r3, [pc, #252]	@ (8003318 <HAL_ETH_Init+0x128>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	4a3e      	ldr	r2, [pc, #248]	@ (8003318 <HAL_ETH_Init+0x128>)
 8003220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003224:	6453      	str	r3, [r2, #68]	@ 0x44
 8003226:	4b3c      	ldr	r3, [pc, #240]	@ (8003318 <HAL_ETH_Init+0x128>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003232:	4b3a      	ldr	r3, [pc, #232]	@ (800331c <HAL_ETH_Init+0x12c>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4a39      	ldr	r2, [pc, #228]	@ (800331c <HAL_ETH_Init+0x12c>)
 8003238:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800323c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800323e:	4b37      	ldr	r3, [pc, #220]	@ (800331c <HAL_ETH_Init+0x12c>)
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	4935      	ldr	r1, [pc, #212]	@ (800331c <HAL_ETH_Init+0x12c>)
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800324c:	4b33      	ldr	r3, [pc, #204]	@ (800331c <HAL_ETH_Init+0x12c>)
 800324e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003266:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003268:	f7fe fff2 	bl	8002250 <HAL_GetTick>
 800326c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800326e:	e011      	b.n	8003294 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003270:	f7fe ffee 	bl	8002250 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800327e:	d909      	bls.n	8003294 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2204      	movs	r2, #4
 8003284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	22e0      	movs	r2, #224	@ 0xe0
 800328c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e03d      	b.n	8003310 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1e4      	bne.n	8003270 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 ff5c 	bl	8004164 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f001 f807 	bl	80042c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f001 f85d 	bl	8004372 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	461a      	mov	r2, r3
 80032be:	2100      	movs	r1, #0
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 ffc5 	bl	8004250 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80032d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003320 <HAL_ETH_Init+0x130>)
 80032e4:	430b      	orrs	r3, r1
 80032e6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80032fa:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2210      	movs	r2, #16
 800330a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40023800 	.word	0x40023800
 800331c:	40013800 	.word	0x40013800
 8003320:	00020060 	.word	0x00020060

08003324 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003332:	2b10      	cmp	r3, #16
 8003334:	d15f      	bne.n	80033f6 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2204      	movs	r2, #4
 8003348:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f9f6 	bl	800373c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003358:	2001      	movs	r0, #1
 800335a:	f7fe ff85 	bl	8002268 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003378:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800337c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003394:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fd80 	bl	8003e9c <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0208 	orr.w	r2, r2, #8
 80033aa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80033b4:	2001      	movs	r0, #1
 80033b6:	f7fe ff57 	bl	8002268 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0204 	orr.w	r2, r2, #4
 80033d0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033da:	69d9      	ldr	r1, [r3, #28]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b07      	ldr	r3, [pc, #28]	@ (8003400 <HAL_ETH_Start_IT+0xdc>)
 80033e2:	430b      	orrs	r3, r1
 80033e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033e8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2240      	movs	r2, #64	@ 0x40
 80033ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e000      	b.n	80033f8 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
  }
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	0001a0c1 	.word	0x0001a0c1

08003404 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003412:	2b40      	cmp	r3, #64	@ 0x40
 8003414:	d16e      	bne.n	80034f4 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003426:	69d9      	ldr	r1, [r3, #28]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b34      	ldr	r3, [pc, #208]	@ (8003500 <HAL_ETH_Stop_IT+0xfc>)
 800342e:	400b      	ands	r3, r1
 8003430:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003434:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003448:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800344c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	f023 0302 	bic.w	r3, r3, #2
 8003460:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003464:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0204 	bic.w	r2, r2, #4
 8003474:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800347e:	2001      	movs	r0, #1
 8003480:	f7fe fef2 	bl	8002268 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fd05 	bl	8003e9c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0208 	bic.w	r2, r2, #8
 80034a0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80034aa:	2001      	movs	r0, #1
 80034ac:	f7fe fedc 	bl	8002268 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	e00e      	b.n	80034dc <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	3212      	adds	r2, #18
 80034c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	3301      	adds	r3, #1
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d9ed      	bls.n	80034be <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2210      	movs	r2, #16
 80034ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e000      	b.n	80034f6 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
  }
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	fffe5f3e 	.word	0xfffe5f3e

08003504 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d109      	bne.n	8003528 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351a:	f043 0201 	orr.w	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e045      	b.n	80035b4 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800352e:	2b40      	cmp	r3, #64	@ 0x40
 8003530:	d13f      	bne.n	80035b2 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800353a:	2201      	movs	r2, #1
 800353c:	6839      	ldr	r1, [r7, #0]
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 ff86 	bl	8004450 <ETH_Prepare_Tx_Descriptors>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003550:	f043 0202 	orr.w	r2, r3, #2
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e02a      	b.n	80035b4 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800355e:	f3bf 8f4f 	dsb	sy
}
 8003562:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	629a      	str	r2, [r3, #40]	@ 0x28
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003572:	2b03      	cmp	r3, #3
 8003574:	d904      	bls.n	8003580 <HAL_ETH_Transmit_IT+0x7c>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357a:	1f1a      	subs	r2, r3, #4
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00d      	beq.n	80035ae <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800359a:	461a      	mov	r2, r3
 800359c:	2304      	movs	r3, #4
 800359e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035a8:	461a      	mov	r2, r3
 80035aa:	2300      	movs	r3, #0
 80035ac:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e000      	b.n	80035b4 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
  }
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d109      	bne.n	80035e8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035da:	f043 0201 	orr.w	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0a4      	b.n	8003732 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ee:	2b40      	cmp	r3, #64	@ 0x40
 80035f0:	d001      	beq.n	80035f6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e09d      	b.n	8003732 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	3212      	adds	r2, #18
 8003602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003606:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800360c:	f1c3 0304 	rsb	r3, r3, #4
 8003610:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003612:	e066      	b.n	80036e2 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	699a      	ldr	r2, [r3, #24]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003638:	2b00      	cmp	r3, #0
 800363a:	d103      	bne.n	8003644 <HAL_ETH_ReadData+0x88>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d03c      	beq.n	80036be <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	0c1b      	lsrs	r3, r3, #16
 8003662:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003666:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800367c:	2301      	movs	r3, #1
 800367e:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003698:	461a      	mov	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	b29b      	uxth	r3, r3
 800369e:	f009 f893 	bl	800c7c8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	441a      	add	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2200      	movs	r2, #0
 80036bc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3301      	adds	r3, #1
 80036c2:	61fb      	str	r3, [r7, #28]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d902      	bls.n	80036d0 <HAL_ETH_ReadData+0x114>
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3b04      	subs	r3, #4
 80036ce:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	3212      	adds	r2, #18
 80036d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036da:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	3301      	adds	r3, #1
 80036e0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	db06      	blt.n	80036f8 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d202      	bcs.n	80036f8 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d08d      	beq.n	8003614 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	441a      	add	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f815 	bl	800373c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d108      	bne.n	8003730 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
}
 8003732:	4618      	mov	r0, r3
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003744:	2300      	movs	r3, #0
 8003746:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003748:	2301      	movs	r3, #1
 800374a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003750:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	3212      	adds	r2, #18
 8003758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800375c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003762:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003764:	e042      	b.n	80037ec <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d112      	bne.n	8003794 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800376e:	f107 0308 	add.w	r3, r7, #8
 8003772:	4618      	mov	r0, r3
 8003774:	f008 fff8 	bl	800c768 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	74fb      	strb	r3, [r7, #19]
 8003782:	e007      	b.n	8003794 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	461a      	mov	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	461a      	mov	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003794:	7cfb      	ldrb	r3, [r7, #19]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d028      	beq.n	80037ec <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	4b26      	ldr	r3, [pc, #152]	@ (8003840 <ETH_UpdateDescriptor+0x104>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	6053      	str	r3, [r2, #4]
 80037ae:	e005      	b.n	80037bc <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	3301      	adds	r3, #1
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d902      	bls.n	80037da <ETH_UpdateDescriptor+0x9e>
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	3b04      	subs	r3, #4
 80037d8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	3212      	adds	r2, #18
 80037e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e4:	617b      	str	r3, [r7, #20]
      desccount--;
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	3b01      	subs	r3, #1
 80037ea:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <ETH_UpdateDescriptor+0xbc>
 80037f2:	7cfb      	ldrb	r3, [r7, #19]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1b6      	bne.n	8003766 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d01a      	beq.n	8003838 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3303      	adds	r3, #3
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800380c:	f3bf 8f5f 	dmb	sy
}
 8003810:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6919      	ldr	r1, [r3, #16]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	18ca      	adds	r2, r1, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800382a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003838:	bf00      	nop
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	80004000 	.word	0x80004000

08003844 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3318      	adds	r3, #24
 8003850:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003856:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800385e:	2301      	movs	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003862:	e047      	b.n	80038f4 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8003864:	2301      	movs	r3, #1
 8003866:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	3b01      	subs	r3, #1
 800386c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	3304      	adds	r3, #4
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	3301      	adds	r3, #1
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b03      	cmp	r3, #3
 8003888:	d902      	bls.n	8003890 <HAL_ETH_ReleaseTxPacket+0x4c>
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	3b04      	subs	r3, #4
 800388e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8003894:	7bbb      	ldrb	r3, [r7, #14]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d02c      	beq.n	80038f4 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68d9      	ldr	r1, [r3, #12]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	440b      	add	r3, r1
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	db1f      	blt.n	80038f0 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	3304      	adds	r3, #4
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4618      	mov	r0, r3
 80038be:	f008 ffc5 	bl	800c84c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	3304      	adds	r3, #4
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	2200      	movs	r2, #0
 80038ce:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	3301      	adds	r3, #1
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d902      	bls.n	80038e2 <HAL_ETH_ReleaseTxPacket+0x9e>
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	3b04      	subs	r3, #4
 80038e0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80038ee:	e001      	b.n	80038f4 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_ETH_ReleaseTxPacket+0xbc>
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1b1      	bne.n	8003864 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003934:	4b4b      	ldr	r3, [pc, #300]	@ (8003a64 <HAL_ETH_IRQHandler+0x158>)
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00e      	beq.n	8003962 <HAL_ETH_IRQHandler+0x56>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003956:	461a      	mov	r2, r3
 8003958:	4b43      	ldr	r3, [pc, #268]	@ (8003a68 <HAL_ETH_IRQHandler+0x15c>)
 800395a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f008 fa9f 	bl	800bea0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00f      	beq.n	800398c <HAL_ETH_IRQHandler+0x80>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800397e:	461a      	mov	r2, r3
 8003980:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003984:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f008 fa9a 	bl	800bec0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d042      	beq.n	8003a1c <HAL_ETH_IRQHandler+0x110>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d03d      	beq.n	8003a1c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a6:	f043 0208 	orr.w	r2, r3, #8
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01a      	beq.n	80039f0 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039c2:	695a      	ldr	r2, [r3, #20]
 80039c4:	4b29      	ldr	r3, [pc, #164]	@ (8003a6c <HAL_ETH_IRQHandler+0x160>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80039e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039e4:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	22e0      	movs	r2, #224	@ 0xe0
 80039ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80039ee:	e012      	b.n	8003a16 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	f248 6380 	movw	r3, #34432	@ 0x8680
 80039fe:	4013      	ands	r3, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003a14:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f008 fa62 	bl	800bee0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00e      	beq.n	8003a44 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f81a 	bl	8003a70 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d006      	beq.n	8003a5c <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_ETH_IRQHandler+0x158>)
 8003a50:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003a54:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f814 	bl	8003a84 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40013c00 	.word	0x40013c00
 8003a68:	00010040 	.word	0x00010040
 8003a6c:	007e2000 	.word	0x007e2000

08003a70 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f003 031c 	and.w	r3, r3, #28
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	02db      	lsls	r3, r3, #11
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	019b      	lsls	r3, r3, #6
 8003ac6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f023 0302 	bic.w	r3, r3, #2
 8003ad6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003ae8:	f7fe fbb2 	bl	8002250 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003aee:	e00d      	b.n	8003b0c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003af0:	f7fe fbae 	bl	8002250 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003afe:	d301      	bcc.n	8003b04 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e010      	b.n	8003b26 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1ec      	bne.n	8003af0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b086      	sub	sp, #24
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f003 031c 	and.w	r3, r3, #28
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	02db      	lsls	r3, r3, #11
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	019b      	lsls	r3, r3, #6
 8003b5c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f043 0302 	orr.w	r3, r3, #2
 8003b6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b88:	f7fe fb62 	bl	8002250 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b8e:	e00d      	b.n	8003bac <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003b90:	f7fe fb5e 	bl	8002250 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b9e:	d301      	bcc.n	8003ba4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e009      	b.n	8003bb8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1ec      	bne.n	8003b90 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0e6      	b.n	8003da2 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	bf14      	ite	ne
 8003be2:	2301      	movne	r3, #1
 8003be4:	2300      	moveq	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf14      	ite	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	2300      	moveq	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bf14      	ite	ne
 8003cee:	2301      	movne	r3, #1
 8003cf0:	2300      	moveq	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bf14      	ite	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	2300      	moveq	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bf14      	ite	ne
 8003d76:	2301      	movne	r3, #1
 8003d78:	2300      	moveq	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf14      	ite	ne
 8003d92:	2301      	movne	r3, #1
 8003d94:	2300      	moveq	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e00b      	b.n	8003dda <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d105      	bne.n	8003dd8 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003dcc:	6839      	ldr	r1, [r7, #0]
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f88a 	bl	8003ee8 <ETH_SetMACConfig>

    return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e000      	b.n	8003dda <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
  }
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 031c 	bic.w	r3, r3, #28
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003dfc:	f003 fd6e 	bl	80078dc <HAL_RCC_GetHCLKFreq>
 8003e00:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	4a14      	ldr	r2, [pc, #80]	@ (8003e58 <HAL_ETH_SetMDIOClockRange+0x74>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d804      	bhi.n	8003e14 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f043 0308 	orr.w	r3, r3, #8
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	e019      	b.n	8003e48 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	4a11      	ldr	r2, [pc, #68]	@ (8003e5c <HAL_ETH_SetMDIOClockRange+0x78>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d204      	bcs.n	8003e26 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f043 030c 	orr.w	r3, r3, #12
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e010      	b.n	8003e48 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	4a0d      	ldr	r2, [pc, #52]	@ (8003e60 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d90c      	bls.n	8003e48 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	4a0c      	ldr	r2, [pc, #48]	@ (8003e64 <HAL_ETH_SetMDIOClockRange+0x80>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d804      	bhi.n	8003e40 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f043 0304 	orr.w	r3, r3, #4
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	e003      	b.n	8003e48 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f043 0310 	orr.w	r3, r3, #16
 8003e46:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	611a      	str	r2, [r3, #16]
}
 8003e50:	bf00      	nop
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	02160ebf 	.word	0x02160ebf
 8003e5c:	03938700 	.word	0x03938700
 8003e60:	05f5e0ff 	.word	0x05f5e0ff
 8003e64:	08f0d17f 	.word	0x08f0d17f

08003e68 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6812      	ldr	r2, [r2, #0]
 8003eb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ebe:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ecc:	2001      	movs	r0, #1
 8003ece:	f7fe f9cb 	bl	8002268 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003edc:	6193      	str	r3, [r2, #24]
}
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4b53      	ldr	r3, [pc, #332]	@ (800404c <ETH_SetMACConfig+0x164>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	7b9b      	ldrb	r3, [r3, #14]
 8003f06:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	7c12      	ldrb	r2, [r2, #16]
 8003f0c:	2a00      	cmp	r2, #0
 8003f0e:	d102      	bne.n	8003f16 <ETH_SetMACConfig+0x2e>
 8003f10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003f14:	e000      	b.n	8003f18 <ETH_SetMACConfig+0x30>
 8003f16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003f18:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	7c52      	ldrb	r2, [r2, #17]
 8003f1e:	2a00      	cmp	r2, #0
 8003f20:	d102      	bne.n	8003f28 <ETH_SetMACConfig+0x40>
 8003f22:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003f26:	e000      	b.n	8003f2a <ETH_SetMACConfig+0x42>
 8003f28:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f2a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003f30:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	7fdb      	ldrb	r3, [r3, #31]
 8003f36:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003f38:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	7f92      	ldrb	r2, [r2, #30]
 8003f44:	2a00      	cmp	r2, #0
 8003f46:	d102      	bne.n	8003f4e <ETH_SetMACConfig+0x66>
 8003f48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f4c:	e000      	b.n	8003f50 <ETH_SetMACConfig+0x68>
 8003f4e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003f50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	7f1b      	ldrb	r3, [r3, #28]
 8003f56:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003f58:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003f5e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	791b      	ldrb	r3, [r3, #4]
 8003f64:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003f66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003f6e:	2a00      	cmp	r2, #0
 8003f70:	d102      	bne.n	8003f78 <ETH_SetMACConfig+0x90>
 8003f72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f76:	e000      	b.n	8003f7a <ETH_SetMACConfig+0x92>
 8003f78:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003f7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	7bdb      	ldrb	r3, [r3, #15]
 8003f80:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003f82:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003f88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f90:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003f92:	4313      	orrs	r3, r2
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003faa:	2001      	movs	r0, #1
 8003fac:	f7fe f95c 	bl	8002268 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fce:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003fd6:	2a00      	cmp	r2, #0
 8003fd8:	d101      	bne.n	8003fde <ETH_SetMACConfig+0xf6>
 8003fda:	2280      	movs	r2, #128	@ 0x80
 8003fdc:	e000      	b.n	8003fe0 <ETH_SetMACConfig+0xf8>
 8003fde:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003fe0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003fe6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003fee:	2a01      	cmp	r2, #1
 8003ff0:	d101      	bne.n	8003ff6 <ETH_SetMACConfig+0x10e>
 8003ff2:	2208      	movs	r2, #8
 8003ff4:	e000      	b.n	8003ff8 <ETH_SetMACConfig+0x110>
 8003ff6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003ff8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004000:	2a01      	cmp	r2, #1
 8004002:	d101      	bne.n	8004008 <ETH_SetMACConfig+0x120>
 8004004:	2204      	movs	r2, #4
 8004006:	e000      	b.n	800400a <ETH_SetMACConfig+0x122>
 8004008:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800400a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004012:	2a01      	cmp	r2, #1
 8004014:	d101      	bne.n	800401a <ETH_SetMACConfig+0x132>
 8004016:	2202      	movs	r2, #2
 8004018:	e000      	b.n	800401c <ETH_SetMACConfig+0x134>
 800401a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800401c:	4313      	orrs	r3, r2
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004034:	2001      	movs	r0, #1
 8004036:	f7fe f917 	bl	8002268 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	619a      	str	r2, [r3, #24]
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	fd20810f 	.word	0xfd20810f

08004050 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4b3d      	ldr	r3, [pc, #244]	@ (8004160 <ETH_SetDMAConfig+0x110>)
 800406a:	4013      	ands	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	7b1b      	ldrb	r3, [r3, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <ETH_SetDMAConfig+0x2c>
 8004076:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800407a:	e000      	b.n	800407e <ETH_SetDMAConfig+0x2e>
 800407c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	7b5b      	ldrb	r3, [r3, #13]
 8004082:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004084:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	7f52      	ldrb	r2, [r2, #29]
 800408a:	2a00      	cmp	r2, #0
 800408c:	d102      	bne.n	8004094 <ETH_SetDMAConfig+0x44>
 800408e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004092:	e000      	b.n	8004096 <ETH_SetDMAConfig+0x46>
 8004094:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004096:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	7b9b      	ldrb	r3, [r3, #14]
 800409c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800409e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80040a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	7f1b      	ldrb	r3, [r3, #28]
 80040aa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80040ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	7f9b      	ldrb	r3, [r3, #30]
 80040b2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80040b4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80040ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040c2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80040c4:	4313      	orrs	r3, r2
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040d4:	461a      	mov	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040e6:	2001      	movs	r0, #1
 80040e8:	f7fe f8be 	bl	8002268 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040f4:	461a      	mov	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	791b      	ldrb	r3, [r3, #4]
 80040fe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004104:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800410a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004110:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004118:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800411a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004120:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004122:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004128:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004132:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004136:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004144:	2001      	movs	r0, #1
 8004146:	f7fe f88f 	bl	8002268 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004152:	461a      	mov	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6013      	str	r3, [r2, #0]
}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	f8de3f23 	.word	0xf8de3f23

08004164 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b0a6      	sub	sp, #152	@ 0x98
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800416c:	2301      	movs	r3, #1
 800416e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004172:	2301      	movs	r3, #1
 8004174:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004178:	2300      	movs	r3, #0
 800417a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800417c:	2300      	movs	r3, #0
 800417e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004182:	2301      	movs	r3, #1
 8004184:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004188:	2300      	movs	r3, #0
 800418a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800418e:	2301      	movs	r3, #1
 8004190:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004194:	2301      	movs	r3, #1
 8004196:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800419a:	2300      	movs	r3, #0
 800419c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80041a0:	2300      	movs	r3, #0
 80041a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80041a6:	2300      	movs	r3, #0
 80041a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80041ba:	2300      	movs	r3, #0
 80041bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80041c0:	2300      	movs	r3, #0
 80041c2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80041c6:	2300      	movs	r3, #0
 80041c8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80041cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80041d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80041d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80041d8:	2300      	movs	r3, #0
 80041da:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80041de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff fe7f 	bl	8003ee8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80041ea:	2301      	movs	r3, #1
 80041ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80041ee:	2301      	movs	r3, #1
 80041f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80041f2:	2301      	movs	r3, #1
 80041f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004200:	2300      	movs	r3, #0
 8004202:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004206:	2300      	movs	r3, #0
 8004208:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800420c:	2300      	movs	r3, #0
 800420e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004210:	2301      	movs	r3, #1
 8004212:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004216:	2301      	movs	r3, #1
 8004218:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800421a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800421e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004220:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004224:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004226:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800422a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800422c:	2301      	movs	r3, #1
 800422e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004232:	2300      	movs	r3, #0
 8004234:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800423a:	f107 0308 	add.w	r3, r7, #8
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff ff05 	bl	8004050 <ETH_SetDMAConfig>
}
 8004246:	bf00      	nop
 8004248:	3798      	adds	r7, #152	@ 0x98
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3305      	adds	r3, #5
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	3204      	adds	r2, #4
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <ETH_MACAddressConfig+0x68>)
 8004272:	4413      	add	r3, r2
 8004274:	461a      	mov	r2, r3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3303      	adds	r3, #3
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	061a      	lsls	r2, r3, #24
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3302      	adds	r3, #2
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	041b      	lsls	r3, r3, #16
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3301      	adds	r3, #1
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	4313      	orrs	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	7812      	ldrb	r2, [r2, #0]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <ETH_MACAddressConfig+0x6c>)
 80042a2:	4413      	add	r3, r2
 80042a4:	461a      	mov	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	6013      	str	r3, [r2, #0]
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40028040 	.word	0x40028040
 80042bc:	40028044 	.word	0x40028044

080042c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	e03e      	b.n	800434c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68d9      	ldr	r1, [r3, #12]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	440b      	add	r3, r1
 80042de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2200      	movs	r2, #0
 80042ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2200      	movs	r2, #0
 80042f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2200      	movs	r2, #0
 80042f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	3206      	adds	r2, #6
 8004300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d80c      	bhi.n	8004330 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68d9      	ldr	r1, [r3, #12]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	440b      	add	r3, r1
 8004328:	461a      	mov	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	60da      	str	r2, [r3, #12]
 800432e:	e004      	b.n	800433a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	461a      	mov	r2, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3301      	adds	r3, #1
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b03      	cmp	r3, #3
 8004350:	d9bd      	bls.n	80042ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004364:	611a      	str	r2, [r3, #16]
}
 8004366:	bf00      	nop
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004372:	b480      	push	{r7}
 8004374:	b085      	sub	sp, #20
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	e048      	b.n	8004412 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6919      	ldr	r1, [r3, #16]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	440b      	add	r3, r1
 8004390:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2200      	movs	r2, #0
 800439c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2200      	movs	r2, #0
 80043a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2200      	movs	r2, #0
 80043a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2200      	movs	r2, #0
 80043ae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2200      	movs	r2, #0
 80043b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80043bc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	3212      	adds	r2, #18
 80043de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d80c      	bhi.n	8004402 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6919      	ldr	r1, [r3, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	440b      	add	r3, r1
 80043fa:	461a      	mov	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	60da      	str	r2, [r3, #12]
 8004400:	e004      	b.n	800440c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	461a      	mov	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3301      	adds	r3, #1
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d9b3      	bls.n	8004380 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004442:	60da      	str	r2, [r3, #12]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004450:	b480      	push	{r7}
 8004452:	b091      	sub	sp, #68	@ 0x44
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3318      	adds	r3, #24
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800446e:	2300      	movs	r3, #0
 8004470:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800447a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800448e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004492:	d007      	beq.n	80044a4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004498:	3304      	adds	r3, #4
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80044a4:	2302      	movs	r3, #2
 80044a6:	e111      	b.n	80046cc <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80044a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044aa:	3301      	adds	r3, #1
 80044ac:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80044ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	4b86      	ldr	r3, [pc, #536]	@ (80046d8 <ETH_Prepare_Tx_Descriptors+0x288>)
 80044be:	4013      	ands	r3, r2
 80044c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044c2:	6852      	ldr	r2, [r2, #4]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d008      	beq.n	80044e8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80044d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80044f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	431a      	orrs	r2, r3
 8004502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004504:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800451e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004528:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800452a:	e082      	b.n	8004632 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800452c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004536:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d006      	beq.n	800454c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800453e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e005      	b.n	8004558 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004556:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800455a:	3301      	adds	r3, #1
 800455c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800455e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004560:	2b03      	cmp	r3, #3
 8004562:	d902      	bls.n	800456a <ETH_Prepare_Tx_Descriptors+0x11a>
 8004564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004566:	3b04      	subs	r3, #4
 8004568:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800456e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004572:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800457c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004580:	d007      	beq.n	8004592 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004586:	3304      	adds	r3, #4
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d029      	beq.n	80045e6 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800459a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800459e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80045a0:	2300      	movs	r3, #0
 80045a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045a4:	e019      	b.n	80045da <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80045a6:	f3bf 8f5f 	dmb	sy
}
 80045aa:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80045ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80045b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80045b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ba:	3301      	adds	r3, #1
 80045bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d902      	bls.n	80045ca <ETH_Prepare_Tx_Descriptors+0x17a>
 80045c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c6:	3b04      	subs	r3, #4
 80045c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80045d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d6:	3301      	adds	r3, #1
 80045d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80045dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045de:	429a      	cmp	r2, r3
 80045e0:	d3e1      	bcc.n	80045a6 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80045e2:	2302      	movs	r3, #2
 80045e4:	e072      	b.n	80046cc <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80045e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80045ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80045f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f4:	3301      	adds	r3, #1
 80045f6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80045f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80045fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004606:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	4b32      	ldr	r3, [pc, #200]	@ (80046d8 <ETH_Prepare_Tx_Descriptors+0x288>)
 800460e:	4013      	ands	r3, r2
 8004610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004612:	6852      	ldr	r2, [r2, #4]
 8004614:	431a      	orrs	r2, r3
 8004616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004618:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800461a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461c:	3301      	adds	r3, #1
 800461e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004620:	f3bf 8f5f 	dmb	sy
}
 8004624:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800462e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004630:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f47f af78 	bne.w	800452c <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d006      	beq.n	8004650 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800464a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	e005      	b.n	800465c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800465c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004666:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466a:	6a3a      	ldr	r2, [r7, #32]
 800466c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004670:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8004672:	f3bf 8f5f 	dmb	sy
}
 8004676:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004682:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800468a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800468c:	3304      	adds	r3, #4
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004698:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469a:	f3ef 8310 	mrs	r3, PRIMASK
 800469e:	613b      	str	r3, [r7, #16]
  return(result);
 80046a0:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	2301      	movs	r3, #1
 80046a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f383 8810 	msr	PRIMASK, r3
}
 80046ae:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b6:	4413      	add	r3, r2
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	f383 8810 	msr	PRIMASK, r3
}
 80046c8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3744      	adds	r7, #68	@ 0x44
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	ffffe000 	.word	0xffffe000

080046dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046dc:	b480      	push	{r7}
 80046de:	b089      	sub	sp, #36	@ 0x24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80046ee:	2300      	movs	r3, #0
 80046f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80046f2:	2300      	movs	r3, #0
 80046f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	e175      	b.n	80049e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046fc:	2201      	movs	r2, #1
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4013      	ands	r3, r2
 800470e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	429a      	cmp	r2, r3
 8004716:	f040 8164 	bne.w	80049e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d005      	beq.n	8004732 <HAL_GPIO_Init+0x56>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d130      	bne.n	8004794 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	2203      	movs	r2, #3
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004768:	2201      	movs	r2, #1
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	f003 0201 	and.w	r2, r3, #1
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4313      	orrs	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	2b03      	cmp	r3, #3
 800479e:	d017      	beq.n	80047d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	2203      	movs	r2, #3
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	4013      	ands	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d123      	bne.n	8004824 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	08da      	lsrs	r2, r3, #3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3208      	adds	r2, #8
 80047e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	220f      	movs	r2, #15
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4313      	orrs	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	08da      	lsrs	r2, r3, #3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3208      	adds	r2, #8
 800481e:	69b9      	ldr	r1, [r7, #24]
 8004820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	2203      	movs	r2, #3
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	43db      	mvns	r3, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f003 0203 	and.w	r2, r3, #3
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80be 	beq.w	80049e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004866:	4b66      	ldr	r3, [pc, #408]	@ (8004a00 <HAL_GPIO_Init+0x324>)
 8004868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486a:	4a65      	ldr	r2, [pc, #404]	@ (8004a00 <HAL_GPIO_Init+0x324>)
 800486c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004870:	6453      	str	r3, [r2, #68]	@ 0x44
 8004872:	4b63      	ldr	r3, [pc, #396]	@ (8004a00 <HAL_GPIO_Init+0x324>)
 8004874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800487e:	4a61      	ldr	r2, [pc, #388]	@ (8004a04 <HAL_GPIO_Init+0x328>)
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	089b      	lsrs	r3, r3, #2
 8004884:	3302      	adds	r3, #2
 8004886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800488a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	220f      	movs	r2, #15
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4013      	ands	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a58      	ldr	r2, [pc, #352]	@ (8004a08 <HAL_GPIO_Init+0x32c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d037      	beq.n	800491a <HAL_GPIO_Init+0x23e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a57      	ldr	r2, [pc, #348]	@ (8004a0c <HAL_GPIO_Init+0x330>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d031      	beq.n	8004916 <HAL_GPIO_Init+0x23a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a56      	ldr	r2, [pc, #344]	@ (8004a10 <HAL_GPIO_Init+0x334>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d02b      	beq.n	8004912 <HAL_GPIO_Init+0x236>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a55      	ldr	r2, [pc, #340]	@ (8004a14 <HAL_GPIO_Init+0x338>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d025      	beq.n	800490e <HAL_GPIO_Init+0x232>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a54      	ldr	r2, [pc, #336]	@ (8004a18 <HAL_GPIO_Init+0x33c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d01f      	beq.n	800490a <HAL_GPIO_Init+0x22e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a53      	ldr	r2, [pc, #332]	@ (8004a1c <HAL_GPIO_Init+0x340>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d019      	beq.n	8004906 <HAL_GPIO_Init+0x22a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a52      	ldr	r2, [pc, #328]	@ (8004a20 <HAL_GPIO_Init+0x344>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d013      	beq.n	8004902 <HAL_GPIO_Init+0x226>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a51      	ldr	r2, [pc, #324]	@ (8004a24 <HAL_GPIO_Init+0x348>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00d      	beq.n	80048fe <HAL_GPIO_Init+0x222>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a50      	ldr	r2, [pc, #320]	@ (8004a28 <HAL_GPIO_Init+0x34c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d007      	beq.n	80048fa <HAL_GPIO_Init+0x21e>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a4f      	ldr	r2, [pc, #316]	@ (8004a2c <HAL_GPIO_Init+0x350>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d101      	bne.n	80048f6 <HAL_GPIO_Init+0x21a>
 80048f2:	2309      	movs	r3, #9
 80048f4:	e012      	b.n	800491c <HAL_GPIO_Init+0x240>
 80048f6:	230a      	movs	r3, #10
 80048f8:	e010      	b.n	800491c <HAL_GPIO_Init+0x240>
 80048fa:	2308      	movs	r3, #8
 80048fc:	e00e      	b.n	800491c <HAL_GPIO_Init+0x240>
 80048fe:	2307      	movs	r3, #7
 8004900:	e00c      	b.n	800491c <HAL_GPIO_Init+0x240>
 8004902:	2306      	movs	r3, #6
 8004904:	e00a      	b.n	800491c <HAL_GPIO_Init+0x240>
 8004906:	2305      	movs	r3, #5
 8004908:	e008      	b.n	800491c <HAL_GPIO_Init+0x240>
 800490a:	2304      	movs	r3, #4
 800490c:	e006      	b.n	800491c <HAL_GPIO_Init+0x240>
 800490e:	2303      	movs	r3, #3
 8004910:	e004      	b.n	800491c <HAL_GPIO_Init+0x240>
 8004912:	2302      	movs	r3, #2
 8004914:	e002      	b.n	800491c <HAL_GPIO_Init+0x240>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <HAL_GPIO_Init+0x240>
 800491a:	2300      	movs	r3, #0
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	f002 0203 	and.w	r2, r2, #3
 8004922:	0092      	lsls	r2, r2, #2
 8004924:	4093      	lsls	r3, r2
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800492c:	4935      	ldr	r1, [pc, #212]	@ (8004a04 <HAL_GPIO_Init+0x328>)
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	089b      	lsrs	r3, r3, #2
 8004932:	3302      	adds	r3, #2
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800493a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a30 <HAL_GPIO_Init+0x354>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	43db      	mvns	r3, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4013      	ands	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800495e:	4a34      	ldr	r2, [pc, #208]	@ (8004a30 <HAL_GPIO_Init+0x354>)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004964:	4b32      	ldr	r3, [pc, #200]	@ (8004a30 <HAL_GPIO_Init+0x354>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	43db      	mvns	r3, r3
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4013      	ands	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004988:	4a29      	ldr	r2, [pc, #164]	@ (8004a30 <HAL_GPIO_Init+0x354>)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800498e:	4b28      	ldr	r3, [pc, #160]	@ (8004a30 <HAL_GPIO_Init+0x354>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004a30 <HAL_GPIO_Init+0x354>)
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a30 <HAL_GPIO_Init+0x354>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049dc:	4a14      	ldr	r2, [pc, #80]	@ (8004a30 <HAL_GPIO_Init+0x354>)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	3301      	adds	r3, #1
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2b0f      	cmp	r3, #15
 80049ec:	f67f ae86 	bls.w	80046fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	3724      	adds	r7, #36	@ 0x24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40013800 	.word	0x40013800
 8004a08:	40020000 	.word	0x40020000
 8004a0c:	40020400 	.word	0x40020400
 8004a10:	40020800 	.word	0x40020800
 8004a14:	40020c00 	.word	0x40020c00
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	40021400 	.word	0x40021400
 8004a20:	40021800 	.word	0x40021800
 8004a24:	40021c00 	.word	0x40021c00
 8004a28:	40022000 	.word	0x40022000
 8004a2c:	40022400 	.word	0x40022400
 8004a30:	40013c00 	.word	0x40013c00

08004a34 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	e0d9      	b.n	8004c04 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a50:	2201      	movs	r2, #1
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	f040 80c9 	bne.w	8004bfe <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004a6c:	4a6b      	ldr	r2, [pc, #428]	@ (8004c1c <HAL_GPIO_DeInit+0x1e8>)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	089b      	lsrs	r3, r3, #2
 8004a72:	3302      	adds	r3, #2
 8004a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a78:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f003 0303 	and.w	r3, r3, #3
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	220f      	movs	r2, #15
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a63      	ldr	r2, [pc, #396]	@ (8004c20 <HAL_GPIO_DeInit+0x1ec>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d037      	beq.n	8004b06 <HAL_GPIO_DeInit+0xd2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a62      	ldr	r2, [pc, #392]	@ (8004c24 <HAL_GPIO_DeInit+0x1f0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d031      	beq.n	8004b02 <HAL_GPIO_DeInit+0xce>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a61      	ldr	r2, [pc, #388]	@ (8004c28 <HAL_GPIO_DeInit+0x1f4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d02b      	beq.n	8004afe <HAL_GPIO_DeInit+0xca>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a60      	ldr	r2, [pc, #384]	@ (8004c2c <HAL_GPIO_DeInit+0x1f8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d025      	beq.n	8004afa <HAL_GPIO_DeInit+0xc6>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a5f      	ldr	r2, [pc, #380]	@ (8004c30 <HAL_GPIO_DeInit+0x1fc>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01f      	beq.n	8004af6 <HAL_GPIO_DeInit+0xc2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a5e      	ldr	r2, [pc, #376]	@ (8004c34 <HAL_GPIO_DeInit+0x200>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d019      	beq.n	8004af2 <HAL_GPIO_DeInit+0xbe>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a5d      	ldr	r2, [pc, #372]	@ (8004c38 <HAL_GPIO_DeInit+0x204>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d013      	beq.n	8004aee <HAL_GPIO_DeInit+0xba>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a5c      	ldr	r2, [pc, #368]	@ (8004c3c <HAL_GPIO_DeInit+0x208>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00d      	beq.n	8004aea <HAL_GPIO_DeInit+0xb6>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a5b      	ldr	r2, [pc, #364]	@ (8004c40 <HAL_GPIO_DeInit+0x20c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d007      	beq.n	8004ae6 <HAL_GPIO_DeInit+0xb2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a5a      	ldr	r2, [pc, #360]	@ (8004c44 <HAL_GPIO_DeInit+0x210>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d101      	bne.n	8004ae2 <HAL_GPIO_DeInit+0xae>
 8004ade:	2309      	movs	r3, #9
 8004ae0:	e012      	b.n	8004b08 <HAL_GPIO_DeInit+0xd4>
 8004ae2:	230a      	movs	r3, #10
 8004ae4:	e010      	b.n	8004b08 <HAL_GPIO_DeInit+0xd4>
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	e00e      	b.n	8004b08 <HAL_GPIO_DeInit+0xd4>
 8004aea:	2307      	movs	r3, #7
 8004aec:	e00c      	b.n	8004b08 <HAL_GPIO_DeInit+0xd4>
 8004aee:	2306      	movs	r3, #6
 8004af0:	e00a      	b.n	8004b08 <HAL_GPIO_DeInit+0xd4>
 8004af2:	2305      	movs	r3, #5
 8004af4:	e008      	b.n	8004b08 <HAL_GPIO_DeInit+0xd4>
 8004af6:	2304      	movs	r3, #4
 8004af8:	e006      	b.n	8004b08 <HAL_GPIO_DeInit+0xd4>
 8004afa:	2303      	movs	r3, #3
 8004afc:	e004      	b.n	8004b08 <HAL_GPIO_DeInit+0xd4>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e002      	b.n	8004b08 <HAL_GPIO_DeInit+0xd4>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <HAL_GPIO_DeInit+0xd4>
 8004b06:	2300      	movs	r3, #0
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	f002 0203 	and.w	r2, r2, #3
 8004b0e:	0092      	lsls	r2, r2, #2
 8004b10:	4093      	lsls	r3, r2
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d132      	bne.n	8004b7e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004b18:	4b4b      	ldr	r3, [pc, #300]	@ (8004c48 <HAL_GPIO_DeInit+0x214>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	4949      	ldr	r1, [pc, #292]	@ (8004c48 <HAL_GPIO_DeInit+0x214>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004b26:	4b48      	ldr	r3, [pc, #288]	@ (8004c48 <HAL_GPIO_DeInit+0x214>)
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	4946      	ldr	r1, [pc, #280]	@ (8004c48 <HAL_GPIO_DeInit+0x214>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004b34:	4b44      	ldr	r3, [pc, #272]	@ (8004c48 <HAL_GPIO_DeInit+0x214>)
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	4942      	ldr	r1, [pc, #264]	@ (8004c48 <HAL_GPIO_DeInit+0x214>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004b42:	4b41      	ldr	r3, [pc, #260]	@ (8004c48 <HAL_GPIO_DeInit+0x214>)
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	493f      	ldr	r1, [pc, #252]	@ (8004c48 <HAL_GPIO_DeInit+0x214>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	220f      	movs	r2, #15
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004b60:	4a2e      	ldr	r2, [pc, #184]	@ (8004c1c <HAL_GPIO_DeInit+0x1e8>)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	089b      	lsrs	r3, r3, #2
 8004b66:	3302      	adds	r3, #2
 8004b68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	43da      	mvns	r2, r3
 8004b70:	482a      	ldr	r0, [pc, #168]	@ (8004c1c <HAL_GPIO_DeInit+0x1e8>)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	089b      	lsrs	r3, r3, #2
 8004b76:	400a      	ands	r2, r1
 8004b78:	3302      	adds	r3, #2
 8004b7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	2103      	movs	r1, #3
 8004b88:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	401a      	ands	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	08da      	lsrs	r2, r3, #3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3208      	adds	r2, #8
 8004b9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	220f      	movs	r2, #15
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	08d2      	lsrs	r2, r2, #3
 8004bb4:	4019      	ands	r1, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3208      	adds	r2, #8
 8004bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	2103      	movs	r1, #3
 8004bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	401a      	ands	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	2101      	movs	r1, #1
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	401a      	ands	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	2103      	movs	r1, #3
 8004bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	401a      	ands	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	3301      	adds	r3, #1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2b0f      	cmp	r3, #15
 8004c08:	f67f af22 	bls.w	8004a50 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	bf00      	nop
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40013800 	.word	0x40013800
 8004c20:	40020000 	.word	0x40020000
 8004c24:	40020400 	.word	0x40020400
 8004c28:	40020800 	.word	0x40020800
 8004c2c:	40020c00 	.word	0x40020c00
 8004c30:	40021000 	.word	0x40021000
 8004c34:	40021400 	.word	0x40021400
 8004c38:	40021800 	.word	0x40021800
 8004c3c:	40021c00 	.word	0x40021c00
 8004c40:	40022000 	.word	0x40022000
 8004c44:	40022400 	.word	0x40022400
 8004c48:	40013c00 	.word	0x40013c00

08004c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	807b      	strh	r3, [r7, #2]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c5c:	787b      	ldrb	r3, [r7, #1]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c62:	887a      	ldrh	r2, [r7, #2]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004c68:	e003      	b.n	8004c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004c6a:	887b      	ldrh	r3, [r7, #2]
 8004c6c:	041a      	lsls	r2, r3, #16
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	619a      	str	r2, [r3, #24]
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	460b      	mov	r3, r1
 8004c88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c90:	887a      	ldrh	r2, [r7, #2]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4013      	ands	r3, r2
 8004c96:	041a      	lsls	r2, r3, #16
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	43d9      	mvns	r1, r3
 8004c9c:	887b      	ldrh	r3, [r7, #2]
 8004c9e:	400b      	ands	r3, r1
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	619a      	str	r2, [r3, #24]
}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e08b      	b.n	8004dde <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fc fabe 	bl	800125c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2224      	movs	r2, #36	@ 0x24
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0201 	bic.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d107      	bne.n	8004d2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d2a:	609a      	str	r2, [r3, #8]
 8004d2c:	e006      	b.n	8004d3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004d3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d108      	bne.n	8004d56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d52:	605a      	str	r2, [r3, #4]
 8004d54:	e007      	b.n	8004d66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6859      	ldr	r1, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4b1d      	ldr	r3, [pc, #116]	@ (8004de8 <HAL_I2C_Init+0x134>)
 8004d72:	430b      	orrs	r3, r1
 8004d74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69d9      	ldr	r1, [r3, #28]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1a      	ldr	r2, [r3, #32]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	02008000 	.word	0x02008000

08004dec <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e021      	b.n	8004e42 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2224      	movs	r2, #36	@ 0x24
 8004e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0201 	bic.w	r2, r2, #1
 8004e14:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fc fb4c 	bl	80014b4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	@ 0x28
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	607a      	str	r2, [r7, #4]
 8004e56:	461a      	mov	r2, r3
 8004e58:	460b      	mov	r3, r1
 8004e5a:	817b      	strh	r3, [r7, #10]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	f040 80ef 	bne.w	8005050 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e80:	d101      	bne.n	8004e86 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8004e82:	2302      	movs	r3, #2
 8004e84:	e0e5      	b.n	8005052 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_I2C_Master_Transmit_DMA+0x48>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e0de      	b.n	8005052 <HAL_I2C_Master_Transmit_DMA+0x206>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2221      	movs	r2, #33	@ 0x21
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2210      	movs	r2, #16
 8004ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	893a      	ldrh	r2, [r7, #8]
 8004ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4a66      	ldr	r2, [pc, #408]	@ (800505c <HAL_I2C_Master_Transmit_DMA+0x210>)
 8004ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4a66      	ldr	r2, [pc, #408]	@ (8005060 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8004ec8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2bff      	cmp	r3, #255	@ 0xff
 8004ed2:	d906      	bls.n	8004ee2 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	22ff      	movs	r2, #255	@ 0xff
 8004ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004eda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	e007      	b.n	8004ef2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004eec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ef0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01a      	beq.n	8004f30 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	781a      	ldrb	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f14:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d074      	beq.n	8005022 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d022      	beq.n	8004f86 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f44:	4a47      	ldr	r2, [pc, #284]	@ (8005064 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8004f46:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4c:	4a46      	ldr	r2, [pc, #280]	@ (8005068 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8004f4e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f54:	2200      	movs	r2, #0
 8004f56:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004f70:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004f76:	f7fd fdc5 	bl	8002b04 <HAL_DMA_Start_IT>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d13a      	bne.n	8004ffa <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8004f84:	e013      	b.n	8004fae <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e051      	b.n	8005052 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	8979      	ldrh	r1, [r7, #10]
 8004fba:	4b2c      	ldr	r3, [pc, #176]	@ (800506c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f001 fcff 	bl	80069c4 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004fe0:	2110      	movs	r1, #16
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f001 fd20 	bl	8006a28 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	e028      	b.n	800504c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500e:	f043 0210 	orr.w	r2, r3, #16
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e017      	b.n	8005052 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a12      	ldr	r2, [pc, #72]	@ (8005070 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8005026:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	8979      	ldrh	r1, [r7, #10]
 800502e:	4b0f      	ldr	r3, [pc, #60]	@ (800506c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f001 fcc4 	bl	80069c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005044:	2101      	movs	r1, #1
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f001 fcee 	bl	8006a28 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	e000      	b.n	8005052 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005050:	2302      	movs	r3, #2
  }
}
 8005052:	4618      	mov	r0, r3
 8005054:	3720      	adds	r7, #32
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	ffff0000 	.word	0xffff0000
 8005060:	0800580b 	.word	0x0800580b
 8005064:	08006837 	.word	0x08006837
 8005068:	08006913 	.word	0x08006913
 800506c:	80002000 	.word	0x80002000
 8005070:	0800537f 	.word	0x0800537f

08005074 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	4613      	mov	r3, r2
 8005080:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b20      	cmp	r3, #32
 800508c:	f040 809b 	bne.w	80051c6 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_I2C_Slave_Receive_DMA+0x28>
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d105      	bne.n	80050a8 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e08f      	b.n	80051c8 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_I2C_Slave_Receive_DMA+0x42>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e088      	b.n	80051c8 <HAL_I2C_Slave_Receive_DMA+0x154>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2222      	movs	r2, #34	@ 0x22
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	88fa      	ldrh	r2, [r7, #6]
 80050de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a38      	ldr	r2, [pc, #224]	@ (80051d0 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 80050ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4a38      	ldr	r2, [pc, #224]	@ (80051d4 <HAL_I2C_Slave_Receive_DMA+0x160>)
 80050f4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d020      	beq.n	8005140 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005102:	4a35      	ldr	r2, [pc, #212]	@ (80051d8 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005104:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510a:	4a34      	ldr	r2, [pc, #208]	@ (80051dc <HAL_I2C_Slave_Receive_DMA+0x168>)
 800510c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005112:	2200      	movs	r2, #0
 8005114:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511a:	2200      	movs	r2, #0
 800511c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3324      	adds	r3, #36	@ 0x24
 8005128:	4619      	mov	r1, r3
 800512a:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005130:	f7fd fce8 	bl	8002b04 <HAL_DMA_Start_IT>
 8005134:	4603      	mov	r3, r0
 8005136:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005138:	7dfb      	ldrb	r3, [r7, #23]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d12f      	bne.n	800519e <HAL_I2C_Slave_Receive_DMA+0x12a>
 800513e:	e013      	b.n	8005168 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2228      	movs	r2, #40	@ 0x28
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005154:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e02f      	b.n	80051c8 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005176:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005180:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f001 fc4f 	bl	8006a28 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005198:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	e014      	b.n	80051c8 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2228      	movs	r2, #40	@ 0x28
 80051a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b2:	f043 0210 	orr.w	r2, r3, #16
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 80051c6:	2302      	movs	r3, #2
  }
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	ffff0000 	.word	0xffff0000
 80051d4:	08005cad 	.word	0x08005cad
 80051d8:	080068cd 	.word	0x080068cd
 80051dc:	08006913 	.word	0x08006913

080051e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	68f9      	ldr	r1, [r7, #12]
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	4798      	blx	r3
  }
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	0a1b      	lsrs	r3, r3, #8
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d010      	beq.n	800525a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	09db      	lsrs	r3, r3, #7
 800523c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005248:	f043 0201 	orr.w	r2, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005258:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	0a9b      	lsrs	r3, r3, #10
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d010      	beq.n	8005288 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	09db      	lsrs	r3, r3, #7
 800526a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005276:	f043 0208 	orr.w	r2, r3, #8
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005286:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	0a5b      	lsrs	r3, r3, #9
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d010      	beq.n	80052b6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	09db      	lsrs	r3, r3, #7
 8005298:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a4:	f043 0202 	orr.w	r2, r3, #2
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052b4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f003 030b 	and.w	r3, r3, #11
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80052c6:	68f9      	ldr	r1, [r7, #12]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f001 f979 	bl	80065c0 <I2C_ITError>
  }
}
 80052ce:	bf00      	nop
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	460b      	mov	r3, r1
 8005308:	70fb      	strb	r3, [r7, #3]
 800530a:	4613      	mov	r3, r2
 800530c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b088      	sub	sp, #32
 8005382:	af02      	add	r7, sp, #8
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <I2C_Master_ISR_IT+0x1e>
 8005398:	2302      	movs	r3, #2
 800539a:	e12e      	b.n	80055fa <I2C_Master_ISR_IT+0x27c>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	091b      	lsrs	r3, r3, #4
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d013      	beq.n	80053d8 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	091b      	lsrs	r3, r3, #4
 80053b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00d      	beq.n	80053d8 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2210      	movs	r2, #16
 80053c2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c8:	f043 0204 	orr.w	r2, r3, #4
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f001 fa0c 	bl	80067ee <I2C_Flush_TXDR>
 80053d6:	e0fb      	b.n	80055d0 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	089b      	lsrs	r3, r3, #2
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d023      	beq.n	800542c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	089b      	lsrs	r3, r3, #2
 80053e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01d      	beq.n	800542c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f023 0304 	bic.w	r3, r3, #4
 80053f6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800542a:	e0d1      	b.n	80055d0 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	099b      	lsrs	r3, r3, #6
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	d12a      	bne.n	800548e <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	085b      	lsrs	r3, r3, #1
 800543c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005440:	2b00      	cmp	r3, #0
 8005442:	d024      	beq.n	800548e <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01e      	beq.n	800548e <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 80ba 	beq.w	80055d0 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005460:	781a      	ldrb	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800548c:	e0a0      	b.n	80055d0 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	09db      	lsrs	r3, r3, #7
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d06b      	beq.n	8005572 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	099b      	lsrs	r3, r3, #6
 800549e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d065      	beq.n	8005572 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d04e      	beq.n	800554e <I2C_Master_ISR_IT+0x1d0>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d14a      	bne.n	800554e <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054c4:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2bff      	cmp	r3, #255	@ 0xff
 80054ce:	d91c      	bls.n	800550a <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	0c1b      	lsrs	r3, r3, #16
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d103      	bne.n	80054ec <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80054ea:	e002      	b.n	80054f2 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	22ff      	movs	r2, #255	@ 0xff
 80054f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	8a79      	ldrh	r1, [r7, #18]
 80054fa:	2300      	movs	r3, #0
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f001 fa5e 	bl	80069c4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005508:	e032      	b.n	8005570 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005518:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800551c:	d00b      	beq.n	8005536 <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005522:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005528:	8a79      	ldrh	r1, [r7, #18]
 800552a:	2000      	movs	r0, #0
 800552c:	9000      	str	r0, [sp, #0]
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f001 fa48 	bl	80069c4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005534:	e01c      	b.n	8005570 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800553a:	b2da      	uxtb	r2, r3
 800553c:	8a79      	ldrh	r1, [r7, #18]
 800553e:	2300      	movs	r3, #0
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f001 fa3c 	bl	80069c4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800554c:	e010      	b.n	8005570 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005558:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800555c:	d003      	beq.n	8005566 <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fd09 	bl	8005f76 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005564:	e034      	b.n	80055d0 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005566:	2140      	movs	r1, #64	@ 0x40
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f001 f829 	bl	80065c0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800556e:	e02f      	b.n	80055d0 <I2C_Master_ISR_IT+0x252>
 8005570:	e02e      	b.n	80055d0 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	099b      	lsrs	r3, r3, #6
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d028      	beq.n	80055d0 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	099b      	lsrs	r3, r3, #6
 8005582:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005586:	2b00      	cmp	r3, #0
 8005588:	d022      	beq.n	80055d0 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d119      	bne.n	80055c8 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800559e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055a2:	d015      	beq.n	80055d0 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055ac:	d108      	bne.n	80055c0 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055bc:	605a      	str	r2, [r3, #4]
 80055be:	e007      	b.n	80055d0 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 fcd8 	bl	8005f76 <I2C_ITMasterSeqCplt>
 80055c6:	e003      	b.n	80055d0 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80055c8:	2140      	movs	r1, #64	@ 0x40
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 fff8 	bl	80065c0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d009      	beq.n	80055f0 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80055e8:	6979      	ldr	r1, [r7, #20]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 fd5e 	bl	80060ac <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b086      	sub	sp, #24
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005612:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <I2C_Slave_ISR_IT+0x24>
 8005622:	2302      	movs	r3, #2
 8005624:	e0ed      	b.n	8005802 <I2C_Slave_ISR_IT+0x200>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005642:	2b00      	cmp	r3, #0
 8005644:	d004      	beq.n	8005650 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005646:	6939      	ldr	r1, [r7, #16]
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 fdf9 	bl	8006240 <I2C_ITSlaveCplt>
 800564e:	e0d3      	b.n	80057f8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	091b      	lsrs	r3, r3, #4
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d04d      	beq.n	80056f8 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	091b      	lsrs	r3, r3, #4
 8005660:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005664:	2b00      	cmp	r3, #0
 8005666:	d047      	beq.n	80056f8 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d128      	bne.n	80056c4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b28      	cmp	r3, #40	@ 0x28
 800567c:	d108      	bne.n	8005690 <I2C_Slave_ISR_IT+0x8e>
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005684:	d104      	bne.n	8005690 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005686:	6939      	ldr	r1, [r7, #16]
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 ff43 	bl	8006514 <I2C_ITListenCplt>
 800568e:	e032      	b.n	80056f6 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b29      	cmp	r3, #41	@ 0x29
 800569a:	d10e      	bne.n	80056ba <I2C_Slave_ISR_IT+0xb8>
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056a2:	d00a      	beq.n	80056ba <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2210      	movs	r2, #16
 80056aa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f001 f89e 	bl	80067ee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 fc9c 	bl	8005ff0 <I2C_ITSlaveSeqCplt>
 80056b8:	e01d      	b.n	80056f6 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2210      	movs	r2, #16
 80056c0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80056c2:	e096      	b.n	80057f2 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2210      	movs	r2, #16
 80056ca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d0:	f043 0204 	orr.w	r2, r3, #4
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d004      	beq.n	80056e8 <I2C_Slave_ISR_IT+0xe6>
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056e4:	f040 8085 	bne.w	80057f2 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ec:	4619      	mov	r1, r3
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 ff66 	bl	80065c0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80056f4:	e07d      	b.n	80057f2 <I2C_Slave_ISR_IT+0x1f0>
 80056f6:	e07c      	b.n	80057f2 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	089b      	lsrs	r3, r3, #2
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d030      	beq.n	8005766 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	089b      	lsrs	r3, r3, #2
 8005708:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800570c:	2b00      	cmp	r3, #0
 800570e:	d02a      	beq.n	8005766 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d018      	beq.n	800574c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d14f      	bne.n	80057f6 <I2C_Slave_ISR_IT+0x1f4>
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800575c:	d04b      	beq.n	80057f6 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 fc46 	bl	8005ff0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005764:	e047      	b.n	80057f6 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	08db      	lsrs	r3, r3, #3
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	08db      	lsrs	r3, r3, #3
 8005776:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800577a:	2b00      	cmp	r3, #0
 800577c:	d004      	beq.n	8005788 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800577e:	6939      	ldr	r1, [r7, #16]
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fb74 	bl	8005e6e <I2C_ITAddrCplt>
 8005786:	e037      	b.n	80057f8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	085b      	lsrs	r3, r3, #1
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	d031      	beq.n	80057f8 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	085b      	lsrs	r3, r3, #1
 8005798:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800579c:	2b00      	cmp	r3, #0
 800579e:	d02b      	beq.n	80057f8 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d018      	beq.n	80057dc <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ae:	781a      	ldrb	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80057da:	e00d      	b.n	80057f8 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057e2:	d002      	beq.n	80057ea <I2C_Slave_ISR_IT+0x1e8>
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 fc00 	bl	8005ff0 <I2C_ITSlaveSeqCplt>
 80057f0:	e002      	b.n	80057f8 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80057f2:	bf00      	nop
 80057f4:	e000      	b.n	80057f8 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80057f6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b088      	sub	sp, #32
 800580e:	af02      	add	r7, sp, #8
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <I2C_Master_ISR_DMA+0x1a>
 8005820:	2302      	movs	r3, #2
 8005822:	e0f0      	b.n	8005a06 <I2C_Master_ISR_DMA+0x1fc>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	091b      	lsrs	r3, r3, #4
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d017      	beq.n	8005868 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	091b      	lsrs	r3, r3, #4
 800583c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005840:	2b00      	cmp	r3, #0
 8005842:	d011      	beq.n	8005868 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2210      	movs	r2, #16
 800584a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005850:	f043 0204 	orr.w	r2, r3, #4
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005858:	2120      	movs	r1, #32
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f001 f8e4 	bl	8006a28 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 ffc4 	bl	80067ee <I2C_Flush_TXDR>
 8005866:	e0c9      	b.n	80059fc <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	09db      	lsrs	r3, r3, #7
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8081 	beq.w	8005978 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	099b      	lsrs	r3, r3, #6
 800587a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800587e:	2b00      	cmp	r3, #0
 8005880:	d07a      	beq.n	8005978 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005890:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d05c      	beq.n	8005956 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2bff      	cmp	r3, #255	@ 0xff
 80058b2:	d914      	bls.n	80058de <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	0c1b      	lsrs	r3, r3, #16
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d103      	bne.n	80058d0 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80058ce:	e002      	b.n	80058d6 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	22ff      	movs	r2, #255	@ 0xff
 80058d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 80058d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	e010      	b.n	8005900 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058f0:	d003      	beq.n	80058fa <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	e002      	b.n	8005900 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80058fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058fe:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005904:	b2da      	uxtb	r2, r3
 8005906:	8a79      	ldrh	r1, [r7, #18]
 8005908:	2300      	movs	r3, #0
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f001 f858 	bl	80069c4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	b29a      	uxth	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b22      	cmp	r3, #34	@ 0x22
 8005930:	d108      	bne.n	8005944 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005940:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005942:	e05b      	b.n	80059fc <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005952:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005954:	e052      	b.n	80059fc <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005960:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005964:	d003      	beq.n	800596e <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 fb05 	bl	8005f76 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800596c:	e046      	b.n	80059fc <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800596e:	2140      	movs	r1, #64	@ 0x40
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 fe25 	bl	80065c0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005976:	e041      	b.n	80059fc <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	099b      	lsrs	r3, r3, #6
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d029      	beq.n	80059d8 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	099b      	lsrs	r3, r3, #6
 8005988:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800598c:	2b00      	cmp	r3, #0
 800598e:	d023      	beq.n	80059d8 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d119      	bne.n	80059ce <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059a8:	d027      	beq.n	80059fa <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80059b2:	d108      	bne.n	80059c6 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059c2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80059c4:	e019      	b.n	80059fa <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fad5 	bl	8005f76 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80059cc:	e015      	b.n	80059fa <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80059ce:	2140      	movs	r1, #64	@ 0x40
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 fdf5 	bl	80065c0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80059d6:	e010      	b.n	80059fa <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00b      	beq.n	80059fc <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	095b      	lsrs	r3, r3, #5
 80059e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80059f0:	68b9      	ldr	r1, [r7, #8]
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fb5a 	bl	80060ac <I2C_ITMasterCplt>
 80059f8:	e000      	b.n	80059fc <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 80059fa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005a1c:	4b94      	ldr	r3, [pc, #592]	@ (8005c70 <I2C_Mem_ISR_DMA+0x260>)
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <I2C_Mem_ISR_DMA+0x1e>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e139      	b.n	8005ca2 <I2C_Mem_ISR_DMA+0x292>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	091b      	lsrs	r3, r3, #4
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d017      	beq.n	8005a72 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	091b      	lsrs	r3, r3, #4
 8005a46:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d011      	beq.n	8005a72 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2210      	movs	r2, #16
 8005a54:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a5a:	f043 0204 	orr.w	r2, r3, #4
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005a62:	2120      	movs	r1, #32
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 ffdf 	bl	8006a28 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 febf 	bl	80067ee <I2C_Flush_TXDR>
 8005a70:	e112      	b.n	8005c98 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	085b      	lsrs	r3, r3, #1
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00f      	beq.n	8005a9e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	085b      	lsrs	r3, r3, #1
 8005a82:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a92:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a9c:	e0fc      	b.n	8005c98 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	09db      	lsrs	r3, r3, #7
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d06e      	beq.n	8005b88 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	099b      	lsrs	r3, r3, #6
 8005aae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d068      	beq.n	8005b88 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f001 f839 	bl	8006b30 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005abe:	2110      	movs	r1, #16
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 ffb1 	bl	8006a28 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d056      	beq.n	8005b7e <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2bff      	cmp	r3, #255	@ 0xff
 8005ad8:	d91e      	bls.n	8005b18 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	0c1b      	lsrs	r3, r3, #16
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d103      	bne.n	8005af6 <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005af4:	e002      	b.n	8005afc <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	22ff      	movs	r2, #255	@ 0xff
 8005afa:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b00:	b299      	uxth	r1, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	2300      	movs	r3, #0
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 ff57 	bl	80069c4 <I2C_TransferConfig>
 8005b16:	e011      	b.n	8005b3c <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b26:	b299      	uxth	r1, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	2300      	movs	r3, #0
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 ff44 	bl	80069c4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b22      	cmp	r3, #34	@ 0x22
 8005b58:	d108      	bne.n	8005b6c <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b68:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005b6a:	e095      	b.n	8005c98 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b7a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005b7c:	e08c      	b.n	8005c98 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b7e:	2140      	movs	r1, #64	@ 0x40
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 fd1d 	bl	80065c0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005b86:	e087      	b.n	8005c98 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	099b      	lsrs	r3, r3, #6
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d071      	beq.n	8005c78 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	099b      	lsrs	r3, r3, #6
 8005b98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d06b      	beq.n	8005c78 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 ffc4 	bl	8006b30 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005ba8:	2110      	movs	r1, #16
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 ff3c 	bl	8006a28 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b22      	cmp	r3, #34	@ 0x22
 8005bba:	d101      	bne.n	8005bc0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8005bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8005c74 <I2C_Mem_ISR_DMA+0x264>)
 8005bbe:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2bff      	cmp	r3, #255	@ 0xff
 8005bc8:	d91e      	bls.n	8005c08 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	0c1b      	lsrs	r3, r3, #16
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d103      	bne.n	8005be6 <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005be4:	e002      	b.n	8005bec <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	22ff      	movs	r2, #255	@ 0xff
 8005bea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bf0:	b299      	uxth	r1, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fedf 	bl	80069c4 <I2C_TransferConfig>
 8005c06:	e011      	b.n	8005c2c <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c16:	b299      	uxth	r1, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 fecc 	bl	80069c4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b22      	cmp	r3, #34	@ 0x22
 8005c48:	d108      	bne.n	8005c5c <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c58:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c5a:	e01d      	b.n	8005c98 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c6a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c6c:	e014      	b.n	8005c98 <I2C_Mem_ISR_DMA+0x288>
 8005c6e:	bf00      	nop
 8005c70:	80002000 	.word	0x80002000
 8005c74:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d009      	beq.n	8005c98 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 fa0a 	bl	80060ac <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop

08005cac <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <I2C_Slave_ISR_DMA+0x24>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e0ca      	b.n	8005e66 <I2C_Slave_ISR_DMA+0x1ba>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	095b      	lsrs	r3, r3, #5
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d004      	beq.n	8005cfa <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 faa4 	bl	8006240 <I2C_ITSlaveCplt>
 8005cf8:	e0b0      	b.n	8005e5c <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	091b      	lsrs	r3, r3, #4
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 809a 	beq.w	8005e3c <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	091b      	lsrs	r3, r3, #4
 8005d0c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8093 	beq.w	8005e3c <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	0b9b      	lsrs	r3, r3, #14
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d105      	bne.n	8005d2e <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	0bdb      	lsrs	r3, r3, #15
 8005d26:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d07f      	beq.n	8005e2e <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00d      	beq.n	8005d52 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	0bdb      	lsrs	r3, r3, #15
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d007      	beq.n	8005d52 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00d      	beq.n	8005d76 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	0b9b      	lsrs	r3, r3, #14
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d007      	beq.n	8005d76 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8005d72:	2301      	movs	r3, #1
 8005d74:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d128      	bne.n	8005dce <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b28      	cmp	r3, #40	@ 0x28
 8005d86:	d108      	bne.n	8005d9a <I2C_Slave_ISR_DMA+0xee>
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d8e:	d104      	bne.n	8005d9a <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 fbbe 	bl	8006514 <I2C_ITListenCplt>
 8005d98:	e048      	b.n	8005e2c <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b29      	cmp	r3, #41	@ 0x29
 8005da4:	d10e      	bne.n	8005dc4 <I2C_Slave_ISR_DMA+0x118>
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005dac:	d00a      	beq.n	8005dc4 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2210      	movs	r2, #16
 8005db4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 fd19 	bl	80067ee <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 f917 	bl	8005ff0 <I2C_ITSlaveSeqCplt>
 8005dc2:	e033      	b.n	8005e2c <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2210      	movs	r2, #16
 8005dca:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005dcc:	e034      	b.n	8005e38 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2210      	movs	r2, #16
 8005dd4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dda:	f043 0204 	orr.w	r2, r3, #4
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005de8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <I2C_Slave_ISR_DMA+0x14c>
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005df6:	d11f      	bne.n	8005e38 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
 8005dfa:	2b21      	cmp	r3, #33	@ 0x21
 8005dfc:	d002      	beq.n	8005e04 <I2C_Slave_ISR_DMA+0x158>
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
 8005e00:	2b29      	cmp	r3, #41	@ 0x29
 8005e02:	d103      	bne.n	8005e0c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2221      	movs	r2, #33	@ 0x21
 8005e08:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e0a:	e008      	b.n	8005e1e <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e0c:	7dfb      	ldrb	r3, [r7, #23]
 8005e0e:	2b22      	cmp	r3, #34	@ 0x22
 8005e10:	d002      	beq.n	8005e18 <I2C_Slave_ISR_DMA+0x16c>
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
 8005e14:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e16:	d102      	bne.n	8005e1e <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2222      	movs	r2, #34	@ 0x22
 8005e1c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e22:	4619      	mov	r1, r3
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 fbcb 	bl	80065c0 <I2C_ITError>
      if (treatdmanack == 1U)
 8005e2a:	e005      	b.n	8005e38 <I2C_Slave_ISR_DMA+0x18c>
 8005e2c:	e004      	b.n	8005e38 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2210      	movs	r2, #16
 8005e34:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e36:	e011      	b.n	8005e5c <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8005e38:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e3a:	e00f      	b.n	8005e5c <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	08db      	lsrs	r3, r3, #3
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d009      	beq.n	8005e5c <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	08db      	lsrs	r3, r3, #3
 8005e4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005e54:	68b9      	ldr	r1, [r7, #8]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 f809 	bl	8005e6e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3720      	adds	r7, #32
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005e84:	2b28      	cmp	r3, #40	@ 0x28
 8005e86:	d16a      	bne.n	8005f5e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	0c1b      	lsrs	r3, r3, #16
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	0c1b      	lsrs	r3, r3, #16
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005ea6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eb4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005ec2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d138      	bne.n	8005f3e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005ecc:	897b      	ldrh	r3, [r7, #10]
 8005ece:	09db      	lsrs	r3, r3, #7
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	89bb      	ldrh	r3, [r7, #12]
 8005ed4:	4053      	eors	r3, r2
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f003 0306 	and.w	r3, r3, #6
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d11c      	bne.n	8005f1a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005ee0:	897b      	ldrh	r3, [r7, #10]
 8005ee2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d13b      	bne.n	8005f6e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2208      	movs	r2, #8
 8005f02:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005f0c:	89ba      	ldrh	r2, [r7, #12]
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff f9f3 	bl	80052fe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005f18:	e029      	b.n	8005f6e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005f1a:	893b      	ldrh	r3, [r7, #8]
 8005f1c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005f1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fe04 	bl	8006b30 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005f30:	89ba      	ldrh	r2, [r7, #12]
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7ff f9e1 	bl	80052fe <HAL_I2C_AddrCallback>
}
 8005f3c:	e017      	b.n	8005f6e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005f3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fdf4 	bl	8006b30 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005f50:	89ba      	ldrh	r2, [r7, #12]
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff f9d1 	bl	80052fe <HAL_I2C_AddrCallback>
}
 8005f5c:	e007      	b.n	8005f6e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2208      	movs	r2, #8
 8005f64:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005f6e:	bf00      	nop
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b21      	cmp	r3, #33	@ 0x21
 8005f90:	d115      	bne.n	8005fbe <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2211      	movs	r2, #17
 8005f9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fdc1 	bl	8006b30 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f015 fb08 	bl	801b5cc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fbc:	e014      	b.n	8005fe8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2212      	movs	r2, #18
 8005fca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fdab 	bl	8006b30 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7ff f977 	bl	80052d6 <HAL_I2C_MasterRxCpltCallback>
}
 8005fe8:	bf00      	nop
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	0b9b      	lsrs	r3, r3, #14
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d008      	beq.n	8006026 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e00d      	b.n	8006042 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	0bdb      	lsrs	r3, r3, #15
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d007      	beq.n	8006042 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006040:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b29      	cmp	r3, #41	@ 0x29
 800604c:	d112      	bne.n	8006074 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2228      	movs	r2, #40	@ 0x28
 8006052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2221      	movs	r2, #33	@ 0x21
 800605a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800605c:	2101      	movs	r1, #1
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fd66 	bl	8006b30 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff f93c 	bl	80052ea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006072:	e017      	b.n	80060a4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b2a      	cmp	r3, #42	@ 0x2a
 800607e:	d111      	bne.n	80060a4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2228      	movs	r2, #40	@ 0x28
 8006084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2222      	movs	r2, #34	@ 0x22
 800608c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800608e:	2102      	movs	r1, #2
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fd4d 	bl	8006b30 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f015 fac2 	bl	801b628 <HAL_I2C_SlaveRxCpltCallback>
}
 80060a4:	bf00      	nop
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2220      	movs	r2, #32
 80060c0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b21      	cmp	r3, #33	@ 0x21
 80060cc:	d107      	bne.n	80060de <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80060ce:	2101      	movs	r1, #1
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fd2d 	bl	8006b30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2211      	movs	r2, #17
 80060da:	631a      	str	r2, [r3, #48]	@ 0x30
 80060dc:	e00c      	b.n	80060f8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b22      	cmp	r3, #34	@ 0x22
 80060e8:	d106      	bne.n	80060f8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80060ea:	2102      	movs	r1, #2
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fd1f 	bl	8006b30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2212      	movs	r2, #18
 80060f6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6859      	ldr	r1, [r3, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b4d      	ldr	r3, [pc, #308]	@ (8006238 <I2C_ITMasterCplt+0x18c>)
 8006104:	400b      	ands	r3, r1
 8006106:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a4a      	ldr	r2, [pc, #296]	@ (800623c <I2C_ITMasterCplt+0x190>)
 8006112:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	091b      	lsrs	r3, r3, #4
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d009      	beq.n	8006134 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2210      	movs	r2, #16
 8006126:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612c:	f043 0204 	orr.w	r2, r3, #4
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b60      	cmp	r3, #96	@ 0x60
 800613e:	d10b      	bne.n	8006158 <I2C_ITMasterCplt+0xac>
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	089b      	lsrs	r3, r3, #2
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d005      	beq.n	8006158 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006152:	b2db      	uxtb	r3, r3
 8006154:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006156:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fb48 	bl	80067ee <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006162:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b60      	cmp	r3, #96	@ 0x60
 800616e:	d002      	beq.n	8006176 <I2C_ITMasterCplt+0xca>
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d006      	beq.n	8006184 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fa1f 	bl	80065c0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006182:	e054      	b.n	800622e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b21      	cmp	r3, #33	@ 0x21
 800618e:	d124      	bne.n	80061da <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b40      	cmp	r3, #64	@ 0x40
 80061a8:	d10b      	bne.n	80061c2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff f8b7 	bl	800532e <HAL_I2C_MemTxCpltCallback>
}
 80061c0:	e035      	b.n	800622e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f015 f9fa 	bl	801b5cc <HAL_I2C_MasterTxCpltCallback>
}
 80061d8:	e029      	b.n	800622e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b22      	cmp	r3, #34	@ 0x22
 80061e4:	d123      	bne.n	800622e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b40      	cmp	r3, #64	@ 0x40
 80061fe:	d10b      	bne.n	8006218 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff f896 	bl	8005342 <HAL_I2C_MemRxCpltCallback>
}
 8006216:	e00a      	b.n	800622e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff f854 	bl	80052d6 <HAL_I2C_MasterRxCpltCallback>
}
 800622e:	bf00      	nop
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	fe00e800 	.word	0xfe00e800
 800623c:	ffff0000 	.word	0xffff0000

08006240 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006262:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2220      	movs	r2, #32
 800626a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800626c:	7afb      	ldrb	r3, [r7, #11]
 800626e:	2b21      	cmp	r3, #33	@ 0x21
 8006270:	d002      	beq.n	8006278 <I2C_ITSlaveCplt+0x38>
 8006272:	7afb      	ldrb	r3, [r7, #11]
 8006274:	2b29      	cmp	r3, #41	@ 0x29
 8006276:	d108      	bne.n	800628a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006278:	f248 0101 	movw	r1, #32769	@ 0x8001
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fc57 	bl	8006b30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2221      	movs	r2, #33	@ 0x21
 8006286:	631a      	str	r2, [r3, #48]	@ 0x30
 8006288:	e019      	b.n	80062be <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800628a:	7afb      	ldrb	r3, [r7, #11]
 800628c:	2b22      	cmp	r3, #34	@ 0x22
 800628e:	d002      	beq.n	8006296 <I2C_ITSlaveCplt+0x56>
 8006290:	7afb      	ldrb	r3, [r7, #11]
 8006292:	2b2a      	cmp	r3, #42	@ 0x2a
 8006294:	d108      	bne.n	80062a8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006296:	f248 0102 	movw	r1, #32770	@ 0x8002
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fc48 	bl	8006b30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2222      	movs	r2, #34	@ 0x22
 80062a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80062a6:	e00a      	b.n	80062be <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80062a8:	7afb      	ldrb	r3, [r7, #11]
 80062aa:	2b28      	cmp	r3, #40	@ 0x28
 80062ac:	d107      	bne.n	80062be <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80062ae:	f248 0103 	movw	r1, #32771	@ 0x8003
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fc3c 	bl	8006b30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062cc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6859      	ldr	r1, [r3, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	4b8c      	ldr	r3, [pc, #560]	@ (800650c <I2C_ITSlaveCplt+0x2cc>)
 80062da:	400b      	ands	r3, r1
 80062dc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fa85 	bl	80067ee <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	0b9b      	lsrs	r3, r3, #14
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d013      	beq.n	8006318 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006304:	2b00      	cmp	r3, #0
 8006306:	d020      	beq.n	800634a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	b29a      	uxth	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006316:	e018      	b.n	800634a <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	0bdb      	lsrs	r3, r3, #15
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d012      	beq.n	800634a <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006332:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006338:	2b00      	cmp	r3, #0
 800633a:	d006      	beq.n	800634a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	b29a      	uxth	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	089b      	lsrs	r3, r3, #2
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d020      	beq.n	8006398 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f023 0304 	bic.w	r3, r3, #4
 800635c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00c      	beq.n	8006398 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006382:	3b01      	subs	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b01      	subs	r3, #1
 8006392:	b29a      	uxth	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d005      	beq.n	80063ae <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a6:	f043 0204 	orr.w	r2, r3, #4
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	091b      	lsrs	r3, r3, #4
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d04a      	beq.n	8006450 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	091b      	lsrs	r3, r3, #4
 80063be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d044      	beq.n	8006450 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d128      	bne.n	8006422 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b28      	cmp	r3, #40	@ 0x28
 80063da:	d108      	bne.n	80063ee <I2C_ITSlaveCplt+0x1ae>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063e2:	d104      	bne.n	80063ee <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80063e4:	6979      	ldr	r1, [r7, #20]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f894 	bl	8006514 <I2C_ITListenCplt>
 80063ec:	e030      	b.n	8006450 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b29      	cmp	r3, #41	@ 0x29
 80063f8:	d10e      	bne.n	8006418 <I2C_ITSlaveCplt+0x1d8>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006400:	d00a      	beq.n	8006418 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2210      	movs	r2, #16
 8006408:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f9ef 	bl	80067ee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7ff fded 	bl	8005ff0 <I2C_ITSlaveSeqCplt>
 8006416:	e01b      	b.n	8006450 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2210      	movs	r2, #16
 800641e:	61da      	str	r2, [r3, #28]
 8006420:	e016      	b.n	8006450 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2210      	movs	r2, #16
 8006428:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800642e:	f043 0204 	orr.w	r2, r3, #4
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <I2C_ITSlaveCplt+0x204>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006442:	d105      	bne.n	8006450 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f8b8 	bl	80065c0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006462:	2b00      	cmp	r3, #0
 8006464:	d010      	beq.n	8006488 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f8a7 	bl	80065c0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b28      	cmp	r3, #40	@ 0x28
 800647c:	d141      	bne.n	8006502 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800647e:	6979      	ldr	r1, [r7, #20]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f847 	bl	8006514 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006486:	e03c      	b.n	8006502 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006490:	d014      	beq.n	80064bc <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff fdac 	bl	8005ff0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a1d      	ldr	r2, [pc, #116]	@ (8006510 <I2C_ITSlaveCplt+0x2d0>)
 800649c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7fe ff30 	bl	800531a <HAL_I2C_ListenCpltCallback>
}
 80064ba:	e022      	b.n	8006502 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b22      	cmp	r3, #34	@ 0x22
 80064c6:	d10e      	bne.n	80064e6 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f015 f8a2 	bl	801b628 <HAL_I2C_SlaveRxCpltCallback>
}
 80064e4:	e00d      	b.n	8006502 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7fe fef4 	bl	80052ea <HAL_I2C_SlaveTxCpltCallback>
}
 8006502:	bf00      	nop
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	fe00e800 	.word	0xfe00e800
 8006510:	ffff0000 	.word	0xffff0000

08006514 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a26      	ldr	r2, [pc, #152]	@ (80065bc <I2C_ITListenCplt+0xa8>)
 8006522:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	089b      	lsrs	r3, r3, #2
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d022      	beq.n	8006592 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006568:	2b00      	cmp	r3, #0
 800656a:	d012      	beq.n	8006592 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658a:	f043 0204 	orr.w	r2, r3, #4
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006592:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 faca 	bl	8006b30 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2210      	movs	r2, #16
 80065a2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7fe feb4 	bl	800531a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80065b2:	bf00      	nop
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	ffff0000 	.word	0xffff0000

080065c0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a6d      	ldr	r2, [pc, #436]	@ (8006794 <I2C_ITError+0x1d4>)
 80065de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	2b28      	cmp	r3, #40	@ 0x28
 80065f6:	d005      	beq.n	8006604 <I2C_ITError+0x44>
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	2b29      	cmp	r3, #41	@ 0x29
 80065fc:	d002      	beq.n	8006604 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	2b2a      	cmp	r3, #42	@ 0x2a
 8006602:	d10b      	bne.n	800661c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006604:	2103      	movs	r1, #3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fa92 	bl	8006b30 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2228      	movs	r2, #40	@ 0x28
 8006610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a60      	ldr	r2, [pc, #384]	@ (8006798 <I2C_ITError+0x1d8>)
 8006618:	635a      	str	r2, [r3, #52]	@ 0x34
 800661a:	e030      	b.n	800667e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800661c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fa85 	bl	8006b30 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f8e1 	bl	80067ee <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b60      	cmp	r3, #96	@ 0x60
 8006636:	d01f      	beq.n	8006678 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2220      	movs	r2, #32
 800663c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b20      	cmp	r3, #32
 800664c:	d114      	bne.n	8006678 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b10      	cmp	r3, #16
 800665a:	d109      	bne.n	8006670 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2210      	movs	r2, #16
 8006662:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006668:	f043 0204 	orr.w	r2, r3, #4
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2220      	movs	r2, #32
 8006676:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006682:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006688:	2b00      	cmp	r3, #0
 800668a:	d039      	beq.n	8006700 <I2C_ITError+0x140>
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b11      	cmp	r3, #17
 8006690:	d002      	beq.n	8006698 <I2C_ITError+0xd8>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b21      	cmp	r3, #33	@ 0x21
 8006696:	d133      	bne.n	8006700 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066a6:	d107      	bne.n	80066b8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fc fc9d 	bl	8002ffc <HAL_DMA_GetState>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d017      	beq.n	80066f8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066cc:	4a33      	ldr	r2, [pc, #204]	@ (800679c <I2C_ITError+0x1dc>)
 80066ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fc fae1 	bl	8002ca4 <HAL_DMA_Abort_IT>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d04d      	beq.n	8006784 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80066f2:	4610      	mov	r0, r2
 80066f4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066f6:	e045      	b.n	8006784 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f851 	bl	80067a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066fe:	e041      	b.n	8006784 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d039      	beq.n	800677c <I2C_ITError+0x1bc>
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2b12      	cmp	r3, #18
 800670c:	d002      	beq.n	8006714 <I2C_ITError+0x154>
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b22      	cmp	r3, #34	@ 0x22
 8006712:	d133      	bne.n	800677c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800671e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006722:	d107      	bne.n	8006734 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006732:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006738:	4618      	mov	r0, r3
 800673a:	f7fc fc5f 	bl	8002ffc <HAL_DMA_GetState>
 800673e:	4603      	mov	r3, r0
 8006740:	2b01      	cmp	r3, #1
 8006742:	d017      	beq.n	8006774 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006748:	4a14      	ldr	r2, [pc, #80]	@ (800679c <I2C_ITError+0x1dc>)
 800674a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006758:	4618      	mov	r0, r3
 800675a:	f7fc faa3 	bl	8002ca4 <HAL_DMA_Abort_IT>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d011      	beq.n	8006788 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800676e:	4610      	mov	r0, r2
 8006770:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006772:	e009      	b.n	8006788 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f813 	bl	80067a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800677a:	e005      	b.n	8006788 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f80f 	bl	80067a0 <I2C_TreatErrorCallback>
  }
}
 8006782:	e002      	b.n	800678a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006784:	bf00      	nop
 8006786:	e000      	b.n	800678a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006788:	bf00      	nop
}
 800678a:	bf00      	nop
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	ffff0000 	.word	0xffff0000
 8006798:	08005603 	.word	0x08005603
 800679c:	08006987 	.word	0x08006987

080067a0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b60      	cmp	r3, #96	@ 0x60
 80067b2:	d10e      	bne.n	80067d2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7fe fdcd 	bl	800536a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067d0:	e009      	b.n	80067e6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7fe fdb8 	bl	8005356 <HAL_I2C_ErrorCallback>
}
 80067e6:	bf00      	nop
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b02      	cmp	r3, #2
 8006802:	d103      	bne.n	800680c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2200      	movs	r2, #0
 800680a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b01      	cmp	r3, #1
 8006818:	d007      	beq.n	800682a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	699a      	ldr	r2, [r3, #24]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f042 0201 	orr.w	r2, r2, #1
 8006828:	619a      	str	r2, [r3, #24]
  }
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006842:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006852:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d104      	bne.n	8006868 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800685e:	2120      	movs	r1, #32
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 f8e1 	bl	8006a28 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006866:	e02d      	b.n	80068c4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006870:	441a      	add	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800687a:	b29b      	uxth	r3, r3
 800687c:	2bff      	cmp	r3, #255	@ 0xff
 800687e:	d903      	bls.n	8006888 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	22ff      	movs	r2, #255	@ 0xff
 8006884:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006886:	e004      	b.n	8006892 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689a:	4619      	mov	r1, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3328      	adds	r3, #40	@ 0x28
 80068a2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80068a8:	f7fc f92c 	bl	8002b04 <HAL_DMA_Start_IT>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d004      	beq.n	80068bc <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80068b2:	2110      	movs	r1, #16
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff fe83 	bl	80065c0 <I2C_ITError>
}
 80068ba:	e003      	b.n	80068c4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80068bc:	2140      	movs	r1, #64	@ 0x40
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 f8b2 	bl	8006a28 <I2C_Enable_IRQ>
}
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068de:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10e      	bne.n	800690a <I2C_DMASlaveReceiveCplt+0x3e>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068f2:	d00a      	beq.n	800690a <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006902:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f7ff fb73 	bl	8005ff0 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800690a:	bf00      	nop
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006922:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006928:	2b00      	cmp	r3, #0
 800692a:	d007      	beq.n	800693c <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8006938:	2301      	movs	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d007      	beq.n	8006954 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8006950:	2301      	movs	r3, #1
 8006952:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7fc fb5f 	bl	8003018 <HAL_DMA_GetError>
 800695a:	4603      	mov	r3, r0
 800695c:	2b02      	cmp	r3, #2
 800695e:	d00e      	beq.n	800697e <I2C_DMAError+0x6c>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00b      	beq.n	800697e <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006974:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006976:	2110      	movs	r1, #16
 8006978:	68b8      	ldr	r0, [r7, #8]
 800697a:	f7ff fe21 	bl	80065c0 <I2C_ITError>
  }
}
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006992:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a0:	2200      	movs	r2, #0
 80069a2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b0:	2200      	movs	r2, #0
 80069b2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7ff fef3 	bl	80067a0 <I2C_TreatErrorCallback>
}
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	607b      	str	r3, [r7, #4]
 80069ce:	460b      	mov	r3, r1
 80069d0:	817b      	strh	r3, [r7, #10]
 80069d2:	4613      	mov	r3, r2
 80069d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069d6:	897b      	ldrh	r3, [r7, #10]
 80069d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069dc:	7a7b      	ldrb	r3, [r7, #9]
 80069de:	041b      	lsls	r3, r3, #16
 80069e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069e4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069f2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	0d5b      	lsrs	r3, r3, #21
 80069fe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006a02:	4b08      	ldr	r3, [pc, #32]	@ (8006a24 <I2C_TransferConfig+0x60>)
 8006a04:	430b      	orrs	r3, r1
 8006a06:	43db      	mvns	r3, r3
 8006a08:	ea02 0103 	and.w	r1, r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a16:	bf00      	nop
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	03ff63ff 	.word	0x03ff63ff

08006a28 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a3c:	4a39      	ldr	r2, [pc, #228]	@ (8006b24 <I2C_Enable_IRQ+0xfc>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d032      	beq.n	8006aa8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006a46:	4a38      	ldr	r2, [pc, #224]	@ (8006b28 <I2C_Enable_IRQ+0x100>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d02d      	beq.n	8006aa8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006a50:	4a36      	ldr	r2, [pc, #216]	@ (8006b2c <I2C_Enable_IRQ+0x104>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d028      	beq.n	8006aa8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006a56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	da03      	bge.n	8006a66 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006a64:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006a66:	887b      	ldrh	r3, [r7, #2]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006a76:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006a78:	887b      	ldrh	r3, [r7, #2]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006a88:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006a8a:	887b      	ldrh	r3, [r7, #2]
 8006a8c:	2b10      	cmp	r3, #16
 8006a8e:	d103      	bne.n	8006a98 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006a96:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006a98:	887b      	ldrh	r3, [r7, #2]
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	d133      	bne.n	8006b06 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f043 0320 	orr.w	r3, r3, #32
 8006aa4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006aa6:	e02e      	b.n	8006b06 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006aa8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	da03      	bge.n	8006ab8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006ab6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006ab8:	887b      	ldrh	r3, [r7, #2]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006ac8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006aca:	887b      	ldrh	r3, [r7, #2]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006ada:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006adc:	887b      	ldrh	r3, [r7, #2]
 8006ade:	2b10      	cmp	r3, #16
 8006ae0:	d103      	bne.n	8006aea <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006ae8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006aea:	887b      	ldrh	r3, [r7, #2]
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	d103      	bne.n	8006af8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006af6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006af8:	887b      	ldrh	r3, [r7, #2]
 8006afa:	2b40      	cmp	r3, #64	@ 0x40
 8006afc:	d103      	bne.n	8006b06 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b04:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6819      	ldr	r1, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	601a      	str	r2, [r3, #0]
}
 8006b16:	bf00      	nop
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	0800580b 	.word	0x0800580b
 8006b28:	08005cad 	.word	0x08005cad
 8006b2c:	08005a11 	.word	0x08005a11

08006b30 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b40:	887b      	ldrh	r3, [r7, #2]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00f      	beq.n	8006b6a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006b50:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b5e:	2b28      	cmp	r3, #40	@ 0x28
 8006b60:	d003      	beq.n	8006b6a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006b68:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006b6a:	887b      	ldrh	r3, [r7, #2]
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00f      	beq.n	8006b94 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006b7a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b88:	2b28      	cmp	r3, #40	@ 0x28
 8006b8a:	d003      	beq.n	8006b94 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006b92:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	da03      	bge.n	8006ba4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006ba2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006ba4:	887b      	ldrh	r3, [r7, #2]
 8006ba6:	2b10      	cmp	r3, #16
 8006ba8:	d103      	bne.n	8006bb2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006bb0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006bb2:	887b      	ldrh	r3, [r7, #2]
 8006bb4:	2b20      	cmp	r3, #32
 8006bb6:	d103      	bne.n	8006bc0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f043 0320 	orr.w	r3, r3, #32
 8006bbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006bc0:	887b      	ldrh	r3, [r7, #2]
 8006bc2:	2b40      	cmp	r3, #64	@ 0x40
 8006bc4:	d103      	bne.n	8006bce <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bcc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6819      	ldr	r1, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	43da      	mvns	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	400a      	ands	r2, r1
 8006bde:	601a      	str	r2, [r3, #0]
}
 8006be0:	bf00      	nop
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	d138      	bne.n	8006c74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e032      	b.n	8006c76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2224      	movs	r2, #36	@ 0x24
 8006c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0201 	bic.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6819      	ldr	r1, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0201 	orr.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	e000      	b.n	8006c76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c74:	2302      	movs	r3, #2
  }
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b20      	cmp	r3, #32
 8006c96:	d139      	bne.n	8006d0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d101      	bne.n	8006ca6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	e033      	b.n	8006d0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2224      	movs	r2, #36	@ 0x24
 8006cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0201 	bic.w	r2, r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006cd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	021b      	lsls	r3, r3, #8
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e000      	b.n	8006d0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d0c:	2302      	movs	r3, #2
  }
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b086      	sub	sp, #24
 8006d1e:	af02      	add	r7, sp, #8
 8006d20:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e108      	b.n	8006f3e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d106      	bne.n	8006d4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7fa fe82 	bl	8001a50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2203      	movs	r2, #3
 8006d50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d5a:	d102      	bne.n	8006d62 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f004 fc7a 	bl	800b660 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	7c1a      	ldrb	r2, [r3, #16]
 8006d74:	f88d 2000 	strb.w	r2, [sp]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d7c:	f004 fc16 	bl	800b5ac <USB_CoreInit>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d005      	beq.n	8006d92 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e0d5      	b.n	8006f3e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2100      	movs	r1, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f004 fc72 	bl	800b682 <USB_SetCurrentMode>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e0c6      	b.n	8006f3e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006db0:	2300      	movs	r3, #0
 8006db2:	73fb      	strb	r3, [r7, #15]
 8006db4:	e04a      	b.n	8006e4c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006db6:	7bfa      	ldrb	r2, [r7, #15]
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	3315      	adds	r3, #21
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006dca:	7bfa      	ldrb	r2, [r7, #15]
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	3314      	adds	r3, #20
 8006dda:	7bfa      	ldrb	r2, [r7, #15]
 8006ddc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006dde:	7bfa      	ldrb	r2, [r7, #15]
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	b298      	uxth	r0, r3
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	4613      	mov	r3, r2
 8006de8:	00db      	lsls	r3, r3, #3
 8006dea:	4413      	add	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	440b      	add	r3, r1
 8006df0:	332e      	adds	r3, #46	@ 0x2e
 8006df2:	4602      	mov	r2, r0
 8006df4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006df6:	7bfa      	ldrb	r2, [r7, #15]
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	440b      	add	r3, r1
 8006e04:	3318      	adds	r3, #24
 8006e06:	2200      	movs	r2, #0
 8006e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006e0a:	7bfa      	ldrb	r2, [r7, #15]
 8006e0c:	6879      	ldr	r1, [r7, #4]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	440b      	add	r3, r1
 8006e18:	331c      	adds	r3, #28
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006e1e:	7bfa      	ldrb	r2, [r7, #15]
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	3320      	adds	r3, #32
 8006e2e:	2200      	movs	r2, #0
 8006e30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006e32:	7bfa      	ldrb	r2, [r7, #15]
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	440b      	add	r3, r1
 8006e40:	3324      	adds	r3, #36	@ 0x24
 8006e42:	2200      	movs	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	73fb      	strb	r3, [r7, #15]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	791b      	ldrb	r3, [r3, #4]
 8006e50:	7bfa      	ldrb	r2, [r7, #15]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d3af      	bcc.n	8006db6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e56:	2300      	movs	r3, #0
 8006e58:	73fb      	strb	r3, [r7, #15]
 8006e5a:	e044      	b.n	8006ee6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006e5c:	7bfa      	ldrb	r2, [r7, #15]
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	4613      	mov	r3, r2
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	440b      	add	r3, r1
 8006e6a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006e72:	7bfa      	ldrb	r2, [r7, #15]
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	4613      	mov	r3, r2
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006e84:	7bfa      	ldrb	r2, [r7, #15]
 8006e86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006e88:	7bfa      	ldrb	r2, [r7, #15]
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	440b      	add	r3, r1
 8006e96:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e9e:	7bfa      	ldrb	r2, [r7, #15]
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	00db      	lsls	r3, r3, #3
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006eb4:	7bfa      	ldrb	r2, [r7, #15]
 8006eb6:	6879      	ldr	r1, [r7, #4]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	440b      	add	r3, r1
 8006ec2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006eca:	7bfa      	ldrb	r2, [r7, #15]
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	440b      	add	r3, r1
 8006ed8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	73fb      	strb	r3, [r7, #15]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	791b      	ldrb	r3, [r3, #4]
 8006eea:	7bfa      	ldrb	r2, [r7, #15]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d3b5      	bcc.n	8006e5c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6818      	ldr	r0, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	7c1a      	ldrb	r2, [r3, #16]
 8006ef8:	f88d 2000 	strb.w	r2, [sp]
 8006efc:	3304      	adds	r3, #4
 8006efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f00:	f004 fc0c 	bl	800b71c <USB_DevInit>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d005      	beq.n	8006f16 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e013      	b.n	8006f3e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	7b1b      	ldrb	r3, [r3, #12]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d102      	bne.n	8006f32 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f80b 	bl	8006f48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f004 fdc7 	bl	800baca <USB_DevDisconnect>

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
	...

08006f48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f76:	4b05      	ldr	r3, [pc, #20]	@ (8006f8c <HAL_PCDEx_ActivateLPM+0x44>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	10000003 	.word	0x10000003

08006f90 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f94:	4b05      	ldr	r3, [pc, #20]	@ (8006fac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a04      	ldr	r2, [pc, #16]	@ (8006fac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f9e:	6013      	str	r3, [r2, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40007000 	.word	0x40007000

08006fb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e291      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 8087 	beq.w	80070e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fd4:	4b96      	ldr	r3, [pc, #600]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f003 030c 	and.w	r3, r3, #12
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d00c      	beq.n	8006ffa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fe0:	4b93      	ldr	r3, [pc, #588]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f003 030c 	and.w	r3, r3, #12
 8006fe8:	2b08      	cmp	r3, #8
 8006fea:	d112      	bne.n	8007012 <HAL_RCC_OscConfig+0x62>
 8006fec:	4b90      	ldr	r3, [pc, #576]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ff4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ff8:	d10b      	bne.n	8007012 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ffa:	4b8d      	ldr	r3, [pc, #564]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d06c      	beq.n	80070e0 <HAL_RCC_OscConfig+0x130>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d168      	bne.n	80070e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e26b      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800701a:	d106      	bne.n	800702a <HAL_RCC_OscConfig+0x7a>
 800701c:	4b84      	ldr	r3, [pc, #528]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a83      	ldr	r2, [pc, #524]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007026:	6013      	str	r3, [r2, #0]
 8007028:	e02e      	b.n	8007088 <HAL_RCC_OscConfig+0xd8>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10c      	bne.n	800704c <HAL_RCC_OscConfig+0x9c>
 8007032:	4b7f      	ldr	r3, [pc, #508]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a7e      	ldr	r2, [pc, #504]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007038:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	4b7c      	ldr	r3, [pc, #496]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a7b      	ldr	r2, [pc, #492]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007044:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	e01d      	b.n	8007088 <HAL_RCC_OscConfig+0xd8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007054:	d10c      	bne.n	8007070 <HAL_RCC_OscConfig+0xc0>
 8007056:	4b76      	ldr	r3, [pc, #472]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a75      	ldr	r2, [pc, #468]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 800705c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	4b73      	ldr	r3, [pc, #460]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a72      	ldr	r2, [pc, #456]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	e00b      	b.n	8007088 <HAL_RCC_OscConfig+0xd8>
 8007070:	4b6f      	ldr	r3, [pc, #444]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a6e      	ldr	r2, [pc, #440]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	4b6c      	ldr	r3, [pc, #432]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a6b      	ldr	r2, [pc, #428]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d013      	beq.n	80070b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007090:	f7fb f8de 	bl	8002250 <HAL_GetTick>
 8007094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007096:	e008      	b.n	80070aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007098:	f7fb f8da 	bl	8002250 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b64      	cmp	r3, #100	@ 0x64
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e21f      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070aa:	4b61      	ldr	r3, [pc, #388]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0f0      	beq.n	8007098 <HAL_RCC_OscConfig+0xe8>
 80070b6:	e014      	b.n	80070e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b8:	f7fb f8ca 	bl	8002250 <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070c0:	f7fb f8c6 	bl	8002250 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b64      	cmp	r3, #100	@ 0x64
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e20b      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070d2:	4b57      	ldr	r3, [pc, #348]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0x110>
 80070de:	e000      	b.n	80070e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d069      	beq.n	80071c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070ee:	4b50      	ldr	r3, [pc, #320]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 030c 	and.w	r3, r3, #12
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00b      	beq.n	8007112 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070fa:	4b4d      	ldr	r3, [pc, #308]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f003 030c 	and.w	r3, r3, #12
 8007102:	2b08      	cmp	r3, #8
 8007104:	d11c      	bne.n	8007140 <HAL_RCC_OscConfig+0x190>
 8007106:	4b4a      	ldr	r3, [pc, #296]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d116      	bne.n	8007140 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007112:	4b47      	ldr	r3, [pc, #284]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <HAL_RCC_OscConfig+0x17a>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d001      	beq.n	800712a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e1df      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800712a:	4b41      	ldr	r3, [pc, #260]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	493d      	ldr	r1, [pc, #244]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 800713a:	4313      	orrs	r3, r2
 800713c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800713e:	e040      	b.n	80071c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d023      	beq.n	8007190 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007148:	4b39      	ldr	r3, [pc, #228]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a38      	ldr	r2, [pc, #224]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 800714e:	f043 0301 	orr.w	r3, r3, #1
 8007152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007154:	f7fb f87c 	bl	8002250 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800715c:	f7fb f878 	bl	8002250 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e1bd      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800716e:	4b30      	ldr	r3, [pc, #192]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0f0      	beq.n	800715c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800717a:	4b2d      	ldr	r3, [pc, #180]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	4929      	ldr	r1, [pc, #164]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 800718a:	4313      	orrs	r3, r2
 800718c:	600b      	str	r3, [r1, #0]
 800718e:	e018      	b.n	80071c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007190:	4b27      	ldr	r3, [pc, #156]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a26      	ldr	r2, [pc, #152]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007196:	f023 0301 	bic.w	r3, r3, #1
 800719a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800719c:	f7fb f858 	bl	8002250 <HAL_GetTick>
 80071a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071a2:	e008      	b.n	80071b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071a4:	f7fb f854 	bl	8002250 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d901      	bls.n	80071b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e199      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1f0      	bne.n	80071a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0308 	and.w	r3, r3, #8
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d038      	beq.n	8007240 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d019      	beq.n	800720a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071d6:	4b16      	ldr	r3, [pc, #88]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 80071d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071da:	4a15      	ldr	r2, [pc, #84]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 80071dc:	f043 0301 	orr.w	r3, r3, #1
 80071e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e2:	f7fb f835 	bl	8002250 <HAL_GetTick>
 80071e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071e8:	e008      	b.n	80071fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071ea:	f7fb f831 	bl	8002250 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d901      	bls.n	80071fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e176      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 80071fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0f0      	beq.n	80071ea <HAL_RCC_OscConfig+0x23a>
 8007208:	e01a      	b.n	8007240 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800720a:	4b09      	ldr	r3, [pc, #36]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 800720c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800720e:	4a08      	ldr	r2, [pc, #32]	@ (8007230 <HAL_RCC_OscConfig+0x280>)
 8007210:	f023 0301 	bic.w	r3, r3, #1
 8007214:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007216:	f7fb f81b 	bl	8002250 <HAL_GetTick>
 800721a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800721c:	e00a      	b.n	8007234 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800721e:	f7fb f817 	bl	8002250 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	2b02      	cmp	r3, #2
 800722a:	d903      	bls.n	8007234 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e15c      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>
 8007230:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007234:	4b91      	ldr	r3, [pc, #580]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 8007236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1ee      	bne.n	800721e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 80a4 	beq.w	8007396 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800724e:	4b8b      	ldr	r3, [pc, #556]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10d      	bne.n	8007276 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800725a:	4b88      	ldr	r3, [pc, #544]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 800725c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725e:	4a87      	ldr	r2, [pc, #540]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 8007260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007264:	6413      	str	r3, [r2, #64]	@ 0x40
 8007266:	4b85      	ldr	r3, [pc, #532]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 8007268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800726e:	60bb      	str	r3, [r7, #8]
 8007270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007272:	2301      	movs	r3, #1
 8007274:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007276:	4b82      	ldr	r3, [pc, #520]	@ (8007480 <HAL_RCC_OscConfig+0x4d0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800727e:	2b00      	cmp	r3, #0
 8007280:	d118      	bne.n	80072b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007282:	4b7f      	ldr	r3, [pc, #508]	@ (8007480 <HAL_RCC_OscConfig+0x4d0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a7e      	ldr	r2, [pc, #504]	@ (8007480 <HAL_RCC_OscConfig+0x4d0>)
 8007288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800728c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800728e:	f7fa ffdf 	bl	8002250 <HAL_GetTick>
 8007292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007294:	e008      	b.n	80072a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007296:	f7fa ffdb 	bl	8002250 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	2b64      	cmp	r3, #100	@ 0x64
 80072a2:	d901      	bls.n	80072a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e120      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072a8:	4b75      	ldr	r3, [pc, #468]	@ (8007480 <HAL_RCC_OscConfig+0x4d0>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d0f0      	beq.n	8007296 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d106      	bne.n	80072ca <HAL_RCC_OscConfig+0x31a>
 80072bc:	4b6f      	ldr	r3, [pc, #444]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 80072be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c0:	4a6e      	ldr	r2, [pc, #440]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 80072c2:	f043 0301 	orr.w	r3, r3, #1
 80072c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80072c8:	e02d      	b.n	8007326 <HAL_RCC_OscConfig+0x376>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10c      	bne.n	80072ec <HAL_RCC_OscConfig+0x33c>
 80072d2:	4b6a      	ldr	r3, [pc, #424]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 80072d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d6:	4a69      	ldr	r2, [pc, #420]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 80072d8:	f023 0301 	bic.w	r3, r3, #1
 80072dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80072de:	4b67      	ldr	r3, [pc, #412]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 80072e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e2:	4a66      	ldr	r2, [pc, #408]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 80072e4:	f023 0304 	bic.w	r3, r3, #4
 80072e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80072ea:	e01c      	b.n	8007326 <HAL_RCC_OscConfig+0x376>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	2b05      	cmp	r3, #5
 80072f2:	d10c      	bne.n	800730e <HAL_RCC_OscConfig+0x35e>
 80072f4:	4b61      	ldr	r3, [pc, #388]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 80072f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f8:	4a60      	ldr	r2, [pc, #384]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 80072fa:	f043 0304 	orr.w	r3, r3, #4
 80072fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007300:	4b5e      	ldr	r3, [pc, #376]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 8007302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007304:	4a5d      	ldr	r2, [pc, #372]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 8007306:	f043 0301 	orr.w	r3, r3, #1
 800730a:	6713      	str	r3, [r2, #112]	@ 0x70
 800730c:	e00b      	b.n	8007326 <HAL_RCC_OscConfig+0x376>
 800730e:	4b5b      	ldr	r3, [pc, #364]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 8007310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007312:	4a5a      	ldr	r2, [pc, #360]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 8007314:	f023 0301 	bic.w	r3, r3, #1
 8007318:	6713      	str	r3, [r2, #112]	@ 0x70
 800731a:	4b58      	ldr	r3, [pc, #352]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 800731c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800731e:	4a57      	ldr	r2, [pc, #348]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 8007320:	f023 0304 	bic.w	r3, r3, #4
 8007324:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d015      	beq.n	800735a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800732e:	f7fa ff8f 	bl	8002250 <HAL_GetTick>
 8007332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007334:	e00a      	b.n	800734c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007336:	f7fa ff8b 	bl	8002250 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007344:	4293      	cmp	r3, r2
 8007346:	d901      	bls.n	800734c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e0ce      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800734c:	4b4b      	ldr	r3, [pc, #300]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 800734e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b00      	cmp	r3, #0
 8007356:	d0ee      	beq.n	8007336 <HAL_RCC_OscConfig+0x386>
 8007358:	e014      	b.n	8007384 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800735a:	f7fa ff79 	bl	8002250 <HAL_GetTick>
 800735e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007360:	e00a      	b.n	8007378 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007362:	f7fa ff75 	bl	8002250 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007370:	4293      	cmp	r3, r2
 8007372:	d901      	bls.n	8007378 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e0b8      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007378:	4b40      	ldr	r3, [pc, #256]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 800737a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1ee      	bne.n	8007362 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007384:	7dfb      	ldrb	r3, [r7, #23]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d105      	bne.n	8007396 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800738a:	4b3c      	ldr	r3, [pc, #240]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 800738c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738e:	4a3b      	ldr	r2, [pc, #236]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 8007390:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007394:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80a4 	beq.w	80074e8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073a0:	4b36      	ldr	r3, [pc, #216]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f003 030c 	and.w	r3, r3, #12
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d06b      	beq.n	8007484 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d149      	bne.n	8007448 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073b4:	4b31      	ldr	r3, [pc, #196]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a30      	ldr	r2, [pc, #192]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 80073ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c0:	f7fa ff46 	bl	8002250 <HAL_GetTick>
 80073c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073c6:	e008      	b.n	80073da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073c8:	f7fa ff42 	bl	8002250 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d901      	bls.n	80073da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e087      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073da:	4b28      	ldr	r3, [pc, #160]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1f0      	bne.n	80073c8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69da      	ldr	r2, [r3, #28]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f4:	019b      	lsls	r3, r3, #6
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073fc:	085b      	lsrs	r3, r3, #1
 80073fe:	3b01      	subs	r3, #1
 8007400:	041b      	lsls	r3, r3, #16
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007408:	061b      	lsls	r3, r3, #24
 800740a:	4313      	orrs	r3, r2
 800740c:	4a1b      	ldr	r2, [pc, #108]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 800740e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007412:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007414:	4b19      	ldr	r3, [pc, #100]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a18      	ldr	r2, [pc, #96]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 800741a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800741e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007420:	f7fa ff16 	bl	8002250 <HAL_GetTick>
 8007424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007426:	e008      	b.n	800743a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007428:	f7fa ff12 	bl	8002250 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e057      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800743a:	4b10      	ldr	r3, [pc, #64]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d0f0      	beq.n	8007428 <HAL_RCC_OscConfig+0x478>
 8007446:	e04f      	b.n	80074e8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007448:	4b0c      	ldr	r3, [pc, #48]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a0b      	ldr	r2, [pc, #44]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 800744e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007454:	f7fa fefc 	bl	8002250 <HAL_GetTick>
 8007458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800745a:	e008      	b.n	800746e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800745c:	f7fa fef8 	bl	8002250 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	2b02      	cmp	r3, #2
 8007468:	d901      	bls.n	800746e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e03d      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800746e:	4b03      	ldr	r3, [pc, #12]	@ (800747c <HAL_RCC_OscConfig+0x4cc>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1f0      	bne.n	800745c <HAL_RCC_OscConfig+0x4ac>
 800747a:	e035      	b.n	80074e8 <HAL_RCC_OscConfig+0x538>
 800747c:	40023800 	.word	0x40023800
 8007480:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007484:	4b1b      	ldr	r3, [pc, #108]	@ (80074f4 <HAL_RCC_OscConfig+0x544>)
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d028      	beq.n	80074e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800749c:	429a      	cmp	r2, r3
 800749e:	d121      	bne.n	80074e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d11a      	bne.n	80074e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80074b4:	4013      	ands	r3, r2
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074bc:	4293      	cmp	r3, r2
 80074be:	d111      	bne.n	80074e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ca:	085b      	lsrs	r3, r3, #1
 80074cc:	3b01      	subs	r3, #1
 80074ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d107      	bne.n	80074e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d001      	beq.n	80074e8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	40023800 	.word	0x40023800

080074f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e0d0      	b.n	80076b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007510:	4b6a      	ldr	r3, [pc, #424]	@ (80076bc <HAL_RCC_ClockConfig+0x1c4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d910      	bls.n	8007540 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800751e:	4b67      	ldr	r3, [pc, #412]	@ (80076bc <HAL_RCC_ClockConfig+0x1c4>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f023 020f 	bic.w	r2, r3, #15
 8007526:	4965      	ldr	r1, [pc, #404]	@ (80076bc <HAL_RCC_ClockConfig+0x1c4>)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	4313      	orrs	r3, r2
 800752c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800752e:	4b63      	ldr	r3, [pc, #396]	@ (80076bc <HAL_RCC_ClockConfig+0x1c4>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d001      	beq.n	8007540 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e0b8      	b.n	80076b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d020      	beq.n	800758e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007558:	4b59      	ldr	r3, [pc, #356]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	4a58      	ldr	r2, [pc, #352]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 800755e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007562:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0308 	and.w	r3, r3, #8
 800756c:	2b00      	cmp	r3, #0
 800756e:	d005      	beq.n	800757c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007570:	4b53      	ldr	r3, [pc, #332]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	4a52      	ldr	r2, [pc, #328]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 8007576:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800757a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800757c:	4b50      	ldr	r3, [pc, #320]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	494d      	ldr	r1, [pc, #308]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 800758a:	4313      	orrs	r3, r2
 800758c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d040      	beq.n	800761c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d107      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075a2:	4b47      	ldr	r3, [pc, #284]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d115      	bne.n	80075da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e07f      	b.n	80076b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d107      	bne.n	80075ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075ba:	4b41      	ldr	r3, [pc, #260]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d109      	bne.n	80075da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e073      	b.n	80076b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075ca:	4b3d      	ldr	r3, [pc, #244]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e06b      	b.n	80076b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075da:	4b39      	ldr	r3, [pc, #228]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f023 0203 	bic.w	r2, r3, #3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	4936      	ldr	r1, [pc, #216]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ec:	f7fa fe30 	bl	8002250 <HAL_GetTick>
 80075f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075f2:	e00a      	b.n	800760a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075f4:	f7fa fe2c 	bl	8002250 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007602:	4293      	cmp	r3, r2
 8007604:	d901      	bls.n	800760a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e053      	b.n	80076b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800760a:	4b2d      	ldr	r3, [pc, #180]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f003 020c 	and.w	r2, r3, #12
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	429a      	cmp	r2, r3
 800761a:	d1eb      	bne.n	80075f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800761c:	4b27      	ldr	r3, [pc, #156]	@ (80076bc <HAL_RCC_ClockConfig+0x1c4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 030f 	and.w	r3, r3, #15
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d210      	bcs.n	800764c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800762a:	4b24      	ldr	r3, [pc, #144]	@ (80076bc <HAL_RCC_ClockConfig+0x1c4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f023 020f 	bic.w	r2, r3, #15
 8007632:	4922      	ldr	r1, [pc, #136]	@ (80076bc <HAL_RCC_ClockConfig+0x1c4>)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	4313      	orrs	r3, r2
 8007638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800763a:	4b20      	ldr	r3, [pc, #128]	@ (80076bc <HAL_RCC_ClockConfig+0x1c4>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d001      	beq.n	800764c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e032      	b.n	80076b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b00      	cmp	r3, #0
 8007656:	d008      	beq.n	800766a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007658:	4b19      	ldr	r3, [pc, #100]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	4916      	ldr	r1, [pc, #88]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 8007666:	4313      	orrs	r3, r2
 8007668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0308 	and.w	r3, r3, #8
 8007672:	2b00      	cmp	r3, #0
 8007674:	d009      	beq.n	800768a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007676:	4b12      	ldr	r3, [pc, #72]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	490e      	ldr	r1, [pc, #56]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 8007686:	4313      	orrs	r3, r2
 8007688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800768a:	f000 f821 	bl	80076d0 <HAL_RCC_GetSysClockFreq>
 800768e:	4602      	mov	r2, r0
 8007690:	4b0b      	ldr	r3, [pc, #44]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c8>)
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	091b      	lsrs	r3, r3, #4
 8007696:	f003 030f 	and.w	r3, r3, #15
 800769a:	490a      	ldr	r1, [pc, #40]	@ (80076c4 <HAL_RCC_ClockConfig+0x1cc>)
 800769c:	5ccb      	ldrb	r3, [r1, r3]
 800769e:	fa22 f303 	lsr.w	r3, r2, r3
 80076a2:	4a09      	ldr	r2, [pc, #36]	@ (80076c8 <HAL_RCC_ClockConfig+0x1d0>)
 80076a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80076a6:	4b09      	ldr	r3, [pc, #36]	@ (80076cc <HAL_RCC_ClockConfig+0x1d4>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fa fa4a 	bl	8001b44 <HAL_InitTick>

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	40023c00 	.word	0x40023c00
 80076c0:	40023800 	.word	0x40023800
 80076c4:	080205dc 	.word	0x080205dc
 80076c8:	20000000 	.word	0x20000000
 80076cc:	20000004 	.word	0x20000004

080076d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076d4:	b094      	sub	sp, #80	@ 0x50
 80076d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	647b      	str	r3, [r7, #68]	@ 0x44
 80076dc:	2300      	movs	r3, #0
 80076de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076e0:	2300      	movs	r3, #0
 80076e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076e8:	4b79      	ldr	r3, [pc, #484]	@ (80078d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f003 030c 	and.w	r3, r3, #12
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d00d      	beq.n	8007710 <HAL_RCC_GetSysClockFreq+0x40>
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	f200 80e1 	bhi.w	80078bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <HAL_RCC_GetSysClockFreq+0x34>
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d003      	beq.n	800770a <HAL_RCC_GetSysClockFreq+0x3a>
 8007702:	e0db      	b.n	80078bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007704:	4b73      	ldr	r3, [pc, #460]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007706:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007708:	e0db      	b.n	80078c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800770a:	4b73      	ldr	r3, [pc, #460]	@ (80078d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800770c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800770e:	e0d8      	b.n	80078c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007710:	4b6f      	ldr	r3, [pc, #444]	@ (80078d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007718:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800771a:	4b6d      	ldr	r3, [pc, #436]	@ (80078d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d063      	beq.n	80077ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007726:	4b6a      	ldr	r3, [pc, #424]	@ (80078d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	099b      	lsrs	r3, r3, #6
 800772c:	2200      	movs	r2, #0
 800772e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007730:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007738:	633b      	str	r3, [r7, #48]	@ 0x30
 800773a:	2300      	movs	r3, #0
 800773c:	637b      	str	r3, [r7, #52]	@ 0x34
 800773e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007742:	4622      	mov	r2, r4
 8007744:	462b      	mov	r3, r5
 8007746:	f04f 0000 	mov.w	r0, #0
 800774a:	f04f 0100 	mov.w	r1, #0
 800774e:	0159      	lsls	r1, r3, #5
 8007750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007754:	0150      	lsls	r0, r2, #5
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4621      	mov	r1, r4
 800775c:	1a51      	subs	r1, r2, r1
 800775e:	6139      	str	r1, [r7, #16]
 8007760:	4629      	mov	r1, r5
 8007762:	eb63 0301 	sbc.w	r3, r3, r1
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	f04f 0200 	mov.w	r2, #0
 800776c:	f04f 0300 	mov.w	r3, #0
 8007770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007774:	4659      	mov	r1, fp
 8007776:	018b      	lsls	r3, r1, #6
 8007778:	4651      	mov	r1, sl
 800777a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800777e:	4651      	mov	r1, sl
 8007780:	018a      	lsls	r2, r1, #6
 8007782:	4651      	mov	r1, sl
 8007784:	ebb2 0801 	subs.w	r8, r2, r1
 8007788:	4659      	mov	r1, fp
 800778a:	eb63 0901 	sbc.w	r9, r3, r1
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	f04f 0300 	mov.w	r3, #0
 8007796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800779a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800779e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077a2:	4690      	mov	r8, r2
 80077a4:	4699      	mov	r9, r3
 80077a6:	4623      	mov	r3, r4
 80077a8:	eb18 0303 	adds.w	r3, r8, r3
 80077ac:	60bb      	str	r3, [r7, #8]
 80077ae:	462b      	mov	r3, r5
 80077b0:	eb49 0303 	adc.w	r3, r9, r3
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	f04f 0200 	mov.w	r2, #0
 80077ba:	f04f 0300 	mov.w	r3, #0
 80077be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80077c2:	4629      	mov	r1, r5
 80077c4:	024b      	lsls	r3, r1, #9
 80077c6:	4621      	mov	r1, r4
 80077c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80077cc:	4621      	mov	r1, r4
 80077ce:	024a      	lsls	r2, r1, #9
 80077d0:	4610      	mov	r0, r2
 80077d2:	4619      	mov	r1, r3
 80077d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077d6:	2200      	movs	r2, #0
 80077d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80077e0:	f7f8 fd66 	bl	80002b0 <__aeabi_uldivmod>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4613      	mov	r3, r2
 80077ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077ec:	e058      	b.n	80078a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077ee:	4b38      	ldr	r3, [pc, #224]	@ (80078d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	099b      	lsrs	r3, r3, #6
 80077f4:	2200      	movs	r2, #0
 80077f6:	4618      	mov	r0, r3
 80077f8:	4611      	mov	r1, r2
 80077fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80077fe:	623b      	str	r3, [r7, #32]
 8007800:	2300      	movs	r3, #0
 8007802:	627b      	str	r3, [r7, #36]	@ 0x24
 8007804:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007808:	4642      	mov	r2, r8
 800780a:	464b      	mov	r3, r9
 800780c:	f04f 0000 	mov.w	r0, #0
 8007810:	f04f 0100 	mov.w	r1, #0
 8007814:	0159      	lsls	r1, r3, #5
 8007816:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800781a:	0150      	lsls	r0, r2, #5
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4641      	mov	r1, r8
 8007822:	ebb2 0a01 	subs.w	sl, r2, r1
 8007826:	4649      	mov	r1, r9
 8007828:	eb63 0b01 	sbc.w	fp, r3, r1
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007838:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800783c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007840:	ebb2 040a 	subs.w	r4, r2, sl
 8007844:	eb63 050b 	sbc.w	r5, r3, fp
 8007848:	f04f 0200 	mov.w	r2, #0
 800784c:	f04f 0300 	mov.w	r3, #0
 8007850:	00eb      	lsls	r3, r5, #3
 8007852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007856:	00e2      	lsls	r2, r4, #3
 8007858:	4614      	mov	r4, r2
 800785a:	461d      	mov	r5, r3
 800785c:	4643      	mov	r3, r8
 800785e:	18e3      	adds	r3, r4, r3
 8007860:	603b      	str	r3, [r7, #0]
 8007862:	464b      	mov	r3, r9
 8007864:	eb45 0303 	adc.w	r3, r5, r3
 8007868:	607b      	str	r3, [r7, #4]
 800786a:	f04f 0200 	mov.w	r2, #0
 800786e:	f04f 0300 	mov.w	r3, #0
 8007872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007876:	4629      	mov	r1, r5
 8007878:	028b      	lsls	r3, r1, #10
 800787a:	4621      	mov	r1, r4
 800787c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007880:	4621      	mov	r1, r4
 8007882:	028a      	lsls	r2, r1, #10
 8007884:	4610      	mov	r0, r2
 8007886:	4619      	mov	r1, r3
 8007888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800788a:	2200      	movs	r2, #0
 800788c:	61bb      	str	r3, [r7, #24]
 800788e:	61fa      	str	r2, [r7, #28]
 8007890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007894:	f7f8 fd0c 	bl	80002b0 <__aeabi_uldivmod>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4613      	mov	r3, r2
 800789e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80078a0:	4b0b      	ldr	r3, [pc, #44]	@ (80078d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	0c1b      	lsrs	r3, r3, #16
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	3301      	adds	r3, #1
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80078b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80078ba:	e002      	b.n	80078c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078bc:	4b05      	ldr	r3, [pc, #20]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80078be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80078c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3750      	adds	r7, #80	@ 0x50
 80078c8:	46bd      	mov	sp, r7
 80078ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078ce:	bf00      	nop
 80078d0:	40023800 	.word	0x40023800
 80078d4:	00f42400 	.word	0x00f42400
 80078d8:	007a1200 	.word	0x007a1200

080078dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078dc:	b480      	push	{r7}
 80078de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078e0:	4b03      	ldr	r3, [pc, #12]	@ (80078f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80078e2:	681b      	ldr	r3, [r3, #0]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20000000 	.word	0x20000000

080078f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80078f8:	f7ff fff0 	bl	80078dc <HAL_RCC_GetHCLKFreq>
 80078fc:	4602      	mov	r2, r0
 80078fe:	4b05      	ldr	r3, [pc, #20]	@ (8007914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	0a9b      	lsrs	r3, r3, #10
 8007904:	f003 0307 	and.w	r3, r3, #7
 8007908:	4903      	ldr	r1, [pc, #12]	@ (8007918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800790a:	5ccb      	ldrb	r3, [r1, r3]
 800790c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007910:	4618      	mov	r0, r3
 8007912:	bd80      	pop	{r7, pc}
 8007914:	40023800 	.word	0x40023800
 8007918:	080205ec 	.word	0x080205ec

0800791c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007920:	f7ff ffdc 	bl	80078dc <HAL_RCC_GetHCLKFreq>
 8007924:	4602      	mov	r2, r0
 8007926:	4b05      	ldr	r3, [pc, #20]	@ (800793c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	0b5b      	lsrs	r3, r3, #13
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	4903      	ldr	r1, [pc, #12]	@ (8007940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007932:	5ccb      	ldrb	r3, [r1, r3]
 8007934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007938:	4618      	mov	r0, r3
 800793a:	bd80      	pop	{r7, pc}
 800793c:	40023800 	.word	0x40023800
 8007940:	080205ec 	.word	0x080205ec

08007944 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	220f      	movs	r2, #15
 8007952:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007954:	4b12      	ldr	r3, [pc, #72]	@ (80079a0 <HAL_RCC_GetClockConfig+0x5c>)
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f003 0203 	and.w	r2, r3, #3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007960:	4b0f      	ldr	r3, [pc, #60]	@ (80079a0 <HAL_RCC_GetClockConfig+0x5c>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800796c:	4b0c      	ldr	r3, [pc, #48]	@ (80079a0 <HAL_RCC_GetClockConfig+0x5c>)
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007978:	4b09      	ldr	r3, [pc, #36]	@ (80079a0 <HAL_RCC_GetClockConfig+0x5c>)
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	08db      	lsrs	r3, r3, #3
 800797e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007986:	4b07      	ldr	r3, [pc, #28]	@ (80079a4 <HAL_RCC_GetClockConfig+0x60>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 020f 	and.w	r2, r3, #15
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	601a      	str	r2, [r3, #0]
}
 8007992:	bf00      	nop
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	40023800 	.word	0x40023800
 80079a4:	40023c00 	.word	0x40023c00

080079a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b088      	sub	sp, #32
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80079c0:	2300      	movs	r3, #0
 80079c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d012      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079d0:	4b69      	ldr	r3, [pc, #420]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	4a68      	ldr	r2, [pc, #416]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80079da:	6093      	str	r3, [r2, #8]
 80079dc:	4b66      	ldr	r3, [pc, #408]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079e4:	4964      	ldr	r1, [pc, #400]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80079f2:	2301      	movs	r3, #1
 80079f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d017      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a02:	4b5d      	ldr	r3, [pc, #372]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a08:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a10:	4959      	ldr	r1, [pc, #356]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a20:	d101      	bne.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007a22:	2301      	movs	r3, #1
 8007a24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d017      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a3e:	4b4e      	ldr	r3, [pc, #312]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a44:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4c:	494a      	ldr	r1, [pc, #296]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a5c:	d101      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 808b 	beq.w	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a90:	4a39      	ldr	r2, [pc, #228]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a98:	4b37      	ldr	r3, [pc, #220]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aa0:	60bb      	str	r3, [r7, #8]
 8007aa2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007aa4:	4b35      	ldr	r3, [pc, #212]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a34      	ldr	r2, [pc, #208]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007aaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ab0:	f7fa fbce 	bl	8002250 <HAL_GetTick>
 8007ab4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007ab6:	e008      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ab8:	f7fa fbca 	bl	8002250 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b64      	cmp	r3, #100	@ 0x64
 8007ac4:	d901      	bls.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e357      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007aca:	4b2c      	ldr	r3, [pc, #176]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0f0      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ad6:	4b28      	ldr	r3, [pc, #160]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ade:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d035      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d02e      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007af4:	4b20      	ldr	r3, [pc, #128]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007af8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007afc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007afe:	4b1e      	ldr	r3, [pc, #120]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b02:	4a1d      	ldr	r2, [pc, #116]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b08:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b14:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007b16:	4a18      	ldr	r2, [pc, #96]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b1c:	4b16      	ldr	r3, [pc, #88]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b20:	f003 0301 	and.w	r3, r3, #1
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d114      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b28:	f7fa fb92 	bl	8002250 <HAL_GetTick>
 8007b2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b2e:	e00a      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b30:	f7fa fb8e 	bl	8002250 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d901      	bls.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e319      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b46:	4b0c      	ldr	r3, [pc, #48]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0ee      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b5e:	d111      	bne.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007b60:	4b05      	ldr	r3, [pc, #20]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007b6c:	4b04      	ldr	r3, [pc, #16]	@ (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007b6e:	400b      	ands	r3, r1
 8007b70:	4901      	ldr	r1, [pc, #4]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	608b      	str	r3, [r1, #8]
 8007b76:	e00b      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007b78:	40023800 	.word	0x40023800
 8007b7c:	40007000 	.word	0x40007000
 8007b80:	0ffffcff 	.word	0x0ffffcff
 8007b84:	4baa      	ldr	r3, [pc, #680]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	4aa9      	ldr	r2, [pc, #676]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b8a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007b8e:	6093      	str	r3, [r2, #8]
 8007b90:	4ba7      	ldr	r3, [pc, #668]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b9c:	49a4      	ldr	r1, [pc, #656]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0310 	and.w	r3, r3, #16
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d010      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bae:	4ba0      	ldr	r3, [pc, #640]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bb4:	4a9e      	ldr	r2, [pc, #632]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007bba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007bbe:	4b9c      	ldr	r3, [pc, #624]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bc0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc8:	4999      	ldr	r1, [pc, #612]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00a      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bdc:	4b94      	ldr	r3, [pc, #592]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bea:	4991      	ldr	r1, [pc, #580]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007bfe:	4b8c      	ldr	r3, [pc, #560]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c0c:	4988      	ldr	r1, [pc, #544]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00a      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c20:	4b83      	ldr	r3, [pc, #524]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c2e:	4980      	ldr	r1, [pc, #512]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c42:	4b7b      	ldr	r3, [pc, #492]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c48:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c50:	4977      	ldr	r1, [pc, #476]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00a      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c64:	4b72      	ldr	r3, [pc, #456]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c6a:	f023 0203 	bic.w	r2, r3, #3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c72:	496f      	ldr	r1, [pc, #444]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c86:	4b6a      	ldr	r3, [pc, #424]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c8c:	f023 020c 	bic.w	r2, r3, #12
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c94:	4966      	ldr	r1, [pc, #408]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00a      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ca8:	4b61      	ldr	r3, [pc, #388]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cae:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cb6:	495e      	ldr	r1, [pc, #376]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00a      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007cca:	4b59      	ldr	r3, [pc, #356]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cd0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cd8:	4955      	ldr	r1, [pc, #340]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007cec:	4b50      	ldr	r3, [pc, #320]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cfa:	494d      	ldr	r1, [pc, #308]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007d0e:	4b48      	ldr	r3, [pc, #288]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d14:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d1c:	4944      	ldr	r1, [pc, #272]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00a      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007d30:	4b3f      	ldr	r3, [pc, #252]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d36:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d3e:	493c      	ldr	r1, [pc, #240]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007d52:	4b37      	ldr	r3, [pc, #220]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d60:	4933      	ldr	r1, [pc, #204]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00a      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d74:	4b2e      	ldr	r3, [pc, #184]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d7a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d82:	492b      	ldr	r1, [pc, #172]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d011      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d96:	4b26      	ldr	r3, [pc, #152]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d9c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007da4:	4922      	ldr	r1, [pc, #136]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007db0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007db4:	d101      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007db6:	2301      	movs	r3, #1
 8007db8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dd6:	4b16      	ldr	r3, [pc, #88]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ddc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007de4:	4912      	ldr	r1, [pc, #72]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00b      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007df8:	4b0d      	ldr	r3, [pc, #52]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dfe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e08:	4909      	ldr	r1, [pc, #36]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d006      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 80d9 	beq.w	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e24:	4b02      	ldr	r3, [pc, #8]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a01      	ldr	r2, [pc, #4]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e2e:	e001      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007e30:	40023800 	.word	0x40023800
 8007e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e36:	f7fa fa0b 	bl	8002250 <HAL_GetTick>
 8007e3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e3c:	e008      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e3e:	f7fa fa07 	bl	8002250 <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	2b64      	cmp	r3, #100	@ 0x64
 8007e4a:	d901      	bls.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e194      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e50:	4b6c      	ldr	r3, [pc, #432]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1f0      	bne.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d021      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d11d      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e70:	4b64      	ldr	r3, [pc, #400]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e76:	0c1b      	lsrs	r3, r3, #16
 8007e78:	f003 0303 	and.w	r3, r3, #3
 8007e7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e7e:	4b61      	ldr	r3, [pc, #388]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e84:	0e1b      	lsrs	r3, r3, #24
 8007e86:	f003 030f 	and.w	r3, r3, #15
 8007e8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	019a      	lsls	r2, r3, #6
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	041b      	lsls	r3, r3, #16
 8007e96:	431a      	orrs	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	061b      	lsls	r3, r3, #24
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	071b      	lsls	r3, r3, #28
 8007ea4:	4957      	ldr	r1, [pc, #348]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d004      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ebc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ec0:	d00a      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d02e      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ed6:	d129      	bne.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ede:	0c1b      	lsrs	r3, r3, #16
 8007ee0:	f003 0303 	and.w	r3, r3, #3
 8007ee4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ee6:	4b47      	ldr	r3, [pc, #284]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007eec:	0f1b      	lsrs	r3, r3, #28
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	019a      	lsls	r2, r3, #6
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	041b      	lsls	r3, r3, #16
 8007efe:	431a      	orrs	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	061b      	lsls	r3, r3, #24
 8007f06:	431a      	orrs	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	071b      	lsls	r3, r3, #28
 8007f0c:	493d      	ldr	r1, [pc, #244]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f14:	4b3b      	ldr	r3, [pc, #236]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f1a:	f023 021f 	bic.w	r2, r3, #31
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f22:	3b01      	subs	r3, #1
 8007f24:	4937      	ldr	r1, [pc, #220]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01d      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f38:	4b32      	ldr	r3, [pc, #200]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f3e:	0e1b      	lsrs	r3, r3, #24
 8007f40:	f003 030f 	and.w	r3, r3, #15
 8007f44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f46:	4b2f      	ldr	r3, [pc, #188]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f4c:	0f1b      	lsrs	r3, r3, #28
 8007f4e:	f003 0307 	and.w	r3, r3, #7
 8007f52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	019a      	lsls	r2, r3, #6
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	041b      	lsls	r3, r3, #16
 8007f60:	431a      	orrs	r2, r3
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	061b      	lsls	r3, r3, #24
 8007f66:	431a      	orrs	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	071b      	lsls	r3, r3, #28
 8007f6c:	4925      	ldr	r1, [pc, #148]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d011      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	019a      	lsls	r2, r3, #6
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	041b      	lsls	r3, r3, #16
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	061b      	lsls	r3, r3, #24
 8007f94:	431a      	orrs	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	071b      	lsls	r3, r3, #28
 8007f9c:	4919      	ldr	r1, [pc, #100]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007fa4:	4b17      	ldr	r3, [pc, #92]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a16      	ldr	r2, [pc, #88]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007faa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fb0:	f7fa f94e 	bl	8002250 <HAL_GetTick>
 8007fb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fb6:	e008      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007fb8:	f7fa f94a 	bl	8002250 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b64      	cmp	r3, #100	@ 0x64
 8007fc4:	d901      	bls.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e0d7      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fca:	4b0e      	ldr	r3, [pc, #56]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0f0      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	f040 80cd 	bne.w	8008178 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007fde:	4b09      	ldr	r3, [pc, #36]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a08      	ldr	r2, [pc, #32]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fea:	f7fa f931 	bl	8002250 <HAL_GetTick>
 8007fee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ff0:	e00a      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ff2:	f7fa f92d 	bl	8002250 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	2b64      	cmp	r3, #100	@ 0x64
 8007ffe:	d903      	bls.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e0ba      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008004:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008008:	4b5e      	ldr	r3, [pc, #376]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008014:	d0ed      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008026:	2b00      	cmp	r3, #0
 8008028:	d009      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008032:	2b00      	cmp	r3, #0
 8008034:	d02e      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d12a      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800803e:	4b51      	ldr	r3, [pc, #324]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008044:	0c1b      	lsrs	r3, r3, #16
 8008046:	f003 0303 	and.w	r3, r3, #3
 800804a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800804c:	4b4d      	ldr	r3, [pc, #308]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800804e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008052:	0f1b      	lsrs	r3, r3, #28
 8008054:	f003 0307 	and.w	r3, r3, #7
 8008058:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	019a      	lsls	r2, r3, #6
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	041b      	lsls	r3, r3, #16
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	061b      	lsls	r3, r3, #24
 800806c:	431a      	orrs	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	071b      	lsls	r3, r3, #28
 8008072:	4944      	ldr	r1, [pc, #272]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008074:	4313      	orrs	r3, r2
 8008076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800807a:	4b42      	ldr	r3, [pc, #264]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800807c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008080:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008088:	3b01      	subs	r3, #1
 800808a:	021b      	lsls	r3, r3, #8
 800808c:	493d      	ldr	r1, [pc, #244]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800808e:	4313      	orrs	r3, r2
 8008090:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d022      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080a8:	d11d      	bne.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080aa:	4b36      	ldr	r3, [pc, #216]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080b0:	0e1b      	lsrs	r3, r3, #24
 80080b2:	f003 030f 	and.w	r3, r3, #15
 80080b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80080b8:	4b32      	ldr	r3, [pc, #200]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080be:	0f1b      	lsrs	r3, r3, #28
 80080c0:	f003 0307 	and.w	r3, r3, #7
 80080c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	019a      	lsls	r2, r3, #6
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	041b      	lsls	r3, r3, #16
 80080d2:	431a      	orrs	r2, r3
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	061b      	lsls	r3, r3, #24
 80080d8:	431a      	orrs	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	071b      	lsls	r3, r3, #28
 80080de:	4929      	ldr	r1, [pc, #164]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0308 	and.w	r3, r3, #8
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d028      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080f2:	4b24      	ldr	r3, [pc, #144]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f8:	0e1b      	lsrs	r3, r3, #24
 80080fa:	f003 030f 	and.w	r3, r3, #15
 80080fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008100:	4b20      	ldr	r3, [pc, #128]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008106:	0c1b      	lsrs	r3, r3, #16
 8008108:	f003 0303 	and.w	r3, r3, #3
 800810c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	019a      	lsls	r2, r3, #6
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	041b      	lsls	r3, r3, #16
 8008118:	431a      	orrs	r2, r3
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	061b      	lsls	r3, r3, #24
 800811e:	431a      	orrs	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	071b      	lsls	r3, r3, #28
 8008126:	4917      	ldr	r1, [pc, #92]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008128:	4313      	orrs	r3, r2
 800812a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800812e:	4b15      	ldr	r3, [pc, #84]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008134:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813c:	4911      	ldr	r1, [pc, #68]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800813e:	4313      	orrs	r3, r2
 8008140:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008144:	4b0f      	ldr	r3, [pc, #60]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a0e      	ldr	r2, [pc, #56]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800814a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800814e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008150:	f7fa f87e 	bl	8002250 <HAL_GetTick>
 8008154:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008156:	e008      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008158:	f7fa f87a 	bl	8002250 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	2b64      	cmp	r3, #100	@ 0x64
 8008164:	d901      	bls.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e007      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800816a:	4b06      	ldr	r3, [pc, #24]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008176:	d1ef      	bne.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3720      	adds	r7, #32
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	40023800 	.word	0x40023800

08008188 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e09d      	b.n	80082d6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d108      	bne.n	80081b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081aa:	d009      	beq.n	80081c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	61da      	str	r2, [r3, #28]
 80081b2:	e005      	b.n	80081c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7f9 f9be 	bl	800155c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2202      	movs	r2, #2
 80081e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008200:	d902      	bls.n	8008208 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008202:	2300      	movs	r3, #0
 8008204:	60fb      	str	r3, [r7, #12]
 8008206:	e002      	b.n	800820e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800820c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008216:	d007      	beq.n	8008228 <HAL_SPI_Init+0xa0>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008220:	d002      	beq.n	8008228 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008238:	431a      	orrs	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	431a      	orrs	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	431a      	orrs	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008256:	431a      	orrs	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008260:	431a      	orrs	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800826a:	ea42 0103 	orr.w	r1, r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008272:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	0c1b      	lsrs	r3, r3, #16
 8008284:	f003 0204 	and.w	r2, r3, #4
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828c:	f003 0310 	and.w	r3, r3, #16
 8008290:	431a      	orrs	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008296:	f003 0308 	and.w	r3, r3, #8
 800829a:	431a      	orrs	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80082a4:	ea42 0103 	orr.w	r1, r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	430a      	orrs	r2, r1
 80082b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	69da      	ldr	r2, [r3, #28]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80082c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b088      	sub	sp, #32
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	60b9      	str	r1, [r7, #8]
 80082e8:	603b      	str	r3, [r7, #0]
 80082ea:	4613      	mov	r3, r2
 80082ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082ee:	f7f9 ffaf 	bl	8002250 <HAL_GetTick>
 80082f2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80082f4:	88fb      	ldrh	r3, [r7, #6]
 80082f6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b01      	cmp	r3, #1
 8008302:	d001      	beq.n	8008308 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008304:	2302      	movs	r3, #2
 8008306:	e15c      	b.n	80085c2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <HAL_SPI_Transmit+0x36>
 800830e:	88fb      	ldrh	r3, [r7, #6]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e154      	b.n	80085c2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800831e:	2b01      	cmp	r3, #1
 8008320:	d101      	bne.n	8008326 <HAL_SPI_Transmit+0x48>
 8008322:	2302      	movs	r3, #2
 8008324:	e14d      	b.n	80085c2 <HAL_SPI_Transmit+0x2e4>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2203      	movs	r2, #3
 8008332:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	88fa      	ldrh	r2, [r7, #6]
 8008346:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	88fa      	ldrh	r2, [r7, #6]
 800834c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008378:	d10f      	bne.n	800839a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008388:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008398:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a4:	2b40      	cmp	r3, #64	@ 0x40
 80083a6:	d007      	beq.n	80083b8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80083c0:	d952      	bls.n	8008468 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <HAL_SPI_Transmit+0xf2>
 80083ca:	8b7b      	ldrh	r3, [r7, #26]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d145      	bne.n	800845c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d4:	881a      	ldrh	r2, [r3, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e0:	1c9a      	adds	r2, r3, #2
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	3b01      	subs	r3, #1
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80083f4:	e032      	b.n	800845c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b02      	cmp	r3, #2
 8008402:	d112      	bne.n	800842a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008408:	881a      	ldrh	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008414:	1c9a      	adds	r2, r3, #2
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800841e:	b29b      	uxth	r3, r3
 8008420:	3b01      	subs	r3, #1
 8008422:	b29a      	uxth	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008428:	e018      	b.n	800845c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800842a:	f7f9 ff11 	bl	8002250 <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	429a      	cmp	r2, r3
 8008438:	d803      	bhi.n	8008442 <HAL_SPI_Transmit+0x164>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008440:	d102      	bne.n	8008448 <HAL_SPI_Transmit+0x16a>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d109      	bne.n	800845c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e0b2      	b.n	80085c2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008460:	b29b      	uxth	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1c7      	bne.n	80083f6 <HAL_SPI_Transmit+0x118>
 8008466:	e083      	b.n	8008570 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d002      	beq.n	8008476 <HAL_SPI_Transmit+0x198>
 8008470:	8b7b      	ldrh	r3, [r7, #26]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d177      	bne.n	8008566 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800847a:	b29b      	uxth	r3, r3
 800847c:	2b01      	cmp	r3, #1
 800847e:	d912      	bls.n	80084a6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008484:	881a      	ldrh	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008490:	1c9a      	adds	r2, r3, #2
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800849a:	b29b      	uxth	r3, r3
 800849c:	3b02      	subs	r3, #2
 800849e:	b29a      	uxth	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80084a4:	e05f      	b.n	8008566 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	330c      	adds	r3, #12
 80084b0:	7812      	ldrb	r2, [r2, #0]
 80084b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80084cc:	e04b      	b.n	8008566 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d12b      	bne.n	8008534 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d912      	bls.n	800850c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ea:	881a      	ldrh	r2, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f6:	1c9a      	adds	r2, r3, #2
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008500:	b29b      	uxth	r3, r3
 8008502:	3b02      	subs	r3, #2
 8008504:	b29a      	uxth	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800850a:	e02c      	b.n	8008566 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	330c      	adds	r3, #12
 8008516:	7812      	ldrb	r2, [r2, #0]
 8008518:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851e:	1c5a      	adds	r2, r3, #1
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008528:	b29b      	uxth	r3, r3
 800852a:	3b01      	subs	r3, #1
 800852c:	b29a      	uxth	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008532:	e018      	b.n	8008566 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008534:	f7f9 fe8c 	bl	8002250 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d803      	bhi.n	800854c <HAL_SPI_Transmit+0x26e>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854a:	d102      	bne.n	8008552 <HAL_SPI_Transmit+0x274>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d109      	bne.n	8008566 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e02d      	b.n	80085c2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800856a:	b29b      	uxth	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	d1ae      	bne.n	80084ce <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008570:	69fa      	ldr	r2, [r7, #28]
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 ff7d 	bl	8009474 <SPI_EndRxTxTransaction>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2220      	movs	r2, #32
 8008584:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10a      	bne.n	80085a4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800858e:	2300      	movs	r3, #0
 8008590:	617b      	str	r3, [r7, #20]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	617b      	str	r3, [r7, #20]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	617b      	str	r3, [r7, #20]
 80085a2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e000      	b.n	80085c2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80085c0:	2300      	movs	r3, #0
  }
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3720      	adds	r7, #32
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
	...

080085cc <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	4613      	mov	r3, r2
 80085d8:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d001      	beq.n	80085ea <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 80085e6:	2302      	movs	r3, #2
 80085e8:	e092      	b.n	8008710 <HAL_SPI_Receive_IT+0x144>
  }

  if ((pData == NULL) || (Size == 0U))
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d002      	beq.n	80085f6 <HAL_SPI_Receive_IT+0x2a>
 80085f0:	88fb      	ldrh	r3, [r7, #6]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e08a      	b.n	8008710 <HAL_SPI_Receive_IT+0x144>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d110      	bne.n	8008624 <HAL_SPI_Receive_IT+0x58>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800860a:	d10b      	bne.n	8008624 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2204      	movs	r2, #4
 8008610:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8008614:	88fb      	ldrh	r3, [r7, #6]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	68b9      	ldr	r1, [r7, #8]
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 f880 	bl	8008720 <HAL_SPI_TransmitReceive_IT>
 8008620:	4603      	mov	r3, r0
 8008622:	e075      	b.n	8008710 <HAL_SPI_Receive_IT+0x144>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800862a:	2b01      	cmp	r3, #1
 800862c:	d101      	bne.n	8008632 <HAL_SPI_Receive_IT+0x66>
 800862e:	2302      	movs	r3, #2
 8008630:	e06e      	b.n	8008710 <HAL_SPI_Receive_IT+0x144>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2204      	movs	r2, #4
 800863e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	88fa      	ldrh	r2, [r7, #6]
 8008652:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	88fa      	ldrh	r2, [r7, #6]
 800865a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800867e:	d90b      	bls.n	8008698 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800868e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4a21      	ldr	r2, [pc, #132]	@ (8008718 <HAL_SPI_Receive_IT+0x14c>)
 8008694:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008696:	e00a      	b.n	80086ae <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086a6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	4a1c      	ldr	r2, [pc, #112]	@ (800871c <HAL_SPI_Receive_IT+0x150>)
 80086ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086b6:	d10f      	bne.n	80086d8 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80086d6:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e2:	2b40      	cmp	r3, #64	@ 0x40
 80086e4:	d007      	beq.n	80086f6 <HAL_SPI_Receive_IT+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086f4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800870c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	080090f5 	.word	0x080090f5
 800871c:	080090a5 	.word	0x080090a5

08008720 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8008720:	b480      	push	{r7}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
 800872c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008734:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d00c      	beq.n	800875c <HAL_SPI_TransmitReceive_IT+0x3c>
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008748:	d106      	bne.n	8008758 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d102      	bne.n	8008758 <HAL_SPI_TransmitReceive_IT+0x38>
 8008752:	7dfb      	ldrb	r3, [r7, #23]
 8008754:	2b04      	cmp	r3, #4
 8008756:	d001      	beq.n	800875c <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008758:	2302      	movs	r3, #2
 800875a:	e07d      	b.n	8008858 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <HAL_SPI_TransmitReceive_IT+0x4e>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <HAL_SPI_TransmitReceive_IT+0x4e>
 8008768:	887b      	ldrh	r3, [r7, #2]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e072      	b.n	8008858 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008778:	2b01      	cmp	r3, #1
 800877a:	d101      	bne.n	8008780 <HAL_SPI_TransmitReceive_IT+0x60>
 800877c:	2302      	movs	r3, #2
 800877e:	e06b      	b.n	8008858 <HAL_SPI_TransmitReceive_IT+0x138>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b04      	cmp	r3, #4
 8008792:	d003      	beq.n	800879c <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2205      	movs	r2, #5
 8008798:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	887a      	ldrh	r2, [r7, #2]
 80087ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	887a      	ldrh	r2, [r7, #2]
 80087b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	887a      	ldrh	r2, [r7, #2]
 80087be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	887a      	ldrh	r2, [r7, #2]
 80087c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80087d2:	d906      	bls.n	80087e2 <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	4a23      	ldr	r2, [pc, #140]	@ (8008864 <HAL_SPI_TransmitReceive_IT+0x144>)
 80087d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	4a22      	ldr	r2, [pc, #136]	@ (8008868 <HAL_SPI_TransmitReceive_IT+0x148>)
 80087de:	651a      	str	r2, [r3, #80]	@ 0x50
 80087e0:	e005      	b.n	80087ee <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	4a21      	ldr	r2, [pc, #132]	@ (800886c <HAL_SPI_TransmitReceive_IT+0x14c>)
 80087e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4a21      	ldr	r2, [pc, #132]	@ (8008870 <HAL_SPI_TransmitReceive_IT+0x150>)
 80087ec:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80087f6:	d802      	bhi.n	80087fe <HAL_SPI_TransmitReceive_IT+0xde>
 80087f8:	887b      	ldrh	r3, [r7, #2]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d908      	bls.n	8008810 <HAL_SPI_TransmitReceive_IT+0xf0>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800880c:	605a      	str	r2, [r3, #4]
 800880e:	e007      	b.n	8008820 <HAL_SPI_TransmitReceive_IT+0x100>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800881e:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800882a:	2b40      	cmp	r3, #64	@ 0x40
 800882c:	d007      	beq.n	800883e <HAL_SPI_TransmitReceive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800883c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8008854:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	371c      	adds	r7, #28
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	08008fdf 	.word	0x08008fdf
 8008868:	08009045 	.word	0x08009045
 800886c:	08008e8f 	.word	0x08008e8f
 8008870:	08008f4d 	.word	0x08008f4d

08008874 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b088      	sub	sp, #32
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8008880:	2301      	movs	r3, #1
 8008882:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8008884:	4b72      	ldr	r3, [pc, #456]	@ (8008a50 <HAL_SPI_Abort_IT+0x1dc>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a72      	ldr	r2, [pc, #456]	@ (8008a54 <HAL_SPI_Abort_IT+0x1e0>)
 800888a:	fba2 2303 	umull	r2, r3, r2, r3
 800888e:	0a5b      	lsrs	r3, r3, #9
 8008890:	2264      	movs	r2, #100	@ 0x64
 8008892:	fb02 f303 	mul.w	r3, r2, r3
 8008896:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0220 	bic.w	r2, r2, #32
 80088aa:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088b6:	2b80      	cmp	r3, #128	@ 0x80
 80088b8:	d117      	bne.n	80088ea <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a66      	ldr	r2, [pc, #408]	@ (8008a58 <HAL_SPI_Abort_IT+0x1e4>)
 80088be:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d106      	bne.n	80088d4 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80088d2:	e008      	b.n	80088e6 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b07      	cmp	r3, #7
 80088e4:	d1ec      	bne.n	80088c0 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088f4:	2b40      	cmp	r3, #64	@ 0x40
 80088f6:	d117      	bne.n	8008928 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a58      	ldr	r2, [pc, #352]	@ (8008a5c <HAL_SPI_Abort_IT+0x1e8>)
 80088fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d106      	bne.n	8008912 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008908:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008910:	e008      	b.n	8008924 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	3b01      	subs	r3, #1
 8008916:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b07      	cmp	r3, #7
 8008922:	d1ec      	bne.n	80088fe <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00f      	beq.n	8008950 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b02      	cmp	r3, #2
 800893c:	d104      	bne.n	8008948 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008942:	4a47      	ldr	r2, [pc, #284]	@ (8008a60 <HAL_SPI_Abort_IT+0x1ec>)
 8008944:	651a      	str	r2, [r3, #80]	@ 0x50
 8008946:	e003      	b.n	8008950 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800894c:	2200      	movs	r2, #0
 800894e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00f      	beq.n	8008978 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b01      	cmp	r3, #1
 8008964:	d104      	bne.n	8008970 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800896a:	4a3e      	ldr	r2, [pc, #248]	@ (8008a64 <HAL_SPI_Abort_IT+0x1f0>)
 800896c:	651a      	str	r2, [r3, #80]	@ 0x50
 800896e:	e003      	b.n	8008978 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008974:	2200      	movs	r2, #0
 8008976:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f003 0302 	and.w	r3, r3, #2
 8008982:	2b02      	cmp	r3, #2
 8008984:	d115      	bne.n	80089b2 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800898a:	2b00      	cmp	r3, #0
 800898c:	d011      	beq.n	80089b2 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008992:	4618      	mov	r0, r3
 8008994:	f7fa f986 	bl	8002ca4 <HAL_DMA_Abort_IT>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d007      	beq.n	80089ae <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089a2:	2200      	movs	r2, #0
 80089a4:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2240      	movs	r2, #64	@ 0x40
 80089aa:	661a      	str	r2, [r3, #96]	@ 0x60
 80089ac:	e001      	b.n	80089b2 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 80089ae:	2300      	movs	r3, #0
 80089b0:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d115      	bne.n	80089ec <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d011      	beq.n	80089ec <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fa f969 	bl	8002ca4 <HAL_DMA_Abort_IT>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d007      	beq.n	80089e8 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089dc:	2200      	movs	r2, #0
 80089de:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2240      	movs	r2, #64	@ 0x40
 80089e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80089e6:	e001      	b.n	80089ec <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 80089e8:	2300      	movs	r3, #0
 80089ea:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d129      	bne.n	8008a46 <HAL_SPI_Abort_IT+0x1d2>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->TxXferCount = 0U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	87da      	strh	r2, [r3, #62]	@ 0x3e

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a04:	2b40      	cmp	r3, #64	@ 0x40
 8008a06:	d102      	bne.n	8008a0e <HAL_SPI_Abort_IT+0x19a>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	77fb      	strb	r3, [r7, #31]
 8008a0c:	e002      	b.n	8008a14 <HAL_SPI_Abort_IT+0x1a0>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a14:	2300      	movs	r3, #0
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60bb      	str	r3, [r7, #8]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	60bb      	str	r3, [r7, #8]
 8008a36:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f925 	bl	8008c90 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8008a46:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3720      	adds	r7, #32
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	20000000 	.word	0x20000000
 8008a54:	057619f1 	.word	0x057619f1
 8008a58:	080096ed 	.word	0x080096ed
 8008a5c:	0800962d 	.word	0x0800962d
 8008a60:	08008ccf 	.word	0x08008ccf
 8008a64:	08008dad 	.word	0x08008dad

08008a68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	099b      	lsrs	r3, r3, #6
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10f      	bne.n	8008aac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00a      	beq.n	8008aac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	099b      	lsrs	r3, r3, #6
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d004      	beq.n	8008aac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	4798      	blx	r3
    return;
 8008aaa:	e0d7      	b.n	8008c5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	085b      	lsrs	r3, r3, #1
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00a      	beq.n	8008ace <HAL_SPI_IRQHandler+0x66>
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	09db      	lsrs	r3, r3, #7
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d004      	beq.n	8008ace <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	4798      	blx	r3
    return;
 8008acc:	e0c6      	b.n	8008c5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	095b      	lsrs	r3, r3, #5
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10c      	bne.n	8008af4 <HAL_SPI_IRQHandler+0x8c>
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	099b      	lsrs	r3, r3, #6
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d106      	bne.n	8008af4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	0a1b      	lsrs	r3, r3, #8
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f000 80b4 	beq.w	8008c5c <HAL_SPI_IRQHandler+0x1f4>
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	095b      	lsrs	r3, r3, #5
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 80ad 	beq.w	8008c5c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	099b      	lsrs	r3, r3, #6
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d023      	beq.n	8008b56 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d011      	beq.n	8008b3e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b1e:	f043 0204 	orr.w	r2, r3, #4
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b26:	2300      	movs	r3, #0
 8008b28:	617b      	str	r3, [r7, #20]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	617b      	str	r3, [r7, #20]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	617b      	str	r3, [r7, #20]
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	e00b      	b.n	8008b56 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b3e:	2300      	movs	r3, #0
 8008b40:	613b      	str	r3, [r7, #16]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	613b      	str	r3, [r7, #16]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	613b      	str	r3, [r7, #16]
 8008b52:	693b      	ldr	r3, [r7, #16]
        return;
 8008b54:	e082      	b.n	8008c5c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	095b      	lsrs	r3, r3, #5
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d014      	beq.n	8008b8c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b66:	f043 0201 	orr.w	r2, r3, #1
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008b6e:	2300      	movs	r3, #0
 8008b70:	60fb      	str	r3, [r7, #12]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b88:	601a      	str	r2, [r3, #0]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	0a1b      	lsrs	r3, r3, #8
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00c      	beq.n	8008bb2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b9c:	f043 0208 	orr.w	r2, r3, #8
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60bb      	str	r3, [r7, #8]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	60bb      	str	r3, [r7, #8]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d04f      	beq.n	8008c5a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	685a      	ldr	r2, [r3, #4]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008bc8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d104      	bne.n	8008be6 <HAL_SPI_IRQHandler+0x17e>
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d034      	beq.n	8008c50 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 0203 	bic.w	r2, r2, #3
 8008bf4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d011      	beq.n	8008c22 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c02:	4a18      	ldr	r2, [pc, #96]	@ (8008c64 <HAL_SPI_IRQHandler+0x1fc>)
 8008c04:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fa f84a 	bl	8002ca4 <HAL_DMA_Abort_IT>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d005      	beq.n	8008c22 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d016      	beq.n	8008c58 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c2e:	4a0d      	ldr	r2, [pc, #52]	@ (8008c64 <HAL_SPI_IRQHandler+0x1fc>)
 8008c30:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fa f834 	bl	8002ca4 <HAL_DMA_Abort_IT>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008c4e:	e003      	b.n	8008c58 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f813 	bl	8008c7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008c56:	e000      	b.n	8008c5a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008c58:	bf00      	nop
    return;
 8008c5a:	bf00      	nop
  }
}
 8008c5c:	3720      	adds	r7, #32
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	08008ca5 	.word	0x08008ca5

08008c68 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f7ff ffdb 	bl	8008c7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008cc6:	bf00      	nop
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b088      	sub	sp, #32
 8008cd2:	af02      	add	r7, sp, #8
 8008cd4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cda:	617b      	str	r3, [r7, #20]

  hspi->hdmatx->XferAbortCallback = NULL;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685a      	ldr	r2, [r3, #4]
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f022 0202 	bic.w	r2, r2, #2
 8008cf2:	605a      	str	r2, [r3, #4]

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008cf4:	f7f9 faac 	bl	8002250 <HAL_GetTick>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	2164      	movs	r1, #100	@ 0x64
 8008cfe:	6978      	ldr	r0, [r7, #20]
 8008d00:	f000 fbb8 	bl	8009474 <SPI_EndRxTxTransaction>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d002      	beq.n	8008d10 <SPI_DMATxAbortCallback+0x42>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2240      	movs	r2, #64	@ 0x40
 8008d0e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d1e:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8008d20:	f7f9 fa96 	bl	8002250 <HAL_GetTick>
 8008d24:	4603      	mov	r3, r0
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	2364      	movs	r3, #100	@ 0x64
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008d30:	6978      	ldr	r0, [r7, #20]
 8008d32:	f000 fa8d 	bl	8009250 <SPI_WaitFifoStateUntilTimeout>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <SPI_DMATxAbortCallback+0x74>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	2240      	movs	r2, #64	@ 0x40
 8008d40:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d004      	beq.n	8008d54 <SPI_DMATxAbortCallback+0x86>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d127      	bne.n	8008da4 <SPI_DMATxAbortCallback+0xd6>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d66:	2b40      	cmp	r3, #64	@ 0x40
 8008d68:	d002      	beq.n	8008d70 <SPI_DMATxAbortCallback+0xa2>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d70:	2300      	movs	r3, #0
 8008d72:	613b      	str	r3, [r7, #16]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	613b      	str	r3, [r7, #16]
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	613b      	str	r3, [r7, #16]
 8008d84:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008d86:	2300      	movs	r3, #0
 8008d88:	60fb      	str	r3, [r7, #12]
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8008d9c:	6978      	ldr	r0, [r7, #20]
 8008d9e:	f7ff ff77 	bl	8008c90 <HAL_SPI_AbortCpltCallback>
 8008da2:	e000      	b.n	8008da6 <SPI_DMATxAbortCallback+0xd8>
      return;
 8008da4:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af02      	add	r7, sp, #8
 8008db2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db8:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008dc8:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dce:	2200      	movs	r2, #0
 8008dd0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0201 	bic.w	r2, r2, #1
 8008de0:	605a      	str	r2, [r3, #4]

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008de2:	f7f9 fa35 	bl	8002250 <HAL_GetTick>
 8008de6:	4603      	mov	r3, r0
 8008de8:	9300      	str	r3, [sp, #0]
 8008dea:	2364      	movs	r3, #100	@ 0x64
 8008dec:	2200      	movs	r2, #0
 8008dee:	2180      	movs	r1, #128	@ 0x80
 8008df0:	6978      	ldr	r0, [r7, #20]
 8008df2:	f000 f9a5 	bl	8009140 <SPI_WaitFlagStateUntilTimeout>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <SPI_DMARxAbortCallback+0x56>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	2240      	movs	r2, #64	@ 0x40
 8008e00:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8008e02:	f7f9 fa25 	bl	8002250 <HAL_GetTick>
 8008e06:	4603      	mov	r3, r0
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	2364      	movs	r3, #100	@ 0x64
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008e12:	6978      	ldr	r0, [r7, #20]
 8008e14:	f000 fa1c 	bl	8009250 <SPI_WaitFifoStateUntilTimeout>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d002      	beq.n	8008e24 <SPI_DMARxAbortCallback+0x78>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2240      	movs	r2, #64	@ 0x40
 8008e22:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d004      	beq.n	8008e36 <SPI_DMARxAbortCallback+0x8a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d127      	bne.n	8008e86 <SPI_DMARxAbortCallback+0xda>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2200      	movs	r2, #0
 8008e42:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e48:	2b40      	cmp	r3, #64	@ 0x40
 8008e4a:	d002      	beq.n	8008e52 <SPI_DMARxAbortCallback+0xa6>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e52:	2300      	movs	r3, #0
 8008e54:	613b      	str	r3, [r7, #16]
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	613b      	str	r3, [r7, #16]
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	613b      	str	r3, [r7, #16]
 8008e66:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008e68:	2300      	movs	r3, #0
 8008e6a:	60fb      	str	r3, [r7, #12]
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8008e7e:	6978      	ldr	r0, [r7, #20]
 8008e80:	f7ff ff06 	bl	8008c90 <HAL_SPI_AbortCpltCallback>
 8008e84:	e000      	b.n	8008e88 <SPI_DMARxAbortCallback+0xdc>
      return;
 8008e86:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008e88:	3718      	adds	r7, #24
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b082      	sub	sp, #8
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d923      	bls.n	8008eea <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68da      	ldr	r2, [r3, #12]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eac:	b292      	uxth	r2, r2
 8008eae:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb4:	1c9a      	adds	r2, r3, #2
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	3b02      	subs	r3, #2
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d11f      	bne.n	8008f18 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ee6:	605a      	str	r2, [r3, #4]
 8008ee8:	e016      	b.n	8008f18 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f103 020c 	add.w	r2, r3, #12
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef6:	7812      	ldrb	r2, [r2, #0]
 8008ef8:	b2d2      	uxtb	r2, r2
 8008efa:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f00:	1c5a      	adds	r2, r3, #1
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10f      	bne.n	8008f44 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008f32:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d102      	bne.n	8008f44 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fb02 	bl	8009548 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008f44:	bf00      	nop
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d912      	bls.n	8008f84 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f62:	881a      	ldrh	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f6e:	1c9a      	adds	r2, r3, #2
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	3b02      	subs	r3, #2
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008f82:	e012      	b.n	8008faa <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	330c      	adds	r3, #12
 8008f8e:	7812      	ldrb	r2, [r2, #0]
 8008f90:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d110      	bne.n	8008fd6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008fc2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d102      	bne.n	8008fd6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fab9 	bl	8009548 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008fd6:	bf00      	nop
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b082      	sub	sp, #8
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68da      	ldr	r2, [r3, #12]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff0:	b292      	uxth	r2, r2
 8008ff2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff8:	1c9a      	adds	r2, r3, #2
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009004:	b29b      	uxth	r3, r3
 8009006:	3b01      	subs	r3, #1
 8009008:	b29a      	uxth	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009016:	b29b      	uxth	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10f      	bne.n	800903c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685a      	ldr	r2, [r3, #4]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800902a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009030:	b29b      	uxth	r3, r3
 8009032:	2b00      	cmp	r3, #0
 8009034:	d102      	bne.n	800903c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fa86 	bl	8009548 <SPI_CloseRxTx_ISR>
    }
  }
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009050:	881a      	ldrh	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800905c:	1c9a      	adds	r2, r3, #2
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009066:	b29b      	uxth	r3, r3
 8009068:	3b01      	subs	r3, #1
 800906a:	b29a      	uxth	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009074:	b29b      	uxth	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d110      	bne.n	800909c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009088:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009090:	b29b      	uxth	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d102      	bne.n	800909c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fa56 	bl	8009548 <SPI_CloseRxTx_ISR>
    }
  }
}
 800909c:	bf00      	nop
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f103 020c 	add.w	r2, r3, #12
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b8:	7812      	ldrb	r2, [r2, #0]
 80090ba:	b2d2      	uxtb	r2, r2
 80090bc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	3b01      	subs	r3, #1
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d102      	bne.n	80090ec <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fa70 	bl	80095cc <SPI_CloseRx_ISR>
  }
}
 80090ec:	bf00      	nop
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68da      	ldr	r2, [r3, #12]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009106:	b292      	uxth	r2, r2
 8009108:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800910e:	1c9a      	adds	r2, r3, #2
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800911a:	b29b      	uxth	r3, r3
 800911c:	3b01      	subs	r3, #1
 800911e:	b29a      	uxth	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800912c:	b29b      	uxth	r3, r3
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fa4a 	bl	80095cc <SPI_CloseRx_ISR>
  }
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	4613      	mov	r3, r2
 800914e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009150:	f7f9 f87e 	bl	8002250 <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009158:	1a9b      	subs	r3, r3, r2
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	4413      	add	r3, r2
 800915e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009160:	f7f9 f876 	bl	8002250 <HAL_GetTick>
 8009164:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009166:	4b39      	ldr	r3, [pc, #228]	@ (800924c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	015b      	lsls	r3, r3, #5
 800916c:	0d1b      	lsrs	r3, r3, #20
 800916e:	69fa      	ldr	r2, [r7, #28]
 8009170:	fb02 f303 	mul.w	r3, r2, r3
 8009174:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009176:	e055      	b.n	8009224 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917e:	d051      	beq.n	8009224 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009180:	f7f9 f866 	bl	8002250 <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	69fa      	ldr	r2, [r7, #28]
 800918c:	429a      	cmp	r2, r3
 800918e:	d902      	bls.n	8009196 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d13d      	bne.n	8009212 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80091a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091ae:	d111      	bne.n	80091d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091b8:	d004      	beq.n	80091c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091c2:	d107      	bne.n	80091d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091dc:	d10f      	bne.n	80091fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80091ec:	601a      	str	r2, [r3, #0]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e018      	b.n	8009244 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d102      	bne.n	800921e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	61fb      	str	r3, [r7, #28]
 800921c:	e002      	b.n	8009224 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	3b01      	subs	r3, #1
 8009222:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689a      	ldr	r2, [r3, #8]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	4013      	ands	r3, r2
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	429a      	cmp	r2, r3
 8009232:	bf0c      	ite	eq
 8009234:	2301      	moveq	r3, #1
 8009236:	2300      	movne	r3, #0
 8009238:	b2db      	uxtb	r3, r3
 800923a:	461a      	mov	r2, r3
 800923c:	79fb      	ldrb	r3, [r7, #7]
 800923e:	429a      	cmp	r2, r3
 8009240:	d19a      	bne.n	8009178 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3720      	adds	r7, #32
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20000000 	.word	0x20000000

08009250 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b08a      	sub	sp, #40	@ 0x28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800925e:	2300      	movs	r3, #0
 8009260:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009262:	f7f8 fff5 	bl	8002250 <HAL_GetTick>
 8009266:	4602      	mov	r2, r0
 8009268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926a:	1a9b      	subs	r3, r3, r2
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	4413      	add	r3, r2
 8009270:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009272:	f7f8 ffed 	bl	8002250 <HAL_GetTick>
 8009276:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	330c      	adds	r3, #12
 800927e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009280:	4b3d      	ldr	r3, [pc, #244]	@ (8009378 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	4613      	mov	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	00da      	lsls	r2, r3, #3
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	0d1b      	lsrs	r3, r3, #20
 8009290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009292:	fb02 f303 	mul.w	r3, r2, r3
 8009296:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009298:	e061      	b.n	800935e <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80092a0:	d107      	bne.n	80092b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d104      	bne.n	80092b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80092b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b8:	d051      	beq.n	800935e <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092ba:	f7f8 ffc9 	bl	8002250 <HAL_GetTick>
 80092be:	4602      	mov	r2, r0
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d902      	bls.n	80092d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80092ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d13d      	bne.n	800934c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80092de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092e8:	d111      	bne.n	800930e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092f2:	d004      	beq.n	80092fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092fc:	d107      	bne.n	800930e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800930c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009316:	d10f      	bne.n	8009338 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009326:	601a      	str	r2, [r3, #0]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009336:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009348:	2303      	movs	r3, #3
 800934a:	e011      	b.n	8009370 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d102      	bne.n	8009358 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8009352:	2300      	movs	r3, #0
 8009354:	627b      	str	r3, [r7, #36]	@ 0x24
 8009356:	e002      	b.n	800935e <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	3b01      	subs	r3, #1
 800935c:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	4013      	ands	r3, r2
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	429a      	cmp	r2, r3
 800936c:	d195      	bne.n	800929a <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3728      	adds	r7, #40	@ 0x28
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20000000 	.word	0x20000000

0800937c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b088      	sub	sp, #32
 8009380:	af02      	add	r7, sp, #8
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009390:	d111      	bne.n	80093b6 <SPI_EndRxTransaction+0x3a>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800939a:	d004      	beq.n	80093a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093a4:	d107      	bne.n	80093b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093be:	d112      	bne.n	80093e6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	2200      	movs	r2, #0
 80093c8:	2180      	movs	r1, #128	@ 0x80
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f7ff feb8 	bl	8009140 <SPI_WaitFlagStateUntilTimeout>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d021      	beq.n	800941a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093da:	f043 0220 	orr.w	r2, r3, #32
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80093e2:	2303      	movs	r3, #3
 80093e4:	e03d      	b.n	8009462 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80093e6:	4b21      	ldr	r3, [pc, #132]	@ (800946c <SPI_EndRxTransaction+0xf0>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a21      	ldr	r2, [pc, #132]	@ (8009470 <SPI_EndRxTransaction+0xf4>)
 80093ec:	fba2 2303 	umull	r2, r3, r2, r3
 80093f0:	0d5b      	lsrs	r3, r3, #21
 80093f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80093f6:	fb02 f303 	mul.w	r3, r2, r3
 80093fa:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00a      	beq.n	8009418 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	3b01      	subs	r3, #1
 8009406:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009412:	2b80      	cmp	r3, #128	@ 0x80
 8009414:	d0f2      	beq.n	80093fc <SPI_EndRxTransaction+0x80>
 8009416:	e000      	b.n	800941a <SPI_EndRxTransaction+0x9e>
        break;
 8009418:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009422:	d11d      	bne.n	8009460 <SPI_EndRxTransaction+0xe4>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800942c:	d004      	beq.n	8009438 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009436:	d113      	bne.n	8009460 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2200      	movs	r2, #0
 8009440:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f7ff ff03 	bl	8009250 <SPI_WaitFifoStateUntilTimeout>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d007      	beq.n	8009460 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009454:	f043 0220 	orr.w	r2, r3, #32
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	e000      	b.n	8009462 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3718      	adds	r7, #24
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20000000 	.word	0x20000000
 8009470:	165e9f81 	.word	0x165e9f81

08009474 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b088      	sub	sp, #32
 8009478:	af02      	add	r7, sp, #8
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2200      	movs	r2, #0
 8009488:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f7ff fedf 	bl	8009250 <SPI_WaitFifoStateUntilTimeout>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d007      	beq.n	80094a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800949c:	f043 0220 	orr.w	r2, r3, #32
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e046      	b.n	8009536 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80094a8:	4b25      	ldr	r3, [pc, #148]	@ (8009540 <SPI_EndRxTxTransaction+0xcc>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a25      	ldr	r2, [pc, #148]	@ (8009544 <SPI_EndRxTxTransaction+0xd0>)
 80094ae:	fba2 2303 	umull	r2, r3, r2, r3
 80094b2:	0d5b      	lsrs	r3, r3, #21
 80094b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80094b8:	fb02 f303 	mul.w	r3, r2, r3
 80094bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094c6:	d112      	bne.n	80094ee <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	2200      	movs	r2, #0
 80094d0:	2180      	movs	r1, #128	@ 0x80
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f7ff fe34 	bl	8009140 <SPI_WaitFlagStateUntilTimeout>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d016      	beq.n	800950c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094e2:	f043 0220 	orr.w	r2, r3, #32
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e023      	b.n	8009536 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00a      	beq.n	800950a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009504:	2b80      	cmp	r3, #128	@ 0x80
 8009506:	d0f2      	beq.n	80094ee <SPI_EndRxTxTransaction+0x7a>
 8009508:	e000      	b.n	800950c <SPI_EndRxTxTransaction+0x98>
        break;
 800950a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2200      	movs	r2, #0
 8009514:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f7ff fe99 	bl	8009250 <SPI_WaitFifoStateUntilTimeout>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d007      	beq.n	8009534 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009528:	f043 0220 	orr.w	r2, r3, #32
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e000      	b.n	8009536 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3718      	adds	r7, #24
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20000000 	.word	0x20000000
 8009544:	165e9f81 	.word	0x165e9f81

08009548 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009550:	f7f8 fe7e 	bl	8002250 <HAL_GetTick>
 8009554:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f022 0220 	bic.w	r2, r2, #32
 8009564:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	2164      	movs	r1, #100	@ 0x64
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7ff ff82 	bl	8009474 <SPI_EndRxTxTransaction>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d005      	beq.n	8009582 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800957a:	f043 0220 	orr.w	r2, r3, #32
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009586:	2b00      	cmp	r3, #0
 8009588:	d115      	bne.n	80095b6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b04      	cmp	r3, #4
 8009594:	d107      	bne.n	80095a6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f012 fa88 	bl	801bab4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80095a4:	e00e      	b.n	80095c4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7ff fb5a 	bl	8008c68 <HAL_SPI_TxRxCpltCallback>
}
 80095b4:	e006      	b.n	80095c4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7ff fb5c 	bl	8008c7c <HAL_SPI_ErrorCallback>
}
 80095c4:	bf00      	nop
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685a      	ldr	r2, [r3, #4]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80095e2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80095e4:	f7f8 fe34 	bl	8002250 <HAL_GetTick>
 80095e8:	4603      	mov	r3, r0
 80095ea:	461a      	mov	r2, r3
 80095ec:	2164      	movs	r1, #100	@ 0x64
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff fec4 	bl	800937c <SPI_EndRxTransaction>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d005      	beq.n	8009606 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095fe:	f043 0220 	orr.w	r2, r3, #32
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009612:	2b00      	cmp	r3, #0
 8009614:	d103      	bne.n	800961e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f012 fa4c 	bl	801bab4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800961c:	e002      	b.n	8009624 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7ff fb2c 	bl	8008c7c <HAL_SPI_ErrorCallback>
}
 8009624:	bf00      	nop
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af02      	add	r7, sp, #8
 8009632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009642:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009644:	4b27      	ldr	r3, [pc, #156]	@ (80096e4 <SPI_AbortRx_ISR+0xb8>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a27      	ldr	r2, [pc, #156]	@ (80096e8 <SPI_AbortRx_ISR+0xbc>)
 800964a:	fba2 2303 	umull	r2, r3, r2, r3
 800964e:	0a5b      	lsrs	r3, r3, #9
 8009650:	2264      	movs	r2, #100	@ 0x64
 8009652:	fb02 f303 	mul.w	r3, r2, r3
 8009656:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	685a      	ldr	r2, [r3, #4]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009666:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d106      	bne.n	800967c <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009672:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800967a:	e009      	b.n	8009690 <SPI_AbortRx_ISR+0x64>
    }
    count--;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	3b01      	subs	r3, #1
 8009680:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800968c:	2b40      	cmp	r3, #64	@ 0x40
 800968e:	d0eb      	beq.n	8009668 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009690:	f7f8 fdde 	bl	8002250 <HAL_GetTick>
 8009694:	4603      	mov	r3, r0
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	2364      	movs	r3, #100	@ 0x64
 800969a:	2200      	movs	r2, #0
 800969c:	2180      	movs	r1, #128	@ 0x80
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7ff fd4e 	bl	8009140 <SPI_WaitFlagStateUntilTimeout>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2240      	movs	r2, #64	@ 0x40
 80096ae:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 80096b0:	f7f8 fdce 	bl	8002250 <HAL_GetTick>
 80096b4:	4603      	mov	r3, r0
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	2364      	movs	r3, #100	@ 0x64
 80096ba:	2200      	movs	r2, #0
 80096bc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7ff fdc5 	bl	8009250 <SPI_WaitFifoStateUntilTimeout>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <SPI_AbortRx_ISR+0xa6>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2240      	movs	r2, #64	@ 0x40
 80096d0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2207      	movs	r2, #7
 80096d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 80096da:	bf00      	nop
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	20000000 	.word	0x20000000
 80096e8:	057619f1 	.word	0x057619f1

080096ec <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af02      	add	r7, sp, #8
 80096f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80096f4:	4b4c      	ldr	r3, [pc, #304]	@ (8009828 <SPI_AbortTx_ISR+0x13c>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a4c      	ldr	r2, [pc, #304]	@ (800982c <SPI_AbortTx_ISR+0x140>)
 80096fa:	fba2 2303 	umull	r2, r3, r2, r3
 80096fe:	0a5b      	lsrs	r3, r3, #9
 8009700:	2264      	movs	r2, #100	@ 0x64
 8009702:	fb02 f303 	mul.w	r3, r2, r3
 8009706:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009716:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d106      	bne.n	800972c <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009722:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800972a:	e009      	b.n	8009740 <SPI_AbortTx_ISR+0x54>
    }
    count--;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	3b01      	subs	r3, #1
 8009730:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800973c:	2b80      	cmp	r3, #128	@ 0x80
 800973e:	d0eb      	beq.n	8009718 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009740:	f7f8 fd86 	bl	8002250 <HAL_GetTick>
 8009744:	4603      	mov	r3, r0
 8009746:	461a      	mov	r2, r3
 8009748:	2164      	movs	r1, #100	@ 0x64
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7ff fe92 	bl	8009474 <SPI_EndRxTxTransaction>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d002      	beq.n	800975c <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2240      	movs	r2, #64	@ 0x40
 800975a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800976a:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800976c:	f7f8 fd70 	bl	8002250 <HAL_GetTick>
 8009770:	4603      	mov	r3, r0
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	2364      	movs	r3, #100	@ 0x64
 8009776:	2200      	movs	r2, #0
 8009778:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f7ff fd67 	bl	8009250 <SPI_WaitFifoStateUntilTimeout>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d002      	beq.n	800978e <SPI_AbortTx_ISR+0xa2>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2240      	movs	r2, #64	@ 0x40
 800978c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009798:	2b40      	cmp	r3, #64	@ 0x40
 800979a:	d13c      	bne.n	8009816 <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097aa:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d106      	bne.n	80097c0 <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80097be:	e009      	b.n	80097d4 <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097d0:	2b40      	cmp	r3, #64	@ 0x40
 80097d2:	d0eb      	beq.n	80097ac <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80097d4:	f7f8 fd3c 	bl	8002250 <HAL_GetTick>
 80097d8:	4603      	mov	r3, r0
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	2364      	movs	r3, #100	@ 0x64
 80097de:	2200      	movs	r2, #0
 80097e0:	2180      	movs	r1, #128	@ 0x80
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7ff fcac 	bl	8009140 <SPI_WaitFlagStateUntilTimeout>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d002      	beq.n	80097f4 <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2240      	movs	r2, #64	@ 0x40
 80097f2:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 80097f4:	f7f8 fd2c 	bl	8002250 <HAL_GetTick>
 80097f8:	4603      	mov	r3, r0
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	2364      	movs	r3, #100	@ 0x64
 80097fe:	2200      	movs	r2, #0
 8009800:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff fd23 	bl	8009250 <SPI_WaitFifoStateUntilTimeout>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <SPI_AbortTx_ISR+0x12a>
                                      HAL_GetTick()) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2240      	movs	r2, #64	@ 0x40
 8009814:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2207      	movs	r2, #7
 800981a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800981e:	bf00      	nop
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20000000 	.word	0x20000000
 800982c:	057619f1 	.word	0x057619f1

08009830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e049      	b.n	80098d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b00      	cmp	r3, #0
 800984c:	d106      	bne.n	800985c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 f841 	bl	80098de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2202      	movs	r2, #2
 8009860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3304      	adds	r3, #4
 800986c:	4619      	mov	r1, r3
 800986e:	4610      	mov	r0, r2
 8009870:	f000 f9e8 	bl	8009c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80098de:	b480      	push	{r7}
 80098e0:	b083      	sub	sp, #12
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80098e6:	bf00      	nop
 80098e8:	370c      	adds	r7, #12
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
	...

080098f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2b01      	cmp	r3, #1
 8009906:	d001      	beq.n	800990c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e054      	b.n	80099b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2202      	movs	r2, #2
 8009910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68da      	ldr	r2, [r3, #12]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f042 0201 	orr.w	r2, r2, #1
 8009922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a26      	ldr	r2, [pc, #152]	@ (80099c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d022      	beq.n	8009974 <HAL_TIM_Base_Start_IT+0x80>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009936:	d01d      	beq.n	8009974 <HAL_TIM_Base_Start_IT+0x80>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a22      	ldr	r2, [pc, #136]	@ (80099c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d018      	beq.n	8009974 <HAL_TIM_Base_Start_IT+0x80>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a21      	ldr	r2, [pc, #132]	@ (80099cc <HAL_TIM_Base_Start_IT+0xd8>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d013      	beq.n	8009974 <HAL_TIM_Base_Start_IT+0x80>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a1f      	ldr	r2, [pc, #124]	@ (80099d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d00e      	beq.n	8009974 <HAL_TIM_Base_Start_IT+0x80>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a1e      	ldr	r2, [pc, #120]	@ (80099d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d009      	beq.n	8009974 <HAL_TIM_Base_Start_IT+0x80>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a1c      	ldr	r2, [pc, #112]	@ (80099d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d004      	beq.n	8009974 <HAL_TIM_Base_Start_IT+0x80>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a1b      	ldr	r2, [pc, #108]	@ (80099dc <HAL_TIM_Base_Start_IT+0xe8>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d115      	bne.n	80099a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689a      	ldr	r2, [r3, #8]
 800997a:	4b19      	ldr	r3, [pc, #100]	@ (80099e0 <HAL_TIM_Base_Start_IT+0xec>)
 800997c:	4013      	ands	r3, r2
 800997e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b06      	cmp	r3, #6
 8009984:	d015      	beq.n	80099b2 <HAL_TIM_Base_Start_IT+0xbe>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800998c:	d011      	beq.n	80099b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f042 0201 	orr.w	r2, r2, #1
 800999c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800999e:	e008      	b.n	80099b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f042 0201 	orr.w	r2, r2, #1
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	e000      	b.n	80099b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	40010000 	.word	0x40010000
 80099c8:	40000400 	.word	0x40000400
 80099cc:	40000800 	.word	0x40000800
 80099d0:	40000c00 	.word	0x40000c00
 80099d4:	40010400 	.word	0x40010400
 80099d8:	40014000 	.word	0x40014000
 80099dc:	40001800 	.word	0x40001800
 80099e0:	00010007 	.word	0x00010007

080099e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	f003 0302 	and.w	r3, r3, #2
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d020      	beq.n	8009a48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f003 0302 	and.w	r3, r3, #2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d01b      	beq.n	8009a48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f06f 0202 	mvn.w	r2, #2
 8009a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	f003 0303 	and.w	r3, r3, #3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f8e9 	bl	8009c06 <HAL_TIM_IC_CaptureCallback>
 8009a34:	e005      	b.n	8009a42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f8db 	bl	8009bf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f8ec 	bl	8009c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	f003 0304 	and.w	r3, r3, #4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d020      	beq.n	8009a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f003 0304 	and.w	r3, r3, #4
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d01b      	beq.n	8009a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f06f 0204 	mvn.w	r2, #4
 8009a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2202      	movs	r2, #2
 8009a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d003      	beq.n	8009a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f8c3 	bl	8009c06 <HAL_TIM_IC_CaptureCallback>
 8009a80:	e005      	b.n	8009a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f8b5 	bl	8009bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f8c6 	bl	8009c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	f003 0308 	and.w	r3, r3, #8
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d020      	beq.n	8009ae0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f003 0308 	and.w	r3, r3, #8
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d01b      	beq.n	8009ae0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f06f 0208 	mvn.w	r2, #8
 8009ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2204      	movs	r2, #4
 8009ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	f003 0303 	and.w	r3, r3, #3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d003      	beq.n	8009ace <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f89d 	bl	8009c06 <HAL_TIM_IC_CaptureCallback>
 8009acc:	e005      	b.n	8009ada <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f88f 	bl	8009bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f8a0 	bl	8009c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	f003 0310 	and.w	r3, r3, #16
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d020      	beq.n	8009b2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f003 0310 	and.w	r3, r3, #16
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d01b      	beq.n	8009b2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f06f 0210 	mvn.w	r2, #16
 8009afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2208      	movs	r2, #8
 8009b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d003      	beq.n	8009b1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f877 	bl	8009c06 <HAL_TIM_IC_CaptureCallback>
 8009b18:	e005      	b.n	8009b26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f869 	bl	8009bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f87a 	bl	8009c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00c      	beq.n	8009b50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d007      	beq.n	8009b50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f06f 0201 	mvn.w	r2, #1
 8009b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7f7 fb26 	bl	800119c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d104      	bne.n	8009b64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00c      	beq.n	8009b7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d007      	beq.n	8009b7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f913 	bl	8009da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00c      	beq.n	8009ba2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d007      	beq.n	8009ba2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f90b 	bl	8009db8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00c      	beq.n	8009bc6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d007      	beq.n	8009bc6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f834 	bl	8009c2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	f003 0320 	and.w	r3, r3, #32
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00c      	beq.n	8009bea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f003 0320 	and.w	r3, r3, #32
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d007      	beq.n	8009bea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f06f 0220 	mvn.w	r2, #32
 8009be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f8d3 	bl	8009d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bea:	bf00      	nop
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bfa:	bf00      	nop
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b083      	sub	sp, #12
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c0e:	bf00      	nop
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b083      	sub	sp, #12
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c22:	bf00      	nop
 8009c24:	370c      	adds	r7, #12
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr

08009c2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c2e:	b480      	push	{r7}
 8009c30:	b083      	sub	sp, #12
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c36:	bf00      	nop
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
	...

08009c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a43      	ldr	r2, [pc, #268]	@ (8009d64 <TIM_Base_SetConfig+0x120>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d013      	beq.n	8009c84 <TIM_Base_SetConfig+0x40>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c62:	d00f      	beq.n	8009c84 <TIM_Base_SetConfig+0x40>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a40      	ldr	r2, [pc, #256]	@ (8009d68 <TIM_Base_SetConfig+0x124>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d00b      	beq.n	8009c84 <TIM_Base_SetConfig+0x40>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a3f      	ldr	r2, [pc, #252]	@ (8009d6c <TIM_Base_SetConfig+0x128>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d007      	beq.n	8009c84 <TIM_Base_SetConfig+0x40>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a3e      	ldr	r2, [pc, #248]	@ (8009d70 <TIM_Base_SetConfig+0x12c>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d003      	beq.n	8009c84 <TIM_Base_SetConfig+0x40>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a3d      	ldr	r2, [pc, #244]	@ (8009d74 <TIM_Base_SetConfig+0x130>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d108      	bne.n	8009c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a32      	ldr	r2, [pc, #200]	@ (8009d64 <TIM_Base_SetConfig+0x120>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d02b      	beq.n	8009cf6 <TIM_Base_SetConfig+0xb2>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ca4:	d027      	beq.n	8009cf6 <TIM_Base_SetConfig+0xb2>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a2f      	ldr	r2, [pc, #188]	@ (8009d68 <TIM_Base_SetConfig+0x124>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d023      	beq.n	8009cf6 <TIM_Base_SetConfig+0xb2>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a2e      	ldr	r2, [pc, #184]	@ (8009d6c <TIM_Base_SetConfig+0x128>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d01f      	beq.n	8009cf6 <TIM_Base_SetConfig+0xb2>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8009d70 <TIM_Base_SetConfig+0x12c>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d01b      	beq.n	8009cf6 <TIM_Base_SetConfig+0xb2>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8009d74 <TIM_Base_SetConfig+0x130>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d017      	beq.n	8009cf6 <TIM_Base_SetConfig+0xb2>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8009d78 <TIM_Base_SetConfig+0x134>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d013      	beq.n	8009cf6 <TIM_Base_SetConfig+0xb2>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a2a      	ldr	r2, [pc, #168]	@ (8009d7c <TIM_Base_SetConfig+0x138>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d00f      	beq.n	8009cf6 <TIM_Base_SetConfig+0xb2>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a29      	ldr	r2, [pc, #164]	@ (8009d80 <TIM_Base_SetConfig+0x13c>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d00b      	beq.n	8009cf6 <TIM_Base_SetConfig+0xb2>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a28      	ldr	r2, [pc, #160]	@ (8009d84 <TIM_Base_SetConfig+0x140>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d007      	beq.n	8009cf6 <TIM_Base_SetConfig+0xb2>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a27      	ldr	r2, [pc, #156]	@ (8009d88 <TIM_Base_SetConfig+0x144>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d003      	beq.n	8009cf6 <TIM_Base_SetConfig+0xb2>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a26      	ldr	r2, [pc, #152]	@ (8009d8c <TIM_Base_SetConfig+0x148>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d108      	bne.n	8009d08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	689a      	ldr	r2, [r3, #8]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a0e      	ldr	r2, [pc, #56]	@ (8009d64 <TIM_Base_SetConfig+0x120>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d003      	beq.n	8009d36 <TIM_Base_SetConfig+0xf2>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a10      	ldr	r2, [pc, #64]	@ (8009d74 <TIM_Base_SetConfig+0x130>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d103      	bne.n	8009d3e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	691a      	ldr	r2, [r3, #16]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f043 0204 	orr.w	r2, r3, #4
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	601a      	str	r2, [r3, #0]
}
 8009d56:	bf00      	nop
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	40010000 	.word	0x40010000
 8009d68:	40000400 	.word	0x40000400
 8009d6c:	40000800 	.word	0x40000800
 8009d70:	40000c00 	.word	0x40000c00
 8009d74:	40010400 	.word	0x40010400
 8009d78:	40014000 	.word	0x40014000
 8009d7c:	40014400 	.word	0x40014400
 8009d80:	40014800 	.word	0x40014800
 8009d84:	40001800 	.word	0x40001800
 8009d88:	40001c00 	.word	0x40001c00
 8009d8c:	40002000 	.word	0x40002000

08009d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e040      	b.n	8009e60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d106      	bne.n	8009df4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7f7 fc74 	bl	80016dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2224      	movs	r2, #36	@ 0x24
 8009df8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 0201 	bic.w	r2, r2, #1
 8009e08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d002      	beq.n	8009e18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 ff7e 	bl	800ad14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fd17 	bl	800a84c <UART_SetConfig>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d101      	bne.n	8009e28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e01b      	b.n	8009e60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009e36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	689a      	ldr	r2, [r3, #8]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009e46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f042 0201 	orr.w	r2, r2, #1
 8009e56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fffd 	bl	800ae58 <UART_CheckIdleState>
 8009e5e:	4603      	mov	r3, r0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b08a      	sub	sp, #40	@ 0x28
 8009e6c:	af02      	add	r7, sp, #8
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	603b      	str	r3, [r7, #0]
 8009e74:	4613      	mov	r3, r2
 8009e76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e7c:	2b20      	cmp	r3, #32
 8009e7e:	d177      	bne.n	8009f70 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d002      	beq.n	8009e8c <HAL_UART_Transmit+0x24>
 8009e86:	88fb      	ldrh	r3, [r7, #6]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d101      	bne.n	8009e90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e070      	b.n	8009f72 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2221      	movs	r2, #33	@ 0x21
 8009e9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e9e:	f7f8 f9d7 	bl	8002250 <HAL_GetTick>
 8009ea2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	88fa      	ldrh	r2, [r7, #6]
 8009ea8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	88fa      	ldrh	r2, [r7, #6]
 8009eb0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ebc:	d108      	bne.n	8009ed0 <HAL_UART_Transmit+0x68>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d104      	bne.n	8009ed0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	61bb      	str	r3, [r7, #24]
 8009ece:	e003      	b.n	8009ed8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009ed8:	e02f      	b.n	8009f3a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	2180      	movs	r1, #128	@ 0x80
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f001 f80e 	bl	800af06 <UART_WaitOnFlagUntilTimeout>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d004      	beq.n	8009efa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2220      	movs	r2, #32
 8009ef4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e03b      	b.n	8009f72 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10b      	bne.n	8009f18 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	881b      	ldrh	r3, [r3, #0]
 8009f04:	461a      	mov	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	3302      	adds	r3, #2
 8009f14:	61bb      	str	r3, [r7, #24]
 8009f16:	e007      	b.n	8009f28 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	781a      	ldrb	r2, [r3, #0]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	3301      	adds	r3, #1
 8009f26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	3b01      	subs	r3, #1
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1c9      	bne.n	8009eda <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	2140      	movs	r1, #64	@ 0x40
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 ffd8 	bl	800af06 <UART_WaitOnFlagUntilTimeout>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d004      	beq.n	8009f66 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2220      	movs	r2, #32
 8009f60:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e005      	b.n	8009f72 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2220      	movs	r2, #32
 8009f6a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	e000      	b.n	8009f72 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009f70:	2302      	movs	r3, #2
  }
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3720      	adds	r7, #32
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
	...

08009f7c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08a      	sub	sp, #40	@ 0x28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	4613      	mov	r3, r2
 8009f88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f8e:	2b20      	cmp	r3, #32
 8009f90:	d165      	bne.n	800a05e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d002      	beq.n	8009f9e <HAL_UART_Transmit_DMA+0x22>
 8009f98:	88fb      	ldrh	r3, [r7, #6]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e05e      	b.n	800a060 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	88fa      	ldrh	r2, [r7, #6]
 8009fac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	88fa      	ldrh	r2, [r7, #6]
 8009fb4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2221      	movs	r2, #33	@ 0x21
 8009fc4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d027      	beq.n	800a01e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fd2:	4a25      	ldr	r2, [pc, #148]	@ (800a068 <HAL_UART_Transmit_DMA+0xec>)
 8009fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fda:	4a24      	ldr	r2, [pc, #144]	@ (800a06c <HAL_UART_Transmit_DMA+0xf0>)
 8009fdc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fe2:	4a23      	ldr	r2, [pc, #140]	@ (800a070 <HAL_UART_Transmit_DMA+0xf4>)
 8009fe4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fea:	2200      	movs	r2, #0
 8009fec:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	3328      	adds	r3, #40	@ 0x28
 8009ffe:	461a      	mov	r2, r3
 800a000:	88fb      	ldrh	r3, [r7, #6]
 800a002:	f7f8 fd7f 	bl	8002b04 <HAL_DMA_Start_IT>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d008      	beq.n	800a01e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2210      	movs	r2, #16
 800a010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2220      	movs	r2, #32
 800a018:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e020      	b.n	800a060 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2240      	movs	r2, #64	@ 0x40
 800a024:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3308      	adds	r3, #8
 800a02c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	e853 3f00 	ldrex	r3, [r3]
 800a034:	613b      	str	r3, [r7, #16]
   return(result);
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a03c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3308      	adds	r3, #8
 800a044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a046:	623a      	str	r2, [r7, #32]
 800a048:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04a:	69f9      	ldr	r1, [r7, #28]
 800a04c:	6a3a      	ldr	r2, [r7, #32]
 800a04e:	e841 2300 	strex	r3, r2, [r1]
 800a052:	61bb      	str	r3, [r7, #24]
   return(result);
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1e5      	bne.n	800a026 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	e000      	b.n	800a060 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800a05e:	2302      	movs	r3, #2
  }
}
 800a060:	4618      	mov	r0, r3
 800a062:	3728      	adds	r7, #40	@ 0x28
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	0800b235 	.word	0x0800b235
 800a06c:	0800b2cb 	.word	0x0800b2cb
 800a070:	0800b4b7 	.word	0x0800b4b7

0800a074 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08a      	sub	sp, #40	@ 0x28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	4613      	mov	r3, r2
 800a080:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a088:	2b20      	cmp	r3, #32
 800a08a:	d132      	bne.n	800a0f2 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <HAL_UART_Receive_DMA+0x24>
 800a092:	88fb      	ldrh	r3, [r7, #6]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d101      	bne.n	800a09c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e02b      	b.n	800a0f4 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d018      	beq.n	800a0e2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	e853 3f00 	ldrex	r3, [r3]
 800a0bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a0c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ce:	623b      	str	r3, [r7, #32]
 800a0d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d2:	69f9      	ldr	r1, [r7, #28]
 800a0d4:	6a3a      	ldr	r2, [r7, #32]
 800a0d6:	e841 2300 	strex	r3, r2, [r1]
 800a0da:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1e6      	bne.n	800a0b0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a0e2:	88fb      	ldrh	r3, [r7, #6]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	68b9      	ldr	r1, [r7, #8]
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 ff79 	bl	800afe0 <UART_Start_Receive_DMA>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	e000      	b.n	800a0f4 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a0f2:	2302      	movs	r3, #2
  }
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3728      	adds	r7, #40	@ 0x28
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b090      	sub	sp, #64	@ 0x40
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a108:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a110:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a11c:	2b80      	cmp	r3, #128	@ 0x80
 800a11e:	d139      	bne.n	800a194 <HAL_UART_DMAStop+0x98>
 800a120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a122:	2b21      	cmp	r3, #33	@ 0x21
 800a124:	d136      	bne.n	800a194 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3308      	adds	r3, #8
 800a12c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	e853 3f00 	ldrex	r3, [r3]
 800a134:	61fb      	str	r3, [r7, #28]
   return(result);
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a13c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3308      	adds	r3, #8
 800a144:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a146:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a148:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a14c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a14e:	e841 2300 	strex	r3, r2, [r1]
 800a152:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1e5      	bne.n	800a126 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d015      	beq.n	800a18e <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a166:	4618      	mov	r0, r3
 800a168:	f7f8 fd2c 	bl	8002bc4 <HAL_DMA_Abort>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00d      	beq.n	800a18e <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a176:	4618      	mov	r0, r3
 800a178:	f7f8 ff4e 	bl	8003018 <HAL_DMA_GetError>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b20      	cmp	r3, #32
 800a180:	d105      	bne.n	800a18e <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2210      	movs	r2, #16
 800a186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e044      	b.n	800a218 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 ffc6 	bl	800b120 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a19e:	2b40      	cmp	r3, #64	@ 0x40
 800a1a0:	d139      	bne.n	800a216 <HAL_UART_DMAStop+0x11a>
 800a1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a4:	2b22      	cmp	r3, #34	@ 0x22
 800a1a6:	d136      	bne.n	800a216 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	3308      	adds	r3, #8
 800a1ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	e853 3f00 	ldrex	r3, [r3]
 800a1b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1be:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1c8:	61ba      	str	r2, [r7, #24]
 800a1ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1cc:	6979      	ldr	r1, [r7, #20]
 800a1ce:	69ba      	ldr	r2, [r7, #24]
 800a1d0:	e841 2300 	strex	r3, r2, [r1]
 800a1d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e5      	bne.n	800a1a8 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d015      	beq.n	800a210 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7f8 fceb 	bl	8002bc4 <HAL_DMA_Abort>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00d      	beq.n	800a210 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7f8 ff0d 	bl	8003018 <HAL_DMA_GetError>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b20      	cmp	r3, #32
 800a202:	d105      	bne.n	800a210 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2210      	movs	r2, #16
 800a208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e003      	b.n	800a218 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 ffab 	bl	800b16c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3740      	adds	r7, #64	@ 0x40
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b0ba      	sub	sp, #232	@ 0xe8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a246:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a24a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a24e:	4013      	ands	r3, r2
 800a250:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d115      	bne.n	800a288 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a25c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a260:	f003 0320 	and.w	r3, r3, #32
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00f      	beq.n	800a288 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a26c:	f003 0320 	and.w	r3, r3, #32
 800a270:	2b00      	cmp	r3, #0
 800a272:	d009      	beq.n	800a288 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f000 82b1 	beq.w	800a7e0 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	4798      	blx	r3
      }
      return;
 800a286:	e2ab      	b.n	800a7e0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a288:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 8117 	beq.w	800a4c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a296:	f003 0301 	and.w	r3, r3, #1
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d106      	bne.n	800a2ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a29e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a2a2:	4b85      	ldr	r3, [pc, #532]	@ (800a4b8 <HAL_UART_IRQHandler+0x298>)
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f000 810a 	beq.w	800a4c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2b0:	f003 0301 	and.w	r3, r3, #1
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d011      	beq.n	800a2dc <HAL_UART_IRQHandler+0xbc>
 800a2b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00b      	beq.n	800a2dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2d2:	f043 0201 	orr.w	r2, r3, #1
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2e0:	f003 0302 	and.w	r3, r3, #2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d011      	beq.n	800a30c <HAL_UART_IRQHandler+0xec>
 800a2e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2ec:	f003 0301 	and.w	r3, r3, #1
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00b      	beq.n	800a30c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2202      	movs	r2, #2
 800a2fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a302:	f043 0204 	orr.w	r2, r3, #4
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a310:	f003 0304 	and.w	r3, r3, #4
 800a314:	2b00      	cmp	r3, #0
 800a316:	d011      	beq.n	800a33c <HAL_UART_IRQHandler+0x11c>
 800a318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00b      	beq.n	800a33c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2204      	movs	r2, #4
 800a32a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a332:	f043 0202 	orr.w	r2, r3, #2
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a340:	f003 0308 	and.w	r3, r3, #8
 800a344:	2b00      	cmp	r3, #0
 800a346:	d017      	beq.n	800a378 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a34c:	f003 0320 	and.w	r3, r3, #32
 800a350:	2b00      	cmp	r3, #0
 800a352:	d105      	bne.n	800a360 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a358:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00b      	beq.n	800a378 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2208      	movs	r2, #8
 800a366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a36e:	f043 0208 	orr.w	r2, r3, #8
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a37c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a380:	2b00      	cmp	r3, #0
 800a382:	d012      	beq.n	800a3aa <HAL_UART_IRQHandler+0x18a>
 800a384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a388:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00c      	beq.n	800a3aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3a0:	f043 0220 	orr.w	r2, r3, #32
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f000 8217 	beq.w	800a7e4 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a3b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3ba:	f003 0320 	and.w	r3, r3, #32
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00d      	beq.n	800a3de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a3c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3c6:	f003 0320 	and.w	r3, r3, #32
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d007      	beq.n	800a3de <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d003      	beq.n	800a3de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3f2:	2b40      	cmp	r3, #64	@ 0x40
 800a3f4:	d005      	beq.n	800a402 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a3f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a3fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d04f      	beq.n	800a4a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 feb2 	bl	800b16c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a412:	2b40      	cmp	r3, #64	@ 0x40
 800a414:	d141      	bne.n	800a49a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3308      	adds	r3, #8
 800a41c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a420:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a424:	e853 3f00 	ldrex	r3, [r3]
 800a428:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a42c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a434:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	3308      	adds	r3, #8
 800a43e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a442:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a446:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a44e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a452:	e841 2300 	strex	r3, r2, [r1]
 800a456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a45a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1d9      	bne.n	800a416 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a466:	2b00      	cmp	r3, #0
 800a468:	d013      	beq.n	800a492 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a46e:	4a13      	ldr	r2, [pc, #76]	@ (800a4bc <HAL_UART_IRQHandler+0x29c>)
 800a470:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a476:	4618      	mov	r0, r3
 800a478:	f7f8 fc14 	bl	8002ca4 <HAL_DMA_Abort_IT>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d017      	beq.n	800a4b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a48c:	4610      	mov	r0, r2
 800a48e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a490:	e00f      	b.n	800a4b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 f9c4 	bl	800a820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a498:	e00b      	b.n	800a4b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f9c0 	bl	800a820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4a0:	e007      	b.n	800a4b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f9bc 	bl	800a820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a4b0:	e198      	b.n	800a7e4 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4b2:	bf00      	nop
    return;
 800a4b4:	e196      	b.n	800a7e4 <HAL_UART_IRQHandler+0x5c4>
 800a4b6:	bf00      	nop
 800a4b8:	04000120 	.word	0x04000120
 800a4bc:	0800b535 	.word	0x0800b535

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	f040 8166 	bne.w	800a796 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a4ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ce:	f003 0310 	and.w	r3, r3, #16
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f000 815f 	beq.w	800a796 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a4d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4dc:	f003 0310 	and.w	r3, r3, #16
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f000 8158 	beq.w	800a796 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2210      	movs	r2, #16
 800a4ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4f8:	2b40      	cmp	r3, #64	@ 0x40
 800a4fa:	f040 80d0 	bne.w	800a69e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a50a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f000 80ab 	beq.w	800a66a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a51a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a51e:	429a      	cmp	r2, r3
 800a520:	f080 80a3 	bcs.w	800a66a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a52a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a532:	69db      	ldr	r3, [r3, #28]
 800a534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a538:	f000 8086 	beq.w	800a648 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a544:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a548:	e853 3f00 	ldrex	r3, [r3]
 800a54c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a550:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a558:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	461a      	mov	r2, r3
 800a562:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a566:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a56a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a572:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a576:	e841 2300 	strex	r3, r2, [r1]
 800a57a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a57e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1da      	bne.n	800a53c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	3308      	adds	r3, #8
 800a58c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a590:	e853 3f00 	ldrex	r3, [r3]
 800a594:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a596:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a598:	f023 0301 	bic.w	r3, r3, #1
 800a59c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3308      	adds	r3, #8
 800a5a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a5aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a5ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a5b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a5b6:	e841 2300 	strex	r3, r2, [r1]
 800a5ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a5bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1e1      	bne.n	800a586 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	3308      	adds	r3, #8
 800a5c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5cc:	e853 3f00 	ldrex	r3, [r3]
 800a5d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a5d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	3308      	adds	r3, #8
 800a5e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a5e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a5e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a5ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a5ee:	e841 2300 	strex	r3, r2, [r1]
 800a5f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a5f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1e3      	bne.n	800a5c2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2220      	movs	r2, #32
 800a5fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a610:	e853 3f00 	ldrex	r3, [r3]
 800a614:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a618:	f023 0310 	bic.w	r3, r3, #16
 800a61c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	461a      	mov	r2, r3
 800a626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a62a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a62c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a62e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a630:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a632:	e841 2300 	strex	r3, r2, [r1]
 800a636:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1e4      	bne.n	800a608 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a642:	4618      	mov	r0, r3
 800a644:	f7f8 fabe 	bl	8002bc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2202      	movs	r2, #2
 800a64c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	b29b      	uxth	r3, r3
 800a660:	4619      	mov	r1, r3
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f8e6 	bl	800a834 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a668:	e0be      	b.n	800a7e8 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a670:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a674:	429a      	cmp	r2, r3
 800a676:	f040 80b7 	bne.w	800a7e8 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a67e:	69db      	ldr	r3, [r3, #28]
 800a680:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a684:	f040 80b0 	bne.w	800a7e8 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a694:	4619      	mov	r1, r3
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 f8cc 	bl	800a834 <HAL_UARTEx_RxEventCallback>
      return;
 800a69c:	e0a4      	b.n	800a7e8 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 8096 	beq.w	800a7ec <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800a6c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f000 8091 	beq.w	800a7ec <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d2:	e853 3f00 	ldrex	r3, [r3]
 800a6d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6f4:	e841 2300 	strex	r3, r2, [r1]
 800a6f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1e4      	bne.n	800a6ca <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	3308      	adds	r3, #8
 800a706:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70a:	e853 3f00 	ldrex	r3, [r3]
 800a70e:	623b      	str	r3, [r7, #32]
   return(result);
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	f023 0301 	bic.w	r3, r3, #1
 800a716:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3308      	adds	r3, #8
 800a720:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a724:	633a      	str	r2, [r7, #48]	@ 0x30
 800a726:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a728:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a72a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a72c:	e841 2300 	strex	r3, r2, [r1]
 800a730:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1e3      	bne.n	800a700 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2220      	movs	r2, #32
 800a73c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	e853 3f00 	ldrex	r3, [r3]
 800a758:	60fb      	str	r3, [r7, #12]
   return(result);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f023 0310 	bic.w	r3, r3, #16
 800a760:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	461a      	mov	r2, r3
 800a76a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a76e:	61fb      	str	r3, [r7, #28]
 800a770:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a772:	69b9      	ldr	r1, [r7, #24]
 800a774:	69fa      	ldr	r2, [r7, #28]
 800a776:	e841 2300 	strex	r3, r2, [r1]
 800a77a:	617b      	str	r3, [r7, #20]
   return(result);
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1e4      	bne.n	800a74c <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2202      	movs	r2, #2
 800a786:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a78c:	4619      	mov	r1, r3
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 f850 	bl	800a834 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a794:	e02a      	b.n	800a7ec <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a79a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00e      	beq.n	800a7c0 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a7a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d008      	beq.n	800a7c0 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d01c      	beq.n	800a7f0 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	4798      	blx	r3
    }
    return;
 800a7be:	e017      	b.n	800a7f0 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a7c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d012      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x5d2>
 800a7cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00c      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 febd 	bl	800b558 <UART_EndTransmit_IT>
    return;
 800a7de:	e008      	b.n	800a7f2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800a7e0:	bf00      	nop
 800a7e2:	e006      	b.n	800a7f2 <HAL_UART_IRQHandler+0x5d2>
    return;
 800a7e4:	bf00      	nop
 800a7e6:	e004      	b.n	800a7f2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800a7e8:	bf00      	nop
 800a7ea:	e002      	b.n	800a7f2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800a7ec:	bf00      	nop
 800a7ee:	e000      	b.n	800a7f2 <HAL_UART_IRQHandler+0x5d2>
    return;
 800a7f0:	bf00      	nop
  }

}
 800a7f2:	37e8      	adds	r7, #232	@ 0xe8
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a828:	bf00      	nop
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b088      	sub	sp, #32
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a854:	2300      	movs	r3, #0
 800a856:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	689a      	ldr	r2, [r3, #8]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	431a      	orrs	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	431a      	orrs	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	69db      	ldr	r3, [r3, #28]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	4ba6      	ldr	r3, [pc, #664]	@ (800ab10 <UART_SetConfig+0x2c4>)
 800a878:	4013      	ands	r3, r2
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	6812      	ldr	r2, [r2, #0]
 800a87e:	6979      	ldr	r1, [r7, #20]
 800a880:	430b      	orrs	r3, r1
 800a882:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68da      	ldr	r2, [r3, #12]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	430a      	orrs	r2, r1
 800a898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a1b      	ldr	r3, [r3, #32]
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	430a      	orrs	r2, r1
 800a8bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a94      	ldr	r2, [pc, #592]	@ (800ab14 <UART_SetConfig+0x2c8>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d120      	bne.n	800a90a <UART_SetConfig+0xbe>
 800a8c8:	4b93      	ldr	r3, [pc, #588]	@ (800ab18 <UART_SetConfig+0x2cc>)
 800a8ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ce:	f003 0303 	and.w	r3, r3, #3
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d816      	bhi.n	800a904 <UART_SetConfig+0xb8>
 800a8d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a8dc <UART_SetConfig+0x90>)
 800a8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8dc:	0800a8ed 	.word	0x0800a8ed
 800a8e0:	0800a8f9 	.word	0x0800a8f9
 800a8e4:	0800a8f3 	.word	0x0800a8f3
 800a8e8:	0800a8ff 	.word	0x0800a8ff
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	77fb      	strb	r3, [r7, #31]
 800a8f0:	e150      	b.n	800ab94 <UART_SetConfig+0x348>
 800a8f2:	2302      	movs	r3, #2
 800a8f4:	77fb      	strb	r3, [r7, #31]
 800a8f6:	e14d      	b.n	800ab94 <UART_SetConfig+0x348>
 800a8f8:	2304      	movs	r3, #4
 800a8fa:	77fb      	strb	r3, [r7, #31]
 800a8fc:	e14a      	b.n	800ab94 <UART_SetConfig+0x348>
 800a8fe:	2308      	movs	r3, #8
 800a900:	77fb      	strb	r3, [r7, #31]
 800a902:	e147      	b.n	800ab94 <UART_SetConfig+0x348>
 800a904:	2310      	movs	r3, #16
 800a906:	77fb      	strb	r3, [r7, #31]
 800a908:	e144      	b.n	800ab94 <UART_SetConfig+0x348>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a83      	ldr	r2, [pc, #524]	@ (800ab1c <UART_SetConfig+0x2d0>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d132      	bne.n	800a97a <UART_SetConfig+0x12e>
 800a914:	4b80      	ldr	r3, [pc, #512]	@ (800ab18 <UART_SetConfig+0x2cc>)
 800a916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a91a:	f003 030c 	and.w	r3, r3, #12
 800a91e:	2b0c      	cmp	r3, #12
 800a920:	d828      	bhi.n	800a974 <UART_SetConfig+0x128>
 800a922:	a201      	add	r2, pc, #4	@ (adr r2, 800a928 <UART_SetConfig+0xdc>)
 800a924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a928:	0800a95d 	.word	0x0800a95d
 800a92c:	0800a975 	.word	0x0800a975
 800a930:	0800a975 	.word	0x0800a975
 800a934:	0800a975 	.word	0x0800a975
 800a938:	0800a969 	.word	0x0800a969
 800a93c:	0800a975 	.word	0x0800a975
 800a940:	0800a975 	.word	0x0800a975
 800a944:	0800a975 	.word	0x0800a975
 800a948:	0800a963 	.word	0x0800a963
 800a94c:	0800a975 	.word	0x0800a975
 800a950:	0800a975 	.word	0x0800a975
 800a954:	0800a975 	.word	0x0800a975
 800a958:	0800a96f 	.word	0x0800a96f
 800a95c:	2300      	movs	r3, #0
 800a95e:	77fb      	strb	r3, [r7, #31]
 800a960:	e118      	b.n	800ab94 <UART_SetConfig+0x348>
 800a962:	2302      	movs	r3, #2
 800a964:	77fb      	strb	r3, [r7, #31]
 800a966:	e115      	b.n	800ab94 <UART_SetConfig+0x348>
 800a968:	2304      	movs	r3, #4
 800a96a:	77fb      	strb	r3, [r7, #31]
 800a96c:	e112      	b.n	800ab94 <UART_SetConfig+0x348>
 800a96e:	2308      	movs	r3, #8
 800a970:	77fb      	strb	r3, [r7, #31]
 800a972:	e10f      	b.n	800ab94 <UART_SetConfig+0x348>
 800a974:	2310      	movs	r3, #16
 800a976:	77fb      	strb	r3, [r7, #31]
 800a978:	e10c      	b.n	800ab94 <UART_SetConfig+0x348>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a68      	ldr	r2, [pc, #416]	@ (800ab20 <UART_SetConfig+0x2d4>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d120      	bne.n	800a9c6 <UART_SetConfig+0x17a>
 800a984:	4b64      	ldr	r3, [pc, #400]	@ (800ab18 <UART_SetConfig+0x2cc>)
 800a986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a98a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a98e:	2b30      	cmp	r3, #48	@ 0x30
 800a990:	d013      	beq.n	800a9ba <UART_SetConfig+0x16e>
 800a992:	2b30      	cmp	r3, #48	@ 0x30
 800a994:	d814      	bhi.n	800a9c0 <UART_SetConfig+0x174>
 800a996:	2b20      	cmp	r3, #32
 800a998:	d009      	beq.n	800a9ae <UART_SetConfig+0x162>
 800a99a:	2b20      	cmp	r3, #32
 800a99c:	d810      	bhi.n	800a9c0 <UART_SetConfig+0x174>
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d002      	beq.n	800a9a8 <UART_SetConfig+0x15c>
 800a9a2:	2b10      	cmp	r3, #16
 800a9a4:	d006      	beq.n	800a9b4 <UART_SetConfig+0x168>
 800a9a6:	e00b      	b.n	800a9c0 <UART_SetConfig+0x174>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	77fb      	strb	r3, [r7, #31]
 800a9ac:	e0f2      	b.n	800ab94 <UART_SetConfig+0x348>
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	77fb      	strb	r3, [r7, #31]
 800a9b2:	e0ef      	b.n	800ab94 <UART_SetConfig+0x348>
 800a9b4:	2304      	movs	r3, #4
 800a9b6:	77fb      	strb	r3, [r7, #31]
 800a9b8:	e0ec      	b.n	800ab94 <UART_SetConfig+0x348>
 800a9ba:	2308      	movs	r3, #8
 800a9bc:	77fb      	strb	r3, [r7, #31]
 800a9be:	e0e9      	b.n	800ab94 <UART_SetConfig+0x348>
 800a9c0:	2310      	movs	r3, #16
 800a9c2:	77fb      	strb	r3, [r7, #31]
 800a9c4:	e0e6      	b.n	800ab94 <UART_SetConfig+0x348>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a56      	ldr	r2, [pc, #344]	@ (800ab24 <UART_SetConfig+0x2d8>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d120      	bne.n	800aa12 <UART_SetConfig+0x1c6>
 800a9d0:	4b51      	ldr	r3, [pc, #324]	@ (800ab18 <UART_SetConfig+0x2cc>)
 800a9d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a9da:	2bc0      	cmp	r3, #192	@ 0xc0
 800a9dc:	d013      	beq.n	800aa06 <UART_SetConfig+0x1ba>
 800a9de:	2bc0      	cmp	r3, #192	@ 0xc0
 800a9e0:	d814      	bhi.n	800aa0c <UART_SetConfig+0x1c0>
 800a9e2:	2b80      	cmp	r3, #128	@ 0x80
 800a9e4:	d009      	beq.n	800a9fa <UART_SetConfig+0x1ae>
 800a9e6:	2b80      	cmp	r3, #128	@ 0x80
 800a9e8:	d810      	bhi.n	800aa0c <UART_SetConfig+0x1c0>
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d002      	beq.n	800a9f4 <UART_SetConfig+0x1a8>
 800a9ee:	2b40      	cmp	r3, #64	@ 0x40
 800a9f0:	d006      	beq.n	800aa00 <UART_SetConfig+0x1b4>
 800a9f2:	e00b      	b.n	800aa0c <UART_SetConfig+0x1c0>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	77fb      	strb	r3, [r7, #31]
 800a9f8:	e0cc      	b.n	800ab94 <UART_SetConfig+0x348>
 800a9fa:	2302      	movs	r3, #2
 800a9fc:	77fb      	strb	r3, [r7, #31]
 800a9fe:	e0c9      	b.n	800ab94 <UART_SetConfig+0x348>
 800aa00:	2304      	movs	r3, #4
 800aa02:	77fb      	strb	r3, [r7, #31]
 800aa04:	e0c6      	b.n	800ab94 <UART_SetConfig+0x348>
 800aa06:	2308      	movs	r3, #8
 800aa08:	77fb      	strb	r3, [r7, #31]
 800aa0a:	e0c3      	b.n	800ab94 <UART_SetConfig+0x348>
 800aa0c:	2310      	movs	r3, #16
 800aa0e:	77fb      	strb	r3, [r7, #31]
 800aa10:	e0c0      	b.n	800ab94 <UART_SetConfig+0x348>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a44      	ldr	r2, [pc, #272]	@ (800ab28 <UART_SetConfig+0x2dc>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d125      	bne.n	800aa68 <UART_SetConfig+0x21c>
 800aa1c:	4b3e      	ldr	r3, [pc, #248]	@ (800ab18 <UART_SetConfig+0x2cc>)
 800aa1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa2a:	d017      	beq.n	800aa5c <UART_SetConfig+0x210>
 800aa2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa30:	d817      	bhi.n	800aa62 <UART_SetConfig+0x216>
 800aa32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa36:	d00b      	beq.n	800aa50 <UART_SetConfig+0x204>
 800aa38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa3c:	d811      	bhi.n	800aa62 <UART_SetConfig+0x216>
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <UART_SetConfig+0x1fe>
 800aa42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa46:	d006      	beq.n	800aa56 <UART_SetConfig+0x20a>
 800aa48:	e00b      	b.n	800aa62 <UART_SetConfig+0x216>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	77fb      	strb	r3, [r7, #31]
 800aa4e:	e0a1      	b.n	800ab94 <UART_SetConfig+0x348>
 800aa50:	2302      	movs	r3, #2
 800aa52:	77fb      	strb	r3, [r7, #31]
 800aa54:	e09e      	b.n	800ab94 <UART_SetConfig+0x348>
 800aa56:	2304      	movs	r3, #4
 800aa58:	77fb      	strb	r3, [r7, #31]
 800aa5a:	e09b      	b.n	800ab94 <UART_SetConfig+0x348>
 800aa5c:	2308      	movs	r3, #8
 800aa5e:	77fb      	strb	r3, [r7, #31]
 800aa60:	e098      	b.n	800ab94 <UART_SetConfig+0x348>
 800aa62:	2310      	movs	r3, #16
 800aa64:	77fb      	strb	r3, [r7, #31]
 800aa66:	e095      	b.n	800ab94 <UART_SetConfig+0x348>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a2f      	ldr	r2, [pc, #188]	@ (800ab2c <UART_SetConfig+0x2e0>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d125      	bne.n	800aabe <UART_SetConfig+0x272>
 800aa72:	4b29      	ldr	r3, [pc, #164]	@ (800ab18 <UART_SetConfig+0x2cc>)
 800aa74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800aa7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa80:	d017      	beq.n	800aab2 <UART_SetConfig+0x266>
 800aa82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa86:	d817      	bhi.n	800aab8 <UART_SetConfig+0x26c>
 800aa88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa8c:	d00b      	beq.n	800aaa6 <UART_SetConfig+0x25a>
 800aa8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa92:	d811      	bhi.n	800aab8 <UART_SetConfig+0x26c>
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d003      	beq.n	800aaa0 <UART_SetConfig+0x254>
 800aa98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa9c:	d006      	beq.n	800aaac <UART_SetConfig+0x260>
 800aa9e:	e00b      	b.n	800aab8 <UART_SetConfig+0x26c>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	77fb      	strb	r3, [r7, #31]
 800aaa4:	e076      	b.n	800ab94 <UART_SetConfig+0x348>
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	77fb      	strb	r3, [r7, #31]
 800aaaa:	e073      	b.n	800ab94 <UART_SetConfig+0x348>
 800aaac:	2304      	movs	r3, #4
 800aaae:	77fb      	strb	r3, [r7, #31]
 800aab0:	e070      	b.n	800ab94 <UART_SetConfig+0x348>
 800aab2:	2308      	movs	r3, #8
 800aab4:	77fb      	strb	r3, [r7, #31]
 800aab6:	e06d      	b.n	800ab94 <UART_SetConfig+0x348>
 800aab8:	2310      	movs	r3, #16
 800aaba:	77fb      	strb	r3, [r7, #31]
 800aabc:	e06a      	b.n	800ab94 <UART_SetConfig+0x348>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a1b      	ldr	r2, [pc, #108]	@ (800ab30 <UART_SetConfig+0x2e4>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d138      	bne.n	800ab3a <UART_SetConfig+0x2ee>
 800aac8:	4b13      	ldr	r3, [pc, #76]	@ (800ab18 <UART_SetConfig+0x2cc>)
 800aaca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aace:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800aad2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aad6:	d017      	beq.n	800ab08 <UART_SetConfig+0x2bc>
 800aad8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aadc:	d82a      	bhi.n	800ab34 <UART_SetConfig+0x2e8>
 800aade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aae2:	d00b      	beq.n	800aafc <UART_SetConfig+0x2b0>
 800aae4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aae8:	d824      	bhi.n	800ab34 <UART_SetConfig+0x2e8>
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <UART_SetConfig+0x2aa>
 800aaee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aaf2:	d006      	beq.n	800ab02 <UART_SetConfig+0x2b6>
 800aaf4:	e01e      	b.n	800ab34 <UART_SetConfig+0x2e8>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	77fb      	strb	r3, [r7, #31]
 800aafa:	e04b      	b.n	800ab94 <UART_SetConfig+0x348>
 800aafc:	2302      	movs	r3, #2
 800aafe:	77fb      	strb	r3, [r7, #31]
 800ab00:	e048      	b.n	800ab94 <UART_SetConfig+0x348>
 800ab02:	2304      	movs	r3, #4
 800ab04:	77fb      	strb	r3, [r7, #31]
 800ab06:	e045      	b.n	800ab94 <UART_SetConfig+0x348>
 800ab08:	2308      	movs	r3, #8
 800ab0a:	77fb      	strb	r3, [r7, #31]
 800ab0c:	e042      	b.n	800ab94 <UART_SetConfig+0x348>
 800ab0e:	bf00      	nop
 800ab10:	efff69f3 	.word	0xefff69f3
 800ab14:	40011000 	.word	0x40011000
 800ab18:	40023800 	.word	0x40023800
 800ab1c:	40004400 	.word	0x40004400
 800ab20:	40004800 	.word	0x40004800
 800ab24:	40004c00 	.word	0x40004c00
 800ab28:	40005000 	.word	0x40005000
 800ab2c:	40011400 	.word	0x40011400
 800ab30:	40007800 	.word	0x40007800
 800ab34:	2310      	movs	r3, #16
 800ab36:	77fb      	strb	r3, [r7, #31]
 800ab38:	e02c      	b.n	800ab94 <UART_SetConfig+0x348>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a72      	ldr	r2, [pc, #456]	@ (800ad08 <UART_SetConfig+0x4bc>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d125      	bne.n	800ab90 <UART_SetConfig+0x344>
 800ab44:	4b71      	ldr	r3, [pc, #452]	@ (800ad0c <UART_SetConfig+0x4c0>)
 800ab46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab4a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ab4e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ab52:	d017      	beq.n	800ab84 <UART_SetConfig+0x338>
 800ab54:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ab58:	d817      	bhi.n	800ab8a <UART_SetConfig+0x33e>
 800ab5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab5e:	d00b      	beq.n	800ab78 <UART_SetConfig+0x32c>
 800ab60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab64:	d811      	bhi.n	800ab8a <UART_SetConfig+0x33e>
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d003      	beq.n	800ab72 <UART_SetConfig+0x326>
 800ab6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab6e:	d006      	beq.n	800ab7e <UART_SetConfig+0x332>
 800ab70:	e00b      	b.n	800ab8a <UART_SetConfig+0x33e>
 800ab72:	2300      	movs	r3, #0
 800ab74:	77fb      	strb	r3, [r7, #31]
 800ab76:	e00d      	b.n	800ab94 <UART_SetConfig+0x348>
 800ab78:	2302      	movs	r3, #2
 800ab7a:	77fb      	strb	r3, [r7, #31]
 800ab7c:	e00a      	b.n	800ab94 <UART_SetConfig+0x348>
 800ab7e:	2304      	movs	r3, #4
 800ab80:	77fb      	strb	r3, [r7, #31]
 800ab82:	e007      	b.n	800ab94 <UART_SetConfig+0x348>
 800ab84:	2308      	movs	r3, #8
 800ab86:	77fb      	strb	r3, [r7, #31]
 800ab88:	e004      	b.n	800ab94 <UART_SetConfig+0x348>
 800ab8a:	2310      	movs	r3, #16
 800ab8c:	77fb      	strb	r3, [r7, #31]
 800ab8e:	e001      	b.n	800ab94 <UART_SetConfig+0x348>
 800ab90:	2310      	movs	r3, #16
 800ab92:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	69db      	ldr	r3, [r3, #28]
 800ab98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab9c:	d15b      	bne.n	800ac56 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ab9e:	7ffb      	ldrb	r3, [r7, #31]
 800aba0:	2b08      	cmp	r3, #8
 800aba2:	d828      	bhi.n	800abf6 <UART_SetConfig+0x3aa>
 800aba4:	a201      	add	r2, pc, #4	@ (adr r2, 800abac <UART_SetConfig+0x360>)
 800aba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abaa:	bf00      	nop
 800abac:	0800abd1 	.word	0x0800abd1
 800abb0:	0800abd9 	.word	0x0800abd9
 800abb4:	0800abe1 	.word	0x0800abe1
 800abb8:	0800abf7 	.word	0x0800abf7
 800abbc:	0800abe7 	.word	0x0800abe7
 800abc0:	0800abf7 	.word	0x0800abf7
 800abc4:	0800abf7 	.word	0x0800abf7
 800abc8:	0800abf7 	.word	0x0800abf7
 800abcc:	0800abef 	.word	0x0800abef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abd0:	f7fc fe90 	bl	80078f4 <HAL_RCC_GetPCLK1Freq>
 800abd4:	61b8      	str	r0, [r7, #24]
        break;
 800abd6:	e013      	b.n	800ac00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abd8:	f7fc fea0 	bl	800791c <HAL_RCC_GetPCLK2Freq>
 800abdc:	61b8      	str	r0, [r7, #24]
        break;
 800abde:	e00f      	b.n	800ac00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abe0:	4b4b      	ldr	r3, [pc, #300]	@ (800ad10 <UART_SetConfig+0x4c4>)
 800abe2:	61bb      	str	r3, [r7, #24]
        break;
 800abe4:	e00c      	b.n	800ac00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abe6:	f7fc fd73 	bl	80076d0 <HAL_RCC_GetSysClockFreq>
 800abea:	61b8      	str	r0, [r7, #24]
        break;
 800abec:	e008      	b.n	800ac00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abf2:	61bb      	str	r3, [r7, #24]
        break;
 800abf4:	e004      	b.n	800ac00 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800abf6:	2300      	movs	r3, #0
 800abf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	77bb      	strb	r3, [r7, #30]
        break;
 800abfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d074      	beq.n	800acf0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	005a      	lsls	r2, r3, #1
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	085b      	lsrs	r3, r3, #1
 800ac10:	441a      	add	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	2b0f      	cmp	r3, #15
 800ac20:	d916      	bls.n	800ac50 <UART_SetConfig+0x404>
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac28:	d212      	bcs.n	800ac50 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	f023 030f 	bic.w	r3, r3, #15
 800ac32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	085b      	lsrs	r3, r3, #1
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	f003 0307 	and.w	r3, r3, #7
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	89fb      	ldrh	r3, [r7, #14]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	89fa      	ldrh	r2, [r7, #14]
 800ac4c:	60da      	str	r2, [r3, #12]
 800ac4e:	e04f      	b.n	800acf0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ac50:	2301      	movs	r3, #1
 800ac52:	77bb      	strb	r3, [r7, #30]
 800ac54:	e04c      	b.n	800acf0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac56:	7ffb      	ldrb	r3, [r7, #31]
 800ac58:	2b08      	cmp	r3, #8
 800ac5a:	d828      	bhi.n	800acae <UART_SetConfig+0x462>
 800ac5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ac64 <UART_SetConfig+0x418>)
 800ac5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac62:	bf00      	nop
 800ac64:	0800ac89 	.word	0x0800ac89
 800ac68:	0800ac91 	.word	0x0800ac91
 800ac6c:	0800ac99 	.word	0x0800ac99
 800ac70:	0800acaf 	.word	0x0800acaf
 800ac74:	0800ac9f 	.word	0x0800ac9f
 800ac78:	0800acaf 	.word	0x0800acaf
 800ac7c:	0800acaf 	.word	0x0800acaf
 800ac80:	0800acaf 	.word	0x0800acaf
 800ac84:	0800aca7 	.word	0x0800aca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac88:	f7fc fe34 	bl	80078f4 <HAL_RCC_GetPCLK1Freq>
 800ac8c:	61b8      	str	r0, [r7, #24]
        break;
 800ac8e:	e013      	b.n	800acb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac90:	f7fc fe44 	bl	800791c <HAL_RCC_GetPCLK2Freq>
 800ac94:	61b8      	str	r0, [r7, #24]
        break;
 800ac96:	e00f      	b.n	800acb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac98:	4b1d      	ldr	r3, [pc, #116]	@ (800ad10 <UART_SetConfig+0x4c4>)
 800ac9a:	61bb      	str	r3, [r7, #24]
        break;
 800ac9c:	e00c      	b.n	800acb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac9e:	f7fc fd17 	bl	80076d0 <HAL_RCC_GetSysClockFreq>
 800aca2:	61b8      	str	r0, [r7, #24]
        break;
 800aca4:	e008      	b.n	800acb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acaa:	61bb      	str	r3, [r7, #24]
        break;
 800acac:	e004      	b.n	800acb8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	77bb      	strb	r3, [r7, #30]
        break;
 800acb6:	bf00      	nop
    }

    if (pclk != 0U)
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d018      	beq.n	800acf0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	085a      	lsrs	r2, r3, #1
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	441a      	add	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	fbb2 f3f3 	udiv	r3, r2, r3
 800acd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	2b0f      	cmp	r3, #15
 800acd6:	d909      	bls.n	800acec <UART_SetConfig+0x4a0>
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acde:	d205      	bcs.n	800acec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	b29a      	uxth	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	60da      	str	r2, [r3, #12]
 800acea:	e001      	b.n	800acf0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800acfc:	7fbb      	ldrb	r3, [r7, #30]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3720      	adds	r7, #32
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	40007c00 	.word	0x40007c00
 800ad0c:	40023800 	.word	0x40023800
 800ad10:	00f42400 	.word	0x00f42400

0800ad14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad20:	f003 0308 	and.w	r3, r3, #8
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00a      	beq.n	800ad3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	430a      	orrs	r2, r1
 800ad3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00a      	beq.n	800ad60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	430a      	orrs	r2, r1
 800ad5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad64:	f003 0302 	and.w	r3, r3, #2
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00a      	beq.n	800ad82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad86:	f003 0304 	and.w	r3, r3, #4
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00a      	beq.n	800ada4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	430a      	orrs	r2, r1
 800ada2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada8:	f003 0310 	and.w	r3, r3, #16
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00a      	beq.n	800adc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	430a      	orrs	r2, r1
 800adc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adca:	f003 0320 	and.w	r3, r3, #32
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00a      	beq.n	800ade8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	430a      	orrs	r2, r1
 800ade6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d01a      	beq.n	800ae2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	430a      	orrs	r2, r1
 800ae08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae12:	d10a      	bne.n	800ae2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	430a      	orrs	r2, r1
 800ae28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00a      	beq.n	800ae4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	430a      	orrs	r2, r1
 800ae4a:	605a      	str	r2, [r3, #4]
  }
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b08c      	sub	sp, #48	@ 0x30
 800ae5c:	af02      	add	r7, sp, #8
 800ae5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae68:	f7f7 f9f2 	bl	8002250 <HAL_GetTick>
 800ae6c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 0308 	and.w	r3, r3, #8
 800ae78:	2b08      	cmp	r3, #8
 800ae7a:	d12e      	bne.n	800aeda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae80:	9300      	str	r3, [sp, #0]
 800ae82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae84:	2200      	movs	r2, #0
 800ae86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f83b 	bl	800af06 <UART_WaitOnFlagUntilTimeout>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d021      	beq.n	800aeda <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	e853 3f00 	ldrex	r3, [r3]
 800aea2:	60fb      	str	r3, [r7, #12]
   return(result);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aeaa:	623b      	str	r3, [r7, #32]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	61fb      	str	r3, [r7, #28]
 800aeb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb8:	69b9      	ldr	r1, [r7, #24]
 800aeba:	69fa      	ldr	r2, [r7, #28]
 800aebc:	e841 2300 	strex	r3, r2, [r1]
 800aec0:	617b      	str	r3, [r7, #20]
   return(result);
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1e6      	bne.n	800ae96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2220      	movs	r2, #32
 800aecc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aed6:	2303      	movs	r3, #3
 800aed8:	e011      	b.n	800aefe <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2220      	movs	r2, #32
 800aede:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2220      	movs	r2, #32
 800aee4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3728      	adds	r7, #40	@ 0x28
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b084      	sub	sp, #16
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	60f8      	str	r0, [r7, #12]
 800af0e:	60b9      	str	r1, [r7, #8]
 800af10:	603b      	str	r3, [r7, #0]
 800af12:	4613      	mov	r3, r2
 800af14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af16:	e04f      	b.n	800afb8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1e:	d04b      	beq.n	800afb8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af20:	f7f7 f996 	bl	8002250 <HAL_GetTick>
 800af24:	4602      	mov	r2, r0
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	69ba      	ldr	r2, [r7, #24]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d302      	bcc.n	800af36 <UART_WaitOnFlagUntilTimeout+0x30>
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d101      	bne.n	800af3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800af36:	2303      	movs	r3, #3
 800af38:	e04e      	b.n	800afd8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0304 	and.w	r3, r3, #4
 800af44:	2b00      	cmp	r3, #0
 800af46:	d037      	beq.n	800afb8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	2b80      	cmp	r3, #128	@ 0x80
 800af4c:	d034      	beq.n	800afb8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	2b40      	cmp	r3, #64	@ 0x40
 800af52:	d031      	beq.n	800afb8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	69db      	ldr	r3, [r3, #28]
 800af5a:	f003 0308 	and.w	r3, r3, #8
 800af5e:	2b08      	cmp	r3, #8
 800af60:	d110      	bne.n	800af84 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2208      	movs	r2, #8
 800af68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f000 f8fe 	bl	800b16c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2208      	movs	r2, #8
 800af74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	e029      	b.n	800afd8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	69db      	ldr	r3, [r3, #28]
 800af8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af92:	d111      	bne.n	800afb8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af9c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f000 f8e4 	bl	800b16c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2220      	movs	r2, #32
 800afa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800afb4:	2303      	movs	r3, #3
 800afb6:	e00f      	b.n	800afd8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	69da      	ldr	r2, [r3, #28]
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	4013      	ands	r3, r2
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	bf0c      	ite	eq
 800afc8:	2301      	moveq	r3, #1
 800afca:	2300      	movne	r3, #0
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	461a      	mov	r2, r3
 800afd0:	79fb      	ldrb	r3, [r7, #7]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d0a0      	beq.n	800af18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b096      	sub	sp, #88	@ 0x58
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	4613      	mov	r3, r2
 800afec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	88fa      	ldrh	r2, [r7, #6]
 800aff8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2222      	movs	r2, #34	@ 0x22
 800b008:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b010:	2b00      	cmp	r3, #0
 800b012:	d028      	beq.n	800b066 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b018:	4a3e      	ldr	r2, [pc, #248]	@ (800b114 <UART_Start_Receive_DMA+0x134>)
 800b01a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b020:	4a3d      	ldr	r2, [pc, #244]	@ (800b118 <UART_Start_Receive_DMA+0x138>)
 800b022:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b028:	4a3c      	ldr	r2, [pc, #240]	@ (800b11c <UART_Start_Receive_DMA+0x13c>)
 800b02a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b030:	2200      	movs	r2, #0
 800b032:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3324      	adds	r3, #36	@ 0x24
 800b03e:	4619      	mov	r1, r3
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b044:	461a      	mov	r2, r3
 800b046:	88fb      	ldrh	r3, [r7, #6]
 800b048:	f7f7 fd5c 	bl	8002b04 <HAL_DMA_Start_IT>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d009      	beq.n	800b066 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2210      	movs	r2, #16
 800b056:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2220      	movs	r2, #32
 800b05e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	e051      	b.n	800b10a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d018      	beq.n	800b0a0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b076:	e853 3f00 	ldrex	r3, [r3]
 800b07a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b07e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b082:	657b      	str	r3, [r7, #84]	@ 0x54
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	461a      	mov	r2, r3
 800b08a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b08c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b08e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b090:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b092:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b094:	e841 2300 	strex	r3, r2, [r1]
 800b098:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b09a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1e6      	bne.n	800b06e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	3308      	adds	r3, #8
 800b0a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0aa:	e853 3f00 	ldrex	r3, [r3]
 800b0ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b2:	f043 0301 	orr.w	r3, r3, #1
 800b0b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3308      	adds	r3, #8
 800b0be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b0c0:	637a      	str	r2, [r7, #52]	@ 0x34
 800b0c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b0c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0c8:	e841 2300 	strex	r3, r2, [r1]
 800b0cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1e5      	bne.n	800b0a0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3308      	adds	r3, #8
 800b0da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	e853 3f00 	ldrex	r3, [r3]
 800b0e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	3308      	adds	r3, #8
 800b0f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b0f4:	623a      	str	r2, [r7, #32]
 800b0f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f8:	69f9      	ldr	r1, [r7, #28]
 800b0fa:	6a3a      	ldr	r2, [r7, #32]
 800b0fc:	e841 2300 	strex	r3, r2, [r1]
 800b100:	61bb      	str	r3, [r7, #24]
   return(result);
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d1e5      	bne.n	800b0d4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3758      	adds	r7, #88	@ 0x58
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	0800b2e7 	.word	0x0800b2e7
 800b118:	0800b445 	.word	0x0800b445
 800b11c:	0800b4b7 	.word	0x0800b4b7

0800b120 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b120:	b480      	push	{r7}
 800b122:	b089      	sub	sp, #36	@ 0x24
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	e853 3f00 	ldrex	r3, [r3]
 800b134:	60bb      	str	r3, [r7, #8]
   return(result);
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b13c:	61fb      	str	r3, [r7, #28]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	461a      	mov	r2, r3
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	61bb      	str	r3, [r7, #24]
 800b148:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14a:	6979      	ldr	r1, [r7, #20]
 800b14c:	69ba      	ldr	r2, [r7, #24]
 800b14e:	e841 2300 	strex	r3, r2, [r1]
 800b152:	613b      	str	r3, [r7, #16]
   return(result);
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1e6      	bne.n	800b128 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2220      	movs	r2, #32
 800b15e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b160:	bf00      	nop
 800b162:	3724      	adds	r7, #36	@ 0x24
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b095      	sub	sp, #84	@ 0x54
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b17c:	e853 3f00 	ldrex	r3, [r3]
 800b180:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b184:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b188:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b192:	643b      	str	r3, [r7, #64]	@ 0x40
 800b194:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b196:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b198:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b19a:	e841 2300 	strex	r3, r2, [r1]
 800b19e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1e6      	bne.n	800b174 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	3308      	adds	r3, #8
 800b1ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	e853 3f00 	ldrex	r3, [r3]
 800b1b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	f023 0301 	bic.w	r3, r3, #1
 800b1bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3308      	adds	r3, #8
 800b1c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b1c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b1cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1ce:	e841 2300 	strex	r3, r2, [r1]
 800b1d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1e5      	bne.n	800b1a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d118      	bne.n	800b214 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	e853 3f00 	ldrex	r3, [r3]
 800b1ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	f023 0310 	bic.w	r3, r3, #16
 800b1f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b200:	61bb      	str	r3, [r7, #24]
 800b202:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b204:	6979      	ldr	r1, [r7, #20]
 800b206:	69ba      	ldr	r2, [r7, #24]
 800b208:	e841 2300 	strex	r3, r2, [r1]
 800b20c:	613b      	str	r3, [r7, #16]
   return(result);
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1e6      	bne.n	800b1e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2220      	movs	r2, #32
 800b218:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b228:	bf00      	nop
 800b22a:	3754      	adds	r7, #84	@ 0x54
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b090      	sub	sp, #64	@ 0x40
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b240:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	69db      	ldr	r3, [r3, #28]
 800b246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b24a:	d037      	beq.n	800b2bc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b24c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b24e:	2200      	movs	r2, #0
 800b250:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	3308      	adds	r3, #8
 800b25a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25e:	e853 3f00 	ldrex	r3, [r3]
 800b262:	623b      	str	r3, [r7, #32]
   return(result);
 800b264:	6a3b      	ldr	r3, [r7, #32]
 800b266:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b26a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b26c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3308      	adds	r3, #8
 800b272:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b274:	633a      	str	r2, [r7, #48]	@ 0x30
 800b276:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b278:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b27a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b27c:	e841 2300 	strex	r3, r2, [r1]
 800b280:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1e5      	bne.n	800b254 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	e853 3f00 	ldrex	r3, [r3]
 800b294:	60fb      	str	r3, [r7, #12]
   return(result);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b29c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b29e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a6:	61fb      	str	r3, [r7, #28]
 800b2a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2aa:	69b9      	ldr	r1, [r7, #24]
 800b2ac:	69fa      	ldr	r2, [r7, #28]
 800b2ae:	e841 2300 	strex	r3, r2, [r1]
 800b2b2:	617b      	str	r3, [r7, #20]
   return(result);
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1e6      	bne.n	800b288 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2ba:	e002      	b.n	800b2c2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b2bc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b2be:	f010 fe75 	bl	801bfac <HAL_UART_TxCpltCallback>
}
 800b2c2:	bf00      	nop
 800b2c4:	3740      	adds	r7, #64	@ 0x40
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b084      	sub	sp, #16
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f7ff fa8d 	bl	800a7f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2de:	bf00      	nop
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b09c      	sub	sp, #112	@ 0x70
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2f2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	69db      	ldr	r3, [r3, #28]
 800b2f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2fc:	d071      	beq.n	800b3e2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b2fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b300:	2200      	movs	r2, #0
 800b302:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b30e:	e853 3f00 	ldrex	r3, [r3]
 800b312:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b316:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b31a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b31c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	461a      	mov	r2, r3
 800b322:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b324:	657b      	str	r3, [r7, #84]	@ 0x54
 800b326:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b328:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b32a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b32c:	e841 2300 	strex	r3, r2, [r1]
 800b330:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1e6      	bne.n	800b306 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b338:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	3308      	adds	r3, #8
 800b33e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b342:	e853 3f00 	ldrex	r3, [r3]
 800b346:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34a:	f023 0301 	bic.w	r3, r3, #1
 800b34e:	667b      	str	r3, [r7, #100]	@ 0x64
 800b350:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	3308      	adds	r3, #8
 800b356:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b358:	643a      	str	r2, [r7, #64]	@ 0x40
 800b35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b35e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b360:	e841 2300 	strex	r3, r2, [r1]
 800b364:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1e5      	bne.n	800b338 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b36c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3308      	adds	r3, #8
 800b372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b374:	6a3b      	ldr	r3, [r7, #32]
 800b376:	e853 3f00 	ldrex	r3, [r3]
 800b37a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b382:	663b      	str	r3, [r7, #96]	@ 0x60
 800b384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3308      	adds	r3, #8
 800b38a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b38c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b38e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b390:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b394:	e841 2300 	strex	r3, r2, [r1]
 800b398:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1e5      	bne.n	800b36c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b3a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3a2:	2220      	movs	r2, #32
 800b3a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d118      	bne.n	800b3e2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	e853 3f00 	ldrex	r3, [r3]
 800b3bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	f023 0310 	bic.w	r3, r3, #16
 800b3c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b3c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3ce:	61bb      	str	r3, [r7, #24]
 800b3d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d2:	6979      	ldr	r1, [r7, #20]
 800b3d4:	69ba      	ldr	r2, [r7, #24]
 800b3d6:	e841 2300 	strex	r3, r2, [r1]
 800b3da:	613b      	str	r3, [r7, #16]
   return(result);
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1e6      	bne.n	800b3b0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d122      	bne.n	800b436 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800b3f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800b402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b404:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b408:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d204      	bcs.n	800b41a <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800b410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b412:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800b416:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b41a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b41c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b422:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b426:	b29b      	uxth	r3, r3
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	4619      	mov	r1, r3
 800b42e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b430:	f7ff fa00 	bl	800a834 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b434:	e002      	b.n	800b43c <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800b436:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b438:	f010 fde6 	bl	801c008 <HAL_UART_RxCpltCallback>
}
 800b43c:	bf00      	nop
 800b43e:	3770      	adds	r7, #112	@ 0x70
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b450:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2201      	movs	r2, #1
 800b456:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d123      	bne.n	800b4a8 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b466:	085b      	lsrs	r3, r3, #1
 800b468:	b29a      	uxth	r2, r3
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b47e:	897a      	ldrh	r2, [r7, #10]
 800b480:	429a      	cmp	r2, r3
 800b482:	d803      	bhi.n	800b48c <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	897a      	ldrh	r2, [r7, #10]
 800b488:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b498:	b29b      	uxth	r3, r3
 800b49a:	1ad3      	subs	r3, r2, r3
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	4619      	mov	r1, r3
 800b4a0:	68f8      	ldr	r0, [r7, #12]
 800b4a2:	f7ff f9c7 	bl	800a834 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4a6:	e002      	b.n	800b4ae <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f7ff f9af 	bl	800a80c <HAL_UART_RxHalfCpltCallback>
}
 800b4ae:	bf00      	nop
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b086      	sub	sp, #24
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4dc:	2b80      	cmp	r3, #128	@ 0x80
 800b4de:	d109      	bne.n	800b4f4 <UART_DMAError+0x3e>
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	2b21      	cmp	r3, #33	@ 0x21
 800b4e4:	d106      	bne.n	800b4f4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800b4ee:	6978      	ldr	r0, [r7, #20]
 800b4f0:	f7ff fe16 	bl	800b120 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4fe:	2b40      	cmp	r3, #64	@ 0x40
 800b500:	d109      	bne.n	800b516 <UART_DMAError+0x60>
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2b22      	cmp	r3, #34	@ 0x22
 800b506:	d106      	bne.n	800b516 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800b510:	6978      	ldr	r0, [r7, #20]
 800b512:	f7ff fe2b 	bl	800b16c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b51c:	f043 0210 	orr.w	r2, r3, #16
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b526:	6978      	ldr	r0, [r7, #20]
 800b528:	f7ff f97a 	bl	800a820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b52c:	bf00      	nop
 800b52e:	3718      	adds	r7, #24
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b540:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2200      	movs	r2, #0
 800b546:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f7ff f968 	bl	800a820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b550:	bf00      	nop
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b088      	sub	sp, #32
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	e853 3f00 	ldrex	r3, [r3]
 800b56c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b574:	61fb      	str	r3, [r7, #28]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	461a      	mov	r2, r3
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	61bb      	str	r3, [r7, #24]
 800b580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b582:	6979      	ldr	r1, [r7, #20]
 800b584:	69ba      	ldr	r2, [r7, #24]
 800b586:	e841 2300 	strex	r3, r2, [r1]
 800b58a:	613b      	str	r3, [r7, #16]
   return(result);
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1e6      	bne.n	800b560 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2220      	movs	r2, #32
 800b596:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f010 fd04 	bl	801bfac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5a4:	bf00      	nop
 800b5a6:	3720      	adds	r7, #32
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b5ac:	b084      	sub	sp, #16
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b084      	sub	sp, #16
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	f107 001c 	add.w	r0, r7, #28
 800b5ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b5be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d121      	bne.n	800b60a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	68da      	ldr	r2, [r3, #12]
 800b5d6:	4b21      	ldr	r3, [pc, #132]	@ (800b65c <USB_CoreInit+0xb0>)
 800b5d8:	4013      	ands	r3, r2
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b5ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d105      	bne.n	800b5fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fa92 	bl	800bb28 <USB_CoreReset>
 800b604:	4603      	mov	r3, r0
 800b606:	73fb      	strb	r3, [r7, #15]
 800b608:	e010      	b.n	800b62c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fa86 	bl	800bb28 <USB_CoreReset>
 800b61c:	4603      	mov	r3, r0
 800b61e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b624:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800b62c:	7fbb      	ldrb	r3, [r7, #30]
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d10b      	bne.n	800b64a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	f043 0206 	orr.w	r2, r3, #6
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	f043 0220 	orr.w	r2, r3, #32
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b656:	b004      	add	sp, #16
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	ffbdffbf 	.word	0xffbdffbf

0800b660 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	f023 0201 	bic.w	r2, r3, #1
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b084      	sub	sp, #16
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	460b      	mov	r3, r1
 800b68c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b68e:	2300      	movs	r3, #0
 800b690:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b69e:	78fb      	ldrb	r3, [r7, #3]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d115      	bne.n	800b6d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b6b0:	200a      	movs	r0, #10
 800b6b2:	f7f6 fdd9 	bl	8002268 <HAL_Delay>
      ms += 10U;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	330a      	adds	r3, #10
 800b6ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fa25 	bl	800bb0c <USB_GetMode>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d01e      	beq.n	800b706 <USB_SetCurrentMode+0x84>
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2bc7      	cmp	r3, #199	@ 0xc7
 800b6cc:	d9f0      	bls.n	800b6b0 <USB_SetCurrentMode+0x2e>
 800b6ce:	e01a      	b.n	800b706 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d115      	bne.n	800b702 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b6e2:	200a      	movs	r0, #10
 800b6e4:	f7f6 fdc0 	bl	8002268 <HAL_Delay>
      ms += 10U;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	330a      	adds	r3, #10
 800b6ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fa0c 	bl	800bb0c <USB_GetMode>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d005      	beq.n	800b706 <USB_SetCurrentMode+0x84>
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2bc7      	cmp	r3, #199	@ 0xc7
 800b6fe:	d9f0      	bls.n	800b6e2 <USB_SetCurrentMode+0x60>
 800b700:	e001      	b.n	800b706 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	e005      	b.n	800b712 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2bc8      	cmp	r3, #200	@ 0xc8
 800b70a:	d101      	bne.n	800b710 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b70c:	2301      	movs	r3, #1
 800b70e:	e000      	b.n	800b712 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
	...

0800b71c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b71c:	b084      	sub	sp, #16
 800b71e:	b580      	push	{r7, lr}
 800b720:	b086      	sub	sp, #24
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
 800b726:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b72a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b72e:	2300      	movs	r3, #0
 800b730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b736:	2300      	movs	r3, #0
 800b738:	613b      	str	r3, [r7, #16]
 800b73a:	e009      	b.n	800b750 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	3340      	adds	r3, #64	@ 0x40
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	4413      	add	r3, r2
 800b746:	2200      	movs	r2, #0
 800b748:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	3301      	adds	r3, #1
 800b74e:	613b      	str	r3, [r7, #16]
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	2b0e      	cmp	r3, #14
 800b754:	d9f2      	bls.n	800b73c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b756:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d11c      	bne.n	800b798 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b76c:	f043 0302 	orr.w	r3, r3, #2
 800b770:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b776:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	601a      	str	r2, [r3, #0]
 800b796:	e005      	b.n	800b7a4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b79c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b7b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d10d      	bne.n	800b7d4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d104      	bne.n	800b7ca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f968 	bl	800ba98 <USB_SetDevSpeed>
 800b7c8:	e008      	b.n	800b7dc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b7ca:	2101      	movs	r1, #1
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 f963 	bl	800ba98 <USB_SetDevSpeed>
 800b7d2:	e003      	b.n	800b7dc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b7d4:	2103      	movs	r1, #3
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 f95e 	bl	800ba98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b7dc:	2110      	movs	r1, #16
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 f8fa 	bl	800b9d8 <USB_FlushTxFifo>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f924 	bl	800ba3c <USB_FlushRxFifo>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d001      	beq.n	800b7fe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b804:	461a      	mov	r2, r3
 800b806:	2300      	movs	r3, #0
 800b808:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b810:	461a      	mov	r2, r3
 800b812:	2300      	movs	r3, #0
 800b814:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b81c:	461a      	mov	r2, r3
 800b81e:	2300      	movs	r3, #0
 800b820:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b822:	2300      	movs	r3, #0
 800b824:	613b      	str	r3, [r7, #16]
 800b826:	e043      	b.n	800b8b0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	015a      	lsls	r2, r3, #5
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	4413      	add	r3, r2
 800b830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b83a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b83e:	d118      	bne.n	800b872 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10a      	bne.n	800b85c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	015a      	lsls	r2, r3, #5
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	4413      	add	r3, r2
 800b84e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b852:	461a      	mov	r2, r3
 800b854:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b858:	6013      	str	r3, [r2, #0]
 800b85a:	e013      	b.n	800b884 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	015a      	lsls	r2, r3, #5
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	4413      	add	r3, r2
 800b864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b868:	461a      	mov	r2, r3
 800b86a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b86e:	6013      	str	r3, [r2, #0]
 800b870:	e008      	b.n	800b884 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	015a      	lsls	r2, r3, #5
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	4413      	add	r3, r2
 800b87a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b87e:	461a      	mov	r2, r3
 800b880:	2300      	movs	r3, #0
 800b882:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	015a      	lsls	r2, r3, #5
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	4413      	add	r3, r2
 800b88c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b890:	461a      	mov	r2, r3
 800b892:	2300      	movs	r3, #0
 800b894:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	015a      	lsls	r2, r3, #5
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	4413      	add	r3, r2
 800b89e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b8a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	613b      	str	r3, [r7, #16]
 800b8b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d3b5      	bcc.n	800b828 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8bc:	2300      	movs	r3, #0
 800b8be:	613b      	str	r3, [r7, #16]
 800b8c0:	e043      	b.n	800b94a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	015a      	lsls	r2, r3, #5
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b8d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8d8:	d118      	bne.n	800b90c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d10a      	bne.n	800b8f6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	015a      	lsls	r2, r3, #5
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b8f2:	6013      	str	r3, [r2, #0]
 800b8f4:	e013      	b.n	800b91e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	015a      	lsls	r2, r3, #5
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b902:	461a      	mov	r2, r3
 800b904:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b908:	6013      	str	r3, [r2, #0]
 800b90a:	e008      	b.n	800b91e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	015a      	lsls	r2, r3, #5
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	4413      	add	r3, r2
 800b914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b918:	461a      	mov	r2, r3
 800b91a:	2300      	movs	r3, #0
 800b91c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	015a      	lsls	r2, r3, #5
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	4413      	add	r3, r2
 800b926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b92a:	461a      	mov	r2, r3
 800b92c:	2300      	movs	r3, #0
 800b92e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	015a      	lsls	r2, r3, #5
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	4413      	add	r3, r2
 800b938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b93c:	461a      	mov	r2, r3
 800b93e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b942:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	3301      	adds	r3, #1
 800b948:	613b      	str	r3, [r7, #16]
 800b94a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b94e:	461a      	mov	r2, r3
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	4293      	cmp	r3, r2
 800b954:	d3b5      	bcc.n	800b8c2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b95c:	691b      	ldr	r3, [r3, #16]
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b968:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b976:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b978:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d105      	bne.n	800b98c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	f043 0210 	orr.w	r2, r3, #16
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	699a      	ldr	r2, [r3, #24]
 800b990:	4b0f      	ldr	r3, [pc, #60]	@ (800b9d0 <USB_DevInit+0x2b4>)
 800b992:	4313      	orrs	r3, r2
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b998:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d005      	beq.n	800b9ac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	f043 0208 	orr.w	r2, r3, #8
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b9ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d105      	bne.n	800b9c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	699a      	ldr	r2, [r3, #24]
 800b9b8:	4b06      	ldr	r3, [pc, #24]	@ (800b9d4 <USB_DevInit+0x2b8>)
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3718      	adds	r7, #24
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9cc:	b004      	add	sp, #16
 800b9ce:	4770      	bx	lr
 800b9d0:	803c3800 	.word	0x803c3800
 800b9d4:	40000004 	.word	0x40000004

0800b9d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b9f2:	d901      	bls.n	800b9f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b9f4:	2303      	movs	r3, #3
 800b9f6:	e01b      	b.n	800ba30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	daf2      	bge.n	800b9e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ba00:	2300      	movs	r3, #0
 800ba02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	019b      	lsls	r3, r3, #6
 800ba08:	f043 0220 	orr.w	r2, r3, #32
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	3301      	adds	r3, #1
 800ba14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ba1c:	d901      	bls.n	800ba22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ba1e:	2303      	movs	r3, #3
 800ba20:	e006      	b.n	800ba30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	f003 0320 	and.w	r3, r3, #32
 800ba2a:	2b20      	cmp	r3, #32
 800ba2c:	d0f0      	beq.n	800ba10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3714      	adds	r7, #20
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ba44:	2300      	movs	r3, #0
 800ba46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ba54:	d901      	bls.n	800ba5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ba56:	2303      	movs	r3, #3
 800ba58:	e018      	b.n	800ba8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	691b      	ldr	r3, [r3, #16]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	daf2      	bge.n	800ba48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ba62:	2300      	movs	r3, #0
 800ba64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2210      	movs	r2, #16
 800ba6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ba78:	d901      	bls.n	800ba7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ba7a:	2303      	movs	r3, #3
 800ba7c:	e006      	b.n	800ba8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	691b      	ldr	r3, [r3, #16]
 800ba82:	f003 0310 	and.w	r3, r3, #16
 800ba86:	2b10      	cmp	r3, #16
 800ba88:	d0f0      	beq.n	800ba6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3714      	adds	r7, #20
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	460b      	mov	r3, r1
 800baa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	78fb      	ldrb	r3, [r7, #3]
 800bab2:	68f9      	ldr	r1, [r7, #12]
 800bab4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bab8:	4313      	orrs	r3, r2
 800baba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800baca:	b480      	push	{r7}
 800bacc:	b085      	sub	sp, #20
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bae4:	f023 0303 	bic.w	r3, r3, #3
 800bae8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	68fa      	ldr	r2, [r7, #12]
 800baf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800baf8:	f043 0302 	orr.w	r3, r3, #2
 800bafc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3714      	adds	r7, #20
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	f003 0301 	and.w	r3, r3, #1
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb30:	2300      	movs	r3, #0
 800bb32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	3301      	adds	r3, #1
 800bb38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb40:	d901      	bls.n	800bb46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bb42:	2303      	movs	r3, #3
 800bb44:	e022      	b.n	800bb8c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	daf2      	bge.n	800bb34 <USB_CoreReset+0xc>

  count = 10U;
 800bb4e:	230a      	movs	r3, #10
 800bb50:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800bb52:	e002      	b.n	800bb5a <USB_CoreReset+0x32>
  {
    count--;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	3b01      	subs	r3, #1
 800bb58:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d1f9      	bne.n	800bb54 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	f043 0201 	orr.w	r2, r3, #1
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb78:	d901      	bls.n	800bb7e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	e006      	b.n	800bb8c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	f003 0301 	and.w	r3, r3, #1
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d0f0      	beq.n	800bb6c <USB_CoreReset+0x44>

  return HAL_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3714      	adds	r7, #20
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800bb9e:	4b96      	ldr	r3, [pc, #600]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bba0:	22c0      	movs	r2, #192	@ 0xc0
 800bba2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800bba4:	4b94      	ldr	r3, [pc, #592]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bba6:	22a8      	movs	r2, #168	@ 0xa8
 800bba8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800bbaa:	4b93      	ldr	r3, [pc, #588]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bbac:	2201      	movs	r2, #1
 800bbae:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 168;
 800bbb0:	4b91      	ldr	r3, [pc, #580]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bbb2:	22a8      	movs	r2, #168	@ 0xa8
 800bbb4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800bbb6:	4b91      	ldr	r3, [pc, #580]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bbb8:	22ff      	movs	r2, #255	@ 0xff
 800bbba:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800bbbc:	4b8f      	ldr	r3, [pc, #572]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bbbe:	22ff      	movs	r2, #255	@ 0xff
 800bbc0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800bbc2:	4b8e      	ldr	r3, [pc, #568]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bbc4:	22ff      	movs	r2, #255	@ 0xff
 800bbc6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800bbc8:	4b8c      	ldr	r3, [pc, #560]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bbca:	2200      	movs	r2, #0
 800bbcc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800bbce:	4b8c      	ldr	r3, [pc, #560]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800bbd4:	4b8a      	ldr	r3, [pc, #552]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800bbda:	4b89      	ldr	r3, [pc, #548]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800bbe0:	4b87      	ldr	r3, [pc, #540]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	2000      	movs	r0, #0
 800bbea:	f005 f86f 	bl	8010ccc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800bbee:	4b82      	ldr	r3, [pc, #520]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	061a      	lsls	r2, r3, #24
 800bbf4:	4b80      	ldr	r3, [pc, #512]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bbf6:	785b      	ldrb	r3, [r3, #1]
 800bbf8:	041b      	lsls	r3, r3, #16
 800bbfa:	431a      	orrs	r2, r3
 800bbfc:	4b7e      	ldr	r3, [pc, #504]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bbfe:	789b      	ldrb	r3, [r3, #2]
 800bc00:	021b      	lsls	r3, r3, #8
 800bc02:	4313      	orrs	r3, r2
 800bc04:	4a7c      	ldr	r2, [pc, #496]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bc06:	78d2      	ldrb	r2, [r2, #3]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	061a      	lsls	r2, r3, #24
 800bc0c:	4b7a      	ldr	r3, [pc, #488]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	0619      	lsls	r1, r3, #24
 800bc12:	4b79      	ldr	r3, [pc, #484]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bc14:	785b      	ldrb	r3, [r3, #1]
 800bc16:	041b      	lsls	r3, r3, #16
 800bc18:	4319      	orrs	r1, r3
 800bc1a:	4b77      	ldr	r3, [pc, #476]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bc1c:	789b      	ldrb	r3, [r3, #2]
 800bc1e:	021b      	lsls	r3, r3, #8
 800bc20:	430b      	orrs	r3, r1
 800bc22:	4975      	ldr	r1, [pc, #468]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bc24:	78c9      	ldrb	r1, [r1, #3]
 800bc26:	430b      	orrs	r3, r1
 800bc28:	021b      	lsls	r3, r3, #8
 800bc2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bc2e:	431a      	orrs	r2, r3
 800bc30:	4b71      	ldr	r3, [pc, #452]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	0619      	lsls	r1, r3, #24
 800bc36:	4b70      	ldr	r3, [pc, #448]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bc38:	785b      	ldrb	r3, [r3, #1]
 800bc3a:	041b      	lsls	r3, r3, #16
 800bc3c:	4319      	orrs	r1, r3
 800bc3e:	4b6e      	ldr	r3, [pc, #440]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bc40:	789b      	ldrb	r3, [r3, #2]
 800bc42:	021b      	lsls	r3, r3, #8
 800bc44:	430b      	orrs	r3, r1
 800bc46:	496c      	ldr	r1, [pc, #432]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bc48:	78c9      	ldrb	r1, [r1, #3]
 800bc4a:	430b      	orrs	r3, r1
 800bc4c:	0a1b      	lsrs	r3, r3, #8
 800bc4e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bc52:	431a      	orrs	r2, r3
 800bc54:	4b68      	ldr	r3, [pc, #416]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	0619      	lsls	r1, r3, #24
 800bc5a:	4b67      	ldr	r3, [pc, #412]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bc5c:	785b      	ldrb	r3, [r3, #1]
 800bc5e:	041b      	lsls	r3, r3, #16
 800bc60:	4319      	orrs	r1, r3
 800bc62:	4b65      	ldr	r3, [pc, #404]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bc64:	789b      	ldrb	r3, [r3, #2]
 800bc66:	021b      	lsls	r3, r3, #8
 800bc68:	430b      	orrs	r3, r1
 800bc6a:	4963      	ldr	r1, [pc, #396]	@ (800bdf8 <MX_LWIP_Init+0x260>)
 800bc6c:	78c9      	ldrb	r1, [r1, #3]
 800bc6e:	430b      	orrs	r3, r1
 800bc70:	0e1b      	lsrs	r3, r3, #24
 800bc72:	4313      	orrs	r3, r2
 800bc74:	4a63      	ldr	r2, [pc, #396]	@ (800be04 <MX_LWIP_Init+0x26c>)
 800bc76:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800bc78:	4b60      	ldr	r3, [pc, #384]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	061a      	lsls	r2, r3, #24
 800bc7e:	4b5f      	ldr	r3, [pc, #380]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bc80:	785b      	ldrb	r3, [r3, #1]
 800bc82:	041b      	lsls	r3, r3, #16
 800bc84:	431a      	orrs	r2, r3
 800bc86:	4b5d      	ldr	r3, [pc, #372]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bc88:	789b      	ldrb	r3, [r3, #2]
 800bc8a:	021b      	lsls	r3, r3, #8
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	4a5b      	ldr	r2, [pc, #364]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bc90:	78d2      	ldrb	r2, [r2, #3]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	061a      	lsls	r2, r3, #24
 800bc96:	4b59      	ldr	r3, [pc, #356]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	0619      	lsls	r1, r3, #24
 800bc9c:	4b57      	ldr	r3, [pc, #348]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bc9e:	785b      	ldrb	r3, [r3, #1]
 800bca0:	041b      	lsls	r3, r3, #16
 800bca2:	4319      	orrs	r1, r3
 800bca4:	4b55      	ldr	r3, [pc, #340]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bca6:	789b      	ldrb	r3, [r3, #2]
 800bca8:	021b      	lsls	r3, r3, #8
 800bcaa:	430b      	orrs	r3, r1
 800bcac:	4953      	ldr	r1, [pc, #332]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bcae:	78c9      	ldrb	r1, [r1, #3]
 800bcb0:	430b      	orrs	r3, r1
 800bcb2:	021b      	lsls	r3, r3, #8
 800bcb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bcb8:	431a      	orrs	r2, r3
 800bcba:	4b50      	ldr	r3, [pc, #320]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	0619      	lsls	r1, r3, #24
 800bcc0:	4b4e      	ldr	r3, [pc, #312]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bcc2:	785b      	ldrb	r3, [r3, #1]
 800bcc4:	041b      	lsls	r3, r3, #16
 800bcc6:	4319      	orrs	r1, r3
 800bcc8:	4b4c      	ldr	r3, [pc, #304]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bcca:	789b      	ldrb	r3, [r3, #2]
 800bccc:	021b      	lsls	r3, r3, #8
 800bcce:	430b      	orrs	r3, r1
 800bcd0:	494a      	ldr	r1, [pc, #296]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bcd2:	78c9      	ldrb	r1, [r1, #3]
 800bcd4:	430b      	orrs	r3, r1
 800bcd6:	0a1b      	lsrs	r3, r3, #8
 800bcd8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bcdc:	431a      	orrs	r2, r3
 800bcde:	4b47      	ldr	r3, [pc, #284]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	0619      	lsls	r1, r3, #24
 800bce4:	4b45      	ldr	r3, [pc, #276]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bce6:	785b      	ldrb	r3, [r3, #1]
 800bce8:	041b      	lsls	r3, r3, #16
 800bcea:	4319      	orrs	r1, r3
 800bcec:	4b43      	ldr	r3, [pc, #268]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bcee:	789b      	ldrb	r3, [r3, #2]
 800bcf0:	021b      	lsls	r3, r3, #8
 800bcf2:	430b      	orrs	r3, r1
 800bcf4:	4941      	ldr	r1, [pc, #260]	@ (800bdfc <MX_LWIP_Init+0x264>)
 800bcf6:	78c9      	ldrb	r1, [r1, #3]
 800bcf8:	430b      	orrs	r3, r1
 800bcfa:	0e1b      	lsrs	r3, r3, #24
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	4a42      	ldr	r2, [pc, #264]	@ (800be08 <MX_LWIP_Init+0x270>)
 800bd00:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800bd02:	4b3f      	ldr	r3, [pc, #252]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	061a      	lsls	r2, r3, #24
 800bd08:	4b3d      	ldr	r3, [pc, #244]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd0a:	785b      	ldrb	r3, [r3, #1]
 800bd0c:	041b      	lsls	r3, r3, #16
 800bd0e:	431a      	orrs	r2, r3
 800bd10:	4b3b      	ldr	r3, [pc, #236]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd12:	789b      	ldrb	r3, [r3, #2]
 800bd14:	021b      	lsls	r3, r3, #8
 800bd16:	4313      	orrs	r3, r2
 800bd18:	4a39      	ldr	r2, [pc, #228]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd1a:	78d2      	ldrb	r2, [r2, #3]
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	061a      	lsls	r2, r3, #24
 800bd20:	4b37      	ldr	r3, [pc, #220]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	0619      	lsls	r1, r3, #24
 800bd26:	4b36      	ldr	r3, [pc, #216]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd28:	785b      	ldrb	r3, [r3, #1]
 800bd2a:	041b      	lsls	r3, r3, #16
 800bd2c:	4319      	orrs	r1, r3
 800bd2e:	4b34      	ldr	r3, [pc, #208]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd30:	789b      	ldrb	r3, [r3, #2]
 800bd32:	021b      	lsls	r3, r3, #8
 800bd34:	430b      	orrs	r3, r1
 800bd36:	4932      	ldr	r1, [pc, #200]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd38:	78c9      	ldrb	r1, [r1, #3]
 800bd3a:	430b      	orrs	r3, r1
 800bd3c:	021b      	lsls	r3, r3, #8
 800bd3e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bd42:	431a      	orrs	r2, r3
 800bd44:	4b2e      	ldr	r3, [pc, #184]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	0619      	lsls	r1, r3, #24
 800bd4a:	4b2d      	ldr	r3, [pc, #180]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd4c:	785b      	ldrb	r3, [r3, #1]
 800bd4e:	041b      	lsls	r3, r3, #16
 800bd50:	4319      	orrs	r1, r3
 800bd52:	4b2b      	ldr	r3, [pc, #172]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd54:	789b      	ldrb	r3, [r3, #2]
 800bd56:	021b      	lsls	r3, r3, #8
 800bd58:	430b      	orrs	r3, r1
 800bd5a:	4929      	ldr	r1, [pc, #164]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd5c:	78c9      	ldrb	r1, [r1, #3]
 800bd5e:	430b      	orrs	r3, r1
 800bd60:	0a1b      	lsrs	r3, r3, #8
 800bd62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bd66:	431a      	orrs	r2, r3
 800bd68:	4b25      	ldr	r3, [pc, #148]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	0619      	lsls	r1, r3, #24
 800bd6e:	4b24      	ldr	r3, [pc, #144]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd70:	785b      	ldrb	r3, [r3, #1]
 800bd72:	041b      	lsls	r3, r3, #16
 800bd74:	4319      	orrs	r1, r3
 800bd76:	4b22      	ldr	r3, [pc, #136]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd78:	789b      	ldrb	r3, [r3, #2]
 800bd7a:	021b      	lsls	r3, r3, #8
 800bd7c:	430b      	orrs	r3, r1
 800bd7e:	4920      	ldr	r1, [pc, #128]	@ (800be00 <MX_LWIP_Init+0x268>)
 800bd80:	78c9      	ldrb	r1, [r1, #3]
 800bd82:	430b      	orrs	r3, r1
 800bd84:	0e1b      	lsrs	r3, r3, #24
 800bd86:	4313      	orrs	r3, r2
 800bd88:	4a20      	ldr	r2, [pc, #128]	@ (800be0c <MX_LWIP_Init+0x274>)
 800bd8a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bd8c:	4b20      	ldr	r3, [pc, #128]	@ (800be10 <MX_LWIP_Init+0x278>)
 800bd8e:	9302      	str	r3, [sp, #8]
 800bd90:	4b20      	ldr	r3, [pc, #128]	@ (800be14 <MX_LWIP_Init+0x27c>)
 800bd92:	9301      	str	r3, [sp, #4]
 800bd94:	2300      	movs	r3, #0
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	4b1c      	ldr	r3, [pc, #112]	@ (800be0c <MX_LWIP_Init+0x274>)
 800bd9a:	4a1b      	ldr	r2, [pc, #108]	@ (800be08 <MX_LWIP_Init+0x270>)
 800bd9c:	4919      	ldr	r1, [pc, #100]	@ (800be04 <MX_LWIP_Init+0x26c>)
 800bd9e:	481e      	ldr	r0, [pc, #120]	@ (800be18 <MX_LWIP_Init+0x280>)
 800bda0:	f005 fd5a 	bl	8011858 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bda4:	481c      	ldr	r0, [pc, #112]	@ (800be18 <MX_LWIP_Init+0x280>)
 800bda6:	f005 ff09 	bl	8011bbc <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800bdaa:	481b      	ldr	r0, [pc, #108]	@ (800be18 <MX_LWIP_Init+0x280>)
 800bdac:	f005 ff16 	bl	8011bdc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800bdb0:	491a      	ldr	r1, [pc, #104]	@ (800be1c <MX_LWIP_Init+0x284>)
 800bdb2:	4819      	ldr	r0, [pc, #100]	@ (800be18 <MX_LWIP_Init+0x280>)
 800bdb4:	f006 f814 	bl	8011de0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bdb8:	2224      	movs	r2, #36	@ 0x24
 800bdba:	2100      	movs	r1, #0
 800bdbc:	4818      	ldr	r0, [pc, #96]	@ (800be20 <MX_LWIP_Init+0x288>)
 800bdbe:	f010 fba9 	bl	801c514 <memset>
  attributes.name = "EthLink";
 800bdc2:	4b17      	ldr	r3, [pc, #92]	@ (800be20 <MX_LWIP_Init+0x288>)
 800bdc4:	4a17      	ldr	r2, [pc, #92]	@ (800be24 <MX_LWIP_Init+0x28c>)
 800bdc6:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bdc8:	4b15      	ldr	r3, [pc, #84]	@ (800be20 <MX_LWIP_Init+0x288>)
 800bdca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bdce:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800bdd0:	4b13      	ldr	r3, [pc, #76]	@ (800be20 <MX_LWIP_Init+0x288>)
 800bdd2:	2210      	movs	r2, #16
 800bdd4:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800bdd6:	4a12      	ldr	r2, [pc, #72]	@ (800be20 <MX_LWIP_Init+0x288>)
 800bdd8:	490f      	ldr	r1, [pc, #60]	@ (800be18 <MX_LWIP_Init+0x280>)
 800bdda:	4813      	ldr	r0, [pc, #76]	@ (800be28 <MX_LWIP_Init+0x290>)
 800bddc:	f000 fdda 	bl	800c994 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  printf("IP: %s\n", ipaddr_ntoa(&gnetif.ip_addr));
 800bde0:	4812      	ldr	r0, [pc, #72]	@ (800be2c <MX_LWIP_Init+0x294>)
 800bde2:	f00e f941 	bl	801a068 <ip4addr_ntoa>
 800bde6:	4603      	mov	r3, r0
 800bde8:	4619      	mov	r1, r3
 800bdea:	4811      	ldr	r0, [pc, #68]	@ (800be30 <MX_LWIP_Init+0x298>)
 800bdec:	f010 fa3a 	bl	801c264 <iprintf>
/* USER CODE END 3 */
}
 800bdf0:	bf00      	nop
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20000c40 	.word	0x20000c40
 800bdfc:	20000c44 	.word	0x20000c44
 800be00:	20000c48 	.word	0x20000c48
 800be04:	20000c34 	.word	0x20000c34
 800be08:	20000c38 	.word	0x20000c38
 800be0c:	20000c3c 	.word	0x20000c3c
 800be10:	08010c09 	.word	0x08010c09
 800be14:	0800c375 	.word	0x0800c375
 800be18:	20000c00 	.word	0x20000c00
 800be1c:	0800be35 	.word	0x0800be35
 800be20:	20000c4c 	.word	0x20000c4c
 800be24:	0801d470 	.word	0x0801d470
 800be28:	0800c64d 	.word	0x0800c64d
 800be2c:	20000c04 	.word	0x20000c04
 800be30:	0801d478 	.word	0x0801d478

0800be34 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800be48:	b480      	push	{r7}
 800be4a:	b087      	sub	sp, #28
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800be5a:	2320      	movs	r3, #32
 800be5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800be5e:	f3bf 8f4f 	dsb	sy
}
 800be62:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800be64:	e00b      	b.n	800be7e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800be66:	4a0d      	ldr	r2, [pc, #52]	@ (800be9c <SCB_InvalidateDCache_by_Addr+0x54>)
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	693a      	ldr	r2, [r7, #16]
 800be72:	4413      	add	r3, r2
 800be74:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	2b00      	cmp	r3, #0
 800be82:	dcf0      	bgt.n	800be66 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800be84:	f3bf 8f4f 	dsb	sy
}
 800be88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800be8a:	f3bf 8f6f 	isb	sy
}
 800be8e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800be90:	bf00      	nop
 800be92:	371c      	adds	r7, #28
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr
 800be9c:	e000ed00 	.word	0xe000ed00

0800bea0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800bea8:	4b04      	ldr	r3, [pc, #16]	@ (800bebc <HAL_ETH_RxCpltCallback+0x1c>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4618      	mov	r0, r3
 800beae:	f001 f88f 	bl	800cfd0 <osSemaphoreRelease>
}
 800beb2:	bf00      	nop
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	20009f7c 	.word	0x20009f7c

0800bec0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800bec8:	4b04      	ldr	r3, [pc, #16]	@ (800bedc <HAL_ETH_TxCpltCallback+0x1c>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4618      	mov	r0, r3
 800bece:	f001 f87f 	bl	800cfd0 <osSemaphoreRelease>
}
 800bed2:	bf00      	nop
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	20009f80 	.word	0x20009f80

0800bee0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7f7 ffca 	bl	8003e82 <HAL_ETH_GetDMAError>
 800beee:	4603      	mov	r3, r0
 800bef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bef4:	2b80      	cmp	r3, #128	@ 0x80
 800bef6:	d104      	bne.n	800bf02 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800bef8:	4b04      	ldr	r3, [pc, #16]	@ (800bf0c <HAL_ETH_ErrorCallback+0x2c>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4618      	mov	r0, r3
 800befe:	f001 f867 	bl	800cfd0 <osSemaphoreRelease>
  }
}
 800bf02:	bf00      	nop
 800bf04:	3708      	adds	r7, #8
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	20009f7c 	.word	0x20009f7c

0800bf10 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b0aa      	sub	sp, #168	@ 0xa8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800bf2a:	f107 0310 	add.w	r3, r7, #16
 800bf2e:	2264      	movs	r2, #100	@ 0x64
 800bf30:	2100      	movs	r1, #0
 800bf32:	4618      	mov	r0, r3
 800bf34:	f010 faee 	bl	801c514 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bf38:	4b89      	ldr	r3, [pc, #548]	@ (800c160 <low_level_init+0x250>)
 800bf3a:	4a8a      	ldr	r2, [pc, #552]	@ (800c164 <low_level_init+0x254>)
 800bf3c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800bf42:	2380      	movs	r3, #128	@ 0x80
 800bf44:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800bf46:	23e1      	movs	r3, #225	@ 0xe1
 800bf48:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800bf52:	2300      	movs	r3, #0
 800bf54:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800bf56:	4a82      	ldr	r2, [pc, #520]	@ (800c160 <low_level_init+0x250>)
 800bf58:	f107 0308 	add.w	r3, r7, #8
 800bf5c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800bf5e:	4b80      	ldr	r3, [pc, #512]	@ (800c160 <low_level_init+0x250>)
 800bf60:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800bf64:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800bf66:	4b7e      	ldr	r3, [pc, #504]	@ (800c160 <low_level_init+0x250>)
 800bf68:	4a7f      	ldr	r2, [pc, #508]	@ (800c168 <low_level_init+0x258>)
 800bf6a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800bf6c:	4b7c      	ldr	r3, [pc, #496]	@ (800c160 <low_level_init+0x250>)
 800bf6e:	4a7f      	ldr	r2, [pc, #508]	@ (800c16c <low_level_init+0x25c>)
 800bf70:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800bf72:	4b7b      	ldr	r3, [pc, #492]	@ (800c160 <low_level_init+0x250>)
 800bf74:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800bf78:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bf7a:	4879      	ldr	r0, [pc, #484]	@ (800c160 <low_level_init+0x250>)
 800bf7c:	f7f7 f938 	bl	80031f0 <HAL_ETH_Init>
 800bf80:	4603      	mov	r3, r0
 800bf82:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bf86:	2238      	movs	r2, #56	@ 0x38
 800bf88:	2100      	movs	r1, #0
 800bf8a:	4879      	ldr	r0, [pc, #484]	@ (800c170 <low_level_init+0x260>)
 800bf8c:	f010 fac2 	bl	801c514 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800bf90:	4b77      	ldr	r3, [pc, #476]	@ (800c170 <low_level_init+0x260>)
 800bf92:	2221      	movs	r2, #33	@ 0x21
 800bf94:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800bf96:	4b76      	ldr	r3, [pc, #472]	@ (800c170 <low_level_init+0x260>)
 800bf98:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800bf9c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bf9e:	4b74      	ldr	r3, [pc, #464]	@ (800c170 <low_level_init+0x260>)
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bfa4:	4873      	ldr	r0, [pc, #460]	@ (800c174 <low_level_init+0x264>)
 800bfa6:	f005 fb11 	bl	80115cc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2206      	movs	r2, #6
 800bfae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bfb2:	4b6b      	ldr	r3, [pc, #428]	@ (800c160 <low_level_init+0x250>)
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	781a      	ldrb	r2, [r3, #0]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bfbe:	4b68      	ldr	r3, [pc, #416]	@ (800c160 <low_level_init+0x250>)
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	785a      	ldrb	r2, [r3, #1]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bfca:	4b65      	ldr	r3, [pc, #404]	@ (800c160 <low_level_init+0x250>)
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	789a      	ldrb	r2, [r3, #2]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bfd6:	4b62      	ldr	r3, [pc, #392]	@ (800c160 <low_level_init+0x250>)
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	78da      	ldrb	r2, [r3, #3]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bfe2:	4b5f      	ldr	r3, [pc, #380]	@ (800c160 <low_level_init+0x250>)
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	791a      	ldrb	r2, [r3, #4]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bfee:	4b5c      	ldr	r3, [pc, #368]	@ (800c160 <low_level_init+0x250>)
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	795a      	ldrb	r2, [r3, #5]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c000:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c008:	f043 030a 	orr.w	r3, r3, #10
 800c00c:	b2da      	uxtb	r2, r3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c014:	2200      	movs	r2, #0
 800c016:	2100      	movs	r1, #0
 800c018:	2001      	movs	r0, #1
 800c01a:	f000 fed7 	bl	800cdcc <osSemaphoreNew>
 800c01e:	4603      	mov	r3, r0
 800c020:	4a55      	ldr	r2, [pc, #340]	@ (800c178 <low_level_init+0x268>)
 800c022:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c024:	2200      	movs	r2, #0
 800c026:	2100      	movs	r1, #0
 800c028:	2001      	movs	r0, #1
 800c02a:	f000 fecf 	bl	800cdcc <osSemaphoreNew>
 800c02e:	4603      	mov	r3, r0
 800c030:	4a52      	ldr	r2, [pc, #328]	@ (800c17c <low_level_init+0x26c>)
 800c032:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c034:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c038:	2224      	movs	r2, #36	@ 0x24
 800c03a:	2100      	movs	r1, #0
 800c03c:	4618      	mov	r0, r3
 800c03e:	f010 fa69 	bl	801c514 <memset>
  attributes.name = "EthIf";
 800c042:	4b4f      	ldr	r3, [pc, #316]	@ (800c180 <low_level_init+0x270>)
 800c044:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c046:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c04a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800c04e:	2330      	movs	r3, #48	@ 0x30
 800c050:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800c054:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c058:	461a      	mov	r2, r3
 800c05a:	6879      	ldr	r1, [r7, #4]
 800c05c:	4849      	ldr	r0, [pc, #292]	@ (800c184 <low_level_init+0x274>)
 800c05e:	f000 fc99 	bl	800c994 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c062:	4949      	ldr	r1, [pc, #292]	@ (800c188 <low_level_init+0x278>)
 800c064:	4849      	ldr	r0, [pc, #292]	@ (800c18c <low_level_init+0x27c>)
 800c066:	f7f5 ffcc 	bl	8002002 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800c06a:	4848      	ldr	r0, [pc, #288]	@ (800c18c <low_level_init+0x27c>)
 800c06c:	f7f5 fffb 	bl	8002066 <LAN8742_Init>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d006      	beq.n	800c084 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f005 fe82 	bl	8011d80 <netif_set_link_down>
    netif_set_down(netif);
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f005 fe19 	bl	8011cb4 <netif_set_down>
 800c082:	e06a      	b.n	800c15a <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800c084:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d164      	bne.n	800c156 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c08c:	483f      	ldr	r0, [pc, #252]	@ (800c18c <low_level_init+0x27c>)
 800c08e:	f7f6 f837 	bl	8002100 <LAN8742_GetLinkState>
 800c092:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800c096:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	dc06      	bgt.n	800c0ac <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f005 fe6e 	bl	8011d80 <netif_set_link_down>
      netif_set_down(netif);
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f005 fe05 	bl	8011cb4 <netif_set_down>
 800c0aa:	e056      	b.n	800c15a <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800c0ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c0b0:	3b02      	subs	r3, #2
 800c0b2:	2b03      	cmp	r3, #3
 800c0b4:	d82a      	bhi.n	800c10c <low_level_init+0x1fc>
 800c0b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c0bc <low_level_init+0x1ac>)
 800c0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0bc:	0800c0cd 	.word	0x0800c0cd
 800c0c0:	0800c0df 	.word	0x0800c0df
 800c0c4:	0800c0ef 	.word	0x0800c0ef
 800c0c8:	0800c0ff 	.word	0x0800c0ff
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c0cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c0d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c0d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c0d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c0dc:	e01f      	b.n	800c11e <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c0e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c0e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c0ec:	e017      	b.n	800c11e <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c0ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c0f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c0fc:	e00f      	b.n	800c11e <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c0fe:	2300      	movs	r3, #0
 800c100:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c104:	2300      	movs	r3, #0
 800c106:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c10a:	e008      	b.n	800c11e <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800c10c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c110:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c114:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c118:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c11c:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c11e:	f107 0310 	add.w	r3, r7, #16
 800c122:	4619      	mov	r1, r3
 800c124:	480e      	ldr	r0, [pc, #56]	@ (800c160 <low_level_init+0x250>)
 800c126:	f7f7 fd4b 	bl	8003bc0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800c12a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c12e:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800c130:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c134:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c136:	f107 0310 	add.w	r3, r7, #16
 800c13a:	4619      	mov	r1, r3
 800c13c:	4808      	ldr	r0, [pc, #32]	@ (800c160 <low_level_init+0x250>)
 800c13e:	f7f7 fe36 	bl	8003dae <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800c142:	4807      	ldr	r0, [pc, #28]	@ (800c160 <low_level_init+0x250>)
 800c144:	f7f7 f8ee 	bl	8003324 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f005 fd47 	bl	8011bdc <netif_set_up>
    netif_set_link_up(netif);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f005 fde2 	bl	8011d18 <netif_set_link_up>
 800c154:	e001      	b.n	800c15a <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800c156:	f7f5 f833 	bl	80011c0 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800c15a:	37a8      	adds	r7, #168	@ 0xa8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	20009f84 	.word	0x20009f84
 800c164:	40028000 	.word	0x40028000
 800c168:	2000012c 	.word	0x2000012c
 800c16c:	2000008c 	.word	0x2000008c
 800c170:	2000a034 	.word	0x2000a034
 800c174:	080205fc 	.word	0x080205fc
 800c178:	20009f7c 	.word	0x20009f7c
 800c17c:	20009f80 	.word	0x20009f80
 800c180:	0801d480 	.word	0x0801d480
 800c184:	0800c321 	.word	0x0800c321
 800c188:	2000000c 	.word	0x2000000c
 800c18c:	2000a06c 	.word	0x2000a06c

0800c190 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b092      	sub	sp, #72	@ 0x48
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c19a:	2300      	movs	r3, #0
 800c19c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c1a8:	f107 030c 	add.w	r3, r7, #12
 800c1ac:	2230      	movs	r2, #48	@ 0x30
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f010 f9af 	bl	801c514 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c1b6:	f107 030c 	add.w	r3, r7, #12
 800c1ba:	2230      	movs	r2, #48	@ 0x30
 800c1bc:	2100      	movs	r1, #0
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f010 f9a8 	bl	801c514 <memset>

  for(q = p; q != NULL; q = q->next)
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c1c8:	e045      	b.n	800c256 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c1ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1cc:	2b03      	cmp	r3, #3
 800c1ce:	d902      	bls.n	800c1d6 <low_level_output+0x46>
      return ERR_IF;
 800c1d0:	f06f 030b 	mvn.w	r3, #11
 800c1d4:	e07f      	b.n	800c2d6 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800c1d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1d8:	6859      	ldr	r1, [r3, #4]
 800c1da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c1dc:	4613      	mov	r3, r2
 800c1de:	005b      	lsls	r3, r3, #1
 800c1e0:	4413      	add	r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	3348      	adds	r3, #72	@ 0x48
 800c1e6:	443b      	add	r3, r7
 800c1e8:	3b3c      	subs	r3, #60	@ 0x3c
 800c1ea:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c1ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1ee:	895b      	ldrh	r3, [r3, #10]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	005b      	lsls	r3, r3, #1
 800c1f8:	4413      	add	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	3348      	adds	r3, #72	@ 0x48
 800c1fe:	443b      	add	r3, r7
 800c200:	3b38      	subs	r3, #56	@ 0x38
 800c202:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c206:	2b00      	cmp	r3, #0
 800c208:	d011      	beq.n	800c22e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c20a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c20c:	1e5a      	subs	r2, r3, #1
 800c20e:	f107 000c 	add.w	r0, r7, #12
 800c212:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c214:	460b      	mov	r3, r1
 800c216:	005b      	lsls	r3, r3, #1
 800c218:	440b      	add	r3, r1
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	18c1      	adds	r1, r0, r3
 800c21e:	4613      	mov	r3, r2
 800c220:	005b      	lsls	r3, r3, #1
 800c222:	4413      	add	r3, r2
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	3348      	adds	r3, #72	@ 0x48
 800c228:	443b      	add	r3, r7
 800c22a:	3b34      	subs	r3, #52	@ 0x34
 800c22c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c22e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d109      	bne.n	800c24a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c236:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c238:	4613      	mov	r3, r2
 800c23a:	005b      	lsls	r3, r3, #1
 800c23c:	4413      	add	r3, r2
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	3348      	adds	r3, #72	@ 0x48
 800c242:	443b      	add	r3, r7
 800c244:	3b34      	subs	r3, #52	@ 0x34
 800c246:	2200      	movs	r2, #0
 800c248:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c24a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c24c:	3301      	adds	r3, #1
 800c24e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800c250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	643b      	str	r3, [r7, #64]	@ 0x40
 800c256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1b6      	bne.n	800c1ca <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	891b      	ldrh	r3, [r3, #8]
 800c260:	461a      	mov	r2, r3
 800c262:	4b1f      	ldr	r3, [pc, #124]	@ (800c2e0 <low_level_output+0x150>)
 800c264:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c266:	4a1e      	ldr	r2, [pc, #120]	@ (800c2e0 <low_level_output+0x150>)
 800c268:	f107 030c 	add.w	r3, r7, #12
 800c26c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c26e:	4a1c      	ldr	r2, [pc, #112]	@ (800c2e0 <low_level_output+0x150>)
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800c274:	6838      	ldr	r0, [r7, #0]
 800c276:	f006 fa07 	bl	8012688 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800c27a:	4919      	ldr	r1, [pc, #100]	@ (800c2e0 <low_level_output+0x150>)
 800c27c:	4819      	ldr	r0, [pc, #100]	@ (800c2e4 <low_level_output+0x154>)
 800c27e:	f7f7 f941 	bl	8003504 <HAL_ETH_Transmit_IT>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d103      	bne.n	800c290 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c28e:	e01b      	b.n	800c2c8 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800c290:	4814      	ldr	r0, [pc, #80]	@ (800c2e4 <low_level_output+0x154>)
 800c292:	f7f7 fde9 	bl	8003e68 <HAL_ETH_GetError>
 800c296:	4603      	mov	r3, r0
 800c298:	f003 0302 	and.w	r3, r3, #2
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00d      	beq.n	800c2bc <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800c2a0:	4b11      	ldr	r3, [pc, #68]	@ (800c2e8 <low_level_output+0x158>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f000 fe2b 	bl	800cf04 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800c2ae:	480d      	ldr	r0, [pc, #52]	@ (800c2e4 <low_level_output+0x154>)
 800c2b0:	f7f7 fac8 	bl	8003844 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800c2b4:	23fe      	movs	r3, #254	@ 0xfe
 800c2b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c2ba:	e005      	b.n	800c2c8 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800c2bc:	6838      	ldr	r0, [r7, #0]
 800c2be:	f006 f93d 	bl	801253c <pbuf_free>
        errval =  ERR_IF;
 800c2c2:	23f4      	movs	r3, #244	@ 0xf4
 800c2c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800c2c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c2cc:	f113 0f02 	cmn.w	r3, #2
 800c2d0:	d0d3      	beq.n	800c27a <low_level_output+0xea>

  return errval;
 800c2d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3748      	adds	r7, #72	@ 0x48
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	2000a034 	.word	0x2000a034
 800c2e4:	20009f84 	.word	0x20009f84
 800c2e8:	20009f80 	.word	0x20009f80

0800c2ec <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c2f8:	4b07      	ldr	r3, [pc, #28]	@ (800c318 <low_level_input+0x2c>)
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d105      	bne.n	800c30c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c300:	f107 030c 	add.w	r3, r7, #12
 800c304:	4619      	mov	r1, r3
 800c306:	4805      	ldr	r0, [pc, #20]	@ (800c31c <low_level_input+0x30>)
 800c308:	f7f7 f958 	bl	80035bc <HAL_ETH_ReadData>
  }

  return p;
 800c30c:	68fb      	ldr	r3, [r7, #12]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	20009f78 	.word	0x20009f78
 800c31c:	20009f84 	.word	0x20009f84

0800c320 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c328:	2300      	movs	r3, #0
 800c32a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c330:	4b0f      	ldr	r3, [pc, #60]	@ (800c370 <ethernetif_input+0x50>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f04f 31ff 	mov.w	r1, #4294967295
 800c338:	4618      	mov	r0, r3
 800c33a:	f000 fde3 	bl	800cf04 <osSemaphoreAcquire>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1f5      	bne.n	800c330 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c344:	68b8      	ldr	r0, [r7, #8]
 800c346:	f7ff ffd1 	bl	800c2ec <low_level_input>
 800c34a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d00a      	beq.n	800c368 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	68b9      	ldr	r1, [r7, #8]
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	4798      	blx	r3
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d002      	beq.n	800c368 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f006 f8ea 	bl	801253c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1ea      	bne.n	800c344 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c36e:	e7df      	b.n	800c330 <ethernetif_input+0x10>
 800c370:	20009f7c 	.word	0x20009f7c

0800c374 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d106      	bne.n	800c390 <ethernetif_init+0x1c>
 800c382:	4b0e      	ldr	r3, [pc, #56]	@ (800c3bc <ethernetif_init+0x48>)
 800c384:	f240 220d 	movw	r2, #525	@ 0x20d
 800c388:	490d      	ldr	r1, [pc, #52]	@ (800c3c0 <ethernetif_init+0x4c>)
 800c38a:	480e      	ldr	r0, [pc, #56]	@ (800c3c4 <ethernetif_init+0x50>)
 800c38c:	f00f ff6a 	bl	801c264 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2273      	movs	r2, #115	@ 0x73
 800c394:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2274      	movs	r2, #116	@ 0x74
 800c39c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a09      	ldr	r2, [pc, #36]	@ (800c3c8 <ethernetif_init+0x54>)
 800c3a4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4a08      	ldr	r2, [pc, #32]	@ (800c3cc <ethernetif_init+0x58>)
 800c3aa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f7ff fdaf 	bl	800bf10 <low_level_init>

  return ERR_OK;
 800c3b2:	2300      	movs	r3, #0
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	0801d488 	.word	0x0801d488
 800c3c0:	0801d4a4 	.word	0x0801d4a4
 800c3c4:	0801d4b4 	.word	0x0801d4b4
 800c3c8:	0801919d 	.word	0x0801919d
 800c3cc:	0800c191 	.word	0x0800c191

0800c3d0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c3dc:	68f9      	ldr	r1, [r7, #12]
 800c3de:	4809      	ldr	r0, [pc, #36]	@ (800c404 <pbuf_free_custom+0x34>)
 800c3e0:	f005 f9e4 	bl	80117ac <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c3e4:	4b08      	ldr	r3, [pc, #32]	@ (800c408 <pbuf_free_custom+0x38>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d107      	bne.n	800c3fc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c3ec:	4b06      	ldr	r3, [pc, #24]	@ (800c408 <pbuf_free_custom+0x38>)
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800c3f2:	4b06      	ldr	r3, [pc, #24]	@ (800c40c <pbuf_free_custom+0x3c>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f000 fdea 	bl	800cfd0 <osSemaphoreRelease>
  }
}
 800c3fc:	bf00      	nop
 800c3fe:	3710      	adds	r7, #16
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	080205fc 	.word	0x080205fc
 800c408:	20009f78 	.word	0x20009f78
 800c40c:	20009f7c 	.word	0x20009f7c

0800c410 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c414:	f7f5 ff1c 	bl	8002250 <HAL_GetTick>
 800c418:	4603      	mov	r3, r0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	bd80      	pop	{r7, pc}
	...

0800c420 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b08e      	sub	sp, #56	@ 0x38
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c428:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c42c:	2200      	movs	r2, #0
 800c42e:	601a      	str	r2, [r3, #0]
 800c430:	605a      	str	r2, [r3, #4]
 800c432:	609a      	str	r2, [r3, #8]
 800c434:	60da      	str	r2, [r3, #12]
 800c436:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a56      	ldr	r2, [pc, #344]	@ (800c598 <HAL_ETH_MspInit+0x178>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	f040 80a6 	bne.w	800c590 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c444:	4b55      	ldr	r3, [pc, #340]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c448:	4a54      	ldr	r2, [pc, #336]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c44a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c44e:	6313      	str	r3, [r2, #48]	@ 0x30
 800c450:	4b52      	ldr	r3, [pc, #328]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c458:	623b      	str	r3, [r7, #32]
 800c45a:	6a3b      	ldr	r3, [r7, #32]
 800c45c:	4b4f      	ldr	r3, [pc, #316]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c45e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c460:	4a4e      	ldr	r2, [pc, #312]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c462:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c466:	6313      	str	r3, [r2, #48]	@ 0x30
 800c468:	4b4c      	ldr	r3, [pc, #304]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c46a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c46c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c470:	61fb      	str	r3, [r7, #28]
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	4b49      	ldr	r3, [pc, #292]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c478:	4a48      	ldr	r2, [pc, #288]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c47a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c47e:	6313      	str	r3, [r2, #48]	@ 0x30
 800c480:	4b46      	ldr	r3, [pc, #280]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c488:	61bb      	str	r3, [r7, #24]
 800c48a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c48c:	4b43      	ldr	r3, [pc, #268]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c48e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c490:	4a42      	ldr	r2, [pc, #264]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c492:	f043 0304 	orr.w	r3, r3, #4
 800c496:	6313      	str	r3, [r2, #48]	@ 0x30
 800c498:	4b40      	ldr	r3, [pc, #256]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c49a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c49c:	f003 0304 	and.w	r3, r3, #4
 800c4a0:	617b      	str	r3, [r7, #20]
 800c4a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4a4:	4b3d      	ldr	r3, [pc, #244]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c4a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4a8:	4a3c      	ldr	r2, [pc, #240]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c4aa:	f043 0301 	orr.w	r3, r3, #1
 800c4ae:	6313      	str	r3, [r2, #48]	@ 0x30
 800c4b0:	4b3a      	ldr	r3, [pc, #232]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c4b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4b4:	f003 0301 	and.w	r3, r3, #1
 800c4b8:	613b      	str	r3, [r7, #16]
 800c4ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c4bc:	4b37      	ldr	r3, [pc, #220]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c4be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4c0:	4a36      	ldr	r2, [pc, #216]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c4c2:	f043 0302 	orr.w	r3, r3, #2
 800c4c6:	6313      	str	r3, [r2, #48]	@ 0x30
 800c4c8:	4b34      	ldr	r3, [pc, #208]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c4ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4cc:	f003 0302 	and.w	r3, r3, #2
 800c4d0:	60fb      	str	r3, [r7, #12]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c4d4:	4b31      	ldr	r3, [pc, #196]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c4d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4d8:	4a30      	ldr	r2, [pc, #192]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c4da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4de:	6313      	str	r3, [r2, #48]	@ 0x30
 800c4e0:	4b2e      	ldr	r3, [pc, #184]	@ (800c59c <HAL_ETH_MspInit+0x17c>)
 800c4e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4e8:	60bb      	str	r3, [r7, #8]
 800c4ea:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800c4ec:	2332      	movs	r3, #50	@ 0x32
 800c4ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4f0:	2302      	movs	r3, #2
 800c4f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4f8:	2303      	movs	r3, #3
 800c4fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c4fc:	230b      	movs	r3, #11
 800c4fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c504:	4619      	mov	r1, r3
 800c506:	4826      	ldr	r0, [pc, #152]	@ (800c5a0 <HAL_ETH_MspInit+0x180>)
 800c508:	f7f8 f8e8 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800c50c:	2386      	movs	r3, #134	@ 0x86
 800c50e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c510:	2302      	movs	r3, #2
 800c512:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c514:	2300      	movs	r3, #0
 800c516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c518:	2303      	movs	r3, #3
 800c51a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c51c:	230b      	movs	r3, #11
 800c51e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c520:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c524:	4619      	mov	r1, r3
 800c526:	481f      	ldr	r0, [pc, #124]	@ (800c5a4 <HAL_ETH_MspInit+0x184>)
 800c528:	f7f8 f8d8 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800c52c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c530:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c532:	2302      	movs	r3, #2
 800c534:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c536:	2300      	movs	r3, #0
 800c538:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c53a:	2303      	movs	r3, #3
 800c53c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c53e:	230b      	movs	r3, #11
 800c540:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800c542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c546:	4619      	mov	r1, r3
 800c548:	4817      	ldr	r0, [pc, #92]	@ (800c5a8 <HAL_ETH_MspInit+0x188>)
 800c54a:	f7f8 f8c7 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800c54e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c552:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c554:	2302      	movs	r3, #2
 800c556:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c558:	2300      	movs	r3, #0
 800c55a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c55c:	2303      	movs	r3, #3
 800c55e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c560:	230b      	movs	r3, #11
 800c562:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c568:	4619      	mov	r1, r3
 800c56a:	4810      	ldr	r0, [pc, #64]	@ (800c5ac <HAL_ETH_MspInit+0x18c>)
 800c56c:	f7f8 f8b6 	bl	80046dc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800c570:	2200      	movs	r2, #0
 800c572:	2105      	movs	r1, #5
 800c574:	203d      	movs	r0, #61	@ 0x3d
 800c576:	f7f5 ff77 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c57a:	203d      	movs	r0, #61	@ 0x3d
 800c57c:	f7f5 ff90 	bl	80024a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800c580:	2200      	movs	r2, #0
 800c582:	2105      	movs	r1, #5
 800c584:	203e      	movs	r0, #62	@ 0x3e
 800c586:	f7f5 ff6f 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800c58a:	203e      	movs	r0, #62	@ 0x3e
 800c58c:	f7f5 ff88 	bl	80024a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c590:	bf00      	nop
 800c592:	3738      	adds	r7, #56	@ 0x38
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	40028000 	.word	0x40028000
 800c59c:	40023800 	.word	0x40023800
 800c5a0:	40020800 	.word	0x40020800
 800c5a4:	40020000 	.word	0x40020000
 800c5a8:	40020400 	.word	0x40020400
 800c5ac:	40021800 	.word	0x40021800

0800c5b0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c5b4:	4802      	ldr	r0, [pc, #8]	@ (800c5c0 <ETH_PHY_IO_Init+0x10>)
 800c5b6:	f7f7 fc15 	bl	8003de4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	20009f84 	.word	0x20009f84

0800c5c4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	af00      	add	r7, sp, #0
  return 0;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	68ba      	ldr	r2, [r7, #8]
 800c5e4:	68f9      	ldr	r1, [r7, #12]
 800c5e6:	4807      	ldr	r0, [pc, #28]	@ (800c604 <ETH_PHY_IO_ReadReg+0x30>)
 800c5e8:	f7f7 fa56 	bl	8003a98 <HAL_ETH_ReadPHYRegister>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d002      	beq.n	800c5f8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c5f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f6:	e000      	b.n	800c5fa <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	20009f84 	.word	0x20009f84

0800c608 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	68f9      	ldr	r1, [r7, #12]
 800c61a:	4807      	ldr	r0, [pc, #28]	@ (800c638 <ETH_PHY_IO_WriteReg+0x30>)
 800c61c:	f7f7 fa87 	bl	8003b2e <HAL_ETH_WritePHYRegister>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d002      	beq.n	800c62c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c626:	f04f 33ff 	mov.w	r3, #4294967295
 800c62a:	e000      	b.n	800c62e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	20009f84 	.word	0x20009f84

0800c63c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c640:	f7f5 fe06 	bl	8002250 <HAL_GetTick>
 800c644:	4603      	mov	r3, r0
}
 800c646:	4618      	mov	r0, r3
 800c648:	bd80      	pop	{r7, pc}
	...

0800c64c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b0a0      	sub	sp, #128	@ 0x80
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c654:	f107 0308 	add.w	r3, r7, #8
 800c658:	2264      	movs	r2, #100	@ 0x64
 800c65a:	2100      	movs	r1, #0
 800c65c:	4618      	mov	r0, r3
 800c65e:	f00f ff59 	bl	801c514 <memset>
  int32_t PHYLinkState = 0;
 800c662:	2300      	movs	r3, #0
 800c664:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c666:	2300      	movs	r3, #0
 800c668:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c66a:	2300      	movs	r3, #0
 800c66c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c66e:	2300      	movs	r3, #0
 800c670:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c676:	483a      	ldr	r0, [pc, #232]	@ (800c760 <ethernet_link_thread+0x114>)
 800c678:	f7f5 fd42 	bl	8002100 <LAN8742_GetLinkState>
 800c67c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c67e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c680:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c684:	089b      	lsrs	r3, r3, #2
 800c686:	f003 0301 	and.w	r3, r3, #1
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00c      	beq.n	800c6aa <ethernet_link_thread+0x5e>
 800c690:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c692:	2b01      	cmp	r3, #1
 800c694:	dc09      	bgt.n	800c6aa <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c696:	4833      	ldr	r0, [pc, #204]	@ (800c764 <ethernet_link_thread+0x118>)
 800c698:	f7f6 feb4 	bl	8003404 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c69c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c69e:	f005 fb09 	bl	8011cb4 <netif_set_down>
    netif_set_link_down(netif);
 800c6a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c6a4:	f005 fb6c 	bl	8011d80 <netif_set_link_down>
 800c6a8:	e055      	b.n	800c756 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c6aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c6b0:	f003 0304 	and.w	r3, r3, #4
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d14e      	bne.n	800c756 <ethernet_link_thread+0x10a>
 800c6b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	dd4b      	ble.n	800c756 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800c6be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c6c0:	3b02      	subs	r3, #2
 800c6c2:	2b03      	cmp	r3, #3
 800c6c4:	d82a      	bhi.n	800c71c <ethernet_link_thread+0xd0>
 800c6c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c6cc <ethernet_link_thread+0x80>)
 800c6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6cc:	0800c6dd 	.word	0x0800c6dd
 800c6d0:	0800c6ef 	.word	0x0800c6ef
 800c6d4:	0800c6ff 	.word	0x0800c6ff
 800c6d8:	0800c70f 	.word	0x0800c70f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c6dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c6e0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c6e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c6e6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c6ec:	e017      	b.n	800c71e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c6f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c6f6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c6fc:	e00f      	b.n	800c71e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c6fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c702:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c704:	2300      	movs	r3, #0
 800c706:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c708:	2301      	movs	r3, #1
 800c70a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c70c:	e007      	b.n	800c71e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c70e:	2300      	movs	r3, #0
 800c710:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c712:	2300      	movs	r3, #0
 800c714:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c716:	2301      	movs	r3, #1
 800c718:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c71a:	e000      	b.n	800c71e <ethernet_link_thread+0xd2>
    default:
      break;
 800c71c:	bf00      	nop
    }

    if(linkchanged)
 800c71e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c720:	2b00      	cmp	r3, #0
 800c722:	d018      	beq.n	800c756 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c724:	f107 0308 	add.w	r3, r7, #8
 800c728:	4619      	mov	r1, r3
 800c72a:	480e      	ldr	r0, [pc, #56]	@ (800c764 <ethernet_link_thread+0x118>)
 800c72c:	f7f7 fa48 	bl	8003bc0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c730:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c732:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c734:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c736:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c738:	f107 0308 	add.w	r3, r7, #8
 800c73c:	4619      	mov	r1, r3
 800c73e:	4809      	ldr	r0, [pc, #36]	@ (800c764 <ethernet_link_thread+0x118>)
 800c740:	f7f7 fb35 	bl	8003dae <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800c744:	4807      	ldr	r0, [pc, #28]	@ (800c764 <ethernet_link_thread+0x118>)
 800c746:	f7f6 fded 	bl	8003324 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c74a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c74c:	f005 fa46 	bl	8011bdc <netif_set_up>
      netif_set_link_up(netif);
 800c750:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c752:	f005 fae1 	bl	8011d18 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c756:	2064      	movs	r0, #100	@ 0x64
 800c758:	f000 f9c2 	bl	800cae0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c75c:	e78b      	b.n	800c676 <ethernet_link_thread+0x2a>
 800c75e:	bf00      	nop
 800c760:	2000a06c 	.word	0x2000a06c
 800c764:	20009f84 	.word	0x20009f84

0800c768 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b086      	sub	sp, #24
 800c76c:	af02      	add	r7, sp, #8
 800c76e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c770:	4812      	ldr	r0, [pc, #72]	@ (800c7bc <HAL_ETH_RxAllocateCallback+0x54>)
 800c772:	f004 ffa7 	bl	80116c4 <memp_malloc_pool>
 800c776:	60f8      	str	r0, [r7, #12]
  if (p)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d014      	beq.n	800c7a8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f103 0220 	add.w	r2, r3, #32
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	4a0d      	ldr	r2, [pc, #52]	@ (800c7c0 <HAL_ETH_RxAllocateCallback+0x58>)
 800c78c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c796:	9201      	str	r2, [sp, #4]
 800c798:	9300      	str	r3, [sp, #0]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2241      	movs	r2, #65	@ 0x41
 800c79e:	2100      	movs	r1, #0
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	f005 fd11 	bl	80121c8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c7a6:	e005      	b.n	800c7b4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c7a8:	4b06      	ldr	r3, [pc, #24]	@ (800c7c4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	601a      	str	r2, [r3, #0]
}
 800c7b4:	bf00      	nop
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	080205fc 	.word	0x080205fc
 800c7c0:	0800c3d1 	.word	0x0800c3d1
 800c7c4:	20009f78 	.word	0x20009f78

0800c7c8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b088      	sub	sp, #32
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	607a      	str	r2, [r7, #4]
 800c7d4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	3b20      	subs	r3, #32
 800c7e6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c7ee:	69fb      	ldr	r3, [r7, #28]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	887a      	ldrh	r2, [r7, #2]
 800c7f8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d103      	bne.n	800c80a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	69fa      	ldr	r2, [r7, #28]
 800c806:	601a      	str	r2, [r3, #0]
 800c808:	e003      	b.n	800c812 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	69fa      	ldr	r2, [r7, #28]
 800c810:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	69fa      	ldr	r2, [r7, #28]
 800c816:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	61fb      	str	r3, [r7, #28]
 800c81e:	e009      	b.n	800c834 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	891a      	ldrh	r2, [r3, #8]
 800c824:	887b      	ldrh	r3, [r7, #2]
 800c826:	4413      	add	r3, r2
 800c828:	b29a      	uxth	r2, r3
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	61fb      	str	r3, [r7, #28]
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1f2      	bne.n	800c820 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c83a:	887b      	ldrh	r3, [r7, #2]
 800c83c:	4619      	mov	r1, r3
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7ff fb02 	bl	800be48 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c844:	bf00      	nop
 800c846:	3720      	adds	r7, #32
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f005 fe71 	bl	801253c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800c85a:	bf00      	nop
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c862:	b480      	push	{r7}
 800c864:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800c866:	bf00      	nop
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c876:	f3ef 8305 	mrs	r3, IPSR
 800c87a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c87c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d10f      	bne.n	800c8a2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c882:	f3ef 8310 	mrs	r3, PRIMASK
 800c886:	607b      	str	r3, [r7, #4]
  return(result);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d105      	bne.n	800c89a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c88e:	f3ef 8311 	mrs	r3, BASEPRI
 800c892:	603b      	str	r3, [r7, #0]
  return(result);
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d007      	beq.n	800c8aa <osKernelInitialize+0x3a>
 800c89a:	4b0e      	ldr	r3, [pc, #56]	@ (800c8d4 <osKernelInitialize+0x64>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b02      	cmp	r3, #2
 800c8a0:	d103      	bne.n	800c8aa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800c8a2:	f06f 0305 	mvn.w	r3, #5
 800c8a6:	60fb      	str	r3, [r7, #12]
 800c8a8:	e00c      	b.n	800c8c4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c8aa:	4b0a      	ldr	r3, [pc, #40]	@ (800c8d4 <osKernelInitialize+0x64>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d105      	bne.n	800c8be <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c8b2:	4b08      	ldr	r3, [pc, #32]	@ (800c8d4 <osKernelInitialize+0x64>)
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	60fb      	str	r3, [r7, #12]
 800c8bc:	e002      	b.n	800c8c4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800c8be:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3714      	adds	r7, #20
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop
 800c8d4:	2000a08c 	.word	0x2000a08c

0800c8d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8de:	f3ef 8305 	mrs	r3, IPSR
 800c8e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c8e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d10f      	bne.n	800c90a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8ea:	f3ef 8310 	mrs	r3, PRIMASK
 800c8ee:	607b      	str	r3, [r7, #4]
  return(result);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d105      	bne.n	800c902 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c8f6:	f3ef 8311 	mrs	r3, BASEPRI
 800c8fa:	603b      	str	r3, [r7, #0]
  return(result);
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d007      	beq.n	800c912 <osKernelStart+0x3a>
 800c902:	4b0f      	ldr	r3, [pc, #60]	@ (800c940 <osKernelStart+0x68>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b02      	cmp	r3, #2
 800c908:	d103      	bne.n	800c912 <osKernelStart+0x3a>
    stat = osErrorISR;
 800c90a:	f06f 0305 	mvn.w	r3, #5
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	e010      	b.n	800c934 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c912:	4b0b      	ldr	r3, [pc, #44]	@ (800c940 <osKernelStart+0x68>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b01      	cmp	r3, #1
 800c918:	d109      	bne.n	800c92e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c91a:	f7ff ffa2 	bl	800c862 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c91e:	4b08      	ldr	r3, [pc, #32]	@ (800c940 <osKernelStart+0x68>)
 800c920:	2202      	movs	r2, #2
 800c922:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c924:	f002 f92e 	bl	800eb84 <vTaskStartScheduler>
      stat = osOK;
 800c928:	2300      	movs	r3, #0
 800c92a:	60fb      	str	r3, [r7, #12]
 800c92c:	e002      	b.n	800c934 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800c92e:	f04f 33ff 	mov.w	r3, #4294967295
 800c932:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c934:	68fb      	ldr	r3, [r7, #12]
}
 800c936:	4618      	mov	r0, r3
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	2000a08c 	.word	0x2000a08c

0800c944 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c944:	b580      	push	{r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c94a:	f3ef 8305 	mrs	r3, IPSR
 800c94e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c950:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10f      	bne.n	800c976 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c956:	f3ef 8310 	mrs	r3, PRIMASK
 800c95a:	607b      	str	r3, [r7, #4]
  return(result);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d105      	bne.n	800c96e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c962:	f3ef 8311 	mrs	r3, BASEPRI
 800c966:	603b      	str	r3, [r7, #0]
  return(result);
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d007      	beq.n	800c97e <osKernelGetTickCount+0x3a>
 800c96e:	4b08      	ldr	r3, [pc, #32]	@ (800c990 <osKernelGetTickCount+0x4c>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b02      	cmp	r3, #2
 800c974:	d103      	bne.n	800c97e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800c976:	f002 fa37 	bl	800ede8 <xTaskGetTickCountFromISR>
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	e002      	b.n	800c984 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800c97e:	f002 fa23 	bl	800edc8 <xTaskGetTickCount>
 800c982:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800c984:	68fb      	ldr	r3, [r7, #12]
}
 800c986:	4618      	mov	r0, r3
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	2000a08c 	.word	0x2000a08c

0800c994 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c994:	b580      	push	{r7, lr}
 800c996:	b090      	sub	sp, #64	@ 0x40
 800c998:	af04      	add	r7, sp, #16
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9a4:	f3ef 8305 	mrs	r3, IPSR
 800c9a8:	61fb      	str	r3, [r7, #28]
  return(result);
 800c9aa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f040 8090 	bne.w	800cad2 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9b2:	f3ef 8310 	mrs	r3, PRIMASK
 800c9b6:	61bb      	str	r3, [r7, #24]
  return(result);
 800c9b8:	69bb      	ldr	r3, [r7, #24]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d105      	bne.n	800c9ca <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c9be:	f3ef 8311 	mrs	r3, BASEPRI
 800c9c2:	617b      	str	r3, [r7, #20]
  return(result);
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d003      	beq.n	800c9d2 <osThreadNew+0x3e>
 800c9ca:	4b44      	ldr	r3, [pc, #272]	@ (800cadc <osThreadNew+0x148>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	d07f      	beq.n	800cad2 <osThreadNew+0x13e>
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d07c      	beq.n	800cad2 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800c9d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c9dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800c9de:	2318      	movs	r3, #24
 800c9e0:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800c9e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ea:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d045      	beq.n	800ca7e <osThreadNew+0xea>
      if (attr->name != NULL) {
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d002      	beq.n	800ca00 <osThreadNew+0x6c>
        name = attr->name;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	699b      	ldr	r3, [r3, #24]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d002      	beq.n	800ca0e <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	699b      	ldr	r3, [r3, #24]
 800ca0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ca0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d008      	beq.n	800ca26 <osThreadNew+0x92>
 800ca14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca16:	2b38      	cmp	r3, #56	@ 0x38
 800ca18:	d805      	bhi.n	800ca26 <osThreadNew+0x92>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	f003 0301 	and.w	r3, r3, #1
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d001      	beq.n	800ca2a <osThreadNew+0x96>
        return (NULL);
 800ca26:	2300      	movs	r3, #0
 800ca28:	e054      	b.n	800cad4 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	695b      	ldr	r3, [r3, #20]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d003      	beq.n	800ca3a <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	695b      	ldr	r3, [r3, #20]
 800ca36:	089b      	lsrs	r3, r3, #2
 800ca38:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00e      	beq.n	800ca60 <osThreadNew+0xcc>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	2ba7      	cmp	r3, #167	@ 0xa7
 800ca48:	d90a      	bls.n	800ca60 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d006      	beq.n	800ca60 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	695b      	ldr	r3, [r3, #20]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <osThreadNew+0xcc>
        mem = 1;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	623b      	str	r3, [r7, #32]
 800ca5e:	e010      	b.n	800ca82 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10c      	bne.n	800ca82 <osThreadNew+0xee>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d108      	bne.n	800ca82 <osThreadNew+0xee>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d104      	bne.n	800ca82 <osThreadNew+0xee>
          mem = 0;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	623b      	str	r3, [r7, #32]
 800ca7c:	e001      	b.n	800ca82 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ca82:	6a3b      	ldr	r3, [r7, #32]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d110      	bne.n	800caaa <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ca90:	9202      	str	r2, [sp, #8]
 800ca92:	9301      	str	r3, [sp, #4]
 800ca94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca96:	9300      	str	r3, [sp, #0]
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	f001 fe72 	bl	800e788 <xTaskCreateStatic>
 800caa4:	4603      	mov	r3, r0
 800caa6:	613b      	str	r3, [r7, #16]
 800caa8:	e013      	b.n	800cad2 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800caaa:	6a3b      	ldr	r3, [r7, #32]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d110      	bne.n	800cad2 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab2:	b29a      	uxth	r2, r3
 800cab4:	f107 0310 	add.w	r3, r7, #16
 800cab8:	9301      	str	r3, [sp, #4]
 800caba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f001 fec6 	bl	800e854 <xTaskCreate>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d001      	beq.n	800cad2 <osThreadNew+0x13e>
          hTask = NULL;
 800cace:	2300      	movs	r3, #0
 800cad0:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cad2:	693b      	ldr	r3, [r7, #16]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3730      	adds	r7, #48	@ 0x30
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	2000a08c 	.word	0x2000a08c

0800cae0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b086      	sub	sp, #24
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cae8:	f3ef 8305 	mrs	r3, IPSR
 800caec:	613b      	str	r3, [r7, #16]
  return(result);
 800caee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d10f      	bne.n	800cb14 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800caf4:	f3ef 8310 	mrs	r3, PRIMASK
 800caf8:	60fb      	str	r3, [r7, #12]
  return(result);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d105      	bne.n	800cb0c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb00:	f3ef 8311 	mrs	r3, BASEPRI
 800cb04:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d007      	beq.n	800cb1c <osDelay+0x3c>
 800cb0c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb38 <osDelay+0x58>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d103      	bne.n	800cb1c <osDelay+0x3c>
    stat = osErrorISR;
 800cb14:	f06f 0305 	mvn.w	r3, #5
 800cb18:	617b      	str	r3, [r7, #20]
 800cb1a:	e007      	b.n	800cb2c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d002      	beq.n	800cb2c <osDelay+0x4c>
      vTaskDelay(ticks);
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f001 fff4 	bl	800eb14 <vTaskDelay>
    }
  }

  return (stat);
 800cb2c:	697b      	ldr	r3, [r7, #20]
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3718      	adds	r7, #24
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	2000a08c 	.word	0x2000a08c

0800cb3c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b08a      	sub	sp, #40	@ 0x28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cb44:	2300      	movs	r3, #0
 800cb46:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb48:	f3ef 8305 	mrs	r3, IPSR
 800cb4c:	613b      	str	r3, [r7, #16]
  return(result);
 800cb4e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	f040 8085 	bne.w	800cc60 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb56:	f3ef 8310 	mrs	r3, PRIMASK
 800cb5a:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d105      	bne.n	800cb6e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb62:	f3ef 8311 	mrs	r3, BASEPRI
 800cb66:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d003      	beq.n	800cb76 <osMutexNew+0x3a>
 800cb6e:	4b3f      	ldr	r3, [pc, #252]	@ (800cc6c <osMutexNew+0x130>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b02      	cmp	r3, #2
 800cb74:	d074      	beq.n	800cc60 <osMutexNew+0x124>
    if (attr != NULL) {
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d003      	beq.n	800cb84 <osMutexNew+0x48>
      type = attr->attr_bits;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	623b      	str	r3, [r7, #32]
 800cb82:	e001      	b.n	800cb88 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800cb84:	2300      	movs	r3, #0
 800cb86:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cb88:	6a3b      	ldr	r3, [r7, #32]
 800cb8a:	f003 0301 	and.w	r3, r3, #1
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d002      	beq.n	800cb98 <osMutexNew+0x5c>
      rmtx = 1U;
 800cb92:	2301      	movs	r3, #1
 800cb94:	61fb      	str	r3, [r7, #28]
 800cb96:	e001      	b.n	800cb9c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cb9c:	6a3b      	ldr	r3, [r7, #32]
 800cb9e:	f003 0308 	and.w	r3, r3, #8
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d15c      	bne.n	800cc60 <osMutexNew+0x124>
      mem = -1;
 800cba6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbaa:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d015      	beq.n	800cbde <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d006      	beq.n	800cbc8 <osMutexNew+0x8c>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	2b4f      	cmp	r3, #79	@ 0x4f
 800cbc0:	d902      	bls.n	800cbc8 <osMutexNew+0x8c>
          mem = 1;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	61bb      	str	r3, [r7, #24]
 800cbc6:	e00c      	b.n	800cbe2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d108      	bne.n	800cbe2 <osMutexNew+0xa6>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d104      	bne.n	800cbe2 <osMutexNew+0xa6>
            mem = 0;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	61bb      	str	r3, [r7, #24]
 800cbdc:	e001      	b.n	800cbe2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d112      	bne.n	800cc0e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800cbe8:	69fb      	ldr	r3, [r7, #28]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d007      	beq.n	800cbfe <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	2004      	movs	r0, #4
 800cbf6:	f000 fe22 	bl	800d83e <xQueueCreateMutexStatic>
 800cbfa:	6278      	str	r0, [r7, #36]	@ 0x24
 800cbfc:	e016      	b.n	800cc2c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	4619      	mov	r1, r3
 800cc04:	2001      	movs	r0, #1
 800cc06:	f000 fe1a 	bl	800d83e <xQueueCreateMutexStatic>
 800cc0a:	6278      	str	r0, [r7, #36]	@ 0x24
 800cc0c:	e00e      	b.n	800cc2c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d10b      	bne.n	800cc2c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d004      	beq.n	800cc24 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800cc1a:	2004      	movs	r0, #4
 800cc1c:	f000 fdf7 	bl	800d80e <xQueueCreateMutex>
 800cc20:	6278      	str	r0, [r7, #36]	@ 0x24
 800cc22:	e003      	b.n	800cc2c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800cc24:	2001      	movs	r0, #1
 800cc26:	f000 fdf2 	bl	800d80e <xQueueCreateMutex>
 800cc2a:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00c      	beq.n	800cc4c <osMutexNew+0x110>
        if (attr != NULL) {
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d003      	beq.n	800cc40 <osMutexNew+0x104>
          name = attr->name;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	617b      	str	r3, [r7, #20]
 800cc3e:	e001      	b.n	800cc44 <osMutexNew+0x108>
        } else {
          name = NULL;
 800cc40:	2300      	movs	r3, #0
 800cc42:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800cc44:	6979      	ldr	r1, [r7, #20]
 800cc46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cc48:	f001 fd16 	bl	800e678 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d006      	beq.n	800cc60 <osMutexNew+0x124>
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d003      	beq.n	800cc60 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5a:	f043 0301 	orr.w	r3, r3, #1
 800cc5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3728      	adds	r7, #40	@ 0x28
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	2000a08c 	.word	0x2000a08c

0800cc70 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b088      	sub	sp, #32
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f023 0301 	bic.w	r3, r3, #1
 800cc80:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f003 0301 	and.w	r3, r3, #1
 800cc88:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc8e:	f3ef 8305 	mrs	r3, IPSR
 800cc92:	613b      	str	r3, [r7, #16]
  return(result);
 800cc94:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d10f      	bne.n	800ccba <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc9a:	f3ef 8310 	mrs	r3, PRIMASK
 800cc9e:	60fb      	str	r3, [r7, #12]
  return(result);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d105      	bne.n	800ccb2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cca6:	f3ef 8311 	mrs	r3, BASEPRI
 800ccaa:	60bb      	str	r3, [r7, #8]
  return(result);
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d007      	beq.n	800ccc2 <osMutexAcquire+0x52>
 800ccb2:	4b1d      	ldr	r3, [pc, #116]	@ (800cd28 <osMutexAcquire+0xb8>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d103      	bne.n	800ccc2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800ccba:	f06f 0305 	mvn.w	r3, #5
 800ccbe:	61fb      	str	r3, [r7, #28]
 800ccc0:	e02c      	b.n	800cd1c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d103      	bne.n	800ccd0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800ccc8:	f06f 0303 	mvn.w	r3, #3
 800cccc:	61fb      	str	r3, [r7, #28]
 800ccce:	e025      	b.n	800cd1c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d011      	beq.n	800ccfa <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ccd6:	6839      	ldr	r1, [r7, #0]
 800ccd8:	69b8      	ldr	r0, [r7, #24]
 800ccda:	f000 fe02 	bl	800d8e2 <xQueueTakeMutexRecursive>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d01b      	beq.n	800cd1c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d003      	beq.n	800ccf2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800ccea:	f06f 0301 	mvn.w	r3, #1
 800ccee:	61fb      	str	r3, [r7, #28]
 800ccf0:	e014      	b.n	800cd1c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ccf2:	f06f 0302 	mvn.w	r3, #2
 800ccf6:	61fb      	str	r3, [r7, #28]
 800ccf8:	e010      	b.n	800cd1c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ccfa:	6839      	ldr	r1, [r7, #0]
 800ccfc:	69b8      	ldr	r0, [r7, #24]
 800ccfe:	f001 f9cd 	bl	800e09c <xQueueSemaphoreTake>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d009      	beq.n	800cd1c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d003      	beq.n	800cd16 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800cd0e:	f06f 0301 	mvn.w	r3, #1
 800cd12:	61fb      	str	r3, [r7, #28]
 800cd14:	e002      	b.n	800cd1c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800cd16:	f06f 0302 	mvn.w	r3, #2
 800cd1a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cd1c:	69fb      	ldr	r3, [r7, #28]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3720      	adds	r7, #32
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	2000a08c 	.word	0x2000a08c

0800cd2c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b088      	sub	sp, #32
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f023 0301 	bic.w	r3, r3, #1
 800cd3a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f003 0301 	and.w	r3, r3, #1
 800cd42:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800cd44:	2300      	movs	r3, #0
 800cd46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd48:	f3ef 8305 	mrs	r3, IPSR
 800cd4c:	613b      	str	r3, [r7, #16]
  return(result);
 800cd4e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d10f      	bne.n	800cd74 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd54:	f3ef 8310 	mrs	r3, PRIMASK
 800cd58:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d105      	bne.n	800cd6c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd60:	f3ef 8311 	mrs	r3, BASEPRI
 800cd64:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d007      	beq.n	800cd7c <osMutexRelease+0x50>
 800cd6c:	4b16      	ldr	r3, [pc, #88]	@ (800cdc8 <osMutexRelease+0x9c>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2b02      	cmp	r3, #2
 800cd72:	d103      	bne.n	800cd7c <osMutexRelease+0x50>
    stat = osErrorISR;
 800cd74:	f06f 0305 	mvn.w	r3, #5
 800cd78:	61fb      	str	r3, [r7, #28]
 800cd7a:	e01f      	b.n	800cdbc <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800cd7c:	69bb      	ldr	r3, [r7, #24]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d103      	bne.n	800cd8a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800cd82:	f06f 0303 	mvn.w	r3, #3
 800cd86:	61fb      	str	r3, [r7, #28]
 800cd88:	e018      	b.n	800cdbc <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d009      	beq.n	800cda4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cd90:	69b8      	ldr	r0, [r7, #24]
 800cd92:	f000 fd6f 	bl	800d874 <xQueueGiveMutexRecursive>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d00f      	beq.n	800cdbc <osMutexRelease+0x90>
        stat = osErrorResource;
 800cd9c:	f06f 0302 	mvn.w	r3, #2
 800cda0:	61fb      	str	r3, [r7, #28]
 800cda2:	e00b      	b.n	800cdbc <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cda4:	2300      	movs	r3, #0
 800cda6:	2200      	movs	r2, #0
 800cda8:	2100      	movs	r1, #0
 800cdaa:	69b8      	ldr	r0, [r7, #24]
 800cdac:	f000 fe48 	bl	800da40 <xQueueGenericSend>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d002      	beq.n	800cdbc <osMutexRelease+0x90>
        stat = osErrorResource;
 800cdb6:	f06f 0302 	mvn.w	r3, #2
 800cdba:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800cdbc:	69fb      	ldr	r3, [r7, #28]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3720      	adds	r7, #32
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	2000a08c 	.word	0x2000a08c

0800cdcc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b08c      	sub	sp, #48	@ 0x30
 800cdd0:	af02      	add	r7, sp, #8
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cddc:	f3ef 8305 	mrs	r3, IPSR
 800cde0:	61bb      	str	r3, [r7, #24]
  return(result);
 800cde2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f040 8086 	bne.w	800cef6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdea:	f3ef 8310 	mrs	r3, PRIMASK
 800cdee:	617b      	str	r3, [r7, #20]
  return(result);
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d105      	bne.n	800ce02 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cdf6:	f3ef 8311 	mrs	r3, BASEPRI
 800cdfa:	613b      	str	r3, [r7, #16]
  return(result);
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d003      	beq.n	800ce0a <osSemaphoreNew+0x3e>
 800ce02:	4b3f      	ldr	r3, [pc, #252]	@ (800cf00 <osSemaphoreNew+0x134>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b02      	cmp	r3, #2
 800ce08:	d075      	beq.n	800cef6 <osSemaphoreNew+0x12a>
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d072      	beq.n	800cef6 <osSemaphoreNew+0x12a>
 800ce10:	68ba      	ldr	r2, [r7, #8]
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d86e      	bhi.n	800cef6 <osSemaphoreNew+0x12a>
    mem = -1;
 800ce18:	f04f 33ff 	mov.w	r3, #4294967295
 800ce1c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d015      	beq.n	800ce50 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d006      	beq.n	800ce3a <osSemaphoreNew+0x6e>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	2b4f      	cmp	r3, #79	@ 0x4f
 800ce32:	d902      	bls.n	800ce3a <osSemaphoreNew+0x6e>
        mem = 1;
 800ce34:	2301      	movs	r3, #1
 800ce36:	623b      	str	r3, [r7, #32]
 800ce38:	e00c      	b.n	800ce54 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d108      	bne.n	800ce54 <osSemaphoreNew+0x88>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d104      	bne.n	800ce54 <osSemaphoreNew+0x88>
          mem = 0;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	623b      	str	r3, [r7, #32]
 800ce4e:	e001      	b.n	800ce54 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800ce50:	2300      	movs	r3, #0
 800ce52:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce5a:	d04c      	beq.n	800cef6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d128      	bne.n	800ceb4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800ce62:	6a3b      	ldr	r3, [r7, #32]
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d10a      	bne.n	800ce7e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	2203      	movs	r2, #3
 800ce6e:	9200      	str	r2, [sp, #0]
 800ce70:	2200      	movs	r2, #0
 800ce72:	2100      	movs	r1, #0
 800ce74:	2001      	movs	r0, #1
 800ce76:	f000 fbc3 	bl	800d600 <xQueueGenericCreateStatic>
 800ce7a:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce7c:	e005      	b.n	800ce8a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800ce7e:	2203      	movs	r2, #3
 800ce80:	2100      	movs	r1, #0
 800ce82:	2001      	movs	r0, #1
 800ce84:	f000 fc43 	bl	800d70e <xQueueGenericCreate>
 800ce88:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ce8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d022      	beq.n	800ced6 <osSemaphoreNew+0x10a>
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d01f      	beq.n	800ced6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ce96:	2300      	movs	r3, #0
 800ce98:	2200      	movs	r2, #0
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ce9e:	f000 fdcf 	bl	800da40 <xQueueGenericSend>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d016      	beq.n	800ced6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800cea8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ceaa:	f001 fa97 	bl	800e3dc <vQueueDelete>
            hSemaphore = NULL;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceb2:	e010      	b.n	800ced6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800ceb4:	6a3b      	ldr	r3, [r7, #32]
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d108      	bne.n	800cecc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	461a      	mov	r2, r3
 800cec0:	68b9      	ldr	r1, [r7, #8]
 800cec2:	68f8      	ldr	r0, [r7, #12]
 800cec4:	f000 fd46 	bl	800d954 <xQueueCreateCountingSemaphoreStatic>
 800cec8:	6278      	str	r0, [r7, #36]	@ 0x24
 800ceca:	e004      	b.n	800ced6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cecc:	68b9      	ldr	r1, [r7, #8]
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f000 fd7d 	bl	800d9ce <xQueueCreateCountingSemaphore>
 800ced4:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ced6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00c      	beq.n	800cef6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d003      	beq.n	800ceea <osSemaphoreNew+0x11e>
          name = attr->name;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	61fb      	str	r3, [r7, #28]
 800cee8:	e001      	b.n	800ceee <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800ceea:	2300      	movs	r3, #0
 800ceec:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ceee:	69f9      	ldr	r1, [r7, #28]
 800cef0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cef2:	f001 fbc1 	bl	800e678 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800cef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3728      	adds	r7, #40	@ 0x28
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	2000a08c 	.word	0x2000a08c

0800cf04 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b088      	sub	sp, #32
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cf12:	2300      	movs	r3, #0
 800cf14:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d103      	bne.n	800cf24 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800cf1c:	f06f 0303 	mvn.w	r3, #3
 800cf20:	61fb      	str	r3, [r7, #28]
 800cf22:	e04b      	b.n	800cfbc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf24:	f3ef 8305 	mrs	r3, IPSR
 800cf28:	617b      	str	r3, [r7, #20]
  return(result);
 800cf2a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d10f      	bne.n	800cf50 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf30:	f3ef 8310 	mrs	r3, PRIMASK
 800cf34:	613b      	str	r3, [r7, #16]
  return(result);
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d105      	bne.n	800cf48 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf3c:	f3ef 8311 	mrs	r3, BASEPRI
 800cf40:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d026      	beq.n	800cf96 <osSemaphoreAcquire+0x92>
 800cf48:	4b1f      	ldr	r3, [pc, #124]	@ (800cfc8 <osSemaphoreAcquire+0xc4>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d122      	bne.n	800cf96 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d003      	beq.n	800cf5e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800cf56:	f06f 0303 	mvn.w	r3, #3
 800cf5a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800cf5c:	e02d      	b.n	800cfba <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cf62:	f107 0308 	add.w	r3, r7, #8
 800cf66:	461a      	mov	r2, r3
 800cf68:	2100      	movs	r1, #0
 800cf6a:	69b8      	ldr	r0, [r7, #24]
 800cf6c:	f001 f9ae 	bl	800e2cc <xQueueReceiveFromISR>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d003      	beq.n	800cf7e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800cf76:	f06f 0302 	mvn.w	r3, #2
 800cf7a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800cf7c:	e01d      	b.n	800cfba <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d01a      	beq.n	800cfba <osSemaphoreAcquire+0xb6>
 800cf84:	4b11      	ldr	r3, [pc, #68]	@ (800cfcc <osSemaphoreAcquire+0xc8>)
 800cf86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf8a:	601a      	str	r2, [r3, #0]
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800cf94:	e011      	b.n	800cfba <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800cf96:	6839      	ldr	r1, [r7, #0]
 800cf98:	69b8      	ldr	r0, [r7, #24]
 800cf9a:	f001 f87f 	bl	800e09c <xQueueSemaphoreTake>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d00b      	beq.n	800cfbc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d003      	beq.n	800cfb2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800cfaa:	f06f 0301 	mvn.w	r3, #1
 800cfae:	61fb      	str	r3, [r7, #28]
 800cfb0:	e004      	b.n	800cfbc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800cfb2:	f06f 0302 	mvn.w	r3, #2
 800cfb6:	61fb      	str	r3, [r7, #28]
 800cfb8:	e000      	b.n	800cfbc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800cfba:	bf00      	nop
      }
    }
  }

  return (stat);
 800cfbc:	69fb      	ldr	r3, [r7, #28]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3720      	adds	r7, #32
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	2000a08c 	.word	0x2000a08c
 800cfcc:	e000ed04 	.word	0xe000ed04

0800cfd0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b088      	sub	sp, #32
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800cfe0:	69bb      	ldr	r3, [r7, #24]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d103      	bne.n	800cfee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800cfe6:	f06f 0303 	mvn.w	r3, #3
 800cfea:	61fb      	str	r3, [r7, #28]
 800cfec:	e03e      	b.n	800d06c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfee:	f3ef 8305 	mrs	r3, IPSR
 800cff2:	617b      	str	r3, [r7, #20]
  return(result);
 800cff4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10f      	bne.n	800d01a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cffa:	f3ef 8310 	mrs	r3, PRIMASK
 800cffe:	613b      	str	r3, [r7, #16]
  return(result);
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d105      	bne.n	800d012 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d006:	f3ef 8311 	mrs	r3, BASEPRI
 800d00a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d01e      	beq.n	800d050 <osSemaphoreRelease+0x80>
 800d012:	4b19      	ldr	r3, [pc, #100]	@ (800d078 <osSemaphoreRelease+0xa8>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2b02      	cmp	r3, #2
 800d018:	d11a      	bne.n	800d050 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800d01a:	2300      	movs	r3, #0
 800d01c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d01e:	f107 0308 	add.w	r3, r7, #8
 800d022:	4619      	mov	r1, r3
 800d024:	69b8      	ldr	r0, [r7, #24]
 800d026:	f000 feb8 	bl	800dd9a <xQueueGiveFromISR>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d003      	beq.n	800d038 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800d030:	f06f 0302 	mvn.w	r3, #2
 800d034:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d036:	e018      	b.n	800d06a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d015      	beq.n	800d06a <osSemaphoreRelease+0x9a>
 800d03e:	4b0f      	ldr	r3, [pc, #60]	@ (800d07c <osSemaphoreRelease+0xac>)
 800d040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d044:	601a      	str	r2, [r3, #0]
 800d046:	f3bf 8f4f 	dsb	sy
 800d04a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d04e:	e00c      	b.n	800d06a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d050:	2300      	movs	r3, #0
 800d052:	2200      	movs	r2, #0
 800d054:	2100      	movs	r1, #0
 800d056:	69b8      	ldr	r0, [r7, #24]
 800d058:	f000 fcf2 	bl	800da40 <xQueueGenericSend>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d004      	beq.n	800d06c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800d062:	f06f 0302 	mvn.w	r3, #2
 800d066:	61fb      	str	r3, [r7, #28]
 800d068:	e000      	b.n	800d06c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d06a:	bf00      	nop
    }
  }

  return (stat);
 800d06c:	69fb      	ldr	r3, [r7, #28]
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3720      	adds	r7, #32
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	2000a08c 	.word	0x2000a08c
 800d07c:	e000ed04 	.word	0xe000ed04

0800d080 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d080:	b580      	push	{r7, lr}
 800d082:	b08c      	sub	sp, #48	@ 0x30
 800d084:	af02      	add	r7, sp, #8
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d08c:	2300      	movs	r3, #0
 800d08e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d090:	f3ef 8305 	mrs	r3, IPSR
 800d094:	61bb      	str	r3, [r7, #24]
  return(result);
 800d096:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d16f      	bne.n	800d17c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d09c:	f3ef 8310 	mrs	r3, PRIMASK
 800d0a0:	617b      	str	r3, [r7, #20]
  return(result);
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d105      	bne.n	800d0b4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0a8:	f3ef 8311 	mrs	r3, BASEPRI
 800d0ac:	613b      	str	r3, [r7, #16]
  return(result);
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d003      	beq.n	800d0bc <osMessageQueueNew+0x3c>
 800d0b4:	4b34      	ldr	r3, [pc, #208]	@ (800d188 <osMessageQueueNew+0x108>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b02      	cmp	r3, #2
 800d0ba:	d05f      	beq.n	800d17c <osMessageQueueNew+0xfc>
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d05c      	beq.n	800d17c <osMessageQueueNew+0xfc>
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d059      	beq.n	800d17c <osMessageQueueNew+0xfc>
    mem = -1;
 800d0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d029      	beq.n	800d128 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	689b      	ldr	r3, [r3, #8]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d012      	beq.n	800d102 <osMessageQueueNew+0x82>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	2b4f      	cmp	r3, #79	@ 0x4f
 800d0e2:	d90e      	bls.n	800d102 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00a      	beq.n	800d102 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	695a      	ldr	r2, [r3, #20]
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	68b9      	ldr	r1, [r7, #8]
 800d0f4:	fb01 f303 	mul.w	r3, r1, r3
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d302      	bcc.n	800d102 <osMessageQueueNew+0x82>
        mem = 1;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	623b      	str	r3, [r7, #32]
 800d100:	e014      	b.n	800d12c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d110      	bne.n	800d12c <osMessageQueueNew+0xac>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d10c      	bne.n	800d12c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d116:	2b00      	cmp	r3, #0
 800d118:	d108      	bne.n	800d12c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	695b      	ldr	r3, [r3, #20]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d104      	bne.n	800d12c <osMessageQueueNew+0xac>
          mem = 0;
 800d122:	2300      	movs	r3, #0
 800d124:	623b      	str	r3, [r7, #32]
 800d126:	e001      	b.n	800d12c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d128:	2300      	movs	r3, #0
 800d12a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d12c:	6a3b      	ldr	r3, [r7, #32]
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d10b      	bne.n	800d14a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	691a      	ldr	r2, [r3, #16]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	2100      	movs	r1, #0
 800d13c:	9100      	str	r1, [sp, #0]
 800d13e:	68b9      	ldr	r1, [r7, #8]
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f000 fa5d 	bl	800d600 <xQueueGenericCreateStatic>
 800d146:	6278      	str	r0, [r7, #36]	@ 0x24
 800d148:	e008      	b.n	800d15c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800d14a:	6a3b      	ldr	r3, [r7, #32]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d105      	bne.n	800d15c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d150:	2200      	movs	r2, #0
 800d152:	68b9      	ldr	r1, [r7, #8]
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f000 fada 	bl	800d70e <xQueueGenericCreate>
 800d15a:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d00c      	beq.n	800d17c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d003      	beq.n	800d170 <osMessageQueueNew+0xf0>
        name = attr->name;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	61fb      	str	r3, [r7, #28]
 800d16e:	e001      	b.n	800d174 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800d170:	2300      	movs	r3, #0
 800d172:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d174:	69f9      	ldr	r1, [r7, #28]
 800d176:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d178:	f001 fa7e 	bl	800e678 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3728      	adds	r7, #40	@ 0x28
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	2000a08c 	.word	0x2000a08c

0800d18c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b08a      	sub	sp, #40	@ 0x28
 800d190:	af00      	add	r7, sp, #0
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	603b      	str	r3, [r7, #0]
 800d198:	4613      	mov	r3, r2
 800d19a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1a4:	f3ef 8305 	mrs	r3, IPSR
 800d1a8:	61fb      	str	r3, [r7, #28]
  return(result);
 800d1aa:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d10f      	bne.n	800d1d0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1b0:	f3ef 8310 	mrs	r3, PRIMASK
 800d1b4:	61bb      	str	r3, [r7, #24]
  return(result);
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d105      	bne.n	800d1c8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1bc:	f3ef 8311 	mrs	r3, BASEPRI
 800d1c0:	617b      	str	r3, [r7, #20]
  return(result);
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d02c      	beq.n	800d222 <osMessageQueuePut+0x96>
 800d1c8:	4b28      	ldr	r3, [pc, #160]	@ (800d26c <osMessageQueuePut+0xe0>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	d128      	bne.n	800d222 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1d0:	6a3b      	ldr	r3, [r7, #32]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d005      	beq.n	800d1e2 <osMessageQueuePut+0x56>
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d002      	beq.n	800d1e2 <osMessageQueuePut+0x56>
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d003      	beq.n	800d1ea <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d1e2:	f06f 0303 	mvn.w	r3, #3
 800d1e6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1e8:	e039      	b.n	800d25e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d1ee:	f107 0210 	add.w	r2, r7, #16
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	68b9      	ldr	r1, [r7, #8]
 800d1f6:	6a38      	ldr	r0, [r7, #32]
 800d1f8:	f000 fd2c 	bl	800dc54 <xQueueGenericSendFromISR>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d003      	beq.n	800d20a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d202:	f06f 0302 	mvn.w	r3, #2
 800d206:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d208:	e029      	b.n	800d25e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d026      	beq.n	800d25e <osMessageQueuePut+0xd2>
 800d210:	4b17      	ldr	r3, [pc, #92]	@ (800d270 <osMessageQueuePut+0xe4>)
 800d212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d216:	601a      	str	r2, [r3, #0]
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d220:	e01d      	b.n	800d25e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d222:	6a3b      	ldr	r3, [r7, #32]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <osMessageQueuePut+0xa2>
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d103      	bne.n	800d236 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d22e:	f06f 0303 	mvn.w	r3, #3
 800d232:	627b      	str	r3, [r7, #36]	@ 0x24
 800d234:	e014      	b.n	800d260 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d236:	2300      	movs	r3, #0
 800d238:	683a      	ldr	r2, [r7, #0]
 800d23a:	68b9      	ldr	r1, [r7, #8]
 800d23c:	6a38      	ldr	r0, [r7, #32]
 800d23e:	f000 fbff 	bl	800da40 <xQueueGenericSend>
 800d242:	4603      	mov	r3, r0
 800d244:	2b01      	cmp	r3, #1
 800d246:	d00b      	beq.n	800d260 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d003      	beq.n	800d256 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d24e:	f06f 0301 	mvn.w	r3, #1
 800d252:	627b      	str	r3, [r7, #36]	@ 0x24
 800d254:	e004      	b.n	800d260 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d256:	f06f 0302 	mvn.w	r3, #2
 800d25a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d25c:	e000      	b.n	800d260 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d25e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d262:	4618      	mov	r0, r3
 800d264:	3728      	adds	r7, #40	@ 0x28
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	2000a08c 	.word	0x2000a08c
 800d270:	e000ed04 	.word	0xe000ed04

0800d274 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d274:	b580      	push	{r7, lr}
 800d276:	b08a      	sub	sp, #40	@ 0x28
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	607a      	str	r2, [r7, #4]
 800d280:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d286:	2300      	movs	r3, #0
 800d288:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d28a:	f3ef 8305 	mrs	r3, IPSR
 800d28e:	61fb      	str	r3, [r7, #28]
  return(result);
 800d290:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10f      	bne.n	800d2b6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d296:	f3ef 8310 	mrs	r3, PRIMASK
 800d29a:	61bb      	str	r3, [r7, #24]
  return(result);
 800d29c:	69bb      	ldr	r3, [r7, #24]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d105      	bne.n	800d2ae <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d2a2:	f3ef 8311 	mrs	r3, BASEPRI
 800d2a6:	617b      	str	r3, [r7, #20]
  return(result);
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d02c      	beq.n	800d308 <osMessageQueueGet+0x94>
 800d2ae:	4b28      	ldr	r3, [pc, #160]	@ (800d350 <osMessageQueueGet+0xdc>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	d128      	bne.n	800d308 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2b6:	6a3b      	ldr	r3, [r7, #32]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d005      	beq.n	800d2c8 <osMessageQueueGet+0x54>
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d002      	beq.n	800d2c8 <osMessageQueueGet+0x54>
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d003      	beq.n	800d2d0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d2c8:	f06f 0303 	mvn.w	r3, #3
 800d2cc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2ce:	e038      	b.n	800d342 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d2d4:	f107 0310 	add.w	r3, r7, #16
 800d2d8:	461a      	mov	r2, r3
 800d2da:	68b9      	ldr	r1, [r7, #8]
 800d2dc:	6a38      	ldr	r0, [r7, #32]
 800d2de:	f000 fff5 	bl	800e2cc <xQueueReceiveFromISR>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d003      	beq.n	800d2f0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d2e8:	f06f 0302 	mvn.w	r3, #2
 800d2ec:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2ee:	e028      	b.n	800d342 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d025      	beq.n	800d342 <osMessageQueueGet+0xce>
 800d2f6:	4b17      	ldr	r3, [pc, #92]	@ (800d354 <osMessageQueueGet+0xe0>)
 800d2f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2fc:	601a      	str	r2, [r3, #0]
 800d2fe:	f3bf 8f4f 	dsb	sy
 800d302:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d306:	e01c      	b.n	800d342 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d308:	6a3b      	ldr	r3, [r7, #32]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d002      	beq.n	800d314 <osMessageQueueGet+0xa0>
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d103      	bne.n	800d31c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d314:	f06f 0303 	mvn.w	r3, #3
 800d318:	627b      	str	r3, [r7, #36]	@ 0x24
 800d31a:	e013      	b.n	800d344 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d31c:	683a      	ldr	r2, [r7, #0]
 800d31e:	68b9      	ldr	r1, [r7, #8]
 800d320:	6a38      	ldr	r0, [r7, #32]
 800d322:	f000 fdd3 	bl	800decc <xQueueReceive>
 800d326:	4603      	mov	r3, r0
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d00b      	beq.n	800d344 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d003      	beq.n	800d33a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d332:	f06f 0301 	mvn.w	r3, #1
 800d336:	627b      	str	r3, [r7, #36]	@ 0x24
 800d338:	e004      	b.n	800d344 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d33a:	f06f 0302 	mvn.w	r3, #2
 800d33e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d340:	e000      	b.n	800d344 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d342:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d346:	4618      	mov	r0, r3
 800d348:	3728      	adds	r7, #40	@ 0x28
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	2000a08c 	.word	0x2000a08c
 800d354:	e000ed04 	.word	0xe000ed04

0800d358 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	4a07      	ldr	r2, [pc, #28]	@ (800d384 <vApplicationGetIdleTaskMemory+0x2c>)
 800d368:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	4a06      	ldr	r2, [pc, #24]	@ (800d388 <vApplicationGetIdleTaskMemory+0x30>)
 800d36e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d376:	601a      	str	r2, [r3, #0]
}
 800d378:	bf00      	nop
 800d37a:	3714      	adds	r7, #20
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr
 800d384:	2000a090 	.word	0x2000a090
 800d388:	2000a138 	.word	0x2000a138

0800d38c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d38c:	b480      	push	{r7}
 800d38e:	b085      	sub	sp, #20
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	4a07      	ldr	r2, [pc, #28]	@ (800d3b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800d39c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	4a06      	ldr	r2, [pc, #24]	@ (800d3bc <vApplicationGetTimerTaskMemory+0x30>)
 800d3a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3aa:	601a      	str	r2, [r3, #0]
}
 800d3ac:	bf00      	nop
 800d3ae:	3714      	adds	r7, #20
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr
 800d3b8:	2000a538 	.word	0x2000a538
 800d3bc:	2000a5e0 	.word	0x2000a5e0

0800d3c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f103 0208 	add.w	r2, r3, #8
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f103 0208 	add.w	r2, r3, #8
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f103 0208 	add.w	r2, r3, #8
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d3f4:	bf00      	nop
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d40e:	bf00      	nop
 800d410:	370c      	adds	r7, #12
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr

0800d41a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d41a:	b480      	push	{r7}
 800d41c:	b085      	sub	sp, #20
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
 800d422:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	689a      	ldr	r2, [r3, #8]
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	683a      	ldr	r2, [r7, #0]
 800d43e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	683a      	ldr	r2, [r7, #0]
 800d444:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	1c5a      	adds	r2, r3, #1
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	601a      	str	r2, [r3, #0]
}
 800d456:	bf00      	nop
 800d458:	3714      	adds	r7, #20
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr

0800d462 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d462:	b480      	push	{r7}
 800d464:	b085      	sub	sp, #20
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
 800d46a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d478:	d103      	bne.n	800d482 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	691b      	ldr	r3, [r3, #16]
 800d47e:	60fb      	str	r3, [r7, #12]
 800d480:	e00c      	b.n	800d49c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	3308      	adds	r3, #8
 800d486:	60fb      	str	r3, [r7, #12]
 800d488:	e002      	b.n	800d490 <vListInsert+0x2e>
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	60fb      	str	r3, [r7, #12]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d2f6      	bcs.n	800d48a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	685a      	ldr	r2, [r3, #4]
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	683a      	ldr	r2, [r7, #0]
 800d4aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	68fa      	ldr	r2, [r7, #12]
 800d4b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	683a      	ldr	r2, [r7, #0]
 800d4b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	1c5a      	adds	r2, r3, #1
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	601a      	str	r2, [r3, #0]
}
 800d4c8:	bf00      	nop
 800d4ca:	3714      	adds	r7, #20
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b085      	sub	sp, #20
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	691b      	ldr	r3, [r3, #16]
 800d4e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	687a      	ldr	r2, [r7, #4]
 800d4e8:	6892      	ldr	r2, [r2, #8]
 800d4ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	689b      	ldr	r3, [r3, #8]
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	6852      	ldr	r2, [r2, #4]
 800d4f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d103      	bne.n	800d508 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	689a      	ldr	r2, [r3, #8]
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	1e5a      	subs	r2, r3, #1
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3714      	adds	r7, #20
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d10d      	bne.n	800d558 <xQueueGenericReset+0x30>
	__asm volatile
 800d53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d540:	b672      	cpsid	i
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	b662      	cpsie	i
 800d550:	60bb      	str	r3, [r7, #8]
}
 800d552:	bf00      	nop
 800d554:	bf00      	nop
 800d556:	e7fd      	b.n	800d554 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d558:	f002 ff48 	bl	80103ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d564:	68f9      	ldr	r1, [r7, #12]
 800d566:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d568:	fb01 f303 	mul.w	r3, r1, r3
 800d56c:	441a      	add	r2, r3
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2200      	movs	r2, #0
 800d576:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d588:	3b01      	subs	r3, #1
 800d58a:	68f9      	ldr	r1, [r7, #12]
 800d58c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d58e:	fb01 f303 	mul.w	r3, r1, r3
 800d592:	441a      	add	r2, r3
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	22ff      	movs	r2, #255	@ 0xff
 800d59c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	22ff      	movs	r2, #255	@ 0xff
 800d5a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d114      	bne.n	800d5d8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d01a      	beq.n	800d5ec <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	3310      	adds	r3, #16
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f001 fdc4 	bl	800f148 <xTaskRemoveFromEventList>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d012      	beq.n	800d5ec <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d5fc <xQueueGenericReset+0xd4>)
 800d5c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5cc:	601a      	str	r2, [r3, #0]
 800d5ce:	f3bf 8f4f 	dsb	sy
 800d5d2:	f3bf 8f6f 	isb	sy
 800d5d6:	e009      	b.n	800d5ec <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	3310      	adds	r3, #16
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7ff feef 	bl	800d3c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	3324      	adds	r3, #36	@ 0x24
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7ff feea 	bl	800d3c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d5ec:	f002 ff34 	bl	8010458 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d5f0:	2301      	movs	r3, #1
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	e000ed04 	.word	0xe000ed04

0800d600 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d600:	b580      	push	{r7, lr}
 800d602:	b08e      	sub	sp, #56	@ 0x38
 800d604:	af02      	add	r7, sp, #8
 800d606:	60f8      	str	r0, [r7, #12]
 800d608:	60b9      	str	r1, [r7, #8]
 800d60a:	607a      	str	r2, [r7, #4]
 800d60c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10d      	bne.n	800d630 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800d614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d618:	b672      	cpsid	i
 800d61a:	f383 8811 	msr	BASEPRI, r3
 800d61e:	f3bf 8f6f 	isb	sy
 800d622:	f3bf 8f4f 	dsb	sy
 800d626:	b662      	cpsie	i
 800d628:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d62a:	bf00      	nop
 800d62c:	bf00      	nop
 800d62e:	e7fd      	b.n	800d62c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d10d      	bne.n	800d652 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800d636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d63a:	b672      	cpsid	i
 800d63c:	f383 8811 	msr	BASEPRI, r3
 800d640:	f3bf 8f6f 	isb	sy
 800d644:	f3bf 8f4f 	dsb	sy
 800d648:	b662      	cpsie	i
 800d64a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d64c:	bf00      	nop
 800d64e:	bf00      	nop
 800d650:	e7fd      	b.n	800d64e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d002      	beq.n	800d65e <xQueueGenericCreateStatic+0x5e>
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d001      	beq.n	800d662 <xQueueGenericCreateStatic+0x62>
 800d65e:	2301      	movs	r3, #1
 800d660:	e000      	b.n	800d664 <xQueueGenericCreateStatic+0x64>
 800d662:	2300      	movs	r3, #0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d10d      	bne.n	800d684 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800d668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d66c:	b672      	cpsid	i
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	b662      	cpsie	i
 800d67c:	623b      	str	r3, [r7, #32]
}
 800d67e:	bf00      	nop
 800d680:	bf00      	nop
 800d682:	e7fd      	b.n	800d680 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d102      	bne.n	800d690 <xQueueGenericCreateStatic+0x90>
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d101      	bne.n	800d694 <xQueueGenericCreateStatic+0x94>
 800d690:	2301      	movs	r3, #1
 800d692:	e000      	b.n	800d696 <xQueueGenericCreateStatic+0x96>
 800d694:	2300      	movs	r3, #0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d10d      	bne.n	800d6b6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800d69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d69e:	b672      	cpsid	i
 800d6a0:	f383 8811 	msr	BASEPRI, r3
 800d6a4:	f3bf 8f6f 	isb	sy
 800d6a8:	f3bf 8f4f 	dsb	sy
 800d6ac:	b662      	cpsie	i
 800d6ae:	61fb      	str	r3, [r7, #28]
}
 800d6b0:	bf00      	nop
 800d6b2:	bf00      	nop
 800d6b4:	e7fd      	b.n	800d6b2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d6b6:	2350      	movs	r3, #80	@ 0x50
 800d6b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	2b50      	cmp	r3, #80	@ 0x50
 800d6be:	d00d      	beq.n	800d6dc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800d6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c4:	b672      	cpsid	i
 800d6c6:	f383 8811 	msr	BASEPRI, r3
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	b662      	cpsie	i
 800d6d4:	61bb      	str	r3, [r7, #24]
}
 800d6d6:	bf00      	nop
 800d6d8:	bf00      	nop
 800d6da:	e7fd      	b.n	800d6d8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d6dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d6e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00d      	beq.n	800d704 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d6f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	68b9      	ldr	r1, [r7, #8]
 800d6fe:	68f8      	ldr	r0, [r7, #12]
 800d700:	f000 f848 	bl	800d794 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d706:	4618      	mov	r0, r3
 800d708:	3730      	adds	r7, #48	@ 0x30
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b08a      	sub	sp, #40	@ 0x28
 800d712:	af02      	add	r7, sp, #8
 800d714:	60f8      	str	r0, [r7, #12]
 800d716:	60b9      	str	r1, [r7, #8]
 800d718:	4613      	mov	r3, r2
 800d71a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d10d      	bne.n	800d73e <xQueueGenericCreate+0x30>
	__asm volatile
 800d722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d726:	b672      	cpsid	i
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	b662      	cpsie	i
 800d736:	613b      	str	r3, [r7, #16]
}
 800d738:	bf00      	nop
 800d73a:	bf00      	nop
 800d73c:	e7fd      	b.n	800d73a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d102      	bne.n	800d74a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d744:	2300      	movs	r3, #0
 800d746:	61fb      	str	r3, [r7, #28]
 800d748:	e004      	b.n	800d754 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	68ba      	ldr	r2, [r7, #8]
 800d74e:	fb02 f303 	mul.w	r3, r2, r3
 800d752:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	3350      	adds	r3, #80	@ 0x50
 800d758:	4618      	mov	r0, r3
 800d75a:	f002 ff75 	bl	8010648 <pvPortMalloc>
 800d75e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d011      	beq.n	800d78a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d766:	69bb      	ldr	r3, [r7, #24]
 800d768:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	3350      	adds	r3, #80	@ 0x50
 800d76e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	2200      	movs	r2, #0
 800d774:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d778:	79fa      	ldrb	r2, [r7, #7]
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	4613      	mov	r3, r2
 800d780:	697a      	ldr	r2, [r7, #20]
 800d782:	68b9      	ldr	r1, [r7, #8]
 800d784:	68f8      	ldr	r0, [r7, #12]
 800d786:	f000 f805 	bl	800d794 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d78a:	69bb      	ldr	r3, [r7, #24]
	}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3720      	adds	r7, #32
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
 800d7a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d103      	bne.n	800d7b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d7a8:	69bb      	ldr	r3, [r7, #24]
 800d7aa:	69ba      	ldr	r2, [r7, #24]
 800d7ac:	601a      	str	r2, [r3, #0]
 800d7ae:	e002      	b.n	800d7b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	68fa      	ldr	r2, [r7, #12]
 800d7ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d7c2:	2101      	movs	r1, #1
 800d7c4:	69b8      	ldr	r0, [r7, #24]
 800d7c6:	f7ff feaf 	bl	800d528 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	78fa      	ldrb	r2, [r7, #3]
 800d7ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d7d2:	bf00      	nop
 800d7d4:	3710      	adds	r7, #16
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b082      	sub	sp, #8
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d00e      	beq.n	800d806 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	2100      	movs	r1, #0
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 f91d 	bl	800da40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d806:	bf00      	nop
 800d808:	3708      	adds	r7, #8
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b086      	sub	sp, #24
 800d812:	af00      	add	r7, sp, #0
 800d814:	4603      	mov	r3, r0
 800d816:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d818:	2301      	movs	r3, #1
 800d81a:	617b      	str	r3, [r7, #20]
 800d81c:	2300      	movs	r3, #0
 800d81e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d820:	79fb      	ldrb	r3, [r7, #7]
 800d822:	461a      	mov	r2, r3
 800d824:	6939      	ldr	r1, [r7, #16]
 800d826:	6978      	ldr	r0, [r7, #20]
 800d828:	f7ff ff71 	bl	800d70e <xQueueGenericCreate>
 800d82c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d82e:	68f8      	ldr	r0, [r7, #12]
 800d830:	f7ff ffd3 	bl	800d7da <prvInitialiseMutex>

		return xNewQueue;
 800d834:	68fb      	ldr	r3, [r7, #12]
	}
 800d836:	4618      	mov	r0, r3
 800d838:	3718      	adds	r7, #24
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b088      	sub	sp, #32
 800d842:	af02      	add	r7, sp, #8
 800d844:	4603      	mov	r3, r0
 800d846:	6039      	str	r1, [r7, #0]
 800d848:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d84a:	2301      	movs	r3, #1
 800d84c:	617b      	str	r3, [r7, #20]
 800d84e:	2300      	movs	r3, #0
 800d850:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d852:	79fb      	ldrb	r3, [r7, #7]
 800d854:	9300      	str	r3, [sp, #0]
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	2200      	movs	r2, #0
 800d85a:	6939      	ldr	r1, [r7, #16]
 800d85c:	6978      	ldr	r0, [r7, #20]
 800d85e:	f7ff fecf 	bl	800d600 <xQueueGenericCreateStatic>
 800d862:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d864:	68f8      	ldr	r0, [r7, #12]
 800d866:	f7ff ffb8 	bl	800d7da <prvInitialiseMutex>

		return xNewQueue;
 800d86a:	68fb      	ldr	r3, [r7, #12]
	}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3718      	adds	r7, #24
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d874:	b590      	push	{r4, r7, lr}
 800d876:	b087      	sub	sp, #28
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d10d      	bne.n	800d8a2 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800d886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88a:	b672      	cpsid	i
 800d88c:	f383 8811 	msr	BASEPRI, r3
 800d890:	f3bf 8f6f 	isb	sy
 800d894:	f3bf 8f4f 	dsb	sy
 800d898:	b662      	cpsie	i
 800d89a:	60fb      	str	r3, [r7, #12]
}
 800d89c:	bf00      	nop
 800d89e:	bf00      	nop
 800d8a0:	e7fd      	b.n	800d89e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	689c      	ldr	r4, [r3, #8]
 800d8a6:	f001 fe1d 	bl	800f4e4 <xTaskGetCurrentTaskHandle>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	429c      	cmp	r4, r3
 800d8ae:	d111      	bne.n	800d8d4 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	1e5a      	subs	r2, r3, #1
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	68db      	ldr	r3, [r3, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d105      	bne.n	800d8ce <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	2100      	movs	r1, #0
 800d8c8:	6938      	ldr	r0, [r7, #16]
 800d8ca:	f000 f8b9 	bl	800da40 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	617b      	str	r3, [r7, #20]
 800d8d2:	e001      	b.n	800d8d8 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d8d8:	697b      	ldr	r3, [r7, #20]
	}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	371c      	adds	r7, #28
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd90      	pop	{r4, r7, pc}

0800d8e2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d8e2:	b590      	push	{r4, r7, lr}
 800d8e4:	b087      	sub	sp, #28
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
 800d8ea:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d10d      	bne.n	800d912 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800d8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8fa:	b672      	cpsid	i
 800d8fc:	f383 8811 	msr	BASEPRI, r3
 800d900:	f3bf 8f6f 	isb	sy
 800d904:	f3bf 8f4f 	dsb	sy
 800d908:	b662      	cpsie	i
 800d90a:	60fb      	str	r3, [r7, #12]
}
 800d90c:	bf00      	nop
 800d90e:	bf00      	nop
 800d910:	e7fd      	b.n	800d90e <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	689c      	ldr	r4, [r3, #8]
 800d916:	f001 fde5 	bl	800f4e4 <xTaskGetCurrentTaskHandle>
 800d91a:	4603      	mov	r3, r0
 800d91c:	429c      	cmp	r4, r3
 800d91e:	d107      	bne.n	800d930 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	1c5a      	adds	r2, r3, #1
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d92a:	2301      	movs	r3, #1
 800d92c:	617b      	str	r3, [r7, #20]
 800d92e:	e00c      	b.n	800d94a <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d930:	6839      	ldr	r1, [r7, #0]
 800d932:	6938      	ldr	r0, [r7, #16]
 800d934:	f000 fbb2 	bl	800e09c <xQueueSemaphoreTake>
 800d938:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d004      	beq.n	800d94a <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	1c5a      	adds	r2, r3, #1
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d94a:	697b      	ldr	r3, [r7, #20]
	}
 800d94c:	4618      	mov	r0, r3
 800d94e:	371c      	adds	r7, #28
 800d950:	46bd      	mov	sp, r7
 800d952:	bd90      	pop	{r4, r7, pc}

0800d954 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d954:	b580      	push	{r7, lr}
 800d956:	b08a      	sub	sp, #40	@ 0x28
 800d958:	af02      	add	r7, sp, #8
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d10d      	bne.n	800d982 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800d966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d96a:	b672      	cpsid	i
 800d96c:	f383 8811 	msr	BASEPRI, r3
 800d970:	f3bf 8f6f 	isb	sy
 800d974:	f3bf 8f4f 	dsb	sy
 800d978:	b662      	cpsie	i
 800d97a:	61bb      	str	r3, [r7, #24]
}
 800d97c:	bf00      	nop
 800d97e:	bf00      	nop
 800d980:	e7fd      	b.n	800d97e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d982:	68ba      	ldr	r2, [r7, #8]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	429a      	cmp	r2, r3
 800d988:	d90d      	bls.n	800d9a6 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800d98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d98e:	b672      	cpsid	i
 800d990:	f383 8811 	msr	BASEPRI, r3
 800d994:	f3bf 8f6f 	isb	sy
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	b662      	cpsie	i
 800d99e:	617b      	str	r3, [r7, #20]
}
 800d9a0:	bf00      	nop
 800d9a2:	bf00      	nop
 800d9a4:	e7fd      	b.n	800d9a2 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d9a6:	2302      	movs	r3, #2
 800d9a8:	9300      	str	r3, [sp, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	68f8      	ldr	r0, [r7, #12]
 800d9b2:	f7ff fe25 	bl	800d600 <xQueueGenericCreateStatic>
 800d9b6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d9b8:	69fb      	ldr	r3, [r7, #28]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d002      	beq.n	800d9c4 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	68ba      	ldr	r2, [r7, #8]
 800d9c2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d9c4:	69fb      	ldr	r3, [r7, #28]
	}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3720      	adds	r7, #32
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b086      	sub	sp, #24
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
 800d9d6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10d      	bne.n	800d9fa <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e2:	b672      	cpsid	i
 800d9e4:	f383 8811 	msr	BASEPRI, r3
 800d9e8:	f3bf 8f6f 	isb	sy
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	b662      	cpsie	i
 800d9f2:	613b      	str	r3, [r7, #16]
}
 800d9f4:	bf00      	nop
 800d9f6:	bf00      	nop
 800d9f8:	e7fd      	b.n	800d9f6 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d9fa:	683a      	ldr	r2, [r7, #0]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d90d      	bls.n	800da1e <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800da02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da06:	b672      	cpsid	i
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	b662      	cpsie	i
 800da16:	60fb      	str	r3, [r7, #12]
}
 800da18:	bf00      	nop
 800da1a:	bf00      	nop
 800da1c:	e7fd      	b.n	800da1a <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800da1e:	2202      	movs	r2, #2
 800da20:	2100      	movs	r1, #0
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f7ff fe73 	bl	800d70e <xQueueGenericCreate>
 800da28:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d002      	beq.n	800da36 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	683a      	ldr	r2, [r7, #0]
 800da34:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800da36:	697b      	ldr	r3, [r7, #20]
	}
 800da38:	4618      	mov	r0, r3
 800da3a:	3718      	adds	r7, #24
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b08e      	sub	sp, #56	@ 0x38
 800da44:	af00      	add	r7, sp, #0
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	607a      	str	r2, [r7, #4]
 800da4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800da4e:	2300      	movs	r3, #0
 800da50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800da56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10d      	bne.n	800da78 <xQueueGenericSend+0x38>
	__asm volatile
 800da5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da60:	b672      	cpsid	i
 800da62:	f383 8811 	msr	BASEPRI, r3
 800da66:	f3bf 8f6f 	isb	sy
 800da6a:	f3bf 8f4f 	dsb	sy
 800da6e:	b662      	cpsie	i
 800da70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800da72:	bf00      	nop
 800da74:	bf00      	nop
 800da76:	e7fd      	b.n	800da74 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d103      	bne.n	800da86 <xQueueGenericSend+0x46>
 800da7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da82:	2b00      	cmp	r3, #0
 800da84:	d101      	bne.n	800da8a <xQueueGenericSend+0x4a>
 800da86:	2301      	movs	r3, #1
 800da88:	e000      	b.n	800da8c <xQueueGenericSend+0x4c>
 800da8a:	2300      	movs	r3, #0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d10d      	bne.n	800daac <xQueueGenericSend+0x6c>
	__asm volatile
 800da90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da94:	b672      	cpsid	i
 800da96:	f383 8811 	msr	BASEPRI, r3
 800da9a:	f3bf 8f6f 	isb	sy
 800da9e:	f3bf 8f4f 	dsb	sy
 800daa2:	b662      	cpsie	i
 800daa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800daa6:	bf00      	nop
 800daa8:	bf00      	nop
 800daaa:	e7fd      	b.n	800daa8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	2b02      	cmp	r3, #2
 800dab0:	d103      	bne.n	800daba <xQueueGenericSend+0x7a>
 800dab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d101      	bne.n	800dabe <xQueueGenericSend+0x7e>
 800daba:	2301      	movs	r3, #1
 800dabc:	e000      	b.n	800dac0 <xQueueGenericSend+0x80>
 800dabe:	2300      	movs	r3, #0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d10d      	bne.n	800dae0 <xQueueGenericSend+0xa0>
	__asm volatile
 800dac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dac8:	b672      	cpsid	i
 800daca:	f383 8811 	msr	BASEPRI, r3
 800dace:	f3bf 8f6f 	isb	sy
 800dad2:	f3bf 8f4f 	dsb	sy
 800dad6:	b662      	cpsie	i
 800dad8:	623b      	str	r3, [r7, #32]
}
 800dada:	bf00      	nop
 800dadc:	bf00      	nop
 800dade:	e7fd      	b.n	800dadc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dae0:	f001 fd10 	bl	800f504 <xTaskGetSchedulerState>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d102      	bne.n	800daf0 <xQueueGenericSend+0xb0>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d101      	bne.n	800daf4 <xQueueGenericSend+0xb4>
 800daf0:	2301      	movs	r3, #1
 800daf2:	e000      	b.n	800daf6 <xQueueGenericSend+0xb6>
 800daf4:	2300      	movs	r3, #0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d10d      	bne.n	800db16 <xQueueGenericSend+0xd6>
	__asm volatile
 800dafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dafe:	b672      	cpsid	i
 800db00:	f383 8811 	msr	BASEPRI, r3
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	f3bf 8f4f 	dsb	sy
 800db0c:	b662      	cpsie	i
 800db0e:	61fb      	str	r3, [r7, #28]
}
 800db10:	bf00      	nop
 800db12:	bf00      	nop
 800db14:	e7fd      	b.n	800db12 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db16:	f002 fc69 	bl	80103ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db22:	429a      	cmp	r2, r3
 800db24:	d302      	bcc.n	800db2c <xQueueGenericSend+0xec>
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	2b02      	cmp	r3, #2
 800db2a:	d129      	bne.n	800db80 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db2c:	683a      	ldr	r2, [r7, #0]
 800db2e:	68b9      	ldr	r1, [r7, #8]
 800db30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db32:	f000 fc91 	bl	800e458 <prvCopyDataToQueue>
 800db36:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d010      	beq.n	800db62 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db42:	3324      	adds	r3, #36	@ 0x24
 800db44:	4618      	mov	r0, r3
 800db46:	f001 faff 	bl	800f148 <xTaskRemoveFromEventList>
 800db4a:	4603      	mov	r3, r0
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d013      	beq.n	800db78 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800db50:	4b3f      	ldr	r3, [pc, #252]	@ (800dc50 <xQueueGenericSend+0x210>)
 800db52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db56:	601a      	str	r2, [r3, #0]
 800db58:	f3bf 8f4f 	dsb	sy
 800db5c:	f3bf 8f6f 	isb	sy
 800db60:	e00a      	b.n	800db78 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800db62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db64:	2b00      	cmp	r3, #0
 800db66:	d007      	beq.n	800db78 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800db68:	4b39      	ldr	r3, [pc, #228]	@ (800dc50 <xQueueGenericSend+0x210>)
 800db6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db6e:	601a      	str	r2, [r3, #0]
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800db78:	f002 fc6e 	bl	8010458 <vPortExitCritical>
				return pdPASS;
 800db7c:	2301      	movs	r3, #1
 800db7e:	e063      	b.n	800dc48 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d103      	bne.n	800db8e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800db86:	f002 fc67 	bl	8010458 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800db8a:	2300      	movs	r3, #0
 800db8c:	e05c      	b.n	800dc48 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db90:	2b00      	cmp	r3, #0
 800db92:	d106      	bne.n	800dba2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db94:	f107 0314 	add.w	r3, r7, #20
 800db98:	4618      	mov	r0, r3
 800db9a:	f001 fb3b 	bl	800f214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db9e:	2301      	movs	r3, #1
 800dba0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dba2:	f002 fc59 	bl	8010458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dba6:	f001 f861 	bl	800ec6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dbaa:	f002 fc1f 	bl	80103ec <vPortEnterCritical>
 800dbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dbb4:	b25b      	sxtb	r3, r3
 800dbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbba:	d103      	bne.n	800dbc4 <xQueueGenericSend+0x184>
 800dbbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dbca:	b25b      	sxtb	r3, r3
 800dbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd0:	d103      	bne.n	800dbda <xQueueGenericSend+0x19a>
 800dbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dbda:	f002 fc3d 	bl	8010458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dbde:	1d3a      	adds	r2, r7, #4
 800dbe0:	f107 0314 	add.w	r3, r7, #20
 800dbe4:	4611      	mov	r1, r2
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f001 fb2a 	bl	800f240 <xTaskCheckForTimeOut>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d124      	bne.n	800dc3c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dbf2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dbf4:	f000 fd28 	bl	800e648 <prvIsQueueFull>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d018      	beq.n	800dc30 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc00:	3310      	adds	r3, #16
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	4611      	mov	r1, r2
 800dc06:	4618      	mov	r0, r3
 800dc08:	f001 fa48 	bl	800f09c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dc0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc0e:	f000 fcb3 	bl	800e578 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dc12:	f001 f839 	bl	800ec88 <xTaskResumeAll>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f47f af7c 	bne.w	800db16 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800dc1e:	4b0c      	ldr	r3, [pc, #48]	@ (800dc50 <xQueueGenericSend+0x210>)
 800dc20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc24:	601a      	str	r2, [r3, #0]
 800dc26:	f3bf 8f4f 	dsb	sy
 800dc2a:	f3bf 8f6f 	isb	sy
 800dc2e:	e772      	b.n	800db16 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dc30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc32:	f000 fca1 	bl	800e578 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc36:	f001 f827 	bl	800ec88 <xTaskResumeAll>
 800dc3a:	e76c      	b.n	800db16 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dc3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc3e:	f000 fc9b 	bl	800e578 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc42:	f001 f821 	bl	800ec88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dc46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3738      	adds	r7, #56	@ 0x38
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	e000ed04 	.word	0xe000ed04

0800dc54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b08e      	sub	sp, #56	@ 0x38
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	60f8      	str	r0, [r7, #12]
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	607a      	str	r2, [r7, #4]
 800dc60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10d      	bne.n	800dc88 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800dc6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc70:	b672      	cpsid	i
 800dc72:	f383 8811 	msr	BASEPRI, r3
 800dc76:	f3bf 8f6f 	isb	sy
 800dc7a:	f3bf 8f4f 	dsb	sy
 800dc7e:	b662      	cpsie	i
 800dc80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dc82:	bf00      	nop
 800dc84:	bf00      	nop
 800dc86:	e7fd      	b.n	800dc84 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d103      	bne.n	800dc96 <xQueueGenericSendFromISR+0x42>
 800dc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d101      	bne.n	800dc9a <xQueueGenericSendFromISR+0x46>
 800dc96:	2301      	movs	r3, #1
 800dc98:	e000      	b.n	800dc9c <xQueueGenericSendFromISR+0x48>
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10d      	bne.n	800dcbc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800dca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dca4:	b672      	cpsid	i
 800dca6:	f383 8811 	msr	BASEPRI, r3
 800dcaa:	f3bf 8f6f 	isb	sy
 800dcae:	f3bf 8f4f 	dsb	sy
 800dcb2:	b662      	cpsie	i
 800dcb4:	623b      	str	r3, [r7, #32]
}
 800dcb6:	bf00      	nop
 800dcb8:	bf00      	nop
 800dcba:	e7fd      	b.n	800dcb8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	2b02      	cmp	r3, #2
 800dcc0:	d103      	bne.n	800dcca <xQueueGenericSendFromISR+0x76>
 800dcc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d101      	bne.n	800dcce <xQueueGenericSendFromISR+0x7a>
 800dcca:	2301      	movs	r3, #1
 800dccc:	e000      	b.n	800dcd0 <xQueueGenericSendFromISR+0x7c>
 800dcce:	2300      	movs	r3, #0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d10d      	bne.n	800dcf0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800dcd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd8:	b672      	cpsid	i
 800dcda:	f383 8811 	msr	BASEPRI, r3
 800dcde:	f3bf 8f6f 	isb	sy
 800dce2:	f3bf 8f4f 	dsb	sy
 800dce6:	b662      	cpsie	i
 800dce8:	61fb      	str	r3, [r7, #28]
}
 800dcea:	bf00      	nop
 800dcec:	bf00      	nop
 800dcee:	e7fd      	b.n	800dcec <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcf0:	f002 fc64 	bl	80105bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dcf4:	f3ef 8211 	mrs	r2, BASEPRI
 800dcf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcfc:	b672      	cpsid	i
 800dcfe:	f383 8811 	msr	BASEPRI, r3
 800dd02:	f3bf 8f6f 	isb	sy
 800dd06:	f3bf 8f4f 	dsb	sy
 800dd0a:	b662      	cpsie	i
 800dd0c:	61ba      	str	r2, [r7, #24]
 800dd0e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dd10:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd12:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d302      	bcc.n	800dd26 <xQueueGenericSendFromISR+0xd2>
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	2b02      	cmp	r3, #2
 800dd24:	d12c      	bne.n	800dd80 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd30:	683a      	ldr	r2, [r7, #0]
 800dd32:	68b9      	ldr	r1, [r7, #8]
 800dd34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd36:	f000 fb8f 	bl	800e458 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dd3a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800dd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd42:	d112      	bne.n	800dd6a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d016      	beq.n	800dd7a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd4e:	3324      	adds	r3, #36	@ 0x24
 800dd50:	4618      	mov	r0, r3
 800dd52:	f001 f9f9 	bl	800f148 <xTaskRemoveFromEventList>
 800dd56:	4603      	mov	r3, r0
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d00e      	beq.n	800dd7a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00b      	beq.n	800dd7a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2201      	movs	r2, #1
 800dd66:	601a      	str	r2, [r3, #0]
 800dd68:	e007      	b.n	800dd7a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dd6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dd6e:	3301      	adds	r3, #1
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	b25a      	sxtb	r2, r3
 800dd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800dd7e:	e001      	b.n	800dd84 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dd80:	2300      	movs	r3, #0
 800dd82:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd86:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dd8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3738      	adds	r7, #56	@ 0x38
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dd9a:	b580      	push	{r7, lr}
 800dd9c:	b08e      	sub	sp, #56	@ 0x38
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	6078      	str	r0, [r7, #4]
 800dda2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800dda8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d10d      	bne.n	800ddca <xQueueGiveFromISR+0x30>
	__asm volatile
 800ddae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb2:	b672      	cpsid	i
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	b662      	cpsie	i
 800ddc2:	623b      	str	r3, [r7, #32]
}
 800ddc4:	bf00      	nop
 800ddc6:	bf00      	nop
 800ddc8:	e7fd      	b.n	800ddc6 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ddca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d00d      	beq.n	800ddee <xQueueGiveFromISR+0x54>
	__asm volatile
 800ddd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd6:	b672      	cpsid	i
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	b662      	cpsie	i
 800dde6:	61fb      	str	r3, [r7, #28]
}
 800dde8:	bf00      	nop
 800ddea:	bf00      	nop
 800ddec:	e7fd      	b.n	800ddea <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ddee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d103      	bne.n	800ddfe <xQueueGiveFromISR+0x64>
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf8:	689b      	ldr	r3, [r3, #8]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d101      	bne.n	800de02 <xQueueGiveFromISR+0x68>
 800ddfe:	2301      	movs	r3, #1
 800de00:	e000      	b.n	800de04 <xQueueGiveFromISR+0x6a>
 800de02:	2300      	movs	r3, #0
 800de04:	2b00      	cmp	r3, #0
 800de06:	d10d      	bne.n	800de24 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800de08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de0c:	b672      	cpsid	i
 800de0e:	f383 8811 	msr	BASEPRI, r3
 800de12:	f3bf 8f6f 	isb	sy
 800de16:	f3bf 8f4f 	dsb	sy
 800de1a:	b662      	cpsie	i
 800de1c:	61bb      	str	r3, [r7, #24]
}
 800de1e:	bf00      	nop
 800de20:	bf00      	nop
 800de22:	e7fd      	b.n	800de20 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de24:	f002 fbca 	bl	80105bc <vPortValidateInterruptPriority>
	__asm volatile
 800de28:	f3ef 8211 	mrs	r2, BASEPRI
 800de2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de30:	b672      	cpsid	i
 800de32:	f383 8811 	msr	BASEPRI, r3
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	b662      	cpsie	i
 800de40:	617a      	str	r2, [r7, #20]
 800de42:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800de44:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de46:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de4c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800de4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de54:	429a      	cmp	r2, r3
 800de56:	d22b      	bcs.n	800deb0 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800de58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de64:	1c5a      	adds	r2, r3, #1
 800de66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de68:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800de6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800de6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de72:	d112      	bne.n	800de9a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d016      	beq.n	800deaa <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de7e:	3324      	adds	r3, #36	@ 0x24
 800de80:	4618      	mov	r0, r3
 800de82:	f001 f961 	bl	800f148 <xTaskRemoveFromEventList>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d00e      	beq.n	800deaa <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00b      	beq.n	800deaa <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	2201      	movs	r2, #1
 800de96:	601a      	str	r2, [r3, #0]
 800de98:	e007      	b.n	800deaa <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800de9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de9e:	3301      	adds	r3, #1
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	b25a      	sxtb	r2, r3
 800dea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800deaa:	2301      	movs	r3, #1
 800deac:	637b      	str	r3, [r7, #52]	@ 0x34
 800deae:	e001      	b.n	800deb4 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800deb0:	2300      	movs	r3, #0
 800deb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800deb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deb6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f383 8811 	msr	BASEPRI, r3
}
 800debe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3738      	adds	r7, #56	@ 0x38
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
	...

0800decc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b08c      	sub	sp, #48	@ 0x30
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ded8:	2300      	movs	r3, #0
 800deda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d10d      	bne.n	800df02 <xQueueReceive+0x36>
	__asm volatile
 800dee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deea:	b672      	cpsid	i
 800deec:	f383 8811 	msr	BASEPRI, r3
 800def0:	f3bf 8f6f 	isb	sy
 800def4:	f3bf 8f4f 	dsb	sy
 800def8:	b662      	cpsie	i
 800defa:	623b      	str	r3, [r7, #32]
}
 800defc:	bf00      	nop
 800defe:	bf00      	nop
 800df00:	e7fd      	b.n	800defe <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d103      	bne.n	800df10 <xQueueReceive+0x44>
 800df08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d101      	bne.n	800df14 <xQueueReceive+0x48>
 800df10:	2301      	movs	r3, #1
 800df12:	e000      	b.n	800df16 <xQueueReceive+0x4a>
 800df14:	2300      	movs	r3, #0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10d      	bne.n	800df36 <xQueueReceive+0x6a>
	__asm volatile
 800df1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df1e:	b672      	cpsid	i
 800df20:	f383 8811 	msr	BASEPRI, r3
 800df24:	f3bf 8f6f 	isb	sy
 800df28:	f3bf 8f4f 	dsb	sy
 800df2c:	b662      	cpsie	i
 800df2e:	61fb      	str	r3, [r7, #28]
}
 800df30:	bf00      	nop
 800df32:	bf00      	nop
 800df34:	e7fd      	b.n	800df32 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df36:	f001 fae5 	bl	800f504 <xTaskGetSchedulerState>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d102      	bne.n	800df46 <xQueueReceive+0x7a>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d101      	bne.n	800df4a <xQueueReceive+0x7e>
 800df46:	2301      	movs	r3, #1
 800df48:	e000      	b.n	800df4c <xQueueReceive+0x80>
 800df4a:	2300      	movs	r3, #0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d10d      	bne.n	800df6c <xQueueReceive+0xa0>
	__asm volatile
 800df50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df54:	b672      	cpsid	i
 800df56:	f383 8811 	msr	BASEPRI, r3
 800df5a:	f3bf 8f6f 	isb	sy
 800df5e:	f3bf 8f4f 	dsb	sy
 800df62:	b662      	cpsie	i
 800df64:	61bb      	str	r3, [r7, #24]
}
 800df66:	bf00      	nop
 800df68:	bf00      	nop
 800df6a:	e7fd      	b.n	800df68 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df6c:	f002 fa3e 	bl	80103ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df74:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d01f      	beq.n	800dfbc <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df7c:	68b9      	ldr	r1, [r7, #8]
 800df7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df80:	f000 fad4 	bl	800e52c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df86:	1e5a      	subs	r2, r3, #1
 800df88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df8a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df8e:	691b      	ldr	r3, [r3, #16]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d00f      	beq.n	800dfb4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df96:	3310      	adds	r3, #16
 800df98:	4618      	mov	r0, r3
 800df9a:	f001 f8d5 	bl	800f148 <xTaskRemoveFromEventList>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d007      	beq.n	800dfb4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dfa4:	4b3c      	ldr	r3, [pc, #240]	@ (800e098 <xQueueReceive+0x1cc>)
 800dfa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfaa:	601a      	str	r2, [r3, #0]
 800dfac:	f3bf 8f4f 	dsb	sy
 800dfb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dfb4:	f002 fa50 	bl	8010458 <vPortExitCritical>
				return pdPASS;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	e069      	b.n	800e090 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d103      	bne.n	800dfca <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dfc2:	f002 fa49 	bl	8010458 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	e062      	b.n	800e090 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dfca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d106      	bne.n	800dfde <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dfd0:	f107 0310 	add.w	r3, r7, #16
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f001 f91d 	bl	800f214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dfde:	f002 fa3b 	bl	8010458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dfe2:	f000 fe43 	bl	800ec6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dfe6:	f002 fa01 	bl	80103ec <vPortEnterCritical>
 800dfea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dff0:	b25b      	sxtb	r3, r3
 800dff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dff6:	d103      	bne.n	800e000 <xQueueReceive+0x134>
 800dff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dffa:	2200      	movs	r2, #0
 800dffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e002:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e006:	b25b      	sxtb	r3, r3
 800e008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e00c:	d103      	bne.n	800e016 <xQueueReceive+0x14a>
 800e00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e010:	2200      	movs	r2, #0
 800e012:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e016:	f002 fa1f 	bl	8010458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e01a:	1d3a      	adds	r2, r7, #4
 800e01c:	f107 0310 	add.w	r3, r7, #16
 800e020:	4611      	mov	r1, r2
 800e022:	4618      	mov	r0, r3
 800e024:	f001 f90c 	bl	800f240 <xTaskCheckForTimeOut>
 800e028:	4603      	mov	r3, r0
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d123      	bne.n	800e076 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e02e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e030:	f000 faf4 	bl	800e61c <prvIsQueueEmpty>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d017      	beq.n	800e06a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e03c:	3324      	adds	r3, #36	@ 0x24
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	4611      	mov	r1, r2
 800e042:	4618      	mov	r0, r3
 800e044:	f001 f82a 	bl	800f09c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e04a:	f000 fa95 	bl	800e578 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e04e:	f000 fe1b 	bl	800ec88 <xTaskResumeAll>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d189      	bne.n	800df6c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800e058:	4b0f      	ldr	r3, [pc, #60]	@ (800e098 <xQueueReceive+0x1cc>)
 800e05a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e05e:	601a      	str	r2, [r3, #0]
 800e060:	f3bf 8f4f 	dsb	sy
 800e064:	f3bf 8f6f 	isb	sy
 800e068:	e780      	b.n	800df6c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e06a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e06c:	f000 fa84 	bl	800e578 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e070:	f000 fe0a 	bl	800ec88 <xTaskResumeAll>
 800e074:	e77a      	b.n	800df6c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e078:	f000 fa7e 	bl	800e578 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e07c:	f000 fe04 	bl	800ec88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e080:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e082:	f000 facb 	bl	800e61c <prvIsQueueEmpty>
 800e086:	4603      	mov	r3, r0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	f43f af6f 	beq.w	800df6c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e08e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e090:	4618      	mov	r0, r3
 800e092:	3730      	adds	r7, #48	@ 0x30
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	e000ed04 	.word	0xe000ed04

0800e09c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b08e      	sub	sp, #56	@ 0x38
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10d      	bne.n	800e0d4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800e0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0bc:	b672      	cpsid	i
 800e0be:	f383 8811 	msr	BASEPRI, r3
 800e0c2:	f3bf 8f6f 	isb	sy
 800e0c6:	f3bf 8f4f 	dsb	sy
 800e0ca:	b662      	cpsie	i
 800e0cc:	623b      	str	r3, [r7, #32]
}
 800e0ce:	bf00      	nop
 800e0d0:	bf00      	nop
 800e0d2:	e7fd      	b.n	800e0d0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00d      	beq.n	800e0f8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800e0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0e0:	b672      	cpsid	i
 800e0e2:	f383 8811 	msr	BASEPRI, r3
 800e0e6:	f3bf 8f6f 	isb	sy
 800e0ea:	f3bf 8f4f 	dsb	sy
 800e0ee:	b662      	cpsie	i
 800e0f0:	61fb      	str	r3, [r7, #28]
}
 800e0f2:	bf00      	nop
 800e0f4:	bf00      	nop
 800e0f6:	e7fd      	b.n	800e0f4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e0f8:	f001 fa04 	bl	800f504 <xTaskGetSchedulerState>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d102      	bne.n	800e108 <xQueueSemaphoreTake+0x6c>
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d101      	bne.n	800e10c <xQueueSemaphoreTake+0x70>
 800e108:	2301      	movs	r3, #1
 800e10a:	e000      	b.n	800e10e <xQueueSemaphoreTake+0x72>
 800e10c:	2300      	movs	r3, #0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d10d      	bne.n	800e12e <xQueueSemaphoreTake+0x92>
	__asm volatile
 800e112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e116:	b672      	cpsid	i
 800e118:	f383 8811 	msr	BASEPRI, r3
 800e11c:	f3bf 8f6f 	isb	sy
 800e120:	f3bf 8f4f 	dsb	sy
 800e124:	b662      	cpsie	i
 800e126:	61bb      	str	r3, [r7, #24]
}
 800e128:	bf00      	nop
 800e12a:	bf00      	nop
 800e12c:	e7fd      	b.n	800e12a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e12e:	f002 f95d 	bl	80103ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e136:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d024      	beq.n	800e188 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e140:	1e5a      	subs	r2, r3, #1
 800e142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e144:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d104      	bne.n	800e158 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e14e:	f001 fb5b 	bl	800f808 <pvTaskIncrementMutexHeldCount>
 800e152:	4602      	mov	r2, r0
 800e154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e156:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e15a:	691b      	ldr	r3, [r3, #16]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00f      	beq.n	800e180 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e162:	3310      	adds	r3, #16
 800e164:	4618      	mov	r0, r3
 800e166:	f000 ffef 	bl	800f148 <xTaskRemoveFromEventList>
 800e16a:	4603      	mov	r3, r0
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d007      	beq.n	800e180 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e170:	4b55      	ldr	r3, [pc, #340]	@ (800e2c8 <xQueueSemaphoreTake+0x22c>)
 800e172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e176:	601a      	str	r2, [r3, #0]
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e180:	f002 f96a 	bl	8010458 <vPortExitCritical>
				return pdPASS;
 800e184:	2301      	movs	r3, #1
 800e186:	e09a      	b.n	800e2be <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d114      	bne.n	800e1b8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e190:	2b00      	cmp	r3, #0
 800e192:	d00d      	beq.n	800e1b0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800e194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e198:	b672      	cpsid	i
 800e19a:	f383 8811 	msr	BASEPRI, r3
 800e19e:	f3bf 8f6f 	isb	sy
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	b662      	cpsie	i
 800e1a8:	617b      	str	r3, [r7, #20]
}
 800e1aa:	bf00      	nop
 800e1ac:	bf00      	nop
 800e1ae:	e7fd      	b.n	800e1ac <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e1b0:	f002 f952 	bl	8010458 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	e082      	b.n	800e2be <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e1b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d106      	bne.n	800e1cc <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e1be:	f107 030c 	add.w	r3, r7, #12
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f001 f826 	bl	800f214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e1cc:	f002 f944 	bl	8010458 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e1d0:	f000 fd4c 	bl	800ec6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e1d4:	f002 f90a 	bl	80103ec <vPortEnterCritical>
 800e1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e1de:	b25b      	sxtb	r3, r3
 800e1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1e4:	d103      	bne.n	800e1ee <xQueueSemaphoreTake+0x152>
 800e1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e1f4:	b25b      	sxtb	r3, r3
 800e1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1fa:	d103      	bne.n	800e204 <xQueueSemaphoreTake+0x168>
 800e1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1fe:	2200      	movs	r2, #0
 800e200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e204:	f002 f928 	bl	8010458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e208:	463a      	mov	r2, r7
 800e20a:	f107 030c 	add.w	r3, r7, #12
 800e20e:	4611      	mov	r1, r2
 800e210:	4618      	mov	r0, r3
 800e212:	f001 f815 	bl	800f240 <xTaskCheckForTimeOut>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d132      	bne.n	800e282 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e21c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e21e:	f000 f9fd 	bl	800e61c <prvIsQueueEmpty>
 800e222:	4603      	mov	r3, r0
 800e224:	2b00      	cmp	r3, #0
 800e226:	d026      	beq.n	800e276 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d109      	bne.n	800e244 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800e230:	f002 f8dc 	bl	80103ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	4618      	mov	r0, r3
 800e23a:	f001 f981 	bl	800f540 <xTaskPriorityInherit>
 800e23e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e240:	f002 f90a 	bl	8010458 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e246:	3324      	adds	r3, #36	@ 0x24
 800e248:	683a      	ldr	r2, [r7, #0]
 800e24a:	4611      	mov	r1, r2
 800e24c:	4618      	mov	r0, r3
 800e24e:	f000 ff25 	bl	800f09c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e252:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e254:	f000 f990 	bl	800e578 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e258:	f000 fd16 	bl	800ec88 <xTaskResumeAll>
 800e25c:	4603      	mov	r3, r0
 800e25e:	2b00      	cmp	r3, #0
 800e260:	f47f af65 	bne.w	800e12e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800e264:	4b18      	ldr	r3, [pc, #96]	@ (800e2c8 <xQueueSemaphoreTake+0x22c>)
 800e266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e26a:	601a      	str	r2, [r3, #0]
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	f3bf 8f6f 	isb	sy
 800e274:	e75b      	b.n	800e12e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e276:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e278:	f000 f97e 	bl	800e578 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e27c:	f000 fd04 	bl	800ec88 <xTaskResumeAll>
 800e280:	e755      	b.n	800e12e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e282:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e284:	f000 f978 	bl	800e578 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e288:	f000 fcfe 	bl	800ec88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e28c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e28e:	f000 f9c5 	bl	800e61c <prvIsQueueEmpty>
 800e292:	4603      	mov	r3, r0
 800e294:	2b00      	cmp	r3, #0
 800e296:	f43f af4a 	beq.w	800e12e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00d      	beq.n	800e2bc <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800e2a0:	f002 f8a4 	bl	80103ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e2a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e2a6:	f000 f8bf 	bl	800e428 <prvGetDisinheritPriorityAfterTimeout>
 800e2aa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ae:	689b      	ldr	r3, [r3, #8]
 800e2b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f001 fa20 	bl	800f6f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e2b8:	f002 f8ce 	bl	8010458 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e2bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3738      	adds	r7, #56	@ 0x38
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	e000ed04 	.word	0xe000ed04

0800e2cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b08e      	sub	sp, #56	@ 0x38
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d10d      	bne.n	800e2fe <xQueueReceiveFromISR+0x32>
	__asm volatile
 800e2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e6:	b672      	cpsid	i
 800e2e8:	f383 8811 	msr	BASEPRI, r3
 800e2ec:	f3bf 8f6f 	isb	sy
 800e2f0:	f3bf 8f4f 	dsb	sy
 800e2f4:	b662      	cpsie	i
 800e2f6:	623b      	str	r3, [r7, #32]
}
 800e2f8:	bf00      	nop
 800e2fa:	bf00      	nop
 800e2fc:	e7fd      	b.n	800e2fa <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d103      	bne.n	800e30c <xQueueReceiveFromISR+0x40>
 800e304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d101      	bne.n	800e310 <xQueueReceiveFromISR+0x44>
 800e30c:	2301      	movs	r3, #1
 800e30e:	e000      	b.n	800e312 <xQueueReceiveFromISR+0x46>
 800e310:	2300      	movs	r3, #0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d10d      	bne.n	800e332 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800e316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e31a:	b672      	cpsid	i
 800e31c:	f383 8811 	msr	BASEPRI, r3
 800e320:	f3bf 8f6f 	isb	sy
 800e324:	f3bf 8f4f 	dsb	sy
 800e328:	b662      	cpsie	i
 800e32a:	61fb      	str	r3, [r7, #28]
}
 800e32c:	bf00      	nop
 800e32e:	bf00      	nop
 800e330:	e7fd      	b.n	800e32e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e332:	f002 f943 	bl	80105bc <vPortValidateInterruptPriority>
	__asm volatile
 800e336:	f3ef 8211 	mrs	r2, BASEPRI
 800e33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e33e:	b672      	cpsid	i
 800e340:	f383 8811 	msr	BASEPRI, r3
 800e344:	f3bf 8f6f 	isb	sy
 800e348:	f3bf 8f4f 	dsb	sy
 800e34c:	b662      	cpsie	i
 800e34e:	61ba      	str	r2, [r7, #24]
 800e350:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e352:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e354:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e35a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d02f      	beq.n	800e3c2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e364:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e368:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e36c:	68b9      	ldr	r1, [r7, #8]
 800e36e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e370:	f000 f8dc 	bl	800e52c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e376:	1e5a      	subs	r2, r3, #1
 800e378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e37a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e37c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e384:	d112      	bne.n	800e3ac <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d016      	beq.n	800e3bc <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e390:	3310      	adds	r3, #16
 800e392:	4618      	mov	r0, r3
 800e394:	f000 fed8 	bl	800f148 <xTaskRemoveFromEventList>
 800e398:	4603      	mov	r3, r0
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d00e      	beq.n	800e3bc <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d00b      	beq.n	800e3bc <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	601a      	str	r2, [r3, #0]
 800e3aa:	e007      	b.n	800e3bc <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e3ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	b25a      	sxtb	r2, r3
 800e3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3c0:	e001      	b.n	800e3c6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	f383 8811 	msr	BASEPRI, r3
}
 800e3d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3738      	adds	r7, #56	@ 0x38
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d10d      	bne.n	800e40a <vQueueDelete+0x2e>
	__asm volatile
 800e3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f2:	b672      	cpsid	i
 800e3f4:	f383 8811 	msr	BASEPRI, r3
 800e3f8:	f3bf 8f6f 	isb	sy
 800e3fc:	f3bf 8f4f 	dsb	sy
 800e400:	b662      	cpsie	i
 800e402:	60bb      	str	r3, [r7, #8]
}
 800e404:	bf00      	nop
 800e406:	bf00      	nop
 800e408:	e7fd      	b.n	800e406 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e40a:	68f8      	ldr	r0, [r7, #12]
 800e40c:	f000 f95e 	bl	800e6cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800e416:	2b00      	cmp	r3, #0
 800e418:	d102      	bne.n	800e420 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	f002 f9e2 	bl	80107e4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e420:	bf00      	nop
 800e422:	3710      	adds	r7, #16
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}

0800e428 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e428:	b480      	push	{r7}
 800e42a:	b085      	sub	sp, #20
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e434:	2b00      	cmp	r3, #0
 800e436:	d006      	beq.n	800e446 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e442:	60fb      	str	r3, [r7, #12]
 800e444:	e001      	b.n	800e44a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e446:	2300      	movs	r3, #0
 800e448:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e44a:	68fb      	ldr	r3, [r7, #12]
	}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3714      	adds	r7, #20
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b086      	sub	sp, #24
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e464:	2300      	movs	r3, #0
 800e466:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e46c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e472:	2b00      	cmp	r3, #0
 800e474:	d10d      	bne.n	800e492 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d14d      	bne.n	800e51a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	689b      	ldr	r3, [r3, #8]
 800e482:	4618      	mov	r0, r3
 800e484:	f001 f8c4 	bl	800f610 <xTaskPriorityDisinherit>
 800e488:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2200      	movs	r2, #0
 800e48e:	609a      	str	r2, [r3, #8]
 800e490:	e043      	b.n	800e51a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d119      	bne.n	800e4cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	6858      	ldr	r0, [r3, #4]
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	68b9      	ldr	r1, [r7, #8]
 800e4a4:	f00e f909 	bl	801c6ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	685a      	ldr	r2, [r3, #4]
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4b0:	441a      	add	r2, r3
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	685a      	ldr	r2, [r3, #4]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d32b      	bcc.n	800e51a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681a      	ldr	r2, [r3, #0]
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	605a      	str	r2, [r3, #4]
 800e4ca:	e026      	b.n	800e51a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	68d8      	ldr	r0, [r3, #12]
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	68b9      	ldr	r1, [r7, #8]
 800e4d8:	f00e f8ef 	bl	801c6ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	68da      	ldr	r2, [r3, #12]
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4e4:	425b      	negs	r3, r3
 800e4e6:	441a      	add	r2, r3
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	68da      	ldr	r2, [r3, #12]
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d207      	bcs.n	800e508 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	689a      	ldr	r2, [r3, #8]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e500:	425b      	negs	r3, r3
 800e502:	441a      	add	r2, r3
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2b02      	cmp	r3, #2
 800e50c:	d105      	bne.n	800e51a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d002      	beq.n	800e51a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	3b01      	subs	r3, #1
 800e518:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	1c5a      	adds	r2, r3, #1
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e522:	697b      	ldr	r3, [r7, #20]
}
 800e524:	4618      	mov	r0, r3
 800e526:	3718      	adds	r7, #24
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d018      	beq.n	800e570 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	68da      	ldr	r2, [r3, #12]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e546:	441a      	add	r2, r3
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	68da      	ldr	r2, [r3, #12]
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	429a      	cmp	r2, r3
 800e556:	d303      	bcc.n	800e560 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	68d9      	ldr	r1, [r3, #12]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e568:	461a      	mov	r2, r3
 800e56a:	6838      	ldr	r0, [r7, #0]
 800e56c:	f00e f8a5 	bl	801c6ba <memcpy>
	}
}
 800e570:	bf00      	nop
 800e572:	3708      	adds	r7, #8
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e580:	f001 ff34 	bl	80103ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e58a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e58c:	e011      	b.n	800e5b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e592:	2b00      	cmp	r3, #0
 800e594:	d012      	beq.n	800e5bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	3324      	adds	r3, #36	@ 0x24
 800e59a:	4618      	mov	r0, r3
 800e59c:	f000 fdd4 	bl	800f148 <xTaskRemoveFromEventList>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d001      	beq.n	800e5aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e5a6:	f000 feb3 	bl	800f310 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e5aa:	7bfb      	ldrb	r3, [r7, #15]
 800e5ac:	3b01      	subs	r3, #1
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e5b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	dce9      	bgt.n	800e58e <prvUnlockQueue+0x16>
 800e5ba:	e000      	b.n	800e5be <prvUnlockQueue+0x46>
					break;
 800e5bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	22ff      	movs	r2, #255	@ 0xff
 800e5c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e5c6:	f001 ff47 	bl	8010458 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e5ca:	f001 ff0f 	bl	80103ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e5d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e5d6:	e011      	b.n	800e5fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	691b      	ldr	r3, [r3, #16]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d012      	beq.n	800e606 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	3310      	adds	r3, #16
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f000 fdaf 	bl	800f148 <xTaskRemoveFromEventList>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d001      	beq.n	800e5f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e5f0:	f000 fe8e 	bl	800f310 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e5f4:	7bbb      	ldrb	r3, [r7, #14]
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e5fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e600:	2b00      	cmp	r3, #0
 800e602:	dce9      	bgt.n	800e5d8 <prvUnlockQueue+0x60>
 800e604:	e000      	b.n	800e608 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e606:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	22ff      	movs	r2, #255	@ 0xff
 800e60c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e610:	f001 ff22 	bl	8010458 <vPortExitCritical>
}
 800e614:	bf00      	nop
 800e616:	3710      	adds	r7, #16
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e624:	f001 fee2 	bl	80103ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d102      	bne.n	800e636 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e630:	2301      	movs	r3, #1
 800e632:	60fb      	str	r3, [r7, #12]
 800e634:	e001      	b.n	800e63a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e636:	2300      	movs	r3, #0
 800e638:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e63a:	f001 ff0d 	bl	8010458 <vPortExitCritical>

	return xReturn;
 800e63e:	68fb      	ldr	r3, [r7, #12]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e650:	f001 fecc 	bl	80103ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d102      	bne.n	800e666 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e660:	2301      	movs	r3, #1
 800e662:	60fb      	str	r3, [r7, #12]
 800e664:	e001      	b.n	800e66a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e666:	2300      	movs	r3, #0
 800e668:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e66a:	f001 fef5 	bl	8010458 <vPortExitCritical>

	return xReturn;
 800e66e:	68fb      	ldr	r3, [r7, #12]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3710      	adds	r7, #16
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e678:	b480      	push	{r7}
 800e67a:	b085      	sub	sp, #20
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e682:	2300      	movs	r3, #0
 800e684:	60fb      	str	r3, [r7, #12]
 800e686:	e014      	b.n	800e6b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e688:	4a0f      	ldr	r2, [pc, #60]	@ (800e6c8 <vQueueAddToRegistry+0x50>)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d10b      	bne.n	800e6ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e694:	490c      	ldr	r1, [pc, #48]	@ (800e6c8 <vQueueAddToRegistry+0x50>)
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	683a      	ldr	r2, [r7, #0]
 800e69a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e69e:	4a0a      	ldr	r2, [pc, #40]	@ (800e6c8 <vQueueAddToRegistry+0x50>)
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	00db      	lsls	r3, r3, #3
 800e6a4:	4413      	add	r3, r2
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e6aa:	e006      	b.n	800e6ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	60fb      	str	r3, [r7, #12]
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2b07      	cmp	r3, #7
 800e6b6:	d9e7      	bls.n	800e688 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e6b8:	bf00      	nop
 800e6ba:	bf00      	nop
 800e6bc:	3714      	adds	r7, #20
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr
 800e6c6:	bf00      	nop
 800e6c8:	2000ade0 	.word	0x2000ade0

0800e6cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b085      	sub	sp, #20
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	60fb      	str	r3, [r7, #12]
 800e6d8:	e016      	b.n	800e708 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e6da:	4a10      	ldr	r2, [pc, #64]	@ (800e71c <vQueueUnregisterQueue+0x50>)
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	00db      	lsls	r3, r3, #3
 800e6e0:	4413      	add	r3, r2
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d10b      	bne.n	800e702 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e6ea:	4a0c      	ldr	r2, [pc, #48]	@ (800e71c <vQueueUnregisterQueue+0x50>)
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2100      	movs	r1, #0
 800e6f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e6f4:	4a09      	ldr	r2, [pc, #36]	@ (800e71c <vQueueUnregisterQueue+0x50>)
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	00db      	lsls	r3, r3, #3
 800e6fa:	4413      	add	r3, r2
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	605a      	str	r2, [r3, #4]
				break;
 800e700:	e006      	b.n	800e710 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	3301      	adds	r3, #1
 800e706:	60fb      	str	r3, [r7, #12]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2b07      	cmp	r3, #7
 800e70c:	d9e5      	bls.n	800e6da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e70e:	bf00      	nop
 800e710:	bf00      	nop
 800e712:	3714      	adds	r7, #20
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr
 800e71c:	2000ade0 	.word	0x2000ade0

0800e720 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e730:	f001 fe5c 	bl	80103ec <vPortEnterCritical>
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e73a:	b25b      	sxtb	r3, r3
 800e73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e740:	d103      	bne.n	800e74a <vQueueWaitForMessageRestricted+0x2a>
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	2200      	movs	r2, #0
 800e746:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e750:	b25b      	sxtb	r3, r3
 800e752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e756:	d103      	bne.n	800e760 <vQueueWaitForMessageRestricted+0x40>
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	2200      	movs	r2, #0
 800e75c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e760:	f001 fe7a 	bl	8010458 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d106      	bne.n	800e77a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	3324      	adds	r3, #36	@ 0x24
 800e770:	687a      	ldr	r2, [r7, #4]
 800e772:	68b9      	ldr	r1, [r7, #8]
 800e774:	4618      	mov	r0, r3
 800e776:	f000 fcb9 	bl	800f0ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e77a:	6978      	ldr	r0, [r7, #20]
 800e77c:	f7ff fefc 	bl	800e578 <prvUnlockQueue>
	}
 800e780:	bf00      	nop
 800e782:	3718      	adds	r7, #24
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b08e      	sub	sp, #56	@ 0x38
 800e78c:	af04      	add	r7, sp, #16
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	607a      	str	r2, [r7, #4]
 800e794:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d10d      	bne.n	800e7b8 <xTaskCreateStatic+0x30>
	__asm volatile
 800e79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a0:	b672      	cpsid	i
 800e7a2:	f383 8811 	msr	BASEPRI, r3
 800e7a6:	f3bf 8f6f 	isb	sy
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	b662      	cpsie	i
 800e7b0:	623b      	str	r3, [r7, #32]
}
 800e7b2:	bf00      	nop
 800e7b4:	bf00      	nop
 800e7b6:	e7fd      	b.n	800e7b4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800e7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d10d      	bne.n	800e7da <xTaskCreateStatic+0x52>
	__asm volatile
 800e7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c2:	b672      	cpsid	i
 800e7c4:	f383 8811 	msr	BASEPRI, r3
 800e7c8:	f3bf 8f6f 	isb	sy
 800e7cc:	f3bf 8f4f 	dsb	sy
 800e7d0:	b662      	cpsie	i
 800e7d2:	61fb      	str	r3, [r7, #28]
}
 800e7d4:	bf00      	nop
 800e7d6:	bf00      	nop
 800e7d8:	e7fd      	b.n	800e7d6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e7da:	23a8      	movs	r3, #168	@ 0xa8
 800e7dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	2ba8      	cmp	r3, #168	@ 0xa8
 800e7e2:	d00d      	beq.n	800e800 <xTaskCreateStatic+0x78>
	__asm volatile
 800e7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e8:	b672      	cpsid	i
 800e7ea:	f383 8811 	msr	BASEPRI, r3
 800e7ee:	f3bf 8f6f 	isb	sy
 800e7f2:	f3bf 8f4f 	dsb	sy
 800e7f6:	b662      	cpsie	i
 800e7f8:	61bb      	str	r3, [r7, #24]
}
 800e7fa:	bf00      	nop
 800e7fc:	bf00      	nop
 800e7fe:	e7fd      	b.n	800e7fc <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e800:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e804:	2b00      	cmp	r3, #0
 800e806:	d01e      	beq.n	800e846 <xTaskCreateStatic+0xbe>
 800e808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d01b      	beq.n	800e846 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e80e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e810:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e814:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e816:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e81a:	2202      	movs	r2, #2
 800e81c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e820:	2300      	movs	r3, #0
 800e822:	9303      	str	r3, [sp, #12]
 800e824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e826:	9302      	str	r3, [sp, #8]
 800e828:	f107 0314 	add.w	r3, r7, #20
 800e82c:	9301      	str	r3, [sp, #4]
 800e82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e830:	9300      	str	r3, [sp, #0]
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	68b9      	ldr	r1, [r7, #8]
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	f000 f851 	bl	800e8e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e83e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e840:	f000 f8f8 	bl	800ea34 <prvAddNewTaskToReadyList>
 800e844:	e001      	b.n	800e84a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800e846:	2300      	movs	r3, #0
 800e848:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e84a:	697b      	ldr	r3, [r7, #20]
	}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3728      	adds	r7, #40	@ 0x28
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e854:	b580      	push	{r7, lr}
 800e856:	b08c      	sub	sp, #48	@ 0x30
 800e858:	af04      	add	r7, sp, #16
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	603b      	str	r3, [r7, #0]
 800e860:	4613      	mov	r3, r2
 800e862:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e864:	88fb      	ldrh	r3, [r7, #6]
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	4618      	mov	r0, r3
 800e86a:	f001 feed 	bl	8010648 <pvPortMalloc>
 800e86e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d00e      	beq.n	800e894 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e876:	20a8      	movs	r0, #168	@ 0xa8
 800e878:	f001 fee6 	bl	8010648 <pvPortMalloc>
 800e87c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d003      	beq.n	800e88c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	697a      	ldr	r2, [r7, #20]
 800e888:	631a      	str	r2, [r3, #48]	@ 0x30
 800e88a:	e005      	b.n	800e898 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e88c:	6978      	ldr	r0, [r7, #20]
 800e88e:	f001 ffa9 	bl	80107e4 <vPortFree>
 800e892:	e001      	b.n	800e898 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e894:	2300      	movs	r3, #0
 800e896:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d017      	beq.n	800e8ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e89e:	69fb      	ldr	r3, [r7, #28]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e8a6:	88fa      	ldrh	r2, [r7, #6]
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	9303      	str	r3, [sp, #12]
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	9302      	str	r3, [sp, #8]
 800e8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8b2:	9301      	str	r3, [sp, #4]
 800e8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	68b9      	ldr	r1, [r7, #8]
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f000 f80f 	bl	800e8e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e8c2:	69f8      	ldr	r0, [r7, #28]
 800e8c4:	f000 f8b6 	bl	800ea34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	61bb      	str	r3, [r7, #24]
 800e8cc:	e002      	b.n	800e8d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e8d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e8d4:	69bb      	ldr	r3, [r7, #24]
	}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3720      	adds	r7, #32
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
	...

0800e8e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b088      	sub	sp, #32
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	607a      	str	r2, [r7, #4]
 800e8ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	21a5      	movs	r1, #165	@ 0xa5
 800e8fa:	f00d fe0b 	bl	801c514 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e900:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e902:	6879      	ldr	r1, [r7, #4]
 800e904:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e908:	440b      	add	r3, r1
 800e90a:	009b      	lsls	r3, r3, #2
 800e90c:	4413      	add	r3, r2
 800e90e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	f023 0307 	bic.w	r3, r3, #7
 800e916:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e918:	69bb      	ldr	r3, [r7, #24]
 800e91a:	f003 0307 	and.w	r3, r3, #7
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d00d      	beq.n	800e93e <prvInitialiseNewTask+0x5e>
	__asm volatile
 800e922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e926:	b672      	cpsid	i
 800e928:	f383 8811 	msr	BASEPRI, r3
 800e92c:	f3bf 8f6f 	isb	sy
 800e930:	f3bf 8f4f 	dsb	sy
 800e934:	b662      	cpsie	i
 800e936:	617b      	str	r3, [r7, #20]
}
 800e938:	bf00      	nop
 800e93a:	bf00      	nop
 800e93c:	e7fd      	b.n	800e93a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d01f      	beq.n	800e984 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e944:	2300      	movs	r3, #0
 800e946:	61fb      	str	r3, [r7, #28]
 800e948:	e012      	b.n	800e970 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e94a:	68ba      	ldr	r2, [r7, #8]
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	4413      	add	r3, r2
 800e950:	7819      	ldrb	r1, [r3, #0]
 800e952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	4413      	add	r3, r2
 800e958:	3334      	adds	r3, #52	@ 0x34
 800e95a:	460a      	mov	r2, r1
 800e95c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e95e:	68ba      	ldr	r2, [r7, #8]
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	4413      	add	r3, r2
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d006      	beq.n	800e978 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	3301      	adds	r3, #1
 800e96e:	61fb      	str	r3, [r7, #28]
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	2b0f      	cmp	r3, #15
 800e974:	d9e9      	bls.n	800e94a <prvInitialiseNewTask+0x6a>
 800e976:	e000      	b.n	800e97a <prvInitialiseNewTask+0x9a>
			{
				break;
 800e978:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e97c:	2200      	movs	r2, #0
 800e97e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e982:	e003      	b.n	800e98c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e986:	2200      	movs	r2, #0
 800e988:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e98e:	2b37      	cmp	r3, #55	@ 0x37
 800e990:	d901      	bls.n	800e996 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e992:	2337      	movs	r3, #55	@ 0x37
 800e994:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e99a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e99e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e9a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9aa:	3304      	adds	r3, #4
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f7fe fd27 	bl	800d400 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9b4:	3318      	adds	r3, #24
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7fe fd22 	bl	800d400 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9dc:	2200      	movs	r2, #0
 800e9de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9e4:	3354      	adds	r3, #84	@ 0x54
 800e9e6:	224c      	movs	r2, #76	@ 0x4c
 800e9e8:	2100      	movs	r1, #0
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f00d fd92 	bl	801c514 <memset>
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9f2:	4a0d      	ldr	r2, [pc, #52]	@ (800ea28 <prvInitialiseNewTask+0x148>)
 800e9f4:	659a      	str	r2, [r3, #88]	@ 0x58
 800e9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9f8:	4a0c      	ldr	r2, [pc, #48]	@ (800ea2c <prvInitialiseNewTask+0x14c>)
 800e9fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9fe:	4a0c      	ldr	r2, [pc, #48]	@ (800ea30 <prvInitialiseNewTask+0x150>)
 800ea00:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea02:	683a      	ldr	r2, [r7, #0]
 800ea04:	68f9      	ldr	r1, [r7, #12]
 800ea06:	69b8      	ldr	r0, [r7, #24]
 800ea08:	f001 fbe2 	bl	80101d0 <pxPortInitialiseStack>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ea12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d002      	beq.n	800ea1e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ea18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea1e:	bf00      	nop
 800ea20:	3720      	adds	r7, #32
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	200276ec 	.word	0x200276ec
 800ea2c:	20027754 	.word	0x20027754
 800ea30:	200277bc 	.word	0x200277bc

0800ea34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ea3c:	f001 fcd6 	bl	80103ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ea40:	4b2d      	ldr	r3, [pc, #180]	@ (800eaf8 <prvAddNewTaskToReadyList+0xc4>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	3301      	adds	r3, #1
 800ea46:	4a2c      	ldr	r2, [pc, #176]	@ (800eaf8 <prvAddNewTaskToReadyList+0xc4>)
 800ea48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ea4a:	4b2c      	ldr	r3, [pc, #176]	@ (800eafc <prvAddNewTaskToReadyList+0xc8>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d109      	bne.n	800ea66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ea52:	4a2a      	ldr	r2, [pc, #168]	@ (800eafc <prvAddNewTaskToReadyList+0xc8>)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ea58:	4b27      	ldr	r3, [pc, #156]	@ (800eaf8 <prvAddNewTaskToReadyList+0xc4>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d110      	bne.n	800ea82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ea60:	f000 fc7a 	bl	800f358 <prvInitialiseTaskLists>
 800ea64:	e00d      	b.n	800ea82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ea66:	4b26      	ldr	r3, [pc, #152]	@ (800eb00 <prvAddNewTaskToReadyList+0xcc>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d109      	bne.n	800ea82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ea6e:	4b23      	ldr	r3, [pc, #140]	@ (800eafc <prvAddNewTaskToReadyList+0xc8>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d802      	bhi.n	800ea82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ea7c:	4a1f      	ldr	r2, [pc, #124]	@ (800eafc <prvAddNewTaskToReadyList+0xc8>)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ea82:	4b20      	ldr	r3, [pc, #128]	@ (800eb04 <prvAddNewTaskToReadyList+0xd0>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	3301      	adds	r3, #1
 800ea88:	4a1e      	ldr	r2, [pc, #120]	@ (800eb04 <prvAddNewTaskToReadyList+0xd0>)
 800ea8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ea8c:	4b1d      	ldr	r3, [pc, #116]	@ (800eb04 <prvAddNewTaskToReadyList+0xd0>)
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea98:	4b1b      	ldr	r3, [pc, #108]	@ (800eb08 <prvAddNewTaskToReadyList+0xd4>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d903      	bls.n	800eaa8 <prvAddNewTaskToReadyList+0x74>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaa4:	4a18      	ldr	r2, [pc, #96]	@ (800eb08 <prvAddNewTaskToReadyList+0xd4>)
 800eaa6:	6013      	str	r3, [r2, #0]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaac:	4613      	mov	r3, r2
 800eaae:	009b      	lsls	r3, r3, #2
 800eab0:	4413      	add	r3, r2
 800eab2:	009b      	lsls	r3, r3, #2
 800eab4:	4a15      	ldr	r2, [pc, #84]	@ (800eb0c <prvAddNewTaskToReadyList+0xd8>)
 800eab6:	441a      	add	r2, r3
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	3304      	adds	r3, #4
 800eabc:	4619      	mov	r1, r3
 800eabe:	4610      	mov	r0, r2
 800eac0:	f7fe fcab 	bl	800d41a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eac4:	f001 fcc8 	bl	8010458 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eac8:	4b0d      	ldr	r3, [pc, #52]	@ (800eb00 <prvAddNewTaskToReadyList+0xcc>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00e      	beq.n	800eaee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ead0:	4b0a      	ldr	r3, [pc, #40]	@ (800eafc <prvAddNewTaskToReadyList+0xc8>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eada:	429a      	cmp	r2, r3
 800eadc:	d207      	bcs.n	800eaee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eade:	4b0c      	ldr	r3, [pc, #48]	@ (800eb10 <prvAddNewTaskToReadyList+0xdc>)
 800eae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eae4:	601a      	str	r2, [r3, #0]
 800eae6:	f3bf 8f4f 	dsb	sy
 800eaea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eaee:	bf00      	nop
 800eaf0:	3708      	adds	r7, #8
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	2000b2f4 	.word	0x2000b2f4
 800eafc:	2000ae20 	.word	0x2000ae20
 800eb00:	2000b300 	.word	0x2000b300
 800eb04:	2000b310 	.word	0x2000b310
 800eb08:	2000b2fc 	.word	0x2000b2fc
 800eb0c:	2000ae24 	.word	0x2000ae24
 800eb10:	e000ed04 	.word	0xe000ed04

0800eb14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d01a      	beq.n	800eb5c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eb26:	4b15      	ldr	r3, [pc, #84]	@ (800eb7c <vTaskDelay+0x68>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d00d      	beq.n	800eb4a <vTaskDelay+0x36>
	__asm volatile
 800eb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb32:	b672      	cpsid	i
 800eb34:	f383 8811 	msr	BASEPRI, r3
 800eb38:	f3bf 8f6f 	isb	sy
 800eb3c:	f3bf 8f4f 	dsb	sy
 800eb40:	b662      	cpsie	i
 800eb42:	60bb      	str	r3, [r7, #8]
}
 800eb44:	bf00      	nop
 800eb46:	bf00      	nop
 800eb48:	e7fd      	b.n	800eb46 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800eb4a:	f000 f88f 	bl	800ec6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eb4e:	2100      	movs	r1, #0
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f000 ff81 	bl	800fa58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eb56:	f000 f897 	bl	800ec88 <xTaskResumeAll>
 800eb5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d107      	bne.n	800eb72 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800eb62:	4b07      	ldr	r3, [pc, #28]	@ (800eb80 <vTaskDelay+0x6c>)
 800eb64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb68:	601a      	str	r2, [r3, #0]
 800eb6a:	f3bf 8f4f 	dsb	sy
 800eb6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb72:	bf00      	nop
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	2000b31c 	.word	0x2000b31c
 800eb80:	e000ed04 	.word	0xe000ed04

0800eb84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b08a      	sub	sp, #40	@ 0x28
 800eb88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eb92:	463a      	mov	r2, r7
 800eb94:	1d39      	adds	r1, r7, #4
 800eb96:	f107 0308 	add.w	r3, r7, #8
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7fe fbdc 	bl	800d358 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eba0:	6839      	ldr	r1, [r7, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	68ba      	ldr	r2, [r7, #8]
 800eba6:	9202      	str	r2, [sp, #8]
 800eba8:	9301      	str	r3, [sp, #4]
 800ebaa:	2300      	movs	r3, #0
 800ebac:	9300      	str	r3, [sp, #0]
 800ebae:	2300      	movs	r3, #0
 800ebb0:	460a      	mov	r2, r1
 800ebb2:	4926      	ldr	r1, [pc, #152]	@ (800ec4c <vTaskStartScheduler+0xc8>)
 800ebb4:	4826      	ldr	r0, [pc, #152]	@ (800ec50 <vTaskStartScheduler+0xcc>)
 800ebb6:	f7ff fde7 	bl	800e788 <xTaskCreateStatic>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	4a25      	ldr	r2, [pc, #148]	@ (800ec54 <vTaskStartScheduler+0xd0>)
 800ebbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ebc0:	4b24      	ldr	r3, [pc, #144]	@ (800ec54 <vTaskStartScheduler+0xd0>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d002      	beq.n	800ebce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	617b      	str	r3, [r7, #20]
 800ebcc:	e001      	b.n	800ebd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d102      	bne.n	800ebde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ebd8:	f000 ff92 	bl	800fb00 <xTimerCreateTimerTask>
 800ebdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d11d      	bne.n	800ec20 <vTaskStartScheduler+0x9c>
	__asm volatile
 800ebe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebe8:	b672      	cpsid	i
 800ebea:	f383 8811 	msr	BASEPRI, r3
 800ebee:	f3bf 8f6f 	isb	sy
 800ebf2:	f3bf 8f4f 	dsb	sy
 800ebf6:	b662      	cpsie	i
 800ebf8:	613b      	str	r3, [r7, #16]
}
 800ebfa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ebfc:	4b16      	ldr	r3, [pc, #88]	@ (800ec58 <vTaskStartScheduler+0xd4>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	3354      	adds	r3, #84	@ 0x54
 800ec02:	4a16      	ldr	r2, [pc, #88]	@ (800ec5c <vTaskStartScheduler+0xd8>)
 800ec04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ec06:	4b16      	ldr	r3, [pc, #88]	@ (800ec60 <vTaskStartScheduler+0xdc>)
 800ec08:	f04f 32ff 	mov.w	r2, #4294967295
 800ec0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ec0e:	4b15      	ldr	r3, [pc, #84]	@ (800ec64 <vTaskStartScheduler+0xe0>)
 800ec10:	2201      	movs	r2, #1
 800ec12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ec14:	4b14      	ldr	r3, [pc, #80]	@ (800ec68 <vTaskStartScheduler+0xe4>)
 800ec16:	2200      	movs	r2, #0
 800ec18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ec1a:	f001 fb69 	bl	80102f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ec1e:	e011      	b.n	800ec44 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec26:	d10d      	bne.n	800ec44 <vTaskStartScheduler+0xc0>
	__asm volatile
 800ec28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec2c:	b672      	cpsid	i
 800ec2e:	f383 8811 	msr	BASEPRI, r3
 800ec32:	f3bf 8f6f 	isb	sy
 800ec36:	f3bf 8f4f 	dsb	sy
 800ec3a:	b662      	cpsie	i
 800ec3c:	60fb      	str	r3, [r7, #12]
}
 800ec3e:	bf00      	nop
 800ec40:	bf00      	nop
 800ec42:	e7fd      	b.n	800ec40 <vTaskStartScheduler+0xbc>
}
 800ec44:	bf00      	nop
 800ec46:	3718      	adds	r7, #24
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	0801d4dc 	.word	0x0801d4dc
 800ec50:	0800f329 	.word	0x0800f329
 800ec54:	2000b318 	.word	0x2000b318
 800ec58:	2000ae20 	.word	0x2000ae20
 800ec5c:	2000003c 	.word	0x2000003c
 800ec60:	2000b314 	.word	0x2000b314
 800ec64:	2000b300 	.word	0x2000b300
 800ec68:	2000b2f8 	.word	0x2000b2f8

0800ec6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ec70:	4b04      	ldr	r3, [pc, #16]	@ (800ec84 <vTaskSuspendAll+0x18>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	3301      	adds	r3, #1
 800ec76:	4a03      	ldr	r2, [pc, #12]	@ (800ec84 <vTaskSuspendAll+0x18>)
 800ec78:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ec7a:	bf00      	nop
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr
 800ec84:	2000b31c 	.word	0x2000b31c

0800ec88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ec92:	2300      	movs	r3, #0
 800ec94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ec96:	4b43      	ldr	r3, [pc, #268]	@ (800eda4 <xTaskResumeAll+0x11c>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d10d      	bne.n	800ecba <xTaskResumeAll+0x32>
	__asm volatile
 800ec9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eca2:	b672      	cpsid	i
 800eca4:	f383 8811 	msr	BASEPRI, r3
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	f3bf 8f4f 	dsb	sy
 800ecb0:	b662      	cpsie	i
 800ecb2:	603b      	str	r3, [r7, #0]
}
 800ecb4:	bf00      	nop
 800ecb6:	bf00      	nop
 800ecb8:	e7fd      	b.n	800ecb6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ecba:	f001 fb97 	bl	80103ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ecbe:	4b39      	ldr	r3, [pc, #228]	@ (800eda4 <xTaskResumeAll+0x11c>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	3b01      	subs	r3, #1
 800ecc4:	4a37      	ldr	r2, [pc, #220]	@ (800eda4 <xTaskResumeAll+0x11c>)
 800ecc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecc8:	4b36      	ldr	r3, [pc, #216]	@ (800eda4 <xTaskResumeAll+0x11c>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d162      	bne.n	800ed96 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ecd0:	4b35      	ldr	r3, [pc, #212]	@ (800eda8 <xTaskResumeAll+0x120>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d05e      	beq.n	800ed96 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ecd8:	e02f      	b.n	800ed3a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecda:	4b34      	ldr	r3, [pc, #208]	@ (800edac <xTaskResumeAll+0x124>)
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	68db      	ldr	r3, [r3, #12]
 800ece0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	3318      	adds	r3, #24
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fe fbf4 	bl	800d4d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	3304      	adds	r3, #4
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fe fbef 	bl	800d4d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecfa:	4b2d      	ldr	r3, [pc, #180]	@ (800edb0 <xTaskResumeAll+0x128>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d903      	bls.n	800ed0a <xTaskResumeAll+0x82>
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed06:	4a2a      	ldr	r2, [pc, #168]	@ (800edb0 <xTaskResumeAll+0x128>)
 800ed08:	6013      	str	r3, [r2, #0]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed0e:	4613      	mov	r3, r2
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	4413      	add	r3, r2
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	4a27      	ldr	r2, [pc, #156]	@ (800edb4 <xTaskResumeAll+0x12c>)
 800ed18:	441a      	add	r2, r3
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	3304      	adds	r3, #4
 800ed1e:	4619      	mov	r1, r3
 800ed20:	4610      	mov	r0, r2
 800ed22:	f7fe fb7a 	bl	800d41a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed2a:	4b23      	ldr	r3, [pc, #140]	@ (800edb8 <xTaskResumeAll+0x130>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d302      	bcc.n	800ed3a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800ed34:	4b21      	ldr	r3, [pc, #132]	@ (800edbc <xTaskResumeAll+0x134>)
 800ed36:	2201      	movs	r2, #1
 800ed38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed3a:	4b1c      	ldr	r3, [pc, #112]	@ (800edac <xTaskResumeAll+0x124>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1cb      	bne.n	800ecda <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d001      	beq.n	800ed4c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ed48:	f000 fbac 	bl	800f4a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ed4c:	4b1c      	ldr	r3, [pc, #112]	@ (800edc0 <xTaskResumeAll+0x138>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d010      	beq.n	800ed7a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ed58:	f000 f858 	bl	800ee0c <xTaskIncrementTick>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d002      	beq.n	800ed68 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800ed62:	4b16      	ldr	r3, [pc, #88]	@ (800edbc <xTaskResumeAll+0x134>)
 800ed64:	2201      	movs	r2, #1
 800ed66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	3b01      	subs	r3, #1
 800ed6c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d1f1      	bne.n	800ed58 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800ed74:	4b12      	ldr	r3, [pc, #72]	@ (800edc0 <xTaskResumeAll+0x138>)
 800ed76:	2200      	movs	r2, #0
 800ed78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ed7a:	4b10      	ldr	r3, [pc, #64]	@ (800edbc <xTaskResumeAll+0x134>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d009      	beq.n	800ed96 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ed82:	2301      	movs	r3, #1
 800ed84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ed86:	4b0f      	ldr	r3, [pc, #60]	@ (800edc4 <xTaskResumeAll+0x13c>)
 800ed88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed8c:	601a      	str	r2, [r3, #0]
 800ed8e:	f3bf 8f4f 	dsb	sy
 800ed92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed96:	f001 fb5f 	bl	8010458 <vPortExitCritical>

	return xAlreadyYielded;
 800ed9a:	68bb      	ldr	r3, [r7, #8]
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3710      	adds	r7, #16
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}
 800eda4:	2000b31c 	.word	0x2000b31c
 800eda8:	2000b2f4 	.word	0x2000b2f4
 800edac:	2000b2b4 	.word	0x2000b2b4
 800edb0:	2000b2fc 	.word	0x2000b2fc
 800edb4:	2000ae24 	.word	0x2000ae24
 800edb8:	2000ae20 	.word	0x2000ae20
 800edbc:	2000b308 	.word	0x2000b308
 800edc0:	2000b304 	.word	0x2000b304
 800edc4:	e000ed04 	.word	0xe000ed04

0800edc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800edce:	4b05      	ldr	r3, [pc, #20]	@ (800ede4 <xTaskGetTickCount+0x1c>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800edd4:	687b      	ldr	r3, [r7, #4]
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	370c      	adds	r7, #12
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr
 800ede2:	bf00      	nop
 800ede4:	2000b2f8 	.word	0x2000b2f8

0800ede8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b082      	sub	sp, #8
 800edec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edee:	f001 fbe5 	bl	80105bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800edf2:	2300      	movs	r3, #0
 800edf4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800edf6:	4b04      	ldr	r3, [pc, #16]	@ (800ee08 <xTaskGetTickCountFromISR+0x20>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800edfc:	683b      	ldr	r3, [r7, #0]
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	2000b2f8 	.word	0x2000b2f8

0800ee0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b086      	sub	sp, #24
 800ee10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ee12:	2300      	movs	r3, #0
 800ee14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee16:	4b50      	ldr	r3, [pc, #320]	@ (800ef58 <xTaskIncrementTick+0x14c>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	f040 808c 	bne.w	800ef38 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ee20:	4b4e      	ldr	r3, [pc, #312]	@ (800ef5c <xTaskIncrementTick+0x150>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	3301      	adds	r3, #1
 800ee26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ee28:	4a4c      	ldr	r2, [pc, #304]	@ (800ef5c <xTaskIncrementTick+0x150>)
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d123      	bne.n	800ee7c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800ee34:	4b4a      	ldr	r3, [pc, #296]	@ (800ef60 <xTaskIncrementTick+0x154>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d00d      	beq.n	800ee5a <xTaskIncrementTick+0x4e>
	__asm volatile
 800ee3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee42:	b672      	cpsid	i
 800ee44:	f383 8811 	msr	BASEPRI, r3
 800ee48:	f3bf 8f6f 	isb	sy
 800ee4c:	f3bf 8f4f 	dsb	sy
 800ee50:	b662      	cpsie	i
 800ee52:	603b      	str	r3, [r7, #0]
}
 800ee54:	bf00      	nop
 800ee56:	bf00      	nop
 800ee58:	e7fd      	b.n	800ee56 <xTaskIncrementTick+0x4a>
 800ee5a:	4b41      	ldr	r3, [pc, #260]	@ (800ef60 <xTaskIncrementTick+0x154>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	60fb      	str	r3, [r7, #12]
 800ee60:	4b40      	ldr	r3, [pc, #256]	@ (800ef64 <xTaskIncrementTick+0x158>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	4a3e      	ldr	r2, [pc, #248]	@ (800ef60 <xTaskIncrementTick+0x154>)
 800ee66:	6013      	str	r3, [r2, #0]
 800ee68:	4a3e      	ldr	r2, [pc, #248]	@ (800ef64 <xTaskIncrementTick+0x158>)
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	6013      	str	r3, [r2, #0]
 800ee6e:	4b3e      	ldr	r3, [pc, #248]	@ (800ef68 <xTaskIncrementTick+0x15c>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	3301      	adds	r3, #1
 800ee74:	4a3c      	ldr	r2, [pc, #240]	@ (800ef68 <xTaskIncrementTick+0x15c>)
 800ee76:	6013      	str	r3, [r2, #0]
 800ee78:	f000 fb14 	bl	800f4a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ee7c:	4b3b      	ldr	r3, [pc, #236]	@ (800ef6c <xTaskIncrementTick+0x160>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	693a      	ldr	r2, [r7, #16]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d349      	bcc.n	800ef1a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee86:	4b36      	ldr	r3, [pc, #216]	@ (800ef60 <xTaskIncrementTick+0x154>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d104      	bne.n	800ee9a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee90:	4b36      	ldr	r3, [pc, #216]	@ (800ef6c <xTaskIncrementTick+0x160>)
 800ee92:	f04f 32ff 	mov.w	r2, #4294967295
 800ee96:	601a      	str	r2, [r3, #0]
					break;
 800ee98:	e03f      	b.n	800ef1a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee9a:	4b31      	ldr	r3, [pc, #196]	@ (800ef60 <xTaskIncrementTick+0x154>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	68db      	ldr	r3, [r3, #12]
 800eea0:	68db      	ldr	r3, [r3, #12]
 800eea2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800eeaa:	693a      	ldr	r2, [r7, #16]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d203      	bcs.n	800eeba <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eeb2:	4a2e      	ldr	r2, [pc, #184]	@ (800ef6c <xTaskIncrementTick+0x160>)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eeb8:	e02f      	b.n	800ef1a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	3304      	adds	r3, #4
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fe fb08 	bl	800d4d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d004      	beq.n	800eed6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	3318      	adds	r3, #24
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fe faff 	bl	800d4d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeda:	4b25      	ldr	r3, [pc, #148]	@ (800ef70 <xTaskIncrementTick+0x164>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d903      	bls.n	800eeea <xTaskIncrementTick+0xde>
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eee6:	4a22      	ldr	r2, [pc, #136]	@ (800ef70 <xTaskIncrementTick+0x164>)
 800eee8:	6013      	str	r3, [r2, #0]
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeee:	4613      	mov	r3, r2
 800eef0:	009b      	lsls	r3, r3, #2
 800eef2:	4413      	add	r3, r2
 800eef4:	009b      	lsls	r3, r3, #2
 800eef6:	4a1f      	ldr	r2, [pc, #124]	@ (800ef74 <xTaskIncrementTick+0x168>)
 800eef8:	441a      	add	r2, r3
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	3304      	adds	r3, #4
 800eefe:	4619      	mov	r1, r3
 800ef00:	4610      	mov	r0, r2
 800ef02:	f7fe fa8a 	bl	800d41a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef0a:	4b1b      	ldr	r3, [pc, #108]	@ (800ef78 <xTaskIncrementTick+0x16c>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d3b8      	bcc.n	800ee86 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800ef14:	2301      	movs	r3, #1
 800ef16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef18:	e7b5      	b.n	800ee86 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ef1a:	4b17      	ldr	r3, [pc, #92]	@ (800ef78 <xTaskIncrementTick+0x16c>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef20:	4914      	ldr	r1, [pc, #80]	@ (800ef74 <xTaskIncrementTick+0x168>)
 800ef22:	4613      	mov	r3, r2
 800ef24:	009b      	lsls	r3, r3, #2
 800ef26:	4413      	add	r3, r2
 800ef28:	009b      	lsls	r3, r3, #2
 800ef2a:	440b      	add	r3, r1
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d907      	bls.n	800ef42 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800ef32:	2301      	movs	r3, #1
 800ef34:	617b      	str	r3, [r7, #20]
 800ef36:	e004      	b.n	800ef42 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ef38:	4b10      	ldr	r3, [pc, #64]	@ (800ef7c <xTaskIncrementTick+0x170>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	4a0f      	ldr	r2, [pc, #60]	@ (800ef7c <xTaskIncrementTick+0x170>)
 800ef40:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ef42:	4b0f      	ldr	r3, [pc, #60]	@ (800ef80 <xTaskIncrementTick+0x174>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d001      	beq.n	800ef4e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ef4e:	697b      	ldr	r3, [r7, #20]
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3718      	adds	r7, #24
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	2000b31c 	.word	0x2000b31c
 800ef5c:	2000b2f8 	.word	0x2000b2f8
 800ef60:	2000b2ac 	.word	0x2000b2ac
 800ef64:	2000b2b0 	.word	0x2000b2b0
 800ef68:	2000b30c 	.word	0x2000b30c
 800ef6c:	2000b314 	.word	0x2000b314
 800ef70:	2000b2fc 	.word	0x2000b2fc
 800ef74:	2000ae24 	.word	0x2000ae24
 800ef78:	2000ae20 	.word	0x2000ae20
 800ef7c:	2000b304 	.word	0x2000b304
 800ef80:	2000b308 	.word	0x2000b308

0800ef84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b086      	sub	sp, #24
 800ef88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ef8a:	4b3e      	ldr	r3, [pc, #248]	@ (800f084 <vTaskSwitchContext+0x100>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d003      	beq.n	800ef9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ef92:	4b3d      	ldr	r3, [pc, #244]	@ (800f088 <vTaskSwitchContext+0x104>)
 800ef94:	2201      	movs	r2, #1
 800ef96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ef98:	e070      	b.n	800f07c <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800ef9a:	4b3b      	ldr	r3, [pc, #236]	@ (800f088 <vTaskSwitchContext+0x104>)
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800efa0:	4b3a      	ldr	r3, [pc, #232]	@ (800f08c <vTaskSwitchContext+0x108>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efa6:	613b      	str	r3, [r7, #16]
 800efa8:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800efac:	60fb      	str	r3, [r7, #12]
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	68fa      	ldr	r2, [r7, #12]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d111      	bne.n	800efdc <vTaskSwitchContext+0x58>
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	3304      	adds	r3, #4
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d10b      	bne.n	800efdc <vTaskSwitchContext+0x58>
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	3308      	adds	r3, #8
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	68fa      	ldr	r2, [r7, #12]
 800efcc:	429a      	cmp	r2, r3
 800efce:	d105      	bne.n	800efdc <vTaskSwitchContext+0x58>
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	330c      	adds	r3, #12
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	68fa      	ldr	r2, [r7, #12]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d008      	beq.n	800efee <vTaskSwitchContext+0x6a>
 800efdc:	4b2b      	ldr	r3, [pc, #172]	@ (800f08c <vTaskSwitchContext+0x108>)
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	4b2a      	ldr	r3, [pc, #168]	@ (800f08c <vTaskSwitchContext+0x108>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	3334      	adds	r3, #52	@ 0x34
 800efe6:	4619      	mov	r1, r3
 800efe8:	4610      	mov	r0, r2
 800efea:	f7f1 fec9 	bl	8000d80 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efee:	4b28      	ldr	r3, [pc, #160]	@ (800f090 <vTaskSwitchContext+0x10c>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	617b      	str	r3, [r7, #20]
 800eff4:	e013      	b.n	800f01e <vTaskSwitchContext+0x9a>
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d10d      	bne.n	800f018 <vTaskSwitchContext+0x94>
	__asm volatile
 800effc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f000:	b672      	cpsid	i
 800f002:	f383 8811 	msr	BASEPRI, r3
 800f006:	f3bf 8f6f 	isb	sy
 800f00a:	f3bf 8f4f 	dsb	sy
 800f00e:	b662      	cpsie	i
 800f010:	607b      	str	r3, [r7, #4]
}
 800f012:	bf00      	nop
 800f014:	bf00      	nop
 800f016:	e7fd      	b.n	800f014 <vTaskSwitchContext+0x90>
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	3b01      	subs	r3, #1
 800f01c:	617b      	str	r3, [r7, #20]
 800f01e:	491d      	ldr	r1, [pc, #116]	@ (800f094 <vTaskSwitchContext+0x110>)
 800f020:	697a      	ldr	r2, [r7, #20]
 800f022:	4613      	mov	r3, r2
 800f024:	009b      	lsls	r3, r3, #2
 800f026:	4413      	add	r3, r2
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	440b      	add	r3, r1
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d0e1      	beq.n	800eff6 <vTaskSwitchContext+0x72>
 800f032:	697a      	ldr	r2, [r7, #20]
 800f034:	4613      	mov	r3, r2
 800f036:	009b      	lsls	r3, r3, #2
 800f038:	4413      	add	r3, r2
 800f03a:	009b      	lsls	r3, r3, #2
 800f03c:	4a15      	ldr	r2, [pc, #84]	@ (800f094 <vTaskSwitchContext+0x110>)
 800f03e:	4413      	add	r3, r2
 800f040:	60bb      	str	r3, [r7, #8]
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	685a      	ldr	r2, [r3, #4]
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	605a      	str	r2, [r3, #4]
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	685a      	ldr	r2, [r3, #4]
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	3308      	adds	r3, #8
 800f054:	429a      	cmp	r2, r3
 800f056:	d104      	bne.n	800f062 <vTaskSwitchContext+0xde>
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	685a      	ldr	r2, [r3, #4]
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	605a      	str	r2, [r3, #4]
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	68db      	ldr	r3, [r3, #12]
 800f068:	4a08      	ldr	r2, [pc, #32]	@ (800f08c <vTaskSwitchContext+0x108>)
 800f06a:	6013      	str	r3, [r2, #0]
 800f06c:	4a08      	ldr	r2, [pc, #32]	@ (800f090 <vTaskSwitchContext+0x10c>)
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f072:	4b06      	ldr	r3, [pc, #24]	@ (800f08c <vTaskSwitchContext+0x108>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	3354      	adds	r3, #84	@ 0x54
 800f078:	4a07      	ldr	r2, [pc, #28]	@ (800f098 <vTaskSwitchContext+0x114>)
 800f07a:	6013      	str	r3, [r2, #0]
}
 800f07c:	bf00      	nop
 800f07e:	3718      	adds	r7, #24
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	2000b31c 	.word	0x2000b31c
 800f088:	2000b308 	.word	0x2000b308
 800f08c:	2000ae20 	.word	0x2000ae20
 800f090:	2000b2fc 	.word	0x2000b2fc
 800f094:	2000ae24 	.word	0x2000ae24
 800f098:	2000003c 	.word	0x2000003c

0800f09c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d10d      	bne.n	800f0c8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800f0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0b0:	b672      	cpsid	i
 800f0b2:	f383 8811 	msr	BASEPRI, r3
 800f0b6:	f3bf 8f6f 	isb	sy
 800f0ba:	f3bf 8f4f 	dsb	sy
 800f0be:	b662      	cpsie	i
 800f0c0:	60fb      	str	r3, [r7, #12]
}
 800f0c2:	bf00      	nop
 800f0c4:	bf00      	nop
 800f0c6:	e7fd      	b.n	800f0c4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f0c8:	4b07      	ldr	r3, [pc, #28]	@ (800f0e8 <vTaskPlaceOnEventList+0x4c>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	3318      	adds	r3, #24
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f7fe f9c6 	bl	800d462 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f0d6:	2101      	movs	r1, #1
 800f0d8:	6838      	ldr	r0, [r7, #0]
 800f0da:	f000 fcbd 	bl	800fa58 <prvAddCurrentTaskToDelayedList>
}
 800f0de:	bf00      	nop
 800f0e0:	3710      	adds	r7, #16
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	2000ae20 	.word	0x2000ae20

0800f0ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b086      	sub	sp, #24
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d10d      	bne.n	800f11a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800f0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f102:	b672      	cpsid	i
 800f104:	f383 8811 	msr	BASEPRI, r3
 800f108:	f3bf 8f6f 	isb	sy
 800f10c:	f3bf 8f4f 	dsb	sy
 800f110:	b662      	cpsie	i
 800f112:	617b      	str	r3, [r7, #20]
}
 800f114:	bf00      	nop
 800f116:	bf00      	nop
 800f118:	e7fd      	b.n	800f116 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f11a:	4b0a      	ldr	r3, [pc, #40]	@ (800f144 <vTaskPlaceOnEventListRestricted+0x58>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	3318      	adds	r3, #24
 800f120:	4619      	mov	r1, r3
 800f122:	68f8      	ldr	r0, [r7, #12]
 800f124:	f7fe f979 	bl	800d41a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d002      	beq.n	800f134 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800f12e:	f04f 33ff 	mov.w	r3, #4294967295
 800f132:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f134:	6879      	ldr	r1, [r7, #4]
 800f136:	68b8      	ldr	r0, [r7, #8]
 800f138:	f000 fc8e 	bl	800fa58 <prvAddCurrentTaskToDelayedList>
	}
 800f13c:	bf00      	nop
 800f13e:	3718      	adds	r7, #24
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}
 800f144:	2000ae20 	.word	0x2000ae20

0800f148 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b086      	sub	sp, #24
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	68db      	ldr	r3, [r3, #12]
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d10d      	bne.n	800f17a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800f15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f162:	b672      	cpsid	i
 800f164:	f383 8811 	msr	BASEPRI, r3
 800f168:	f3bf 8f6f 	isb	sy
 800f16c:	f3bf 8f4f 	dsb	sy
 800f170:	b662      	cpsie	i
 800f172:	60fb      	str	r3, [r7, #12]
}
 800f174:	bf00      	nop
 800f176:	bf00      	nop
 800f178:	e7fd      	b.n	800f176 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	3318      	adds	r3, #24
 800f17e:	4618      	mov	r0, r3
 800f180:	f7fe f9a8 	bl	800d4d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f184:	4b1d      	ldr	r3, [pc, #116]	@ (800f1fc <xTaskRemoveFromEventList+0xb4>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d11d      	bne.n	800f1c8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	3304      	adds	r3, #4
 800f190:	4618      	mov	r0, r3
 800f192:	f7fe f99f 	bl	800d4d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f19a:	4b19      	ldr	r3, [pc, #100]	@ (800f200 <xTaskRemoveFromEventList+0xb8>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d903      	bls.n	800f1aa <xTaskRemoveFromEventList+0x62>
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1a6:	4a16      	ldr	r2, [pc, #88]	@ (800f200 <xTaskRemoveFromEventList+0xb8>)
 800f1a8:	6013      	str	r3, [r2, #0]
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1ae:	4613      	mov	r3, r2
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	4413      	add	r3, r2
 800f1b4:	009b      	lsls	r3, r3, #2
 800f1b6:	4a13      	ldr	r2, [pc, #76]	@ (800f204 <xTaskRemoveFromEventList+0xbc>)
 800f1b8:	441a      	add	r2, r3
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	3304      	adds	r3, #4
 800f1be:	4619      	mov	r1, r3
 800f1c0:	4610      	mov	r0, r2
 800f1c2:	f7fe f92a 	bl	800d41a <vListInsertEnd>
 800f1c6:	e005      	b.n	800f1d4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	3318      	adds	r3, #24
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	480e      	ldr	r0, [pc, #56]	@ (800f208 <xTaskRemoveFromEventList+0xc0>)
 800f1d0:	f7fe f923 	bl	800d41a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1d8:	4b0c      	ldr	r3, [pc, #48]	@ (800f20c <xTaskRemoveFromEventList+0xc4>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d905      	bls.n	800f1ee <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f1e6:	4b0a      	ldr	r3, [pc, #40]	@ (800f210 <xTaskRemoveFromEventList+0xc8>)
 800f1e8:	2201      	movs	r2, #1
 800f1ea:	601a      	str	r2, [r3, #0]
 800f1ec:	e001      	b.n	800f1f2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f1f2:	697b      	ldr	r3, [r7, #20]
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3718      	adds	r7, #24
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	2000b31c 	.word	0x2000b31c
 800f200:	2000b2fc 	.word	0x2000b2fc
 800f204:	2000ae24 	.word	0x2000ae24
 800f208:	2000b2b4 	.word	0x2000b2b4
 800f20c:	2000ae20 	.word	0x2000ae20
 800f210:	2000b308 	.word	0x2000b308

0800f214 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f21c:	4b06      	ldr	r3, [pc, #24]	@ (800f238 <vTaskInternalSetTimeOutState+0x24>)
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f224:	4b05      	ldr	r3, [pc, #20]	@ (800f23c <vTaskInternalSetTimeOutState+0x28>)
 800f226:	681a      	ldr	r2, [r3, #0]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	605a      	str	r2, [r3, #4]
}
 800f22c:	bf00      	nop
 800f22e:	370c      	adds	r7, #12
 800f230:	46bd      	mov	sp, r7
 800f232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f236:	4770      	bx	lr
 800f238:	2000b30c 	.word	0x2000b30c
 800f23c:	2000b2f8 	.word	0x2000b2f8

0800f240 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b088      	sub	sp, #32
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d10d      	bne.n	800f26c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800f250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f254:	b672      	cpsid	i
 800f256:	f383 8811 	msr	BASEPRI, r3
 800f25a:	f3bf 8f6f 	isb	sy
 800f25e:	f3bf 8f4f 	dsb	sy
 800f262:	b662      	cpsie	i
 800f264:	613b      	str	r3, [r7, #16]
}
 800f266:	bf00      	nop
 800f268:	bf00      	nop
 800f26a:	e7fd      	b.n	800f268 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d10d      	bne.n	800f28e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800f272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f276:	b672      	cpsid	i
 800f278:	f383 8811 	msr	BASEPRI, r3
 800f27c:	f3bf 8f6f 	isb	sy
 800f280:	f3bf 8f4f 	dsb	sy
 800f284:	b662      	cpsie	i
 800f286:	60fb      	str	r3, [r7, #12]
}
 800f288:	bf00      	nop
 800f28a:	bf00      	nop
 800f28c:	e7fd      	b.n	800f28a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800f28e:	f001 f8ad 	bl	80103ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f292:	4b1d      	ldr	r3, [pc, #116]	@ (800f308 <xTaskCheckForTimeOut+0xc8>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	69ba      	ldr	r2, [r7, #24]
 800f29e:	1ad3      	subs	r3, r2, r3
 800f2a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2aa:	d102      	bne.n	800f2b2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	61fb      	str	r3, [r7, #28]
 800f2b0:	e023      	b.n	800f2fa <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681a      	ldr	r2, [r3, #0]
 800f2b6:	4b15      	ldr	r3, [pc, #84]	@ (800f30c <xTaskCheckForTimeOut+0xcc>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d007      	beq.n	800f2ce <xTaskCheckForTimeOut+0x8e>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	69ba      	ldr	r2, [r7, #24]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d302      	bcc.n	800f2ce <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	61fb      	str	r3, [r7, #28]
 800f2cc:	e015      	b.n	800f2fa <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	697a      	ldr	r2, [r7, #20]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d20b      	bcs.n	800f2f0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	681a      	ldr	r2, [r3, #0]
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	1ad2      	subs	r2, r2, r3
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7ff ff95 	bl	800f214 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	61fb      	str	r3, [r7, #28]
 800f2ee:	e004      	b.n	800f2fa <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f2fa:	f001 f8ad 	bl	8010458 <vPortExitCritical>

	return xReturn;
 800f2fe:	69fb      	ldr	r3, [r7, #28]
}
 800f300:	4618      	mov	r0, r3
 800f302:	3720      	adds	r7, #32
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	2000b2f8 	.word	0x2000b2f8
 800f30c:	2000b30c 	.word	0x2000b30c

0800f310 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f310:	b480      	push	{r7}
 800f312:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f314:	4b03      	ldr	r3, [pc, #12]	@ (800f324 <vTaskMissedYield+0x14>)
 800f316:	2201      	movs	r2, #1
 800f318:	601a      	str	r2, [r3, #0]
}
 800f31a:	bf00      	nop
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr
 800f324:	2000b308 	.word	0x2000b308

0800f328 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f330:	f000 f852 	bl	800f3d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f334:	4b06      	ldr	r3, [pc, #24]	@ (800f350 <prvIdleTask+0x28>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d9f9      	bls.n	800f330 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f33c:	4b05      	ldr	r3, [pc, #20]	@ (800f354 <prvIdleTask+0x2c>)
 800f33e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f342:	601a      	str	r2, [r3, #0]
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f34c:	e7f0      	b.n	800f330 <prvIdleTask+0x8>
 800f34e:	bf00      	nop
 800f350:	2000ae24 	.word	0x2000ae24
 800f354:	e000ed04 	.word	0xe000ed04

0800f358 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f35e:	2300      	movs	r3, #0
 800f360:	607b      	str	r3, [r7, #4]
 800f362:	e00c      	b.n	800f37e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f364:	687a      	ldr	r2, [r7, #4]
 800f366:	4613      	mov	r3, r2
 800f368:	009b      	lsls	r3, r3, #2
 800f36a:	4413      	add	r3, r2
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	4a12      	ldr	r2, [pc, #72]	@ (800f3b8 <prvInitialiseTaskLists+0x60>)
 800f370:	4413      	add	r3, r2
 800f372:	4618      	mov	r0, r3
 800f374:	f7fe f824 	bl	800d3c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	3301      	adds	r3, #1
 800f37c:	607b      	str	r3, [r7, #4]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2b37      	cmp	r3, #55	@ 0x37
 800f382:	d9ef      	bls.n	800f364 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f384:	480d      	ldr	r0, [pc, #52]	@ (800f3bc <prvInitialiseTaskLists+0x64>)
 800f386:	f7fe f81b 	bl	800d3c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f38a:	480d      	ldr	r0, [pc, #52]	@ (800f3c0 <prvInitialiseTaskLists+0x68>)
 800f38c:	f7fe f818 	bl	800d3c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f390:	480c      	ldr	r0, [pc, #48]	@ (800f3c4 <prvInitialiseTaskLists+0x6c>)
 800f392:	f7fe f815 	bl	800d3c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f396:	480c      	ldr	r0, [pc, #48]	@ (800f3c8 <prvInitialiseTaskLists+0x70>)
 800f398:	f7fe f812 	bl	800d3c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f39c:	480b      	ldr	r0, [pc, #44]	@ (800f3cc <prvInitialiseTaskLists+0x74>)
 800f39e:	f7fe f80f 	bl	800d3c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f3a2:	4b0b      	ldr	r3, [pc, #44]	@ (800f3d0 <prvInitialiseTaskLists+0x78>)
 800f3a4:	4a05      	ldr	r2, [pc, #20]	@ (800f3bc <prvInitialiseTaskLists+0x64>)
 800f3a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f3a8:	4b0a      	ldr	r3, [pc, #40]	@ (800f3d4 <prvInitialiseTaskLists+0x7c>)
 800f3aa:	4a05      	ldr	r2, [pc, #20]	@ (800f3c0 <prvInitialiseTaskLists+0x68>)
 800f3ac:	601a      	str	r2, [r3, #0]
}
 800f3ae:	bf00      	nop
 800f3b0:	3708      	adds	r7, #8
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	2000ae24 	.word	0x2000ae24
 800f3bc:	2000b284 	.word	0x2000b284
 800f3c0:	2000b298 	.word	0x2000b298
 800f3c4:	2000b2b4 	.word	0x2000b2b4
 800f3c8:	2000b2c8 	.word	0x2000b2c8
 800f3cc:	2000b2e0 	.word	0x2000b2e0
 800f3d0:	2000b2ac 	.word	0x2000b2ac
 800f3d4:	2000b2b0 	.word	0x2000b2b0

0800f3d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f3de:	e019      	b.n	800f414 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f3e0:	f001 f804 	bl	80103ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3e4:	4b10      	ldr	r3, [pc, #64]	@ (800f428 <prvCheckTasksWaitingTermination+0x50>)
 800f3e6:	68db      	ldr	r3, [r3, #12]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	3304      	adds	r3, #4
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7fe f86f 	bl	800d4d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800f42c <prvCheckTasksWaitingTermination+0x54>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	3b01      	subs	r3, #1
 800f3fc:	4a0b      	ldr	r2, [pc, #44]	@ (800f42c <prvCheckTasksWaitingTermination+0x54>)
 800f3fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f400:	4b0b      	ldr	r3, [pc, #44]	@ (800f430 <prvCheckTasksWaitingTermination+0x58>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	3b01      	subs	r3, #1
 800f406:	4a0a      	ldr	r2, [pc, #40]	@ (800f430 <prvCheckTasksWaitingTermination+0x58>)
 800f408:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f40a:	f001 f825 	bl	8010458 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f000 f810 	bl	800f434 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f414:	4b06      	ldr	r3, [pc, #24]	@ (800f430 <prvCheckTasksWaitingTermination+0x58>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d1e1      	bne.n	800f3e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f41c:	bf00      	nop
 800f41e:	bf00      	nop
 800f420:	3708      	adds	r7, #8
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
 800f426:	bf00      	nop
 800f428:	2000b2c8 	.word	0x2000b2c8
 800f42c:	2000b2f4 	.word	0x2000b2f4
 800f430:	2000b2dc 	.word	0x2000b2dc

0800f434 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f434:	b580      	push	{r7, lr}
 800f436:	b084      	sub	sp, #16
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	3354      	adds	r3, #84	@ 0x54
 800f440:	4618      	mov	r0, r3
 800f442:	f00d f87f 	bl	801c544 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d108      	bne.n	800f462 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f454:	4618      	mov	r0, r3
 800f456:	f001 f9c5 	bl	80107e4 <vPortFree>
				vPortFree( pxTCB );
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f001 f9c2 	bl	80107e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f460:	e01b      	b.n	800f49a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f468:	2b01      	cmp	r3, #1
 800f46a:	d103      	bne.n	800f474 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f001 f9b9 	bl	80107e4 <vPortFree>
	}
 800f472:	e012      	b.n	800f49a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f47a:	2b02      	cmp	r3, #2
 800f47c:	d00d      	beq.n	800f49a <prvDeleteTCB+0x66>
	__asm volatile
 800f47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f482:	b672      	cpsid	i
 800f484:	f383 8811 	msr	BASEPRI, r3
 800f488:	f3bf 8f6f 	isb	sy
 800f48c:	f3bf 8f4f 	dsb	sy
 800f490:	b662      	cpsie	i
 800f492:	60fb      	str	r3, [r7, #12]
}
 800f494:	bf00      	nop
 800f496:	bf00      	nop
 800f498:	e7fd      	b.n	800f496 <prvDeleteTCB+0x62>
	}
 800f49a:	bf00      	nop
 800f49c:	3710      	adds	r7, #16
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
	...

0800f4a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f4aa:	4b0c      	ldr	r3, [pc, #48]	@ (800f4dc <prvResetNextTaskUnblockTime+0x38>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d104      	bne.n	800f4be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f4b4:	4b0a      	ldr	r3, [pc, #40]	@ (800f4e0 <prvResetNextTaskUnblockTime+0x3c>)
 800f4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f4ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f4bc:	e008      	b.n	800f4d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4be:	4b07      	ldr	r3, [pc, #28]	@ (800f4dc <prvResetNextTaskUnblockTime+0x38>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	68db      	ldr	r3, [r3, #12]
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	685b      	ldr	r3, [r3, #4]
 800f4cc:	4a04      	ldr	r2, [pc, #16]	@ (800f4e0 <prvResetNextTaskUnblockTime+0x3c>)
 800f4ce:	6013      	str	r3, [r2, #0]
}
 800f4d0:	bf00      	nop
 800f4d2:	370c      	adds	r7, #12
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr
 800f4dc:	2000b2ac 	.word	0x2000b2ac
 800f4e0:	2000b314 	.word	0x2000b314

0800f4e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b083      	sub	sp, #12
 800f4e8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f4ea:	4b05      	ldr	r3, [pc, #20]	@ (800f500 <xTaskGetCurrentTaskHandle+0x1c>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f4f0:	687b      	ldr	r3, [r7, #4]
	}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	370c      	adds	r7, #12
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop
 800f500:	2000ae20 	.word	0x2000ae20

0800f504 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f50a:	4b0b      	ldr	r3, [pc, #44]	@ (800f538 <xTaskGetSchedulerState+0x34>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d102      	bne.n	800f518 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f512:	2301      	movs	r3, #1
 800f514:	607b      	str	r3, [r7, #4]
 800f516:	e008      	b.n	800f52a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f518:	4b08      	ldr	r3, [pc, #32]	@ (800f53c <xTaskGetSchedulerState+0x38>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d102      	bne.n	800f526 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f520:	2302      	movs	r3, #2
 800f522:	607b      	str	r3, [r7, #4]
 800f524:	e001      	b.n	800f52a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f526:	2300      	movs	r3, #0
 800f528:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f52a:	687b      	ldr	r3, [r7, #4]
	}
 800f52c:	4618      	mov	r0, r3
 800f52e:	370c      	adds	r7, #12
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr
 800f538:	2000b300 	.word	0x2000b300
 800f53c:	2000b31c 	.word	0x2000b31c

0800f540 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f540:	b580      	push	{r7, lr}
 800f542:	b084      	sub	sp, #16
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f54c:	2300      	movs	r3, #0
 800f54e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d051      	beq.n	800f5fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f55a:	4b2a      	ldr	r3, [pc, #168]	@ (800f604 <xTaskPriorityInherit+0xc4>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f560:	429a      	cmp	r2, r3
 800f562:	d241      	bcs.n	800f5e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	699b      	ldr	r3, [r3, #24]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	db06      	blt.n	800f57a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f56c:	4b25      	ldr	r3, [pc, #148]	@ (800f604 <xTaskPriorityInherit+0xc4>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f572:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	6959      	ldr	r1, [r3, #20]
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f582:	4613      	mov	r3, r2
 800f584:	009b      	lsls	r3, r3, #2
 800f586:	4413      	add	r3, r2
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	4a1f      	ldr	r2, [pc, #124]	@ (800f608 <xTaskPriorityInherit+0xc8>)
 800f58c:	4413      	add	r3, r2
 800f58e:	4299      	cmp	r1, r3
 800f590:	d122      	bne.n	800f5d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	3304      	adds	r3, #4
 800f596:	4618      	mov	r0, r3
 800f598:	f7fd ff9c 	bl	800d4d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f59c:	4b19      	ldr	r3, [pc, #100]	@ (800f604 <xTaskPriorityInherit+0xc4>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5aa:	4b18      	ldr	r3, [pc, #96]	@ (800f60c <xTaskPriorityInherit+0xcc>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d903      	bls.n	800f5ba <xTaskPriorityInherit+0x7a>
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5b6:	4a15      	ldr	r2, [pc, #84]	@ (800f60c <xTaskPriorityInherit+0xcc>)
 800f5b8:	6013      	str	r3, [r2, #0]
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5be:	4613      	mov	r3, r2
 800f5c0:	009b      	lsls	r3, r3, #2
 800f5c2:	4413      	add	r3, r2
 800f5c4:	009b      	lsls	r3, r3, #2
 800f5c6:	4a10      	ldr	r2, [pc, #64]	@ (800f608 <xTaskPriorityInherit+0xc8>)
 800f5c8:	441a      	add	r2, r3
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	3304      	adds	r3, #4
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	4610      	mov	r0, r2
 800f5d2:	f7fd ff22 	bl	800d41a <vListInsertEnd>
 800f5d6:	e004      	b.n	800f5e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f5d8:	4b0a      	ldr	r3, [pc, #40]	@ (800f604 <xTaskPriorityInherit+0xc4>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	60fb      	str	r3, [r7, #12]
 800f5e6:	e008      	b.n	800f5fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f5ec:	4b05      	ldr	r3, [pc, #20]	@ (800f604 <xTaskPriorityInherit+0xc4>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d201      	bcs.n	800f5fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
	}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3710      	adds	r7, #16
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	2000ae20 	.word	0x2000ae20
 800f608:	2000ae24 	.word	0x2000ae24
 800f60c:	2000b2fc 	.word	0x2000b2fc

0800f610 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f610:	b580      	push	{r7, lr}
 800f612:	b086      	sub	sp, #24
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f61c:	2300      	movs	r3, #0
 800f61e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d05c      	beq.n	800f6e0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f626:	4b31      	ldr	r3, [pc, #196]	@ (800f6ec <xTaskPriorityDisinherit+0xdc>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	693a      	ldr	r2, [r7, #16]
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d00d      	beq.n	800f64c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800f630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f634:	b672      	cpsid	i
 800f636:	f383 8811 	msr	BASEPRI, r3
 800f63a:	f3bf 8f6f 	isb	sy
 800f63e:	f3bf 8f4f 	dsb	sy
 800f642:	b662      	cpsie	i
 800f644:	60fb      	str	r3, [r7, #12]
}
 800f646:	bf00      	nop
 800f648:	bf00      	nop
 800f64a:	e7fd      	b.n	800f648 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f650:	2b00      	cmp	r3, #0
 800f652:	d10d      	bne.n	800f670 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800f654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f658:	b672      	cpsid	i
 800f65a:	f383 8811 	msr	BASEPRI, r3
 800f65e:	f3bf 8f6f 	isb	sy
 800f662:	f3bf 8f4f 	dsb	sy
 800f666:	b662      	cpsie	i
 800f668:	60bb      	str	r3, [r7, #8]
}
 800f66a:	bf00      	nop
 800f66c:	bf00      	nop
 800f66e:	e7fd      	b.n	800f66c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f674:	1e5a      	subs	r2, r3, #1
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f682:	429a      	cmp	r2, r3
 800f684:	d02c      	beq.n	800f6e0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f686:	693b      	ldr	r3, [r7, #16]
 800f688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d128      	bne.n	800f6e0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	3304      	adds	r3, #4
 800f692:	4618      	mov	r0, r3
 800f694:	f7fd ff1e 	bl	800d4d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6b0:	4b0f      	ldr	r3, [pc, #60]	@ (800f6f0 <xTaskPriorityDisinherit+0xe0>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d903      	bls.n	800f6c0 <xTaskPriorityDisinherit+0xb0>
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6bc:	4a0c      	ldr	r2, [pc, #48]	@ (800f6f0 <xTaskPriorityDisinherit+0xe0>)
 800f6be:	6013      	str	r3, [r2, #0]
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6c4:	4613      	mov	r3, r2
 800f6c6:	009b      	lsls	r3, r3, #2
 800f6c8:	4413      	add	r3, r2
 800f6ca:	009b      	lsls	r3, r3, #2
 800f6cc:	4a09      	ldr	r2, [pc, #36]	@ (800f6f4 <xTaskPriorityDisinherit+0xe4>)
 800f6ce:	441a      	add	r2, r3
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	3304      	adds	r3, #4
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	4610      	mov	r0, r2
 800f6d8:	f7fd fe9f 	bl	800d41a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f6dc:	2301      	movs	r3, #1
 800f6de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f6e0:	697b      	ldr	r3, [r7, #20]
	}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3718      	adds	r7, #24
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	2000ae20 	.word	0x2000ae20
 800f6f0:	2000b2fc 	.word	0x2000b2fc
 800f6f4:	2000ae24 	.word	0x2000ae24

0800f6f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b088      	sub	sp, #32
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f706:	2301      	movs	r3, #1
 800f708:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d070      	beq.n	800f7f2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f710:	69bb      	ldr	r3, [r7, #24]
 800f712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f714:	2b00      	cmp	r3, #0
 800f716:	d10d      	bne.n	800f734 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800f718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f71c:	b672      	cpsid	i
 800f71e:	f383 8811 	msr	BASEPRI, r3
 800f722:	f3bf 8f6f 	isb	sy
 800f726:	f3bf 8f4f 	dsb	sy
 800f72a:	b662      	cpsie	i
 800f72c:	60fb      	str	r3, [r7, #12]
}
 800f72e:	bf00      	nop
 800f730:	bf00      	nop
 800f732:	e7fd      	b.n	800f730 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f734:	69bb      	ldr	r3, [r7, #24]
 800f736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f738:	683a      	ldr	r2, [r7, #0]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d902      	bls.n	800f744 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	61fb      	str	r3, [r7, #28]
 800f742:	e002      	b.n	800f74a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f744:	69bb      	ldr	r3, [r7, #24]
 800f746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f748:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f74e:	69fa      	ldr	r2, [r7, #28]
 800f750:	429a      	cmp	r2, r3
 800f752:	d04e      	beq.n	800f7f2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f754:	69bb      	ldr	r3, [r7, #24]
 800f756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f758:	697a      	ldr	r2, [r7, #20]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d149      	bne.n	800f7f2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f75e:	4b27      	ldr	r3, [pc, #156]	@ (800f7fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	69ba      	ldr	r2, [r7, #24]
 800f764:	429a      	cmp	r2, r3
 800f766:	d10d      	bne.n	800f784 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800f768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f76c:	b672      	cpsid	i
 800f76e:	f383 8811 	msr	BASEPRI, r3
 800f772:	f3bf 8f6f 	isb	sy
 800f776:	f3bf 8f4f 	dsb	sy
 800f77a:	b662      	cpsie	i
 800f77c:	60bb      	str	r3, [r7, #8]
}
 800f77e:	bf00      	nop
 800f780:	bf00      	nop
 800f782:	e7fd      	b.n	800f780 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f784:	69bb      	ldr	r3, [r7, #24]
 800f786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f788:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f78a:	69bb      	ldr	r3, [r7, #24]
 800f78c:	69fa      	ldr	r2, [r7, #28]
 800f78e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	699b      	ldr	r3, [r3, #24]
 800f794:	2b00      	cmp	r3, #0
 800f796:	db04      	blt.n	800f7a2 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f798:	69fb      	ldr	r3, [r7, #28]
 800f79a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f79e:	69bb      	ldr	r3, [r7, #24]
 800f7a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f7a2:	69bb      	ldr	r3, [r7, #24]
 800f7a4:	6959      	ldr	r1, [r3, #20]
 800f7a6:	693a      	ldr	r2, [r7, #16]
 800f7a8:	4613      	mov	r3, r2
 800f7aa:	009b      	lsls	r3, r3, #2
 800f7ac:	4413      	add	r3, r2
 800f7ae:	009b      	lsls	r3, r3, #2
 800f7b0:	4a13      	ldr	r2, [pc, #76]	@ (800f800 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800f7b2:	4413      	add	r3, r2
 800f7b4:	4299      	cmp	r1, r3
 800f7b6:	d11c      	bne.n	800f7f2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7b8:	69bb      	ldr	r3, [r7, #24]
 800f7ba:	3304      	adds	r3, #4
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7fd fe89 	bl	800d4d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7c6:	4b0f      	ldr	r3, [pc, #60]	@ (800f804 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d903      	bls.n	800f7d6 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800f7ce:	69bb      	ldr	r3, [r7, #24]
 800f7d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7d2:	4a0c      	ldr	r2, [pc, #48]	@ (800f804 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800f7d4:	6013      	str	r3, [r2, #0]
 800f7d6:	69bb      	ldr	r3, [r7, #24]
 800f7d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7da:	4613      	mov	r3, r2
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	4413      	add	r3, r2
 800f7e0:	009b      	lsls	r3, r3, #2
 800f7e2:	4a07      	ldr	r2, [pc, #28]	@ (800f800 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800f7e4:	441a      	add	r2, r3
 800f7e6:	69bb      	ldr	r3, [r7, #24]
 800f7e8:	3304      	adds	r3, #4
 800f7ea:	4619      	mov	r1, r3
 800f7ec:	4610      	mov	r0, r2
 800f7ee:	f7fd fe14 	bl	800d41a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f7f2:	bf00      	nop
 800f7f4:	3720      	adds	r7, #32
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	2000ae20 	.word	0x2000ae20
 800f800:	2000ae24 	.word	0x2000ae24
 800f804:	2000b2fc 	.word	0x2000b2fc

0800f808 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f808:	b480      	push	{r7}
 800f80a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f80c:	4b07      	ldr	r3, [pc, #28]	@ (800f82c <pvTaskIncrementMutexHeldCount+0x24>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d004      	beq.n	800f81e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f814:	4b05      	ldr	r3, [pc, #20]	@ (800f82c <pvTaskIncrementMutexHeldCount+0x24>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f81a:	3201      	adds	r2, #1
 800f81c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800f81e:	4b03      	ldr	r3, [pc, #12]	@ (800f82c <pvTaskIncrementMutexHeldCount+0x24>)
 800f820:	681b      	ldr	r3, [r3, #0]
	}
 800f822:	4618      	mov	r0, r3
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr
 800f82c:	2000ae20 	.word	0x2000ae20

0800f830 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f830:	b580      	push	{r7, lr}
 800f832:	b084      	sub	sp, #16
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f83a:	f000 fdd7 	bl	80103ec <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f83e:	4b20      	ldr	r3, [pc, #128]	@ (800f8c0 <ulTaskNotifyTake+0x90>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f846:	2b00      	cmp	r3, #0
 800f848:	d113      	bne.n	800f872 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f84a:	4b1d      	ldr	r3, [pc, #116]	@ (800f8c0 <ulTaskNotifyTake+0x90>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	2201      	movs	r2, #1
 800f850:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d00b      	beq.n	800f872 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f85a:	2101      	movs	r1, #1
 800f85c:	6838      	ldr	r0, [r7, #0]
 800f85e:	f000 f8fb 	bl	800fa58 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f862:	4b18      	ldr	r3, [pc, #96]	@ (800f8c4 <ulTaskNotifyTake+0x94>)
 800f864:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f868:	601a      	str	r2, [r3, #0]
 800f86a:	f3bf 8f4f 	dsb	sy
 800f86e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f872:	f000 fdf1 	bl	8010458 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f876:	f000 fdb9 	bl	80103ec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f87a:	4b11      	ldr	r3, [pc, #68]	@ (800f8c0 <ulTaskNotifyTake+0x90>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f882:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00e      	beq.n	800f8a8 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d005      	beq.n	800f89c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f890:	4b0b      	ldr	r3, [pc, #44]	@ (800f8c0 <ulTaskNotifyTake+0x90>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	2200      	movs	r2, #0
 800f896:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800f89a:	e005      	b.n	800f8a8 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800f89c:	4b08      	ldr	r3, [pc, #32]	@ (800f8c0 <ulTaskNotifyTake+0x90>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	68fa      	ldr	r2, [r7, #12]
 800f8a2:	3a01      	subs	r2, #1
 800f8a4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f8a8:	4b05      	ldr	r3, [pc, #20]	@ (800f8c0 <ulTaskNotifyTake+0x90>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f8b2:	f000 fdd1 	bl	8010458 <vPortExitCritical>

		return ulReturn;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
	}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3710      	adds	r7, #16
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	2000ae20 	.word	0x2000ae20
 800f8c4:	e000ed04 	.word	0xe000ed04

0800f8c8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b08a      	sub	sp, #40	@ 0x28
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	60f8      	str	r0, [r7, #12]
 800f8d0:	60b9      	str	r1, [r7, #8]
 800f8d2:	603b      	str	r3, [r7, #0]
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f8d8:	2301      	movs	r3, #1
 800f8da:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d10d      	bne.n	800f8fe <xTaskGenericNotify+0x36>
	__asm volatile
 800f8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8e6:	b672      	cpsid	i
 800f8e8:	f383 8811 	msr	BASEPRI, r3
 800f8ec:	f3bf 8f6f 	isb	sy
 800f8f0:	f3bf 8f4f 	dsb	sy
 800f8f4:	b662      	cpsie	i
 800f8f6:	61bb      	str	r3, [r7, #24]
}
 800f8f8:	bf00      	nop
 800f8fa:	bf00      	nop
 800f8fc:	e7fd      	b.n	800f8fa <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f902:	f000 fd73 	bl	80103ec <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d004      	beq.n	800f916 <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f90c:	6a3b      	ldr	r3, [r7, #32]
 800f90e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f916:	6a3b      	ldr	r3, [r7, #32]
 800f918:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f91c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f91e:	6a3b      	ldr	r3, [r7, #32]
 800f920:	2202      	movs	r2, #2
 800f922:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f926:	79fb      	ldrb	r3, [r7, #7]
 800f928:	2b04      	cmp	r3, #4
 800f92a:	d82e      	bhi.n	800f98a <xTaskGenericNotify+0xc2>
 800f92c:	a201      	add	r2, pc, #4	@ (adr r2, 800f934 <xTaskGenericNotify+0x6c>)
 800f92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f932:	bf00      	nop
 800f934:	0800f9b3 	.word	0x0800f9b3
 800f938:	0800f949 	.word	0x0800f949
 800f93c:	0800f95b 	.word	0x0800f95b
 800f940:	0800f96b 	.word	0x0800f96b
 800f944:	0800f975 	.word	0x0800f975
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f948:	6a3b      	ldr	r3, [r7, #32]
 800f94a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	431a      	orrs	r2, r3
 800f952:	6a3b      	ldr	r3, [r7, #32]
 800f954:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f958:	e02e      	b.n	800f9b8 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f95a:	6a3b      	ldr	r3, [r7, #32]
 800f95c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f960:	1c5a      	adds	r2, r3, #1
 800f962:	6a3b      	ldr	r3, [r7, #32]
 800f964:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f968:	e026      	b.n	800f9b8 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f96a:	6a3b      	ldr	r3, [r7, #32]
 800f96c:	68ba      	ldr	r2, [r7, #8]
 800f96e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f972:	e021      	b.n	800f9b8 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f974:	7ffb      	ldrb	r3, [r7, #31]
 800f976:	2b02      	cmp	r3, #2
 800f978:	d004      	beq.n	800f984 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f97a:	6a3b      	ldr	r3, [r7, #32]
 800f97c:	68ba      	ldr	r2, [r7, #8]
 800f97e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f982:	e019      	b.n	800f9b8 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 800f984:	2300      	movs	r3, #0
 800f986:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f988:	e016      	b.n	800f9b8 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f98a:	6a3b      	ldr	r3, [r7, #32]
 800f98c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f990:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f994:	d00f      	beq.n	800f9b6 <xTaskGenericNotify+0xee>
	__asm volatile
 800f996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f99a:	b672      	cpsid	i
 800f99c:	f383 8811 	msr	BASEPRI, r3
 800f9a0:	f3bf 8f6f 	isb	sy
 800f9a4:	f3bf 8f4f 	dsb	sy
 800f9a8:	b662      	cpsie	i
 800f9aa:	617b      	str	r3, [r7, #20]
}
 800f9ac:	bf00      	nop
 800f9ae:	bf00      	nop
 800f9b0:	e7fd      	b.n	800f9ae <xTaskGenericNotify+0xe6>
					break;
 800f9b2:	bf00      	nop
 800f9b4:	e000      	b.n	800f9b8 <xTaskGenericNotify+0xf0>

					break;
 800f9b6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f9b8:	7ffb      	ldrb	r3, [r7, #31]
 800f9ba:	2b01      	cmp	r3, #1
 800f9bc:	d13d      	bne.n	800fa3a <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9be:	6a3b      	ldr	r3, [r7, #32]
 800f9c0:	3304      	adds	r3, #4
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fd fd86 	bl	800d4d4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f9c8:	6a3b      	ldr	r3, [r7, #32]
 800f9ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9cc:	4b1e      	ldr	r3, [pc, #120]	@ (800fa48 <xTaskGenericNotify+0x180>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d903      	bls.n	800f9dc <xTaskGenericNotify+0x114>
 800f9d4:	6a3b      	ldr	r3, [r7, #32]
 800f9d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9d8:	4a1b      	ldr	r2, [pc, #108]	@ (800fa48 <xTaskGenericNotify+0x180>)
 800f9da:	6013      	str	r3, [r2, #0]
 800f9dc:	6a3b      	ldr	r3, [r7, #32]
 800f9de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9e0:	4613      	mov	r3, r2
 800f9e2:	009b      	lsls	r3, r3, #2
 800f9e4:	4413      	add	r3, r2
 800f9e6:	009b      	lsls	r3, r3, #2
 800f9e8:	4a18      	ldr	r2, [pc, #96]	@ (800fa4c <xTaskGenericNotify+0x184>)
 800f9ea:	441a      	add	r2, r3
 800f9ec:	6a3b      	ldr	r3, [r7, #32]
 800f9ee:	3304      	adds	r3, #4
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	4610      	mov	r0, r2
 800f9f4:	f7fd fd11 	bl	800d41a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f9f8:	6a3b      	ldr	r3, [r7, #32]
 800f9fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d00d      	beq.n	800fa1c <xTaskGenericNotify+0x154>
	__asm volatile
 800fa00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa04:	b672      	cpsid	i
 800fa06:	f383 8811 	msr	BASEPRI, r3
 800fa0a:	f3bf 8f6f 	isb	sy
 800fa0e:	f3bf 8f4f 	dsb	sy
 800fa12:	b662      	cpsie	i
 800fa14:	613b      	str	r3, [r7, #16]
}
 800fa16:	bf00      	nop
 800fa18:	bf00      	nop
 800fa1a:	e7fd      	b.n	800fa18 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fa1c:	6a3b      	ldr	r3, [r7, #32]
 800fa1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa20:	4b0b      	ldr	r3, [pc, #44]	@ (800fa50 <xTaskGenericNotify+0x188>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa26:	429a      	cmp	r2, r3
 800fa28:	d907      	bls.n	800fa3a <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800fa2a:	4b0a      	ldr	r3, [pc, #40]	@ (800fa54 <xTaskGenericNotify+0x18c>)
 800fa2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa30:	601a      	str	r2, [r3, #0]
 800fa32:	f3bf 8f4f 	dsb	sy
 800fa36:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fa3a:	f000 fd0d 	bl	8010458 <vPortExitCritical>

		return xReturn;
 800fa3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3728      	adds	r7, #40	@ 0x28
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	2000b2fc 	.word	0x2000b2fc
 800fa4c:	2000ae24 	.word	0x2000ae24
 800fa50:	2000ae20 	.word	0x2000ae20
 800fa54:	e000ed04 	.word	0xe000ed04

0800fa58 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b084      	sub	sp, #16
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fa62:	4b21      	ldr	r3, [pc, #132]	@ (800fae8 <prvAddCurrentTaskToDelayedList+0x90>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa68:	4b20      	ldr	r3, [pc, #128]	@ (800faec <prvAddCurrentTaskToDelayedList+0x94>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	3304      	adds	r3, #4
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7fd fd30 	bl	800d4d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa7a:	d10a      	bne.n	800fa92 <prvAddCurrentTaskToDelayedList+0x3a>
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d007      	beq.n	800fa92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa82:	4b1a      	ldr	r3, [pc, #104]	@ (800faec <prvAddCurrentTaskToDelayedList+0x94>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	3304      	adds	r3, #4
 800fa88:	4619      	mov	r1, r3
 800fa8a:	4819      	ldr	r0, [pc, #100]	@ (800faf0 <prvAddCurrentTaskToDelayedList+0x98>)
 800fa8c:	f7fd fcc5 	bl	800d41a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fa90:	e026      	b.n	800fae0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fa92:	68fa      	ldr	r2, [r7, #12]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	4413      	add	r3, r2
 800fa98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fa9a:	4b14      	ldr	r3, [pc, #80]	@ (800faec <prvAddCurrentTaskToDelayedList+0x94>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	68ba      	ldr	r2, [r7, #8]
 800faa0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800faa2:	68ba      	ldr	r2, [r7, #8]
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d209      	bcs.n	800fabe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800faaa:	4b12      	ldr	r3, [pc, #72]	@ (800faf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800faac:	681a      	ldr	r2, [r3, #0]
 800faae:	4b0f      	ldr	r3, [pc, #60]	@ (800faec <prvAddCurrentTaskToDelayedList+0x94>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	3304      	adds	r3, #4
 800fab4:	4619      	mov	r1, r3
 800fab6:	4610      	mov	r0, r2
 800fab8:	f7fd fcd3 	bl	800d462 <vListInsert>
}
 800fabc:	e010      	b.n	800fae0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fabe:	4b0e      	ldr	r3, [pc, #56]	@ (800faf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fac0:	681a      	ldr	r2, [r3, #0]
 800fac2:	4b0a      	ldr	r3, [pc, #40]	@ (800faec <prvAddCurrentTaskToDelayedList+0x94>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	3304      	adds	r3, #4
 800fac8:	4619      	mov	r1, r3
 800faca:	4610      	mov	r0, r2
 800facc:	f7fd fcc9 	bl	800d462 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fad0:	4b0a      	ldr	r3, [pc, #40]	@ (800fafc <prvAddCurrentTaskToDelayedList+0xa4>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	68ba      	ldr	r2, [r7, #8]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d202      	bcs.n	800fae0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fada:	4a08      	ldr	r2, [pc, #32]	@ (800fafc <prvAddCurrentTaskToDelayedList+0xa4>)
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	6013      	str	r3, [r2, #0]
}
 800fae0:	bf00      	nop
 800fae2:	3710      	adds	r7, #16
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	2000b2f8 	.word	0x2000b2f8
 800faec:	2000ae20 	.word	0x2000ae20
 800faf0:	2000b2e0 	.word	0x2000b2e0
 800faf4:	2000b2b0 	.word	0x2000b2b0
 800faf8:	2000b2ac 	.word	0x2000b2ac
 800fafc:	2000b314 	.word	0x2000b314

0800fb00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b08a      	sub	sp, #40	@ 0x28
 800fb04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fb06:	2300      	movs	r3, #0
 800fb08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fb0a:	f000 fb21 	bl	8010150 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fb0e:	4b1e      	ldr	r3, [pc, #120]	@ (800fb88 <xTimerCreateTimerTask+0x88>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d021      	beq.n	800fb5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fb16:	2300      	movs	r3, #0
 800fb18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fb1e:	1d3a      	adds	r2, r7, #4
 800fb20:	f107 0108 	add.w	r1, r7, #8
 800fb24:	f107 030c 	add.w	r3, r7, #12
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fd fc2f 	bl	800d38c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fb2e:	6879      	ldr	r1, [r7, #4]
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	68fa      	ldr	r2, [r7, #12]
 800fb34:	9202      	str	r2, [sp, #8]
 800fb36:	9301      	str	r3, [sp, #4]
 800fb38:	2302      	movs	r3, #2
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	460a      	mov	r2, r1
 800fb40:	4912      	ldr	r1, [pc, #72]	@ (800fb8c <xTimerCreateTimerTask+0x8c>)
 800fb42:	4813      	ldr	r0, [pc, #76]	@ (800fb90 <xTimerCreateTimerTask+0x90>)
 800fb44:	f7fe fe20 	bl	800e788 <xTaskCreateStatic>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	4a12      	ldr	r2, [pc, #72]	@ (800fb94 <xTimerCreateTimerTask+0x94>)
 800fb4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fb4e:	4b11      	ldr	r3, [pc, #68]	@ (800fb94 <xTimerCreateTimerTask+0x94>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d001      	beq.n	800fb5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fb56:	2301      	movs	r3, #1
 800fb58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d10d      	bne.n	800fb7c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800fb60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb64:	b672      	cpsid	i
 800fb66:	f383 8811 	msr	BASEPRI, r3
 800fb6a:	f3bf 8f6f 	isb	sy
 800fb6e:	f3bf 8f4f 	dsb	sy
 800fb72:	b662      	cpsie	i
 800fb74:	613b      	str	r3, [r7, #16]
}
 800fb76:	bf00      	nop
 800fb78:	bf00      	nop
 800fb7a:	e7fd      	b.n	800fb78 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800fb7c:	697b      	ldr	r3, [r7, #20]
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3718      	adds	r7, #24
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	2000b350 	.word	0x2000b350
 800fb8c:	0801d4e4 	.word	0x0801d4e4
 800fb90:	0800fcd9 	.word	0x0800fcd9
 800fb94:	2000b354 	.word	0x2000b354

0800fb98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b08a      	sub	sp, #40	@ 0x28
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	607a      	str	r2, [r7, #4]
 800fba4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fba6:	2300      	movs	r3, #0
 800fba8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d10d      	bne.n	800fbcc <xTimerGenericCommand+0x34>
	__asm volatile
 800fbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbb4:	b672      	cpsid	i
 800fbb6:	f383 8811 	msr	BASEPRI, r3
 800fbba:	f3bf 8f6f 	isb	sy
 800fbbe:	f3bf 8f4f 	dsb	sy
 800fbc2:	b662      	cpsie	i
 800fbc4:	623b      	str	r3, [r7, #32]
}
 800fbc6:	bf00      	nop
 800fbc8:	bf00      	nop
 800fbca:	e7fd      	b.n	800fbc8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fbcc:	4b19      	ldr	r3, [pc, #100]	@ (800fc34 <xTimerGenericCommand+0x9c>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d02a      	beq.n	800fc2a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	2b05      	cmp	r3, #5
 800fbe4:	dc18      	bgt.n	800fc18 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fbe6:	f7ff fc8d 	bl	800f504 <xTaskGetSchedulerState>
 800fbea:	4603      	mov	r3, r0
 800fbec:	2b02      	cmp	r3, #2
 800fbee:	d109      	bne.n	800fc04 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fbf0:	4b10      	ldr	r3, [pc, #64]	@ (800fc34 <xTimerGenericCommand+0x9c>)
 800fbf2:	6818      	ldr	r0, [r3, #0]
 800fbf4:	f107 0110 	add.w	r1, r7, #16
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbfc:	f7fd ff20 	bl	800da40 <xQueueGenericSend>
 800fc00:	6278      	str	r0, [r7, #36]	@ 0x24
 800fc02:	e012      	b.n	800fc2a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fc04:	4b0b      	ldr	r3, [pc, #44]	@ (800fc34 <xTimerGenericCommand+0x9c>)
 800fc06:	6818      	ldr	r0, [r3, #0]
 800fc08:	f107 0110 	add.w	r1, r7, #16
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	2200      	movs	r2, #0
 800fc10:	f7fd ff16 	bl	800da40 <xQueueGenericSend>
 800fc14:	6278      	str	r0, [r7, #36]	@ 0x24
 800fc16:	e008      	b.n	800fc2a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fc18:	4b06      	ldr	r3, [pc, #24]	@ (800fc34 <xTimerGenericCommand+0x9c>)
 800fc1a:	6818      	ldr	r0, [r3, #0]
 800fc1c:	f107 0110 	add.w	r1, r7, #16
 800fc20:	2300      	movs	r3, #0
 800fc22:	683a      	ldr	r2, [r7, #0]
 800fc24:	f7fe f816 	bl	800dc54 <xQueueGenericSendFromISR>
 800fc28:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3728      	adds	r7, #40	@ 0x28
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	2000b350 	.word	0x2000b350

0800fc38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b088      	sub	sp, #32
 800fc3c:	af02      	add	r7, sp, #8
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc42:	4b24      	ldr	r3, [pc, #144]	@ (800fcd4 <prvProcessExpiredTimer+0x9c>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	68db      	ldr	r3, [r3, #12]
 800fc4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	3304      	adds	r3, #4
 800fc50:	4618      	mov	r0, r3
 800fc52:	f7fd fc3f 	bl	800d4d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fc5c:	f003 0304 	and.w	r3, r3, #4
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d025      	beq.n	800fcb0 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	699a      	ldr	r2, [r3, #24]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	18d1      	adds	r1, r2, r3
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	683a      	ldr	r2, [r7, #0]
 800fc70:	6978      	ldr	r0, [r7, #20]
 800fc72:	f000 f8d7 	bl	800fe24 <prvInsertTimerInActiveList>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d022      	beq.n	800fcc2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	9300      	str	r3, [sp, #0]
 800fc80:	2300      	movs	r3, #0
 800fc82:	687a      	ldr	r2, [r7, #4]
 800fc84:	2100      	movs	r1, #0
 800fc86:	6978      	ldr	r0, [r7, #20]
 800fc88:	f7ff ff86 	bl	800fb98 <xTimerGenericCommand>
 800fc8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fc8e:	693b      	ldr	r3, [r7, #16]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d116      	bne.n	800fcc2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800fc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc98:	b672      	cpsid	i
 800fc9a:	f383 8811 	msr	BASEPRI, r3
 800fc9e:	f3bf 8f6f 	isb	sy
 800fca2:	f3bf 8f4f 	dsb	sy
 800fca6:	b662      	cpsie	i
 800fca8:	60fb      	str	r3, [r7, #12]
}
 800fcaa:	bf00      	nop
 800fcac:	bf00      	nop
 800fcae:	e7fd      	b.n	800fcac <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fcb6:	f023 0301 	bic.w	r3, r3, #1
 800fcba:	b2da      	uxtb	r2, r3
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	6a1b      	ldr	r3, [r3, #32]
 800fcc6:	6978      	ldr	r0, [r7, #20]
 800fcc8:	4798      	blx	r3
}
 800fcca:	bf00      	nop
 800fccc:	3718      	adds	r7, #24
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
 800fcd2:	bf00      	nop
 800fcd4:	2000b348 	.word	0x2000b348

0800fcd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fce0:	f107 0308 	add.w	r3, r7, #8
 800fce4:	4618      	mov	r0, r3
 800fce6:	f000 f859 	bl	800fd9c <prvGetNextExpireTime>
 800fcea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	4619      	mov	r1, r3
 800fcf0:	68f8      	ldr	r0, [r7, #12]
 800fcf2:	f000 f805 	bl	800fd00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fcf6:	f000 f8d7 	bl	800fea8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fcfa:	bf00      	nop
 800fcfc:	e7f0      	b.n	800fce0 <prvTimerTask+0x8>
	...

0800fd00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b084      	sub	sp, #16
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fd0a:	f7fe ffaf 	bl	800ec6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd0e:	f107 0308 	add.w	r3, r7, #8
 800fd12:	4618      	mov	r0, r3
 800fd14:	f000 f866 	bl	800fde4 <prvSampleTimeNow>
 800fd18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d130      	bne.n	800fd82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d10a      	bne.n	800fd3c <prvProcessTimerOrBlockTask+0x3c>
 800fd26:	687a      	ldr	r2, [r7, #4]
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	d806      	bhi.n	800fd3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fd2e:	f7fe ffab 	bl	800ec88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fd32:	68f9      	ldr	r1, [r7, #12]
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f7ff ff7f 	bl	800fc38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fd3a:	e024      	b.n	800fd86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d008      	beq.n	800fd54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fd42:	4b13      	ldr	r3, [pc, #76]	@ (800fd90 <prvProcessTimerOrBlockTask+0x90>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d101      	bne.n	800fd50 <prvProcessTimerOrBlockTask+0x50>
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	e000      	b.n	800fd52 <prvProcessTimerOrBlockTask+0x52>
 800fd50:	2300      	movs	r3, #0
 800fd52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fd54:	4b0f      	ldr	r3, [pc, #60]	@ (800fd94 <prvProcessTimerOrBlockTask+0x94>)
 800fd56:	6818      	ldr	r0, [r3, #0]
 800fd58:	687a      	ldr	r2, [r7, #4]
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	1ad3      	subs	r3, r2, r3
 800fd5e:	683a      	ldr	r2, [r7, #0]
 800fd60:	4619      	mov	r1, r3
 800fd62:	f7fe fcdd 	bl	800e720 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fd66:	f7fe ff8f 	bl	800ec88 <xTaskResumeAll>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d10a      	bne.n	800fd86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fd70:	4b09      	ldr	r3, [pc, #36]	@ (800fd98 <prvProcessTimerOrBlockTask+0x98>)
 800fd72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd76:	601a      	str	r2, [r3, #0]
 800fd78:	f3bf 8f4f 	dsb	sy
 800fd7c:	f3bf 8f6f 	isb	sy
}
 800fd80:	e001      	b.n	800fd86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fd82:	f7fe ff81 	bl	800ec88 <xTaskResumeAll>
}
 800fd86:	bf00      	nop
 800fd88:	3710      	adds	r7, #16
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	2000b34c 	.word	0x2000b34c
 800fd94:	2000b350 	.word	0x2000b350
 800fd98:	e000ed04 	.word	0xe000ed04

0800fd9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b085      	sub	sp, #20
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fda4:	4b0e      	ldr	r3, [pc, #56]	@ (800fde0 <prvGetNextExpireTime+0x44>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d101      	bne.n	800fdb2 <prvGetNextExpireTime+0x16>
 800fdae:	2201      	movs	r2, #1
 800fdb0:	e000      	b.n	800fdb4 <prvGetNextExpireTime+0x18>
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d105      	bne.n	800fdcc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fdc0:	4b07      	ldr	r3, [pc, #28]	@ (800fde0 <prvGetNextExpireTime+0x44>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	68db      	ldr	r3, [r3, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	60fb      	str	r3, [r7, #12]
 800fdca:	e001      	b.n	800fdd0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3714      	adds	r7, #20
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fddc:	4770      	bx	lr
 800fdde:	bf00      	nop
 800fde0:	2000b348 	.word	0x2000b348

0800fde4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fdec:	f7fe ffec 	bl	800edc8 <xTaskGetTickCount>
 800fdf0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fdf2:	4b0b      	ldr	r3, [pc, #44]	@ (800fe20 <prvSampleTimeNow+0x3c>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	68fa      	ldr	r2, [r7, #12]
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d205      	bcs.n	800fe08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fdfc:	f000 f940 	bl	8010080 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2201      	movs	r2, #1
 800fe04:	601a      	str	r2, [r3, #0]
 800fe06:	e002      	b.n	800fe0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fe0e:	4a04      	ldr	r2, [pc, #16]	@ (800fe20 <prvSampleTimeNow+0x3c>)
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fe14:	68fb      	ldr	r3, [r7, #12]
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	2000b358 	.word	0x2000b358

0800fe24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b086      	sub	sp, #24
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	60f8      	str	r0, [r7, #12]
 800fe2c:	60b9      	str	r1, [r7, #8]
 800fe2e:	607a      	str	r2, [r7, #4]
 800fe30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fe32:	2300      	movs	r3, #0
 800fe34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	68ba      	ldr	r2, [r7, #8]
 800fe3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	68fa      	ldr	r2, [r7, #12]
 800fe40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fe42:	68ba      	ldr	r2, [r7, #8]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d812      	bhi.n	800fe70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe4a:	687a      	ldr	r2, [r7, #4]
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	1ad2      	subs	r2, r2, r3
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	699b      	ldr	r3, [r3, #24]
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d302      	bcc.n	800fe5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fe58:	2301      	movs	r3, #1
 800fe5a:	617b      	str	r3, [r7, #20]
 800fe5c:	e01b      	b.n	800fe96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fe5e:	4b10      	ldr	r3, [pc, #64]	@ (800fea0 <prvInsertTimerInActiveList+0x7c>)
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	3304      	adds	r3, #4
 800fe66:	4619      	mov	r1, r3
 800fe68:	4610      	mov	r0, r2
 800fe6a:	f7fd fafa 	bl	800d462 <vListInsert>
 800fe6e:	e012      	b.n	800fe96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d206      	bcs.n	800fe86 <prvInsertTimerInActiveList+0x62>
 800fe78:	68ba      	ldr	r2, [r7, #8]
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d302      	bcc.n	800fe86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fe80:	2301      	movs	r3, #1
 800fe82:	617b      	str	r3, [r7, #20]
 800fe84:	e007      	b.n	800fe96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fe86:	4b07      	ldr	r3, [pc, #28]	@ (800fea4 <prvInsertTimerInActiveList+0x80>)
 800fe88:	681a      	ldr	r2, [r3, #0]
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	3304      	adds	r3, #4
 800fe8e:	4619      	mov	r1, r3
 800fe90:	4610      	mov	r0, r2
 800fe92:	f7fd fae6 	bl	800d462 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fe96:	697b      	ldr	r3, [r7, #20]
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	3718      	adds	r7, #24
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}
 800fea0:	2000b34c 	.word	0x2000b34c
 800fea4:	2000b348 	.word	0x2000b348

0800fea8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b08e      	sub	sp, #56	@ 0x38
 800feac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800feae:	e0d4      	b.n	801005a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	da1b      	bge.n	800feee <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800feb6:	1d3b      	adds	r3, r7, #4
 800feb8:	3304      	adds	r3, #4
 800feba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800febc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d10d      	bne.n	800fede <prvProcessReceivedCommands+0x36>
	__asm volatile
 800fec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fec6:	b672      	cpsid	i
 800fec8:	f383 8811 	msr	BASEPRI, r3
 800fecc:	f3bf 8f6f 	isb	sy
 800fed0:	f3bf 8f4f 	dsb	sy
 800fed4:	b662      	cpsie	i
 800fed6:	61fb      	str	r3, [r7, #28]
}
 800fed8:	bf00      	nop
 800feda:	bf00      	nop
 800fedc:	e7fd      	b.n	800feda <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fee4:	6850      	ldr	r0, [r2, #4]
 800fee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fee8:	6892      	ldr	r2, [r2, #8]
 800feea:	4611      	mov	r1, r2
 800feec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	f2c0 80b2 	blt.w	801005a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fefa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fefc:	695b      	ldr	r3, [r3, #20]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d004      	beq.n	800ff0c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff04:	3304      	adds	r3, #4
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7fd fae4 	bl	800d4d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ff0c:	463b      	mov	r3, r7
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7ff ff68 	bl	800fde4 <prvSampleTimeNow>
 800ff14:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2b09      	cmp	r3, #9
 800ff1a:	f200 809b 	bhi.w	8010054 <prvProcessReceivedCommands+0x1ac>
 800ff1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ff24 <prvProcessReceivedCommands+0x7c>)
 800ff20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff24:	0800ff4d 	.word	0x0800ff4d
 800ff28:	0800ff4d 	.word	0x0800ff4d
 800ff2c:	0800ff4d 	.word	0x0800ff4d
 800ff30:	0800ffc7 	.word	0x0800ffc7
 800ff34:	0800ffdb 	.word	0x0800ffdb
 800ff38:	0801002b 	.word	0x0801002b
 800ff3c:	0800ff4d 	.word	0x0800ff4d
 800ff40:	0800ff4d 	.word	0x0800ff4d
 800ff44:	0800ffc7 	.word	0x0800ffc7
 800ff48:	0800ffdb 	.word	0x0800ffdb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ff4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ff52:	f043 0301 	orr.w	r3, r3, #1
 800ff56:	b2da      	uxtb	r2, r3
 800ff58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ff5e:	68ba      	ldr	r2, [r7, #8]
 800ff60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff62:	699b      	ldr	r3, [r3, #24]
 800ff64:	18d1      	adds	r1, r2, r3
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff6c:	f7ff ff5a 	bl	800fe24 <prvInsertTimerInActiveList>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d070      	beq.n	8010058 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff78:	6a1b      	ldr	r3, [r3, #32]
 800ff7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ff84:	f003 0304 	and.w	r3, r3, #4
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d065      	beq.n	8010058 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ff8c:	68ba      	ldr	r2, [r7, #8]
 800ff8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff90:	699b      	ldr	r3, [r3, #24]
 800ff92:	441a      	add	r2, r3
 800ff94:	2300      	movs	r3, #0
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	2300      	movs	r3, #0
 800ff9a:	2100      	movs	r1, #0
 800ff9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff9e:	f7ff fdfb 	bl	800fb98 <xTimerGenericCommand>
 800ffa2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ffa4:	6a3b      	ldr	r3, [r7, #32]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d156      	bne.n	8010058 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800ffaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffae:	b672      	cpsid	i
 800ffb0:	f383 8811 	msr	BASEPRI, r3
 800ffb4:	f3bf 8f6f 	isb	sy
 800ffb8:	f3bf 8f4f 	dsb	sy
 800ffbc:	b662      	cpsie	i
 800ffbe:	61bb      	str	r3, [r7, #24]
}
 800ffc0:	bf00      	nop
 800ffc2:	bf00      	nop
 800ffc4:	e7fd      	b.n	800ffc2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ffc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ffcc:	f023 0301 	bic.w	r3, r3, #1
 800ffd0:	b2da      	uxtb	r2, r3
 800ffd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ffd8:	e03f      	b.n	801005a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ffda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ffe0:	f043 0301 	orr.w	r3, r3, #1
 800ffe4:	b2da      	uxtb	r2, r3
 800ffe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffe8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ffec:	68ba      	ldr	r2, [r7, #8]
 800ffee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fff0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fff4:	699b      	ldr	r3, [r3, #24]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d10d      	bne.n	8010016 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800fffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fffe:	b672      	cpsid	i
 8010000:	f383 8811 	msr	BASEPRI, r3
 8010004:	f3bf 8f6f 	isb	sy
 8010008:	f3bf 8f4f 	dsb	sy
 801000c:	b662      	cpsie	i
 801000e:	617b      	str	r3, [r7, #20]
}
 8010010:	bf00      	nop
 8010012:	bf00      	nop
 8010014:	e7fd      	b.n	8010012 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010018:	699a      	ldr	r2, [r3, #24]
 801001a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801001c:	18d1      	adds	r1, r2, r3
 801001e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010024:	f7ff fefe 	bl	800fe24 <prvInsertTimerInActiveList>
					break;
 8010028:	e017      	b.n	801005a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801002a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801002c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010030:	f003 0302 	and.w	r3, r3, #2
 8010034:	2b00      	cmp	r3, #0
 8010036:	d103      	bne.n	8010040 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8010038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801003a:	f000 fbd3 	bl	80107e4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801003e:	e00c      	b.n	801005a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010042:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010046:	f023 0301 	bic.w	r3, r3, #1
 801004a:	b2da      	uxtb	r2, r3
 801004c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801004e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010052:	e002      	b.n	801005a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8010054:	bf00      	nop
 8010056:	e000      	b.n	801005a <prvProcessReceivedCommands+0x1b2>
					break;
 8010058:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801005a:	4b08      	ldr	r3, [pc, #32]	@ (801007c <prvProcessReceivedCommands+0x1d4>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	1d39      	adds	r1, r7, #4
 8010060:	2200      	movs	r2, #0
 8010062:	4618      	mov	r0, r3
 8010064:	f7fd ff32 	bl	800decc <xQueueReceive>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	f47f af20 	bne.w	800feb0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010070:	bf00      	nop
 8010072:	bf00      	nop
 8010074:	3730      	adds	r7, #48	@ 0x30
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	2000b350 	.word	0x2000b350

08010080 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b088      	sub	sp, #32
 8010084:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010086:	e04b      	b.n	8010120 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010088:	4b2f      	ldr	r3, [pc, #188]	@ (8010148 <prvSwitchTimerLists+0xc8>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010092:	4b2d      	ldr	r3, [pc, #180]	@ (8010148 <prvSwitchTimerLists+0xc8>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	68db      	ldr	r3, [r3, #12]
 8010098:	68db      	ldr	r3, [r3, #12]
 801009a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	3304      	adds	r3, #4
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7fd fa17 	bl	800d4d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	6a1b      	ldr	r3, [r3, #32]
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80100b4:	f003 0304 	and.w	r3, r3, #4
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d031      	beq.n	8010120 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	699b      	ldr	r3, [r3, #24]
 80100c0:	693a      	ldr	r2, [r7, #16]
 80100c2:	4413      	add	r3, r2
 80100c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80100c6:	68ba      	ldr	r2, [r7, #8]
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d90e      	bls.n	80100ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	68ba      	ldr	r2, [r7, #8]
 80100d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	68fa      	ldr	r2, [r7, #12]
 80100d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80100da:	4b1b      	ldr	r3, [pc, #108]	@ (8010148 <prvSwitchTimerLists+0xc8>)
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	3304      	adds	r3, #4
 80100e2:	4619      	mov	r1, r3
 80100e4:	4610      	mov	r0, r2
 80100e6:	f7fd f9bc 	bl	800d462 <vListInsert>
 80100ea:	e019      	b.n	8010120 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80100ec:	2300      	movs	r3, #0
 80100ee:	9300      	str	r3, [sp, #0]
 80100f0:	2300      	movs	r3, #0
 80100f2:	693a      	ldr	r2, [r7, #16]
 80100f4:	2100      	movs	r1, #0
 80100f6:	68f8      	ldr	r0, [r7, #12]
 80100f8:	f7ff fd4e 	bl	800fb98 <xTimerGenericCommand>
 80100fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d10d      	bne.n	8010120 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8010104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010108:	b672      	cpsid	i
 801010a:	f383 8811 	msr	BASEPRI, r3
 801010e:	f3bf 8f6f 	isb	sy
 8010112:	f3bf 8f4f 	dsb	sy
 8010116:	b662      	cpsie	i
 8010118:	603b      	str	r3, [r7, #0]
}
 801011a:	bf00      	nop
 801011c:	bf00      	nop
 801011e:	e7fd      	b.n	801011c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010120:	4b09      	ldr	r3, [pc, #36]	@ (8010148 <prvSwitchTimerLists+0xc8>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d1ae      	bne.n	8010088 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801012a:	4b07      	ldr	r3, [pc, #28]	@ (8010148 <prvSwitchTimerLists+0xc8>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010130:	4b06      	ldr	r3, [pc, #24]	@ (801014c <prvSwitchTimerLists+0xcc>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	4a04      	ldr	r2, [pc, #16]	@ (8010148 <prvSwitchTimerLists+0xc8>)
 8010136:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010138:	4a04      	ldr	r2, [pc, #16]	@ (801014c <prvSwitchTimerLists+0xcc>)
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	6013      	str	r3, [r2, #0]
}
 801013e:	bf00      	nop
 8010140:	3718      	adds	r7, #24
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
 8010146:	bf00      	nop
 8010148:	2000b348 	.word	0x2000b348
 801014c:	2000b34c 	.word	0x2000b34c

08010150 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b082      	sub	sp, #8
 8010154:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010156:	f000 f949 	bl	80103ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801015a:	4b15      	ldr	r3, [pc, #84]	@ (80101b0 <prvCheckForValidListAndQueue+0x60>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d120      	bne.n	80101a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010162:	4814      	ldr	r0, [pc, #80]	@ (80101b4 <prvCheckForValidListAndQueue+0x64>)
 8010164:	f7fd f92c 	bl	800d3c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010168:	4813      	ldr	r0, [pc, #76]	@ (80101b8 <prvCheckForValidListAndQueue+0x68>)
 801016a:	f7fd f929 	bl	800d3c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801016e:	4b13      	ldr	r3, [pc, #76]	@ (80101bc <prvCheckForValidListAndQueue+0x6c>)
 8010170:	4a10      	ldr	r2, [pc, #64]	@ (80101b4 <prvCheckForValidListAndQueue+0x64>)
 8010172:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010174:	4b12      	ldr	r3, [pc, #72]	@ (80101c0 <prvCheckForValidListAndQueue+0x70>)
 8010176:	4a10      	ldr	r2, [pc, #64]	@ (80101b8 <prvCheckForValidListAndQueue+0x68>)
 8010178:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801017a:	2300      	movs	r3, #0
 801017c:	9300      	str	r3, [sp, #0]
 801017e:	4b11      	ldr	r3, [pc, #68]	@ (80101c4 <prvCheckForValidListAndQueue+0x74>)
 8010180:	4a11      	ldr	r2, [pc, #68]	@ (80101c8 <prvCheckForValidListAndQueue+0x78>)
 8010182:	2110      	movs	r1, #16
 8010184:	200a      	movs	r0, #10
 8010186:	f7fd fa3b 	bl	800d600 <xQueueGenericCreateStatic>
 801018a:	4603      	mov	r3, r0
 801018c:	4a08      	ldr	r2, [pc, #32]	@ (80101b0 <prvCheckForValidListAndQueue+0x60>)
 801018e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010190:	4b07      	ldr	r3, [pc, #28]	@ (80101b0 <prvCheckForValidListAndQueue+0x60>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d005      	beq.n	80101a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010198:	4b05      	ldr	r3, [pc, #20]	@ (80101b0 <prvCheckForValidListAndQueue+0x60>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	490b      	ldr	r1, [pc, #44]	@ (80101cc <prvCheckForValidListAndQueue+0x7c>)
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fe fa6a 	bl	800e678 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80101a4:	f000 f958 	bl	8010458 <vPortExitCritical>
}
 80101a8:	bf00      	nop
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	2000b350 	.word	0x2000b350
 80101b4:	2000b320 	.word	0x2000b320
 80101b8:	2000b334 	.word	0x2000b334
 80101bc:	2000b348 	.word	0x2000b348
 80101c0:	2000b34c 	.word	0x2000b34c
 80101c4:	2000b3fc 	.word	0x2000b3fc
 80101c8:	2000b35c 	.word	0x2000b35c
 80101cc:	0801d4ec 	.word	0x0801d4ec

080101d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80101d0:	b480      	push	{r7}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	60f8      	str	r0, [r7, #12]
 80101d8:	60b9      	str	r1, [r7, #8]
 80101da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	3b04      	subs	r3, #4
 80101e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80101e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	3b04      	subs	r3, #4
 80101ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	f023 0201 	bic.w	r2, r3, #1
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	3b04      	subs	r3, #4
 80101fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010200:	4a0c      	ldr	r2, [pc, #48]	@ (8010234 <pxPortInitialiseStack+0x64>)
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	3b14      	subs	r3, #20
 801020a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801020c:	687a      	ldr	r2, [r7, #4]
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	3b04      	subs	r3, #4
 8010216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	f06f 0202 	mvn.w	r2, #2
 801021e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	3b20      	subs	r3, #32
 8010224:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010226:	68fb      	ldr	r3, [r7, #12]
}
 8010228:	4618      	mov	r0, r3
 801022a:	3714      	adds	r7, #20
 801022c:	46bd      	mov	sp, r7
 801022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010232:	4770      	bx	lr
 8010234:	08010239 	.word	0x08010239

08010238 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010238:	b480      	push	{r7}
 801023a:	b085      	sub	sp, #20
 801023c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801023e:	2300      	movs	r3, #0
 8010240:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010242:	4b15      	ldr	r3, [pc, #84]	@ (8010298 <prvTaskExitError+0x60>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801024a:	d00d      	beq.n	8010268 <prvTaskExitError+0x30>
	__asm volatile
 801024c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010250:	b672      	cpsid	i
 8010252:	f383 8811 	msr	BASEPRI, r3
 8010256:	f3bf 8f6f 	isb	sy
 801025a:	f3bf 8f4f 	dsb	sy
 801025e:	b662      	cpsie	i
 8010260:	60fb      	str	r3, [r7, #12]
}
 8010262:	bf00      	nop
 8010264:	bf00      	nop
 8010266:	e7fd      	b.n	8010264 <prvTaskExitError+0x2c>
	__asm volatile
 8010268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801026c:	b672      	cpsid	i
 801026e:	f383 8811 	msr	BASEPRI, r3
 8010272:	f3bf 8f6f 	isb	sy
 8010276:	f3bf 8f4f 	dsb	sy
 801027a:	b662      	cpsie	i
 801027c:	60bb      	str	r3, [r7, #8]
}
 801027e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010280:	bf00      	nop
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d0fc      	beq.n	8010282 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010288:	bf00      	nop
 801028a:	bf00      	nop
 801028c:	3714      	adds	r7, #20
 801028e:	46bd      	mov	sp, r7
 8010290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010294:	4770      	bx	lr
 8010296:	bf00      	nop
 8010298:	20000020 	.word	0x20000020
 801029c:	00000000 	.word	0x00000000

080102a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80102a0:	4b07      	ldr	r3, [pc, #28]	@ (80102c0 <pxCurrentTCBConst2>)
 80102a2:	6819      	ldr	r1, [r3, #0]
 80102a4:	6808      	ldr	r0, [r1, #0]
 80102a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102aa:	f380 8809 	msr	PSP, r0
 80102ae:	f3bf 8f6f 	isb	sy
 80102b2:	f04f 0000 	mov.w	r0, #0
 80102b6:	f380 8811 	msr	BASEPRI, r0
 80102ba:	4770      	bx	lr
 80102bc:	f3af 8000 	nop.w

080102c0 <pxCurrentTCBConst2>:
 80102c0:	2000ae20 	.word	0x2000ae20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80102c4:	bf00      	nop
 80102c6:	bf00      	nop

080102c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80102c8:	4808      	ldr	r0, [pc, #32]	@ (80102ec <prvPortStartFirstTask+0x24>)
 80102ca:	6800      	ldr	r0, [r0, #0]
 80102cc:	6800      	ldr	r0, [r0, #0]
 80102ce:	f380 8808 	msr	MSP, r0
 80102d2:	f04f 0000 	mov.w	r0, #0
 80102d6:	f380 8814 	msr	CONTROL, r0
 80102da:	b662      	cpsie	i
 80102dc:	b661      	cpsie	f
 80102de:	f3bf 8f4f 	dsb	sy
 80102e2:	f3bf 8f6f 	isb	sy
 80102e6:	df00      	svc	0
 80102e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80102ea:	bf00      	nop
 80102ec:	e000ed08 	.word	0xe000ed08

080102f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80102f6:	4b37      	ldr	r3, [pc, #220]	@ (80103d4 <xPortStartScheduler+0xe4>)
 80102f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	b2db      	uxtb	r3, r3
 8010300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	22ff      	movs	r2, #255	@ 0xff
 8010306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	b2db      	uxtb	r3, r3
 801030e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010310:	78fb      	ldrb	r3, [r7, #3]
 8010312:	b2db      	uxtb	r3, r3
 8010314:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010318:	b2da      	uxtb	r2, r3
 801031a:	4b2f      	ldr	r3, [pc, #188]	@ (80103d8 <xPortStartScheduler+0xe8>)
 801031c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801031e:	4b2f      	ldr	r3, [pc, #188]	@ (80103dc <xPortStartScheduler+0xec>)
 8010320:	2207      	movs	r2, #7
 8010322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010324:	e009      	b.n	801033a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010326:	4b2d      	ldr	r3, [pc, #180]	@ (80103dc <xPortStartScheduler+0xec>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	3b01      	subs	r3, #1
 801032c:	4a2b      	ldr	r2, [pc, #172]	@ (80103dc <xPortStartScheduler+0xec>)
 801032e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010330:	78fb      	ldrb	r3, [r7, #3]
 8010332:	b2db      	uxtb	r3, r3
 8010334:	005b      	lsls	r3, r3, #1
 8010336:	b2db      	uxtb	r3, r3
 8010338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801033a:	78fb      	ldrb	r3, [r7, #3]
 801033c:	b2db      	uxtb	r3, r3
 801033e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010342:	2b80      	cmp	r3, #128	@ 0x80
 8010344:	d0ef      	beq.n	8010326 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010346:	4b25      	ldr	r3, [pc, #148]	@ (80103dc <xPortStartScheduler+0xec>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f1c3 0307 	rsb	r3, r3, #7
 801034e:	2b04      	cmp	r3, #4
 8010350:	d00d      	beq.n	801036e <xPortStartScheduler+0x7e>
	__asm volatile
 8010352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010356:	b672      	cpsid	i
 8010358:	f383 8811 	msr	BASEPRI, r3
 801035c:	f3bf 8f6f 	isb	sy
 8010360:	f3bf 8f4f 	dsb	sy
 8010364:	b662      	cpsie	i
 8010366:	60bb      	str	r3, [r7, #8]
}
 8010368:	bf00      	nop
 801036a:	bf00      	nop
 801036c:	e7fd      	b.n	801036a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801036e:	4b1b      	ldr	r3, [pc, #108]	@ (80103dc <xPortStartScheduler+0xec>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	021b      	lsls	r3, r3, #8
 8010374:	4a19      	ldr	r2, [pc, #100]	@ (80103dc <xPortStartScheduler+0xec>)
 8010376:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010378:	4b18      	ldr	r3, [pc, #96]	@ (80103dc <xPortStartScheduler+0xec>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010380:	4a16      	ldr	r2, [pc, #88]	@ (80103dc <xPortStartScheduler+0xec>)
 8010382:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	b2da      	uxtb	r2, r3
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801038c:	4b14      	ldr	r3, [pc, #80]	@ (80103e0 <xPortStartScheduler+0xf0>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	4a13      	ldr	r2, [pc, #76]	@ (80103e0 <xPortStartScheduler+0xf0>)
 8010392:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010396:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010398:	4b11      	ldr	r3, [pc, #68]	@ (80103e0 <xPortStartScheduler+0xf0>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	4a10      	ldr	r2, [pc, #64]	@ (80103e0 <xPortStartScheduler+0xf0>)
 801039e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80103a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80103a4:	f000 f8dc 	bl	8010560 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80103a8:	4b0e      	ldr	r3, [pc, #56]	@ (80103e4 <xPortStartScheduler+0xf4>)
 80103aa:	2200      	movs	r2, #0
 80103ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80103ae:	f000 f8fb 	bl	80105a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80103b2:	4b0d      	ldr	r3, [pc, #52]	@ (80103e8 <xPortStartScheduler+0xf8>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	4a0c      	ldr	r2, [pc, #48]	@ (80103e8 <xPortStartScheduler+0xf8>)
 80103b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80103bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80103be:	f7ff ff83 	bl	80102c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80103c2:	f7fe fddf 	bl	800ef84 <vTaskSwitchContext>
	prvTaskExitError();
 80103c6:	f7ff ff37 	bl	8010238 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80103ca:	2300      	movs	r3, #0
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3710      	adds	r7, #16
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	e000e400 	.word	0xe000e400
 80103d8:	2000b44c 	.word	0x2000b44c
 80103dc:	2000b450 	.word	0x2000b450
 80103e0:	e000ed20 	.word	0xe000ed20
 80103e4:	20000020 	.word	0x20000020
 80103e8:	e000ef34 	.word	0xe000ef34

080103ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80103ec:	b480      	push	{r7}
 80103ee:	b083      	sub	sp, #12
 80103f0:	af00      	add	r7, sp, #0
	__asm volatile
 80103f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103f6:	b672      	cpsid	i
 80103f8:	f383 8811 	msr	BASEPRI, r3
 80103fc:	f3bf 8f6f 	isb	sy
 8010400:	f3bf 8f4f 	dsb	sy
 8010404:	b662      	cpsie	i
 8010406:	607b      	str	r3, [r7, #4]
}
 8010408:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801040a:	4b11      	ldr	r3, [pc, #68]	@ (8010450 <vPortEnterCritical+0x64>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	3301      	adds	r3, #1
 8010410:	4a0f      	ldr	r2, [pc, #60]	@ (8010450 <vPortEnterCritical+0x64>)
 8010412:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010414:	4b0e      	ldr	r3, [pc, #56]	@ (8010450 <vPortEnterCritical+0x64>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	2b01      	cmp	r3, #1
 801041a:	d112      	bne.n	8010442 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801041c:	4b0d      	ldr	r3, [pc, #52]	@ (8010454 <vPortEnterCritical+0x68>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	b2db      	uxtb	r3, r3
 8010422:	2b00      	cmp	r3, #0
 8010424:	d00d      	beq.n	8010442 <vPortEnterCritical+0x56>
	__asm volatile
 8010426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801042a:	b672      	cpsid	i
 801042c:	f383 8811 	msr	BASEPRI, r3
 8010430:	f3bf 8f6f 	isb	sy
 8010434:	f3bf 8f4f 	dsb	sy
 8010438:	b662      	cpsie	i
 801043a:	603b      	str	r3, [r7, #0]
}
 801043c:	bf00      	nop
 801043e:	bf00      	nop
 8010440:	e7fd      	b.n	801043e <vPortEnterCritical+0x52>
	}
}
 8010442:	bf00      	nop
 8010444:	370c      	adds	r7, #12
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr
 801044e:	bf00      	nop
 8010450:	20000020 	.word	0x20000020
 8010454:	e000ed04 	.word	0xe000ed04

08010458 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010458:	b480      	push	{r7}
 801045a:	b083      	sub	sp, #12
 801045c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801045e:	4b13      	ldr	r3, [pc, #76]	@ (80104ac <vPortExitCritical+0x54>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d10d      	bne.n	8010482 <vPortExitCritical+0x2a>
	__asm volatile
 8010466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801046a:	b672      	cpsid	i
 801046c:	f383 8811 	msr	BASEPRI, r3
 8010470:	f3bf 8f6f 	isb	sy
 8010474:	f3bf 8f4f 	dsb	sy
 8010478:	b662      	cpsie	i
 801047a:	607b      	str	r3, [r7, #4]
}
 801047c:	bf00      	nop
 801047e:	bf00      	nop
 8010480:	e7fd      	b.n	801047e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010482:	4b0a      	ldr	r3, [pc, #40]	@ (80104ac <vPortExitCritical+0x54>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	3b01      	subs	r3, #1
 8010488:	4a08      	ldr	r2, [pc, #32]	@ (80104ac <vPortExitCritical+0x54>)
 801048a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801048c:	4b07      	ldr	r3, [pc, #28]	@ (80104ac <vPortExitCritical+0x54>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d105      	bne.n	80104a0 <vPortExitCritical+0x48>
 8010494:	2300      	movs	r3, #0
 8010496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	f383 8811 	msr	BASEPRI, r3
}
 801049e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80104a0:	bf00      	nop
 80104a2:	370c      	adds	r7, #12
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr
 80104ac:	20000020 	.word	0x20000020

080104b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80104b0:	f3ef 8009 	mrs	r0, PSP
 80104b4:	f3bf 8f6f 	isb	sy
 80104b8:	4b15      	ldr	r3, [pc, #84]	@ (8010510 <pxCurrentTCBConst>)
 80104ba:	681a      	ldr	r2, [r3, #0]
 80104bc:	f01e 0f10 	tst.w	lr, #16
 80104c0:	bf08      	it	eq
 80104c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80104c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ca:	6010      	str	r0, [r2, #0]
 80104cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80104d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80104d4:	b672      	cpsid	i
 80104d6:	f380 8811 	msr	BASEPRI, r0
 80104da:	f3bf 8f4f 	dsb	sy
 80104de:	f3bf 8f6f 	isb	sy
 80104e2:	b662      	cpsie	i
 80104e4:	f7fe fd4e 	bl	800ef84 <vTaskSwitchContext>
 80104e8:	f04f 0000 	mov.w	r0, #0
 80104ec:	f380 8811 	msr	BASEPRI, r0
 80104f0:	bc09      	pop	{r0, r3}
 80104f2:	6819      	ldr	r1, [r3, #0]
 80104f4:	6808      	ldr	r0, [r1, #0]
 80104f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104fa:	f01e 0f10 	tst.w	lr, #16
 80104fe:	bf08      	it	eq
 8010500:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010504:	f380 8809 	msr	PSP, r0
 8010508:	f3bf 8f6f 	isb	sy
 801050c:	4770      	bx	lr
 801050e:	bf00      	nop

08010510 <pxCurrentTCBConst>:
 8010510:	2000ae20 	.word	0x2000ae20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010514:	bf00      	nop
 8010516:	bf00      	nop

08010518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
	__asm volatile
 801051e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010522:	b672      	cpsid	i
 8010524:	f383 8811 	msr	BASEPRI, r3
 8010528:	f3bf 8f6f 	isb	sy
 801052c:	f3bf 8f4f 	dsb	sy
 8010530:	b662      	cpsie	i
 8010532:	607b      	str	r3, [r7, #4]
}
 8010534:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010536:	f7fe fc69 	bl	800ee0c <xTaskIncrementTick>
 801053a:	4603      	mov	r3, r0
 801053c:	2b00      	cmp	r3, #0
 801053e:	d003      	beq.n	8010548 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010540:	4b06      	ldr	r3, [pc, #24]	@ (801055c <SysTick_Handler+0x44>)
 8010542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010546:	601a      	str	r2, [r3, #0]
 8010548:	2300      	movs	r3, #0
 801054a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	f383 8811 	msr	BASEPRI, r3
}
 8010552:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010554:	bf00      	nop
 8010556:	3708      	adds	r7, #8
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}
 801055c:	e000ed04 	.word	0xe000ed04

08010560 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010560:	b480      	push	{r7}
 8010562:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010564:	4b0b      	ldr	r3, [pc, #44]	@ (8010594 <vPortSetupTimerInterrupt+0x34>)
 8010566:	2200      	movs	r2, #0
 8010568:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801056a:	4b0b      	ldr	r3, [pc, #44]	@ (8010598 <vPortSetupTimerInterrupt+0x38>)
 801056c:	2200      	movs	r2, #0
 801056e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010570:	4b0a      	ldr	r3, [pc, #40]	@ (801059c <vPortSetupTimerInterrupt+0x3c>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	4a0a      	ldr	r2, [pc, #40]	@ (80105a0 <vPortSetupTimerInterrupt+0x40>)
 8010576:	fba2 2303 	umull	r2, r3, r2, r3
 801057a:	099b      	lsrs	r3, r3, #6
 801057c:	4a09      	ldr	r2, [pc, #36]	@ (80105a4 <vPortSetupTimerInterrupt+0x44>)
 801057e:	3b01      	subs	r3, #1
 8010580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010582:	4b04      	ldr	r3, [pc, #16]	@ (8010594 <vPortSetupTimerInterrupt+0x34>)
 8010584:	2207      	movs	r2, #7
 8010586:	601a      	str	r2, [r3, #0]
}
 8010588:	bf00      	nop
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr
 8010592:	bf00      	nop
 8010594:	e000e010 	.word	0xe000e010
 8010598:	e000e018 	.word	0xe000e018
 801059c:	20000000 	.word	0x20000000
 80105a0:	10624dd3 	.word	0x10624dd3
 80105a4:	e000e014 	.word	0xe000e014

080105a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80105a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80105b8 <vPortEnableVFP+0x10>
 80105ac:	6801      	ldr	r1, [r0, #0]
 80105ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80105b2:	6001      	str	r1, [r0, #0]
 80105b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80105b6:	bf00      	nop
 80105b8:	e000ed88 	.word	0xe000ed88

080105bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80105bc:	b480      	push	{r7}
 80105be:	b085      	sub	sp, #20
 80105c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80105c2:	f3ef 8305 	mrs	r3, IPSR
 80105c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	2b0f      	cmp	r3, #15
 80105cc:	d917      	bls.n	80105fe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80105ce:	4a1a      	ldr	r2, [pc, #104]	@ (8010638 <vPortValidateInterruptPriority+0x7c>)
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	4413      	add	r3, r2
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80105d8:	4b18      	ldr	r3, [pc, #96]	@ (801063c <vPortValidateInterruptPriority+0x80>)
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	7afa      	ldrb	r2, [r7, #11]
 80105de:	429a      	cmp	r2, r3
 80105e0:	d20d      	bcs.n	80105fe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80105e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105e6:	b672      	cpsid	i
 80105e8:	f383 8811 	msr	BASEPRI, r3
 80105ec:	f3bf 8f6f 	isb	sy
 80105f0:	f3bf 8f4f 	dsb	sy
 80105f4:	b662      	cpsie	i
 80105f6:	607b      	str	r3, [r7, #4]
}
 80105f8:	bf00      	nop
 80105fa:	bf00      	nop
 80105fc:	e7fd      	b.n	80105fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80105fe:	4b10      	ldr	r3, [pc, #64]	@ (8010640 <vPortValidateInterruptPriority+0x84>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010606:	4b0f      	ldr	r3, [pc, #60]	@ (8010644 <vPortValidateInterruptPriority+0x88>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	429a      	cmp	r2, r3
 801060c:	d90d      	bls.n	801062a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801060e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010612:	b672      	cpsid	i
 8010614:	f383 8811 	msr	BASEPRI, r3
 8010618:	f3bf 8f6f 	isb	sy
 801061c:	f3bf 8f4f 	dsb	sy
 8010620:	b662      	cpsie	i
 8010622:	603b      	str	r3, [r7, #0]
}
 8010624:	bf00      	nop
 8010626:	bf00      	nop
 8010628:	e7fd      	b.n	8010626 <vPortValidateInterruptPriority+0x6a>
	}
 801062a:	bf00      	nop
 801062c:	3714      	adds	r7, #20
 801062e:	46bd      	mov	sp, r7
 8010630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010634:	4770      	bx	lr
 8010636:	bf00      	nop
 8010638:	e000e3f0 	.word	0xe000e3f0
 801063c:	2000b44c 	.word	0x2000b44c
 8010640:	e000ed0c 	.word	0xe000ed0c
 8010644:	2000b450 	.word	0x2000b450

08010648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b08a      	sub	sp, #40	@ 0x28
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010650:	2300      	movs	r3, #0
 8010652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010654:	f7fe fb0a 	bl	800ec6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010658:	4b5d      	ldr	r3, [pc, #372]	@ (80107d0 <pvPortMalloc+0x188>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d101      	bne.n	8010664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010660:	f000 f920 	bl	80108a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010664:	4b5b      	ldr	r3, [pc, #364]	@ (80107d4 <pvPortMalloc+0x18c>)
 8010666:	681a      	ldr	r2, [r3, #0]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	4013      	ands	r3, r2
 801066c:	2b00      	cmp	r3, #0
 801066e:	f040 8094 	bne.w	801079a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d020      	beq.n	80106ba <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8010678:	2208      	movs	r2, #8
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	4413      	add	r3, r2
 801067e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f003 0307 	and.w	r3, r3, #7
 8010686:	2b00      	cmp	r3, #0
 8010688:	d017      	beq.n	80106ba <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f023 0307 	bic.w	r3, r3, #7
 8010690:	3308      	adds	r3, #8
 8010692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f003 0307 	and.w	r3, r3, #7
 801069a:	2b00      	cmp	r3, #0
 801069c:	d00d      	beq.n	80106ba <pvPortMalloc+0x72>
	__asm volatile
 801069e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106a2:	b672      	cpsid	i
 80106a4:	f383 8811 	msr	BASEPRI, r3
 80106a8:	f3bf 8f6f 	isb	sy
 80106ac:	f3bf 8f4f 	dsb	sy
 80106b0:	b662      	cpsie	i
 80106b2:	617b      	str	r3, [r7, #20]
}
 80106b4:	bf00      	nop
 80106b6:	bf00      	nop
 80106b8:	e7fd      	b.n	80106b6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d06c      	beq.n	801079a <pvPortMalloc+0x152>
 80106c0:	4b45      	ldr	r3, [pc, #276]	@ (80107d8 <pvPortMalloc+0x190>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	687a      	ldr	r2, [r7, #4]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d867      	bhi.n	801079a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80106ca:	4b44      	ldr	r3, [pc, #272]	@ (80107dc <pvPortMalloc+0x194>)
 80106cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80106ce:	4b43      	ldr	r3, [pc, #268]	@ (80107dc <pvPortMalloc+0x194>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80106d4:	e004      	b.n	80106e0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80106d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80106da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80106e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e2:	685b      	ldr	r3, [r3, #4]
 80106e4:	687a      	ldr	r2, [r7, #4]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d903      	bls.n	80106f2 <pvPortMalloc+0xaa>
 80106ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d1f1      	bne.n	80106d6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80106f2:	4b37      	ldr	r3, [pc, #220]	@ (80107d0 <pvPortMalloc+0x188>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d04e      	beq.n	801079a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80106fc:	6a3b      	ldr	r3, [r7, #32]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	2208      	movs	r2, #8
 8010702:	4413      	add	r3, r2
 8010704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	6a3b      	ldr	r3, [r7, #32]
 801070c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801070e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010710:	685a      	ldr	r2, [r3, #4]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	1ad2      	subs	r2, r2, r3
 8010716:	2308      	movs	r3, #8
 8010718:	005b      	lsls	r3, r3, #1
 801071a:	429a      	cmp	r2, r3
 801071c:	d922      	bls.n	8010764 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801071e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	4413      	add	r3, r2
 8010724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010726:	69bb      	ldr	r3, [r7, #24]
 8010728:	f003 0307 	and.w	r3, r3, #7
 801072c:	2b00      	cmp	r3, #0
 801072e:	d00d      	beq.n	801074c <pvPortMalloc+0x104>
	__asm volatile
 8010730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010734:	b672      	cpsid	i
 8010736:	f383 8811 	msr	BASEPRI, r3
 801073a:	f3bf 8f6f 	isb	sy
 801073e:	f3bf 8f4f 	dsb	sy
 8010742:	b662      	cpsie	i
 8010744:	613b      	str	r3, [r7, #16]
}
 8010746:	bf00      	nop
 8010748:	bf00      	nop
 801074a:	e7fd      	b.n	8010748 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801074c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801074e:	685a      	ldr	r2, [r3, #4]
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	1ad2      	subs	r2, r2, r3
 8010754:	69bb      	ldr	r3, [r7, #24]
 8010756:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801075a:	687a      	ldr	r2, [r7, #4]
 801075c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801075e:	69b8      	ldr	r0, [r7, #24]
 8010760:	f000 f902 	bl	8010968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010764:	4b1c      	ldr	r3, [pc, #112]	@ (80107d8 <pvPortMalloc+0x190>)
 8010766:	681a      	ldr	r2, [r3, #0]
 8010768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801076a:	685b      	ldr	r3, [r3, #4]
 801076c:	1ad3      	subs	r3, r2, r3
 801076e:	4a1a      	ldr	r2, [pc, #104]	@ (80107d8 <pvPortMalloc+0x190>)
 8010770:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010772:	4b19      	ldr	r3, [pc, #100]	@ (80107d8 <pvPortMalloc+0x190>)
 8010774:	681a      	ldr	r2, [r3, #0]
 8010776:	4b1a      	ldr	r3, [pc, #104]	@ (80107e0 <pvPortMalloc+0x198>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	429a      	cmp	r2, r3
 801077c:	d203      	bcs.n	8010786 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801077e:	4b16      	ldr	r3, [pc, #88]	@ (80107d8 <pvPortMalloc+0x190>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	4a17      	ldr	r2, [pc, #92]	@ (80107e0 <pvPortMalloc+0x198>)
 8010784:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010788:	685a      	ldr	r2, [r3, #4]
 801078a:	4b12      	ldr	r3, [pc, #72]	@ (80107d4 <pvPortMalloc+0x18c>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	431a      	orrs	r2, r3
 8010790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010792:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010796:	2200      	movs	r2, #0
 8010798:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801079a:	f7fe fa75 	bl	800ec88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801079e:	69fb      	ldr	r3, [r7, #28]
 80107a0:	f003 0307 	and.w	r3, r3, #7
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d00d      	beq.n	80107c4 <pvPortMalloc+0x17c>
	__asm volatile
 80107a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107ac:	b672      	cpsid	i
 80107ae:	f383 8811 	msr	BASEPRI, r3
 80107b2:	f3bf 8f6f 	isb	sy
 80107b6:	f3bf 8f4f 	dsb	sy
 80107ba:	b662      	cpsie	i
 80107bc:	60fb      	str	r3, [r7, #12]
}
 80107be:	bf00      	nop
 80107c0:	bf00      	nop
 80107c2:	e7fd      	b.n	80107c0 <pvPortMalloc+0x178>
	return pvReturn;
 80107c4:	69fb      	ldr	r3, [r7, #28]
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3728      	adds	r7, #40	@ 0x28
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
 80107ce:	bf00      	nop
 80107d0:	2002445c 	.word	0x2002445c
 80107d4:	20024468 	.word	0x20024468
 80107d8:	20024460 	.word	0x20024460
 80107dc:	20024454 	.word	0x20024454
 80107e0:	20024464 	.word	0x20024464

080107e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b086      	sub	sp, #24
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d04e      	beq.n	8010894 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80107f6:	2308      	movs	r3, #8
 80107f8:	425b      	negs	r3, r3
 80107fa:	697a      	ldr	r2, [r7, #20]
 80107fc:	4413      	add	r3, r2
 80107fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	685a      	ldr	r2, [r3, #4]
 8010808:	4b24      	ldr	r3, [pc, #144]	@ (801089c <vPortFree+0xb8>)
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	4013      	ands	r3, r2
 801080e:	2b00      	cmp	r3, #0
 8010810:	d10d      	bne.n	801082e <vPortFree+0x4a>
	__asm volatile
 8010812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010816:	b672      	cpsid	i
 8010818:	f383 8811 	msr	BASEPRI, r3
 801081c:	f3bf 8f6f 	isb	sy
 8010820:	f3bf 8f4f 	dsb	sy
 8010824:	b662      	cpsie	i
 8010826:	60fb      	str	r3, [r7, #12]
}
 8010828:	bf00      	nop
 801082a:	bf00      	nop
 801082c:	e7fd      	b.n	801082a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d00d      	beq.n	8010852 <vPortFree+0x6e>
	__asm volatile
 8010836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801083a:	b672      	cpsid	i
 801083c:	f383 8811 	msr	BASEPRI, r3
 8010840:	f3bf 8f6f 	isb	sy
 8010844:	f3bf 8f4f 	dsb	sy
 8010848:	b662      	cpsie	i
 801084a:	60bb      	str	r3, [r7, #8]
}
 801084c:	bf00      	nop
 801084e:	bf00      	nop
 8010850:	e7fd      	b.n	801084e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	685a      	ldr	r2, [r3, #4]
 8010856:	4b11      	ldr	r3, [pc, #68]	@ (801089c <vPortFree+0xb8>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4013      	ands	r3, r2
 801085c:	2b00      	cmp	r3, #0
 801085e:	d019      	beq.n	8010894 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d115      	bne.n	8010894 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	685a      	ldr	r2, [r3, #4]
 801086c:	4b0b      	ldr	r3, [pc, #44]	@ (801089c <vPortFree+0xb8>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	43db      	mvns	r3, r3
 8010872:	401a      	ands	r2, r3
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010878:	f7fe f9f8 	bl	800ec6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	685a      	ldr	r2, [r3, #4]
 8010880:	4b07      	ldr	r3, [pc, #28]	@ (80108a0 <vPortFree+0xbc>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	4413      	add	r3, r2
 8010886:	4a06      	ldr	r2, [pc, #24]	@ (80108a0 <vPortFree+0xbc>)
 8010888:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801088a:	6938      	ldr	r0, [r7, #16]
 801088c:	f000 f86c 	bl	8010968 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010890:	f7fe f9fa 	bl	800ec88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010894:	bf00      	nop
 8010896:	3718      	adds	r7, #24
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}
 801089c:	20024468 	.word	0x20024468
 80108a0:	20024460 	.word	0x20024460

080108a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80108a4:	b480      	push	{r7}
 80108a6:	b085      	sub	sp, #20
 80108a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80108aa:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 80108ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80108b0:	4b27      	ldr	r3, [pc, #156]	@ (8010950 <prvHeapInit+0xac>)
 80108b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	f003 0307 	and.w	r3, r3, #7
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d00c      	beq.n	80108d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	3307      	adds	r3, #7
 80108c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f023 0307 	bic.w	r3, r3, #7
 80108ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80108cc:	68ba      	ldr	r2, [r7, #8]
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	4a1f      	ldr	r2, [pc, #124]	@ (8010950 <prvHeapInit+0xac>)
 80108d4:	4413      	add	r3, r2
 80108d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80108dc:	4a1d      	ldr	r2, [pc, #116]	@ (8010954 <prvHeapInit+0xb0>)
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80108e2:	4b1c      	ldr	r3, [pc, #112]	@ (8010954 <prvHeapInit+0xb0>)
 80108e4:	2200      	movs	r2, #0
 80108e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	68ba      	ldr	r2, [r7, #8]
 80108ec:	4413      	add	r3, r2
 80108ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80108f0:	2208      	movs	r2, #8
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	1a9b      	subs	r3, r3, r2
 80108f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	f023 0307 	bic.w	r3, r3, #7
 80108fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	4a15      	ldr	r2, [pc, #84]	@ (8010958 <prvHeapInit+0xb4>)
 8010904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010906:	4b14      	ldr	r3, [pc, #80]	@ (8010958 <prvHeapInit+0xb4>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	2200      	movs	r2, #0
 801090c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801090e:	4b12      	ldr	r3, [pc, #72]	@ (8010958 <prvHeapInit+0xb4>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	2200      	movs	r2, #0
 8010914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	68fa      	ldr	r2, [r7, #12]
 801091e:	1ad2      	subs	r2, r2, r3
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010924:	4b0c      	ldr	r3, [pc, #48]	@ (8010958 <prvHeapInit+0xb4>)
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	685b      	ldr	r3, [r3, #4]
 8010930:	4a0a      	ldr	r2, [pc, #40]	@ (801095c <prvHeapInit+0xb8>)
 8010932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	4a09      	ldr	r2, [pc, #36]	@ (8010960 <prvHeapInit+0xbc>)
 801093a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801093c:	4b09      	ldr	r3, [pc, #36]	@ (8010964 <prvHeapInit+0xc0>)
 801093e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010942:	601a      	str	r2, [r3, #0]
}
 8010944:	bf00      	nop
 8010946:	3714      	adds	r7, #20
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr
 8010950:	2000b454 	.word	0x2000b454
 8010954:	20024454 	.word	0x20024454
 8010958:	2002445c 	.word	0x2002445c
 801095c:	20024464 	.word	0x20024464
 8010960:	20024460 	.word	0x20024460
 8010964:	20024468 	.word	0x20024468

08010968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010968:	b480      	push	{r7}
 801096a:	b085      	sub	sp, #20
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010970:	4b28      	ldr	r3, [pc, #160]	@ (8010a14 <prvInsertBlockIntoFreeList+0xac>)
 8010972:	60fb      	str	r3, [r7, #12]
 8010974:	e002      	b.n	801097c <prvInsertBlockIntoFreeList+0x14>
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	60fb      	str	r3, [r7, #12]
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	687a      	ldr	r2, [r7, #4]
 8010982:	429a      	cmp	r2, r3
 8010984:	d8f7      	bhi.n	8010976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	685b      	ldr	r3, [r3, #4]
 801098e:	68ba      	ldr	r2, [r7, #8]
 8010990:	4413      	add	r3, r2
 8010992:	687a      	ldr	r2, [r7, #4]
 8010994:	429a      	cmp	r2, r3
 8010996:	d108      	bne.n	80109aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	685a      	ldr	r2, [r3, #4]
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	685b      	ldr	r3, [r3, #4]
 80109a0:	441a      	add	r2, r3
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	68ba      	ldr	r2, [r7, #8]
 80109b4:	441a      	add	r2, r3
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	429a      	cmp	r2, r3
 80109bc:	d118      	bne.n	80109f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681a      	ldr	r2, [r3, #0]
 80109c2:	4b15      	ldr	r3, [pc, #84]	@ (8010a18 <prvInsertBlockIntoFreeList+0xb0>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d00d      	beq.n	80109e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	685a      	ldr	r2, [r3, #4]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	441a      	add	r2, r3
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	681a      	ldr	r2, [r3, #0]
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	601a      	str	r2, [r3, #0]
 80109e4:	e008      	b.n	80109f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80109e6:	4b0c      	ldr	r3, [pc, #48]	@ (8010a18 <prvInsertBlockIntoFreeList+0xb0>)
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	601a      	str	r2, [r3, #0]
 80109ee:	e003      	b.n	80109f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	681a      	ldr	r2, [r3, #0]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80109f8:	68fa      	ldr	r2, [r7, #12]
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d002      	beq.n	8010a06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	687a      	ldr	r2, [r7, #4]
 8010a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a06:	bf00      	nop
 8010a08:	3714      	adds	r7, #20
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr
 8010a12:	bf00      	nop
 8010a14:	20024454 	.word	0x20024454
 8010a18:	2002445c 	.word	0x2002445c

08010a1c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010a26:	f007 facd 	bl	8017fc4 <sys_timeouts_sleeptime>
 8010a2a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a32:	d10b      	bne.n	8010a4c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010a34:	4813      	ldr	r0, [pc, #76]	@ (8010a84 <tcpip_timeouts_mbox_fetch+0x68>)
 8010a36:	f00a fb62 	bl	801b0fe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	6839      	ldr	r1, [r7, #0]
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f00a faea 	bl	801b018 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010a44:	480f      	ldr	r0, [pc, #60]	@ (8010a84 <tcpip_timeouts_mbox_fetch+0x68>)
 8010a46:	f00a fb4b 	bl	801b0e0 <sys_mutex_lock>
    return;
 8010a4a:	e018      	b.n	8010a7e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d102      	bne.n	8010a58 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8010a52:	f007 fa7d 	bl	8017f50 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010a56:	e7e6      	b.n	8010a26 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010a58:	480a      	ldr	r0, [pc, #40]	@ (8010a84 <tcpip_timeouts_mbox_fetch+0x68>)
 8010a5a:	f00a fb50 	bl	801b0fe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8010a5e:	68fa      	ldr	r2, [r7, #12]
 8010a60:	6839      	ldr	r1, [r7, #0]
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f00a fad8 	bl	801b018 <sys_arch_mbox_fetch>
 8010a68:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8010a6a:	4806      	ldr	r0, [pc, #24]	@ (8010a84 <tcpip_timeouts_mbox_fetch+0x68>)
 8010a6c:	f00a fb38 	bl	801b0e0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a76:	d102      	bne.n	8010a7e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010a78:	f007 fa6a 	bl	8017f50 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010a7c:	e7d3      	b.n	8010a26 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8010a7e:	3710      	adds	r7, #16
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}
 8010a84:	20024478 	.word	0x20024478

08010a88 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b084      	sub	sp, #16
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010a90:	4810      	ldr	r0, [pc, #64]	@ (8010ad4 <tcpip_thread+0x4c>)
 8010a92:	f00a fb25 	bl	801b0e0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8010a96:	4b10      	ldr	r3, [pc, #64]	@ (8010ad8 <tcpip_thread+0x50>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d005      	beq.n	8010aaa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8010a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8010ad8 <tcpip_thread+0x50>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8010adc <tcpip_thread+0x54>)
 8010aa4:	6812      	ldr	r2, [r2, #0]
 8010aa6:	4610      	mov	r0, r2
 8010aa8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010aaa:	f107 030c 	add.w	r3, r7, #12
 8010aae:	4619      	mov	r1, r3
 8010ab0:	480b      	ldr	r0, [pc, #44]	@ (8010ae0 <tcpip_thread+0x58>)
 8010ab2:	f7ff ffb3 	bl	8010a1c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d106      	bne.n	8010aca <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010abc:	4b09      	ldr	r3, [pc, #36]	@ (8010ae4 <tcpip_thread+0x5c>)
 8010abe:	2291      	movs	r2, #145	@ 0x91
 8010ac0:	4909      	ldr	r1, [pc, #36]	@ (8010ae8 <tcpip_thread+0x60>)
 8010ac2:	480a      	ldr	r0, [pc, #40]	@ (8010aec <tcpip_thread+0x64>)
 8010ac4:	f00b fbce 	bl	801c264 <iprintf>
      continue;
 8010ac8:	e003      	b.n	8010ad2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	4618      	mov	r0, r3
 8010ace:	f000 f80f 	bl	8010af0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010ad2:	e7ea      	b.n	8010aaa <tcpip_thread+0x22>
 8010ad4:	20024478 	.word	0x20024478
 8010ad8:	2002446c 	.word	0x2002446c
 8010adc:	20024470 	.word	0x20024470
 8010ae0:	20024474 	.word	0x20024474
 8010ae4:	0801d4f4 	.word	0x0801d4f4
 8010ae8:	0801d524 	.word	0x0801d524
 8010aec:	0801d544 	.word	0x0801d544

08010af0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	2b02      	cmp	r3, #2
 8010afe:	d026      	beq.n	8010b4e <tcpip_thread_handle_msg+0x5e>
 8010b00:	2b02      	cmp	r3, #2
 8010b02:	dc2b      	bgt.n	8010b5c <tcpip_thread_handle_msg+0x6c>
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d002      	beq.n	8010b0e <tcpip_thread_handle_msg+0x1e>
 8010b08:	2b01      	cmp	r3, #1
 8010b0a:	d015      	beq.n	8010b38 <tcpip_thread_handle_msg+0x48>
 8010b0c:	e026      	b.n	8010b5c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	68db      	ldr	r3, [r3, #12]
 8010b12:	687a      	ldr	r2, [r7, #4]
 8010b14:	6850      	ldr	r0, [r2, #4]
 8010b16:	687a      	ldr	r2, [r7, #4]
 8010b18:	6892      	ldr	r2, [r2, #8]
 8010b1a:	4611      	mov	r1, r2
 8010b1c:	4798      	blx	r3
 8010b1e:	4603      	mov	r3, r0
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d004      	beq.n	8010b2e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	685b      	ldr	r3, [r3, #4]
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f001 fd07 	bl	801253c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010b2e:	6879      	ldr	r1, [r7, #4]
 8010b30:	2009      	movs	r0, #9
 8010b32:	f000 fe5f 	bl	80117f4 <memp_free>
      break;
 8010b36:	e018      	b.n	8010b6a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	685b      	ldr	r3, [r3, #4]
 8010b3c:	687a      	ldr	r2, [r7, #4]
 8010b3e:	6892      	ldr	r2, [r2, #8]
 8010b40:	4610      	mov	r0, r2
 8010b42:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010b44:	6879      	ldr	r1, [r7, #4]
 8010b46:	2008      	movs	r0, #8
 8010b48:	f000 fe54 	bl	80117f4 <memp_free>
      break;
 8010b4c:	e00d      	b.n	8010b6a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	6892      	ldr	r2, [r2, #8]
 8010b56:	4610      	mov	r0, r2
 8010b58:	4798      	blx	r3
      break;
 8010b5a:	e006      	b.n	8010b6a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010b5c:	4b05      	ldr	r3, [pc, #20]	@ (8010b74 <tcpip_thread_handle_msg+0x84>)
 8010b5e:	22cf      	movs	r2, #207	@ 0xcf
 8010b60:	4905      	ldr	r1, [pc, #20]	@ (8010b78 <tcpip_thread_handle_msg+0x88>)
 8010b62:	4806      	ldr	r0, [pc, #24]	@ (8010b7c <tcpip_thread_handle_msg+0x8c>)
 8010b64:	f00b fb7e 	bl	801c264 <iprintf>
      break;
 8010b68:	bf00      	nop
  }
}
 8010b6a:	bf00      	nop
 8010b6c:	3708      	adds	r7, #8
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}
 8010b72:	bf00      	nop
 8010b74:	0801d4f4 	.word	0x0801d4f4
 8010b78:	0801d524 	.word	0x0801d524
 8010b7c:	0801d544 	.word	0x0801d544

08010b80 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b086      	sub	sp, #24
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	60f8      	str	r0, [r7, #12]
 8010b88:	60b9      	str	r1, [r7, #8]
 8010b8a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010b8c:	481a      	ldr	r0, [pc, #104]	@ (8010bf8 <tcpip_inpkt+0x78>)
 8010b8e:	f00a fa74 	bl	801b07a <sys_mbox_valid>
 8010b92:	4603      	mov	r3, r0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d105      	bne.n	8010ba4 <tcpip_inpkt+0x24>
 8010b98:	4b18      	ldr	r3, [pc, #96]	@ (8010bfc <tcpip_inpkt+0x7c>)
 8010b9a:	22fc      	movs	r2, #252	@ 0xfc
 8010b9c:	4918      	ldr	r1, [pc, #96]	@ (8010c00 <tcpip_inpkt+0x80>)
 8010b9e:	4819      	ldr	r0, [pc, #100]	@ (8010c04 <tcpip_inpkt+0x84>)
 8010ba0:	f00b fb60 	bl	801c264 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8010ba4:	2009      	movs	r0, #9
 8010ba6:	f000 fdaf 	bl	8011708 <memp_malloc>
 8010baa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d102      	bne.n	8010bb8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8010bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8010bb6:	e01a      	b.n	8010bee <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	68fa      	ldr	r2, [r7, #12]
 8010bc2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	68ba      	ldr	r2, [r7, #8]
 8010bc8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	687a      	ldr	r2, [r7, #4]
 8010bce:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010bd0:	6979      	ldr	r1, [r7, #20]
 8010bd2:	4809      	ldr	r0, [pc, #36]	@ (8010bf8 <tcpip_inpkt+0x78>)
 8010bd4:	f00a fa06 	bl	801afe4 <sys_mbox_trypost>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d006      	beq.n	8010bec <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010bde:	6979      	ldr	r1, [r7, #20]
 8010be0:	2009      	movs	r0, #9
 8010be2:	f000 fe07 	bl	80117f4 <memp_free>
    return ERR_MEM;
 8010be6:	f04f 33ff 	mov.w	r3, #4294967295
 8010bea:	e000      	b.n	8010bee <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010bec:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3718      	adds	r7, #24
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}
 8010bf6:	bf00      	nop
 8010bf8:	20024474 	.word	0x20024474
 8010bfc:	0801d4f4 	.word	0x0801d4f4
 8010c00:	0801d56c 	.word	0x0801d56c
 8010c04:	0801d544 	.word	0x0801d544

08010c08 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010c18:	f003 0318 	and.w	r3, r3, #24
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d006      	beq.n	8010c2e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010c20:	4a08      	ldr	r2, [pc, #32]	@ (8010c44 <tcpip_input+0x3c>)
 8010c22:	6839      	ldr	r1, [r7, #0]
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f7ff ffab 	bl	8010b80 <tcpip_inpkt>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	e005      	b.n	8010c3a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8010c2e:	4a06      	ldr	r2, [pc, #24]	@ (8010c48 <tcpip_input+0x40>)
 8010c30:	6839      	ldr	r1, [r7, #0]
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f7ff ffa4 	bl	8010b80 <tcpip_inpkt>
 8010c38:	4603      	mov	r3, r0
}
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	3708      	adds	r7, #8
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}
 8010c42:	bf00      	nop
 8010c44:	0801ae05 	.word	0x0801ae05
 8010c48:	08019bed 	.word	0x08019bed

08010c4c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b084      	sub	sp, #16
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010c56:	4819      	ldr	r0, [pc, #100]	@ (8010cbc <tcpip_try_callback+0x70>)
 8010c58:	f00a fa0f 	bl	801b07a <sys_mbox_valid>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d106      	bne.n	8010c70 <tcpip_try_callback+0x24>
 8010c62:	4b17      	ldr	r3, [pc, #92]	@ (8010cc0 <tcpip_try_callback+0x74>)
 8010c64:	f240 125d 	movw	r2, #349	@ 0x15d
 8010c68:	4916      	ldr	r1, [pc, #88]	@ (8010cc4 <tcpip_try_callback+0x78>)
 8010c6a:	4817      	ldr	r0, [pc, #92]	@ (8010cc8 <tcpip_try_callback+0x7c>)
 8010c6c:	f00b fafa 	bl	801c264 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010c70:	2008      	movs	r0, #8
 8010c72:	f000 fd49 	bl	8011708 <memp_malloc>
 8010c76:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d102      	bne.n	8010c84 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8010c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c82:	e017      	b.n	8010cb4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	2201      	movs	r2, #1
 8010c88:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	683a      	ldr	r2, [r7, #0]
 8010c94:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010c96:	68f9      	ldr	r1, [r7, #12]
 8010c98:	4808      	ldr	r0, [pc, #32]	@ (8010cbc <tcpip_try_callback+0x70>)
 8010c9a:	f00a f9a3 	bl	801afe4 <sys_mbox_trypost>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d006      	beq.n	8010cb2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8010ca4:	68f9      	ldr	r1, [r7, #12]
 8010ca6:	2008      	movs	r0, #8
 8010ca8:	f000 fda4 	bl	80117f4 <memp_free>
    return ERR_MEM;
 8010cac:	f04f 33ff 	mov.w	r3, #4294967295
 8010cb0:	e000      	b.n	8010cb4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8010cb2:	2300      	movs	r3, #0
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3710      	adds	r7, #16
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	20024474 	.word	0x20024474
 8010cc0:	0801d4f4 	.word	0x0801d4f4
 8010cc4:	0801d56c 	.word	0x0801d56c
 8010cc8:	0801d544 	.word	0x0801d544

08010ccc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b084      	sub	sp, #16
 8010cd0:	af02      	add	r7, sp, #8
 8010cd2:	6078      	str	r0, [r7, #4]
 8010cd4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010cd6:	f000 f872 	bl	8010dbe <lwip_init>

  tcpip_init_done = initfunc;
 8010cda:	4a17      	ldr	r2, [pc, #92]	@ (8010d38 <tcpip_init+0x6c>)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010ce0:	4a16      	ldr	r2, [pc, #88]	@ (8010d3c <tcpip_init+0x70>)
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010ce6:	2106      	movs	r1, #6
 8010ce8:	4815      	ldr	r0, [pc, #84]	@ (8010d40 <tcpip_init+0x74>)
 8010cea:	f00a f961 	bl	801afb0 <sys_mbox_new>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d006      	beq.n	8010d02 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010cf4:	4b13      	ldr	r3, [pc, #76]	@ (8010d44 <tcpip_init+0x78>)
 8010cf6:	f240 2261 	movw	r2, #609	@ 0x261
 8010cfa:	4913      	ldr	r1, [pc, #76]	@ (8010d48 <tcpip_init+0x7c>)
 8010cfc:	4813      	ldr	r0, [pc, #76]	@ (8010d4c <tcpip_init+0x80>)
 8010cfe:	f00b fab1 	bl	801c264 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010d02:	4813      	ldr	r0, [pc, #76]	@ (8010d50 <tcpip_init+0x84>)
 8010d04:	f00a f9d6 	bl	801b0b4 <sys_mutex_new>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d006      	beq.n	8010d1c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8010d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8010d44 <tcpip_init+0x78>)
 8010d10:	f240 2265 	movw	r2, #613	@ 0x265
 8010d14:	490f      	ldr	r1, [pc, #60]	@ (8010d54 <tcpip_init+0x88>)
 8010d16:	480d      	ldr	r0, [pc, #52]	@ (8010d4c <tcpip_init+0x80>)
 8010d18:	f00b faa4 	bl	801c264 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010d1c:	2318      	movs	r3, #24
 8010d1e:	9300      	str	r3, [sp, #0]
 8010d20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d24:	2200      	movs	r2, #0
 8010d26:	490c      	ldr	r1, [pc, #48]	@ (8010d58 <tcpip_init+0x8c>)
 8010d28:	480c      	ldr	r0, [pc, #48]	@ (8010d5c <tcpip_init+0x90>)
 8010d2a:	f00a f9f5 	bl	801b118 <sys_thread_new>
}
 8010d2e:	bf00      	nop
 8010d30:	3708      	adds	r7, #8
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	2002446c 	.word	0x2002446c
 8010d3c:	20024470 	.word	0x20024470
 8010d40:	20024474 	.word	0x20024474
 8010d44:	0801d4f4 	.word	0x0801d4f4
 8010d48:	0801d57c 	.word	0x0801d57c
 8010d4c:	0801d544 	.word	0x0801d544
 8010d50:	20024478 	.word	0x20024478
 8010d54:	0801d5a0 	.word	0x0801d5a0
 8010d58:	08010a89 	.word	0x08010a89
 8010d5c:	0801d5c4 	.word	0x0801d5c4

08010d60 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010d60:	b480      	push	{r7}
 8010d62:	b083      	sub	sp, #12
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	4603      	mov	r3, r0
 8010d68:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d6e:	021b      	lsls	r3, r3, #8
 8010d70:	b21a      	sxth	r2, r3
 8010d72:	88fb      	ldrh	r3, [r7, #6]
 8010d74:	0a1b      	lsrs	r3, r3, #8
 8010d76:	b29b      	uxth	r3, r3
 8010d78:	b21b      	sxth	r3, r3
 8010d7a:	4313      	orrs	r3, r2
 8010d7c:	b21b      	sxth	r3, r3
 8010d7e:	b29b      	uxth	r3, r3
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	370c      	adds	r7, #12
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr

08010d8c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b083      	sub	sp, #12
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	061a      	lsls	r2, r3, #24
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	021b      	lsls	r3, r3, #8
 8010d9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010da0:	431a      	orrs	r2, r3
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	0a1b      	lsrs	r3, r3, #8
 8010da6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010daa:	431a      	orrs	r2, r3
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	0e1b      	lsrs	r3, r3, #24
 8010db0:	4313      	orrs	r3, r2
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	370c      	adds	r7, #12
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr

08010dbe <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010dbe:	b580      	push	{r7, lr}
 8010dc0:	b082      	sub	sp, #8
 8010dc2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010dc8:	f00a f968 	bl	801b09c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010dcc:	f000 f8d4 	bl	8010f78 <mem_init>
  memp_init();
 8010dd0:	f000 fc2c 	bl	801162c <memp_init>
  pbuf_init();
  netif_init();
 8010dd4:	f000 fd38 	bl	8011848 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010dd8:	f007 f92c 	bl	8018034 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010ddc:	f001 fe58 	bl	8012a90 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010de0:	f007 f86e 	bl	8017ec0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010de4:	bf00      	nop
 8010de6:	3708      	adds	r7, #8
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}

08010dec <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	4603      	mov	r3, r0
 8010df4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010df6:	4b05      	ldr	r3, [pc, #20]	@ (8010e0c <ptr_to_mem+0x20>)
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	88fb      	ldrh	r3, [r7, #6]
 8010dfc:	4413      	add	r3, r2
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	370c      	adds	r7, #12
 8010e02:	46bd      	mov	sp, r7
 8010e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e08:	4770      	bx	lr
 8010e0a:	bf00      	nop
 8010e0c:	20024494 	.word	0x20024494

08010e10 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010e10:	b480      	push	{r7}
 8010e12:	b083      	sub	sp, #12
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010e18:	4b05      	ldr	r3, [pc, #20]	@ (8010e30 <mem_to_ptr+0x20>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	687a      	ldr	r2, [r7, #4]
 8010e1e:	1ad3      	subs	r3, r2, r3
 8010e20:	b29b      	uxth	r3, r3
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	370c      	adds	r7, #12
 8010e26:	46bd      	mov	sp, r7
 8010e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2c:	4770      	bx	lr
 8010e2e:	bf00      	nop
 8010e30:	20024494 	.word	0x20024494

08010e34 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010e34:	b590      	push	{r4, r7, lr}
 8010e36:	b085      	sub	sp, #20
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010e3c:	4b45      	ldr	r3, [pc, #276]	@ (8010f54 <plug_holes+0x120>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	687a      	ldr	r2, [r7, #4]
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d206      	bcs.n	8010e54 <plug_holes+0x20>
 8010e46:	4b44      	ldr	r3, [pc, #272]	@ (8010f58 <plug_holes+0x124>)
 8010e48:	f240 12df 	movw	r2, #479	@ 0x1df
 8010e4c:	4943      	ldr	r1, [pc, #268]	@ (8010f5c <plug_holes+0x128>)
 8010e4e:	4844      	ldr	r0, [pc, #272]	@ (8010f60 <plug_holes+0x12c>)
 8010e50:	f00b fa08 	bl	801c264 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010e54:	4b43      	ldr	r3, [pc, #268]	@ (8010f64 <plug_holes+0x130>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	687a      	ldr	r2, [r7, #4]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d306      	bcc.n	8010e6c <plug_holes+0x38>
 8010e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8010f58 <plug_holes+0x124>)
 8010e60:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010e64:	4940      	ldr	r1, [pc, #256]	@ (8010f68 <plug_holes+0x134>)
 8010e66:	483e      	ldr	r0, [pc, #248]	@ (8010f60 <plug_holes+0x12c>)
 8010e68:	f00b f9fc 	bl	801c264 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	791b      	ldrb	r3, [r3, #4]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d006      	beq.n	8010e82 <plug_holes+0x4e>
 8010e74:	4b38      	ldr	r3, [pc, #224]	@ (8010f58 <plug_holes+0x124>)
 8010e76:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8010e7a:	493c      	ldr	r1, [pc, #240]	@ (8010f6c <plug_holes+0x138>)
 8010e7c:	4838      	ldr	r0, [pc, #224]	@ (8010f60 <plug_holes+0x12c>)
 8010e7e:	f00b f9f1 	bl	801c264 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	881b      	ldrh	r3, [r3, #0]
 8010e86:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010e8a:	d906      	bls.n	8010e9a <plug_holes+0x66>
 8010e8c:	4b32      	ldr	r3, [pc, #200]	@ (8010f58 <plug_holes+0x124>)
 8010e8e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8010e92:	4937      	ldr	r1, [pc, #220]	@ (8010f70 <plug_holes+0x13c>)
 8010e94:	4832      	ldr	r0, [pc, #200]	@ (8010f60 <plug_holes+0x12c>)
 8010e96:	f00b f9e5 	bl	801c264 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	881b      	ldrh	r3, [r3, #0]
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7ff ffa4 	bl	8010dec <ptr_to_mem>
 8010ea4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010ea6:	687a      	ldr	r2, [r7, #4]
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d024      	beq.n	8010ef8 <plug_holes+0xc4>
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	791b      	ldrb	r3, [r3, #4]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d120      	bne.n	8010ef8 <plug_holes+0xc4>
 8010eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8010f64 <plug_holes+0x130>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	68fa      	ldr	r2, [r7, #12]
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	d01b      	beq.n	8010ef8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8010f74 <plug_holes+0x140>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	68fa      	ldr	r2, [r7, #12]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d102      	bne.n	8010ed0 <plug_holes+0x9c>
      lfree = mem;
 8010eca:	4a2a      	ldr	r2, [pc, #168]	@ (8010f74 <plug_holes+0x140>)
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	881a      	ldrh	r2, [r3, #0]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	881b      	ldrh	r3, [r3, #0]
 8010edc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010ee0:	d00a      	beq.n	8010ef8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	881b      	ldrh	r3, [r3, #0]
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7ff ff80 	bl	8010dec <ptr_to_mem>
 8010eec:	4604      	mov	r4, r0
 8010eee:	6878      	ldr	r0, [r7, #4]
 8010ef0:	f7ff ff8e 	bl	8010e10 <mem_to_ptr>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	885b      	ldrh	r3, [r3, #2]
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7ff ff75 	bl	8010dec <ptr_to_mem>
 8010f02:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010f04:	68ba      	ldr	r2, [r7, #8]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d01f      	beq.n	8010f4c <plug_holes+0x118>
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	791b      	ldrb	r3, [r3, #4]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d11b      	bne.n	8010f4c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010f14:	4b17      	ldr	r3, [pc, #92]	@ (8010f74 <plug_holes+0x140>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	687a      	ldr	r2, [r7, #4]
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d102      	bne.n	8010f24 <plug_holes+0xf0>
      lfree = pmem;
 8010f1e:	4a15      	ldr	r2, [pc, #84]	@ (8010f74 <plug_holes+0x140>)
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	881a      	ldrh	r2, [r3, #0]
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	881b      	ldrh	r3, [r3, #0]
 8010f30:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010f34:	d00a      	beq.n	8010f4c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	881b      	ldrh	r3, [r3, #0]
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f7ff ff56 	bl	8010dec <ptr_to_mem>
 8010f40:	4604      	mov	r4, r0
 8010f42:	68b8      	ldr	r0, [r7, #8]
 8010f44:	f7ff ff64 	bl	8010e10 <mem_to_ptr>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010f4c:	bf00      	nop
 8010f4e:	3714      	adds	r7, #20
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd90      	pop	{r4, r7, pc}
 8010f54:	20024494 	.word	0x20024494
 8010f58:	0801d5d4 	.word	0x0801d5d4
 8010f5c:	0801d604 	.word	0x0801d604
 8010f60:	0801d61c 	.word	0x0801d61c
 8010f64:	20024498 	.word	0x20024498
 8010f68:	0801d644 	.word	0x0801d644
 8010f6c:	0801d660 	.word	0x0801d660
 8010f70:	0801d67c 	.word	0x0801d67c
 8010f74:	200244a0 	.word	0x200244a0

08010f78 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b082      	sub	sp, #8
 8010f7c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8010ff4 <mem_init+0x7c>)
 8010f80:	4a1d      	ldr	r2, [pc, #116]	@ (8010ff8 <mem_init+0x80>)
 8010f82:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010f84:	4b1b      	ldr	r3, [pc, #108]	@ (8010ff4 <mem_init+0x7c>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8010f90:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2200      	movs	r2, #0
 8010f96:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010f9e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8010fa2:	f7ff ff23 	bl	8010dec <ptr_to_mem>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	4a14      	ldr	r2, [pc, #80]	@ (8010ffc <mem_init+0x84>)
 8010faa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010fac:	4b13      	ldr	r3, [pc, #76]	@ (8010ffc <mem_init+0x84>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2201      	movs	r2, #1
 8010fb2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010fb4:	4b11      	ldr	r3, [pc, #68]	@ (8010ffc <mem_init+0x84>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8010fbc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8010ffc <mem_init+0x84>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8010fc6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8010ff4 <mem_init+0x7c>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8011000 <mem_init+0x88>)
 8010fce:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010fd0:	480c      	ldr	r0, [pc, #48]	@ (8011004 <mem_init+0x8c>)
 8010fd2:	f00a f86f 	bl	801b0b4 <sys_mutex_new>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d006      	beq.n	8010fea <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8011008 <mem_init+0x90>)
 8010fde:	f240 221f 	movw	r2, #543	@ 0x21f
 8010fe2:	490a      	ldr	r1, [pc, #40]	@ (801100c <mem_init+0x94>)
 8010fe4:	480a      	ldr	r0, [pc, #40]	@ (8011010 <mem_init+0x98>)
 8010fe6:	f00b f93d 	bl	801c264 <iprintf>
  }
}
 8010fea:	bf00      	nop
 8010fec:	3708      	adds	r7, #8
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}
 8010ff2:	bf00      	nop
 8010ff4:	20024494 	.word	0x20024494
 8010ff8:	20048000 	.word	0x20048000
 8010ffc:	20024498 	.word	0x20024498
 8011000:	200244a0 	.word	0x200244a0
 8011004:	2002449c 	.word	0x2002449c
 8011008:	0801d5d4 	.word	0x0801d5d4
 801100c:	0801d6a8 	.word	0x0801d6a8
 8011010:	0801d61c 	.word	0x0801d61c

08011014 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b086      	sub	sp, #24
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f7ff fef7 	bl	8010e10 <mem_to_ptr>
 8011022:	4603      	mov	r3, r0
 8011024:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	881b      	ldrh	r3, [r3, #0]
 801102a:	4618      	mov	r0, r3
 801102c:	f7ff fede 	bl	8010dec <ptr_to_mem>
 8011030:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	885b      	ldrh	r3, [r3, #2]
 8011036:	4618      	mov	r0, r3
 8011038:	f7ff fed8 	bl	8010dec <ptr_to_mem>
 801103c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	881b      	ldrh	r3, [r3, #0]
 8011042:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011046:	d818      	bhi.n	801107a <mem_link_valid+0x66>
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	885b      	ldrh	r3, [r3, #2]
 801104c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011050:	d813      	bhi.n	801107a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011056:	8afa      	ldrh	r2, [r7, #22]
 8011058:	429a      	cmp	r2, r3
 801105a:	d004      	beq.n	8011066 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	881b      	ldrh	r3, [r3, #0]
 8011060:	8afa      	ldrh	r2, [r7, #22]
 8011062:	429a      	cmp	r2, r3
 8011064:	d109      	bne.n	801107a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011066:	4b08      	ldr	r3, [pc, #32]	@ (8011088 <mem_link_valid+0x74>)
 8011068:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801106a:	693a      	ldr	r2, [r7, #16]
 801106c:	429a      	cmp	r2, r3
 801106e:	d006      	beq.n	801107e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	885b      	ldrh	r3, [r3, #2]
 8011074:	8afa      	ldrh	r2, [r7, #22]
 8011076:	429a      	cmp	r2, r3
 8011078:	d001      	beq.n	801107e <mem_link_valid+0x6a>
    return 0;
 801107a:	2300      	movs	r3, #0
 801107c:	e000      	b.n	8011080 <mem_link_valid+0x6c>
  }
  return 1;
 801107e:	2301      	movs	r3, #1
}
 8011080:	4618      	mov	r0, r3
 8011082:	3718      	adds	r7, #24
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	20024498 	.word	0x20024498

0801108c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b088      	sub	sp, #32
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d070      	beq.n	801117c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f003 0303 	and.w	r3, r3, #3
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d00d      	beq.n	80110c0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80110a4:	4b37      	ldr	r3, [pc, #220]	@ (8011184 <mem_free+0xf8>)
 80110a6:	f240 2273 	movw	r2, #627	@ 0x273
 80110aa:	4937      	ldr	r1, [pc, #220]	@ (8011188 <mem_free+0xfc>)
 80110ac:	4837      	ldr	r0, [pc, #220]	@ (801118c <mem_free+0x100>)
 80110ae:	f00b f8d9 	bl	801c264 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80110b2:	f00a f851 	bl	801b158 <sys_arch_protect>
 80110b6:	60f8      	str	r0, [r7, #12]
 80110b8:	68f8      	ldr	r0, [r7, #12]
 80110ba:	f00a f85b 	bl	801b174 <sys_arch_unprotect>
    return;
 80110be:	e05e      	b.n	801117e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	3b08      	subs	r3, #8
 80110c4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80110c6:	4b32      	ldr	r3, [pc, #200]	@ (8011190 <mem_free+0x104>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	69fa      	ldr	r2, [r7, #28]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d306      	bcc.n	80110de <mem_free+0x52>
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f103 020c 	add.w	r2, r3, #12
 80110d6:	4b2f      	ldr	r3, [pc, #188]	@ (8011194 <mem_free+0x108>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	429a      	cmp	r2, r3
 80110dc:	d90d      	bls.n	80110fa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80110de:	4b29      	ldr	r3, [pc, #164]	@ (8011184 <mem_free+0xf8>)
 80110e0:	f240 227f 	movw	r2, #639	@ 0x27f
 80110e4:	492c      	ldr	r1, [pc, #176]	@ (8011198 <mem_free+0x10c>)
 80110e6:	4829      	ldr	r0, [pc, #164]	@ (801118c <mem_free+0x100>)
 80110e8:	f00b f8bc 	bl	801c264 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80110ec:	f00a f834 	bl	801b158 <sys_arch_protect>
 80110f0:	6138      	str	r0, [r7, #16]
 80110f2:	6938      	ldr	r0, [r7, #16]
 80110f4:	f00a f83e 	bl	801b174 <sys_arch_unprotect>
    return;
 80110f8:	e041      	b.n	801117e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80110fa:	4828      	ldr	r0, [pc, #160]	@ (801119c <mem_free+0x110>)
 80110fc:	f009 fff0 	bl	801b0e0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	791b      	ldrb	r3, [r3, #4]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d110      	bne.n	801112a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011108:	4b1e      	ldr	r3, [pc, #120]	@ (8011184 <mem_free+0xf8>)
 801110a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 801110e:	4924      	ldr	r1, [pc, #144]	@ (80111a0 <mem_free+0x114>)
 8011110:	481e      	ldr	r0, [pc, #120]	@ (801118c <mem_free+0x100>)
 8011112:	f00b f8a7 	bl	801c264 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011116:	4821      	ldr	r0, [pc, #132]	@ (801119c <mem_free+0x110>)
 8011118:	f009 fff1 	bl	801b0fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801111c:	f00a f81c 	bl	801b158 <sys_arch_protect>
 8011120:	6178      	str	r0, [r7, #20]
 8011122:	6978      	ldr	r0, [r7, #20]
 8011124:	f00a f826 	bl	801b174 <sys_arch_unprotect>
    return;
 8011128:	e029      	b.n	801117e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801112a:	69f8      	ldr	r0, [r7, #28]
 801112c:	f7ff ff72 	bl	8011014 <mem_link_valid>
 8011130:	4603      	mov	r3, r0
 8011132:	2b00      	cmp	r3, #0
 8011134:	d110      	bne.n	8011158 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011136:	4b13      	ldr	r3, [pc, #76]	@ (8011184 <mem_free+0xf8>)
 8011138:	f240 2295 	movw	r2, #661	@ 0x295
 801113c:	4919      	ldr	r1, [pc, #100]	@ (80111a4 <mem_free+0x118>)
 801113e:	4813      	ldr	r0, [pc, #76]	@ (801118c <mem_free+0x100>)
 8011140:	f00b f890 	bl	801c264 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011144:	4815      	ldr	r0, [pc, #84]	@ (801119c <mem_free+0x110>)
 8011146:	f009 ffda 	bl	801b0fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801114a:	f00a f805 	bl	801b158 <sys_arch_protect>
 801114e:	61b8      	str	r0, [r7, #24]
 8011150:	69b8      	ldr	r0, [r7, #24]
 8011152:	f00a f80f 	bl	801b174 <sys_arch_unprotect>
    return;
 8011156:	e012      	b.n	801117e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011158:	69fb      	ldr	r3, [r7, #28]
 801115a:	2200      	movs	r2, #0
 801115c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801115e:	4b12      	ldr	r3, [pc, #72]	@ (80111a8 <mem_free+0x11c>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	69fa      	ldr	r2, [r7, #28]
 8011164:	429a      	cmp	r2, r3
 8011166:	d202      	bcs.n	801116e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011168:	4a0f      	ldr	r2, [pc, #60]	@ (80111a8 <mem_free+0x11c>)
 801116a:	69fb      	ldr	r3, [r7, #28]
 801116c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801116e:	69f8      	ldr	r0, [r7, #28]
 8011170:	f7ff fe60 	bl	8010e34 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011174:	4809      	ldr	r0, [pc, #36]	@ (801119c <mem_free+0x110>)
 8011176:	f009 ffc2 	bl	801b0fe <sys_mutex_unlock>
 801117a:	e000      	b.n	801117e <mem_free+0xf2>
    return;
 801117c:	bf00      	nop
}
 801117e:	3720      	adds	r7, #32
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	0801d5d4 	.word	0x0801d5d4
 8011188:	0801d6c4 	.word	0x0801d6c4
 801118c:	0801d61c 	.word	0x0801d61c
 8011190:	20024494 	.word	0x20024494
 8011194:	20024498 	.word	0x20024498
 8011198:	0801d6e8 	.word	0x0801d6e8
 801119c:	2002449c 	.word	0x2002449c
 80111a0:	0801d704 	.word	0x0801d704
 80111a4:	0801d72c 	.word	0x0801d72c
 80111a8:	200244a0 	.word	0x200244a0

080111ac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b088      	sub	sp, #32
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	460b      	mov	r3, r1
 80111b6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80111b8:	887b      	ldrh	r3, [r7, #2]
 80111ba:	3303      	adds	r3, #3
 80111bc:	b29b      	uxth	r3, r3
 80111be:	f023 0303 	bic.w	r3, r3, #3
 80111c2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80111c4:	8bfb      	ldrh	r3, [r7, #30]
 80111c6:	2b0b      	cmp	r3, #11
 80111c8:	d801      	bhi.n	80111ce <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80111ca:	230c      	movs	r3, #12
 80111cc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80111ce:	8bfb      	ldrh	r3, [r7, #30]
 80111d0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80111d4:	d803      	bhi.n	80111de <mem_trim+0x32>
 80111d6:	8bfa      	ldrh	r2, [r7, #30]
 80111d8:	887b      	ldrh	r3, [r7, #2]
 80111da:	429a      	cmp	r2, r3
 80111dc:	d201      	bcs.n	80111e2 <mem_trim+0x36>
    return NULL;
 80111de:	2300      	movs	r3, #0
 80111e0:	e0d8      	b.n	8011394 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80111e2:	4b6e      	ldr	r3, [pc, #440]	@ (801139c <mem_trim+0x1f0>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	687a      	ldr	r2, [r7, #4]
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d304      	bcc.n	80111f6 <mem_trim+0x4a>
 80111ec:	4b6c      	ldr	r3, [pc, #432]	@ (80113a0 <mem_trim+0x1f4>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	687a      	ldr	r2, [r7, #4]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d306      	bcc.n	8011204 <mem_trim+0x58>
 80111f6:	4b6b      	ldr	r3, [pc, #428]	@ (80113a4 <mem_trim+0x1f8>)
 80111f8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80111fc:	496a      	ldr	r1, [pc, #424]	@ (80113a8 <mem_trim+0x1fc>)
 80111fe:	486b      	ldr	r0, [pc, #428]	@ (80113ac <mem_trim+0x200>)
 8011200:	f00b f830 	bl	801c264 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011204:	4b65      	ldr	r3, [pc, #404]	@ (801139c <mem_trim+0x1f0>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	429a      	cmp	r2, r3
 801120c:	d304      	bcc.n	8011218 <mem_trim+0x6c>
 801120e:	4b64      	ldr	r3, [pc, #400]	@ (80113a0 <mem_trim+0x1f4>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	687a      	ldr	r2, [r7, #4]
 8011214:	429a      	cmp	r2, r3
 8011216:	d307      	bcc.n	8011228 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011218:	f009 ff9e 	bl	801b158 <sys_arch_protect>
 801121c:	60b8      	str	r0, [r7, #8]
 801121e:	68b8      	ldr	r0, [r7, #8]
 8011220:	f009 ffa8 	bl	801b174 <sys_arch_unprotect>
    return rmem;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	e0b5      	b.n	8011394 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	3b08      	subs	r3, #8
 801122c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801122e:	69b8      	ldr	r0, [r7, #24]
 8011230:	f7ff fdee 	bl	8010e10 <mem_to_ptr>
 8011234:	4603      	mov	r3, r0
 8011236:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011238:	69bb      	ldr	r3, [r7, #24]
 801123a:	881a      	ldrh	r2, [r3, #0]
 801123c:	8afb      	ldrh	r3, [r7, #22]
 801123e:	1ad3      	subs	r3, r2, r3
 8011240:	b29b      	uxth	r3, r3
 8011242:	3b08      	subs	r3, #8
 8011244:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011246:	8bfa      	ldrh	r2, [r7, #30]
 8011248:	8abb      	ldrh	r3, [r7, #20]
 801124a:	429a      	cmp	r2, r3
 801124c:	d906      	bls.n	801125c <mem_trim+0xb0>
 801124e:	4b55      	ldr	r3, [pc, #340]	@ (80113a4 <mem_trim+0x1f8>)
 8011250:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8011254:	4956      	ldr	r1, [pc, #344]	@ (80113b0 <mem_trim+0x204>)
 8011256:	4855      	ldr	r0, [pc, #340]	@ (80113ac <mem_trim+0x200>)
 8011258:	f00b f804 	bl	801c264 <iprintf>
  if (newsize > size) {
 801125c:	8bfa      	ldrh	r2, [r7, #30]
 801125e:	8abb      	ldrh	r3, [r7, #20]
 8011260:	429a      	cmp	r2, r3
 8011262:	d901      	bls.n	8011268 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011264:	2300      	movs	r3, #0
 8011266:	e095      	b.n	8011394 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011268:	8bfa      	ldrh	r2, [r7, #30]
 801126a:	8abb      	ldrh	r3, [r7, #20]
 801126c:	429a      	cmp	r2, r3
 801126e:	d101      	bne.n	8011274 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	e08f      	b.n	8011394 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011274:	484f      	ldr	r0, [pc, #316]	@ (80113b4 <mem_trim+0x208>)
 8011276:	f009 ff33 	bl	801b0e0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801127a:	69bb      	ldr	r3, [r7, #24]
 801127c:	881b      	ldrh	r3, [r3, #0]
 801127e:	4618      	mov	r0, r3
 8011280:	f7ff fdb4 	bl	8010dec <ptr_to_mem>
 8011284:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	791b      	ldrb	r3, [r3, #4]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d13f      	bne.n	801130e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801128e:	69bb      	ldr	r3, [r7, #24]
 8011290:	881b      	ldrh	r3, [r3, #0]
 8011292:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011296:	d106      	bne.n	80112a6 <mem_trim+0xfa>
 8011298:	4b42      	ldr	r3, [pc, #264]	@ (80113a4 <mem_trim+0x1f8>)
 801129a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 801129e:	4946      	ldr	r1, [pc, #280]	@ (80113b8 <mem_trim+0x20c>)
 80112a0:	4842      	ldr	r0, [pc, #264]	@ (80113ac <mem_trim+0x200>)
 80112a2:	f00a ffdf 	bl	801c264 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	881b      	ldrh	r3, [r3, #0]
 80112aa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80112ac:	8afa      	ldrh	r2, [r7, #22]
 80112ae:	8bfb      	ldrh	r3, [r7, #30]
 80112b0:	4413      	add	r3, r2
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	3308      	adds	r3, #8
 80112b6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80112b8:	4b40      	ldr	r3, [pc, #256]	@ (80113bc <mem_trim+0x210>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	693a      	ldr	r2, [r7, #16]
 80112be:	429a      	cmp	r2, r3
 80112c0:	d106      	bne.n	80112d0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80112c2:	89fb      	ldrh	r3, [r7, #14]
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7ff fd91 	bl	8010dec <ptr_to_mem>
 80112ca:	4603      	mov	r3, r0
 80112cc:	4a3b      	ldr	r2, [pc, #236]	@ (80113bc <mem_trim+0x210>)
 80112ce:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80112d0:	89fb      	ldrh	r3, [r7, #14]
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7ff fd8a 	bl	8010dec <ptr_to_mem>
 80112d8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	2200      	movs	r2, #0
 80112de:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	89ba      	ldrh	r2, [r7, #12]
 80112e4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	8afa      	ldrh	r2, [r7, #22]
 80112ea:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80112ec:	69bb      	ldr	r3, [r7, #24]
 80112ee:	89fa      	ldrh	r2, [r7, #14]
 80112f0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	881b      	ldrh	r3, [r3, #0]
 80112f6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80112fa:	d047      	beq.n	801138c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	881b      	ldrh	r3, [r3, #0]
 8011300:	4618      	mov	r0, r3
 8011302:	f7ff fd73 	bl	8010dec <ptr_to_mem>
 8011306:	4602      	mov	r2, r0
 8011308:	89fb      	ldrh	r3, [r7, #14]
 801130a:	8053      	strh	r3, [r2, #2]
 801130c:	e03e      	b.n	801138c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801130e:	8bfb      	ldrh	r3, [r7, #30]
 8011310:	f103 0214 	add.w	r2, r3, #20
 8011314:	8abb      	ldrh	r3, [r7, #20]
 8011316:	429a      	cmp	r2, r3
 8011318:	d838      	bhi.n	801138c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801131a:	8afa      	ldrh	r2, [r7, #22]
 801131c:	8bfb      	ldrh	r3, [r7, #30]
 801131e:	4413      	add	r3, r2
 8011320:	b29b      	uxth	r3, r3
 8011322:	3308      	adds	r3, #8
 8011324:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011326:	69bb      	ldr	r3, [r7, #24]
 8011328:	881b      	ldrh	r3, [r3, #0]
 801132a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801132e:	d106      	bne.n	801133e <mem_trim+0x192>
 8011330:	4b1c      	ldr	r3, [pc, #112]	@ (80113a4 <mem_trim+0x1f8>)
 8011332:	f240 3216 	movw	r2, #790	@ 0x316
 8011336:	4920      	ldr	r1, [pc, #128]	@ (80113b8 <mem_trim+0x20c>)
 8011338:	481c      	ldr	r0, [pc, #112]	@ (80113ac <mem_trim+0x200>)
 801133a:	f00a ff93 	bl	801c264 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801133e:	89fb      	ldrh	r3, [r7, #14]
 8011340:	4618      	mov	r0, r3
 8011342:	f7ff fd53 	bl	8010dec <ptr_to_mem>
 8011346:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011348:	4b1c      	ldr	r3, [pc, #112]	@ (80113bc <mem_trim+0x210>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	693a      	ldr	r2, [r7, #16]
 801134e:	429a      	cmp	r2, r3
 8011350:	d202      	bcs.n	8011358 <mem_trim+0x1ac>
      lfree = mem2;
 8011352:	4a1a      	ldr	r2, [pc, #104]	@ (80113bc <mem_trim+0x210>)
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	2200      	movs	r2, #0
 801135c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801135e:	69bb      	ldr	r3, [r7, #24]
 8011360:	881a      	ldrh	r2, [r3, #0]
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	8afa      	ldrh	r2, [r7, #22]
 801136a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801136c:	69bb      	ldr	r3, [r7, #24]
 801136e:	89fa      	ldrh	r2, [r7, #14]
 8011370:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	881b      	ldrh	r3, [r3, #0]
 8011376:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801137a:	d007      	beq.n	801138c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801137c:	693b      	ldr	r3, [r7, #16]
 801137e:	881b      	ldrh	r3, [r3, #0]
 8011380:	4618      	mov	r0, r3
 8011382:	f7ff fd33 	bl	8010dec <ptr_to_mem>
 8011386:	4602      	mov	r2, r0
 8011388:	89fb      	ldrh	r3, [r7, #14]
 801138a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801138c:	4809      	ldr	r0, [pc, #36]	@ (80113b4 <mem_trim+0x208>)
 801138e:	f009 feb6 	bl	801b0fe <sys_mutex_unlock>
  return rmem;
 8011392:	687b      	ldr	r3, [r7, #4]
}
 8011394:	4618      	mov	r0, r3
 8011396:	3720      	adds	r7, #32
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}
 801139c:	20024494 	.word	0x20024494
 80113a0:	20024498 	.word	0x20024498
 80113a4:	0801d5d4 	.word	0x0801d5d4
 80113a8:	0801d760 	.word	0x0801d760
 80113ac:	0801d61c 	.word	0x0801d61c
 80113b0:	0801d778 	.word	0x0801d778
 80113b4:	2002449c 	.word	0x2002449c
 80113b8:	0801d798 	.word	0x0801d798
 80113bc:	200244a0 	.word	0x200244a0

080113c0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b088      	sub	sp, #32
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	4603      	mov	r3, r0
 80113c8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80113ca:	88fb      	ldrh	r3, [r7, #6]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d101      	bne.n	80113d4 <mem_malloc+0x14>
    return NULL;
 80113d0:	2300      	movs	r3, #0
 80113d2:	e0e2      	b.n	801159a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80113d4:	88fb      	ldrh	r3, [r7, #6]
 80113d6:	3303      	adds	r3, #3
 80113d8:	b29b      	uxth	r3, r3
 80113da:	f023 0303 	bic.w	r3, r3, #3
 80113de:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80113e0:	8bbb      	ldrh	r3, [r7, #28]
 80113e2:	2b0b      	cmp	r3, #11
 80113e4:	d801      	bhi.n	80113ea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80113e6:	230c      	movs	r3, #12
 80113e8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80113ea:	8bbb      	ldrh	r3, [r7, #28]
 80113ec:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80113f0:	d803      	bhi.n	80113fa <mem_malloc+0x3a>
 80113f2:	8bba      	ldrh	r2, [r7, #28]
 80113f4:	88fb      	ldrh	r3, [r7, #6]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d201      	bcs.n	80113fe <mem_malloc+0x3e>
    return NULL;
 80113fa:	2300      	movs	r3, #0
 80113fc:	e0cd      	b.n	801159a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80113fe:	4869      	ldr	r0, [pc, #420]	@ (80115a4 <mem_malloc+0x1e4>)
 8011400:	f009 fe6e 	bl	801b0e0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011404:	4b68      	ldr	r3, [pc, #416]	@ (80115a8 <mem_malloc+0x1e8>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	4618      	mov	r0, r3
 801140a:	f7ff fd01 	bl	8010e10 <mem_to_ptr>
 801140e:	4603      	mov	r3, r0
 8011410:	83fb      	strh	r3, [r7, #30]
 8011412:	e0b7      	b.n	8011584 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011414:	8bfb      	ldrh	r3, [r7, #30]
 8011416:	4618      	mov	r0, r3
 8011418:	f7ff fce8 	bl	8010dec <ptr_to_mem>
 801141c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	791b      	ldrb	r3, [r3, #4]
 8011422:	2b00      	cmp	r3, #0
 8011424:	f040 80a7 	bne.w	8011576 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	881b      	ldrh	r3, [r3, #0]
 801142c:	461a      	mov	r2, r3
 801142e:	8bfb      	ldrh	r3, [r7, #30]
 8011430:	1ad3      	subs	r3, r2, r3
 8011432:	f1a3 0208 	sub.w	r2, r3, #8
 8011436:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011438:	429a      	cmp	r2, r3
 801143a:	f0c0 809c 	bcc.w	8011576 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	881b      	ldrh	r3, [r3, #0]
 8011442:	461a      	mov	r2, r3
 8011444:	8bfb      	ldrh	r3, [r7, #30]
 8011446:	1ad3      	subs	r3, r2, r3
 8011448:	f1a3 0208 	sub.w	r2, r3, #8
 801144c:	8bbb      	ldrh	r3, [r7, #28]
 801144e:	3314      	adds	r3, #20
 8011450:	429a      	cmp	r2, r3
 8011452:	d333      	bcc.n	80114bc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011454:	8bfa      	ldrh	r2, [r7, #30]
 8011456:	8bbb      	ldrh	r3, [r7, #28]
 8011458:	4413      	add	r3, r2
 801145a:	b29b      	uxth	r3, r3
 801145c:	3308      	adds	r3, #8
 801145e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011460:	8a7b      	ldrh	r3, [r7, #18]
 8011462:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011466:	d106      	bne.n	8011476 <mem_malloc+0xb6>
 8011468:	4b50      	ldr	r3, [pc, #320]	@ (80115ac <mem_malloc+0x1ec>)
 801146a:	f240 3287 	movw	r2, #903	@ 0x387
 801146e:	4950      	ldr	r1, [pc, #320]	@ (80115b0 <mem_malloc+0x1f0>)
 8011470:	4850      	ldr	r0, [pc, #320]	@ (80115b4 <mem_malloc+0x1f4>)
 8011472:	f00a fef7 	bl	801c264 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011476:	8a7b      	ldrh	r3, [r7, #18]
 8011478:	4618      	mov	r0, r3
 801147a:	f7ff fcb7 	bl	8010dec <ptr_to_mem>
 801147e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	2200      	movs	r2, #0
 8011484:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	881a      	ldrh	r2, [r3, #0]
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	8bfa      	ldrh	r2, [r7, #30]
 8011492:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	8a7a      	ldrh	r2, [r7, #18]
 8011498:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	2201      	movs	r2, #1
 801149e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	881b      	ldrh	r3, [r3, #0]
 80114a4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80114a8:	d00b      	beq.n	80114c2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	881b      	ldrh	r3, [r3, #0]
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7ff fc9c 	bl	8010dec <ptr_to_mem>
 80114b4:	4602      	mov	r2, r0
 80114b6:	8a7b      	ldrh	r3, [r7, #18]
 80114b8:	8053      	strh	r3, [r2, #2]
 80114ba:	e002      	b.n	80114c2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	2201      	movs	r2, #1
 80114c0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80114c2:	4b39      	ldr	r3, [pc, #228]	@ (80115a8 <mem_malloc+0x1e8>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	697a      	ldr	r2, [r7, #20]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d127      	bne.n	801151c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80114cc:	4b36      	ldr	r3, [pc, #216]	@ (80115a8 <mem_malloc+0x1e8>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80114d2:	e005      	b.n	80114e0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80114d4:	69bb      	ldr	r3, [r7, #24]
 80114d6:	881b      	ldrh	r3, [r3, #0]
 80114d8:	4618      	mov	r0, r3
 80114da:	f7ff fc87 	bl	8010dec <ptr_to_mem>
 80114de:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80114e0:	69bb      	ldr	r3, [r7, #24]
 80114e2:	791b      	ldrb	r3, [r3, #4]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d004      	beq.n	80114f2 <mem_malloc+0x132>
 80114e8:	4b33      	ldr	r3, [pc, #204]	@ (80115b8 <mem_malloc+0x1f8>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	69ba      	ldr	r2, [r7, #24]
 80114ee:	429a      	cmp	r2, r3
 80114f0:	d1f0      	bne.n	80114d4 <mem_malloc+0x114>
          }
          lfree = cur;
 80114f2:	4a2d      	ldr	r2, [pc, #180]	@ (80115a8 <mem_malloc+0x1e8>)
 80114f4:	69bb      	ldr	r3, [r7, #24]
 80114f6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80114f8:	4b2b      	ldr	r3, [pc, #172]	@ (80115a8 <mem_malloc+0x1e8>)
 80114fa:	681a      	ldr	r2, [r3, #0]
 80114fc:	4b2e      	ldr	r3, [pc, #184]	@ (80115b8 <mem_malloc+0x1f8>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	429a      	cmp	r2, r3
 8011502:	d00b      	beq.n	801151c <mem_malloc+0x15c>
 8011504:	4b28      	ldr	r3, [pc, #160]	@ (80115a8 <mem_malloc+0x1e8>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	791b      	ldrb	r3, [r3, #4]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d006      	beq.n	801151c <mem_malloc+0x15c>
 801150e:	4b27      	ldr	r3, [pc, #156]	@ (80115ac <mem_malloc+0x1ec>)
 8011510:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8011514:	4929      	ldr	r1, [pc, #164]	@ (80115bc <mem_malloc+0x1fc>)
 8011516:	4827      	ldr	r0, [pc, #156]	@ (80115b4 <mem_malloc+0x1f4>)
 8011518:	f00a fea4 	bl	801c264 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801151c:	4821      	ldr	r0, [pc, #132]	@ (80115a4 <mem_malloc+0x1e4>)
 801151e:	f009 fdee 	bl	801b0fe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011522:	8bba      	ldrh	r2, [r7, #28]
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	4413      	add	r3, r2
 8011528:	3308      	adds	r3, #8
 801152a:	4a23      	ldr	r2, [pc, #140]	@ (80115b8 <mem_malloc+0x1f8>)
 801152c:	6812      	ldr	r2, [r2, #0]
 801152e:	4293      	cmp	r3, r2
 8011530:	d906      	bls.n	8011540 <mem_malloc+0x180>
 8011532:	4b1e      	ldr	r3, [pc, #120]	@ (80115ac <mem_malloc+0x1ec>)
 8011534:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8011538:	4921      	ldr	r1, [pc, #132]	@ (80115c0 <mem_malloc+0x200>)
 801153a:	481e      	ldr	r0, [pc, #120]	@ (80115b4 <mem_malloc+0x1f4>)
 801153c:	f00a fe92 	bl	801c264 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	f003 0303 	and.w	r3, r3, #3
 8011546:	2b00      	cmp	r3, #0
 8011548:	d006      	beq.n	8011558 <mem_malloc+0x198>
 801154a:	4b18      	ldr	r3, [pc, #96]	@ (80115ac <mem_malloc+0x1ec>)
 801154c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8011550:	491c      	ldr	r1, [pc, #112]	@ (80115c4 <mem_malloc+0x204>)
 8011552:	4818      	ldr	r0, [pc, #96]	@ (80115b4 <mem_malloc+0x1f4>)
 8011554:	f00a fe86 	bl	801c264 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	f003 0303 	and.w	r3, r3, #3
 801155e:	2b00      	cmp	r3, #0
 8011560:	d006      	beq.n	8011570 <mem_malloc+0x1b0>
 8011562:	4b12      	ldr	r3, [pc, #72]	@ (80115ac <mem_malloc+0x1ec>)
 8011564:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8011568:	4917      	ldr	r1, [pc, #92]	@ (80115c8 <mem_malloc+0x208>)
 801156a:	4812      	ldr	r0, [pc, #72]	@ (80115b4 <mem_malloc+0x1f4>)
 801156c:	f00a fe7a 	bl	801c264 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	3308      	adds	r3, #8
 8011574:	e011      	b.n	801159a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011576:	8bfb      	ldrh	r3, [r7, #30]
 8011578:	4618      	mov	r0, r3
 801157a:	f7ff fc37 	bl	8010dec <ptr_to_mem>
 801157e:	4603      	mov	r3, r0
 8011580:	881b      	ldrh	r3, [r3, #0]
 8011582:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011584:	8bfa      	ldrh	r2, [r7, #30]
 8011586:	8bbb      	ldrh	r3, [r7, #28]
 8011588:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 801158c:	429a      	cmp	r2, r3
 801158e:	f4ff af41 	bcc.w	8011414 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011592:	4804      	ldr	r0, [pc, #16]	@ (80115a4 <mem_malloc+0x1e4>)
 8011594:	f009 fdb3 	bl	801b0fe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011598:	2300      	movs	r3, #0
}
 801159a:	4618      	mov	r0, r3
 801159c:	3720      	adds	r7, #32
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	2002449c 	.word	0x2002449c
 80115a8:	200244a0 	.word	0x200244a0
 80115ac:	0801d5d4 	.word	0x0801d5d4
 80115b0:	0801d798 	.word	0x0801d798
 80115b4:	0801d61c 	.word	0x0801d61c
 80115b8:	20024498 	.word	0x20024498
 80115bc:	0801d7ac 	.word	0x0801d7ac
 80115c0:	0801d7c8 	.word	0x0801d7c8
 80115c4:	0801d7f8 	.word	0x0801d7f8
 80115c8:	0801d828 	.word	0x0801d828

080115cc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80115cc:	b480      	push	{r7}
 80115ce:	b085      	sub	sp, #20
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	689b      	ldr	r3, [r3, #8]
 80115d8:	2200      	movs	r2, #0
 80115da:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	685b      	ldr	r3, [r3, #4]
 80115e0:	3303      	adds	r3, #3
 80115e2:	f023 0303 	bic.w	r3, r3, #3
 80115e6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80115e8:	2300      	movs	r3, #0
 80115ea:	60fb      	str	r3, [r7, #12]
 80115ec:	e011      	b.n	8011612 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	689b      	ldr	r3, [r3, #8]
 80115f2:	681a      	ldr	r2, [r3, #0]
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	689b      	ldr	r3, [r3, #8]
 80115fc:	68ba      	ldr	r2, [r7, #8]
 80115fe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	881b      	ldrh	r3, [r3, #0]
 8011604:	461a      	mov	r2, r3
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	4413      	add	r3, r2
 801160a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	3301      	adds	r3, #1
 8011610:	60fb      	str	r3, [r7, #12]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	885b      	ldrh	r3, [r3, #2]
 8011616:	461a      	mov	r2, r3
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	4293      	cmp	r3, r2
 801161c:	dbe7      	blt.n	80115ee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801161e:	bf00      	nop
 8011620:	bf00      	nop
 8011622:	3714      	adds	r7, #20
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr

0801162c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b082      	sub	sp, #8
 8011630:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011632:	2300      	movs	r3, #0
 8011634:	80fb      	strh	r3, [r7, #6]
 8011636:	e009      	b.n	801164c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011638:	88fb      	ldrh	r3, [r7, #6]
 801163a:	4a08      	ldr	r2, [pc, #32]	@ (801165c <memp_init+0x30>)
 801163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011640:	4618      	mov	r0, r3
 8011642:	f7ff ffc3 	bl	80115cc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011646:	88fb      	ldrh	r3, [r7, #6]
 8011648:	3301      	adds	r3, #1
 801164a:	80fb      	strh	r3, [r7, #6]
 801164c:	88fb      	ldrh	r3, [r7, #6]
 801164e:	2b0c      	cmp	r3, #12
 8011650:	d9f2      	bls.n	8011638 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011652:	bf00      	nop
 8011654:	bf00      	nop
 8011656:	3708      	adds	r7, #8
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}
 801165c:	080206a4 	.word	0x080206a4

08011660 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b084      	sub	sp, #16
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011668:	f009 fd76 	bl	801b158 <sys_arch_protect>
 801166c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	689b      	ldr	r3, [r3, #8]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d015      	beq.n	80116a8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	689b      	ldr	r3, [r3, #8]
 8011680:	68ba      	ldr	r2, [r7, #8]
 8011682:	6812      	ldr	r2, [r2, #0]
 8011684:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011686:	68bb      	ldr	r3, [r7, #8]
 8011688:	f003 0303 	and.w	r3, r3, #3
 801168c:	2b00      	cmp	r3, #0
 801168e:	d006      	beq.n	801169e <do_memp_malloc_pool+0x3e>
 8011690:	4b09      	ldr	r3, [pc, #36]	@ (80116b8 <do_memp_malloc_pool+0x58>)
 8011692:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8011696:	4909      	ldr	r1, [pc, #36]	@ (80116bc <do_memp_malloc_pool+0x5c>)
 8011698:	4809      	ldr	r0, [pc, #36]	@ (80116c0 <do_memp_malloc_pool+0x60>)
 801169a:	f00a fde3 	bl	801c264 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801169e:	68f8      	ldr	r0, [r7, #12]
 80116a0:	f009 fd68 	bl	801b174 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	e003      	b.n	80116b0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80116a8:	68f8      	ldr	r0, [r7, #12]
 80116aa:	f009 fd63 	bl	801b174 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80116ae:	2300      	movs	r3, #0
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3710      	adds	r7, #16
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	0801d84c 	.word	0x0801d84c
 80116bc:	0801d87c 	.word	0x0801d87c
 80116c0:	0801d8a0 	.word	0x0801d8a0

080116c4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b082      	sub	sp, #8
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d106      	bne.n	80116e0 <memp_malloc_pool+0x1c>
 80116d2:	4b0a      	ldr	r3, [pc, #40]	@ (80116fc <memp_malloc_pool+0x38>)
 80116d4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80116d8:	4909      	ldr	r1, [pc, #36]	@ (8011700 <memp_malloc_pool+0x3c>)
 80116da:	480a      	ldr	r0, [pc, #40]	@ (8011704 <memp_malloc_pool+0x40>)
 80116dc:	f00a fdc2 	bl	801c264 <iprintf>
  if (desc == NULL) {
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d101      	bne.n	80116ea <memp_malloc_pool+0x26>
    return NULL;
 80116e6:	2300      	movs	r3, #0
 80116e8:	e003      	b.n	80116f2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f7ff ffb8 	bl	8011660 <do_memp_malloc_pool>
 80116f0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80116f2:	4618      	mov	r0, r3
 80116f4:	3708      	adds	r7, #8
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}
 80116fa:	bf00      	nop
 80116fc:	0801d84c 	.word	0x0801d84c
 8011700:	0801d8c8 	.word	0x0801d8c8
 8011704:	0801d8a0 	.word	0x0801d8a0

08011708 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b084      	sub	sp, #16
 801170c:	af00      	add	r7, sp, #0
 801170e:	4603      	mov	r3, r0
 8011710:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011712:	79fb      	ldrb	r3, [r7, #7]
 8011714:	2b0c      	cmp	r3, #12
 8011716:	d908      	bls.n	801172a <memp_malloc+0x22>
 8011718:	4b0a      	ldr	r3, [pc, #40]	@ (8011744 <memp_malloc+0x3c>)
 801171a:	f240 1257 	movw	r2, #343	@ 0x157
 801171e:	490a      	ldr	r1, [pc, #40]	@ (8011748 <memp_malloc+0x40>)
 8011720:	480a      	ldr	r0, [pc, #40]	@ (801174c <memp_malloc+0x44>)
 8011722:	f00a fd9f 	bl	801c264 <iprintf>
 8011726:	2300      	movs	r3, #0
 8011728:	e008      	b.n	801173c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801172a:	79fb      	ldrb	r3, [r7, #7]
 801172c:	4a08      	ldr	r2, [pc, #32]	@ (8011750 <memp_malloc+0x48>)
 801172e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011732:	4618      	mov	r0, r3
 8011734:	f7ff ff94 	bl	8011660 <do_memp_malloc_pool>
 8011738:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801173a:	68fb      	ldr	r3, [r7, #12]
}
 801173c:	4618      	mov	r0, r3
 801173e:	3710      	adds	r7, #16
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	0801d84c 	.word	0x0801d84c
 8011748:	0801d8dc 	.word	0x0801d8dc
 801174c:	0801d8a0 	.word	0x0801d8a0
 8011750:	080206a4 	.word	0x080206a4

08011754 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b084      	sub	sp, #16
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801175e:	683b      	ldr	r3, [r7, #0]
 8011760:	f003 0303 	and.w	r3, r3, #3
 8011764:	2b00      	cmp	r3, #0
 8011766:	d006      	beq.n	8011776 <do_memp_free_pool+0x22>
 8011768:	4b0d      	ldr	r3, [pc, #52]	@ (80117a0 <do_memp_free_pool+0x4c>)
 801176a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801176e:	490d      	ldr	r1, [pc, #52]	@ (80117a4 <do_memp_free_pool+0x50>)
 8011770:	480d      	ldr	r0, [pc, #52]	@ (80117a8 <do_memp_free_pool+0x54>)
 8011772:	f00a fd77 	bl	801c264 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801177a:	f009 fced 	bl	801b158 <sys_arch_protect>
 801177e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	689b      	ldr	r3, [r3, #8]
 8011784:	681a      	ldr	r2, [r3, #0]
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	689b      	ldr	r3, [r3, #8]
 801178e:	68fa      	ldr	r2, [r7, #12]
 8011790:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011792:	68b8      	ldr	r0, [r7, #8]
 8011794:	f009 fcee 	bl	801b174 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8011798:	bf00      	nop
 801179a:	3710      	adds	r7, #16
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}
 80117a0:	0801d84c 	.word	0x0801d84c
 80117a4:	0801d8fc 	.word	0x0801d8fc
 80117a8:	0801d8a0 	.word	0x0801d8a0

080117ac <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b082      	sub	sp, #8
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
 80117b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d106      	bne.n	80117ca <memp_free_pool+0x1e>
 80117bc:	4b0a      	ldr	r3, [pc, #40]	@ (80117e8 <memp_free_pool+0x3c>)
 80117be:	f240 1295 	movw	r2, #405	@ 0x195
 80117c2:	490a      	ldr	r1, [pc, #40]	@ (80117ec <memp_free_pool+0x40>)
 80117c4:	480a      	ldr	r0, [pc, #40]	@ (80117f0 <memp_free_pool+0x44>)
 80117c6:	f00a fd4d 	bl	801c264 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d007      	beq.n	80117e0 <memp_free_pool+0x34>
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d004      	beq.n	80117e0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80117d6:	6839      	ldr	r1, [r7, #0]
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f7ff ffbb 	bl	8011754 <do_memp_free_pool>
 80117de:	e000      	b.n	80117e2 <memp_free_pool+0x36>
    return;
 80117e0:	bf00      	nop
}
 80117e2:	3708      	adds	r7, #8
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}
 80117e8:	0801d84c 	.word	0x0801d84c
 80117ec:	0801d8c8 	.word	0x0801d8c8
 80117f0:	0801d8a0 	.word	0x0801d8a0

080117f4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b082      	sub	sp, #8
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	4603      	mov	r3, r0
 80117fc:	6039      	str	r1, [r7, #0]
 80117fe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011800:	79fb      	ldrb	r3, [r7, #7]
 8011802:	2b0c      	cmp	r3, #12
 8011804:	d907      	bls.n	8011816 <memp_free+0x22>
 8011806:	4b0c      	ldr	r3, [pc, #48]	@ (8011838 <memp_free+0x44>)
 8011808:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 801180c:	490b      	ldr	r1, [pc, #44]	@ (801183c <memp_free+0x48>)
 801180e:	480c      	ldr	r0, [pc, #48]	@ (8011840 <memp_free+0x4c>)
 8011810:	f00a fd28 	bl	801c264 <iprintf>
 8011814:	e00c      	b.n	8011830 <memp_free+0x3c>

  if (mem == NULL) {
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d008      	beq.n	801182e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801181c:	79fb      	ldrb	r3, [r7, #7]
 801181e:	4a09      	ldr	r2, [pc, #36]	@ (8011844 <memp_free+0x50>)
 8011820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011824:	6839      	ldr	r1, [r7, #0]
 8011826:	4618      	mov	r0, r3
 8011828:	f7ff ff94 	bl	8011754 <do_memp_free_pool>
 801182c:	e000      	b.n	8011830 <memp_free+0x3c>
    return;
 801182e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011830:	3708      	adds	r7, #8
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
 8011836:	bf00      	nop
 8011838:	0801d84c 	.word	0x0801d84c
 801183c:	0801d91c 	.word	0x0801d91c
 8011840:	0801d8a0 	.word	0x0801d8a0
 8011844:	080206a4 	.word	0x080206a4

08011848 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011848:	b480      	push	{r7}
 801184a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801184c:	bf00      	nop
 801184e:	46bd      	mov	sp, r7
 8011850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011854:	4770      	bx	lr
	...

08011858 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b086      	sub	sp, #24
 801185c:	af00      	add	r7, sp, #0
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	607a      	str	r2, [r7, #4]
 8011864:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d108      	bne.n	801187e <netif_add+0x26>
 801186c:	4b57      	ldr	r3, [pc, #348]	@ (80119cc <netif_add+0x174>)
 801186e:	f240 1227 	movw	r2, #295	@ 0x127
 8011872:	4957      	ldr	r1, [pc, #348]	@ (80119d0 <netif_add+0x178>)
 8011874:	4857      	ldr	r0, [pc, #348]	@ (80119d4 <netif_add+0x17c>)
 8011876:	f00a fcf5 	bl	801c264 <iprintf>
 801187a:	2300      	movs	r3, #0
 801187c:	e0a2      	b.n	80119c4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011880:	2b00      	cmp	r3, #0
 8011882:	d108      	bne.n	8011896 <netif_add+0x3e>
 8011884:	4b51      	ldr	r3, [pc, #324]	@ (80119cc <netif_add+0x174>)
 8011886:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801188a:	4953      	ldr	r1, [pc, #332]	@ (80119d8 <netif_add+0x180>)
 801188c:	4851      	ldr	r0, [pc, #324]	@ (80119d4 <netif_add+0x17c>)
 801188e:	f00a fce9 	bl	801c264 <iprintf>
 8011892:	2300      	movs	r3, #0
 8011894:	e096      	b.n	80119c4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8011896:	68bb      	ldr	r3, [r7, #8]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d101      	bne.n	80118a0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801189c:	4b4f      	ldr	r3, [pc, #316]	@ (80119dc <netif_add+0x184>)
 801189e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d101      	bne.n	80118aa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80118a6:	4b4d      	ldr	r3, [pc, #308]	@ (80119dc <netif_add+0x184>)
 80118a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d101      	bne.n	80118b4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80118b0:	4b4a      	ldr	r3, [pc, #296]	@ (80119dc <netif_add+0x184>)
 80118b2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	2200      	movs	r2, #0
 80118b8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	2200      	movs	r2, #0
 80118be:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2200      	movs	r2, #0
 80118c4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	4a45      	ldr	r2, [pc, #276]	@ (80119e0 <netif_add+0x188>)
 80118ca:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	2200      	movs	r2, #0
 80118d0:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	2200      	movs	r2, #0
 80118d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	2200      	movs	r2, #0
 80118de:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	6a3a      	ldr	r2, [r7, #32]
 80118e4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80118e6:	4b3f      	ldr	r3, [pc, #252]	@ (80119e4 <netif_add+0x18c>)
 80118e8:	781a      	ldrb	r2, [r3, #0]
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80118f4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	687a      	ldr	r2, [r7, #4]
 80118fa:	68b9      	ldr	r1, [r7, #8]
 80118fc:	68f8      	ldr	r0, [r7, #12]
 80118fe:	f000 f913 	bl	8011b28 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011904:	68f8      	ldr	r0, [r7, #12]
 8011906:	4798      	blx	r3
 8011908:	4603      	mov	r3, r0
 801190a:	2b00      	cmp	r3, #0
 801190c:	d001      	beq.n	8011912 <netif_add+0xba>
    return NULL;
 801190e:	2300      	movs	r3, #0
 8011910:	e058      	b.n	80119c4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011918:	2bff      	cmp	r3, #255	@ 0xff
 801191a:	d103      	bne.n	8011924 <netif_add+0xcc>
        netif->num = 0;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	2200      	movs	r2, #0
 8011920:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8011924:	2300      	movs	r3, #0
 8011926:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011928:	4b2f      	ldr	r3, [pc, #188]	@ (80119e8 <netif_add+0x190>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	617b      	str	r3, [r7, #20]
 801192e:	e02b      	b.n	8011988 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011930:	697a      	ldr	r2, [r7, #20]
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	429a      	cmp	r2, r3
 8011936:	d106      	bne.n	8011946 <netif_add+0xee>
 8011938:	4b24      	ldr	r3, [pc, #144]	@ (80119cc <netif_add+0x174>)
 801193a:	f240 128b 	movw	r2, #395	@ 0x18b
 801193e:	492b      	ldr	r1, [pc, #172]	@ (80119ec <netif_add+0x194>)
 8011940:	4824      	ldr	r0, [pc, #144]	@ (80119d4 <netif_add+0x17c>)
 8011942:	f00a fc8f 	bl	801c264 <iprintf>
        num_netifs++;
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	3301      	adds	r3, #1
 801194a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	2bff      	cmp	r3, #255	@ 0xff
 8011950:	dd06      	ble.n	8011960 <netif_add+0x108>
 8011952:	4b1e      	ldr	r3, [pc, #120]	@ (80119cc <netif_add+0x174>)
 8011954:	f240 128d 	movw	r2, #397	@ 0x18d
 8011958:	4925      	ldr	r1, [pc, #148]	@ (80119f0 <netif_add+0x198>)
 801195a:	481e      	ldr	r0, [pc, #120]	@ (80119d4 <netif_add+0x17c>)
 801195c:	f00a fc82 	bl	801c264 <iprintf>
        if (netif2->num == netif->num) {
 8011960:	697b      	ldr	r3, [r7, #20]
 8011962:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801196c:	429a      	cmp	r2, r3
 801196e:	d108      	bne.n	8011982 <netif_add+0x12a>
          netif->num++;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011976:	3301      	adds	r3, #1
 8011978:	b2da      	uxtb	r2, r3
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8011980:	e005      	b.n	801198e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	617b      	str	r3, [r7, #20]
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d1d0      	bne.n	8011930 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d1be      	bne.n	8011912 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801199a:	2bfe      	cmp	r3, #254	@ 0xfe
 801199c:	d103      	bne.n	80119a6 <netif_add+0x14e>
    netif_num = 0;
 801199e:	4b11      	ldr	r3, [pc, #68]	@ (80119e4 <netif_add+0x18c>)
 80119a0:	2200      	movs	r2, #0
 80119a2:	701a      	strb	r2, [r3, #0]
 80119a4:	e006      	b.n	80119b4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80119ac:	3301      	adds	r3, #1
 80119ae:	b2da      	uxtb	r2, r3
 80119b0:	4b0c      	ldr	r3, [pc, #48]	@ (80119e4 <netif_add+0x18c>)
 80119b2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80119b4:	4b0c      	ldr	r3, [pc, #48]	@ (80119e8 <netif_add+0x190>)
 80119b6:	681a      	ldr	r2, [r3, #0]
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80119bc:	4a0a      	ldr	r2, [pc, #40]	@ (80119e8 <netif_add+0x190>)
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80119c2:	68fb      	ldr	r3, [r7, #12]
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3718      	adds	r7, #24
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}
 80119cc:	0801d938 	.word	0x0801d938
 80119d0:	0801d9cc 	.word	0x0801d9cc
 80119d4:	0801d988 	.word	0x0801d988
 80119d8:	0801d9e8 	.word	0x0801d9e8
 80119dc:	08020718 	.word	0x08020718
 80119e0:	08011e03 	.word	0x08011e03
 80119e4:	20027578 	.word	0x20027578
 80119e8:	20027570 	.word	0x20027570
 80119ec:	0801da0c 	.word	0x0801da0c
 80119f0:	0801da20 	.word	0x0801da20

080119f4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b082      	sub	sp, #8
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80119fe:	6839      	ldr	r1, [r7, #0]
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f002 fb8f 	bl	8014124 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8011a06:	6839      	ldr	r1, [r7, #0]
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f006 ff4b 	bl	80188a4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011a0e:	bf00      	nop
 8011a10:	3708      	adds	r7, #8
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
	...

08011a18 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b086      	sub	sp, #24
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	60f8      	str	r0, [r7, #12]
 8011a20:	60b9      	str	r1, [r7, #8]
 8011a22:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d106      	bne.n	8011a38 <netif_do_set_ipaddr+0x20>
 8011a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8011aa0 <netif_do_set_ipaddr+0x88>)
 8011a2c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8011a30:	491c      	ldr	r1, [pc, #112]	@ (8011aa4 <netif_do_set_ipaddr+0x8c>)
 8011a32:	481d      	ldr	r0, [pc, #116]	@ (8011aa8 <netif_do_set_ipaddr+0x90>)
 8011a34:	f00a fc16 	bl	801c264 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d106      	bne.n	8011a4c <netif_do_set_ipaddr+0x34>
 8011a3e:	4b18      	ldr	r3, [pc, #96]	@ (8011aa0 <netif_do_set_ipaddr+0x88>)
 8011a40:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8011a44:	4917      	ldr	r1, [pc, #92]	@ (8011aa4 <netif_do_set_ipaddr+0x8c>)
 8011a46:	4818      	ldr	r0, [pc, #96]	@ (8011aa8 <netif_do_set_ipaddr+0x90>)
 8011a48:	f00a fc0c 	bl	801c264 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	3304      	adds	r3, #4
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d01c      	beq.n	8011a94 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	3304      	adds	r3, #4
 8011a64:	681a      	ldr	r2, [r3, #0]
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011a6a:	f107 0314 	add.w	r3, r7, #20
 8011a6e:	4619      	mov	r1, r3
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f7ff ffbf 	bl	80119f4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d002      	beq.n	8011a82 <netif_do_set_ipaddr+0x6a>
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	e000      	b.n	8011a84 <netif_do_set_ipaddr+0x6c>
 8011a82:	2300      	movs	r3, #0
 8011a84:	68fa      	ldr	r2, [r7, #12]
 8011a86:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011a88:	2101      	movs	r1, #1
 8011a8a:	68f8      	ldr	r0, [r7, #12]
 8011a8c:	f000 f8d2 	bl	8011c34 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011a90:	2301      	movs	r3, #1
 8011a92:	e000      	b.n	8011a96 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011a94:	2300      	movs	r3, #0
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3718      	adds	r7, #24
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
 8011a9e:	bf00      	nop
 8011aa0:	0801d938 	.word	0x0801d938
 8011aa4:	0801da50 	.word	0x0801da50
 8011aa8:	0801d988 	.word	0x0801d988

08011aac <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011aac:	b480      	push	{r7}
 8011aae:	b085      	sub	sp, #20
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	60f8      	str	r0, [r7, #12]
 8011ab4:	60b9      	str	r1, [r7, #8]
 8011ab6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	681a      	ldr	r2, [r3, #0]
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	3308      	adds	r3, #8
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d00a      	beq.n	8011adc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d002      	beq.n	8011ad2 <netif_do_set_netmask+0x26>
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	e000      	b.n	8011ad4 <netif_do_set_netmask+0x28>
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	68fa      	ldr	r2, [r7, #12]
 8011ad6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011ad8:	2301      	movs	r3, #1
 8011ada:	e000      	b.n	8011ade <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011adc:	2300      	movs	r3, #0
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3714      	adds	r7, #20
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae8:	4770      	bx	lr

08011aea <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011aea:	b480      	push	{r7}
 8011aec:	b085      	sub	sp, #20
 8011aee:	af00      	add	r7, sp, #0
 8011af0:	60f8      	str	r0, [r7, #12]
 8011af2:	60b9      	str	r1, [r7, #8]
 8011af4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	681a      	ldr	r2, [r3, #0]
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	330c      	adds	r3, #12
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	429a      	cmp	r2, r3
 8011b02:	d00a      	beq.n	8011b1a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d002      	beq.n	8011b10 <netif_do_set_gw+0x26>
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	e000      	b.n	8011b12 <netif_do_set_gw+0x28>
 8011b10:	2300      	movs	r3, #0
 8011b12:	68fa      	ldr	r2, [r7, #12]
 8011b14:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8011b16:	2301      	movs	r3, #1
 8011b18:	e000      	b.n	8011b1c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8011b1a:	2300      	movs	r3, #0
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3714      	adds	r7, #20
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr

08011b28 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b088      	sub	sp, #32
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	60f8      	str	r0, [r7, #12]
 8011b30:	60b9      	str	r1, [r7, #8]
 8011b32:	607a      	str	r2, [r7, #4]
 8011b34:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011b36:	2300      	movs	r3, #0
 8011b38:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d101      	bne.n	8011b48 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011b44:	4b1c      	ldr	r3, [pc, #112]	@ (8011bb8 <netif_set_addr+0x90>)
 8011b46:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d101      	bne.n	8011b52 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8011bb8 <netif_set_addr+0x90>)
 8011b50:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d101      	bne.n	8011b5c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011b58:	4b17      	ldr	r3, [pc, #92]	@ (8011bb8 <netif_set_addr+0x90>)
 8011b5a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d003      	beq.n	8011b6a <netif_set_addr+0x42>
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d101      	bne.n	8011b6e <netif_set_addr+0x46>
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	e000      	b.n	8011b70 <netif_set_addr+0x48>
 8011b6e:	2300      	movs	r3, #0
 8011b70:	617b      	str	r3, [r7, #20]
  if (remove) {
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d006      	beq.n	8011b86 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011b78:	f107 0310 	add.w	r3, r7, #16
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	68b9      	ldr	r1, [r7, #8]
 8011b80:	68f8      	ldr	r0, [r7, #12]
 8011b82:	f7ff ff49 	bl	8011a18 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011b86:	69fa      	ldr	r2, [r7, #28]
 8011b88:	6879      	ldr	r1, [r7, #4]
 8011b8a:	68f8      	ldr	r0, [r7, #12]
 8011b8c:	f7ff ff8e 	bl	8011aac <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8011b90:	69ba      	ldr	r2, [r7, #24]
 8011b92:	6839      	ldr	r1, [r7, #0]
 8011b94:	68f8      	ldr	r0, [r7, #12]
 8011b96:	f7ff ffa8 	bl	8011aea <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011b9a:	697b      	ldr	r3, [r7, #20]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d106      	bne.n	8011bae <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011ba0:	f107 0310 	add.w	r3, r7, #16
 8011ba4:	461a      	mov	r2, r3
 8011ba6:	68b9      	ldr	r1, [r7, #8]
 8011ba8:	68f8      	ldr	r0, [r7, #12]
 8011baa:	f7ff ff35 	bl	8011a18 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011bae:	bf00      	nop
 8011bb0:	3720      	adds	r7, #32
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	08020718 	.word	0x08020718

08011bbc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b083      	sub	sp, #12
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011bc4:	4a04      	ldr	r2, [pc, #16]	@ (8011bd8 <netif_set_default+0x1c>)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011bca:	bf00      	nop
 8011bcc:	370c      	adds	r7, #12
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd4:	4770      	bx	lr
 8011bd6:	bf00      	nop
 8011bd8:	20027574 	.word	0x20027574

08011bdc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d107      	bne.n	8011bfa <netif_set_up+0x1e>
 8011bea:	4b0f      	ldr	r3, [pc, #60]	@ (8011c28 <netif_set_up+0x4c>)
 8011bec:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8011bf0:	490e      	ldr	r1, [pc, #56]	@ (8011c2c <netif_set_up+0x50>)
 8011bf2:	480f      	ldr	r0, [pc, #60]	@ (8011c30 <netif_set_up+0x54>)
 8011bf4:	f00a fb36 	bl	801c264 <iprintf>
 8011bf8:	e013      	b.n	8011c22 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011c00:	f003 0301 	and.w	r3, r3, #1
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d10c      	bne.n	8011c22 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011c0e:	f043 0301 	orr.w	r3, r3, #1
 8011c12:	b2da      	uxtb	r2, r3
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011c1a:	2103      	movs	r1, #3
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f000 f809 	bl	8011c34 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011c22:	3708      	adds	r7, #8
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}
 8011c28:	0801d938 	.word	0x0801d938
 8011c2c:	0801dac0 	.word	0x0801dac0
 8011c30:	0801d988 	.word	0x0801d988

08011c34 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b082      	sub	sp, #8
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	460b      	mov	r3, r1
 8011c3e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d106      	bne.n	8011c54 <netif_issue_reports+0x20>
 8011c46:	4b18      	ldr	r3, [pc, #96]	@ (8011ca8 <netif_issue_reports+0x74>)
 8011c48:	f240 326d 	movw	r2, #877	@ 0x36d
 8011c4c:	4917      	ldr	r1, [pc, #92]	@ (8011cac <netif_issue_reports+0x78>)
 8011c4e:	4818      	ldr	r0, [pc, #96]	@ (8011cb0 <netif_issue_reports+0x7c>)
 8011c50:	f00a fb08 	bl	801c264 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011c5a:	f003 0304 	and.w	r3, r3, #4
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d01e      	beq.n	8011ca0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011c68:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d017      	beq.n	8011ca0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011c70:	78fb      	ldrb	r3, [r7, #3]
 8011c72:	f003 0301 	and.w	r3, r3, #1
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d013      	beq.n	8011ca2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	3304      	adds	r3, #4
 8011c7e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d00e      	beq.n	8011ca2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011c8a:	f003 0308 	and.w	r3, r3, #8
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d007      	beq.n	8011ca2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	3304      	adds	r3, #4
 8011c96:	4619      	mov	r1, r3
 8011c98:	6878      	ldr	r0, [r7, #4]
 8011c9a:	f007 fd6d 	bl	8019778 <etharp_request>
 8011c9e:	e000      	b.n	8011ca2 <netif_issue_reports+0x6e>
    return;
 8011ca0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011ca2:	3708      	adds	r7, #8
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	0801d938 	.word	0x0801d938
 8011cac:	0801dadc 	.word	0x0801dadc
 8011cb0:	0801d988 	.word	0x0801d988

08011cb4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d107      	bne.n	8011cd2 <netif_set_down+0x1e>
 8011cc2:	4b12      	ldr	r3, [pc, #72]	@ (8011d0c <netif_set_down+0x58>)
 8011cc4:	f240 329b 	movw	r2, #923	@ 0x39b
 8011cc8:	4911      	ldr	r1, [pc, #68]	@ (8011d10 <netif_set_down+0x5c>)
 8011cca:	4812      	ldr	r0, [pc, #72]	@ (8011d14 <netif_set_down+0x60>)
 8011ccc:	f00a faca 	bl	801c264 <iprintf>
 8011cd0:	e019      	b.n	8011d06 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011cd8:	f003 0301 	and.w	r3, r3, #1
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d012      	beq.n	8011d06 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011ce6:	f023 0301 	bic.w	r3, r3, #1
 8011cea:	b2da      	uxtb	r2, r3
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011cf8:	f003 0308 	and.w	r3, r3, #8
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d002      	beq.n	8011d06 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f007 f8f7 	bl	8018ef4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011d06:	3708      	adds	r7, #8
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}
 8011d0c:	0801d938 	.word	0x0801d938
 8011d10:	0801db00 	.word	0x0801db00
 8011d14:	0801d988 	.word	0x0801d988

08011d18 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b082      	sub	sp, #8
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d107      	bne.n	8011d36 <netif_set_link_up+0x1e>
 8011d26:	4b13      	ldr	r3, [pc, #76]	@ (8011d74 <netif_set_link_up+0x5c>)
 8011d28:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8011d2c:	4912      	ldr	r1, [pc, #72]	@ (8011d78 <netif_set_link_up+0x60>)
 8011d2e:	4813      	ldr	r0, [pc, #76]	@ (8011d7c <netif_set_link_up+0x64>)
 8011d30:	f00a fa98 	bl	801c264 <iprintf>
 8011d34:	e01b      	b.n	8011d6e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011d3c:	f003 0304 	and.w	r3, r3, #4
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d114      	bne.n	8011d6e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011d4a:	f043 0304 	orr.w	r3, r3, #4
 8011d4e:	b2da      	uxtb	r2, r3
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011d56:	2103      	movs	r1, #3
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f7ff ff6b 	bl	8011c34 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	69db      	ldr	r3, [r3, #28]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d003      	beq.n	8011d6e <netif_set_link_up+0x56>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	69db      	ldr	r3, [r3, #28]
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011d6e:	3708      	adds	r7, #8
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}
 8011d74:	0801d938 	.word	0x0801d938
 8011d78:	0801db20 	.word	0x0801db20
 8011d7c:	0801d988 	.word	0x0801d988

08011d80 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b082      	sub	sp, #8
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d107      	bne.n	8011d9e <netif_set_link_down+0x1e>
 8011d8e:	4b11      	ldr	r3, [pc, #68]	@ (8011dd4 <netif_set_link_down+0x54>)
 8011d90:	f240 4206 	movw	r2, #1030	@ 0x406
 8011d94:	4910      	ldr	r1, [pc, #64]	@ (8011dd8 <netif_set_link_down+0x58>)
 8011d96:	4811      	ldr	r0, [pc, #68]	@ (8011ddc <netif_set_link_down+0x5c>)
 8011d98:	f00a fa64 	bl	801c264 <iprintf>
 8011d9c:	e017      	b.n	8011dce <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011da4:	f003 0304 	and.w	r3, r3, #4
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d010      	beq.n	8011dce <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011db2:	f023 0304 	bic.w	r3, r3, #4
 8011db6:	b2da      	uxtb	r2, r3
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	69db      	ldr	r3, [r3, #28]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d003      	beq.n	8011dce <netif_set_link_down+0x4e>
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	69db      	ldr	r3, [r3, #28]
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011dce:	3708      	adds	r7, #8
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}
 8011dd4:	0801d938 	.word	0x0801d938
 8011dd8:	0801db44 	.word	0x0801db44
 8011ddc:	0801d988 	.word	0x0801d988

08011de0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011de0:	b480      	push	{r7}
 8011de2:	b083      	sub	sp, #12
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d002      	beq.n	8011df6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	683a      	ldr	r2, [r7, #0]
 8011df4:	61da      	str	r2, [r3, #28]
  }
}
 8011df6:	bf00      	nop
 8011df8:	370c      	adds	r7, #12
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e00:	4770      	bx	lr

08011e02 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011e02:	b480      	push	{r7}
 8011e04:	b085      	sub	sp, #20
 8011e06:	af00      	add	r7, sp, #0
 8011e08:	60f8      	str	r0, [r7, #12]
 8011e0a:	60b9      	str	r1, [r7, #8]
 8011e0c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011e0e:	f06f 030b 	mvn.w	r3, #11
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3714      	adds	r7, #20
 8011e16:	46bd      	mov	sp, r7
 8011e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1c:	4770      	bx	lr
	...

08011e20 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011e20:	b480      	push	{r7}
 8011e22:	b085      	sub	sp, #20
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	4603      	mov	r3, r0
 8011e28:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011e2a:	79fb      	ldrb	r3, [r7, #7]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d013      	beq.n	8011e58 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011e30:	4b0d      	ldr	r3, [pc, #52]	@ (8011e68 <netif_get_by_index+0x48>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	60fb      	str	r3, [r7, #12]
 8011e36:	e00c      	b.n	8011e52 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011e3e:	3301      	adds	r3, #1
 8011e40:	b2db      	uxtb	r3, r3
 8011e42:	79fa      	ldrb	r2, [r7, #7]
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d101      	bne.n	8011e4c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	e006      	b.n	8011e5a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	60fb      	str	r3, [r7, #12]
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d1ef      	bne.n	8011e38 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011e58:	2300      	movs	r3, #0
}
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	3714      	adds	r7, #20
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e64:	4770      	bx	lr
 8011e66:	bf00      	nop
 8011e68:	20027570 	.word	0x20027570

08011e6c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b082      	sub	sp, #8
 8011e70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8011e72:	f009 f971 	bl	801b158 <sys_arch_protect>
 8011e76:	6038      	str	r0, [r7, #0]
 8011e78:	4b0d      	ldr	r3, [pc, #52]	@ (8011eb0 <pbuf_free_ooseq+0x44>)
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	701a      	strb	r2, [r3, #0]
 8011e7e:	6838      	ldr	r0, [r7, #0]
 8011e80:	f009 f978 	bl	801b174 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011e84:	4b0b      	ldr	r3, [pc, #44]	@ (8011eb4 <pbuf_free_ooseq+0x48>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	607b      	str	r3, [r7, #4]
 8011e8a:	e00a      	b.n	8011ea2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d003      	beq.n	8011e9c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f002 f983 	bl	80141a0 <tcp_free_ooseq>
      return;
 8011e9a:	e005      	b.n	8011ea8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	68db      	ldr	r3, [r3, #12]
 8011ea0:	607b      	str	r3, [r7, #4]
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d1f1      	bne.n	8011e8c <pbuf_free_ooseq+0x20>
    }
  }
}
 8011ea8:	3708      	adds	r7, #8
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}
 8011eae:	bf00      	nop
 8011eb0:	20027579 	.word	0x20027579
 8011eb4:	20027588 	.word	0x20027588

08011eb8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b082      	sub	sp, #8
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8011ec0:	f7ff ffd4 	bl	8011e6c <pbuf_free_ooseq>
}
 8011ec4:	bf00      	nop
 8011ec6:	3708      	adds	r7, #8
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}

08011ecc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b082      	sub	sp, #8
 8011ed0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8011ed2:	f009 f941 	bl	801b158 <sys_arch_protect>
 8011ed6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8011f18 <pbuf_pool_is_empty+0x4c>)
 8011eda:	781b      	ldrb	r3, [r3, #0]
 8011edc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8011ede:	4b0e      	ldr	r3, [pc, #56]	@ (8011f18 <pbuf_pool_is_empty+0x4c>)
 8011ee0:	2201      	movs	r2, #1
 8011ee2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f009 f945 	bl	801b174 <sys_arch_unprotect>

  if (!queued) {
 8011eea:	78fb      	ldrb	r3, [r7, #3]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d10f      	bne.n	8011f10 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8011ef0:	2100      	movs	r1, #0
 8011ef2:	480a      	ldr	r0, [pc, #40]	@ (8011f1c <pbuf_pool_is_empty+0x50>)
 8011ef4:	f7fe feaa 	bl	8010c4c <tcpip_try_callback>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d008      	beq.n	8011f10 <pbuf_pool_is_empty+0x44>
 8011efe:	f009 f92b 	bl	801b158 <sys_arch_protect>
 8011f02:	6078      	str	r0, [r7, #4]
 8011f04:	4b04      	ldr	r3, [pc, #16]	@ (8011f18 <pbuf_pool_is_empty+0x4c>)
 8011f06:	2200      	movs	r2, #0
 8011f08:	701a      	strb	r2, [r3, #0]
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	f009 f932 	bl	801b174 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011f10:	bf00      	nop
 8011f12:	3708      	adds	r7, #8
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	20027579 	.word	0x20027579
 8011f1c:	08011eb9 	.word	0x08011eb9

08011f20 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011f20:	b480      	push	{r7}
 8011f22:	b085      	sub	sp, #20
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	60f8      	str	r0, [r7, #12]
 8011f28:	60b9      	str	r1, [r7, #8]
 8011f2a:	4611      	mov	r1, r2
 8011f2c:	461a      	mov	r2, r3
 8011f2e:	460b      	mov	r3, r1
 8011f30:	80fb      	strh	r3, [r7, #6]
 8011f32:	4613      	mov	r3, r2
 8011f34:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	2200      	movs	r2, #0
 8011f3a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	68ba      	ldr	r2, [r7, #8]
 8011f40:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	88fa      	ldrh	r2, [r7, #6]
 8011f46:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	88ba      	ldrh	r2, [r7, #4]
 8011f4c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011f4e:	8b3b      	ldrh	r3, [r7, #24]
 8011f50:	b2da      	uxtb	r2, r3
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	7f3a      	ldrb	r2, [r7, #28]
 8011f5a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	2201      	movs	r2, #1
 8011f60:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	2200      	movs	r2, #0
 8011f66:	73da      	strb	r2, [r3, #15]
}
 8011f68:	bf00      	nop
 8011f6a:	3714      	adds	r7, #20
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f72:	4770      	bx	lr

08011f74 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b08c      	sub	sp, #48	@ 0x30
 8011f78:	af02      	add	r7, sp, #8
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	71fb      	strb	r3, [r7, #7]
 8011f7e:	460b      	mov	r3, r1
 8011f80:	80bb      	strh	r3, [r7, #4]
 8011f82:	4613      	mov	r3, r2
 8011f84:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011f86:	79fb      	ldrb	r3, [r7, #7]
 8011f88:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011f8a:	887b      	ldrh	r3, [r7, #2]
 8011f8c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011f90:	d07f      	beq.n	8012092 <pbuf_alloc+0x11e>
 8011f92:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011f96:	f300 80c8 	bgt.w	801212a <pbuf_alloc+0x1b6>
 8011f9a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011f9e:	d010      	beq.n	8011fc2 <pbuf_alloc+0x4e>
 8011fa0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011fa4:	f300 80c1 	bgt.w	801212a <pbuf_alloc+0x1b6>
 8011fa8:	2b01      	cmp	r3, #1
 8011faa:	d002      	beq.n	8011fb2 <pbuf_alloc+0x3e>
 8011fac:	2b41      	cmp	r3, #65	@ 0x41
 8011fae:	f040 80bc 	bne.w	801212a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011fb2:	887a      	ldrh	r2, [r7, #2]
 8011fb4:	88bb      	ldrh	r3, [r7, #4]
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	2000      	movs	r0, #0
 8011fba:	f000 f8d1 	bl	8012160 <pbuf_alloc_reference>
 8011fbe:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8011fc0:	e0bd      	b.n	801213e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011fca:	88bb      	ldrh	r3, [r7, #4]
 8011fcc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011fce:	200c      	movs	r0, #12
 8011fd0:	f7ff fb9a 	bl	8011708 <memp_malloc>
 8011fd4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d109      	bne.n	8011ff0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011fdc:	f7ff ff76 	bl	8011ecc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d002      	beq.n	8011fec <pbuf_alloc+0x78>
            pbuf_free(p);
 8011fe6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011fe8:	f000 faa8 	bl	801253c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011fec:	2300      	movs	r3, #0
 8011fee:	e0a7      	b.n	8012140 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011ff0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011ff2:	3303      	adds	r3, #3
 8011ff4:	b29b      	uxth	r3, r3
 8011ff6:	f023 0303 	bic.w	r3, r3, #3
 8011ffa:	b29b      	uxth	r3, r3
 8011ffc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8012000:	b29b      	uxth	r3, r3
 8012002:	8b7a      	ldrh	r2, [r7, #26]
 8012004:	4293      	cmp	r3, r2
 8012006:	bf28      	it	cs
 8012008:	4613      	movcs	r3, r2
 801200a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801200c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801200e:	3310      	adds	r3, #16
 8012010:	693a      	ldr	r2, [r7, #16]
 8012012:	4413      	add	r3, r2
 8012014:	3303      	adds	r3, #3
 8012016:	f023 0303 	bic.w	r3, r3, #3
 801201a:	4618      	mov	r0, r3
 801201c:	89f9      	ldrh	r1, [r7, #14]
 801201e:	8b7a      	ldrh	r2, [r7, #26]
 8012020:	2300      	movs	r3, #0
 8012022:	9301      	str	r3, [sp, #4]
 8012024:	887b      	ldrh	r3, [r7, #2]
 8012026:	9300      	str	r3, [sp, #0]
 8012028:	460b      	mov	r3, r1
 801202a:	4601      	mov	r1, r0
 801202c:	6938      	ldr	r0, [r7, #16]
 801202e:	f7ff ff77 	bl	8011f20 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	685b      	ldr	r3, [r3, #4]
 8012036:	f003 0303 	and.w	r3, r3, #3
 801203a:	2b00      	cmp	r3, #0
 801203c:	d006      	beq.n	801204c <pbuf_alloc+0xd8>
 801203e:	4b42      	ldr	r3, [pc, #264]	@ (8012148 <pbuf_alloc+0x1d4>)
 8012040:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012044:	4941      	ldr	r1, [pc, #260]	@ (801214c <pbuf_alloc+0x1d8>)
 8012046:	4842      	ldr	r0, [pc, #264]	@ (8012150 <pbuf_alloc+0x1dc>)
 8012048:	f00a f90c 	bl	801c264 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801204c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801204e:	3303      	adds	r3, #3
 8012050:	f023 0303 	bic.w	r3, r3, #3
 8012054:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8012058:	d106      	bne.n	8012068 <pbuf_alloc+0xf4>
 801205a:	4b3b      	ldr	r3, [pc, #236]	@ (8012148 <pbuf_alloc+0x1d4>)
 801205c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8012060:	493c      	ldr	r1, [pc, #240]	@ (8012154 <pbuf_alloc+0x1e0>)
 8012062:	483b      	ldr	r0, [pc, #236]	@ (8012150 <pbuf_alloc+0x1dc>)
 8012064:	f00a f8fe 	bl	801c264 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801206a:	2b00      	cmp	r3, #0
 801206c:	d102      	bne.n	8012074 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	627b      	str	r3, [r7, #36]	@ 0x24
 8012072:	e002      	b.n	801207a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012074:	69fb      	ldr	r3, [r7, #28]
 8012076:	693a      	ldr	r2, [r7, #16]
 8012078:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801207a:	693b      	ldr	r3, [r7, #16]
 801207c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801207e:	8b7a      	ldrh	r2, [r7, #26]
 8012080:	89fb      	ldrh	r3, [r7, #14]
 8012082:	1ad3      	subs	r3, r2, r3
 8012084:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012086:	2300      	movs	r3, #0
 8012088:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801208a:	8b7b      	ldrh	r3, [r7, #26]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d19e      	bne.n	8011fce <pbuf_alloc+0x5a>
      break;
 8012090:	e055      	b.n	801213e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012092:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012094:	3303      	adds	r3, #3
 8012096:	b29b      	uxth	r3, r3
 8012098:	f023 0303 	bic.w	r3, r3, #3
 801209c:	b29a      	uxth	r2, r3
 801209e:	88bb      	ldrh	r3, [r7, #4]
 80120a0:	3303      	adds	r3, #3
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	f023 0303 	bic.w	r3, r3, #3
 80120a8:	b29b      	uxth	r3, r3
 80120aa:	4413      	add	r3, r2
 80120ac:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80120ae:	8b3b      	ldrh	r3, [r7, #24]
 80120b0:	3310      	adds	r3, #16
 80120b2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80120b4:	8b3a      	ldrh	r2, [r7, #24]
 80120b6:	88bb      	ldrh	r3, [r7, #4]
 80120b8:	3303      	adds	r3, #3
 80120ba:	f023 0303 	bic.w	r3, r3, #3
 80120be:	429a      	cmp	r2, r3
 80120c0:	d306      	bcc.n	80120d0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80120c2:	8afa      	ldrh	r2, [r7, #22]
 80120c4:	88bb      	ldrh	r3, [r7, #4]
 80120c6:	3303      	adds	r3, #3
 80120c8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80120cc:	429a      	cmp	r2, r3
 80120ce:	d201      	bcs.n	80120d4 <pbuf_alloc+0x160>
        return NULL;
 80120d0:	2300      	movs	r3, #0
 80120d2:	e035      	b.n	8012140 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80120d4:	8afb      	ldrh	r3, [r7, #22]
 80120d6:	4618      	mov	r0, r3
 80120d8:	f7ff f972 	bl	80113c0 <mem_malloc>
 80120dc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80120de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d101      	bne.n	80120e8 <pbuf_alloc+0x174>
        return NULL;
 80120e4:	2300      	movs	r3, #0
 80120e6:	e02b      	b.n	8012140 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80120e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80120ea:	3310      	adds	r3, #16
 80120ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120ee:	4413      	add	r3, r2
 80120f0:	3303      	adds	r3, #3
 80120f2:	f023 0303 	bic.w	r3, r3, #3
 80120f6:	4618      	mov	r0, r3
 80120f8:	88b9      	ldrh	r1, [r7, #4]
 80120fa:	88ba      	ldrh	r2, [r7, #4]
 80120fc:	2300      	movs	r3, #0
 80120fe:	9301      	str	r3, [sp, #4]
 8012100:	887b      	ldrh	r3, [r7, #2]
 8012102:	9300      	str	r3, [sp, #0]
 8012104:	460b      	mov	r3, r1
 8012106:	4601      	mov	r1, r0
 8012108:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801210a:	f7ff ff09 	bl	8011f20 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012110:	685b      	ldr	r3, [r3, #4]
 8012112:	f003 0303 	and.w	r3, r3, #3
 8012116:	2b00      	cmp	r3, #0
 8012118:	d010      	beq.n	801213c <pbuf_alloc+0x1c8>
 801211a:	4b0b      	ldr	r3, [pc, #44]	@ (8012148 <pbuf_alloc+0x1d4>)
 801211c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8012120:	490d      	ldr	r1, [pc, #52]	@ (8012158 <pbuf_alloc+0x1e4>)
 8012122:	480b      	ldr	r0, [pc, #44]	@ (8012150 <pbuf_alloc+0x1dc>)
 8012124:	f00a f89e 	bl	801c264 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012128:	e008      	b.n	801213c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801212a:	4b07      	ldr	r3, [pc, #28]	@ (8012148 <pbuf_alloc+0x1d4>)
 801212c:	f240 1227 	movw	r2, #295	@ 0x127
 8012130:	490a      	ldr	r1, [pc, #40]	@ (801215c <pbuf_alloc+0x1e8>)
 8012132:	4807      	ldr	r0, [pc, #28]	@ (8012150 <pbuf_alloc+0x1dc>)
 8012134:	f00a f896 	bl	801c264 <iprintf>
      return NULL;
 8012138:	2300      	movs	r3, #0
 801213a:	e001      	b.n	8012140 <pbuf_alloc+0x1cc>
      break;
 801213c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012140:	4618      	mov	r0, r3
 8012142:	3728      	adds	r7, #40	@ 0x28
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	0801db68 	.word	0x0801db68
 801214c:	0801db98 	.word	0x0801db98
 8012150:	0801dbc8 	.word	0x0801dbc8
 8012154:	0801dbf0 	.word	0x0801dbf0
 8012158:	0801dc24 	.word	0x0801dc24
 801215c:	0801dc50 	.word	0x0801dc50

08012160 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b086      	sub	sp, #24
 8012164:	af02      	add	r7, sp, #8
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	460b      	mov	r3, r1
 801216a:	807b      	strh	r3, [r7, #2]
 801216c:	4613      	mov	r3, r2
 801216e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012170:	883b      	ldrh	r3, [r7, #0]
 8012172:	2b41      	cmp	r3, #65	@ 0x41
 8012174:	d009      	beq.n	801218a <pbuf_alloc_reference+0x2a>
 8012176:	883b      	ldrh	r3, [r7, #0]
 8012178:	2b01      	cmp	r3, #1
 801217a:	d006      	beq.n	801218a <pbuf_alloc_reference+0x2a>
 801217c:	4b0f      	ldr	r3, [pc, #60]	@ (80121bc <pbuf_alloc_reference+0x5c>)
 801217e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8012182:	490f      	ldr	r1, [pc, #60]	@ (80121c0 <pbuf_alloc_reference+0x60>)
 8012184:	480f      	ldr	r0, [pc, #60]	@ (80121c4 <pbuf_alloc_reference+0x64>)
 8012186:	f00a f86d 	bl	801c264 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801218a:	200b      	movs	r0, #11
 801218c:	f7ff fabc 	bl	8011708 <memp_malloc>
 8012190:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d101      	bne.n	801219c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012198:	2300      	movs	r3, #0
 801219a:	e00b      	b.n	80121b4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801219c:	8879      	ldrh	r1, [r7, #2]
 801219e:	887a      	ldrh	r2, [r7, #2]
 80121a0:	2300      	movs	r3, #0
 80121a2:	9301      	str	r3, [sp, #4]
 80121a4:	883b      	ldrh	r3, [r7, #0]
 80121a6:	9300      	str	r3, [sp, #0]
 80121a8:	460b      	mov	r3, r1
 80121aa:	6879      	ldr	r1, [r7, #4]
 80121ac:	68f8      	ldr	r0, [r7, #12]
 80121ae:	f7ff feb7 	bl	8011f20 <pbuf_init_alloced_pbuf>
  return p;
 80121b2:	68fb      	ldr	r3, [r7, #12]
}
 80121b4:	4618      	mov	r0, r3
 80121b6:	3710      	adds	r7, #16
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}
 80121bc:	0801db68 	.word	0x0801db68
 80121c0:	0801dc6c 	.word	0x0801dc6c
 80121c4:	0801dbc8 	.word	0x0801dbc8

080121c8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b088      	sub	sp, #32
 80121cc:	af02      	add	r7, sp, #8
 80121ce:	607b      	str	r3, [r7, #4]
 80121d0:	4603      	mov	r3, r0
 80121d2:	73fb      	strb	r3, [r7, #15]
 80121d4:	460b      	mov	r3, r1
 80121d6:	81bb      	strh	r3, [r7, #12]
 80121d8:	4613      	mov	r3, r2
 80121da:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80121dc:	7bfb      	ldrb	r3, [r7, #15]
 80121de:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80121e0:	8a7b      	ldrh	r3, [r7, #18]
 80121e2:	3303      	adds	r3, #3
 80121e4:	f023 0203 	bic.w	r2, r3, #3
 80121e8:	89bb      	ldrh	r3, [r7, #12]
 80121ea:	441a      	add	r2, r3
 80121ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d901      	bls.n	80121f6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80121f2:	2300      	movs	r3, #0
 80121f4:	e018      	b.n	8012228 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80121f6:	6a3b      	ldr	r3, [r7, #32]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d007      	beq.n	801220c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80121fc:	8a7b      	ldrh	r3, [r7, #18]
 80121fe:	3303      	adds	r3, #3
 8012200:	f023 0303 	bic.w	r3, r3, #3
 8012204:	6a3a      	ldr	r2, [r7, #32]
 8012206:	4413      	add	r3, r2
 8012208:	617b      	str	r3, [r7, #20]
 801220a:	e001      	b.n	8012210 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801220c:	2300      	movs	r3, #0
 801220e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	89b9      	ldrh	r1, [r7, #12]
 8012214:	89ba      	ldrh	r2, [r7, #12]
 8012216:	2302      	movs	r3, #2
 8012218:	9301      	str	r3, [sp, #4]
 801221a:	897b      	ldrh	r3, [r7, #10]
 801221c:	9300      	str	r3, [sp, #0]
 801221e:	460b      	mov	r3, r1
 8012220:	6979      	ldr	r1, [r7, #20]
 8012222:	f7ff fe7d 	bl	8011f20 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012226:	687b      	ldr	r3, [r7, #4]
}
 8012228:	4618      	mov	r0, r3
 801222a:	3718      	adds	r7, #24
 801222c:	46bd      	mov	sp, r7
 801222e:	bd80      	pop	{r7, pc}

08012230 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b084      	sub	sp, #16
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	460b      	mov	r3, r1
 801223a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d106      	bne.n	8012250 <pbuf_realloc+0x20>
 8012242:	4b3a      	ldr	r3, [pc, #232]	@ (801232c <pbuf_realloc+0xfc>)
 8012244:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8012248:	4939      	ldr	r1, [pc, #228]	@ (8012330 <pbuf_realloc+0x100>)
 801224a:	483a      	ldr	r0, [pc, #232]	@ (8012334 <pbuf_realloc+0x104>)
 801224c:	f00a f80a 	bl	801c264 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	891b      	ldrh	r3, [r3, #8]
 8012254:	887a      	ldrh	r2, [r7, #2]
 8012256:	429a      	cmp	r2, r3
 8012258:	d263      	bcs.n	8012322 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	891a      	ldrh	r2, [r3, #8]
 801225e:	887b      	ldrh	r3, [r7, #2]
 8012260:	1ad3      	subs	r3, r2, r3
 8012262:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012264:	887b      	ldrh	r3, [r7, #2]
 8012266:	817b      	strh	r3, [r7, #10]
  q = p;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801226c:	e018      	b.n	80122a0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	895b      	ldrh	r3, [r3, #10]
 8012272:	897a      	ldrh	r2, [r7, #10]
 8012274:	1ad3      	subs	r3, r2, r3
 8012276:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	891a      	ldrh	r2, [r3, #8]
 801227c:	893b      	ldrh	r3, [r7, #8]
 801227e:	1ad3      	subs	r3, r2, r3
 8012280:	b29a      	uxth	r2, r3
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d106      	bne.n	80122a0 <pbuf_realloc+0x70>
 8012292:	4b26      	ldr	r3, [pc, #152]	@ (801232c <pbuf_realloc+0xfc>)
 8012294:	f240 12af 	movw	r2, #431	@ 0x1af
 8012298:	4927      	ldr	r1, [pc, #156]	@ (8012338 <pbuf_realloc+0x108>)
 801229a:	4826      	ldr	r0, [pc, #152]	@ (8012334 <pbuf_realloc+0x104>)
 801229c:	f009 ffe2 	bl	801c264 <iprintf>
  while (rem_len > q->len) {
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	895b      	ldrh	r3, [r3, #10]
 80122a4:	897a      	ldrh	r2, [r7, #10]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d8e1      	bhi.n	801226e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	7b1b      	ldrb	r3, [r3, #12]
 80122ae:	f003 030f 	and.w	r3, r3, #15
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d121      	bne.n	80122fa <pbuf_realloc+0xca>
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	895b      	ldrh	r3, [r3, #10]
 80122ba:	897a      	ldrh	r2, [r7, #10]
 80122bc:	429a      	cmp	r2, r3
 80122be:	d01c      	beq.n	80122fa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	7b5b      	ldrb	r3, [r3, #13]
 80122c4:	f003 0302 	and.w	r3, r3, #2
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d116      	bne.n	80122fa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	685a      	ldr	r2, [r3, #4]
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	1ad3      	subs	r3, r2, r3
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	897b      	ldrh	r3, [r7, #10]
 80122d8:	4413      	add	r3, r2
 80122da:	b29b      	uxth	r3, r3
 80122dc:	4619      	mov	r1, r3
 80122de:	68f8      	ldr	r0, [r7, #12]
 80122e0:	f7fe ff64 	bl	80111ac <mem_trim>
 80122e4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d106      	bne.n	80122fa <pbuf_realloc+0xca>
 80122ec:	4b0f      	ldr	r3, [pc, #60]	@ (801232c <pbuf_realloc+0xfc>)
 80122ee:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80122f2:	4912      	ldr	r1, [pc, #72]	@ (801233c <pbuf_realloc+0x10c>)
 80122f4:	480f      	ldr	r0, [pc, #60]	@ (8012334 <pbuf_realloc+0x104>)
 80122f6:	f009 ffb5 	bl	801c264 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	897a      	ldrh	r2, [r7, #10]
 80122fe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	895a      	ldrh	r2, [r3, #10]
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d004      	beq.n	801231a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	4618      	mov	r0, r3
 8012316:	f000 f911 	bl	801253c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	2200      	movs	r2, #0
 801231e:	601a      	str	r2, [r3, #0]
 8012320:	e000      	b.n	8012324 <pbuf_realloc+0xf4>
    return;
 8012322:	bf00      	nop

}
 8012324:	3710      	adds	r7, #16
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	0801db68 	.word	0x0801db68
 8012330:	0801dc80 	.word	0x0801dc80
 8012334:	0801dbc8 	.word	0x0801dbc8
 8012338:	0801dc98 	.word	0x0801dc98
 801233c:	0801dcb0 	.word	0x0801dcb0

08012340 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b086      	sub	sp, #24
 8012344:	af00      	add	r7, sp, #0
 8012346:	60f8      	str	r0, [r7, #12]
 8012348:	60b9      	str	r1, [r7, #8]
 801234a:	4613      	mov	r3, r2
 801234c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d106      	bne.n	8012362 <pbuf_add_header_impl+0x22>
 8012354:	4b2b      	ldr	r3, [pc, #172]	@ (8012404 <pbuf_add_header_impl+0xc4>)
 8012356:	f240 12df 	movw	r2, #479	@ 0x1df
 801235a:	492b      	ldr	r1, [pc, #172]	@ (8012408 <pbuf_add_header_impl+0xc8>)
 801235c:	482b      	ldr	r0, [pc, #172]	@ (801240c <pbuf_add_header_impl+0xcc>)
 801235e:	f009 ff81 	bl	801c264 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d003      	beq.n	8012370 <pbuf_add_header_impl+0x30>
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801236e:	d301      	bcc.n	8012374 <pbuf_add_header_impl+0x34>
    return 1;
 8012370:	2301      	movs	r3, #1
 8012372:	e043      	b.n	80123fc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d101      	bne.n	801237e <pbuf_add_header_impl+0x3e>
    return 0;
 801237a:	2300      	movs	r3, #0
 801237c:	e03e      	b.n	80123fc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	891a      	ldrh	r2, [r3, #8]
 8012386:	8a7b      	ldrh	r3, [r7, #18]
 8012388:	4413      	add	r3, r2
 801238a:	b29b      	uxth	r3, r3
 801238c:	8a7a      	ldrh	r2, [r7, #18]
 801238e:	429a      	cmp	r2, r3
 8012390:	d901      	bls.n	8012396 <pbuf_add_header_impl+0x56>
    return 1;
 8012392:	2301      	movs	r3, #1
 8012394:	e032      	b.n	80123fc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	7b1b      	ldrb	r3, [r3, #12]
 801239a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801239c:	8a3b      	ldrh	r3, [r7, #16]
 801239e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d00c      	beq.n	80123c0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	685a      	ldr	r2, [r3, #4]
 80123aa:	68bb      	ldr	r3, [r7, #8]
 80123ac:	425b      	negs	r3, r3
 80123ae:	4413      	add	r3, r2
 80123b0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	3310      	adds	r3, #16
 80123b6:	697a      	ldr	r2, [r7, #20]
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d20d      	bcs.n	80123d8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80123bc:	2301      	movs	r3, #1
 80123be:	e01d      	b.n	80123fc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80123c0:	79fb      	ldrb	r3, [r7, #7]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d006      	beq.n	80123d4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	685a      	ldr	r2, [r3, #4]
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	425b      	negs	r3, r3
 80123ce:	4413      	add	r3, r2
 80123d0:	617b      	str	r3, [r7, #20]
 80123d2:	e001      	b.n	80123d8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80123d4:	2301      	movs	r3, #1
 80123d6:	e011      	b.n	80123fc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	697a      	ldr	r2, [r7, #20]
 80123dc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	895a      	ldrh	r2, [r3, #10]
 80123e2:	8a7b      	ldrh	r3, [r7, #18]
 80123e4:	4413      	add	r3, r2
 80123e6:	b29a      	uxth	r2, r3
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	891a      	ldrh	r2, [r3, #8]
 80123f0:	8a7b      	ldrh	r3, [r7, #18]
 80123f2:	4413      	add	r3, r2
 80123f4:	b29a      	uxth	r2, r3
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	811a      	strh	r2, [r3, #8]


  return 0;
 80123fa:	2300      	movs	r3, #0
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3718      	adds	r7, #24
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}
 8012404:	0801db68 	.word	0x0801db68
 8012408:	0801dccc 	.word	0x0801dccc
 801240c:	0801dbc8 	.word	0x0801dbc8

08012410 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b082      	sub	sp, #8
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
 8012418:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801241a:	2200      	movs	r2, #0
 801241c:	6839      	ldr	r1, [r7, #0]
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f7ff ff8e 	bl	8012340 <pbuf_add_header_impl>
 8012424:	4603      	mov	r3, r0
}
 8012426:	4618      	mov	r0, r3
 8012428:	3708      	adds	r7, #8
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}
	...

08012430 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b084      	sub	sp, #16
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d106      	bne.n	801244e <pbuf_remove_header+0x1e>
 8012440:	4b20      	ldr	r3, [pc, #128]	@ (80124c4 <pbuf_remove_header+0x94>)
 8012442:	f240 224b 	movw	r2, #587	@ 0x24b
 8012446:	4920      	ldr	r1, [pc, #128]	@ (80124c8 <pbuf_remove_header+0x98>)
 8012448:	4820      	ldr	r0, [pc, #128]	@ (80124cc <pbuf_remove_header+0x9c>)
 801244a:	f009 ff0b 	bl	801c264 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d003      	beq.n	801245c <pbuf_remove_header+0x2c>
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801245a:	d301      	bcc.n	8012460 <pbuf_remove_header+0x30>
    return 1;
 801245c:	2301      	movs	r3, #1
 801245e:	e02c      	b.n	80124ba <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d101      	bne.n	801246a <pbuf_remove_header+0x3a>
    return 0;
 8012466:	2300      	movs	r3, #0
 8012468:	e027      	b.n	80124ba <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	895b      	ldrh	r3, [r3, #10]
 8012472:	89fa      	ldrh	r2, [r7, #14]
 8012474:	429a      	cmp	r2, r3
 8012476:	d908      	bls.n	801248a <pbuf_remove_header+0x5a>
 8012478:	4b12      	ldr	r3, [pc, #72]	@ (80124c4 <pbuf_remove_header+0x94>)
 801247a:	f240 2255 	movw	r2, #597	@ 0x255
 801247e:	4914      	ldr	r1, [pc, #80]	@ (80124d0 <pbuf_remove_header+0xa0>)
 8012480:	4812      	ldr	r0, [pc, #72]	@ (80124cc <pbuf_remove_header+0x9c>)
 8012482:	f009 feef 	bl	801c264 <iprintf>
 8012486:	2301      	movs	r3, #1
 8012488:	e017      	b.n	80124ba <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	685a      	ldr	r2, [r3, #4]
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	441a      	add	r2, r3
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	895a      	ldrh	r2, [r3, #10]
 80124a0:	89fb      	ldrh	r3, [r7, #14]
 80124a2:	1ad3      	subs	r3, r2, r3
 80124a4:	b29a      	uxth	r2, r3
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	891a      	ldrh	r2, [r3, #8]
 80124ae:	89fb      	ldrh	r3, [r7, #14]
 80124b0:	1ad3      	subs	r3, r2, r3
 80124b2:	b29a      	uxth	r2, r3
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80124b8:	2300      	movs	r3, #0
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3710      	adds	r7, #16
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}
 80124c2:	bf00      	nop
 80124c4:	0801db68 	.word	0x0801db68
 80124c8:	0801dccc 	.word	0x0801dccc
 80124cc:	0801dbc8 	.word	0x0801dbc8
 80124d0:	0801dcd8 	.word	0x0801dcd8

080124d4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b082      	sub	sp, #8
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	460b      	mov	r3, r1
 80124de:	807b      	strh	r3, [r7, #2]
 80124e0:	4613      	mov	r3, r2
 80124e2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80124e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	da08      	bge.n	80124fe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80124ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80124f0:	425b      	negs	r3, r3
 80124f2:	4619      	mov	r1, r3
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f7ff ff9b 	bl	8012430 <pbuf_remove_header>
 80124fa:	4603      	mov	r3, r0
 80124fc:	e007      	b.n	801250e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80124fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012502:	787a      	ldrb	r2, [r7, #1]
 8012504:	4619      	mov	r1, r3
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f7ff ff1a 	bl	8012340 <pbuf_add_header_impl>
 801250c:	4603      	mov	r3, r0
  }
}
 801250e:	4618      	mov	r0, r3
 8012510:	3708      	adds	r7, #8
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}

08012516 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012516:	b580      	push	{r7, lr}
 8012518:	b082      	sub	sp, #8
 801251a:	af00      	add	r7, sp, #0
 801251c:	6078      	str	r0, [r7, #4]
 801251e:	460b      	mov	r3, r1
 8012520:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012522:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012526:	2201      	movs	r2, #1
 8012528:	4619      	mov	r1, r3
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f7ff ffd2 	bl	80124d4 <pbuf_header_impl>
 8012530:	4603      	mov	r3, r0
}
 8012532:	4618      	mov	r0, r3
 8012534:	3708      	adds	r7, #8
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}
	...

0801253c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b088      	sub	sp, #32
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d10b      	bne.n	8012562 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d106      	bne.n	801255e <pbuf_free+0x22>
 8012550:	4b3b      	ldr	r3, [pc, #236]	@ (8012640 <pbuf_free+0x104>)
 8012552:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8012556:	493b      	ldr	r1, [pc, #236]	@ (8012644 <pbuf_free+0x108>)
 8012558:	483b      	ldr	r0, [pc, #236]	@ (8012648 <pbuf_free+0x10c>)
 801255a:	f009 fe83 	bl	801c264 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801255e:	2300      	movs	r3, #0
 8012560:	e069      	b.n	8012636 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012562:	2300      	movs	r3, #0
 8012564:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012566:	e062      	b.n	801262e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012568:	f008 fdf6 	bl	801b158 <sys_arch_protect>
 801256c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	7b9b      	ldrb	r3, [r3, #14]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d106      	bne.n	8012584 <pbuf_free+0x48>
 8012576:	4b32      	ldr	r3, [pc, #200]	@ (8012640 <pbuf_free+0x104>)
 8012578:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801257c:	4933      	ldr	r1, [pc, #204]	@ (801264c <pbuf_free+0x110>)
 801257e:	4832      	ldr	r0, [pc, #200]	@ (8012648 <pbuf_free+0x10c>)
 8012580:	f009 fe70 	bl	801c264 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	7b9b      	ldrb	r3, [r3, #14]
 8012588:	3b01      	subs	r3, #1
 801258a:	b2da      	uxtb	r2, r3
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	739a      	strb	r2, [r3, #14]
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	7b9b      	ldrb	r3, [r3, #14]
 8012594:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012596:	69b8      	ldr	r0, [r7, #24]
 8012598:	f008 fdec 	bl	801b174 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801259c:	7dfb      	ldrb	r3, [r7, #23]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d143      	bne.n	801262a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	7b1b      	ldrb	r3, [r3, #12]
 80125ac:	f003 030f 	and.w	r3, r3, #15
 80125b0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	7b5b      	ldrb	r3, [r3, #13]
 80125b6:	f003 0302 	and.w	r3, r3, #2
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d011      	beq.n	80125e2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80125c2:	68bb      	ldr	r3, [r7, #8]
 80125c4:	691b      	ldr	r3, [r3, #16]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d106      	bne.n	80125d8 <pbuf_free+0x9c>
 80125ca:	4b1d      	ldr	r3, [pc, #116]	@ (8012640 <pbuf_free+0x104>)
 80125cc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80125d0:	491f      	ldr	r1, [pc, #124]	@ (8012650 <pbuf_free+0x114>)
 80125d2:	481d      	ldr	r0, [pc, #116]	@ (8012648 <pbuf_free+0x10c>)
 80125d4:	f009 fe46 	bl	801c264 <iprintf>
        pc->custom_free_function(p);
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	691b      	ldr	r3, [r3, #16]
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	4798      	blx	r3
 80125e0:	e01d      	b.n	801261e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80125e2:	7bfb      	ldrb	r3, [r7, #15]
 80125e4:	2b02      	cmp	r3, #2
 80125e6:	d104      	bne.n	80125f2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80125e8:	6879      	ldr	r1, [r7, #4]
 80125ea:	200c      	movs	r0, #12
 80125ec:	f7ff f902 	bl	80117f4 <memp_free>
 80125f0:	e015      	b.n	801261e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80125f2:	7bfb      	ldrb	r3, [r7, #15]
 80125f4:	2b01      	cmp	r3, #1
 80125f6:	d104      	bne.n	8012602 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80125f8:	6879      	ldr	r1, [r7, #4]
 80125fa:	200b      	movs	r0, #11
 80125fc:	f7ff f8fa 	bl	80117f4 <memp_free>
 8012600:	e00d      	b.n	801261e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012602:	7bfb      	ldrb	r3, [r7, #15]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d103      	bne.n	8012610 <pbuf_free+0xd4>
          mem_free(p);
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f7fe fd3f 	bl	801108c <mem_free>
 801260e:	e006      	b.n	801261e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012610:	4b0b      	ldr	r3, [pc, #44]	@ (8012640 <pbuf_free+0x104>)
 8012612:	f240 320f 	movw	r2, #783	@ 0x30f
 8012616:	490f      	ldr	r1, [pc, #60]	@ (8012654 <pbuf_free+0x118>)
 8012618:	480b      	ldr	r0, [pc, #44]	@ (8012648 <pbuf_free+0x10c>)
 801261a:	f009 fe23 	bl	801c264 <iprintf>
        }
      }
      count++;
 801261e:	7ffb      	ldrb	r3, [r7, #31]
 8012620:	3301      	adds	r3, #1
 8012622:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	607b      	str	r3, [r7, #4]
 8012628:	e001      	b.n	801262e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801262a:	2300      	movs	r3, #0
 801262c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d199      	bne.n	8012568 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012634:	7ffb      	ldrb	r3, [r7, #31]
}
 8012636:	4618      	mov	r0, r3
 8012638:	3720      	adds	r7, #32
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	0801db68 	.word	0x0801db68
 8012644:	0801dccc 	.word	0x0801dccc
 8012648:	0801dbc8 	.word	0x0801dbc8
 801264c:	0801dcf8 	.word	0x0801dcf8
 8012650:	0801dd10 	.word	0x0801dd10
 8012654:	0801dd34 	.word	0x0801dd34

08012658 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012658:	b480      	push	{r7}
 801265a:	b085      	sub	sp, #20
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012660:	2300      	movs	r3, #0
 8012662:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012664:	e005      	b.n	8012672 <pbuf_clen+0x1a>
    ++len;
 8012666:	89fb      	ldrh	r3, [r7, #14]
 8012668:	3301      	adds	r3, #1
 801266a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d1f6      	bne.n	8012666 <pbuf_clen+0xe>
  }
  return len;
 8012678:	89fb      	ldrh	r3, [r7, #14]
}
 801267a:	4618      	mov	r0, r3
 801267c:	3714      	adds	r7, #20
 801267e:	46bd      	mov	sp, r7
 8012680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012684:	4770      	bx	lr
	...

08012688 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b084      	sub	sp, #16
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d016      	beq.n	80126c4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012696:	f008 fd5f 	bl	801b158 <sys_arch_protect>
 801269a:	60f8      	str	r0, [r7, #12]
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	7b9b      	ldrb	r3, [r3, #14]
 80126a0:	3301      	adds	r3, #1
 80126a2:	b2da      	uxtb	r2, r3
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	739a      	strb	r2, [r3, #14]
 80126a8:	68f8      	ldr	r0, [r7, #12]
 80126aa:	f008 fd63 	bl	801b174 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	7b9b      	ldrb	r3, [r3, #14]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d106      	bne.n	80126c4 <pbuf_ref+0x3c>
 80126b6:	4b05      	ldr	r3, [pc, #20]	@ (80126cc <pbuf_ref+0x44>)
 80126b8:	f240 3242 	movw	r2, #834	@ 0x342
 80126bc:	4904      	ldr	r1, [pc, #16]	@ (80126d0 <pbuf_ref+0x48>)
 80126be:	4805      	ldr	r0, [pc, #20]	@ (80126d4 <pbuf_ref+0x4c>)
 80126c0:	f009 fdd0 	bl	801c264 <iprintf>
  }
}
 80126c4:	bf00      	nop
 80126c6:	3710      	adds	r7, #16
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bd80      	pop	{r7, pc}
 80126cc:	0801db68 	.word	0x0801db68
 80126d0:	0801dd48 	.word	0x0801dd48
 80126d4:	0801dbc8 	.word	0x0801dbc8

080126d8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b084      	sub	sp, #16
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
 80126e0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d002      	beq.n	80126ee <pbuf_cat+0x16>
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d107      	bne.n	80126fe <pbuf_cat+0x26>
 80126ee:	4b20      	ldr	r3, [pc, #128]	@ (8012770 <pbuf_cat+0x98>)
 80126f0:	f240 3259 	movw	r2, #857	@ 0x359
 80126f4:	491f      	ldr	r1, [pc, #124]	@ (8012774 <pbuf_cat+0x9c>)
 80126f6:	4820      	ldr	r0, [pc, #128]	@ (8012778 <pbuf_cat+0xa0>)
 80126f8:	f009 fdb4 	bl	801c264 <iprintf>
 80126fc:	e034      	b.n	8012768 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	60fb      	str	r3, [r7, #12]
 8012702:	e00a      	b.n	801271a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	891a      	ldrh	r2, [r3, #8]
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	891b      	ldrh	r3, [r3, #8]
 801270c:	4413      	add	r3, r2
 801270e:	b29a      	uxth	r2, r3
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	60fb      	str	r3, [r7, #12]
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d1f0      	bne.n	8012704 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	891a      	ldrh	r2, [r3, #8]
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	895b      	ldrh	r3, [r3, #10]
 801272a:	429a      	cmp	r2, r3
 801272c:	d006      	beq.n	801273c <pbuf_cat+0x64>
 801272e:	4b10      	ldr	r3, [pc, #64]	@ (8012770 <pbuf_cat+0x98>)
 8012730:	f240 3262 	movw	r2, #866	@ 0x362
 8012734:	4911      	ldr	r1, [pc, #68]	@ (801277c <pbuf_cat+0xa4>)
 8012736:	4810      	ldr	r0, [pc, #64]	@ (8012778 <pbuf_cat+0xa0>)
 8012738:	f009 fd94 	bl	801c264 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d006      	beq.n	8012752 <pbuf_cat+0x7a>
 8012744:	4b0a      	ldr	r3, [pc, #40]	@ (8012770 <pbuf_cat+0x98>)
 8012746:	f240 3263 	movw	r2, #867	@ 0x363
 801274a:	490d      	ldr	r1, [pc, #52]	@ (8012780 <pbuf_cat+0xa8>)
 801274c:	480a      	ldr	r0, [pc, #40]	@ (8012778 <pbuf_cat+0xa0>)
 801274e:	f009 fd89 	bl	801c264 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	891a      	ldrh	r2, [r3, #8]
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	891b      	ldrh	r3, [r3, #8]
 801275a:	4413      	add	r3, r2
 801275c:	b29a      	uxth	r2, r3
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	683a      	ldr	r2, [r7, #0]
 8012766:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012768:	3710      	adds	r7, #16
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}
 801276e:	bf00      	nop
 8012770:	0801db68 	.word	0x0801db68
 8012774:	0801dd5c 	.word	0x0801dd5c
 8012778:	0801dbc8 	.word	0x0801dbc8
 801277c:	0801dd94 	.word	0x0801dd94
 8012780:	0801ddc4 	.word	0x0801ddc4

08012784 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b082      	sub	sp, #8
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
 801278c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801278e:	6839      	ldr	r1, [r7, #0]
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f7ff ffa1 	bl	80126d8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8012796:	6838      	ldr	r0, [r7, #0]
 8012798:	f7ff ff76 	bl	8012688 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801279c:	bf00      	nop
 801279e:	3708      	adds	r7, #8
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}

080127a4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b086      	sub	sp, #24
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
 80127ac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80127ae:	2300      	movs	r3, #0
 80127b0:	617b      	str	r3, [r7, #20]
 80127b2:	2300      	movs	r3, #0
 80127b4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d008      	beq.n	80127ce <pbuf_copy+0x2a>
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d005      	beq.n	80127ce <pbuf_copy+0x2a>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	891a      	ldrh	r2, [r3, #8]
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	891b      	ldrh	r3, [r3, #8]
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d209      	bcs.n	80127e2 <pbuf_copy+0x3e>
 80127ce:	4b57      	ldr	r3, [pc, #348]	@ (801292c <pbuf_copy+0x188>)
 80127d0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80127d4:	4956      	ldr	r1, [pc, #344]	@ (8012930 <pbuf_copy+0x18c>)
 80127d6:	4857      	ldr	r0, [pc, #348]	@ (8012934 <pbuf_copy+0x190>)
 80127d8:	f009 fd44 	bl	801c264 <iprintf>
 80127dc:	f06f 030f 	mvn.w	r3, #15
 80127e0:	e09f      	b.n	8012922 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	895b      	ldrh	r3, [r3, #10]
 80127e6:	461a      	mov	r2, r3
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	1ad2      	subs	r2, r2, r3
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	895b      	ldrh	r3, [r3, #10]
 80127f0:	4619      	mov	r1, r3
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	1acb      	subs	r3, r1, r3
 80127f6:	429a      	cmp	r2, r3
 80127f8:	d306      	bcc.n	8012808 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	895b      	ldrh	r3, [r3, #10]
 80127fe:	461a      	mov	r2, r3
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	1ad3      	subs	r3, r2, r3
 8012804:	60fb      	str	r3, [r7, #12]
 8012806:	e005      	b.n	8012814 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	895b      	ldrh	r3, [r3, #10]
 801280c:	461a      	mov	r2, r3
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	1ad3      	subs	r3, r2, r3
 8012812:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	685a      	ldr	r2, [r3, #4]
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	18d0      	adds	r0, r2, r3
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	685a      	ldr	r2, [r3, #4]
 8012820:	693b      	ldr	r3, [r7, #16]
 8012822:	4413      	add	r3, r2
 8012824:	68fa      	ldr	r2, [r7, #12]
 8012826:	4619      	mov	r1, r3
 8012828:	f009 ff47 	bl	801c6ba <memcpy>
    offset_to += len;
 801282c:	697a      	ldr	r2, [r7, #20]
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	4413      	add	r3, r2
 8012832:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012834:	693a      	ldr	r2, [r7, #16]
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	4413      	add	r3, r2
 801283a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	895b      	ldrh	r3, [r3, #10]
 8012840:	461a      	mov	r2, r3
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	4293      	cmp	r3, r2
 8012846:	d906      	bls.n	8012856 <pbuf_copy+0xb2>
 8012848:	4b38      	ldr	r3, [pc, #224]	@ (801292c <pbuf_copy+0x188>)
 801284a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801284e:	493a      	ldr	r1, [pc, #232]	@ (8012938 <pbuf_copy+0x194>)
 8012850:	4838      	ldr	r0, [pc, #224]	@ (8012934 <pbuf_copy+0x190>)
 8012852:	f009 fd07 	bl	801c264 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8012856:	683b      	ldr	r3, [r7, #0]
 8012858:	895b      	ldrh	r3, [r3, #10]
 801285a:	461a      	mov	r2, r3
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	4293      	cmp	r3, r2
 8012860:	d906      	bls.n	8012870 <pbuf_copy+0xcc>
 8012862:	4b32      	ldr	r3, [pc, #200]	@ (801292c <pbuf_copy+0x188>)
 8012864:	f240 32da 	movw	r2, #986	@ 0x3da
 8012868:	4934      	ldr	r1, [pc, #208]	@ (801293c <pbuf_copy+0x198>)
 801286a:	4832      	ldr	r0, [pc, #200]	@ (8012934 <pbuf_copy+0x190>)
 801286c:	f009 fcfa 	bl	801c264 <iprintf>
    if (offset_from >= p_from->len) {
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	895b      	ldrh	r3, [r3, #10]
 8012874:	461a      	mov	r2, r3
 8012876:	693b      	ldr	r3, [r7, #16]
 8012878:	4293      	cmp	r3, r2
 801287a:	d304      	bcc.n	8012886 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801287c:	2300      	movs	r3, #0
 801287e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	895b      	ldrh	r3, [r3, #10]
 801288a:	461a      	mov	r2, r3
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	4293      	cmp	r3, r2
 8012890:	d114      	bne.n	80128bc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8012892:	2300      	movs	r3, #0
 8012894:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d10c      	bne.n	80128bc <pbuf_copy+0x118>
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d009      	beq.n	80128bc <pbuf_copy+0x118>
 80128a8:	4b20      	ldr	r3, [pc, #128]	@ (801292c <pbuf_copy+0x188>)
 80128aa:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80128ae:	4924      	ldr	r1, [pc, #144]	@ (8012940 <pbuf_copy+0x19c>)
 80128b0:	4820      	ldr	r0, [pc, #128]	@ (8012934 <pbuf_copy+0x190>)
 80128b2:	f009 fcd7 	bl	801c264 <iprintf>
 80128b6:	f06f 030f 	mvn.w	r3, #15
 80128ba:	e032      	b.n	8012922 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d013      	beq.n	80128ea <pbuf_copy+0x146>
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	895a      	ldrh	r2, [r3, #10]
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	891b      	ldrh	r3, [r3, #8]
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d10d      	bne.n	80128ea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d009      	beq.n	80128ea <pbuf_copy+0x146>
 80128d6:	4b15      	ldr	r3, [pc, #84]	@ (801292c <pbuf_copy+0x188>)
 80128d8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80128dc:	4919      	ldr	r1, [pc, #100]	@ (8012944 <pbuf_copy+0x1a0>)
 80128de:	4815      	ldr	r0, [pc, #84]	@ (8012934 <pbuf_copy+0x190>)
 80128e0:	f009 fcc0 	bl	801c264 <iprintf>
 80128e4:	f06f 0305 	mvn.w	r3, #5
 80128e8:	e01b      	b.n	8012922 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d013      	beq.n	8012918 <pbuf_copy+0x174>
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	895a      	ldrh	r2, [r3, #10]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	891b      	ldrh	r3, [r3, #8]
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d10d      	bne.n	8012918 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d009      	beq.n	8012918 <pbuf_copy+0x174>
 8012904:	4b09      	ldr	r3, [pc, #36]	@ (801292c <pbuf_copy+0x188>)
 8012906:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801290a:	490e      	ldr	r1, [pc, #56]	@ (8012944 <pbuf_copy+0x1a0>)
 801290c:	4809      	ldr	r0, [pc, #36]	@ (8012934 <pbuf_copy+0x190>)
 801290e:	f009 fca9 	bl	801c264 <iprintf>
 8012912:	f06f 0305 	mvn.w	r3, #5
 8012916:	e004      	b.n	8012922 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	2b00      	cmp	r3, #0
 801291c:	f47f af61 	bne.w	80127e2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012920:	2300      	movs	r3, #0
}
 8012922:	4618      	mov	r0, r3
 8012924:	3718      	adds	r7, #24
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
 801292a:	bf00      	nop
 801292c:	0801db68 	.word	0x0801db68
 8012930:	0801de10 	.word	0x0801de10
 8012934:	0801dbc8 	.word	0x0801dbc8
 8012938:	0801de40 	.word	0x0801de40
 801293c:	0801de58 	.word	0x0801de58
 8012940:	0801de74 	.word	0x0801de74
 8012944:	0801de84 	.word	0x0801de84

08012948 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b088      	sub	sp, #32
 801294c:	af00      	add	r7, sp, #0
 801294e:	60f8      	str	r0, [r7, #12]
 8012950:	60b9      	str	r1, [r7, #8]
 8012952:	4611      	mov	r1, r2
 8012954:	461a      	mov	r2, r3
 8012956:	460b      	mov	r3, r1
 8012958:	80fb      	strh	r3, [r7, #6]
 801295a:	4613      	mov	r3, r2
 801295c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801295e:	2300      	movs	r3, #0
 8012960:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012962:	2300      	movs	r3, #0
 8012964:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d108      	bne.n	801297e <pbuf_copy_partial+0x36>
 801296c:	4b2b      	ldr	r3, [pc, #172]	@ (8012a1c <pbuf_copy_partial+0xd4>)
 801296e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8012972:	492b      	ldr	r1, [pc, #172]	@ (8012a20 <pbuf_copy_partial+0xd8>)
 8012974:	482b      	ldr	r0, [pc, #172]	@ (8012a24 <pbuf_copy_partial+0xdc>)
 8012976:	f009 fc75 	bl	801c264 <iprintf>
 801297a:	2300      	movs	r3, #0
 801297c:	e04a      	b.n	8012a14 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d108      	bne.n	8012996 <pbuf_copy_partial+0x4e>
 8012984:	4b25      	ldr	r3, [pc, #148]	@ (8012a1c <pbuf_copy_partial+0xd4>)
 8012986:	f240 420b 	movw	r2, #1035	@ 0x40b
 801298a:	4927      	ldr	r1, [pc, #156]	@ (8012a28 <pbuf_copy_partial+0xe0>)
 801298c:	4825      	ldr	r0, [pc, #148]	@ (8012a24 <pbuf_copy_partial+0xdc>)
 801298e:	f009 fc69 	bl	801c264 <iprintf>
 8012992:	2300      	movs	r3, #0
 8012994:	e03e      	b.n	8012a14 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	61fb      	str	r3, [r7, #28]
 801299a:	e034      	b.n	8012a06 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801299c:	88bb      	ldrh	r3, [r7, #4]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d00a      	beq.n	80129b8 <pbuf_copy_partial+0x70>
 80129a2:	69fb      	ldr	r3, [r7, #28]
 80129a4:	895b      	ldrh	r3, [r3, #10]
 80129a6:	88ba      	ldrh	r2, [r7, #4]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d305      	bcc.n	80129b8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80129ac:	69fb      	ldr	r3, [r7, #28]
 80129ae:	895b      	ldrh	r3, [r3, #10]
 80129b0:	88ba      	ldrh	r2, [r7, #4]
 80129b2:	1ad3      	subs	r3, r2, r3
 80129b4:	80bb      	strh	r3, [r7, #4]
 80129b6:	e023      	b.n	8012a00 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80129b8:	69fb      	ldr	r3, [r7, #28]
 80129ba:	895a      	ldrh	r2, [r3, #10]
 80129bc:	88bb      	ldrh	r3, [r7, #4]
 80129be:	1ad3      	subs	r3, r2, r3
 80129c0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80129c2:	8b3a      	ldrh	r2, [r7, #24]
 80129c4:	88fb      	ldrh	r3, [r7, #6]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d901      	bls.n	80129ce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80129ca:	88fb      	ldrh	r3, [r7, #6]
 80129cc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80129ce:	8b7b      	ldrh	r3, [r7, #26]
 80129d0:	68ba      	ldr	r2, [r7, #8]
 80129d2:	18d0      	adds	r0, r2, r3
 80129d4:	69fb      	ldr	r3, [r7, #28]
 80129d6:	685a      	ldr	r2, [r3, #4]
 80129d8:	88bb      	ldrh	r3, [r7, #4]
 80129da:	4413      	add	r3, r2
 80129dc:	8b3a      	ldrh	r2, [r7, #24]
 80129de:	4619      	mov	r1, r3
 80129e0:	f009 fe6b 	bl	801c6ba <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80129e4:	8afa      	ldrh	r2, [r7, #22]
 80129e6:	8b3b      	ldrh	r3, [r7, #24]
 80129e8:	4413      	add	r3, r2
 80129ea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80129ec:	8b7a      	ldrh	r2, [r7, #26]
 80129ee:	8b3b      	ldrh	r3, [r7, #24]
 80129f0:	4413      	add	r3, r2
 80129f2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80129f4:	88fa      	ldrh	r2, [r7, #6]
 80129f6:	8b3b      	ldrh	r3, [r7, #24]
 80129f8:	1ad3      	subs	r3, r2, r3
 80129fa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80129fc:	2300      	movs	r3, #0
 80129fe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012a00:	69fb      	ldr	r3, [r7, #28]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	61fb      	str	r3, [r7, #28]
 8012a06:	88fb      	ldrh	r3, [r7, #6]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d002      	beq.n	8012a12 <pbuf_copy_partial+0xca>
 8012a0c:	69fb      	ldr	r3, [r7, #28]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d1c4      	bne.n	801299c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8012a12:	8afb      	ldrh	r3, [r7, #22]
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	3720      	adds	r7, #32
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}
 8012a1c:	0801db68 	.word	0x0801db68
 8012a20:	0801deb0 	.word	0x0801deb0
 8012a24:	0801dbc8 	.word	0x0801dbc8
 8012a28:	0801ded0 	.word	0x0801ded0

08012a2c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b084      	sub	sp, #16
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	4603      	mov	r3, r0
 8012a34:	603a      	str	r2, [r7, #0]
 8012a36:	71fb      	strb	r3, [r7, #7]
 8012a38:	460b      	mov	r3, r1
 8012a3a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012a3c:	683b      	ldr	r3, [r7, #0]
 8012a3e:	8919      	ldrh	r1, [r3, #8]
 8012a40:	88ba      	ldrh	r2, [r7, #4]
 8012a42:	79fb      	ldrb	r3, [r7, #7]
 8012a44:	4618      	mov	r0, r3
 8012a46:	f7ff fa95 	bl	8011f74 <pbuf_alloc>
 8012a4a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d101      	bne.n	8012a56 <pbuf_clone+0x2a>
    return NULL;
 8012a52:	2300      	movs	r3, #0
 8012a54:	e011      	b.n	8012a7a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012a56:	6839      	ldr	r1, [r7, #0]
 8012a58:	68f8      	ldr	r0, [r7, #12]
 8012a5a:	f7ff fea3 	bl	80127a4 <pbuf_copy>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012a62:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d006      	beq.n	8012a78 <pbuf_clone+0x4c>
 8012a6a:	4b06      	ldr	r3, [pc, #24]	@ (8012a84 <pbuf_clone+0x58>)
 8012a6c:	f240 5224 	movw	r2, #1316	@ 0x524
 8012a70:	4905      	ldr	r1, [pc, #20]	@ (8012a88 <pbuf_clone+0x5c>)
 8012a72:	4806      	ldr	r0, [pc, #24]	@ (8012a8c <pbuf_clone+0x60>)
 8012a74:	f009 fbf6 	bl	801c264 <iprintf>
  return q;
 8012a78:	68fb      	ldr	r3, [r7, #12]
}
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	3710      	adds	r7, #16
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd80      	pop	{r7, pc}
 8012a82:	bf00      	nop
 8012a84:	0801db68 	.word	0x0801db68
 8012a88:	0801dfdc 	.word	0x0801dfdc
 8012a8c:	0801dbc8 	.word	0x0801dbc8

08012a90 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012a94:	f009 fae6 	bl	801c064 <rand>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	b29b      	uxth	r3, r3
 8012a9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012aa0:	b29b      	uxth	r3, r3
 8012aa2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012aa6:	b29a      	uxth	r2, r3
 8012aa8:	4b01      	ldr	r3, [pc, #4]	@ (8012ab0 <tcp_init+0x20>)
 8012aaa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012aac:	bf00      	nop
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	20000024 	.word	0x20000024

08012ab4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	7d1b      	ldrb	r3, [r3, #20]
 8012ac0:	2b01      	cmp	r3, #1
 8012ac2:	d105      	bne.n	8012ad0 <tcp_free+0x1c>
 8012ac4:	4b06      	ldr	r3, [pc, #24]	@ (8012ae0 <tcp_free+0x2c>)
 8012ac6:	22d4      	movs	r2, #212	@ 0xd4
 8012ac8:	4906      	ldr	r1, [pc, #24]	@ (8012ae4 <tcp_free+0x30>)
 8012aca:	4807      	ldr	r0, [pc, #28]	@ (8012ae8 <tcp_free+0x34>)
 8012acc:	f009 fbca 	bl	801c264 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012ad0:	6879      	ldr	r1, [r7, #4]
 8012ad2:	2001      	movs	r0, #1
 8012ad4:	f7fe fe8e 	bl	80117f4 <memp_free>
}
 8012ad8:	bf00      	nop
 8012ada:	3708      	adds	r7, #8
 8012adc:	46bd      	mov	sp, r7
 8012ade:	bd80      	pop	{r7, pc}
 8012ae0:	0801e068 	.word	0x0801e068
 8012ae4:	0801e098 	.word	0x0801e098
 8012ae8:	0801e0ac 	.word	0x0801e0ac

08012aec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b082      	sub	sp, #8
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	7d1b      	ldrb	r3, [r3, #20]
 8012af8:	2b01      	cmp	r3, #1
 8012afa:	d105      	bne.n	8012b08 <tcp_free_listen+0x1c>
 8012afc:	4b06      	ldr	r3, [pc, #24]	@ (8012b18 <tcp_free_listen+0x2c>)
 8012afe:	22df      	movs	r2, #223	@ 0xdf
 8012b00:	4906      	ldr	r1, [pc, #24]	@ (8012b1c <tcp_free_listen+0x30>)
 8012b02:	4807      	ldr	r0, [pc, #28]	@ (8012b20 <tcp_free_listen+0x34>)
 8012b04:	f009 fbae 	bl	801c264 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012b08:	6879      	ldr	r1, [r7, #4]
 8012b0a:	2002      	movs	r0, #2
 8012b0c:	f7fe fe72 	bl	80117f4 <memp_free>
}
 8012b10:	bf00      	nop
 8012b12:	3708      	adds	r7, #8
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	0801e068 	.word	0x0801e068
 8012b1c:	0801e0d4 	.word	0x0801e0d4
 8012b20:	0801e0ac 	.word	0x0801e0ac

08012b24 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012b28:	f000 fea4 	bl	8013874 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012b2c:	4b07      	ldr	r3, [pc, #28]	@ (8012b4c <tcp_tmr+0x28>)
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	3301      	adds	r3, #1
 8012b32:	b2da      	uxtb	r2, r3
 8012b34:	4b05      	ldr	r3, [pc, #20]	@ (8012b4c <tcp_tmr+0x28>)
 8012b36:	701a      	strb	r2, [r3, #0]
 8012b38:	4b04      	ldr	r3, [pc, #16]	@ (8012b4c <tcp_tmr+0x28>)
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	f003 0301 	and.w	r3, r3, #1
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d001      	beq.n	8012b48 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012b44:	f000 fb54 	bl	80131f0 <tcp_slowtmr>
  }
}
 8012b48:	bf00      	nop
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	20027591 	.word	0x20027591

08012b50 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b084      	sub	sp, #16
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012b5a:	683b      	ldr	r3, [r7, #0]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d105      	bne.n	8012b6c <tcp_remove_listener+0x1c>
 8012b60:	4b0d      	ldr	r3, [pc, #52]	@ (8012b98 <tcp_remove_listener+0x48>)
 8012b62:	22ff      	movs	r2, #255	@ 0xff
 8012b64:	490d      	ldr	r1, [pc, #52]	@ (8012b9c <tcp_remove_listener+0x4c>)
 8012b66:	480e      	ldr	r0, [pc, #56]	@ (8012ba0 <tcp_remove_listener+0x50>)
 8012b68:	f009 fb7c 	bl	801c264 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	60fb      	str	r3, [r7, #12]
 8012b70:	e00a      	b.n	8012b88 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012b76:	683a      	ldr	r2, [r7, #0]
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d102      	bne.n	8012b82 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	68db      	ldr	r3, [r3, #12]
 8012b86:	60fb      	str	r3, [r7, #12]
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d1f1      	bne.n	8012b72 <tcp_remove_listener+0x22>
    }
  }
}
 8012b8e:	bf00      	nop
 8012b90:	bf00      	nop
 8012b92:	3710      	adds	r7, #16
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}
 8012b98:	0801e068 	.word	0x0801e068
 8012b9c:	0801e0f0 	.word	0x0801e0f0
 8012ba0:	0801e0ac 	.word	0x0801e0ac

08012ba4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b084      	sub	sp, #16
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d106      	bne.n	8012bc0 <tcp_listen_closed+0x1c>
 8012bb2:	4b14      	ldr	r3, [pc, #80]	@ (8012c04 <tcp_listen_closed+0x60>)
 8012bb4:	f240 1211 	movw	r2, #273	@ 0x111
 8012bb8:	4913      	ldr	r1, [pc, #76]	@ (8012c08 <tcp_listen_closed+0x64>)
 8012bba:	4814      	ldr	r0, [pc, #80]	@ (8012c0c <tcp_listen_closed+0x68>)
 8012bbc:	f009 fb52 	bl	801c264 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	7d1b      	ldrb	r3, [r3, #20]
 8012bc4:	2b01      	cmp	r3, #1
 8012bc6:	d006      	beq.n	8012bd6 <tcp_listen_closed+0x32>
 8012bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8012c04 <tcp_listen_closed+0x60>)
 8012bca:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8012bce:	4910      	ldr	r1, [pc, #64]	@ (8012c10 <tcp_listen_closed+0x6c>)
 8012bd0:	480e      	ldr	r0, [pc, #56]	@ (8012c0c <tcp_listen_closed+0x68>)
 8012bd2:	f009 fb47 	bl	801c264 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	60fb      	str	r3, [r7, #12]
 8012bda:	e00b      	b.n	8012bf4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8012c14 <tcp_listen_closed+0x70>)
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	6879      	ldr	r1, [r7, #4]
 8012be8:	4618      	mov	r0, r3
 8012bea:	f7ff ffb1 	bl	8012b50 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	60fb      	str	r3, [r7, #12]
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	2b03      	cmp	r3, #3
 8012bf8:	d9f0      	bls.n	8012bdc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012bfa:	bf00      	nop
 8012bfc:	bf00      	nop
 8012bfe:	3710      	adds	r7, #16
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}
 8012c04:	0801e068 	.word	0x0801e068
 8012c08:	0801e118 	.word	0x0801e118
 8012c0c:	0801e0ac 	.word	0x0801e0ac
 8012c10:	0801e124 	.word	0x0801e124
 8012c14:	080206f0 	.word	0x080206f0

08012c18 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012c18:	b5b0      	push	{r4, r5, r7, lr}
 8012c1a:	b088      	sub	sp, #32
 8012c1c:	af04      	add	r7, sp, #16
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	460b      	mov	r3, r1
 8012c22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d106      	bne.n	8012c38 <tcp_close_shutdown+0x20>
 8012c2a:	4b63      	ldr	r3, [pc, #396]	@ (8012db8 <tcp_close_shutdown+0x1a0>)
 8012c2c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8012c30:	4962      	ldr	r1, [pc, #392]	@ (8012dbc <tcp_close_shutdown+0x1a4>)
 8012c32:	4863      	ldr	r0, [pc, #396]	@ (8012dc0 <tcp_close_shutdown+0x1a8>)
 8012c34:	f009 fb16 	bl	801c264 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012c38:	78fb      	ldrb	r3, [r7, #3]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d066      	beq.n	8012d0c <tcp_close_shutdown+0xf4>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	7d1b      	ldrb	r3, [r3, #20]
 8012c42:	2b04      	cmp	r3, #4
 8012c44:	d003      	beq.n	8012c4e <tcp_close_shutdown+0x36>
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	7d1b      	ldrb	r3, [r3, #20]
 8012c4a:	2b07      	cmp	r3, #7
 8012c4c:	d15e      	bne.n	8012d0c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d104      	bne.n	8012c60 <tcp_close_shutdown+0x48>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c5a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012c5e:	d055      	beq.n	8012d0c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	8b5b      	ldrh	r3, [r3, #26]
 8012c64:	f003 0310 	and.w	r3, r3, #16
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d106      	bne.n	8012c7a <tcp_close_shutdown+0x62>
 8012c6c:	4b52      	ldr	r3, [pc, #328]	@ (8012db8 <tcp_close_shutdown+0x1a0>)
 8012c6e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8012c72:	4954      	ldr	r1, [pc, #336]	@ (8012dc4 <tcp_close_shutdown+0x1ac>)
 8012c74:	4852      	ldr	r0, [pc, #328]	@ (8012dc0 <tcp_close_shutdown+0x1a8>)
 8012c76:	f009 faf5 	bl	801c264 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012c82:	687d      	ldr	r5, [r7, #4]
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	3304      	adds	r3, #4
 8012c88:	687a      	ldr	r2, [r7, #4]
 8012c8a:	8ad2      	ldrh	r2, [r2, #22]
 8012c8c:	6879      	ldr	r1, [r7, #4]
 8012c8e:	8b09      	ldrh	r1, [r1, #24]
 8012c90:	9102      	str	r1, [sp, #8]
 8012c92:	9201      	str	r2, [sp, #4]
 8012c94:	9300      	str	r3, [sp, #0]
 8012c96:	462b      	mov	r3, r5
 8012c98:	4622      	mov	r2, r4
 8012c9a:	4601      	mov	r1, r0
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f004 fe8d 	bl	80179bc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f001 f8c8 	bl	8013e38 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012ca8:	4b47      	ldr	r3, [pc, #284]	@ (8012dc8 <tcp_close_shutdown+0x1b0>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	687a      	ldr	r2, [r7, #4]
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	d105      	bne.n	8012cbe <tcp_close_shutdown+0xa6>
 8012cb2:	4b45      	ldr	r3, [pc, #276]	@ (8012dc8 <tcp_close_shutdown+0x1b0>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	68db      	ldr	r3, [r3, #12]
 8012cb8:	4a43      	ldr	r2, [pc, #268]	@ (8012dc8 <tcp_close_shutdown+0x1b0>)
 8012cba:	6013      	str	r3, [r2, #0]
 8012cbc:	e013      	b.n	8012ce6 <tcp_close_shutdown+0xce>
 8012cbe:	4b42      	ldr	r3, [pc, #264]	@ (8012dc8 <tcp_close_shutdown+0x1b0>)
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	60fb      	str	r3, [r7, #12]
 8012cc4:	e00c      	b.n	8012ce0 <tcp_close_shutdown+0xc8>
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	68db      	ldr	r3, [r3, #12]
 8012cca:	687a      	ldr	r2, [r7, #4]
 8012ccc:	429a      	cmp	r2, r3
 8012cce:	d104      	bne.n	8012cda <tcp_close_shutdown+0xc2>
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	68da      	ldr	r2, [r3, #12]
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	60da      	str	r2, [r3, #12]
 8012cd8:	e005      	b.n	8012ce6 <tcp_close_shutdown+0xce>
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	68db      	ldr	r3, [r3, #12]
 8012cde:	60fb      	str	r3, [r7, #12]
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d1ef      	bne.n	8012cc6 <tcp_close_shutdown+0xae>
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	2200      	movs	r2, #0
 8012cea:	60da      	str	r2, [r3, #12]
 8012cec:	4b37      	ldr	r3, [pc, #220]	@ (8012dcc <tcp_close_shutdown+0x1b4>)
 8012cee:	2201      	movs	r2, #1
 8012cf0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012cf2:	4b37      	ldr	r3, [pc, #220]	@ (8012dd0 <tcp_close_shutdown+0x1b8>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d102      	bne.n	8012d02 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012cfc:	f003 fd5c 	bl	80167b8 <tcp_trigger_input_pcb_close>
 8012d00:	e002      	b.n	8012d08 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f7ff fed6 	bl	8012ab4 <tcp_free>
      }
      return ERR_OK;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	e050      	b.n	8012dae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	7d1b      	ldrb	r3, [r3, #20]
 8012d10:	2b02      	cmp	r3, #2
 8012d12:	d03b      	beq.n	8012d8c <tcp_close_shutdown+0x174>
 8012d14:	2b02      	cmp	r3, #2
 8012d16:	dc44      	bgt.n	8012da2 <tcp_close_shutdown+0x18a>
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d002      	beq.n	8012d22 <tcp_close_shutdown+0x10a>
 8012d1c:	2b01      	cmp	r3, #1
 8012d1e:	d02a      	beq.n	8012d76 <tcp_close_shutdown+0x15e>
 8012d20:	e03f      	b.n	8012da2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	8adb      	ldrh	r3, [r3, #22]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d021      	beq.n	8012d6e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8012dd4 <tcp_close_shutdown+0x1bc>)
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	687a      	ldr	r2, [r7, #4]
 8012d30:	429a      	cmp	r2, r3
 8012d32:	d105      	bne.n	8012d40 <tcp_close_shutdown+0x128>
 8012d34:	4b27      	ldr	r3, [pc, #156]	@ (8012dd4 <tcp_close_shutdown+0x1bc>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	68db      	ldr	r3, [r3, #12]
 8012d3a:	4a26      	ldr	r2, [pc, #152]	@ (8012dd4 <tcp_close_shutdown+0x1bc>)
 8012d3c:	6013      	str	r3, [r2, #0]
 8012d3e:	e013      	b.n	8012d68 <tcp_close_shutdown+0x150>
 8012d40:	4b24      	ldr	r3, [pc, #144]	@ (8012dd4 <tcp_close_shutdown+0x1bc>)
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	60bb      	str	r3, [r7, #8]
 8012d46:	e00c      	b.n	8012d62 <tcp_close_shutdown+0x14a>
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	68db      	ldr	r3, [r3, #12]
 8012d4c:	687a      	ldr	r2, [r7, #4]
 8012d4e:	429a      	cmp	r2, r3
 8012d50:	d104      	bne.n	8012d5c <tcp_close_shutdown+0x144>
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	68da      	ldr	r2, [r3, #12]
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	60da      	str	r2, [r3, #12]
 8012d5a:	e005      	b.n	8012d68 <tcp_close_shutdown+0x150>
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	60bb      	str	r3, [r7, #8]
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d1ef      	bne.n	8012d48 <tcp_close_shutdown+0x130>
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012d6e:	6878      	ldr	r0, [r7, #4]
 8012d70:	f7ff fea0 	bl	8012ab4 <tcp_free>
      break;
 8012d74:	e01a      	b.n	8012dac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f7ff ff14 	bl	8012ba4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012d7c:	6879      	ldr	r1, [r7, #4]
 8012d7e:	4816      	ldr	r0, [pc, #88]	@ (8012dd8 <tcp_close_shutdown+0x1c0>)
 8012d80:	f001 f8aa 	bl	8013ed8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f7ff feb1 	bl	8012aec <tcp_free_listen>
      break;
 8012d8a:	e00f      	b.n	8012dac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012d8c:	6879      	ldr	r1, [r7, #4]
 8012d8e:	480e      	ldr	r0, [pc, #56]	@ (8012dc8 <tcp_close_shutdown+0x1b0>)
 8012d90:	f001 f8a2 	bl	8013ed8 <tcp_pcb_remove>
 8012d94:	4b0d      	ldr	r3, [pc, #52]	@ (8012dcc <tcp_close_shutdown+0x1b4>)
 8012d96:	2201      	movs	r2, #1
 8012d98:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f7ff fe8a 	bl	8012ab4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012da0:	e004      	b.n	8012dac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	f000 f81a 	bl	8012ddc <tcp_close_shutdown_fin>
 8012da8:	4603      	mov	r3, r0
 8012daa:	e000      	b.n	8012dae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012dac:	2300      	movs	r3, #0
}
 8012dae:	4618      	mov	r0, r3
 8012db0:	3710      	adds	r7, #16
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bdb0      	pop	{r4, r5, r7, pc}
 8012db6:	bf00      	nop
 8012db8:	0801e068 	.word	0x0801e068
 8012dbc:	0801e13c 	.word	0x0801e13c
 8012dc0:	0801e0ac 	.word	0x0801e0ac
 8012dc4:	0801e15c 	.word	0x0801e15c
 8012dc8:	20027588 	.word	0x20027588
 8012dcc:	20027590 	.word	0x20027590
 8012dd0:	200275c8 	.word	0x200275c8
 8012dd4:	20027580 	.word	0x20027580
 8012dd8:	20027584 	.word	0x20027584

08012ddc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b084      	sub	sp, #16
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d106      	bne.n	8012df8 <tcp_close_shutdown_fin+0x1c>
 8012dea:	4b2e      	ldr	r3, [pc, #184]	@ (8012ea4 <tcp_close_shutdown_fin+0xc8>)
 8012dec:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8012df0:	492d      	ldr	r1, [pc, #180]	@ (8012ea8 <tcp_close_shutdown_fin+0xcc>)
 8012df2:	482e      	ldr	r0, [pc, #184]	@ (8012eac <tcp_close_shutdown_fin+0xd0>)
 8012df4:	f009 fa36 	bl	801c264 <iprintf>

  switch (pcb->state) {
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	7d1b      	ldrb	r3, [r3, #20]
 8012dfc:	2b07      	cmp	r3, #7
 8012dfe:	d020      	beq.n	8012e42 <tcp_close_shutdown_fin+0x66>
 8012e00:	2b07      	cmp	r3, #7
 8012e02:	dc2b      	bgt.n	8012e5c <tcp_close_shutdown_fin+0x80>
 8012e04:	2b03      	cmp	r3, #3
 8012e06:	d002      	beq.n	8012e0e <tcp_close_shutdown_fin+0x32>
 8012e08:	2b04      	cmp	r3, #4
 8012e0a:	d00d      	beq.n	8012e28 <tcp_close_shutdown_fin+0x4c>
 8012e0c:	e026      	b.n	8012e5c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f003 fee2 	bl	8016bd8 <tcp_send_fin>
 8012e14:	4603      	mov	r3, r0
 8012e16:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d11f      	bne.n	8012e60 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2205      	movs	r2, #5
 8012e24:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012e26:	e01b      	b.n	8012e60 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f003 fed5 	bl	8016bd8 <tcp_send_fin>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d114      	bne.n	8012e64 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2205      	movs	r2, #5
 8012e3e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012e40:	e010      	b.n	8012e64 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f003 fec8 	bl	8016bd8 <tcp_send_fin>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d109      	bne.n	8012e68 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2209      	movs	r2, #9
 8012e58:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012e5a:	e005      	b.n	8012e68 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	e01c      	b.n	8012e9a <tcp_close_shutdown_fin+0xbe>
      break;
 8012e60:	bf00      	nop
 8012e62:	e002      	b.n	8012e6a <tcp_close_shutdown_fin+0x8e>
      break;
 8012e64:	bf00      	nop
 8012e66:	e000      	b.n	8012e6a <tcp_close_shutdown_fin+0x8e>
      break;
 8012e68:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d103      	bne.n	8012e7a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012e72:	6878      	ldr	r0, [r7, #4]
 8012e74:	f003 ffee 	bl	8016e54 <tcp_output>
 8012e78:	e00d      	b.n	8012e96 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e82:	d108      	bne.n	8012e96 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	8b5b      	ldrh	r3, [r3, #26]
 8012e88:	f043 0308 	orr.w	r3, r3, #8
 8012e8c:	b29a      	uxth	r2, r3
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012e92:	2300      	movs	r3, #0
 8012e94:	e001      	b.n	8012e9a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3710      	adds	r7, #16
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	0801e068 	.word	0x0801e068
 8012ea8:	0801e118 	.word	0x0801e118
 8012eac:	0801e0ac 	.word	0x0801e0ac

08012eb0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b082      	sub	sp, #8
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d109      	bne.n	8012ed2 <tcp_close+0x22>
 8012ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8012efc <tcp_close+0x4c>)
 8012ec0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8012ec4:	490e      	ldr	r1, [pc, #56]	@ (8012f00 <tcp_close+0x50>)
 8012ec6:	480f      	ldr	r0, [pc, #60]	@ (8012f04 <tcp_close+0x54>)
 8012ec8:	f009 f9cc 	bl	801c264 <iprintf>
 8012ecc:	f06f 030f 	mvn.w	r3, #15
 8012ed0:	e00f      	b.n	8012ef2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	7d1b      	ldrb	r3, [r3, #20]
 8012ed6:	2b01      	cmp	r3, #1
 8012ed8:	d006      	beq.n	8012ee8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	8b5b      	ldrh	r3, [r3, #26]
 8012ede:	f043 0310 	orr.w	r3, r3, #16
 8012ee2:	b29a      	uxth	r2, r3
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012ee8:	2101      	movs	r1, #1
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f7ff fe94 	bl	8012c18 <tcp_close_shutdown>
 8012ef0:	4603      	mov	r3, r0
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3708      	adds	r7, #8
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}
 8012efa:	bf00      	nop
 8012efc:	0801e068 	.word	0x0801e068
 8012f00:	0801e178 	.word	0x0801e178
 8012f04:	0801e0ac 	.word	0x0801e0ac

08012f08 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b08e      	sub	sp, #56	@ 0x38
 8012f0c:	af04      	add	r7, sp, #16
 8012f0e:	6078      	str	r0, [r7, #4]
 8012f10:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d107      	bne.n	8012f28 <tcp_abandon+0x20>
 8012f18:	4b52      	ldr	r3, [pc, #328]	@ (8013064 <tcp_abandon+0x15c>)
 8012f1a:	f240 223d 	movw	r2, #573	@ 0x23d
 8012f1e:	4952      	ldr	r1, [pc, #328]	@ (8013068 <tcp_abandon+0x160>)
 8012f20:	4852      	ldr	r0, [pc, #328]	@ (801306c <tcp_abandon+0x164>)
 8012f22:	f009 f99f 	bl	801c264 <iprintf>
 8012f26:	e099      	b.n	801305c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	7d1b      	ldrb	r3, [r3, #20]
 8012f2c:	2b01      	cmp	r3, #1
 8012f2e:	d106      	bne.n	8012f3e <tcp_abandon+0x36>
 8012f30:	4b4c      	ldr	r3, [pc, #304]	@ (8013064 <tcp_abandon+0x15c>)
 8012f32:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8012f36:	494e      	ldr	r1, [pc, #312]	@ (8013070 <tcp_abandon+0x168>)
 8012f38:	484c      	ldr	r0, [pc, #304]	@ (801306c <tcp_abandon+0x164>)
 8012f3a:	f009 f993 	bl	801c264 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	7d1b      	ldrb	r3, [r3, #20]
 8012f42:	2b0a      	cmp	r3, #10
 8012f44:	d107      	bne.n	8012f56 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012f46:	6879      	ldr	r1, [r7, #4]
 8012f48:	484a      	ldr	r0, [pc, #296]	@ (8013074 <tcp_abandon+0x16c>)
 8012f4a:	f000 ffc5 	bl	8013ed8 <tcp_pcb_remove>
    tcp_free(pcb);
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f7ff fdb0 	bl	8012ab4 <tcp_free>
 8012f54:	e082      	b.n	801305c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012f56:	2300      	movs	r3, #0
 8012f58:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f62:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f68:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012f70:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	691b      	ldr	r3, [r3, #16]
 8012f76:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	7d1b      	ldrb	r3, [r3, #20]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d126      	bne.n	8012fce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	8adb      	ldrh	r3, [r3, #22]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d02e      	beq.n	8012fe6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012f88:	4b3b      	ldr	r3, [pc, #236]	@ (8013078 <tcp_abandon+0x170>)
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	687a      	ldr	r2, [r7, #4]
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	d105      	bne.n	8012f9e <tcp_abandon+0x96>
 8012f92:	4b39      	ldr	r3, [pc, #228]	@ (8013078 <tcp_abandon+0x170>)
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	68db      	ldr	r3, [r3, #12]
 8012f98:	4a37      	ldr	r2, [pc, #220]	@ (8013078 <tcp_abandon+0x170>)
 8012f9a:	6013      	str	r3, [r2, #0]
 8012f9c:	e013      	b.n	8012fc6 <tcp_abandon+0xbe>
 8012f9e:	4b36      	ldr	r3, [pc, #216]	@ (8013078 <tcp_abandon+0x170>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	61fb      	str	r3, [r7, #28]
 8012fa4:	e00c      	b.n	8012fc0 <tcp_abandon+0xb8>
 8012fa6:	69fb      	ldr	r3, [r7, #28]
 8012fa8:	68db      	ldr	r3, [r3, #12]
 8012faa:	687a      	ldr	r2, [r7, #4]
 8012fac:	429a      	cmp	r2, r3
 8012fae:	d104      	bne.n	8012fba <tcp_abandon+0xb2>
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	68da      	ldr	r2, [r3, #12]
 8012fb4:	69fb      	ldr	r3, [r7, #28]
 8012fb6:	60da      	str	r2, [r3, #12]
 8012fb8:	e005      	b.n	8012fc6 <tcp_abandon+0xbe>
 8012fba:	69fb      	ldr	r3, [r7, #28]
 8012fbc:	68db      	ldr	r3, [r3, #12]
 8012fbe:	61fb      	str	r3, [r7, #28]
 8012fc0:	69fb      	ldr	r3, [r7, #28]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d1ef      	bne.n	8012fa6 <tcp_abandon+0x9e>
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2200      	movs	r2, #0
 8012fca:	60da      	str	r2, [r3, #12]
 8012fcc:	e00b      	b.n	8012fe6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	8adb      	ldrh	r3, [r3, #22]
 8012fd6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012fd8:	6879      	ldr	r1, [r7, #4]
 8012fda:	4828      	ldr	r0, [pc, #160]	@ (801307c <tcp_abandon+0x174>)
 8012fdc:	f000 ff7c 	bl	8013ed8 <tcp_pcb_remove>
 8012fe0:	4b27      	ldr	r3, [pc, #156]	@ (8013080 <tcp_abandon+0x178>)
 8012fe2:	2201      	movs	r2, #1
 8012fe4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d004      	beq.n	8012ff8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f000 fd1e 	bl	8013a34 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d004      	beq.n	801300a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013004:	4618      	mov	r0, r3
 8013006:	f000 fd15 	bl	8013a34 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801300e:	2b00      	cmp	r3, #0
 8013010:	d004      	beq.n	801301c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013016:	4618      	mov	r0, r3
 8013018:	f000 fd0c 	bl	8013a34 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801301e:	2b00      	cmp	r3, #0
 8013020:	d00e      	beq.n	8013040 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013022:	6879      	ldr	r1, [r7, #4]
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	3304      	adds	r3, #4
 8013028:	687a      	ldr	r2, [r7, #4]
 801302a:	8b12      	ldrh	r2, [r2, #24]
 801302c:	9202      	str	r2, [sp, #8]
 801302e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013030:	9201      	str	r2, [sp, #4]
 8013032:	9300      	str	r3, [sp, #0]
 8013034:	460b      	mov	r3, r1
 8013036:	697a      	ldr	r2, [r7, #20]
 8013038:	69b9      	ldr	r1, [r7, #24]
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f004 fcbe 	bl	80179bc <tcp_rst>
    }
    last_state = pcb->state;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	7d1b      	ldrb	r3, [r3, #20]
 8013044:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f7ff fd34 	bl	8012ab4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801304c:	693b      	ldr	r3, [r7, #16]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d004      	beq.n	801305c <tcp_abandon+0x154>
 8013052:	693b      	ldr	r3, [r7, #16]
 8013054:	f06f 010c 	mvn.w	r1, #12
 8013058:	68f8      	ldr	r0, [r7, #12]
 801305a:	4798      	blx	r3
  }
}
 801305c:	3728      	adds	r7, #40	@ 0x28
 801305e:	46bd      	mov	sp, r7
 8013060:	bd80      	pop	{r7, pc}
 8013062:	bf00      	nop
 8013064:	0801e068 	.word	0x0801e068
 8013068:	0801e1ac 	.word	0x0801e1ac
 801306c:	0801e0ac 	.word	0x0801e0ac
 8013070:	0801e1c8 	.word	0x0801e1c8
 8013074:	2002758c 	.word	0x2002758c
 8013078:	20027580 	.word	0x20027580
 801307c:	20027588 	.word	0x20027588
 8013080:	20027590 	.word	0x20027590

08013084 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801308c:	2101      	movs	r1, #1
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f7ff ff3a 	bl	8012f08 <tcp_abandon>
}
 8013094:	bf00      	nop
 8013096:	3708      	adds	r7, #8
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}

0801309c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b084      	sub	sp, #16
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d106      	bne.n	80130b8 <tcp_update_rcv_ann_wnd+0x1c>
 80130aa:	4b25      	ldr	r3, [pc, #148]	@ (8013140 <tcp_update_rcv_ann_wnd+0xa4>)
 80130ac:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80130b0:	4924      	ldr	r1, [pc, #144]	@ (8013144 <tcp_update_rcv_ann_wnd+0xa8>)
 80130b2:	4825      	ldr	r0, [pc, #148]	@ (8013148 <tcp_update_rcv_ann_wnd+0xac>)
 80130b4:	f009 f8d6 	bl	801c264 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130bc:	687a      	ldr	r2, [r7, #4]
 80130be:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80130c0:	4413      	add	r3, r2
 80130c2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130c8:	687a      	ldr	r2, [r7, #4]
 80130ca:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80130cc:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80130d0:	bf28      	it	cs
 80130d2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80130d6:	b292      	uxth	r2, r2
 80130d8:	4413      	add	r3, r2
 80130da:	68fa      	ldr	r2, [r7, #12]
 80130dc:	1ad3      	subs	r3, r2, r3
 80130de:	2b00      	cmp	r3, #0
 80130e0:	db08      	blt.n	80130f4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130ee:	68fa      	ldr	r2, [r7, #12]
 80130f0:	1ad3      	subs	r3, r2, r3
 80130f2:	e020      	b.n	8013136 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130fc:	1ad3      	subs	r3, r2, r3
 80130fe:	2b00      	cmp	r3, #0
 8013100:	dd03      	ble.n	801310a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2200      	movs	r2, #0
 8013106:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013108:	e014      	b.n	8013134 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013112:	1ad3      	subs	r3, r2, r3
 8013114:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801311c:	d306      	bcc.n	801312c <tcp_update_rcv_ann_wnd+0x90>
 801311e:	4b08      	ldr	r3, [pc, #32]	@ (8013140 <tcp_update_rcv_ann_wnd+0xa4>)
 8013120:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8013124:	4909      	ldr	r1, [pc, #36]	@ (801314c <tcp_update_rcv_ann_wnd+0xb0>)
 8013126:	4808      	ldr	r0, [pc, #32]	@ (8013148 <tcp_update_rcv_ann_wnd+0xac>)
 8013128:	f009 f89c 	bl	801c264 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	b29a      	uxth	r2, r3
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8013134:	2300      	movs	r3, #0
  }
}
 8013136:	4618      	mov	r0, r3
 8013138:	3710      	adds	r7, #16
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}
 801313e:	bf00      	nop
 8013140:	0801e068 	.word	0x0801e068
 8013144:	0801e2c4 	.word	0x0801e2c4
 8013148:	0801e0ac 	.word	0x0801e0ac
 801314c:	0801e2e8 	.word	0x0801e2e8

08013150 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b084      	sub	sp, #16
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	460b      	mov	r3, r1
 801315a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d107      	bne.n	8013172 <tcp_recved+0x22>
 8013162:	4b1f      	ldr	r3, [pc, #124]	@ (80131e0 <tcp_recved+0x90>)
 8013164:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8013168:	491e      	ldr	r1, [pc, #120]	@ (80131e4 <tcp_recved+0x94>)
 801316a:	481f      	ldr	r0, [pc, #124]	@ (80131e8 <tcp_recved+0x98>)
 801316c:	f009 f87a 	bl	801c264 <iprintf>
 8013170:	e032      	b.n	80131d8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	7d1b      	ldrb	r3, [r3, #20]
 8013176:	2b01      	cmp	r3, #1
 8013178:	d106      	bne.n	8013188 <tcp_recved+0x38>
 801317a:	4b19      	ldr	r3, [pc, #100]	@ (80131e0 <tcp_recved+0x90>)
 801317c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8013180:	491a      	ldr	r1, [pc, #104]	@ (80131ec <tcp_recved+0x9c>)
 8013182:	4819      	ldr	r0, [pc, #100]	@ (80131e8 <tcp_recved+0x98>)
 8013184:	f009 f86e 	bl	801c264 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801318c:	887b      	ldrh	r3, [r7, #2]
 801318e:	4413      	add	r3, r2
 8013190:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013192:	89fb      	ldrh	r3, [r7, #14]
 8013194:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013198:	d804      	bhi.n	80131a4 <tcp_recved+0x54>
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801319e:	89fa      	ldrh	r2, [r7, #14]
 80131a0:	429a      	cmp	r2, r3
 80131a2:	d204      	bcs.n	80131ae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80131aa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80131ac:	e002      	b.n	80131b4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	89fa      	ldrh	r2, [r7, #14]
 80131b2:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f7ff ff71 	bl	801309c <tcp_update_rcv_ann_wnd>
 80131ba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80131c2:	d309      	bcc.n	80131d8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	8b5b      	ldrh	r3, [r3, #26]
 80131c8:	f043 0302 	orr.w	r3, r3, #2
 80131cc:	b29a      	uxth	r2, r3
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f003 fe3e 	bl	8016e54 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80131d8:	3710      	adds	r7, #16
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
 80131de:	bf00      	nop
 80131e0:	0801e068 	.word	0x0801e068
 80131e4:	0801e304 	.word	0x0801e304
 80131e8:	0801e0ac 	.word	0x0801e0ac
 80131ec:	0801e31c 	.word	0x0801e31c

080131f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80131f0:	b5b0      	push	{r4, r5, r7, lr}
 80131f2:	b090      	sub	sp, #64	@ 0x40
 80131f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80131f6:	2300      	movs	r3, #0
 80131f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80131fc:	4b95      	ldr	r3, [pc, #596]	@ (8013454 <tcp_slowtmr+0x264>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	3301      	adds	r3, #1
 8013202:	4a94      	ldr	r2, [pc, #592]	@ (8013454 <tcp_slowtmr+0x264>)
 8013204:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013206:	4b94      	ldr	r3, [pc, #592]	@ (8013458 <tcp_slowtmr+0x268>)
 8013208:	781b      	ldrb	r3, [r3, #0]
 801320a:	3301      	adds	r3, #1
 801320c:	b2da      	uxtb	r2, r3
 801320e:	4b92      	ldr	r3, [pc, #584]	@ (8013458 <tcp_slowtmr+0x268>)
 8013210:	701a      	strb	r2, [r3, #0]
 8013212:	e000      	b.n	8013216 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8013214:	bf00      	nop
  prev = NULL;
 8013216:	2300      	movs	r3, #0
 8013218:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801321a:	4b90      	ldr	r3, [pc, #576]	@ (801345c <tcp_slowtmr+0x26c>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013220:	e29d      	b.n	801375e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013224:	7d1b      	ldrb	r3, [r3, #20]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d106      	bne.n	8013238 <tcp_slowtmr+0x48>
 801322a:	4b8d      	ldr	r3, [pc, #564]	@ (8013460 <tcp_slowtmr+0x270>)
 801322c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8013230:	498c      	ldr	r1, [pc, #560]	@ (8013464 <tcp_slowtmr+0x274>)
 8013232:	488d      	ldr	r0, [pc, #564]	@ (8013468 <tcp_slowtmr+0x278>)
 8013234:	f009 f816 	bl	801c264 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801323a:	7d1b      	ldrb	r3, [r3, #20]
 801323c:	2b01      	cmp	r3, #1
 801323e:	d106      	bne.n	801324e <tcp_slowtmr+0x5e>
 8013240:	4b87      	ldr	r3, [pc, #540]	@ (8013460 <tcp_slowtmr+0x270>)
 8013242:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8013246:	4989      	ldr	r1, [pc, #548]	@ (801346c <tcp_slowtmr+0x27c>)
 8013248:	4887      	ldr	r0, [pc, #540]	@ (8013468 <tcp_slowtmr+0x278>)
 801324a:	f009 f80b 	bl	801c264 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801324e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013250:	7d1b      	ldrb	r3, [r3, #20]
 8013252:	2b0a      	cmp	r3, #10
 8013254:	d106      	bne.n	8013264 <tcp_slowtmr+0x74>
 8013256:	4b82      	ldr	r3, [pc, #520]	@ (8013460 <tcp_slowtmr+0x270>)
 8013258:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801325c:	4984      	ldr	r1, [pc, #528]	@ (8013470 <tcp_slowtmr+0x280>)
 801325e:	4882      	ldr	r0, [pc, #520]	@ (8013468 <tcp_slowtmr+0x278>)
 8013260:	f009 f800 	bl	801c264 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013266:	7f9a      	ldrb	r2, [r3, #30]
 8013268:	4b7b      	ldr	r3, [pc, #492]	@ (8013458 <tcp_slowtmr+0x268>)
 801326a:	781b      	ldrb	r3, [r3, #0]
 801326c:	429a      	cmp	r2, r3
 801326e:	d105      	bne.n	801327c <tcp_slowtmr+0x8c>
      prev = pcb;
 8013270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013272:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013276:	68db      	ldr	r3, [r3, #12]
 8013278:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801327a:	e270      	b.n	801375e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801327c:	4b76      	ldr	r3, [pc, #472]	@ (8013458 <tcp_slowtmr+0x268>)
 801327e:	781a      	ldrb	r2, [r3, #0]
 8013280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013282:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8013284:	2300      	movs	r3, #0
 8013286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801328a:	2300      	movs	r3, #0
 801328c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013292:	7d1b      	ldrb	r3, [r3, #20]
 8013294:	2b02      	cmp	r3, #2
 8013296:	d10a      	bne.n	80132ae <tcp_slowtmr+0xbe>
 8013298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801329a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801329e:	2b05      	cmp	r3, #5
 80132a0:	d905      	bls.n	80132ae <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80132a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80132a6:	3301      	adds	r3, #1
 80132a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80132ac:	e11e      	b.n	80134ec <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80132ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80132b4:	2b0b      	cmp	r3, #11
 80132b6:	d905      	bls.n	80132c4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80132b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80132bc:	3301      	adds	r3, #1
 80132be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80132c2:	e113      	b.n	80134ec <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80132c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132c6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d075      	beq.n	80133ba <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80132ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d006      	beq.n	80132e4 <tcp_slowtmr+0xf4>
 80132d6:	4b62      	ldr	r3, [pc, #392]	@ (8013460 <tcp_slowtmr+0x270>)
 80132d8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80132dc:	4965      	ldr	r1, [pc, #404]	@ (8013474 <tcp_slowtmr+0x284>)
 80132de:	4862      	ldr	r0, [pc, #392]	@ (8013468 <tcp_slowtmr+0x278>)
 80132e0:	f008 ffc0 	bl	801c264 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80132e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d106      	bne.n	80132fa <tcp_slowtmr+0x10a>
 80132ec:	4b5c      	ldr	r3, [pc, #368]	@ (8013460 <tcp_slowtmr+0x270>)
 80132ee:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80132f2:	4961      	ldr	r1, [pc, #388]	@ (8013478 <tcp_slowtmr+0x288>)
 80132f4:	485c      	ldr	r0, [pc, #368]	@ (8013468 <tcp_slowtmr+0x278>)
 80132f6:	f008 ffb5 	bl	801c264 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80132fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132fc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013300:	2b0b      	cmp	r3, #11
 8013302:	d905      	bls.n	8013310 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8013304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013308:	3301      	adds	r3, #1
 801330a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801330e:	e0ed      	b.n	80134ec <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013312:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013316:	3b01      	subs	r3, #1
 8013318:	4a58      	ldr	r2, [pc, #352]	@ (801347c <tcp_slowtmr+0x28c>)
 801331a:	5cd3      	ldrb	r3, [r2, r3]
 801331c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801331e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013320:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013324:	7c7a      	ldrb	r2, [r7, #17]
 8013326:	429a      	cmp	r2, r3
 8013328:	d907      	bls.n	801333a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801332a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801332c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013330:	3301      	adds	r3, #1
 8013332:	b2da      	uxtb	r2, r3
 8013334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013336:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801333a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801333c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013340:	7c7a      	ldrb	r2, [r7, #17]
 8013342:	429a      	cmp	r2, r3
 8013344:	f200 80d2 	bhi.w	80134ec <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8013348:	2301      	movs	r3, #1
 801334a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801334c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801334e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013352:	2b00      	cmp	r3, #0
 8013354:	d108      	bne.n	8013368 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013356:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013358:	f004 fc24 	bl	8017ba4 <tcp_zero_window_probe>
 801335c:	4603      	mov	r3, r0
 801335e:	2b00      	cmp	r3, #0
 8013360:	d014      	beq.n	801338c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8013362:	2300      	movs	r3, #0
 8013364:	623b      	str	r3, [r7, #32]
 8013366:	e011      	b.n	801338c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801336a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801336e:	4619      	mov	r1, r3
 8013370:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013372:	f003 fae9 	bl	8016948 <tcp_split_unsent_seg>
 8013376:	4603      	mov	r3, r0
 8013378:	2b00      	cmp	r3, #0
 801337a:	d107      	bne.n	801338c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801337c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801337e:	f003 fd69 	bl	8016e54 <tcp_output>
 8013382:	4603      	mov	r3, r0
 8013384:	2b00      	cmp	r3, #0
 8013386:	d101      	bne.n	801338c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8013388:	2300      	movs	r3, #0
 801338a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801338c:	6a3b      	ldr	r3, [r7, #32]
 801338e:	2b00      	cmp	r3, #0
 8013390:	f000 80ac 	beq.w	80134ec <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8013394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013396:	2200      	movs	r2, #0
 8013398:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801339c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801339e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80133a2:	2b06      	cmp	r3, #6
 80133a4:	f200 80a2 	bhi.w	80134ec <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80133a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133aa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80133ae:	3301      	adds	r3, #1
 80133b0:	b2da      	uxtb	r2, r3
 80133b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133b4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80133b8:	e098      	b.n	80134ec <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80133ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	db0f      	blt.n	80133e4 <tcp_slowtmr+0x1f4>
 80133c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80133ca:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80133ce:	4293      	cmp	r3, r2
 80133d0:	d008      	beq.n	80133e4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80133d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80133d8:	b29b      	uxth	r3, r3
 80133da:	3301      	adds	r3, #1
 80133dc:	b29b      	uxth	r3, r3
 80133de:	b21a      	sxth	r2, r3
 80133e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133e2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80133e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133e6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80133ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ec:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80133f0:	429a      	cmp	r2, r3
 80133f2:	db7b      	blt.n	80134ec <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80133f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80133f6:	f004 f821 	bl	801743c <tcp_rexmit_rto_prepare>
 80133fa:	4603      	mov	r3, r0
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d007      	beq.n	8013410 <tcp_slowtmr+0x220>
 8013400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013404:	2b00      	cmp	r3, #0
 8013406:	d171      	bne.n	80134ec <tcp_slowtmr+0x2fc>
 8013408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801340a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801340c:	2b00      	cmp	r3, #0
 801340e:	d06d      	beq.n	80134ec <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8013410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013412:	7d1b      	ldrb	r3, [r3, #20]
 8013414:	2b02      	cmp	r3, #2
 8013416:	d03a      	beq.n	801348e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801341a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801341e:	2b0c      	cmp	r3, #12
 8013420:	bf28      	it	cs
 8013422:	230c      	movcs	r3, #12
 8013424:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013428:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801342c:	10db      	asrs	r3, r3, #3
 801342e:	b21b      	sxth	r3, r3
 8013430:	461a      	mov	r2, r3
 8013432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013434:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013438:	4413      	add	r3, r2
 801343a:	7efa      	ldrb	r2, [r7, #27]
 801343c:	4910      	ldr	r1, [pc, #64]	@ (8013480 <tcp_slowtmr+0x290>)
 801343e:	5c8a      	ldrb	r2, [r1, r2]
 8013440:	4093      	lsls	r3, r2
 8013442:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801344a:	4293      	cmp	r3, r2
 801344c:	dc1a      	bgt.n	8013484 <tcp_slowtmr+0x294>
 801344e:	697b      	ldr	r3, [r7, #20]
 8013450:	b21a      	sxth	r2, r3
 8013452:	e019      	b.n	8013488 <tcp_slowtmr+0x298>
 8013454:	2002757c 	.word	0x2002757c
 8013458:	20027592 	.word	0x20027592
 801345c:	20027588 	.word	0x20027588
 8013460:	0801e068 	.word	0x0801e068
 8013464:	0801e3ac 	.word	0x0801e3ac
 8013468:	0801e0ac 	.word	0x0801e0ac
 801346c:	0801e3d8 	.word	0x0801e3d8
 8013470:	0801e404 	.word	0x0801e404
 8013474:	0801e434 	.word	0x0801e434
 8013478:	0801e468 	.word	0x0801e468
 801347c:	080206e8 	.word	0x080206e8
 8013480:	080206d8 	.word	0x080206d8
 8013484:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801348a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801348e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013490:	2200      	movs	r2, #0
 8013492:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013496:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801349a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801349c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80134a0:	4293      	cmp	r3, r2
 80134a2:	bf28      	it	cs
 80134a4:	4613      	movcs	r3, r2
 80134a6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80134a8:	8a7b      	ldrh	r3, [r7, #18]
 80134aa:	085b      	lsrs	r3, r3, #1
 80134ac:	b29a      	uxth	r2, r3
 80134ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134b0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80134b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80134ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80134be:	005b      	lsls	r3, r3, #1
 80134c0:	b29b      	uxth	r3, r3
 80134c2:	429a      	cmp	r2, r3
 80134c4:	d206      	bcs.n	80134d4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80134c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80134ca:	005b      	lsls	r3, r3, #1
 80134cc:	b29a      	uxth	r2, r3
 80134ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80134d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134d6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80134d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134da:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80134de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134e0:	2200      	movs	r2, #0
 80134e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80134e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80134e8:	f004 f818 	bl	801751c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80134ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134ee:	7d1b      	ldrb	r3, [r3, #20]
 80134f0:	2b06      	cmp	r3, #6
 80134f2:	d111      	bne.n	8013518 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80134f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134f6:	8b5b      	ldrh	r3, [r3, #26]
 80134f8:	f003 0310 	and.w	r3, r3, #16
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d00b      	beq.n	8013518 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013500:	4b9c      	ldr	r3, [pc, #624]	@ (8013774 <tcp_slowtmr+0x584>)
 8013502:	681a      	ldr	r2, [r3, #0]
 8013504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013506:	6a1b      	ldr	r3, [r3, #32]
 8013508:	1ad3      	subs	r3, r2, r3
 801350a:	2b28      	cmp	r3, #40	@ 0x28
 801350c:	d904      	bls.n	8013518 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801350e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013512:	3301      	adds	r3, #1
 8013514:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801351a:	7a5b      	ldrb	r3, [r3, #9]
 801351c:	f003 0308 	and.w	r3, r3, #8
 8013520:	2b00      	cmp	r3, #0
 8013522:	d04a      	beq.n	80135ba <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8013524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013526:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013528:	2b04      	cmp	r3, #4
 801352a:	d003      	beq.n	8013534 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801352c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801352e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013530:	2b07      	cmp	r3, #7
 8013532:	d142      	bne.n	80135ba <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013534:	4b8f      	ldr	r3, [pc, #572]	@ (8013774 <tcp_slowtmr+0x584>)
 8013536:	681a      	ldr	r2, [r3, #0]
 8013538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801353a:	6a1b      	ldr	r3, [r3, #32]
 801353c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801353e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013540:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8013544:	4b8c      	ldr	r3, [pc, #560]	@ (8013778 <tcp_slowtmr+0x588>)
 8013546:	440b      	add	r3, r1
 8013548:	498c      	ldr	r1, [pc, #560]	@ (801377c <tcp_slowtmr+0x58c>)
 801354a:	fba1 1303 	umull	r1, r3, r1, r3
 801354e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013550:	429a      	cmp	r2, r3
 8013552:	d90a      	bls.n	801356a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8013554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013558:	3301      	adds	r3, #1
 801355a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801355e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013562:	3301      	adds	r3, #1
 8013564:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013568:	e027      	b.n	80135ba <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801356a:	4b82      	ldr	r3, [pc, #520]	@ (8013774 <tcp_slowtmr+0x584>)
 801356c:	681a      	ldr	r2, [r3, #0]
 801356e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013570:	6a1b      	ldr	r3, [r3, #32]
 8013572:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013576:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801357a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801357c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8013580:	4618      	mov	r0, r3
 8013582:	4b7f      	ldr	r3, [pc, #508]	@ (8013780 <tcp_slowtmr+0x590>)
 8013584:	fb00 f303 	mul.w	r3, r0, r3
 8013588:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801358a:	497c      	ldr	r1, [pc, #496]	@ (801377c <tcp_slowtmr+0x58c>)
 801358c:	fba1 1303 	umull	r1, r3, r1, r3
 8013590:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013592:	429a      	cmp	r2, r3
 8013594:	d911      	bls.n	80135ba <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8013596:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013598:	f004 fac4 	bl	8017b24 <tcp_keepalive>
 801359c:	4603      	mov	r3, r0
 801359e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80135a2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d107      	bne.n	80135ba <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80135aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135ac:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80135b0:	3301      	adds	r3, #1
 80135b2:	b2da      	uxtb	r2, r3
 80135b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135b6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80135ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d011      	beq.n	80135e6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80135c2:	4b6c      	ldr	r3, [pc, #432]	@ (8013774 <tcp_slowtmr+0x584>)
 80135c4:	681a      	ldr	r2, [r3, #0]
 80135c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135c8:	6a1b      	ldr	r3, [r3, #32]
 80135ca:	1ad2      	subs	r2, r2, r3
 80135cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135ce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80135d2:	4619      	mov	r1, r3
 80135d4:	460b      	mov	r3, r1
 80135d6:	005b      	lsls	r3, r3, #1
 80135d8:	440b      	add	r3, r1
 80135da:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80135dc:	429a      	cmp	r2, r3
 80135de:	d302      	bcc.n	80135e6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80135e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80135e2:	f000 fddd 	bl	80141a0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80135e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135e8:	7d1b      	ldrb	r3, [r3, #20]
 80135ea:	2b03      	cmp	r3, #3
 80135ec:	d10b      	bne.n	8013606 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80135ee:	4b61      	ldr	r3, [pc, #388]	@ (8013774 <tcp_slowtmr+0x584>)
 80135f0:	681a      	ldr	r2, [r3, #0]
 80135f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135f4:	6a1b      	ldr	r3, [r3, #32]
 80135f6:	1ad3      	subs	r3, r2, r3
 80135f8:	2b28      	cmp	r3, #40	@ 0x28
 80135fa:	d904      	bls.n	8013606 <tcp_slowtmr+0x416>
        ++pcb_remove;
 80135fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013600:	3301      	adds	r3, #1
 8013602:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8013606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013608:	7d1b      	ldrb	r3, [r3, #20]
 801360a:	2b09      	cmp	r3, #9
 801360c:	d10b      	bne.n	8013626 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801360e:	4b59      	ldr	r3, [pc, #356]	@ (8013774 <tcp_slowtmr+0x584>)
 8013610:	681a      	ldr	r2, [r3, #0]
 8013612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013614:	6a1b      	ldr	r3, [r3, #32]
 8013616:	1ad3      	subs	r3, r2, r3
 8013618:	2bf0      	cmp	r3, #240	@ 0xf0
 801361a:	d904      	bls.n	8013626 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801361c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013620:	3301      	adds	r3, #1
 8013622:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8013626:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801362a:	2b00      	cmp	r3, #0
 801362c:	d060      	beq.n	80136f0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801362e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013634:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8013636:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013638:	f000 fbfe 	bl	8013e38 <tcp_pcb_purge>
      if (prev != NULL) {
 801363c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801363e:	2b00      	cmp	r3, #0
 8013640:	d010      	beq.n	8013664 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013642:	4b50      	ldr	r3, [pc, #320]	@ (8013784 <tcp_slowtmr+0x594>)
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013648:	429a      	cmp	r2, r3
 801364a:	d106      	bne.n	801365a <tcp_slowtmr+0x46a>
 801364c:	4b4e      	ldr	r3, [pc, #312]	@ (8013788 <tcp_slowtmr+0x598>)
 801364e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8013652:	494e      	ldr	r1, [pc, #312]	@ (801378c <tcp_slowtmr+0x59c>)
 8013654:	484e      	ldr	r0, [pc, #312]	@ (8013790 <tcp_slowtmr+0x5a0>)
 8013656:	f008 fe05 	bl	801c264 <iprintf>
        prev->next = pcb->next;
 801365a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801365c:	68da      	ldr	r2, [r3, #12]
 801365e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013660:	60da      	str	r2, [r3, #12]
 8013662:	e00f      	b.n	8013684 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013664:	4b47      	ldr	r3, [pc, #284]	@ (8013784 <tcp_slowtmr+0x594>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801366a:	429a      	cmp	r2, r3
 801366c:	d006      	beq.n	801367c <tcp_slowtmr+0x48c>
 801366e:	4b46      	ldr	r3, [pc, #280]	@ (8013788 <tcp_slowtmr+0x598>)
 8013670:	f240 5271 	movw	r2, #1393	@ 0x571
 8013674:	4947      	ldr	r1, [pc, #284]	@ (8013794 <tcp_slowtmr+0x5a4>)
 8013676:	4846      	ldr	r0, [pc, #280]	@ (8013790 <tcp_slowtmr+0x5a0>)
 8013678:	f008 fdf4 	bl	801c264 <iprintf>
        tcp_active_pcbs = pcb->next;
 801367c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801367e:	68db      	ldr	r3, [r3, #12]
 8013680:	4a40      	ldr	r2, [pc, #256]	@ (8013784 <tcp_slowtmr+0x594>)
 8013682:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8013684:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013688:	2b00      	cmp	r3, #0
 801368a:	d013      	beq.n	80136b4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801368c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801368e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8013690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013692:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013694:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8013696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013698:	3304      	adds	r3, #4
 801369a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801369c:	8ad2      	ldrh	r2, [r2, #22]
 801369e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80136a0:	8b09      	ldrh	r1, [r1, #24]
 80136a2:	9102      	str	r1, [sp, #8]
 80136a4:	9201      	str	r2, [sp, #4]
 80136a6:	9300      	str	r3, [sp, #0]
 80136a8:	462b      	mov	r3, r5
 80136aa:	4622      	mov	r2, r4
 80136ac:	4601      	mov	r1, r0
 80136ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80136b0:	f004 f984 	bl	80179bc <tcp_rst>
      err_arg = pcb->callback_arg;
 80136b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136b6:	691b      	ldr	r3, [r3, #16]
 80136b8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80136ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136bc:	7d1b      	ldrb	r3, [r3, #20]
 80136be:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80136c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136c2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80136c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136c6:	68db      	ldr	r3, [r3, #12]
 80136c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80136ca:	6838      	ldr	r0, [r7, #0]
 80136cc:	f7ff f9f2 	bl	8012ab4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80136d0:	4b31      	ldr	r3, [pc, #196]	@ (8013798 <tcp_slowtmr+0x5a8>)
 80136d2:	2200      	movs	r2, #0
 80136d4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d004      	beq.n	80136e6 <tcp_slowtmr+0x4f6>
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	f06f 010c 	mvn.w	r1, #12
 80136e2:	68b8      	ldr	r0, [r7, #8]
 80136e4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80136e6:	4b2c      	ldr	r3, [pc, #176]	@ (8013798 <tcp_slowtmr+0x5a8>)
 80136e8:	781b      	ldrb	r3, [r3, #0]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d037      	beq.n	801375e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80136ee:	e592      	b.n	8013216 <tcp_slowtmr+0x26>
      prev = pcb;
 80136f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80136f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136f6:	68db      	ldr	r3, [r3, #12]
 80136f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80136fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136fc:	7f1b      	ldrb	r3, [r3, #28]
 80136fe:	3301      	adds	r3, #1
 8013700:	b2da      	uxtb	r2, r3
 8013702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013704:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013708:	7f1a      	ldrb	r2, [r3, #28]
 801370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801370c:	7f5b      	ldrb	r3, [r3, #29]
 801370e:	429a      	cmp	r2, r3
 8013710:	d325      	bcc.n	801375e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8013712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013714:	2200      	movs	r2, #0
 8013716:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8013718:	4b1f      	ldr	r3, [pc, #124]	@ (8013798 <tcp_slowtmr+0x5a8>)
 801371a:	2200      	movs	r2, #0
 801371c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801371e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013724:	2b00      	cmp	r3, #0
 8013726:	d00b      	beq.n	8013740 <tcp_slowtmr+0x550>
 8013728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801372a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801372e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013730:	6912      	ldr	r2, [r2, #16]
 8013732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013734:	4610      	mov	r0, r2
 8013736:	4798      	blx	r3
 8013738:	4603      	mov	r3, r0
 801373a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801373e:	e002      	b.n	8013746 <tcp_slowtmr+0x556>
 8013740:	2300      	movs	r3, #0
 8013742:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8013746:	4b14      	ldr	r3, [pc, #80]	@ (8013798 <tcp_slowtmr+0x5a8>)
 8013748:	781b      	ldrb	r3, [r3, #0]
 801374a:	2b00      	cmp	r3, #0
 801374c:	f47f ad62 	bne.w	8013214 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013750:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8013754:	2b00      	cmp	r3, #0
 8013756:	d102      	bne.n	801375e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8013758:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801375a:	f003 fb7b 	bl	8016e54 <tcp_output>
  while (pcb != NULL) {
 801375e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013760:	2b00      	cmp	r3, #0
 8013762:	f47f ad5e 	bne.w	8013222 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013766:	2300      	movs	r3, #0
 8013768:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801376a:	4b0c      	ldr	r3, [pc, #48]	@ (801379c <tcp_slowtmr+0x5ac>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013770:	e069      	b.n	8013846 <tcp_slowtmr+0x656>
 8013772:	bf00      	nop
 8013774:	2002757c 	.word	0x2002757c
 8013778:	000a4cb8 	.word	0x000a4cb8
 801377c:	10624dd3 	.word	0x10624dd3
 8013780:	000124f8 	.word	0x000124f8
 8013784:	20027588 	.word	0x20027588
 8013788:	0801e068 	.word	0x0801e068
 801378c:	0801e4a0 	.word	0x0801e4a0
 8013790:	0801e0ac 	.word	0x0801e0ac
 8013794:	0801e4cc 	.word	0x0801e4cc
 8013798:	20027590 	.word	0x20027590
 801379c:	2002758c 	.word	0x2002758c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80137a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137a2:	7d1b      	ldrb	r3, [r3, #20]
 80137a4:	2b0a      	cmp	r3, #10
 80137a6:	d006      	beq.n	80137b6 <tcp_slowtmr+0x5c6>
 80137a8:	4b2b      	ldr	r3, [pc, #172]	@ (8013858 <tcp_slowtmr+0x668>)
 80137aa:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80137ae:	492b      	ldr	r1, [pc, #172]	@ (801385c <tcp_slowtmr+0x66c>)
 80137b0:	482b      	ldr	r0, [pc, #172]	@ (8013860 <tcp_slowtmr+0x670>)
 80137b2:	f008 fd57 	bl	801c264 <iprintf>
    pcb_remove = 0;
 80137b6:	2300      	movs	r3, #0
 80137b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80137bc:	4b29      	ldr	r3, [pc, #164]	@ (8013864 <tcp_slowtmr+0x674>)
 80137be:	681a      	ldr	r2, [r3, #0]
 80137c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137c2:	6a1b      	ldr	r3, [r3, #32]
 80137c4:	1ad3      	subs	r3, r2, r3
 80137c6:	2bf0      	cmp	r3, #240	@ 0xf0
 80137c8:	d904      	bls.n	80137d4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80137ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80137ce:	3301      	adds	r3, #1
 80137d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80137d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d02f      	beq.n	801383c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80137dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80137de:	f000 fb2b 	bl	8013e38 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80137e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d010      	beq.n	801380a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80137e8:	4b1f      	ldr	r3, [pc, #124]	@ (8013868 <tcp_slowtmr+0x678>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d106      	bne.n	8013800 <tcp_slowtmr+0x610>
 80137f2:	4b19      	ldr	r3, [pc, #100]	@ (8013858 <tcp_slowtmr+0x668>)
 80137f4:	f240 52af 	movw	r2, #1455	@ 0x5af
 80137f8:	491c      	ldr	r1, [pc, #112]	@ (801386c <tcp_slowtmr+0x67c>)
 80137fa:	4819      	ldr	r0, [pc, #100]	@ (8013860 <tcp_slowtmr+0x670>)
 80137fc:	f008 fd32 	bl	801c264 <iprintf>
        prev->next = pcb->next;
 8013800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013802:	68da      	ldr	r2, [r3, #12]
 8013804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013806:	60da      	str	r2, [r3, #12]
 8013808:	e00f      	b.n	801382a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801380a:	4b17      	ldr	r3, [pc, #92]	@ (8013868 <tcp_slowtmr+0x678>)
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013810:	429a      	cmp	r2, r3
 8013812:	d006      	beq.n	8013822 <tcp_slowtmr+0x632>
 8013814:	4b10      	ldr	r3, [pc, #64]	@ (8013858 <tcp_slowtmr+0x668>)
 8013816:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801381a:	4915      	ldr	r1, [pc, #84]	@ (8013870 <tcp_slowtmr+0x680>)
 801381c:	4810      	ldr	r0, [pc, #64]	@ (8013860 <tcp_slowtmr+0x670>)
 801381e:	f008 fd21 	bl	801c264 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013824:	68db      	ldr	r3, [r3, #12]
 8013826:	4a10      	ldr	r2, [pc, #64]	@ (8013868 <tcp_slowtmr+0x678>)
 8013828:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801382a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801382c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801382e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013830:	68db      	ldr	r3, [r3, #12]
 8013832:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8013834:	69f8      	ldr	r0, [r7, #28]
 8013836:	f7ff f93d 	bl	8012ab4 <tcp_free>
 801383a:	e004      	b.n	8013846 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801383c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801383e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013842:	68db      	ldr	r3, [r3, #12]
 8013844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013848:	2b00      	cmp	r3, #0
 801384a:	d1a9      	bne.n	80137a0 <tcp_slowtmr+0x5b0>
    }
  }
}
 801384c:	bf00      	nop
 801384e:	bf00      	nop
 8013850:	3730      	adds	r7, #48	@ 0x30
 8013852:	46bd      	mov	sp, r7
 8013854:	bdb0      	pop	{r4, r5, r7, pc}
 8013856:	bf00      	nop
 8013858:	0801e068 	.word	0x0801e068
 801385c:	0801e4f8 	.word	0x0801e4f8
 8013860:	0801e0ac 	.word	0x0801e0ac
 8013864:	2002757c 	.word	0x2002757c
 8013868:	2002758c 	.word	0x2002758c
 801386c:	0801e528 	.word	0x0801e528
 8013870:	0801e550 	.word	0x0801e550

08013874 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b082      	sub	sp, #8
 8013878:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801387a:	4b2d      	ldr	r3, [pc, #180]	@ (8013930 <tcp_fasttmr+0xbc>)
 801387c:	781b      	ldrb	r3, [r3, #0]
 801387e:	3301      	adds	r3, #1
 8013880:	b2da      	uxtb	r2, r3
 8013882:	4b2b      	ldr	r3, [pc, #172]	@ (8013930 <tcp_fasttmr+0xbc>)
 8013884:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013886:	4b2b      	ldr	r3, [pc, #172]	@ (8013934 <tcp_fasttmr+0xc0>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801388c:	e048      	b.n	8013920 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	7f9a      	ldrb	r2, [r3, #30]
 8013892:	4b27      	ldr	r3, [pc, #156]	@ (8013930 <tcp_fasttmr+0xbc>)
 8013894:	781b      	ldrb	r3, [r3, #0]
 8013896:	429a      	cmp	r2, r3
 8013898:	d03f      	beq.n	801391a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801389a:	4b25      	ldr	r3, [pc, #148]	@ (8013930 <tcp_fasttmr+0xbc>)
 801389c:	781a      	ldrb	r2, [r3, #0]
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	8b5b      	ldrh	r3, [r3, #26]
 80138a6:	f003 0301 	and.w	r3, r3, #1
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d010      	beq.n	80138d0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	8b5b      	ldrh	r3, [r3, #26]
 80138b2:	f043 0302 	orr.w	r3, r3, #2
 80138b6:	b29a      	uxth	r2, r3
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f003 fac9 	bl	8016e54 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	8b5b      	ldrh	r3, [r3, #26]
 80138c6:	f023 0303 	bic.w	r3, r3, #3
 80138ca:	b29a      	uxth	r2, r3
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	8b5b      	ldrh	r3, [r3, #26]
 80138d4:	f003 0308 	and.w	r3, r3, #8
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d009      	beq.n	80138f0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	8b5b      	ldrh	r3, [r3, #26]
 80138e0:	f023 0308 	bic.w	r3, r3, #8
 80138e4:	b29a      	uxth	r2, r3
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f7ff fa76 	bl	8012ddc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	68db      	ldr	r3, [r3, #12]
 80138f4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d00a      	beq.n	8013914 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80138fe:	4b0e      	ldr	r3, [pc, #56]	@ (8013938 <tcp_fasttmr+0xc4>)
 8013900:	2200      	movs	r2, #0
 8013902:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013904:	6878      	ldr	r0, [r7, #4]
 8013906:	f000 f819 	bl	801393c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801390a:	4b0b      	ldr	r3, [pc, #44]	@ (8013938 <tcp_fasttmr+0xc4>)
 801390c:	781b      	ldrb	r3, [r3, #0]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d000      	beq.n	8013914 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013912:	e7b8      	b.n	8013886 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	607b      	str	r3, [r7, #4]
 8013918:	e002      	b.n	8013920 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	68db      	ldr	r3, [r3, #12]
 801391e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d1b3      	bne.n	801388e <tcp_fasttmr+0x1a>
    }
  }
}
 8013926:	bf00      	nop
 8013928:	bf00      	nop
 801392a:	3708      	adds	r7, #8
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}
 8013930:	20027592 	.word	0x20027592
 8013934:	20027588 	.word	0x20027588
 8013938:	20027590 	.word	0x20027590

0801393c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801393c:	b590      	push	{r4, r7, lr}
 801393e:	b085      	sub	sp, #20
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d109      	bne.n	801395e <tcp_process_refused_data+0x22>
 801394a:	4b37      	ldr	r3, [pc, #220]	@ (8013a28 <tcp_process_refused_data+0xec>)
 801394c:	f240 6209 	movw	r2, #1545	@ 0x609
 8013950:	4936      	ldr	r1, [pc, #216]	@ (8013a2c <tcp_process_refused_data+0xf0>)
 8013952:	4837      	ldr	r0, [pc, #220]	@ (8013a30 <tcp_process_refused_data+0xf4>)
 8013954:	f008 fc86 	bl	801c264 <iprintf>
 8013958:	f06f 030f 	mvn.w	r3, #15
 801395c:	e060      	b.n	8013a20 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013962:	7b5b      	ldrb	r3, [r3, #13]
 8013964:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801396a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2200      	movs	r2, #0
 8013970:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013978:	2b00      	cmp	r3, #0
 801397a:	d00b      	beq.n	8013994 <tcp_process_refused_data+0x58>
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	6918      	ldr	r0, [r3, #16]
 8013986:	2300      	movs	r3, #0
 8013988:	68ba      	ldr	r2, [r7, #8]
 801398a:	6879      	ldr	r1, [r7, #4]
 801398c:	47a0      	blx	r4
 801398e:	4603      	mov	r3, r0
 8013990:	73fb      	strb	r3, [r7, #15]
 8013992:	e007      	b.n	80139a4 <tcp_process_refused_data+0x68>
 8013994:	2300      	movs	r3, #0
 8013996:	68ba      	ldr	r2, [r7, #8]
 8013998:	6879      	ldr	r1, [r7, #4]
 801399a:	2000      	movs	r0, #0
 801399c:	f000 f8a4 	bl	8013ae8 <tcp_recv_null>
 80139a0:	4603      	mov	r3, r0
 80139a2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80139a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d12a      	bne.n	8013a02 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80139ac:	7bbb      	ldrb	r3, [r7, #14]
 80139ae:	f003 0320 	and.w	r3, r3, #32
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d033      	beq.n	8013a1e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80139ba:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80139be:	d005      	beq.n	80139cc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80139c4:	3301      	adds	r3, #1
 80139c6:	b29a      	uxth	r2, r3
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d00b      	beq.n	80139ee <tcp_process_refused_data+0xb2>
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	6918      	ldr	r0, [r3, #16]
 80139e0:	2300      	movs	r3, #0
 80139e2:	2200      	movs	r2, #0
 80139e4:	6879      	ldr	r1, [r7, #4]
 80139e6:	47a0      	blx	r4
 80139e8:	4603      	mov	r3, r0
 80139ea:	73fb      	strb	r3, [r7, #15]
 80139ec:	e001      	b.n	80139f2 <tcp_process_refused_data+0xb6>
 80139ee:	2300      	movs	r3, #0
 80139f0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80139f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139f6:	f113 0f0d 	cmn.w	r3, #13
 80139fa:	d110      	bne.n	8013a1e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80139fc:	f06f 030c 	mvn.w	r3, #12
 8013a00:	e00e      	b.n	8013a20 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8013a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a06:	f113 0f0d 	cmn.w	r3, #13
 8013a0a:	d102      	bne.n	8013a12 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013a0c:	f06f 030c 	mvn.w	r3, #12
 8013a10:	e006      	b.n	8013a20 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	68ba      	ldr	r2, [r7, #8]
 8013a16:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8013a18:	f06f 0304 	mvn.w	r3, #4
 8013a1c:	e000      	b.n	8013a20 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8013a1e:	2300      	movs	r3, #0
}
 8013a20:	4618      	mov	r0, r3
 8013a22:	3714      	adds	r7, #20
 8013a24:	46bd      	mov	sp, r7
 8013a26:	bd90      	pop	{r4, r7, pc}
 8013a28:	0801e068 	.word	0x0801e068
 8013a2c:	0801e578 	.word	0x0801e578
 8013a30:	0801e0ac 	.word	0x0801e0ac

08013a34 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b084      	sub	sp, #16
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013a3c:	e007      	b.n	8013a4e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013a44:	6878      	ldr	r0, [r7, #4]
 8013a46:	f000 f80a 	bl	8013a5e <tcp_seg_free>
    seg = next;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d1f4      	bne.n	8013a3e <tcp_segs_free+0xa>
  }
}
 8013a54:	bf00      	nop
 8013a56:	bf00      	nop
 8013a58:	3710      	adds	r7, #16
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}

08013a5e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013a5e:	b580      	push	{r7, lr}
 8013a60:	b082      	sub	sp, #8
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d00c      	beq.n	8013a86 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	685b      	ldr	r3, [r3, #4]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d004      	beq.n	8013a7e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	685b      	ldr	r3, [r3, #4]
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7fe fd5f 	bl	801253c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013a7e:	6879      	ldr	r1, [r7, #4]
 8013a80:	2003      	movs	r0, #3
 8013a82:	f7fd feb7 	bl	80117f4 <memp_free>
  }
}
 8013a86:	bf00      	nop
 8013a88:	3708      	adds	r7, #8
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}
	...

08013a90 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b084      	sub	sp, #16
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d106      	bne.n	8013aac <tcp_seg_copy+0x1c>
 8013a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8013adc <tcp_seg_copy+0x4c>)
 8013aa0:	f240 6282 	movw	r2, #1666	@ 0x682
 8013aa4:	490e      	ldr	r1, [pc, #56]	@ (8013ae0 <tcp_seg_copy+0x50>)
 8013aa6:	480f      	ldr	r0, [pc, #60]	@ (8013ae4 <tcp_seg_copy+0x54>)
 8013aa8:	f008 fbdc 	bl	801c264 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013aac:	2003      	movs	r0, #3
 8013aae:	f7fd fe2b 	bl	8011708 <memp_malloc>
 8013ab2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d101      	bne.n	8013abe <tcp_seg_copy+0x2e>
    return NULL;
 8013aba:	2300      	movs	r3, #0
 8013abc:	e00a      	b.n	8013ad4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013abe:	2210      	movs	r2, #16
 8013ac0:	6879      	ldr	r1, [r7, #4]
 8013ac2:	68f8      	ldr	r0, [r7, #12]
 8013ac4:	f008 fdf9 	bl	801c6ba <memcpy>
  pbuf_ref(cseg->p);
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	685b      	ldr	r3, [r3, #4]
 8013acc:	4618      	mov	r0, r3
 8013ace:	f7fe fddb 	bl	8012688 <pbuf_ref>
  return cseg;
 8013ad2:	68fb      	ldr	r3, [r7, #12]
}
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	3710      	adds	r7, #16
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd80      	pop	{r7, pc}
 8013adc:	0801e068 	.word	0x0801e068
 8013ae0:	0801e5bc 	.word	0x0801e5bc
 8013ae4:	0801e0ac 	.word	0x0801e0ac

08013ae8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b084      	sub	sp, #16
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	60f8      	str	r0, [r7, #12]
 8013af0:	60b9      	str	r1, [r7, #8]
 8013af2:	607a      	str	r2, [r7, #4]
 8013af4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013af6:	68bb      	ldr	r3, [r7, #8]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d109      	bne.n	8013b10 <tcp_recv_null+0x28>
 8013afc:	4b12      	ldr	r3, [pc, #72]	@ (8013b48 <tcp_recv_null+0x60>)
 8013afe:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013b02:	4912      	ldr	r1, [pc, #72]	@ (8013b4c <tcp_recv_null+0x64>)
 8013b04:	4812      	ldr	r0, [pc, #72]	@ (8013b50 <tcp_recv_null+0x68>)
 8013b06:	f008 fbad 	bl	801c264 <iprintf>
 8013b0a:	f06f 030f 	mvn.w	r3, #15
 8013b0e:	e016      	b.n	8013b3e <tcp_recv_null+0x56>

  if (p != NULL) {
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d009      	beq.n	8013b2a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	891b      	ldrh	r3, [r3, #8]
 8013b1a:	4619      	mov	r1, r3
 8013b1c:	68b8      	ldr	r0, [r7, #8]
 8013b1e:	f7ff fb17 	bl	8013150 <tcp_recved>
    pbuf_free(p);
 8013b22:	6878      	ldr	r0, [r7, #4]
 8013b24:	f7fe fd0a 	bl	801253c <pbuf_free>
 8013b28:	e008      	b.n	8013b3c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d104      	bne.n	8013b3c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013b32:	68b8      	ldr	r0, [r7, #8]
 8013b34:	f7ff f9bc 	bl	8012eb0 <tcp_close>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	e000      	b.n	8013b3e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013b3c:	2300      	movs	r3, #0
}
 8013b3e:	4618      	mov	r0, r3
 8013b40:	3710      	adds	r7, #16
 8013b42:	46bd      	mov	sp, r7
 8013b44:	bd80      	pop	{r7, pc}
 8013b46:	bf00      	nop
 8013b48:	0801e068 	.word	0x0801e068
 8013b4c:	0801e5d8 	.word	0x0801e5d8
 8013b50:	0801e0ac 	.word	0x0801e0ac

08013b54 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b086      	sub	sp, #24
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	db01      	blt.n	8013b6a <tcp_kill_prio+0x16>
 8013b66:	79fb      	ldrb	r3, [r7, #7]
 8013b68:	e000      	b.n	8013b6c <tcp_kill_prio+0x18>
 8013b6a:	237f      	movs	r3, #127	@ 0x7f
 8013b6c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013b6e:	7afb      	ldrb	r3, [r7, #11]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d034      	beq.n	8013bde <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013b74:	7afb      	ldrb	r3, [r7, #11]
 8013b76:	3b01      	subs	r3, #1
 8013b78:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013b7e:	2300      	movs	r3, #0
 8013b80:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b82:	4b19      	ldr	r3, [pc, #100]	@ (8013be8 <tcp_kill_prio+0x94>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	617b      	str	r3, [r7, #20]
 8013b88:	e01f      	b.n	8013bca <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013b8a:	697b      	ldr	r3, [r7, #20]
 8013b8c:	7d5b      	ldrb	r3, [r3, #21]
 8013b8e:	7afa      	ldrb	r2, [r7, #11]
 8013b90:	429a      	cmp	r2, r3
 8013b92:	d80c      	bhi.n	8013bae <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013b98:	7afa      	ldrb	r2, [r7, #11]
 8013b9a:	429a      	cmp	r2, r3
 8013b9c:	d112      	bne.n	8013bc4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013b9e:	4b13      	ldr	r3, [pc, #76]	@ (8013bec <tcp_kill_prio+0x98>)
 8013ba0:	681a      	ldr	r2, [r3, #0]
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	6a1b      	ldr	r3, [r3, #32]
 8013ba6:	1ad3      	subs	r3, r2, r3
 8013ba8:	68fa      	ldr	r2, [r7, #12]
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d80a      	bhi.n	8013bc4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013bae:	4b0f      	ldr	r3, [pc, #60]	@ (8013bec <tcp_kill_prio+0x98>)
 8013bb0:	681a      	ldr	r2, [r3, #0]
 8013bb2:	697b      	ldr	r3, [r7, #20]
 8013bb4:	6a1b      	ldr	r3, [r3, #32]
 8013bb6:	1ad3      	subs	r3, r2, r3
 8013bb8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013bba:	697b      	ldr	r3, [r7, #20]
 8013bbc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013bbe:	697b      	ldr	r3, [r7, #20]
 8013bc0:	7d5b      	ldrb	r3, [r3, #21]
 8013bc2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013bc4:	697b      	ldr	r3, [r7, #20]
 8013bc6:	68db      	ldr	r3, [r3, #12]
 8013bc8:	617b      	str	r3, [r7, #20]
 8013bca:	697b      	ldr	r3, [r7, #20]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d1dc      	bne.n	8013b8a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013bd0:	693b      	ldr	r3, [r7, #16]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d004      	beq.n	8013be0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013bd6:	6938      	ldr	r0, [r7, #16]
 8013bd8:	f7ff fa54 	bl	8013084 <tcp_abort>
 8013bdc:	e000      	b.n	8013be0 <tcp_kill_prio+0x8c>
    return;
 8013bde:	bf00      	nop
  }
}
 8013be0:	3718      	adds	r7, #24
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}
 8013be6:	bf00      	nop
 8013be8:	20027588 	.word	0x20027588
 8013bec:	2002757c 	.word	0x2002757c

08013bf0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b086      	sub	sp, #24
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8013bfa:	79fb      	ldrb	r3, [r7, #7]
 8013bfc:	2b08      	cmp	r3, #8
 8013bfe:	d009      	beq.n	8013c14 <tcp_kill_state+0x24>
 8013c00:	79fb      	ldrb	r3, [r7, #7]
 8013c02:	2b09      	cmp	r3, #9
 8013c04:	d006      	beq.n	8013c14 <tcp_kill_state+0x24>
 8013c06:	4b1a      	ldr	r3, [pc, #104]	@ (8013c70 <tcp_kill_state+0x80>)
 8013c08:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8013c0c:	4919      	ldr	r1, [pc, #100]	@ (8013c74 <tcp_kill_state+0x84>)
 8013c0e:	481a      	ldr	r0, [pc, #104]	@ (8013c78 <tcp_kill_state+0x88>)
 8013c10:	f008 fb28 	bl	801c264 <iprintf>

  inactivity = 0;
 8013c14:	2300      	movs	r3, #0
 8013c16:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c1c:	4b17      	ldr	r3, [pc, #92]	@ (8013c7c <tcp_kill_state+0x8c>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	617b      	str	r3, [r7, #20]
 8013c22:	e017      	b.n	8013c54 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	7d1b      	ldrb	r3, [r3, #20]
 8013c28:	79fa      	ldrb	r2, [r7, #7]
 8013c2a:	429a      	cmp	r2, r3
 8013c2c:	d10f      	bne.n	8013c4e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013c2e:	4b14      	ldr	r3, [pc, #80]	@ (8013c80 <tcp_kill_state+0x90>)
 8013c30:	681a      	ldr	r2, [r3, #0]
 8013c32:	697b      	ldr	r3, [r7, #20]
 8013c34:	6a1b      	ldr	r3, [r3, #32]
 8013c36:	1ad3      	subs	r3, r2, r3
 8013c38:	68fa      	ldr	r2, [r7, #12]
 8013c3a:	429a      	cmp	r2, r3
 8013c3c:	d807      	bhi.n	8013c4e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013c3e:	4b10      	ldr	r3, [pc, #64]	@ (8013c80 <tcp_kill_state+0x90>)
 8013c40:	681a      	ldr	r2, [r3, #0]
 8013c42:	697b      	ldr	r3, [r7, #20]
 8013c44:	6a1b      	ldr	r3, [r3, #32]
 8013c46:	1ad3      	subs	r3, r2, r3
 8013c48:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c4e:	697b      	ldr	r3, [r7, #20]
 8013c50:	68db      	ldr	r3, [r3, #12]
 8013c52:	617b      	str	r3, [r7, #20]
 8013c54:	697b      	ldr	r3, [r7, #20]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d1e4      	bne.n	8013c24 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013c5a:	693b      	ldr	r3, [r7, #16]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d003      	beq.n	8013c68 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013c60:	2100      	movs	r1, #0
 8013c62:	6938      	ldr	r0, [r7, #16]
 8013c64:	f7ff f950 	bl	8012f08 <tcp_abandon>
  }
}
 8013c68:	bf00      	nop
 8013c6a:	3718      	adds	r7, #24
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}
 8013c70:	0801e068 	.word	0x0801e068
 8013c74:	0801e5f4 	.word	0x0801e5f4
 8013c78:	0801e0ac 	.word	0x0801e0ac
 8013c7c:	20027588 	.word	0x20027588
 8013c80:	2002757c 	.word	0x2002757c

08013c84 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b084      	sub	sp, #16
 8013c88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013c8e:	2300      	movs	r3, #0
 8013c90:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c92:	4b12      	ldr	r3, [pc, #72]	@ (8013cdc <tcp_kill_timewait+0x58>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	60fb      	str	r3, [r7, #12]
 8013c98:	e012      	b.n	8013cc0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013c9a:	4b11      	ldr	r3, [pc, #68]	@ (8013ce0 <tcp_kill_timewait+0x5c>)
 8013c9c:	681a      	ldr	r2, [r3, #0]
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	6a1b      	ldr	r3, [r3, #32]
 8013ca2:	1ad3      	subs	r3, r2, r3
 8013ca4:	687a      	ldr	r2, [r7, #4]
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	d807      	bhi.n	8013cba <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013caa:	4b0d      	ldr	r3, [pc, #52]	@ (8013ce0 <tcp_kill_timewait+0x5c>)
 8013cac:	681a      	ldr	r2, [r3, #0]
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	6a1b      	ldr	r3, [r3, #32]
 8013cb2:	1ad3      	subs	r3, r2, r3
 8013cb4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	68db      	ldr	r3, [r3, #12]
 8013cbe:	60fb      	str	r3, [r7, #12]
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d1e9      	bne.n	8013c9a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d002      	beq.n	8013cd2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013ccc:	68b8      	ldr	r0, [r7, #8]
 8013cce:	f7ff f9d9 	bl	8013084 <tcp_abort>
  }
}
 8013cd2:	bf00      	nop
 8013cd4:	3710      	adds	r7, #16
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}
 8013cda:	bf00      	nop
 8013cdc:	2002758c 	.word	0x2002758c
 8013ce0:	2002757c 	.word	0x2002757c

08013ce4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b082      	sub	sp, #8
 8013ce8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013cea:	4b10      	ldr	r3, [pc, #64]	@ (8013d2c <tcp_handle_closepend+0x48>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013cf0:	e014      	b.n	8013d1c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	68db      	ldr	r3, [r3, #12]
 8013cf6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	8b5b      	ldrh	r3, [r3, #26]
 8013cfc:	f003 0308 	and.w	r3, r3, #8
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d009      	beq.n	8013d18 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	8b5b      	ldrh	r3, [r3, #26]
 8013d08:	f023 0308 	bic.w	r3, r3, #8
 8013d0c:	b29a      	uxth	r2, r3
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f7ff f862 	bl	8012ddc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013d18:	683b      	ldr	r3, [r7, #0]
 8013d1a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d1e7      	bne.n	8013cf2 <tcp_handle_closepend+0xe>
  }
}
 8013d22:	bf00      	nop
 8013d24:	bf00      	nop
 8013d26:	3708      	adds	r7, #8
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}
 8013d2c:	20027588 	.word	0x20027588

08013d30 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b084      	sub	sp, #16
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	4603      	mov	r3, r0
 8013d38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013d3a:	2001      	movs	r0, #1
 8013d3c:	f7fd fce4 	bl	8011708 <memp_malloc>
 8013d40:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d126      	bne.n	8013d96 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013d48:	f7ff ffcc 	bl	8013ce4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013d4c:	f7ff ff9a 	bl	8013c84 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013d50:	2001      	movs	r0, #1
 8013d52:	f7fd fcd9 	bl	8011708 <memp_malloc>
 8013d56:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d11b      	bne.n	8013d96 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013d5e:	2009      	movs	r0, #9
 8013d60:	f7ff ff46 	bl	8013bf0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013d64:	2001      	movs	r0, #1
 8013d66:	f7fd fccf 	bl	8011708 <memp_malloc>
 8013d6a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d111      	bne.n	8013d96 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013d72:	2008      	movs	r0, #8
 8013d74:	f7ff ff3c 	bl	8013bf0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013d78:	2001      	movs	r0, #1
 8013d7a:	f7fd fcc5 	bl	8011708 <memp_malloc>
 8013d7e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d107      	bne.n	8013d96 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013d86:	79fb      	ldrb	r3, [r7, #7]
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f7ff fee3 	bl	8013b54 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013d8e:	2001      	movs	r0, #1
 8013d90:	f7fd fcba 	bl	8011708 <memp_malloc>
 8013d94:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d03f      	beq.n	8013e1c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013d9c:	229c      	movs	r2, #156	@ 0x9c
 8013d9e:	2100      	movs	r1, #0
 8013da0:	68f8      	ldr	r0, [r7, #12]
 8013da2:	f008 fbb7 	bl	801c514 <memset>
    pcb->prio = prio;
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	79fa      	ldrb	r2, [r7, #7]
 8013daa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8013db2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	22ff      	movs	r2, #255	@ 0xff
 8013dca:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013dd2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	2206      	movs	r2, #6
 8013dd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	2206      	movs	r2, #6
 8013de0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013de8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	2201      	movs	r2, #1
 8013dee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8013df2:	4b0d      	ldr	r3, [pc, #52]	@ (8013e28 <tcp_alloc+0xf8>)
 8013df4:	681a      	ldr	r2, [r3, #0]
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8013e2c <tcp_alloc+0xfc>)
 8013dfc:	781a      	ldrb	r2, [r3, #0]
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8013e08:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	4a08      	ldr	r2, [pc, #32]	@ (8013e30 <tcp_alloc+0x100>)
 8013e10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	4a07      	ldr	r2, [pc, #28]	@ (8013e34 <tcp_alloc+0x104>)
 8013e18:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
}
 8013e1e:	4618      	mov	r0, r3
 8013e20:	3710      	adds	r7, #16
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}
 8013e26:	bf00      	nop
 8013e28:	2002757c 	.word	0x2002757c
 8013e2c:	20027592 	.word	0x20027592
 8013e30:	08013ae9 	.word	0x08013ae9
 8013e34:	006ddd00 	.word	0x006ddd00

08013e38 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b082      	sub	sp, #8
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d107      	bne.n	8013e56 <tcp_pcb_purge+0x1e>
 8013e46:	4b21      	ldr	r3, [pc, #132]	@ (8013ecc <tcp_pcb_purge+0x94>)
 8013e48:	f640 0251 	movw	r2, #2129	@ 0x851
 8013e4c:	4920      	ldr	r1, [pc, #128]	@ (8013ed0 <tcp_pcb_purge+0x98>)
 8013e4e:	4821      	ldr	r0, [pc, #132]	@ (8013ed4 <tcp_pcb_purge+0x9c>)
 8013e50:	f008 fa08 	bl	801c264 <iprintf>
 8013e54:	e037      	b.n	8013ec6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	7d1b      	ldrb	r3, [r3, #20]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d033      	beq.n	8013ec6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013e62:	2b0a      	cmp	r3, #10
 8013e64:	d02f      	beq.n	8013ec6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013e6a:	2b01      	cmp	r3, #1
 8013e6c:	d02b      	beq.n	8013ec6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d007      	beq.n	8013e86 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7fe fb5e 	bl	801253c <pbuf_free>
      pcb->refused_data = NULL;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2200      	movs	r2, #0
 8013e84:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d002      	beq.n	8013e94 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013e8e:	6878      	ldr	r0, [r7, #4]
 8013e90:	f000 f986 	bl	80141a0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013e9a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f7ff fdc7 	bl	8013a34 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f7ff fdc2 	bl	8013a34 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013ec6:	3708      	adds	r7, #8
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bd80      	pop	{r7, pc}
 8013ecc:	0801e068 	.word	0x0801e068
 8013ed0:	0801e6b4 	.word	0x0801e6b4
 8013ed4:	0801e0ac 	.word	0x0801e0ac

08013ed8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b084      	sub	sp, #16
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
 8013ee0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013ee2:	683b      	ldr	r3, [r7, #0]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d106      	bne.n	8013ef6 <tcp_pcb_remove+0x1e>
 8013ee8:	4b3e      	ldr	r3, [pc, #248]	@ (8013fe4 <tcp_pcb_remove+0x10c>)
 8013eea:	f640 0283 	movw	r2, #2179	@ 0x883
 8013eee:	493e      	ldr	r1, [pc, #248]	@ (8013fe8 <tcp_pcb_remove+0x110>)
 8013ef0:	483e      	ldr	r0, [pc, #248]	@ (8013fec <tcp_pcb_remove+0x114>)
 8013ef2:	f008 f9b7 	bl	801c264 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d106      	bne.n	8013f0a <tcp_pcb_remove+0x32>
 8013efc:	4b39      	ldr	r3, [pc, #228]	@ (8013fe4 <tcp_pcb_remove+0x10c>)
 8013efe:	f640 0284 	movw	r2, #2180	@ 0x884
 8013f02:	493b      	ldr	r1, [pc, #236]	@ (8013ff0 <tcp_pcb_remove+0x118>)
 8013f04:	4839      	ldr	r0, [pc, #228]	@ (8013fec <tcp_pcb_remove+0x114>)
 8013f06:	f008 f9ad 	bl	801c264 <iprintf>

  TCP_RMV(pcblist, pcb);
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	683a      	ldr	r2, [r7, #0]
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d105      	bne.n	8013f20 <tcp_pcb_remove+0x48>
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	68da      	ldr	r2, [r3, #12]
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	601a      	str	r2, [r3, #0]
 8013f1e:	e013      	b.n	8013f48 <tcp_pcb_remove+0x70>
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	60fb      	str	r3, [r7, #12]
 8013f26:	e00c      	b.n	8013f42 <tcp_pcb_remove+0x6a>
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	68db      	ldr	r3, [r3, #12]
 8013f2c:	683a      	ldr	r2, [r7, #0]
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d104      	bne.n	8013f3c <tcp_pcb_remove+0x64>
 8013f32:	683b      	ldr	r3, [r7, #0]
 8013f34:	68da      	ldr	r2, [r3, #12]
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	60da      	str	r2, [r3, #12]
 8013f3a:	e005      	b.n	8013f48 <tcp_pcb_remove+0x70>
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	68db      	ldr	r3, [r3, #12]
 8013f40:	60fb      	str	r3, [r7, #12]
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d1ef      	bne.n	8013f28 <tcp_pcb_remove+0x50>
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013f4e:	6838      	ldr	r0, [r7, #0]
 8013f50:	f7ff ff72 	bl	8013e38 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	7d1b      	ldrb	r3, [r3, #20]
 8013f58:	2b0a      	cmp	r3, #10
 8013f5a:	d013      	beq.n	8013f84 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013f60:	2b01      	cmp	r3, #1
 8013f62:	d00f      	beq.n	8013f84 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	8b5b      	ldrh	r3, [r3, #26]
 8013f68:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d009      	beq.n	8013f84 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	8b5b      	ldrh	r3, [r3, #26]
 8013f74:	f043 0302 	orr.w	r3, r3, #2
 8013f78:	b29a      	uxth	r2, r3
 8013f7a:	683b      	ldr	r3, [r7, #0]
 8013f7c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013f7e:	6838      	ldr	r0, [r7, #0]
 8013f80:	f002 ff68 	bl	8016e54 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	7d1b      	ldrb	r3, [r3, #20]
 8013f88:	2b01      	cmp	r3, #1
 8013f8a:	d020      	beq.n	8013fce <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013f8c:	683b      	ldr	r3, [r7, #0]
 8013f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d006      	beq.n	8013fa2 <tcp_pcb_remove+0xca>
 8013f94:	4b13      	ldr	r3, [pc, #76]	@ (8013fe4 <tcp_pcb_remove+0x10c>)
 8013f96:	f640 0293 	movw	r2, #2195	@ 0x893
 8013f9a:	4916      	ldr	r1, [pc, #88]	@ (8013ff4 <tcp_pcb_remove+0x11c>)
 8013f9c:	4813      	ldr	r0, [pc, #76]	@ (8013fec <tcp_pcb_remove+0x114>)
 8013f9e:	f008 f961 	bl	801c264 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013fa2:	683b      	ldr	r3, [r7, #0]
 8013fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d006      	beq.n	8013fb8 <tcp_pcb_remove+0xe0>
 8013faa:	4b0e      	ldr	r3, [pc, #56]	@ (8013fe4 <tcp_pcb_remove+0x10c>)
 8013fac:	f640 0294 	movw	r2, #2196	@ 0x894
 8013fb0:	4911      	ldr	r1, [pc, #68]	@ (8013ff8 <tcp_pcb_remove+0x120>)
 8013fb2:	480e      	ldr	r0, [pc, #56]	@ (8013fec <tcp_pcb_remove+0x114>)
 8013fb4:	f008 f956 	bl	801c264 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d006      	beq.n	8013fce <tcp_pcb_remove+0xf6>
 8013fc0:	4b08      	ldr	r3, [pc, #32]	@ (8013fe4 <tcp_pcb_remove+0x10c>)
 8013fc2:	f640 0296 	movw	r2, #2198	@ 0x896
 8013fc6:	490d      	ldr	r1, [pc, #52]	@ (8013ffc <tcp_pcb_remove+0x124>)
 8013fc8:	4808      	ldr	r0, [pc, #32]	@ (8013fec <tcp_pcb_remove+0x114>)
 8013fca:	f008 f94b 	bl	801c264 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013fd4:	683b      	ldr	r3, [r7, #0]
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013fda:	bf00      	nop
 8013fdc:	3710      	adds	r7, #16
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}
 8013fe2:	bf00      	nop
 8013fe4:	0801e068 	.word	0x0801e068
 8013fe8:	0801e6d0 	.word	0x0801e6d0
 8013fec:	0801e0ac 	.word	0x0801e0ac
 8013ff0:	0801e6ec 	.word	0x0801e6ec
 8013ff4:	0801e70c 	.word	0x0801e70c
 8013ff8:	0801e724 	.word	0x0801e724
 8013ffc:	0801e740 	.word	0x0801e740

08014000 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b082      	sub	sp, #8
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d106      	bne.n	801401c <tcp_next_iss+0x1c>
 801400e:	4b0a      	ldr	r3, [pc, #40]	@ (8014038 <tcp_next_iss+0x38>)
 8014010:	f640 02af 	movw	r2, #2223	@ 0x8af
 8014014:	4909      	ldr	r1, [pc, #36]	@ (801403c <tcp_next_iss+0x3c>)
 8014016:	480a      	ldr	r0, [pc, #40]	@ (8014040 <tcp_next_iss+0x40>)
 8014018:	f008 f924 	bl	801c264 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801401c:	4b09      	ldr	r3, [pc, #36]	@ (8014044 <tcp_next_iss+0x44>)
 801401e:	681a      	ldr	r2, [r3, #0]
 8014020:	4b09      	ldr	r3, [pc, #36]	@ (8014048 <tcp_next_iss+0x48>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	4413      	add	r3, r2
 8014026:	4a07      	ldr	r2, [pc, #28]	@ (8014044 <tcp_next_iss+0x44>)
 8014028:	6013      	str	r3, [r2, #0]
  return iss;
 801402a:	4b06      	ldr	r3, [pc, #24]	@ (8014044 <tcp_next_iss+0x44>)
 801402c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801402e:	4618      	mov	r0, r3
 8014030:	3708      	adds	r7, #8
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}
 8014036:	bf00      	nop
 8014038:	0801e068 	.word	0x0801e068
 801403c:	0801e758 	.word	0x0801e758
 8014040:	0801e0ac 	.word	0x0801e0ac
 8014044:	20000028 	.word	0x20000028
 8014048:	2002757c 	.word	0x2002757c

0801404c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b086      	sub	sp, #24
 8014050:	af00      	add	r7, sp, #0
 8014052:	4603      	mov	r3, r0
 8014054:	60b9      	str	r1, [r7, #8]
 8014056:	607a      	str	r2, [r7, #4]
 8014058:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d106      	bne.n	801406e <tcp_eff_send_mss_netif+0x22>
 8014060:	4b14      	ldr	r3, [pc, #80]	@ (80140b4 <tcp_eff_send_mss_netif+0x68>)
 8014062:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8014066:	4914      	ldr	r1, [pc, #80]	@ (80140b8 <tcp_eff_send_mss_netif+0x6c>)
 8014068:	4814      	ldr	r0, [pc, #80]	@ (80140bc <tcp_eff_send_mss_netif+0x70>)
 801406a:	f008 f8fb 	bl	801c264 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d101      	bne.n	8014078 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014074:	89fb      	ldrh	r3, [r7, #14]
 8014076:	e019      	b.n	80140ac <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801407c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801407e:	8afb      	ldrh	r3, [r7, #22]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d012      	beq.n	80140aa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014084:	2328      	movs	r3, #40	@ 0x28
 8014086:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014088:	8afa      	ldrh	r2, [r7, #22]
 801408a:	8abb      	ldrh	r3, [r7, #20]
 801408c:	429a      	cmp	r2, r3
 801408e:	d904      	bls.n	801409a <tcp_eff_send_mss_netif+0x4e>
 8014090:	8afa      	ldrh	r2, [r7, #22]
 8014092:	8abb      	ldrh	r3, [r7, #20]
 8014094:	1ad3      	subs	r3, r2, r3
 8014096:	b29b      	uxth	r3, r3
 8014098:	e000      	b.n	801409c <tcp_eff_send_mss_netif+0x50>
 801409a:	2300      	movs	r3, #0
 801409c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801409e:	8a7a      	ldrh	r2, [r7, #18]
 80140a0:	89fb      	ldrh	r3, [r7, #14]
 80140a2:	4293      	cmp	r3, r2
 80140a4:	bf28      	it	cs
 80140a6:	4613      	movcs	r3, r2
 80140a8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80140aa:	89fb      	ldrh	r3, [r7, #14]
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3718      	adds	r7, #24
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}
 80140b4:	0801e068 	.word	0x0801e068
 80140b8:	0801e774 	.word	0x0801e774
 80140bc:	0801e0ac 	.word	0x0801e0ac

080140c0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b084      	sub	sp, #16
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
 80140c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80140ca:	683b      	ldr	r3, [r7, #0]
 80140cc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d119      	bne.n	8014108 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80140d4:	4b10      	ldr	r3, [pc, #64]	@ (8014118 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80140d6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80140da:	4910      	ldr	r1, [pc, #64]	@ (801411c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80140dc:	4810      	ldr	r0, [pc, #64]	@ (8014120 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80140de:	f008 f8c1 	bl	801c264 <iprintf>

  while (pcb != NULL) {
 80140e2:	e011      	b.n	8014108 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	681a      	ldr	r2, [r3, #0]
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d108      	bne.n	8014102 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	68db      	ldr	r3, [r3, #12]
 80140f4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80140f6:	68f8      	ldr	r0, [r7, #12]
 80140f8:	f7fe ffc4 	bl	8013084 <tcp_abort>
      pcb = next;
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	60fb      	str	r3, [r7, #12]
 8014100:	e002      	b.n	8014108 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	68db      	ldr	r3, [r3, #12]
 8014106:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d1ea      	bne.n	80140e4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801410e:	bf00      	nop
 8014110:	bf00      	nop
 8014112:	3710      	adds	r7, #16
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}
 8014118:	0801e068 	.word	0x0801e068
 801411c:	0801e79c 	.word	0x0801e79c
 8014120:	0801e0ac 	.word	0x0801e0ac

08014124 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b084      	sub	sp, #16
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d02a      	beq.n	801418a <tcp_netif_ip_addr_changed+0x66>
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d026      	beq.n	801418a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801413c:	4b15      	ldr	r3, [pc, #84]	@ (8014194 <tcp_netif_ip_addr_changed+0x70>)
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	4619      	mov	r1, r3
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f7ff ffbc 	bl	80140c0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014148:	4b13      	ldr	r3, [pc, #76]	@ (8014198 <tcp_netif_ip_addr_changed+0x74>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	4619      	mov	r1, r3
 801414e:	6878      	ldr	r0, [r7, #4]
 8014150:	f7ff ffb6 	bl	80140c0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014154:	683b      	ldr	r3, [r7, #0]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d017      	beq.n	801418a <tcp_netif_ip_addr_changed+0x66>
 801415a:	683b      	ldr	r3, [r7, #0]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d013      	beq.n	801418a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014162:	4b0e      	ldr	r3, [pc, #56]	@ (801419c <tcp_netif_ip_addr_changed+0x78>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	60fb      	str	r3, [r7, #12]
 8014168:	e00c      	b.n	8014184 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	681a      	ldr	r2, [r3, #0]
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	429a      	cmp	r2, r3
 8014174:	d103      	bne.n	801417e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	681a      	ldr	r2, [r3, #0]
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	68db      	ldr	r3, [r3, #12]
 8014182:	60fb      	str	r3, [r7, #12]
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d1ef      	bne.n	801416a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801418a:	bf00      	nop
 801418c:	3710      	adds	r7, #16
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}
 8014192:	bf00      	nop
 8014194:	20027588 	.word	0x20027588
 8014198:	20027580 	.word	0x20027580
 801419c:	20027584 	.word	0x20027584

080141a0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d007      	beq.n	80141c0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80141b4:	4618      	mov	r0, r3
 80141b6:	f7ff fc3d 	bl	8013a34 <tcp_segs_free>
    pcb->ooseq = NULL;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	2200      	movs	r2, #0
 80141be:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80141c0:	bf00      	nop
 80141c2:	3708      	adds	r7, #8
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}

080141c8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80141c8:	b590      	push	{r4, r7, lr}
 80141ca:	b08d      	sub	sp, #52	@ 0x34
 80141cc:	af04      	add	r7, sp, #16
 80141ce:	6078      	str	r0, [r7, #4]
 80141d0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d105      	bne.n	80141e4 <tcp_input+0x1c>
 80141d8:	4b9b      	ldr	r3, [pc, #620]	@ (8014448 <tcp_input+0x280>)
 80141da:	2283      	movs	r2, #131	@ 0x83
 80141dc:	499b      	ldr	r1, [pc, #620]	@ (801444c <tcp_input+0x284>)
 80141de:	489c      	ldr	r0, [pc, #624]	@ (8014450 <tcp_input+0x288>)
 80141e0:	f008 f840 	bl	801c264 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	685b      	ldr	r3, [r3, #4]
 80141e8:	4a9a      	ldr	r2, [pc, #616]	@ (8014454 <tcp_input+0x28c>)
 80141ea:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	895b      	ldrh	r3, [r3, #10]
 80141f0:	2b13      	cmp	r3, #19
 80141f2:	f240 83d1 	bls.w	8014998 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80141f6:	4b98      	ldr	r3, [pc, #608]	@ (8014458 <tcp_input+0x290>)
 80141f8:	695b      	ldr	r3, [r3, #20]
 80141fa:	4a97      	ldr	r2, [pc, #604]	@ (8014458 <tcp_input+0x290>)
 80141fc:	6812      	ldr	r2, [r2, #0]
 80141fe:	4611      	mov	r1, r2
 8014200:	4618      	mov	r0, r3
 8014202:	f005 feef 	bl	8019fe4 <ip4_addr_isbroadcast_u32>
 8014206:	4603      	mov	r3, r0
 8014208:	2b00      	cmp	r3, #0
 801420a:	f040 83c7 	bne.w	801499c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801420e:	4b92      	ldr	r3, [pc, #584]	@ (8014458 <tcp_input+0x290>)
 8014210:	695b      	ldr	r3, [r3, #20]
 8014212:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014216:	2be0      	cmp	r3, #224	@ 0xe0
 8014218:	f000 83c0 	beq.w	801499c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801421c:	4b8d      	ldr	r3, [pc, #564]	@ (8014454 <tcp_input+0x28c>)
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	899b      	ldrh	r3, [r3, #12]
 8014222:	b29b      	uxth	r3, r3
 8014224:	4618      	mov	r0, r3
 8014226:	f7fc fd9b 	bl	8010d60 <lwip_htons>
 801422a:	4603      	mov	r3, r0
 801422c:	0b1b      	lsrs	r3, r3, #12
 801422e:	b29b      	uxth	r3, r3
 8014230:	b2db      	uxtb	r3, r3
 8014232:	009b      	lsls	r3, r3, #2
 8014234:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014236:	7cbb      	ldrb	r3, [r7, #18]
 8014238:	2b13      	cmp	r3, #19
 801423a:	f240 83b1 	bls.w	80149a0 <tcp_input+0x7d8>
 801423e:	7cbb      	ldrb	r3, [r7, #18]
 8014240:	b29a      	uxth	r2, r3
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	891b      	ldrh	r3, [r3, #8]
 8014246:	429a      	cmp	r2, r3
 8014248:	f200 83aa 	bhi.w	80149a0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801424c:	7cbb      	ldrb	r3, [r7, #18]
 801424e:	b29b      	uxth	r3, r3
 8014250:	3b14      	subs	r3, #20
 8014252:	b29a      	uxth	r2, r3
 8014254:	4b81      	ldr	r3, [pc, #516]	@ (801445c <tcp_input+0x294>)
 8014256:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014258:	4b81      	ldr	r3, [pc, #516]	@ (8014460 <tcp_input+0x298>)
 801425a:	2200      	movs	r2, #0
 801425c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	895a      	ldrh	r2, [r3, #10]
 8014262:	7cbb      	ldrb	r3, [r7, #18]
 8014264:	b29b      	uxth	r3, r3
 8014266:	429a      	cmp	r2, r3
 8014268:	d309      	bcc.n	801427e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801426a:	4b7c      	ldr	r3, [pc, #496]	@ (801445c <tcp_input+0x294>)
 801426c:	881a      	ldrh	r2, [r3, #0]
 801426e:	4b7d      	ldr	r3, [pc, #500]	@ (8014464 <tcp_input+0x29c>)
 8014270:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8014272:	7cbb      	ldrb	r3, [r7, #18]
 8014274:	4619      	mov	r1, r3
 8014276:	6878      	ldr	r0, [r7, #4]
 8014278:	f7fe f8da 	bl	8012430 <pbuf_remove_header>
 801427c:	e04e      	b.n	801431c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d105      	bne.n	8014292 <tcp_input+0xca>
 8014286:	4b70      	ldr	r3, [pc, #448]	@ (8014448 <tcp_input+0x280>)
 8014288:	22c2      	movs	r2, #194	@ 0xc2
 801428a:	4977      	ldr	r1, [pc, #476]	@ (8014468 <tcp_input+0x2a0>)
 801428c:	4870      	ldr	r0, [pc, #448]	@ (8014450 <tcp_input+0x288>)
 801428e:	f007 ffe9 	bl	801c264 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8014292:	2114      	movs	r1, #20
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f7fe f8cb 	bl	8012430 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	895a      	ldrh	r2, [r3, #10]
 801429e:	4b71      	ldr	r3, [pc, #452]	@ (8014464 <tcp_input+0x29c>)
 80142a0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80142a2:	4b6e      	ldr	r3, [pc, #440]	@ (801445c <tcp_input+0x294>)
 80142a4:	881a      	ldrh	r2, [r3, #0]
 80142a6:	4b6f      	ldr	r3, [pc, #444]	@ (8014464 <tcp_input+0x29c>)
 80142a8:	881b      	ldrh	r3, [r3, #0]
 80142aa:	1ad3      	subs	r3, r2, r3
 80142ac:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80142ae:	4b6d      	ldr	r3, [pc, #436]	@ (8014464 <tcp_input+0x29c>)
 80142b0:	881b      	ldrh	r3, [r3, #0]
 80142b2:	4619      	mov	r1, r3
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f7fe f8bb 	bl	8012430 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	895b      	ldrh	r3, [r3, #10]
 80142c0:	8a3a      	ldrh	r2, [r7, #16]
 80142c2:	429a      	cmp	r2, r3
 80142c4:	f200 836e 	bhi.w	80149a4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	685b      	ldr	r3, [r3, #4]
 80142ce:	4a64      	ldr	r2, [pc, #400]	@ (8014460 <tcp_input+0x298>)
 80142d0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	8a3a      	ldrh	r2, [r7, #16]
 80142d8:	4611      	mov	r1, r2
 80142da:	4618      	mov	r0, r3
 80142dc:	f7fe f8a8 	bl	8012430 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	891a      	ldrh	r2, [r3, #8]
 80142e4:	8a3b      	ldrh	r3, [r7, #16]
 80142e6:	1ad3      	subs	r3, r2, r3
 80142e8:	b29a      	uxth	r2, r3
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	895b      	ldrh	r3, [r3, #10]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d005      	beq.n	8014302 <tcp_input+0x13a>
 80142f6:	4b54      	ldr	r3, [pc, #336]	@ (8014448 <tcp_input+0x280>)
 80142f8:	22df      	movs	r2, #223	@ 0xdf
 80142fa:	495c      	ldr	r1, [pc, #368]	@ (801446c <tcp_input+0x2a4>)
 80142fc:	4854      	ldr	r0, [pc, #336]	@ (8014450 <tcp_input+0x288>)
 80142fe:	f007 ffb1 	bl	801c264 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	891a      	ldrh	r2, [r3, #8]
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	891b      	ldrh	r3, [r3, #8]
 801430c:	429a      	cmp	r2, r3
 801430e:	d005      	beq.n	801431c <tcp_input+0x154>
 8014310:	4b4d      	ldr	r3, [pc, #308]	@ (8014448 <tcp_input+0x280>)
 8014312:	22e0      	movs	r2, #224	@ 0xe0
 8014314:	4956      	ldr	r1, [pc, #344]	@ (8014470 <tcp_input+0x2a8>)
 8014316:	484e      	ldr	r0, [pc, #312]	@ (8014450 <tcp_input+0x288>)
 8014318:	f007 ffa4 	bl	801c264 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801431c:	4b4d      	ldr	r3, [pc, #308]	@ (8014454 <tcp_input+0x28c>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	881b      	ldrh	r3, [r3, #0]
 8014322:	b29b      	uxth	r3, r3
 8014324:	4a4b      	ldr	r2, [pc, #300]	@ (8014454 <tcp_input+0x28c>)
 8014326:	6814      	ldr	r4, [r2, #0]
 8014328:	4618      	mov	r0, r3
 801432a:	f7fc fd19 	bl	8010d60 <lwip_htons>
 801432e:	4603      	mov	r3, r0
 8014330:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8014332:	4b48      	ldr	r3, [pc, #288]	@ (8014454 <tcp_input+0x28c>)
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	885b      	ldrh	r3, [r3, #2]
 8014338:	b29b      	uxth	r3, r3
 801433a:	4a46      	ldr	r2, [pc, #280]	@ (8014454 <tcp_input+0x28c>)
 801433c:	6814      	ldr	r4, [r2, #0]
 801433e:	4618      	mov	r0, r3
 8014340:	f7fc fd0e 	bl	8010d60 <lwip_htons>
 8014344:	4603      	mov	r3, r0
 8014346:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014348:	4b42      	ldr	r3, [pc, #264]	@ (8014454 <tcp_input+0x28c>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	685b      	ldr	r3, [r3, #4]
 801434e:	4a41      	ldr	r2, [pc, #260]	@ (8014454 <tcp_input+0x28c>)
 8014350:	6814      	ldr	r4, [r2, #0]
 8014352:	4618      	mov	r0, r3
 8014354:	f7fc fd1a 	bl	8010d8c <lwip_htonl>
 8014358:	4603      	mov	r3, r0
 801435a:	6063      	str	r3, [r4, #4]
 801435c:	6863      	ldr	r3, [r4, #4]
 801435e:	4a45      	ldr	r2, [pc, #276]	@ (8014474 <tcp_input+0x2ac>)
 8014360:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8014362:	4b3c      	ldr	r3, [pc, #240]	@ (8014454 <tcp_input+0x28c>)
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	689b      	ldr	r3, [r3, #8]
 8014368:	4a3a      	ldr	r2, [pc, #232]	@ (8014454 <tcp_input+0x28c>)
 801436a:	6814      	ldr	r4, [r2, #0]
 801436c:	4618      	mov	r0, r3
 801436e:	f7fc fd0d 	bl	8010d8c <lwip_htonl>
 8014372:	4603      	mov	r3, r0
 8014374:	60a3      	str	r3, [r4, #8]
 8014376:	68a3      	ldr	r3, [r4, #8]
 8014378:	4a3f      	ldr	r2, [pc, #252]	@ (8014478 <tcp_input+0x2b0>)
 801437a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801437c:	4b35      	ldr	r3, [pc, #212]	@ (8014454 <tcp_input+0x28c>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	89db      	ldrh	r3, [r3, #14]
 8014382:	b29b      	uxth	r3, r3
 8014384:	4a33      	ldr	r2, [pc, #204]	@ (8014454 <tcp_input+0x28c>)
 8014386:	6814      	ldr	r4, [r2, #0]
 8014388:	4618      	mov	r0, r3
 801438a:	f7fc fce9 	bl	8010d60 <lwip_htons>
 801438e:	4603      	mov	r3, r0
 8014390:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8014392:	4b30      	ldr	r3, [pc, #192]	@ (8014454 <tcp_input+0x28c>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	899b      	ldrh	r3, [r3, #12]
 8014398:	b29b      	uxth	r3, r3
 801439a:	4618      	mov	r0, r3
 801439c:	f7fc fce0 	bl	8010d60 <lwip_htons>
 80143a0:	4603      	mov	r3, r0
 80143a2:	b2db      	uxtb	r3, r3
 80143a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80143a8:	b2da      	uxtb	r2, r3
 80143aa:	4b34      	ldr	r3, [pc, #208]	@ (801447c <tcp_input+0x2b4>)
 80143ac:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	891a      	ldrh	r2, [r3, #8]
 80143b2:	4b33      	ldr	r3, [pc, #204]	@ (8014480 <tcp_input+0x2b8>)
 80143b4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80143b6:	4b31      	ldr	r3, [pc, #196]	@ (801447c <tcp_input+0x2b4>)
 80143b8:	781b      	ldrb	r3, [r3, #0]
 80143ba:	f003 0303 	and.w	r3, r3, #3
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d00c      	beq.n	80143dc <tcp_input+0x214>
    tcplen++;
 80143c2:	4b2f      	ldr	r3, [pc, #188]	@ (8014480 <tcp_input+0x2b8>)
 80143c4:	881b      	ldrh	r3, [r3, #0]
 80143c6:	3301      	adds	r3, #1
 80143c8:	b29a      	uxth	r2, r3
 80143ca:	4b2d      	ldr	r3, [pc, #180]	@ (8014480 <tcp_input+0x2b8>)
 80143cc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	891a      	ldrh	r2, [r3, #8]
 80143d2:	4b2b      	ldr	r3, [pc, #172]	@ (8014480 <tcp_input+0x2b8>)
 80143d4:	881b      	ldrh	r3, [r3, #0]
 80143d6:	429a      	cmp	r2, r3
 80143d8:	f200 82e6 	bhi.w	80149a8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80143dc:	2300      	movs	r3, #0
 80143de:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80143e0:	4b28      	ldr	r3, [pc, #160]	@ (8014484 <tcp_input+0x2bc>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	61fb      	str	r3, [r7, #28]
 80143e6:	e09d      	b.n	8014524 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80143e8:	69fb      	ldr	r3, [r7, #28]
 80143ea:	7d1b      	ldrb	r3, [r3, #20]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d105      	bne.n	80143fc <tcp_input+0x234>
 80143f0:	4b15      	ldr	r3, [pc, #84]	@ (8014448 <tcp_input+0x280>)
 80143f2:	22fb      	movs	r2, #251	@ 0xfb
 80143f4:	4924      	ldr	r1, [pc, #144]	@ (8014488 <tcp_input+0x2c0>)
 80143f6:	4816      	ldr	r0, [pc, #88]	@ (8014450 <tcp_input+0x288>)
 80143f8:	f007 ff34 	bl	801c264 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80143fc:	69fb      	ldr	r3, [r7, #28]
 80143fe:	7d1b      	ldrb	r3, [r3, #20]
 8014400:	2b0a      	cmp	r3, #10
 8014402:	d105      	bne.n	8014410 <tcp_input+0x248>
 8014404:	4b10      	ldr	r3, [pc, #64]	@ (8014448 <tcp_input+0x280>)
 8014406:	22fc      	movs	r2, #252	@ 0xfc
 8014408:	4920      	ldr	r1, [pc, #128]	@ (801448c <tcp_input+0x2c4>)
 801440a:	4811      	ldr	r0, [pc, #68]	@ (8014450 <tcp_input+0x288>)
 801440c:	f007 ff2a 	bl	801c264 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014410:	69fb      	ldr	r3, [r7, #28]
 8014412:	7d1b      	ldrb	r3, [r3, #20]
 8014414:	2b01      	cmp	r3, #1
 8014416:	d105      	bne.n	8014424 <tcp_input+0x25c>
 8014418:	4b0b      	ldr	r3, [pc, #44]	@ (8014448 <tcp_input+0x280>)
 801441a:	22fd      	movs	r2, #253	@ 0xfd
 801441c:	491c      	ldr	r1, [pc, #112]	@ (8014490 <tcp_input+0x2c8>)
 801441e:	480c      	ldr	r0, [pc, #48]	@ (8014450 <tcp_input+0x288>)
 8014420:	f007 ff20 	bl	801c264 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014424:	69fb      	ldr	r3, [r7, #28]
 8014426:	7a1b      	ldrb	r3, [r3, #8]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d033      	beq.n	8014494 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801442c:	69fb      	ldr	r3, [r7, #28]
 801442e:	7a1a      	ldrb	r2, [r3, #8]
 8014430:	4b09      	ldr	r3, [pc, #36]	@ (8014458 <tcp_input+0x290>)
 8014432:	685b      	ldr	r3, [r3, #4]
 8014434:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014438:	3301      	adds	r3, #1
 801443a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801443c:	429a      	cmp	r2, r3
 801443e:	d029      	beq.n	8014494 <tcp_input+0x2cc>
      prev = pcb;
 8014440:	69fb      	ldr	r3, [r7, #28]
 8014442:	61bb      	str	r3, [r7, #24]
      continue;
 8014444:	e06b      	b.n	801451e <tcp_input+0x356>
 8014446:	bf00      	nop
 8014448:	0801e7d0 	.word	0x0801e7d0
 801444c:	0801e804 	.word	0x0801e804
 8014450:	0801e81c 	.word	0x0801e81c
 8014454:	200275a4 	.word	0x200275a4
 8014458:	2002447c 	.word	0x2002447c
 801445c:	200275a8 	.word	0x200275a8
 8014460:	200275ac 	.word	0x200275ac
 8014464:	200275aa 	.word	0x200275aa
 8014468:	0801e844 	.word	0x0801e844
 801446c:	0801e854 	.word	0x0801e854
 8014470:	0801e860 	.word	0x0801e860
 8014474:	200275b4 	.word	0x200275b4
 8014478:	200275b8 	.word	0x200275b8
 801447c:	200275c0 	.word	0x200275c0
 8014480:	200275be 	.word	0x200275be
 8014484:	20027588 	.word	0x20027588
 8014488:	0801e880 	.word	0x0801e880
 801448c:	0801e8a8 	.word	0x0801e8a8
 8014490:	0801e8d4 	.word	0x0801e8d4
    }

    if (pcb->remote_port == tcphdr->src &&
 8014494:	69fb      	ldr	r3, [r7, #28]
 8014496:	8b1a      	ldrh	r2, [r3, #24]
 8014498:	4b72      	ldr	r3, [pc, #456]	@ (8014664 <tcp_input+0x49c>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	881b      	ldrh	r3, [r3, #0]
 801449e:	b29b      	uxth	r3, r3
 80144a0:	429a      	cmp	r2, r3
 80144a2:	d13a      	bne.n	801451a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80144a4:	69fb      	ldr	r3, [r7, #28]
 80144a6:	8ada      	ldrh	r2, [r3, #22]
 80144a8:	4b6e      	ldr	r3, [pc, #440]	@ (8014664 <tcp_input+0x49c>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	885b      	ldrh	r3, [r3, #2]
 80144ae:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80144b0:	429a      	cmp	r2, r3
 80144b2:	d132      	bne.n	801451a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80144b4:	69fb      	ldr	r3, [r7, #28]
 80144b6:	685a      	ldr	r2, [r3, #4]
 80144b8:	4b6b      	ldr	r3, [pc, #428]	@ (8014668 <tcp_input+0x4a0>)
 80144ba:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80144bc:	429a      	cmp	r2, r3
 80144be:	d12c      	bne.n	801451a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80144c0:	69fb      	ldr	r3, [r7, #28]
 80144c2:	681a      	ldr	r2, [r3, #0]
 80144c4:	4b68      	ldr	r3, [pc, #416]	@ (8014668 <tcp_input+0x4a0>)
 80144c6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80144c8:	429a      	cmp	r2, r3
 80144ca:	d126      	bne.n	801451a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80144cc:	69fb      	ldr	r3, [r7, #28]
 80144ce:	68db      	ldr	r3, [r3, #12]
 80144d0:	69fa      	ldr	r2, [r7, #28]
 80144d2:	429a      	cmp	r2, r3
 80144d4:	d106      	bne.n	80144e4 <tcp_input+0x31c>
 80144d6:	4b65      	ldr	r3, [pc, #404]	@ (801466c <tcp_input+0x4a4>)
 80144d8:	f240 120d 	movw	r2, #269	@ 0x10d
 80144dc:	4964      	ldr	r1, [pc, #400]	@ (8014670 <tcp_input+0x4a8>)
 80144de:	4865      	ldr	r0, [pc, #404]	@ (8014674 <tcp_input+0x4ac>)
 80144e0:	f007 fec0 	bl	801c264 <iprintf>
      if (prev != NULL) {
 80144e4:	69bb      	ldr	r3, [r7, #24]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d00a      	beq.n	8014500 <tcp_input+0x338>
        prev->next = pcb->next;
 80144ea:	69fb      	ldr	r3, [r7, #28]
 80144ec:	68da      	ldr	r2, [r3, #12]
 80144ee:	69bb      	ldr	r3, [r7, #24]
 80144f0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80144f2:	4b61      	ldr	r3, [pc, #388]	@ (8014678 <tcp_input+0x4b0>)
 80144f4:	681a      	ldr	r2, [r3, #0]
 80144f6:	69fb      	ldr	r3, [r7, #28]
 80144f8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80144fa:	4a5f      	ldr	r2, [pc, #380]	@ (8014678 <tcp_input+0x4b0>)
 80144fc:	69fb      	ldr	r3, [r7, #28]
 80144fe:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014500:	69fb      	ldr	r3, [r7, #28]
 8014502:	68db      	ldr	r3, [r3, #12]
 8014504:	69fa      	ldr	r2, [r7, #28]
 8014506:	429a      	cmp	r2, r3
 8014508:	d111      	bne.n	801452e <tcp_input+0x366>
 801450a:	4b58      	ldr	r3, [pc, #352]	@ (801466c <tcp_input+0x4a4>)
 801450c:	f240 1215 	movw	r2, #277	@ 0x115
 8014510:	495a      	ldr	r1, [pc, #360]	@ (801467c <tcp_input+0x4b4>)
 8014512:	4858      	ldr	r0, [pc, #352]	@ (8014674 <tcp_input+0x4ac>)
 8014514:	f007 fea6 	bl	801c264 <iprintf>
      break;
 8014518:	e009      	b.n	801452e <tcp_input+0x366>
    }
    prev = pcb;
 801451a:	69fb      	ldr	r3, [r7, #28]
 801451c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801451e:	69fb      	ldr	r3, [r7, #28]
 8014520:	68db      	ldr	r3, [r3, #12]
 8014522:	61fb      	str	r3, [r7, #28]
 8014524:	69fb      	ldr	r3, [r7, #28]
 8014526:	2b00      	cmp	r3, #0
 8014528:	f47f af5e 	bne.w	80143e8 <tcp_input+0x220>
 801452c:	e000      	b.n	8014530 <tcp_input+0x368>
      break;
 801452e:	bf00      	nop
  }

  if (pcb == NULL) {
 8014530:	69fb      	ldr	r3, [r7, #28]
 8014532:	2b00      	cmp	r3, #0
 8014534:	f040 80aa 	bne.w	801468c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014538:	4b51      	ldr	r3, [pc, #324]	@ (8014680 <tcp_input+0x4b8>)
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	61fb      	str	r3, [r7, #28]
 801453e:	e03f      	b.n	80145c0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014540:	69fb      	ldr	r3, [r7, #28]
 8014542:	7d1b      	ldrb	r3, [r3, #20]
 8014544:	2b0a      	cmp	r3, #10
 8014546:	d006      	beq.n	8014556 <tcp_input+0x38e>
 8014548:	4b48      	ldr	r3, [pc, #288]	@ (801466c <tcp_input+0x4a4>)
 801454a:	f240 121f 	movw	r2, #287	@ 0x11f
 801454e:	494d      	ldr	r1, [pc, #308]	@ (8014684 <tcp_input+0x4bc>)
 8014550:	4848      	ldr	r0, [pc, #288]	@ (8014674 <tcp_input+0x4ac>)
 8014552:	f007 fe87 	bl	801c264 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014556:	69fb      	ldr	r3, [r7, #28]
 8014558:	7a1b      	ldrb	r3, [r3, #8]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d009      	beq.n	8014572 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801455e:	69fb      	ldr	r3, [r7, #28]
 8014560:	7a1a      	ldrb	r2, [r3, #8]
 8014562:	4b41      	ldr	r3, [pc, #260]	@ (8014668 <tcp_input+0x4a0>)
 8014564:	685b      	ldr	r3, [r3, #4]
 8014566:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801456a:	3301      	adds	r3, #1
 801456c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801456e:	429a      	cmp	r2, r3
 8014570:	d122      	bne.n	80145b8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8014572:	69fb      	ldr	r3, [r7, #28]
 8014574:	8b1a      	ldrh	r2, [r3, #24]
 8014576:	4b3b      	ldr	r3, [pc, #236]	@ (8014664 <tcp_input+0x49c>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	881b      	ldrh	r3, [r3, #0]
 801457c:	b29b      	uxth	r3, r3
 801457e:	429a      	cmp	r2, r3
 8014580:	d11b      	bne.n	80145ba <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8014582:	69fb      	ldr	r3, [r7, #28]
 8014584:	8ada      	ldrh	r2, [r3, #22]
 8014586:	4b37      	ldr	r3, [pc, #220]	@ (8014664 <tcp_input+0x49c>)
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	885b      	ldrh	r3, [r3, #2]
 801458c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801458e:	429a      	cmp	r2, r3
 8014590:	d113      	bne.n	80145ba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014592:	69fb      	ldr	r3, [r7, #28]
 8014594:	685a      	ldr	r2, [r3, #4]
 8014596:	4b34      	ldr	r3, [pc, #208]	@ (8014668 <tcp_input+0x4a0>)
 8014598:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801459a:	429a      	cmp	r2, r3
 801459c:	d10d      	bne.n	80145ba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801459e:	69fb      	ldr	r3, [r7, #28]
 80145a0:	681a      	ldr	r2, [r3, #0]
 80145a2:	4b31      	ldr	r3, [pc, #196]	@ (8014668 <tcp_input+0x4a0>)
 80145a4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80145a6:	429a      	cmp	r2, r3
 80145a8:	d107      	bne.n	80145ba <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80145aa:	69f8      	ldr	r0, [r7, #28]
 80145ac:	f000 fb56 	bl	8014c5c <tcp_timewait_input>
        }
        pbuf_free(p);
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f7fd ffc3 	bl	801253c <pbuf_free>
        return;
 80145b6:	e1fd      	b.n	80149b4 <tcp_input+0x7ec>
        continue;
 80145b8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80145ba:	69fb      	ldr	r3, [r7, #28]
 80145bc:	68db      	ldr	r3, [r3, #12]
 80145be:	61fb      	str	r3, [r7, #28]
 80145c0:	69fb      	ldr	r3, [r7, #28]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d1bc      	bne.n	8014540 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80145c6:	2300      	movs	r3, #0
 80145c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80145ca:	4b2f      	ldr	r3, [pc, #188]	@ (8014688 <tcp_input+0x4c0>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	617b      	str	r3, [r7, #20]
 80145d0:	e02a      	b.n	8014628 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	7a1b      	ldrb	r3, [r3, #8]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d00c      	beq.n	80145f4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80145da:	697b      	ldr	r3, [r7, #20]
 80145dc:	7a1a      	ldrb	r2, [r3, #8]
 80145de:	4b22      	ldr	r3, [pc, #136]	@ (8014668 <tcp_input+0x4a0>)
 80145e0:	685b      	ldr	r3, [r3, #4]
 80145e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80145e6:	3301      	adds	r3, #1
 80145e8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80145ea:	429a      	cmp	r2, r3
 80145ec:	d002      	beq.n	80145f4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80145ee:	697b      	ldr	r3, [r7, #20]
 80145f0:	61bb      	str	r3, [r7, #24]
        continue;
 80145f2:	e016      	b.n	8014622 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80145f4:	697b      	ldr	r3, [r7, #20]
 80145f6:	8ada      	ldrh	r2, [r3, #22]
 80145f8:	4b1a      	ldr	r3, [pc, #104]	@ (8014664 <tcp_input+0x49c>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	885b      	ldrh	r3, [r3, #2]
 80145fe:	b29b      	uxth	r3, r3
 8014600:	429a      	cmp	r2, r3
 8014602:	d10c      	bne.n	801461e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014604:	697b      	ldr	r3, [r7, #20]
 8014606:	681a      	ldr	r2, [r3, #0]
 8014608:	4b17      	ldr	r3, [pc, #92]	@ (8014668 <tcp_input+0x4a0>)
 801460a:	695b      	ldr	r3, [r3, #20]
 801460c:	429a      	cmp	r2, r3
 801460e:	d00f      	beq.n	8014630 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014610:	697b      	ldr	r3, [r7, #20]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d00d      	beq.n	8014632 <tcp_input+0x46a>
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d009      	beq.n	8014632 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801461e:	697b      	ldr	r3, [r7, #20]
 8014620:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014622:	697b      	ldr	r3, [r7, #20]
 8014624:	68db      	ldr	r3, [r3, #12]
 8014626:	617b      	str	r3, [r7, #20]
 8014628:	697b      	ldr	r3, [r7, #20]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d1d1      	bne.n	80145d2 <tcp_input+0x40a>
 801462e:	e000      	b.n	8014632 <tcp_input+0x46a>
            break;
 8014630:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d029      	beq.n	801468c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014638:	69bb      	ldr	r3, [r7, #24]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d00a      	beq.n	8014654 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801463e:	697b      	ldr	r3, [r7, #20]
 8014640:	68da      	ldr	r2, [r3, #12]
 8014642:	69bb      	ldr	r3, [r7, #24]
 8014644:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8014646:	4b10      	ldr	r3, [pc, #64]	@ (8014688 <tcp_input+0x4c0>)
 8014648:	681a      	ldr	r2, [r3, #0]
 801464a:	697b      	ldr	r3, [r7, #20]
 801464c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801464e:	4a0e      	ldr	r2, [pc, #56]	@ (8014688 <tcp_input+0x4c0>)
 8014650:	697b      	ldr	r3, [r7, #20]
 8014652:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014654:	6978      	ldr	r0, [r7, #20]
 8014656:	f000 fa03 	bl	8014a60 <tcp_listen_input>
      }
      pbuf_free(p);
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f7fd ff6e 	bl	801253c <pbuf_free>
      return;
 8014660:	e1a8      	b.n	80149b4 <tcp_input+0x7ec>
 8014662:	bf00      	nop
 8014664:	200275a4 	.word	0x200275a4
 8014668:	2002447c 	.word	0x2002447c
 801466c:	0801e7d0 	.word	0x0801e7d0
 8014670:	0801e8fc 	.word	0x0801e8fc
 8014674:	0801e81c 	.word	0x0801e81c
 8014678:	20027588 	.word	0x20027588
 801467c:	0801e928 	.word	0x0801e928
 8014680:	2002758c 	.word	0x2002758c
 8014684:	0801e954 	.word	0x0801e954
 8014688:	20027584 	.word	0x20027584
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801468c:	69fb      	ldr	r3, [r7, #28]
 801468e:	2b00      	cmp	r3, #0
 8014690:	f000 8158 	beq.w	8014944 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014694:	4b95      	ldr	r3, [pc, #596]	@ (80148ec <tcp_input+0x724>)
 8014696:	2200      	movs	r2, #0
 8014698:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	891a      	ldrh	r2, [r3, #8]
 801469e:	4b93      	ldr	r3, [pc, #588]	@ (80148ec <tcp_input+0x724>)
 80146a0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80146a2:	4a92      	ldr	r2, [pc, #584]	@ (80148ec <tcp_input+0x724>)
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80146a8:	4b91      	ldr	r3, [pc, #580]	@ (80148f0 <tcp_input+0x728>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	4a8f      	ldr	r2, [pc, #572]	@ (80148ec <tcp_input+0x724>)
 80146ae:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80146b0:	4b90      	ldr	r3, [pc, #576]	@ (80148f4 <tcp_input+0x72c>)
 80146b2:	2200      	movs	r2, #0
 80146b4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80146b6:	4b90      	ldr	r3, [pc, #576]	@ (80148f8 <tcp_input+0x730>)
 80146b8:	2200      	movs	r2, #0
 80146ba:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80146bc:	4b8f      	ldr	r3, [pc, #572]	@ (80148fc <tcp_input+0x734>)
 80146be:	2200      	movs	r2, #0
 80146c0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80146c2:	4b8f      	ldr	r3, [pc, #572]	@ (8014900 <tcp_input+0x738>)
 80146c4:	781b      	ldrb	r3, [r3, #0]
 80146c6:	f003 0308 	and.w	r3, r3, #8
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d006      	beq.n	80146dc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	7b5b      	ldrb	r3, [r3, #13]
 80146d2:	f043 0301 	orr.w	r3, r3, #1
 80146d6:	b2da      	uxtb	r2, r3
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80146dc:	69fb      	ldr	r3, [r7, #28]
 80146de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d017      	beq.n	8014714 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80146e4:	69f8      	ldr	r0, [r7, #28]
 80146e6:	f7ff f929 	bl	801393c <tcp_process_refused_data>
 80146ea:	4603      	mov	r3, r0
 80146ec:	f113 0f0d 	cmn.w	r3, #13
 80146f0:	d007      	beq.n	8014702 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80146f2:	69fb      	ldr	r3, [r7, #28]
 80146f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d00c      	beq.n	8014714 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80146fa:	4b82      	ldr	r3, [pc, #520]	@ (8014904 <tcp_input+0x73c>)
 80146fc:	881b      	ldrh	r3, [r3, #0]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d008      	beq.n	8014714 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014702:	69fb      	ldr	r3, [r7, #28]
 8014704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014706:	2b00      	cmp	r3, #0
 8014708:	f040 80e3 	bne.w	80148d2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801470c:	69f8      	ldr	r0, [r7, #28]
 801470e:	f003 f9a7 	bl	8017a60 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8014712:	e0de      	b.n	80148d2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8014714:	4a7c      	ldr	r2, [pc, #496]	@ (8014908 <tcp_input+0x740>)
 8014716:	69fb      	ldr	r3, [r7, #28]
 8014718:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801471a:	69f8      	ldr	r0, [r7, #28]
 801471c:	f000 fb18 	bl	8014d50 <tcp_process>
 8014720:	4603      	mov	r3, r0
 8014722:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8014724:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014728:	f113 0f0d 	cmn.w	r3, #13
 801472c:	f000 80d3 	beq.w	80148d6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8014730:	4b71      	ldr	r3, [pc, #452]	@ (80148f8 <tcp_input+0x730>)
 8014732:	781b      	ldrb	r3, [r3, #0]
 8014734:	f003 0308 	and.w	r3, r3, #8
 8014738:	2b00      	cmp	r3, #0
 801473a:	d015      	beq.n	8014768 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801473c:	69fb      	ldr	r3, [r7, #28]
 801473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014742:	2b00      	cmp	r3, #0
 8014744:	d008      	beq.n	8014758 <tcp_input+0x590>
 8014746:	69fb      	ldr	r3, [r7, #28]
 8014748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801474c:	69fa      	ldr	r2, [r7, #28]
 801474e:	6912      	ldr	r2, [r2, #16]
 8014750:	f06f 010d 	mvn.w	r1, #13
 8014754:	4610      	mov	r0, r2
 8014756:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014758:	69f9      	ldr	r1, [r7, #28]
 801475a:	486c      	ldr	r0, [pc, #432]	@ (801490c <tcp_input+0x744>)
 801475c:	f7ff fbbc 	bl	8013ed8 <tcp_pcb_remove>
        tcp_free(pcb);
 8014760:	69f8      	ldr	r0, [r7, #28]
 8014762:	f7fe f9a7 	bl	8012ab4 <tcp_free>
 8014766:	e0da      	b.n	801491e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8014768:	2300      	movs	r3, #0
 801476a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801476c:	4b63      	ldr	r3, [pc, #396]	@ (80148fc <tcp_input+0x734>)
 801476e:	881b      	ldrh	r3, [r3, #0]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d01d      	beq.n	80147b0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014774:	4b61      	ldr	r3, [pc, #388]	@ (80148fc <tcp_input+0x734>)
 8014776:	881b      	ldrh	r3, [r3, #0]
 8014778:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801477a:	69fb      	ldr	r3, [r7, #28]
 801477c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014780:	2b00      	cmp	r3, #0
 8014782:	d00a      	beq.n	801479a <tcp_input+0x5d2>
 8014784:	69fb      	ldr	r3, [r7, #28]
 8014786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801478a:	69fa      	ldr	r2, [r7, #28]
 801478c:	6910      	ldr	r0, [r2, #16]
 801478e:	89fa      	ldrh	r2, [r7, #14]
 8014790:	69f9      	ldr	r1, [r7, #28]
 8014792:	4798      	blx	r3
 8014794:	4603      	mov	r3, r0
 8014796:	74fb      	strb	r3, [r7, #19]
 8014798:	e001      	b.n	801479e <tcp_input+0x5d6>
 801479a:	2300      	movs	r3, #0
 801479c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801479e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80147a2:	f113 0f0d 	cmn.w	r3, #13
 80147a6:	f000 8098 	beq.w	80148da <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80147aa:	4b54      	ldr	r3, [pc, #336]	@ (80148fc <tcp_input+0x734>)
 80147ac:	2200      	movs	r2, #0
 80147ae:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80147b0:	69f8      	ldr	r0, [r7, #28]
 80147b2:	f000 f915 	bl	80149e0 <tcp_input_delayed_close>
 80147b6:	4603      	mov	r3, r0
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	f040 8090 	bne.w	80148de <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80147be:	4b4d      	ldr	r3, [pc, #308]	@ (80148f4 <tcp_input+0x72c>)
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d041      	beq.n	801484a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80147c6:	69fb      	ldr	r3, [r7, #28]
 80147c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d006      	beq.n	80147dc <tcp_input+0x614>
 80147ce:	4b50      	ldr	r3, [pc, #320]	@ (8014910 <tcp_input+0x748>)
 80147d0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80147d4:	494f      	ldr	r1, [pc, #316]	@ (8014914 <tcp_input+0x74c>)
 80147d6:	4850      	ldr	r0, [pc, #320]	@ (8014918 <tcp_input+0x750>)
 80147d8:	f007 fd44 	bl	801c264 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80147dc:	69fb      	ldr	r3, [r7, #28]
 80147de:	8b5b      	ldrh	r3, [r3, #26]
 80147e0:	f003 0310 	and.w	r3, r3, #16
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d008      	beq.n	80147fa <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80147e8:	4b42      	ldr	r3, [pc, #264]	@ (80148f4 <tcp_input+0x72c>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	4618      	mov	r0, r3
 80147ee:	f7fd fea5 	bl	801253c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80147f2:	69f8      	ldr	r0, [r7, #28]
 80147f4:	f7fe fc46 	bl	8013084 <tcp_abort>
            goto aborted;
 80147f8:	e091      	b.n	801491e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80147fa:	69fb      	ldr	r3, [r7, #28]
 80147fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014800:	2b00      	cmp	r3, #0
 8014802:	d00c      	beq.n	801481e <tcp_input+0x656>
 8014804:	69fb      	ldr	r3, [r7, #28]
 8014806:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801480a:	69fb      	ldr	r3, [r7, #28]
 801480c:	6918      	ldr	r0, [r3, #16]
 801480e:	4b39      	ldr	r3, [pc, #228]	@ (80148f4 <tcp_input+0x72c>)
 8014810:	681a      	ldr	r2, [r3, #0]
 8014812:	2300      	movs	r3, #0
 8014814:	69f9      	ldr	r1, [r7, #28]
 8014816:	47a0      	blx	r4
 8014818:	4603      	mov	r3, r0
 801481a:	74fb      	strb	r3, [r7, #19]
 801481c:	e008      	b.n	8014830 <tcp_input+0x668>
 801481e:	4b35      	ldr	r3, [pc, #212]	@ (80148f4 <tcp_input+0x72c>)
 8014820:	681a      	ldr	r2, [r3, #0]
 8014822:	2300      	movs	r3, #0
 8014824:	69f9      	ldr	r1, [r7, #28]
 8014826:	2000      	movs	r0, #0
 8014828:	f7ff f95e 	bl	8013ae8 <tcp_recv_null>
 801482c:	4603      	mov	r3, r0
 801482e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014830:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014834:	f113 0f0d 	cmn.w	r3, #13
 8014838:	d053      	beq.n	80148e2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801483a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d003      	beq.n	801484a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014842:	4b2c      	ldr	r3, [pc, #176]	@ (80148f4 <tcp_input+0x72c>)
 8014844:	681a      	ldr	r2, [r3, #0]
 8014846:	69fb      	ldr	r3, [r7, #28]
 8014848:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801484a:	4b2b      	ldr	r3, [pc, #172]	@ (80148f8 <tcp_input+0x730>)
 801484c:	781b      	ldrb	r3, [r3, #0]
 801484e:	f003 0320 	and.w	r3, r3, #32
 8014852:	2b00      	cmp	r3, #0
 8014854:	d030      	beq.n	80148b8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8014856:	69fb      	ldr	r3, [r7, #28]
 8014858:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801485a:	2b00      	cmp	r3, #0
 801485c:	d009      	beq.n	8014872 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801485e:	69fb      	ldr	r3, [r7, #28]
 8014860:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014862:	7b5a      	ldrb	r2, [r3, #13]
 8014864:	69fb      	ldr	r3, [r7, #28]
 8014866:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014868:	f042 0220 	orr.w	r2, r2, #32
 801486c:	b2d2      	uxtb	r2, r2
 801486e:	735a      	strb	r2, [r3, #13]
 8014870:	e022      	b.n	80148b8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014872:	69fb      	ldr	r3, [r7, #28]
 8014874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014876:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801487a:	d005      	beq.n	8014888 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801487c:	69fb      	ldr	r3, [r7, #28]
 801487e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014880:	3301      	adds	r3, #1
 8014882:	b29a      	uxth	r2, r3
 8014884:	69fb      	ldr	r3, [r7, #28]
 8014886:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014888:	69fb      	ldr	r3, [r7, #28]
 801488a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801488e:	2b00      	cmp	r3, #0
 8014890:	d00b      	beq.n	80148aa <tcp_input+0x6e2>
 8014892:	69fb      	ldr	r3, [r7, #28]
 8014894:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014898:	69fb      	ldr	r3, [r7, #28]
 801489a:	6918      	ldr	r0, [r3, #16]
 801489c:	2300      	movs	r3, #0
 801489e:	2200      	movs	r2, #0
 80148a0:	69f9      	ldr	r1, [r7, #28]
 80148a2:	47a0      	blx	r4
 80148a4:	4603      	mov	r3, r0
 80148a6:	74fb      	strb	r3, [r7, #19]
 80148a8:	e001      	b.n	80148ae <tcp_input+0x6e6>
 80148aa:	2300      	movs	r3, #0
 80148ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80148ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80148b2:	f113 0f0d 	cmn.w	r3, #13
 80148b6:	d016      	beq.n	80148e6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80148b8:	4b13      	ldr	r3, [pc, #76]	@ (8014908 <tcp_input+0x740>)
 80148ba:	2200      	movs	r2, #0
 80148bc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80148be:	69f8      	ldr	r0, [r7, #28]
 80148c0:	f000 f88e 	bl	80149e0 <tcp_input_delayed_close>
 80148c4:	4603      	mov	r3, r0
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d128      	bne.n	801491c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80148ca:	69f8      	ldr	r0, [r7, #28]
 80148cc:	f002 fac2 	bl	8016e54 <tcp_output>
 80148d0:	e025      	b.n	801491e <tcp_input+0x756>
        goto aborted;
 80148d2:	bf00      	nop
 80148d4:	e023      	b.n	801491e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80148d6:	bf00      	nop
 80148d8:	e021      	b.n	801491e <tcp_input+0x756>
              goto aborted;
 80148da:	bf00      	nop
 80148dc:	e01f      	b.n	801491e <tcp_input+0x756>
          goto aborted;
 80148de:	bf00      	nop
 80148e0:	e01d      	b.n	801491e <tcp_input+0x756>
            goto aborted;
 80148e2:	bf00      	nop
 80148e4:	e01b      	b.n	801491e <tcp_input+0x756>
              goto aborted;
 80148e6:	bf00      	nop
 80148e8:	e019      	b.n	801491e <tcp_input+0x756>
 80148ea:	bf00      	nop
 80148ec:	20027594 	.word	0x20027594
 80148f0:	200275a4 	.word	0x200275a4
 80148f4:	200275c4 	.word	0x200275c4
 80148f8:	200275c1 	.word	0x200275c1
 80148fc:	200275bc 	.word	0x200275bc
 8014900:	200275c0 	.word	0x200275c0
 8014904:	200275be 	.word	0x200275be
 8014908:	200275c8 	.word	0x200275c8
 801490c:	20027588 	.word	0x20027588
 8014910:	0801e7d0 	.word	0x0801e7d0
 8014914:	0801e984 	.word	0x0801e984
 8014918:	0801e81c 	.word	0x0801e81c
          goto aborted;
 801491c:	bf00      	nop
    tcp_input_pcb = NULL;
 801491e:	4b27      	ldr	r3, [pc, #156]	@ (80149bc <tcp_input+0x7f4>)
 8014920:	2200      	movs	r2, #0
 8014922:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014924:	4b26      	ldr	r3, [pc, #152]	@ (80149c0 <tcp_input+0x7f8>)
 8014926:	2200      	movs	r2, #0
 8014928:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801492a:	4b26      	ldr	r3, [pc, #152]	@ (80149c4 <tcp_input+0x7fc>)
 801492c:	685b      	ldr	r3, [r3, #4]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d03f      	beq.n	80149b2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8014932:	4b24      	ldr	r3, [pc, #144]	@ (80149c4 <tcp_input+0x7fc>)
 8014934:	685b      	ldr	r3, [r3, #4]
 8014936:	4618      	mov	r0, r3
 8014938:	f7fd fe00 	bl	801253c <pbuf_free>
      inseg.p = NULL;
 801493c:	4b21      	ldr	r3, [pc, #132]	@ (80149c4 <tcp_input+0x7fc>)
 801493e:	2200      	movs	r2, #0
 8014940:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014942:	e036      	b.n	80149b2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014944:	4b20      	ldr	r3, [pc, #128]	@ (80149c8 <tcp_input+0x800>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	899b      	ldrh	r3, [r3, #12]
 801494a:	b29b      	uxth	r3, r3
 801494c:	4618      	mov	r0, r3
 801494e:	f7fc fa07 	bl	8010d60 <lwip_htons>
 8014952:	4603      	mov	r3, r0
 8014954:	b2db      	uxtb	r3, r3
 8014956:	f003 0304 	and.w	r3, r3, #4
 801495a:	2b00      	cmp	r3, #0
 801495c:	d118      	bne.n	8014990 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801495e:	4b1b      	ldr	r3, [pc, #108]	@ (80149cc <tcp_input+0x804>)
 8014960:	6819      	ldr	r1, [r3, #0]
 8014962:	4b1b      	ldr	r3, [pc, #108]	@ (80149d0 <tcp_input+0x808>)
 8014964:	881b      	ldrh	r3, [r3, #0]
 8014966:	461a      	mov	r2, r3
 8014968:	4b1a      	ldr	r3, [pc, #104]	@ (80149d4 <tcp_input+0x80c>)
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801496e:	4b16      	ldr	r3, [pc, #88]	@ (80149c8 <tcp_input+0x800>)
 8014970:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014972:	885b      	ldrh	r3, [r3, #2]
 8014974:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014976:	4a14      	ldr	r2, [pc, #80]	@ (80149c8 <tcp_input+0x800>)
 8014978:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801497a:	8812      	ldrh	r2, [r2, #0]
 801497c:	b292      	uxth	r2, r2
 801497e:	9202      	str	r2, [sp, #8]
 8014980:	9301      	str	r3, [sp, #4]
 8014982:	4b15      	ldr	r3, [pc, #84]	@ (80149d8 <tcp_input+0x810>)
 8014984:	9300      	str	r3, [sp, #0]
 8014986:	4b15      	ldr	r3, [pc, #84]	@ (80149dc <tcp_input+0x814>)
 8014988:	4602      	mov	r2, r0
 801498a:	2000      	movs	r0, #0
 801498c:	f003 f816 	bl	80179bc <tcp_rst>
    pbuf_free(p);
 8014990:	6878      	ldr	r0, [r7, #4]
 8014992:	f7fd fdd3 	bl	801253c <pbuf_free>
  return;
 8014996:	e00c      	b.n	80149b2 <tcp_input+0x7ea>
    goto dropped;
 8014998:	bf00      	nop
 801499a:	e006      	b.n	80149aa <tcp_input+0x7e2>
    goto dropped;
 801499c:	bf00      	nop
 801499e:	e004      	b.n	80149aa <tcp_input+0x7e2>
    goto dropped;
 80149a0:	bf00      	nop
 80149a2:	e002      	b.n	80149aa <tcp_input+0x7e2>
      goto dropped;
 80149a4:	bf00      	nop
 80149a6:	e000      	b.n	80149aa <tcp_input+0x7e2>
      goto dropped;
 80149a8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f7fd fdc6 	bl	801253c <pbuf_free>
 80149b0:	e000      	b.n	80149b4 <tcp_input+0x7ec>
  return;
 80149b2:	bf00      	nop
}
 80149b4:	3724      	adds	r7, #36	@ 0x24
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd90      	pop	{r4, r7, pc}
 80149ba:	bf00      	nop
 80149bc:	200275c8 	.word	0x200275c8
 80149c0:	200275c4 	.word	0x200275c4
 80149c4:	20027594 	.word	0x20027594
 80149c8:	200275a4 	.word	0x200275a4
 80149cc:	200275b8 	.word	0x200275b8
 80149d0:	200275be 	.word	0x200275be
 80149d4:	200275b4 	.word	0x200275b4
 80149d8:	2002448c 	.word	0x2002448c
 80149dc:	20024490 	.word	0x20024490

080149e0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b082      	sub	sp, #8
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d106      	bne.n	80149fc <tcp_input_delayed_close+0x1c>
 80149ee:	4b17      	ldr	r3, [pc, #92]	@ (8014a4c <tcp_input_delayed_close+0x6c>)
 80149f0:	f240 225a 	movw	r2, #602	@ 0x25a
 80149f4:	4916      	ldr	r1, [pc, #88]	@ (8014a50 <tcp_input_delayed_close+0x70>)
 80149f6:	4817      	ldr	r0, [pc, #92]	@ (8014a54 <tcp_input_delayed_close+0x74>)
 80149f8:	f007 fc34 	bl	801c264 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80149fc:	4b16      	ldr	r3, [pc, #88]	@ (8014a58 <tcp_input_delayed_close+0x78>)
 80149fe:	781b      	ldrb	r3, [r3, #0]
 8014a00:	f003 0310 	and.w	r3, r3, #16
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d01c      	beq.n	8014a42 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	8b5b      	ldrh	r3, [r3, #26]
 8014a0c:	f003 0310 	and.w	r3, r3, #16
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d10d      	bne.n	8014a30 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d008      	beq.n	8014a30 <tcp_input_delayed_close+0x50>
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014a24:	687a      	ldr	r2, [r7, #4]
 8014a26:	6912      	ldr	r2, [r2, #16]
 8014a28:	f06f 010e 	mvn.w	r1, #14
 8014a2c:	4610      	mov	r0, r2
 8014a2e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014a30:	6879      	ldr	r1, [r7, #4]
 8014a32:	480a      	ldr	r0, [pc, #40]	@ (8014a5c <tcp_input_delayed_close+0x7c>)
 8014a34:	f7ff fa50 	bl	8013ed8 <tcp_pcb_remove>
    tcp_free(pcb);
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f7fe f83b 	bl	8012ab4 <tcp_free>
    return 1;
 8014a3e:	2301      	movs	r3, #1
 8014a40:	e000      	b.n	8014a44 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8014a42:	2300      	movs	r3, #0
}
 8014a44:	4618      	mov	r0, r3
 8014a46:	3708      	adds	r7, #8
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}
 8014a4c:	0801e7d0 	.word	0x0801e7d0
 8014a50:	0801e9a0 	.word	0x0801e9a0
 8014a54:	0801e81c 	.word	0x0801e81c
 8014a58:	200275c1 	.word	0x200275c1
 8014a5c:	20027588 	.word	0x20027588

08014a60 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014a60:	b590      	push	{r4, r7, lr}
 8014a62:	b08b      	sub	sp, #44	@ 0x2c
 8014a64:	af04      	add	r7, sp, #16
 8014a66:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014a68:	4b6f      	ldr	r3, [pc, #444]	@ (8014c28 <tcp_listen_input+0x1c8>)
 8014a6a:	781b      	ldrb	r3, [r3, #0]
 8014a6c:	f003 0304 	and.w	r3, r3, #4
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	f040 80d2 	bne.w	8014c1a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d106      	bne.n	8014a8a <tcp_listen_input+0x2a>
 8014a7c:	4b6b      	ldr	r3, [pc, #428]	@ (8014c2c <tcp_listen_input+0x1cc>)
 8014a7e:	f240 2281 	movw	r2, #641	@ 0x281
 8014a82:	496b      	ldr	r1, [pc, #428]	@ (8014c30 <tcp_listen_input+0x1d0>)
 8014a84:	486b      	ldr	r0, [pc, #428]	@ (8014c34 <tcp_listen_input+0x1d4>)
 8014a86:	f007 fbed 	bl	801c264 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014a8a:	4b67      	ldr	r3, [pc, #412]	@ (8014c28 <tcp_listen_input+0x1c8>)
 8014a8c:	781b      	ldrb	r3, [r3, #0]
 8014a8e:	f003 0310 	and.w	r3, r3, #16
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d019      	beq.n	8014aca <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a96:	4b68      	ldr	r3, [pc, #416]	@ (8014c38 <tcp_listen_input+0x1d8>)
 8014a98:	6819      	ldr	r1, [r3, #0]
 8014a9a:	4b68      	ldr	r3, [pc, #416]	@ (8014c3c <tcp_listen_input+0x1dc>)
 8014a9c:	881b      	ldrh	r3, [r3, #0]
 8014a9e:	461a      	mov	r2, r3
 8014aa0:	4b67      	ldr	r3, [pc, #412]	@ (8014c40 <tcp_listen_input+0x1e0>)
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014aa6:	4b67      	ldr	r3, [pc, #412]	@ (8014c44 <tcp_listen_input+0x1e4>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014aaa:	885b      	ldrh	r3, [r3, #2]
 8014aac:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014aae:	4a65      	ldr	r2, [pc, #404]	@ (8014c44 <tcp_listen_input+0x1e4>)
 8014ab0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ab2:	8812      	ldrh	r2, [r2, #0]
 8014ab4:	b292      	uxth	r2, r2
 8014ab6:	9202      	str	r2, [sp, #8]
 8014ab8:	9301      	str	r3, [sp, #4]
 8014aba:	4b63      	ldr	r3, [pc, #396]	@ (8014c48 <tcp_listen_input+0x1e8>)
 8014abc:	9300      	str	r3, [sp, #0]
 8014abe:	4b63      	ldr	r3, [pc, #396]	@ (8014c4c <tcp_listen_input+0x1ec>)
 8014ac0:	4602      	mov	r2, r0
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f002 ff7a 	bl	80179bc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014ac8:	e0a9      	b.n	8014c1e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014aca:	4b57      	ldr	r3, [pc, #348]	@ (8014c28 <tcp_listen_input+0x1c8>)
 8014acc:	781b      	ldrb	r3, [r3, #0]
 8014ace:	f003 0302 	and.w	r3, r3, #2
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	f000 80a3 	beq.w	8014c1e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	7d5b      	ldrb	r3, [r3, #21]
 8014adc:	4618      	mov	r0, r3
 8014ade:	f7ff f927 	bl	8013d30 <tcp_alloc>
 8014ae2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d111      	bne.n	8014b0e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	699b      	ldr	r3, [r3, #24]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d00a      	beq.n	8014b08 <tcp_listen_input+0xa8>
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	699b      	ldr	r3, [r3, #24]
 8014af6:	687a      	ldr	r2, [r7, #4]
 8014af8:	6910      	ldr	r0, [r2, #16]
 8014afa:	f04f 32ff 	mov.w	r2, #4294967295
 8014afe:	2100      	movs	r1, #0
 8014b00:	4798      	blx	r3
 8014b02:	4603      	mov	r3, r0
 8014b04:	73bb      	strb	r3, [r7, #14]
      return;
 8014b06:	e08b      	b.n	8014c20 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014b08:	23f0      	movs	r3, #240	@ 0xf0
 8014b0a:	73bb      	strb	r3, [r7, #14]
      return;
 8014b0c:	e088      	b.n	8014c20 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014b0e:	4b50      	ldr	r3, [pc, #320]	@ (8014c50 <tcp_listen_input+0x1f0>)
 8014b10:	695a      	ldr	r2, [r3, #20]
 8014b12:	697b      	ldr	r3, [r7, #20]
 8014b14:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014b16:	4b4e      	ldr	r3, [pc, #312]	@ (8014c50 <tcp_listen_input+0x1f0>)
 8014b18:	691a      	ldr	r2, [r3, #16]
 8014b1a:	697b      	ldr	r3, [r7, #20]
 8014b1c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	8ada      	ldrh	r2, [r3, #22]
 8014b22:	697b      	ldr	r3, [r7, #20]
 8014b24:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014b26:	4b47      	ldr	r3, [pc, #284]	@ (8014c44 <tcp_listen_input+0x1e4>)
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	881b      	ldrh	r3, [r3, #0]
 8014b2c:	b29a      	uxth	r2, r3
 8014b2e:	697b      	ldr	r3, [r7, #20]
 8014b30:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014b32:	697b      	ldr	r3, [r7, #20]
 8014b34:	2203      	movs	r2, #3
 8014b36:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014b38:	4b41      	ldr	r3, [pc, #260]	@ (8014c40 <tcp_listen_input+0x1e0>)
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	1c5a      	adds	r2, r3, #1
 8014b3e:	697b      	ldr	r3, [r7, #20]
 8014b40:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014b42:	697b      	ldr	r3, [r7, #20]
 8014b44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014b46:	697b      	ldr	r3, [r7, #20]
 8014b48:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8014b4a:	6978      	ldr	r0, [r7, #20]
 8014b4c:	f7ff fa58 	bl	8014000 <tcp_next_iss>
 8014b50:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	693a      	ldr	r2, [r7, #16]
 8014b56:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	693a      	ldr	r2, [r7, #16]
 8014b5c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	693a      	ldr	r2, [r7, #16]
 8014b62:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8014b64:	697b      	ldr	r3, [r7, #20]
 8014b66:	693a      	ldr	r2, [r7, #16]
 8014b68:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014b6a:	4b35      	ldr	r3, [pc, #212]	@ (8014c40 <tcp_listen_input+0x1e0>)
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	1e5a      	subs	r2, r3, #1
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	691a      	ldr	r2, [r3, #16]
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014b7c:	697b      	ldr	r3, [r7, #20]
 8014b7e:	687a      	ldr	r2, [r7, #4]
 8014b80:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	7a5b      	ldrb	r3, [r3, #9]
 8014b86:	f003 030c 	and.w	r3, r3, #12
 8014b8a:	b2da      	uxtb	r2, r3
 8014b8c:	697b      	ldr	r3, [r7, #20]
 8014b8e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	7a1a      	ldrb	r2, [r3, #8]
 8014b94:	697b      	ldr	r3, [r7, #20]
 8014b96:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014b98:	4b2e      	ldr	r3, [pc, #184]	@ (8014c54 <tcp_listen_input+0x1f4>)
 8014b9a:	681a      	ldr	r2, [r3, #0]
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	60da      	str	r2, [r3, #12]
 8014ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8014c54 <tcp_listen_input+0x1f4>)
 8014ba2:	697b      	ldr	r3, [r7, #20]
 8014ba4:	6013      	str	r3, [r2, #0]
 8014ba6:	f003 f8cb 	bl	8017d40 <tcp_timer_needed>
 8014baa:	4b2b      	ldr	r3, [pc, #172]	@ (8014c58 <tcp_listen_input+0x1f8>)
 8014bac:	2201      	movs	r2, #1
 8014bae:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014bb0:	6978      	ldr	r0, [r7, #20]
 8014bb2:	f001 fd8b 	bl	80166cc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014bb6:	4b23      	ldr	r3, [pc, #140]	@ (8014c44 <tcp_listen_input+0x1e4>)
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	89db      	ldrh	r3, [r3, #14]
 8014bbc:	b29a      	uxth	r2, r3
 8014bbe:	697b      	ldr	r3, [r7, #20]
 8014bc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014bc4:	697b      	ldr	r3, [r7, #20]
 8014bc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014bca:	697b      	ldr	r3, [r7, #20]
 8014bcc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014bd4:	697b      	ldr	r3, [r7, #20]
 8014bd6:	3304      	adds	r3, #4
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f004 ff6d 	bl	8019ab8 <ip4_route>
 8014bde:	4601      	mov	r1, r0
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	3304      	adds	r3, #4
 8014be4:	461a      	mov	r2, r3
 8014be6:	4620      	mov	r0, r4
 8014be8:	f7ff fa30 	bl	801404c <tcp_eff_send_mss_netif>
 8014bec:	4603      	mov	r3, r0
 8014bee:	461a      	mov	r2, r3
 8014bf0:	697b      	ldr	r3, [r7, #20]
 8014bf2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014bf4:	2112      	movs	r1, #18
 8014bf6:	6978      	ldr	r0, [r7, #20]
 8014bf8:	f002 f83e 	bl	8016c78 <tcp_enqueue_flags>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d004      	beq.n	8014c12 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014c08:	2100      	movs	r1, #0
 8014c0a:	6978      	ldr	r0, [r7, #20]
 8014c0c:	f7fe f97c 	bl	8012f08 <tcp_abandon>
      return;
 8014c10:	e006      	b.n	8014c20 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014c12:	6978      	ldr	r0, [r7, #20]
 8014c14:	f002 f91e 	bl	8016e54 <tcp_output>
  return;
 8014c18:	e001      	b.n	8014c1e <tcp_listen_input+0x1be>
    return;
 8014c1a:	bf00      	nop
 8014c1c:	e000      	b.n	8014c20 <tcp_listen_input+0x1c0>
  return;
 8014c1e:	bf00      	nop
}
 8014c20:	371c      	adds	r7, #28
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd90      	pop	{r4, r7, pc}
 8014c26:	bf00      	nop
 8014c28:	200275c0 	.word	0x200275c0
 8014c2c:	0801e7d0 	.word	0x0801e7d0
 8014c30:	0801e9c8 	.word	0x0801e9c8
 8014c34:	0801e81c 	.word	0x0801e81c
 8014c38:	200275b8 	.word	0x200275b8
 8014c3c:	200275be 	.word	0x200275be
 8014c40:	200275b4 	.word	0x200275b4
 8014c44:	200275a4 	.word	0x200275a4
 8014c48:	2002448c 	.word	0x2002448c
 8014c4c:	20024490 	.word	0x20024490
 8014c50:	2002447c 	.word	0x2002447c
 8014c54:	20027588 	.word	0x20027588
 8014c58:	20027590 	.word	0x20027590

08014c5c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b086      	sub	sp, #24
 8014c60:	af04      	add	r7, sp, #16
 8014c62:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014c64:	4b2f      	ldr	r3, [pc, #188]	@ (8014d24 <tcp_timewait_input+0xc8>)
 8014c66:	781b      	ldrb	r3, [r3, #0]
 8014c68:	f003 0304 	and.w	r3, r3, #4
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d153      	bne.n	8014d18 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d106      	bne.n	8014c84 <tcp_timewait_input+0x28>
 8014c76:	4b2c      	ldr	r3, [pc, #176]	@ (8014d28 <tcp_timewait_input+0xcc>)
 8014c78:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014c7c:	492b      	ldr	r1, [pc, #172]	@ (8014d2c <tcp_timewait_input+0xd0>)
 8014c7e:	482c      	ldr	r0, [pc, #176]	@ (8014d30 <tcp_timewait_input+0xd4>)
 8014c80:	f007 faf0 	bl	801c264 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014c84:	4b27      	ldr	r3, [pc, #156]	@ (8014d24 <tcp_timewait_input+0xc8>)
 8014c86:	781b      	ldrb	r3, [r3, #0]
 8014c88:	f003 0302 	and.w	r3, r3, #2
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d02a      	beq.n	8014ce6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014c90:	4b28      	ldr	r3, [pc, #160]	@ (8014d34 <tcp_timewait_input+0xd8>)
 8014c92:	681a      	ldr	r2, [r3, #0]
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c98:	1ad3      	subs	r3, r2, r3
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	db2d      	blt.n	8014cfa <tcp_timewait_input+0x9e>
 8014c9e:	4b25      	ldr	r3, [pc, #148]	@ (8014d34 <tcp_timewait_input+0xd8>)
 8014ca0:	681a      	ldr	r2, [r3, #0]
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ca6:	6879      	ldr	r1, [r7, #4]
 8014ca8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014caa:	440b      	add	r3, r1
 8014cac:	1ad3      	subs	r3, r2, r3
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	dc23      	bgt.n	8014cfa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014cb2:	4b21      	ldr	r3, [pc, #132]	@ (8014d38 <tcp_timewait_input+0xdc>)
 8014cb4:	6819      	ldr	r1, [r3, #0]
 8014cb6:	4b21      	ldr	r3, [pc, #132]	@ (8014d3c <tcp_timewait_input+0xe0>)
 8014cb8:	881b      	ldrh	r3, [r3, #0]
 8014cba:	461a      	mov	r2, r3
 8014cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8014d34 <tcp_timewait_input+0xd8>)
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8014d40 <tcp_timewait_input+0xe4>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014cc6:	885b      	ldrh	r3, [r3, #2]
 8014cc8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014cca:	4a1d      	ldr	r2, [pc, #116]	@ (8014d40 <tcp_timewait_input+0xe4>)
 8014ccc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014cce:	8812      	ldrh	r2, [r2, #0]
 8014cd0:	b292      	uxth	r2, r2
 8014cd2:	9202      	str	r2, [sp, #8]
 8014cd4:	9301      	str	r3, [sp, #4]
 8014cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8014d44 <tcp_timewait_input+0xe8>)
 8014cd8:	9300      	str	r3, [sp, #0]
 8014cda:	4b1b      	ldr	r3, [pc, #108]	@ (8014d48 <tcp_timewait_input+0xec>)
 8014cdc:	4602      	mov	r2, r0
 8014cde:	6878      	ldr	r0, [r7, #4]
 8014ce0:	f002 fe6c 	bl	80179bc <tcp_rst>
      return;
 8014ce4:	e01b      	b.n	8014d1e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8014d24 <tcp_timewait_input+0xc8>)
 8014ce8:	781b      	ldrb	r3, [r3, #0]
 8014cea:	f003 0301 	and.w	r3, r3, #1
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d003      	beq.n	8014cfa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014cf2:	4b16      	ldr	r3, [pc, #88]	@ (8014d4c <tcp_timewait_input+0xf0>)
 8014cf4:	681a      	ldr	r2, [r3, #0]
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014cfa:	4b10      	ldr	r3, [pc, #64]	@ (8014d3c <tcp_timewait_input+0xe0>)
 8014cfc:	881b      	ldrh	r3, [r3, #0]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d00c      	beq.n	8014d1c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	8b5b      	ldrh	r3, [r3, #26]
 8014d06:	f043 0302 	orr.w	r3, r3, #2
 8014d0a:	b29a      	uxth	r2, r3
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	f002 f89f 	bl	8016e54 <tcp_output>
  }
  return;
 8014d16:	e001      	b.n	8014d1c <tcp_timewait_input+0xc0>
    return;
 8014d18:	bf00      	nop
 8014d1a:	e000      	b.n	8014d1e <tcp_timewait_input+0xc2>
  return;
 8014d1c:	bf00      	nop
}
 8014d1e:	3708      	adds	r7, #8
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd80      	pop	{r7, pc}
 8014d24:	200275c0 	.word	0x200275c0
 8014d28:	0801e7d0 	.word	0x0801e7d0
 8014d2c:	0801e9e8 	.word	0x0801e9e8
 8014d30:	0801e81c 	.word	0x0801e81c
 8014d34:	200275b4 	.word	0x200275b4
 8014d38:	200275b8 	.word	0x200275b8
 8014d3c:	200275be 	.word	0x200275be
 8014d40:	200275a4 	.word	0x200275a4
 8014d44:	2002448c 	.word	0x2002448c
 8014d48:	20024490 	.word	0x20024490
 8014d4c:	2002757c 	.word	0x2002757c

08014d50 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014d50:	b590      	push	{r4, r7, lr}
 8014d52:	b08d      	sub	sp, #52	@ 0x34
 8014d54:	af04      	add	r7, sp, #16
 8014d56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014d58:	2300      	movs	r3, #0
 8014d5a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d106      	bne.n	8014d74 <tcp_process+0x24>
 8014d66:	4b9d      	ldr	r3, [pc, #628]	@ (8014fdc <tcp_process+0x28c>)
 8014d68:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8014d6c:	499c      	ldr	r1, [pc, #624]	@ (8014fe0 <tcp_process+0x290>)
 8014d6e:	489d      	ldr	r0, [pc, #628]	@ (8014fe4 <tcp_process+0x294>)
 8014d70:	f007 fa78 	bl	801c264 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014d74:	4b9c      	ldr	r3, [pc, #624]	@ (8014fe8 <tcp_process+0x298>)
 8014d76:	781b      	ldrb	r3, [r3, #0]
 8014d78:	f003 0304 	and.w	r3, r3, #4
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d04e      	beq.n	8014e1e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	7d1b      	ldrb	r3, [r3, #20]
 8014d84:	2b02      	cmp	r3, #2
 8014d86:	d108      	bne.n	8014d9a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014d8c:	4b97      	ldr	r3, [pc, #604]	@ (8014fec <tcp_process+0x29c>)
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	429a      	cmp	r2, r3
 8014d92:	d123      	bne.n	8014ddc <tcp_process+0x8c>
        acceptable = 1;
 8014d94:	2301      	movs	r3, #1
 8014d96:	76fb      	strb	r3, [r7, #27]
 8014d98:	e020      	b.n	8014ddc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014d9e:	4b94      	ldr	r3, [pc, #592]	@ (8014ff0 <tcp_process+0x2a0>)
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	429a      	cmp	r2, r3
 8014da4:	d102      	bne.n	8014dac <tcp_process+0x5c>
        acceptable = 1;
 8014da6:	2301      	movs	r3, #1
 8014da8:	76fb      	strb	r3, [r7, #27]
 8014daa:	e017      	b.n	8014ddc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014dac:	4b90      	ldr	r3, [pc, #576]	@ (8014ff0 <tcp_process+0x2a0>)
 8014dae:	681a      	ldr	r2, [r3, #0]
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014db4:	1ad3      	subs	r3, r2, r3
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	db10      	blt.n	8014ddc <tcp_process+0x8c>
 8014dba:	4b8d      	ldr	r3, [pc, #564]	@ (8014ff0 <tcp_process+0x2a0>)
 8014dbc:	681a      	ldr	r2, [r3, #0]
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dc2:	6879      	ldr	r1, [r7, #4]
 8014dc4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014dc6:	440b      	add	r3, r1
 8014dc8:	1ad3      	subs	r3, r2, r3
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	dc06      	bgt.n	8014ddc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	8b5b      	ldrh	r3, [r3, #26]
 8014dd2:	f043 0302 	orr.w	r3, r3, #2
 8014dd6:	b29a      	uxth	r2, r3
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014ddc:	7efb      	ldrb	r3, [r7, #27]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d01b      	beq.n	8014e1a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	7d1b      	ldrb	r3, [r3, #20]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d106      	bne.n	8014df8 <tcp_process+0xa8>
 8014dea:	4b7c      	ldr	r3, [pc, #496]	@ (8014fdc <tcp_process+0x28c>)
 8014dec:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8014df0:	4980      	ldr	r1, [pc, #512]	@ (8014ff4 <tcp_process+0x2a4>)
 8014df2:	487c      	ldr	r0, [pc, #496]	@ (8014fe4 <tcp_process+0x294>)
 8014df4:	f007 fa36 	bl	801c264 <iprintf>
      recv_flags |= TF_RESET;
 8014df8:	4b7f      	ldr	r3, [pc, #508]	@ (8014ff8 <tcp_process+0x2a8>)
 8014dfa:	781b      	ldrb	r3, [r3, #0]
 8014dfc:	f043 0308 	orr.w	r3, r3, #8
 8014e00:	b2da      	uxtb	r2, r3
 8014e02:	4b7d      	ldr	r3, [pc, #500]	@ (8014ff8 <tcp_process+0x2a8>)
 8014e04:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	8b5b      	ldrh	r3, [r3, #26]
 8014e0a:	f023 0301 	bic.w	r3, r3, #1
 8014e0e:	b29a      	uxth	r2, r3
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014e14:	f06f 030d 	mvn.w	r3, #13
 8014e18:	e37a      	b.n	8015510 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	e378      	b.n	8015510 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014e1e:	4b72      	ldr	r3, [pc, #456]	@ (8014fe8 <tcp_process+0x298>)
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	f003 0302 	and.w	r3, r3, #2
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d010      	beq.n	8014e4c <tcp_process+0xfc>
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	7d1b      	ldrb	r3, [r3, #20]
 8014e2e:	2b02      	cmp	r3, #2
 8014e30:	d00c      	beq.n	8014e4c <tcp_process+0xfc>
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	7d1b      	ldrb	r3, [r3, #20]
 8014e36:	2b03      	cmp	r3, #3
 8014e38:	d008      	beq.n	8014e4c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	8b5b      	ldrh	r3, [r3, #26]
 8014e3e:	f043 0302 	orr.w	r3, r3, #2
 8014e42:	b29a      	uxth	r2, r3
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014e48:	2300      	movs	r3, #0
 8014e4a:	e361      	b.n	8015510 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	8b5b      	ldrh	r3, [r3, #26]
 8014e50:	f003 0310 	and.w	r3, r3, #16
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d103      	bne.n	8014e60 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014e58:	4b68      	ldr	r3, [pc, #416]	@ (8014ffc <tcp_process+0x2ac>)
 8014e5a:	681a      	ldr	r2, [r3, #0]
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	2200      	movs	r2, #0
 8014e64:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f001 fc2b 	bl	80166cc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	7d1b      	ldrb	r3, [r3, #20]
 8014e7a:	3b02      	subs	r3, #2
 8014e7c:	2b07      	cmp	r3, #7
 8014e7e:	f200 8337 	bhi.w	80154f0 <tcp_process+0x7a0>
 8014e82:	a201      	add	r2, pc, #4	@ (adr r2, 8014e88 <tcp_process+0x138>)
 8014e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e88:	08014ea9 	.word	0x08014ea9
 8014e8c:	080150d9 	.word	0x080150d9
 8014e90:	08015251 	.word	0x08015251
 8014e94:	0801527b 	.word	0x0801527b
 8014e98:	0801539f 	.word	0x0801539f
 8014e9c:	08015251 	.word	0x08015251
 8014ea0:	0801542b 	.word	0x0801542b
 8014ea4:	080154bb 	.word	0x080154bb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014ea8:	4b4f      	ldr	r3, [pc, #316]	@ (8014fe8 <tcp_process+0x298>)
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	f003 0310 	and.w	r3, r3, #16
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	f000 80e4 	beq.w	801507e <tcp_process+0x32e>
 8014eb6:	4b4c      	ldr	r3, [pc, #304]	@ (8014fe8 <tcp_process+0x298>)
 8014eb8:	781b      	ldrb	r3, [r3, #0]
 8014eba:	f003 0302 	and.w	r3, r3, #2
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	f000 80dd 	beq.w	801507e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ec8:	1c5a      	adds	r2, r3, #1
 8014eca:	4b48      	ldr	r3, [pc, #288]	@ (8014fec <tcp_process+0x29c>)
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	f040 80d5 	bne.w	801507e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014ed4:	4b46      	ldr	r3, [pc, #280]	@ (8014ff0 <tcp_process+0x2a0>)
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	1c5a      	adds	r2, r3, #1
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8014ee6:	4b41      	ldr	r3, [pc, #260]	@ (8014fec <tcp_process+0x29c>)
 8014ee8:	681a      	ldr	r2, [r3, #0]
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014eee:	4b44      	ldr	r3, [pc, #272]	@ (8015000 <tcp_process+0x2b0>)
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	89db      	ldrh	r3, [r3, #14]
 8014ef4:	b29a      	uxth	r2, r3
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014f08:	4b39      	ldr	r3, [pc, #228]	@ (8014ff0 <tcp_process+0x2a0>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	1e5a      	subs	r2, r3, #1
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	2204      	movs	r2, #4
 8014f16:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	3304      	adds	r3, #4
 8014f20:	4618      	mov	r0, r3
 8014f22:	f004 fdc9 	bl	8019ab8 <ip4_route>
 8014f26:	4601      	mov	r1, r0
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	3304      	adds	r3, #4
 8014f2c:	461a      	mov	r2, r3
 8014f2e:	4620      	mov	r0, r4
 8014f30:	f7ff f88c 	bl	801404c <tcp_eff_send_mss_netif>
 8014f34:	4603      	mov	r3, r0
 8014f36:	461a      	mov	r2, r3
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f40:	009a      	lsls	r2, r3, #2
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f46:	005b      	lsls	r3, r3, #1
 8014f48:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014f4c:	428b      	cmp	r3, r1
 8014f4e:	bf38      	it	cc
 8014f50:	460b      	movcc	r3, r1
 8014f52:	429a      	cmp	r2, r3
 8014f54:	d204      	bcs.n	8014f60 <tcp_process+0x210>
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f5a:	009b      	lsls	r3, r3, #2
 8014f5c:	b29b      	uxth	r3, r3
 8014f5e:	e00d      	b.n	8014f7c <tcp_process+0x22c>
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f64:	005b      	lsls	r3, r3, #1
 8014f66:	f241 121c 	movw	r2, #4380	@ 0x111c
 8014f6a:	4293      	cmp	r3, r2
 8014f6c:	d904      	bls.n	8014f78 <tcp_process+0x228>
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f72:	005b      	lsls	r3, r3, #1
 8014f74:	b29b      	uxth	r3, r3
 8014f76:	e001      	b.n	8014f7c <tcp_process+0x22c>
 8014f78:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014f7c:	687a      	ldr	r2, [r7, #4]
 8014f7e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d106      	bne.n	8014f9a <tcp_process+0x24a>
 8014f8c:	4b13      	ldr	r3, [pc, #76]	@ (8014fdc <tcp_process+0x28c>)
 8014f8e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8014f92:	491c      	ldr	r1, [pc, #112]	@ (8015004 <tcp_process+0x2b4>)
 8014f94:	4813      	ldr	r0, [pc, #76]	@ (8014fe4 <tcp_process+0x294>)
 8014f96:	f007 f965 	bl	801c264 <iprintf>
        --pcb->snd_queuelen;
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014fa0:	3b01      	subs	r3, #1
 8014fa2:	b29a      	uxth	r2, r3
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014fae:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014fb0:	69fb      	ldr	r3, [r7, #28]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d12a      	bne.n	801500c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014fba:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014fbc:	69fb      	ldr	r3, [r7, #28]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d106      	bne.n	8014fd0 <tcp_process+0x280>
 8014fc2:	4b06      	ldr	r3, [pc, #24]	@ (8014fdc <tcp_process+0x28c>)
 8014fc4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8014fc8:	490f      	ldr	r1, [pc, #60]	@ (8015008 <tcp_process+0x2b8>)
 8014fca:	4806      	ldr	r0, [pc, #24]	@ (8014fe4 <tcp_process+0x294>)
 8014fcc:	f007 f94a 	bl	801c264 <iprintf>
          pcb->unsent = rseg->next;
 8014fd0:	69fb      	ldr	r3, [r7, #28]
 8014fd2:	681a      	ldr	r2, [r3, #0]
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014fd8:	e01c      	b.n	8015014 <tcp_process+0x2c4>
 8014fda:	bf00      	nop
 8014fdc:	0801e7d0 	.word	0x0801e7d0
 8014fe0:	0801ea08 	.word	0x0801ea08
 8014fe4:	0801e81c 	.word	0x0801e81c
 8014fe8:	200275c0 	.word	0x200275c0
 8014fec:	200275b8 	.word	0x200275b8
 8014ff0:	200275b4 	.word	0x200275b4
 8014ff4:	0801ea24 	.word	0x0801ea24
 8014ff8:	200275c1 	.word	0x200275c1
 8014ffc:	2002757c 	.word	0x2002757c
 8015000:	200275a4 	.word	0x200275a4
 8015004:	0801ea44 	.word	0x0801ea44
 8015008:	0801ea5c 	.word	0x0801ea5c
        } else {
          pcb->unacked = rseg->next;
 801500c:	69fb      	ldr	r3, [r7, #28]
 801500e:	681a      	ldr	r2, [r3, #0]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8015014:	69f8      	ldr	r0, [r7, #28]
 8015016:	f7fe fd22 	bl	8013a5e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801501e:	2b00      	cmp	r3, #0
 8015020:	d104      	bne.n	801502c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015028:	861a      	strh	r2, [r3, #48]	@ 0x30
 801502a:	e006      	b.n	801503a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2200      	movs	r2, #0
 8015030:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2200      	movs	r2, #0
 8015036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015040:	2b00      	cmp	r3, #0
 8015042:	d00a      	beq.n	801505a <tcp_process+0x30a>
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801504a:	687a      	ldr	r2, [r7, #4]
 801504c:	6910      	ldr	r0, [r2, #16]
 801504e:	2200      	movs	r2, #0
 8015050:	6879      	ldr	r1, [r7, #4]
 8015052:	4798      	blx	r3
 8015054:	4603      	mov	r3, r0
 8015056:	76bb      	strb	r3, [r7, #26]
 8015058:	e001      	b.n	801505e <tcp_process+0x30e>
 801505a:	2300      	movs	r3, #0
 801505c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801505e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015062:	f113 0f0d 	cmn.w	r3, #13
 8015066:	d102      	bne.n	801506e <tcp_process+0x31e>
          return ERR_ABRT;
 8015068:	f06f 030c 	mvn.w	r3, #12
 801506c:	e250      	b.n	8015510 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	8b5b      	ldrh	r3, [r3, #26]
 8015072:	f043 0302 	orr.w	r3, r3, #2
 8015076:	b29a      	uxth	r2, r3
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801507c:	e23a      	b.n	80154f4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801507e:	4b98      	ldr	r3, [pc, #608]	@ (80152e0 <tcp_process+0x590>)
 8015080:	781b      	ldrb	r3, [r3, #0]
 8015082:	f003 0310 	and.w	r3, r3, #16
 8015086:	2b00      	cmp	r3, #0
 8015088:	f000 8234 	beq.w	80154f4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801508c:	4b95      	ldr	r3, [pc, #596]	@ (80152e4 <tcp_process+0x594>)
 801508e:	6819      	ldr	r1, [r3, #0]
 8015090:	4b95      	ldr	r3, [pc, #596]	@ (80152e8 <tcp_process+0x598>)
 8015092:	881b      	ldrh	r3, [r3, #0]
 8015094:	461a      	mov	r2, r3
 8015096:	4b95      	ldr	r3, [pc, #596]	@ (80152ec <tcp_process+0x59c>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801509c:	4b94      	ldr	r3, [pc, #592]	@ (80152f0 <tcp_process+0x5a0>)
 801509e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150a0:	885b      	ldrh	r3, [r3, #2]
 80150a2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150a4:	4a92      	ldr	r2, [pc, #584]	@ (80152f0 <tcp_process+0x5a0>)
 80150a6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150a8:	8812      	ldrh	r2, [r2, #0]
 80150aa:	b292      	uxth	r2, r2
 80150ac:	9202      	str	r2, [sp, #8]
 80150ae:	9301      	str	r3, [sp, #4]
 80150b0:	4b90      	ldr	r3, [pc, #576]	@ (80152f4 <tcp_process+0x5a4>)
 80150b2:	9300      	str	r3, [sp, #0]
 80150b4:	4b90      	ldr	r3, [pc, #576]	@ (80152f8 <tcp_process+0x5a8>)
 80150b6:	4602      	mov	r2, r0
 80150b8:	6878      	ldr	r0, [r7, #4]
 80150ba:	f002 fc7f 	bl	80179bc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80150c4:	2b05      	cmp	r3, #5
 80150c6:	f200 8215 	bhi.w	80154f4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	2200      	movs	r2, #0
 80150ce:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80150d0:	6878      	ldr	r0, [r7, #4]
 80150d2:	f002 fa4b 	bl	801756c <tcp_rexmit_rto>
      break;
 80150d6:	e20d      	b.n	80154f4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80150d8:	4b81      	ldr	r3, [pc, #516]	@ (80152e0 <tcp_process+0x590>)
 80150da:	781b      	ldrb	r3, [r3, #0]
 80150dc:	f003 0310 	and.w	r3, r3, #16
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	f000 80a1 	beq.w	8015228 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80150e6:	4b7f      	ldr	r3, [pc, #508]	@ (80152e4 <tcp_process+0x594>)
 80150e8:	681a      	ldr	r2, [r3, #0]
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80150ee:	1ad3      	subs	r3, r2, r3
 80150f0:	3b01      	subs	r3, #1
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	db7e      	blt.n	80151f4 <tcp_process+0x4a4>
 80150f6:	4b7b      	ldr	r3, [pc, #492]	@ (80152e4 <tcp_process+0x594>)
 80150f8:	681a      	ldr	r2, [r3, #0]
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80150fe:	1ad3      	subs	r3, r2, r3
 8015100:	2b00      	cmp	r3, #0
 8015102:	dc77      	bgt.n	80151f4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	2204      	movs	r2, #4
 8015108:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801510e:	2b00      	cmp	r3, #0
 8015110:	d102      	bne.n	8015118 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015112:	23fa      	movs	r3, #250	@ 0xfa
 8015114:	76bb      	strb	r3, [r7, #26]
 8015116:	e01d      	b.n	8015154 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801511c:	699b      	ldr	r3, [r3, #24]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d106      	bne.n	8015130 <tcp_process+0x3e0>
 8015122:	4b76      	ldr	r3, [pc, #472]	@ (80152fc <tcp_process+0x5ac>)
 8015124:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8015128:	4975      	ldr	r1, [pc, #468]	@ (8015300 <tcp_process+0x5b0>)
 801512a:	4876      	ldr	r0, [pc, #472]	@ (8015304 <tcp_process+0x5b4>)
 801512c:	f007 f89a 	bl	801c264 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015134:	699b      	ldr	r3, [r3, #24]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d00a      	beq.n	8015150 <tcp_process+0x400>
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801513e:	699b      	ldr	r3, [r3, #24]
 8015140:	687a      	ldr	r2, [r7, #4]
 8015142:	6910      	ldr	r0, [r2, #16]
 8015144:	2200      	movs	r2, #0
 8015146:	6879      	ldr	r1, [r7, #4]
 8015148:	4798      	blx	r3
 801514a:	4603      	mov	r3, r0
 801514c:	76bb      	strb	r3, [r7, #26]
 801514e:	e001      	b.n	8015154 <tcp_process+0x404>
 8015150:	23f0      	movs	r3, #240	@ 0xf0
 8015152:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015154:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d00a      	beq.n	8015172 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801515c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015160:	f113 0f0d 	cmn.w	r3, #13
 8015164:	d002      	beq.n	801516c <tcp_process+0x41c>
              tcp_abort(pcb);
 8015166:	6878      	ldr	r0, [r7, #4]
 8015168:	f7fd ff8c 	bl	8013084 <tcp_abort>
            }
            return ERR_ABRT;
 801516c:	f06f 030c 	mvn.w	r3, #12
 8015170:	e1ce      	b.n	8015510 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015172:	6878      	ldr	r0, [r7, #4]
 8015174:	f000 fae0 	bl	8015738 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015178:	4b63      	ldr	r3, [pc, #396]	@ (8015308 <tcp_process+0x5b8>)
 801517a:	881b      	ldrh	r3, [r3, #0]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d005      	beq.n	801518c <tcp_process+0x43c>
            recv_acked--;
 8015180:	4b61      	ldr	r3, [pc, #388]	@ (8015308 <tcp_process+0x5b8>)
 8015182:	881b      	ldrh	r3, [r3, #0]
 8015184:	3b01      	subs	r3, #1
 8015186:	b29a      	uxth	r2, r3
 8015188:	4b5f      	ldr	r3, [pc, #380]	@ (8015308 <tcp_process+0x5b8>)
 801518a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015190:	009a      	lsls	r2, r3, #2
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015196:	005b      	lsls	r3, r3, #1
 8015198:	f241 111c 	movw	r1, #4380	@ 0x111c
 801519c:	428b      	cmp	r3, r1
 801519e:	bf38      	it	cc
 80151a0:	460b      	movcc	r3, r1
 80151a2:	429a      	cmp	r2, r3
 80151a4:	d204      	bcs.n	80151b0 <tcp_process+0x460>
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151aa:	009b      	lsls	r3, r3, #2
 80151ac:	b29b      	uxth	r3, r3
 80151ae:	e00d      	b.n	80151cc <tcp_process+0x47c>
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151b4:	005b      	lsls	r3, r3, #1
 80151b6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80151ba:	4293      	cmp	r3, r2
 80151bc:	d904      	bls.n	80151c8 <tcp_process+0x478>
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151c2:	005b      	lsls	r3, r3, #1
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	e001      	b.n	80151cc <tcp_process+0x47c>
 80151c8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80151cc:	687a      	ldr	r2, [r7, #4]
 80151ce:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80151d2:	4b4e      	ldr	r3, [pc, #312]	@ (801530c <tcp_process+0x5bc>)
 80151d4:	781b      	ldrb	r3, [r3, #0]
 80151d6:	f003 0320 	and.w	r3, r3, #32
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d037      	beq.n	801524e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	8b5b      	ldrh	r3, [r3, #26]
 80151e2:	f043 0302 	orr.w	r3, r3, #2
 80151e6:	b29a      	uxth	r2, r3
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	2207      	movs	r2, #7
 80151f0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80151f2:	e02c      	b.n	801524e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80151f4:	4b3b      	ldr	r3, [pc, #236]	@ (80152e4 <tcp_process+0x594>)
 80151f6:	6819      	ldr	r1, [r3, #0]
 80151f8:	4b3b      	ldr	r3, [pc, #236]	@ (80152e8 <tcp_process+0x598>)
 80151fa:	881b      	ldrh	r3, [r3, #0]
 80151fc:	461a      	mov	r2, r3
 80151fe:	4b3b      	ldr	r3, [pc, #236]	@ (80152ec <tcp_process+0x59c>)
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015204:	4b3a      	ldr	r3, [pc, #232]	@ (80152f0 <tcp_process+0x5a0>)
 8015206:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015208:	885b      	ldrh	r3, [r3, #2]
 801520a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801520c:	4a38      	ldr	r2, [pc, #224]	@ (80152f0 <tcp_process+0x5a0>)
 801520e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015210:	8812      	ldrh	r2, [r2, #0]
 8015212:	b292      	uxth	r2, r2
 8015214:	9202      	str	r2, [sp, #8]
 8015216:	9301      	str	r3, [sp, #4]
 8015218:	4b36      	ldr	r3, [pc, #216]	@ (80152f4 <tcp_process+0x5a4>)
 801521a:	9300      	str	r3, [sp, #0]
 801521c:	4b36      	ldr	r3, [pc, #216]	@ (80152f8 <tcp_process+0x5a8>)
 801521e:	4602      	mov	r2, r0
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f002 fbcb 	bl	80179bc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015226:	e167      	b.n	80154f8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015228:	4b2d      	ldr	r3, [pc, #180]	@ (80152e0 <tcp_process+0x590>)
 801522a:	781b      	ldrb	r3, [r3, #0]
 801522c:	f003 0302 	and.w	r3, r3, #2
 8015230:	2b00      	cmp	r3, #0
 8015232:	f000 8161 	beq.w	80154f8 <tcp_process+0x7a8>
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801523a:	1e5a      	subs	r2, r3, #1
 801523c:	4b2b      	ldr	r3, [pc, #172]	@ (80152ec <tcp_process+0x59c>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	429a      	cmp	r2, r3
 8015242:	f040 8159 	bne.w	80154f8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8015246:	6878      	ldr	r0, [r7, #4]
 8015248:	f002 f9b2 	bl	80175b0 <tcp_rexmit>
      break;
 801524c:	e154      	b.n	80154f8 <tcp_process+0x7a8>
 801524e:	e153      	b.n	80154f8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015250:	6878      	ldr	r0, [r7, #4]
 8015252:	f000 fa71 	bl	8015738 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8015256:	4b2d      	ldr	r3, [pc, #180]	@ (801530c <tcp_process+0x5bc>)
 8015258:	781b      	ldrb	r3, [r3, #0]
 801525a:	f003 0320 	and.w	r3, r3, #32
 801525e:	2b00      	cmp	r3, #0
 8015260:	f000 814c 	beq.w	80154fc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	8b5b      	ldrh	r3, [r3, #26]
 8015268:	f043 0302 	orr.w	r3, r3, #2
 801526c:	b29a      	uxth	r2, r3
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2207      	movs	r2, #7
 8015276:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015278:	e140      	b.n	80154fc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801527a:	6878      	ldr	r0, [r7, #4]
 801527c:	f000 fa5c 	bl	8015738 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015280:	4b22      	ldr	r3, [pc, #136]	@ (801530c <tcp_process+0x5bc>)
 8015282:	781b      	ldrb	r3, [r3, #0]
 8015284:	f003 0320 	and.w	r3, r3, #32
 8015288:	2b00      	cmp	r3, #0
 801528a:	d071      	beq.n	8015370 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801528c:	4b14      	ldr	r3, [pc, #80]	@ (80152e0 <tcp_process+0x590>)
 801528e:	781b      	ldrb	r3, [r3, #0]
 8015290:	f003 0310 	and.w	r3, r3, #16
 8015294:	2b00      	cmp	r3, #0
 8015296:	d060      	beq.n	801535a <tcp_process+0x60a>
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801529c:	4b11      	ldr	r3, [pc, #68]	@ (80152e4 <tcp_process+0x594>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d15a      	bne.n	801535a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d156      	bne.n	801535a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	8b5b      	ldrh	r3, [r3, #26]
 80152b0:	f043 0302 	orr.w	r3, r3, #2
 80152b4:	b29a      	uxth	r2, r3
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80152ba:	6878      	ldr	r0, [r7, #4]
 80152bc:	f7fe fdbc 	bl	8013e38 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80152c0:	4b13      	ldr	r3, [pc, #76]	@ (8015310 <tcp_process+0x5c0>)
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	687a      	ldr	r2, [r7, #4]
 80152c6:	429a      	cmp	r2, r3
 80152c8:	d105      	bne.n	80152d6 <tcp_process+0x586>
 80152ca:	4b11      	ldr	r3, [pc, #68]	@ (8015310 <tcp_process+0x5c0>)
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	68db      	ldr	r3, [r3, #12]
 80152d0:	4a0f      	ldr	r2, [pc, #60]	@ (8015310 <tcp_process+0x5c0>)
 80152d2:	6013      	str	r3, [r2, #0]
 80152d4:	e02e      	b.n	8015334 <tcp_process+0x5e4>
 80152d6:	4b0e      	ldr	r3, [pc, #56]	@ (8015310 <tcp_process+0x5c0>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	617b      	str	r3, [r7, #20]
 80152dc:	e027      	b.n	801532e <tcp_process+0x5de>
 80152de:	bf00      	nop
 80152e0:	200275c0 	.word	0x200275c0
 80152e4:	200275b8 	.word	0x200275b8
 80152e8:	200275be 	.word	0x200275be
 80152ec:	200275b4 	.word	0x200275b4
 80152f0:	200275a4 	.word	0x200275a4
 80152f4:	2002448c 	.word	0x2002448c
 80152f8:	20024490 	.word	0x20024490
 80152fc:	0801e7d0 	.word	0x0801e7d0
 8015300:	0801ea70 	.word	0x0801ea70
 8015304:	0801e81c 	.word	0x0801e81c
 8015308:	200275bc 	.word	0x200275bc
 801530c:	200275c1 	.word	0x200275c1
 8015310:	20027588 	.word	0x20027588
 8015314:	697b      	ldr	r3, [r7, #20]
 8015316:	68db      	ldr	r3, [r3, #12]
 8015318:	687a      	ldr	r2, [r7, #4]
 801531a:	429a      	cmp	r2, r3
 801531c:	d104      	bne.n	8015328 <tcp_process+0x5d8>
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	68da      	ldr	r2, [r3, #12]
 8015322:	697b      	ldr	r3, [r7, #20]
 8015324:	60da      	str	r2, [r3, #12]
 8015326:	e005      	b.n	8015334 <tcp_process+0x5e4>
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	68db      	ldr	r3, [r3, #12]
 801532c:	617b      	str	r3, [r7, #20]
 801532e:	697b      	ldr	r3, [r7, #20]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d1ef      	bne.n	8015314 <tcp_process+0x5c4>
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	2200      	movs	r2, #0
 8015338:	60da      	str	r2, [r3, #12]
 801533a:	4b77      	ldr	r3, [pc, #476]	@ (8015518 <tcp_process+0x7c8>)
 801533c:	2201      	movs	r2, #1
 801533e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	220a      	movs	r2, #10
 8015344:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8015346:	4b75      	ldr	r3, [pc, #468]	@ (801551c <tcp_process+0x7cc>)
 8015348:	681a      	ldr	r2, [r3, #0]
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	60da      	str	r2, [r3, #12]
 801534e:	4a73      	ldr	r2, [pc, #460]	@ (801551c <tcp_process+0x7cc>)
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	6013      	str	r3, [r2, #0]
 8015354:	f002 fcf4 	bl	8017d40 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015358:	e0d2      	b.n	8015500 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	8b5b      	ldrh	r3, [r3, #26]
 801535e:	f043 0302 	orr.w	r3, r3, #2
 8015362:	b29a      	uxth	r2, r3
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	2208      	movs	r2, #8
 801536c:	751a      	strb	r2, [r3, #20]
      break;
 801536e:	e0c7      	b.n	8015500 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015370:	4b6b      	ldr	r3, [pc, #428]	@ (8015520 <tcp_process+0x7d0>)
 8015372:	781b      	ldrb	r3, [r3, #0]
 8015374:	f003 0310 	and.w	r3, r3, #16
 8015378:	2b00      	cmp	r3, #0
 801537a:	f000 80c1 	beq.w	8015500 <tcp_process+0x7b0>
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015382:	4b68      	ldr	r3, [pc, #416]	@ (8015524 <tcp_process+0x7d4>)
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	429a      	cmp	r2, r3
 8015388:	f040 80ba 	bne.w	8015500 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015390:	2b00      	cmp	r3, #0
 8015392:	f040 80b5 	bne.w	8015500 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	2206      	movs	r2, #6
 801539a:	751a      	strb	r2, [r3, #20]
      break;
 801539c:	e0b0      	b.n	8015500 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801539e:	6878      	ldr	r0, [r7, #4]
 80153a0:	f000 f9ca 	bl	8015738 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80153a4:	4b60      	ldr	r3, [pc, #384]	@ (8015528 <tcp_process+0x7d8>)
 80153a6:	781b      	ldrb	r3, [r3, #0]
 80153a8:	f003 0320 	and.w	r3, r3, #32
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	f000 80a9 	beq.w	8015504 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	8b5b      	ldrh	r3, [r3, #26]
 80153b6:	f043 0302 	orr.w	r3, r3, #2
 80153ba:	b29a      	uxth	r2, r3
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80153c0:	6878      	ldr	r0, [r7, #4]
 80153c2:	f7fe fd39 	bl	8013e38 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80153c6:	4b59      	ldr	r3, [pc, #356]	@ (801552c <tcp_process+0x7dc>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	687a      	ldr	r2, [r7, #4]
 80153cc:	429a      	cmp	r2, r3
 80153ce:	d105      	bne.n	80153dc <tcp_process+0x68c>
 80153d0:	4b56      	ldr	r3, [pc, #344]	@ (801552c <tcp_process+0x7dc>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	68db      	ldr	r3, [r3, #12]
 80153d6:	4a55      	ldr	r2, [pc, #340]	@ (801552c <tcp_process+0x7dc>)
 80153d8:	6013      	str	r3, [r2, #0]
 80153da:	e013      	b.n	8015404 <tcp_process+0x6b4>
 80153dc:	4b53      	ldr	r3, [pc, #332]	@ (801552c <tcp_process+0x7dc>)
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	613b      	str	r3, [r7, #16]
 80153e2:	e00c      	b.n	80153fe <tcp_process+0x6ae>
 80153e4:	693b      	ldr	r3, [r7, #16]
 80153e6:	68db      	ldr	r3, [r3, #12]
 80153e8:	687a      	ldr	r2, [r7, #4]
 80153ea:	429a      	cmp	r2, r3
 80153ec:	d104      	bne.n	80153f8 <tcp_process+0x6a8>
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	68da      	ldr	r2, [r3, #12]
 80153f2:	693b      	ldr	r3, [r7, #16]
 80153f4:	60da      	str	r2, [r3, #12]
 80153f6:	e005      	b.n	8015404 <tcp_process+0x6b4>
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	68db      	ldr	r3, [r3, #12]
 80153fc:	613b      	str	r3, [r7, #16]
 80153fe:	693b      	ldr	r3, [r7, #16]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d1ef      	bne.n	80153e4 <tcp_process+0x694>
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	2200      	movs	r2, #0
 8015408:	60da      	str	r2, [r3, #12]
 801540a:	4b43      	ldr	r3, [pc, #268]	@ (8015518 <tcp_process+0x7c8>)
 801540c:	2201      	movs	r2, #1
 801540e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	220a      	movs	r2, #10
 8015414:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015416:	4b41      	ldr	r3, [pc, #260]	@ (801551c <tcp_process+0x7cc>)
 8015418:	681a      	ldr	r2, [r3, #0]
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	60da      	str	r2, [r3, #12]
 801541e:	4a3f      	ldr	r2, [pc, #252]	@ (801551c <tcp_process+0x7cc>)
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	6013      	str	r3, [r2, #0]
 8015424:	f002 fc8c 	bl	8017d40 <tcp_timer_needed>
      }
      break;
 8015428:	e06c      	b.n	8015504 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801542a:	6878      	ldr	r0, [r7, #4]
 801542c:	f000 f984 	bl	8015738 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015430:	4b3b      	ldr	r3, [pc, #236]	@ (8015520 <tcp_process+0x7d0>)
 8015432:	781b      	ldrb	r3, [r3, #0]
 8015434:	f003 0310 	and.w	r3, r3, #16
 8015438:	2b00      	cmp	r3, #0
 801543a:	d065      	beq.n	8015508 <tcp_process+0x7b8>
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015440:	4b38      	ldr	r3, [pc, #224]	@ (8015524 <tcp_process+0x7d4>)
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	429a      	cmp	r2, r3
 8015446:	d15f      	bne.n	8015508 <tcp_process+0x7b8>
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801544c:	2b00      	cmp	r3, #0
 801544e:	d15b      	bne.n	8015508 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8015450:	6878      	ldr	r0, [r7, #4]
 8015452:	f7fe fcf1 	bl	8013e38 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015456:	4b35      	ldr	r3, [pc, #212]	@ (801552c <tcp_process+0x7dc>)
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	687a      	ldr	r2, [r7, #4]
 801545c:	429a      	cmp	r2, r3
 801545e:	d105      	bne.n	801546c <tcp_process+0x71c>
 8015460:	4b32      	ldr	r3, [pc, #200]	@ (801552c <tcp_process+0x7dc>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	68db      	ldr	r3, [r3, #12]
 8015466:	4a31      	ldr	r2, [pc, #196]	@ (801552c <tcp_process+0x7dc>)
 8015468:	6013      	str	r3, [r2, #0]
 801546a:	e013      	b.n	8015494 <tcp_process+0x744>
 801546c:	4b2f      	ldr	r3, [pc, #188]	@ (801552c <tcp_process+0x7dc>)
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	60fb      	str	r3, [r7, #12]
 8015472:	e00c      	b.n	801548e <tcp_process+0x73e>
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	68db      	ldr	r3, [r3, #12]
 8015478:	687a      	ldr	r2, [r7, #4]
 801547a:	429a      	cmp	r2, r3
 801547c:	d104      	bne.n	8015488 <tcp_process+0x738>
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	68da      	ldr	r2, [r3, #12]
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	60da      	str	r2, [r3, #12]
 8015486:	e005      	b.n	8015494 <tcp_process+0x744>
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	68db      	ldr	r3, [r3, #12]
 801548c:	60fb      	str	r3, [r7, #12]
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d1ef      	bne.n	8015474 <tcp_process+0x724>
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2200      	movs	r2, #0
 8015498:	60da      	str	r2, [r3, #12]
 801549a:	4b1f      	ldr	r3, [pc, #124]	@ (8015518 <tcp_process+0x7c8>)
 801549c:	2201      	movs	r2, #1
 801549e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	220a      	movs	r2, #10
 80154a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80154a6:	4b1d      	ldr	r3, [pc, #116]	@ (801551c <tcp_process+0x7cc>)
 80154a8:	681a      	ldr	r2, [r3, #0]
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	60da      	str	r2, [r3, #12]
 80154ae:	4a1b      	ldr	r2, [pc, #108]	@ (801551c <tcp_process+0x7cc>)
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	6013      	str	r3, [r2, #0]
 80154b4:	f002 fc44 	bl	8017d40 <tcp_timer_needed>
      }
      break;
 80154b8:	e026      	b.n	8015508 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	f000 f93c 	bl	8015738 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80154c0:	4b17      	ldr	r3, [pc, #92]	@ (8015520 <tcp_process+0x7d0>)
 80154c2:	781b      	ldrb	r3, [r3, #0]
 80154c4:	f003 0310 	and.w	r3, r3, #16
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d01f      	beq.n	801550c <tcp_process+0x7bc>
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80154d0:	4b14      	ldr	r3, [pc, #80]	@ (8015524 <tcp_process+0x7d4>)
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	429a      	cmp	r2, r3
 80154d6:	d119      	bne.n	801550c <tcp_process+0x7bc>
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d115      	bne.n	801550c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80154e0:	4b11      	ldr	r3, [pc, #68]	@ (8015528 <tcp_process+0x7d8>)
 80154e2:	781b      	ldrb	r3, [r3, #0]
 80154e4:	f043 0310 	orr.w	r3, r3, #16
 80154e8:	b2da      	uxtb	r2, r3
 80154ea:	4b0f      	ldr	r3, [pc, #60]	@ (8015528 <tcp_process+0x7d8>)
 80154ec:	701a      	strb	r2, [r3, #0]
      }
      break;
 80154ee:	e00d      	b.n	801550c <tcp_process+0x7bc>
    default:
      break;
 80154f0:	bf00      	nop
 80154f2:	e00c      	b.n	801550e <tcp_process+0x7be>
      break;
 80154f4:	bf00      	nop
 80154f6:	e00a      	b.n	801550e <tcp_process+0x7be>
      break;
 80154f8:	bf00      	nop
 80154fa:	e008      	b.n	801550e <tcp_process+0x7be>
      break;
 80154fc:	bf00      	nop
 80154fe:	e006      	b.n	801550e <tcp_process+0x7be>
      break;
 8015500:	bf00      	nop
 8015502:	e004      	b.n	801550e <tcp_process+0x7be>
      break;
 8015504:	bf00      	nop
 8015506:	e002      	b.n	801550e <tcp_process+0x7be>
      break;
 8015508:	bf00      	nop
 801550a:	e000      	b.n	801550e <tcp_process+0x7be>
      break;
 801550c:	bf00      	nop
  }
  return ERR_OK;
 801550e:	2300      	movs	r3, #0
}
 8015510:	4618      	mov	r0, r3
 8015512:	3724      	adds	r7, #36	@ 0x24
 8015514:	46bd      	mov	sp, r7
 8015516:	bd90      	pop	{r4, r7, pc}
 8015518:	20027590 	.word	0x20027590
 801551c:	2002758c 	.word	0x2002758c
 8015520:	200275c0 	.word	0x200275c0
 8015524:	200275b8 	.word	0x200275b8
 8015528:	200275c1 	.word	0x200275c1
 801552c:	20027588 	.word	0x20027588

08015530 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8015530:	b590      	push	{r4, r7, lr}
 8015532:	b085      	sub	sp, #20
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
 8015538:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d106      	bne.n	801554e <tcp_oos_insert_segment+0x1e>
 8015540:	4b3b      	ldr	r3, [pc, #236]	@ (8015630 <tcp_oos_insert_segment+0x100>)
 8015542:	f240 421f 	movw	r2, #1055	@ 0x41f
 8015546:	493b      	ldr	r1, [pc, #236]	@ (8015634 <tcp_oos_insert_segment+0x104>)
 8015548:	483b      	ldr	r0, [pc, #236]	@ (8015638 <tcp_oos_insert_segment+0x108>)
 801554a:	f006 fe8b 	bl	801c264 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	68db      	ldr	r3, [r3, #12]
 8015552:	899b      	ldrh	r3, [r3, #12]
 8015554:	b29b      	uxth	r3, r3
 8015556:	4618      	mov	r0, r3
 8015558:	f7fb fc02 	bl	8010d60 <lwip_htons>
 801555c:	4603      	mov	r3, r0
 801555e:	b2db      	uxtb	r3, r3
 8015560:	f003 0301 	and.w	r3, r3, #1
 8015564:	2b00      	cmp	r3, #0
 8015566:	d028      	beq.n	80155ba <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8015568:	6838      	ldr	r0, [r7, #0]
 801556a:	f7fe fa63 	bl	8013a34 <tcp_segs_free>
    next = NULL;
 801556e:	2300      	movs	r3, #0
 8015570:	603b      	str	r3, [r7, #0]
 8015572:	e056      	b.n	8015622 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	68db      	ldr	r3, [r3, #12]
 8015578:	899b      	ldrh	r3, [r3, #12]
 801557a:	b29b      	uxth	r3, r3
 801557c:	4618      	mov	r0, r3
 801557e:	f7fb fbef 	bl	8010d60 <lwip_htons>
 8015582:	4603      	mov	r3, r0
 8015584:	b2db      	uxtb	r3, r3
 8015586:	f003 0301 	and.w	r3, r3, #1
 801558a:	2b00      	cmp	r3, #0
 801558c:	d00d      	beq.n	80155aa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	68db      	ldr	r3, [r3, #12]
 8015592:	899b      	ldrh	r3, [r3, #12]
 8015594:	b29c      	uxth	r4, r3
 8015596:	2001      	movs	r0, #1
 8015598:	f7fb fbe2 	bl	8010d60 <lwip_htons>
 801559c:	4603      	mov	r3, r0
 801559e:	461a      	mov	r2, r3
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	68db      	ldr	r3, [r3, #12]
 80155a4:	4322      	orrs	r2, r4
 80155a6:	b292      	uxth	r2, r2
 80155a8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80155aa:	683b      	ldr	r3, [r7, #0]
 80155ac:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80155ae:	683b      	ldr	r3, [r7, #0]
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80155b4:	68f8      	ldr	r0, [r7, #12]
 80155b6:	f7fe fa52 	bl	8013a5e <tcp_seg_free>
    while (next &&
 80155ba:	683b      	ldr	r3, [r7, #0]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d00e      	beq.n	80155de <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	891b      	ldrh	r3, [r3, #8]
 80155c4:	461a      	mov	r2, r3
 80155c6:	4b1d      	ldr	r3, [pc, #116]	@ (801563c <tcp_oos_insert_segment+0x10c>)
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	441a      	add	r2, r3
 80155cc:	683b      	ldr	r3, [r7, #0]
 80155ce:	68db      	ldr	r3, [r3, #12]
 80155d0:	685b      	ldr	r3, [r3, #4]
 80155d2:	6839      	ldr	r1, [r7, #0]
 80155d4:	8909      	ldrh	r1, [r1, #8]
 80155d6:	440b      	add	r3, r1
 80155d8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80155da:	2b00      	cmp	r3, #0
 80155dc:	daca      	bge.n	8015574 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80155de:	683b      	ldr	r3, [r7, #0]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d01e      	beq.n	8015622 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	891b      	ldrh	r3, [r3, #8]
 80155e8:	461a      	mov	r2, r3
 80155ea:	4b14      	ldr	r3, [pc, #80]	@ (801563c <tcp_oos_insert_segment+0x10c>)
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	441a      	add	r2, r3
 80155f0:	683b      	ldr	r3, [r7, #0]
 80155f2:	68db      	ldr	r3, [r3, #12]
 80155f4:	685b      	ldr	r3, [r3, #4]
 80155f6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	dd12      	ble.n	8015622 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	68db      	ldr	r3, [r3, #12]
 8015600:	685b      	ldr	r3, [r3, #4]
 8015602:	b29a      	uxth	r2, r3
 8015604:	4b0d      	ldr	r3, [pc, #52]	@ (801563c <tcp_oos_insert_segment+0x10c>)
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	b29b      	uxth	r3, r3
 801560a:	1ad3      	subs	r3, r2, r3
 801560c:	b29a      	uxth	r2, r3
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	685a      	ldr	r2, [r3, #4]
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	891b      	ldrh	r3, [r3, #8]
 801561a:	4619      	mov	r1, r3
 801561c:	4610      	mov	r0, r2
 801561e:	f7fc fe07 	bl	8012230 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	683a      	ldr	r2, [r7, #0]
 8015626:	601a      	str	r2, [r3, #0]
}
 8015628:	bf00      	nop
 801562a:	3714      	adds	r7, #20
 801562c:	46bd      	mov	sp, r7
 801562e:	bd90      	pop	{r4, r7, pc}
 8015630:	0801e7d0 	.word	0x0801e7d0
 8015634:	0801ea90 	.word	0x0801ea90
 8015638:	0801e81c 	.word	0x0801e81c
 801563c:	200275b4 	.word	0x200275b4

08015640 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8015640:	b5b0      	push	{r4, r5, r7, lr}
 8015642:	b086      	sub	sp, #24
 8015644:	af00      	add	r7, sp, #0
 8015646:	60f8      	str	r0, [r7, #12]
 8015648:	60b9      	str	r1, [r7, #8]
 801564a:	607a      	str	r2, [r7, #4]
 801564c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801564e:	e03e      	b.n	80156ce <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801565a:	697b      	ldr	r3, [r7, #20]
 801565c:	685b      	ldr	r3, [r3, #4]
 801565e:	4618      	mov	r0, r3
 8015660:	f7fc fffa 	bl	8012658 <pbuf_clen>
 8015664:	4603      	mov	r3, r0
 8015666:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801566e:	8a7a      	ldrh	r2, [r7, #18]
 8015670:	429a      	cmp	r2, r3
 8015672:	d906      	bls.n	8015682 <tcp_free_acked_segments+0x42>
 8015674:	4b2a      	ldr	r3, [pc, #168]	@ (8015720 <tcp_free_acked_segments+0xe0>)
 8015676:	f240 4257 	movw	r2, #1111	@ 0x457
 801567a:	492a      	ldr	r1, [pc, #168]	@ (8015724 <tcp_free_acked_segments+0xe4>)
 801567c:	482a      	ldr	r0, [pc, #168]	@ (8015728 <tcp_free_acked_segments+0xe8>)
 801567e:	f006 fdf1 	bl	801c264 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8015688:	8a7b      	ldrh	r3, [r7, #18]
 801568a:	1ad3      	subs	r3, r2, r3
 801568c:	b29a      	uxth	r2, r3
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015694:	697b      	ldr	r3, [r7, #20]
 8015696:	891a      	ldrh	r2, [r3, #8]
 8015698:	4b24      	ldr	r3, [pc, #144]	@ (801572c <tcp_free_acked_segments+0xec>)
 801569a:	881b      	ldrh	r3, [r3, #0]
 801569c:	4413      	add	r3, r2
 801569e:	b29a      	uxth	r2, r3
 80156a0:	4b22      	ldr	r3, [pc, #136]	@ (801572c <tcp_free_acked_segments+0xec>)
 80156a2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80156a4:	6978      	ldr	r0, [r7, #20]
 80156a6:	f7fe f9da 	bl	8013a5e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d00c      	beq.n	80156ce <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80156b4:	68bb      	ldr	r3, [r7, #8]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d109      	bne.n	80156ce <tcp_free_acked_segments+0x8e>
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d106      	bne.n	80156ce <tcp_free_acked_segments+0x8e>
 80156c0:	4b17      	ldr	r3, [pc, #92]	@ (8015720 <tcp_free_acked_segments+0xe0>)
 80156c2:	f240 4261 	movw	r2, #1121	@ 0x461
 80156c6:	491a      	ldr	r1, [pc, #104]	@ (8015730 <tcp_free_acked_segments+0xf0>)
 80156c8:	4817      	ldr	r0, [pc, #92]	@ (8015728 <tcp_free_acked_segments+0xe8>)
 80156ca:	f006 fdcb 	bl	801c264 <iprintf>
  while (seg_list != NULL &&
 80156ce:	68bb      	ldr	r3, [r7, #8]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d020      	beq.n	8015716 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	68db      	ldr	r3, [r3, #12]
 80156d8:	685b      	ldr	r3, [r3, #4]
 80156da:	4618      	mov	r0, r3
 80156dc:	f7fb fb56 	bl	8010d8c <lwip_htonl>
 80156e0:	4604      	mov	r4, r0
 80156e2:	68bb      	ldr	r3, [r7, #8]
 80156e4:	891b      	ldrh	r3, [r3, #8]
 80156e6:	461d      	mov	r5, r3
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	68db      	ldr	r3, [r3, #12]
 80156ec:	899b      	ldrh	r3, [r3, #12]
 80156ee:	b29b      	uxth	r3, r3
 80156f0:	4618      	mov	r0, r3
 80156f2:	f7fb fb35 	bl	8010d60 <lwip_htons>
 80156f6:	4603      	mov	r3, r0
 80156f8:	b2db      	uxtb	r3, r3
 80156fa:	f003 0303 	and.w	r3, r3, #3
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d001      	beq.n	8015706 <tcp_free_acked_segments+0xc6>
 8015702:	2301      	movs	r3, #1
 8015704:	e000      	b.n	8015708 <tcp_free_acked_segments+0xc8>
 8015706:	2300      	movs	r3, #0
 8015708:	442b      	add	r3, r5
 801570a:	18e2      	adds	r2, r4, r3
 801570c:	4b09      	ldr	r3, [pc, #36]	@ (8015734 <tcp_free_acked_segments+0xf4>)
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8015712:	2b00      	cmp	r3, #0
 8015714:	dd9c      	ble.n	8015650 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8015716:	68bb      	ldr	r3, [r7, #8]
}
 8015718:	4618      	mov	r0, r3
 801571a:	3718      	adds	r7, #24
 801571c:	46bd      	mov	sp, r7
 801571e:	bdb0      	pop	{r4, r5, r7, pc}
 8015720:	0801e7d0 	.word	0x0801e7d0
 8015724:	0801eab8 	.word	0x0801eab8
 8015728:	0801e81c 	.word	0x0801e81c
 801572c:	200275bc 	.word	0x200275bc
 8015730:	0801eae0 	.word	0x0801eae0
 8015734:	200275b8 	.word	0x200275b8

08015738 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015738:	b5b0      	push	{r4, r5, r7, lr}
 801573a:	b094      	sub	sp, #80	@ 0x50
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8015740:	2300      	movs	r3, #0
 8015742:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d106      	bne.n	8015758 <tcp_receive+0x20>
 801574a:	4b91      	ldr	r3, [pc, #580]	@ (8015990 <tcp_receive+0x258>)
 801574c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8015750:	4990      	ldr	r1, [pc, #576]	@ (8015994 <tcp_receive+0x25c>)
 8015752:	4891      	ldr	r0, [pc, #580]	@ (8015998 <tcp_receive+0x260>)
 8015754:	f006 fd86 	bl	801c264 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	7d1b      	ldrb	r3, [r3, #20]
 801575c:	2b03      	cmp	r3, #3
 801575e:	d806      	bhi.n	801576e <tcp_receive+0x36>
 8015760:	4b8b      	ldr	r3, [pc, #556]	@ (8015990 <tcp_receive+0x258>)
 8015762:	f240 427c 	movw	r2, #1148	@ 0x47c
 8015766:	498d      	ldr	r1, [pc, #564]	@ (801599c <tcp_receive+0x264>)
 8015768:	488b      	ldr	r0, [pc, #556]	@ (8015998 <tcp_receive+0x260>)
 801576a:	f006 fd7b 	bl	801c264 <iprintf>

  if (flags & TCP_ACK) {
 801576e:	4b8c      	ldr	r3, [pc, #560]	@ (80159a0 <tcp_receive+0x268>)
 8015770:	781b      	ldrb	r3, [r3, #0]
 8015772:	f003 0310 	and.w	r3, r3, #16
 8015776:	2b00      	cmp	r3, #0
 8015778:	f000 8264 	beq.w	8015c44 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015782:	461a      	mov	r2, r3
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015788:	4413      	add	r3, r2
 801578a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015790:	4b84      	ldr	r3, [pc, #528]	@ (80159a4 <tcp_receive+0x26c>)
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	1ad3      	subs	r3, r2, r3
 8015796:	2b00      	cmp	r3, #0
 8015798:	db1b      	blt.n	80157d2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801579e:	4b81      	ldr	r3, [pc, #516]	@ (80159a4 <tcp_receive+0x26c>)
 80157a0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80157a2:	429a      	cmp	r2, r3
 80157a4:	d106      	bne.n	80157b4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80157aa:	4b7f      	ldr	r3, [pc, #508]	@ (80159a8 <tcp_receive+0x270>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	1ad3      	subs	r3, r2, r3
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	db0e      	blt.n	80157d2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80157b8:	4b7b      	ldr	r3, [pc, #492]	@ (80159a8 <tcp_receive+0x270>)
 80157ba:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80157bc:	429a      	cmp	r2, r3
 80157be:	d125      	bne.n	801580c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80157c0:	4b7a      	ldr	r3, [pc, #488]	@ (80159ac <tcp_receive+0x274>)
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	89db      	ldrh	r3, [r3, #14]
 80157c6:	b29a      	uxth	r2, r3
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d91c      	bls.n	801580c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80157d2:	4b76      	ldr	r3, [pc, #472]	@ (80159ac <tcp_receive+0x274>)
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	89db      	ldrh	r3, [r3, #14]
 80157d8:	b29a      	uxth	r2, r3
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80157ec:	429a      	cmp	r2, r3
 80157ee:	d205      	bcs.n	80157fc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80157fc:	4b69      	ldr	r3, [pc, #420]	@ (80159a4 <tcp_receive+0x26c>)
 80157fe:	681a      	ldr	r2, [r3, #0]
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8015804:	4b68      	ldr	r3, [pc, #416]	@ (80159a8 <tcp_receive+0x270>)
 8015806:	681a      	ldr	r2, [r3, #0]
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801580c:	4b66      	ldr	r3, [pc, #408]	@ (80159a8 <tcp_receive+0x270>)
 801580e:	681a      	ldr	r2, [r3, #0]
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015814:	1ad3      	subs	r3, r2, r3
 8015816:	2b00      	cmp	r3, #0
 8015818:	dc58      	bgt.n	80158cc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801581a:	4b65      	ldr	r3, [pc, #404]	@ (80159b0 <tcp_receive+0x278>)
 801581c:	881b      	ldrh	r3, [r3, #0]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d14b      	bne.n	80158ba <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015826:	687a      	ldr	r2, [r7, #4]
 8015828:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801582c:	4413      	add	r3, r2
 801582e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015830:	429a      	cmp	r2, r3
 8015832:	d142      	bne.n	80158ba <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801583a:	2b00      	cmp	r3, #0
 801583c:	db3d      	blt.n	80158ba <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015842:	4b59      	ldr	r3, [pc, #356]	@ (80159a8 <tcp_receive+0x270>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	429a      	cmp	r2, r3
 8015848:	d137      	bne.n	80158ba <tcp_receive+0x182>
              found_dupack = 1;
 801584a:	2301      	movs	r3, #1
 801584c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015854:	2bff      	cmp	r3, #255	@ 0xff
 8015856:	d007      	beq.n	8015868 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801585e:	3301      	adds	r3, #1
 8015860:	b2da      	uxtb	r2, r3
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801586e:	2b03      	cmp	r3, #3
 8015870:	d91b      	bls.n	80158aa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801587c:	4413      	add	r3, r2
 801587e:	b29a      	uxth	r2, r3
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015886:	429a      	cmp	r2, r3
 8015888:	d30a      	bcc.n	80158a0 <tcp_receive+0x168>
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015894:	4413      	add	r3, r2
 8015896:	b29a      	uxth	r2, r3
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801589e:	e004      	b.n	80158aa <tcp_receive+0x172>
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80158a6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80158b0:	2b02      	cmp	r3, #2
 80158b2:	d902      	bls.n	80158ba <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f001 fee7 	bl	8017688 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80158ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80158bc:	2b00      	cmp	r3, #0
 80158be:	f040 8161 	bne.w	8015b84 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	2200      	movs	r2, #0
 80158c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80158ca:	e15b      	b.n	8015b84 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80158cc:	4b36      	ldr	r3, [pc, #216]	@ (80159a8 <tcp_receive+0x270>)
 80158ce:	681a      	ldr	r2, [r3, #0]
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80158d4:	1ad3      	subs	r3, r2, r3
 80158d6:	3b01      	subs	r3, #1
 80158d8:	2b00      	cmp	r3, #0
 80158da:	f2c0 814e 	blt.w	8015b7a <tcp_receive+0x442>
 80158de:	4b32      	ldr	r3, [pc, #200]	@ (80159a8 <tcp_receive+0x270>)
 80158e0:	681a      	ldr	r2, [r3, #0]
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80158e6:	1ad3      	subs	r3, r2, r3
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	f300 8146 	bgt.w	8015b7a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	8b5b      	ldrh	r3, [r3, #26]
 80158f2:	f003 0304 	and.w	r3, r3, #4
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d010      	beq.n	801591c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	8b5b      	ldrh	r3, [r3, #26]
 80158fe:	f023 0304 	bic.w	r3, r3, #4
 8015902:	b29a      	uxth	r2, r3
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	2200      	movs	r2, #0
 8015918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	2200      	movs	r2, #0
 8015920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801592a:	10db      	asrs	r3, r3, #3
 801592c:	b21b      	sxth	r3, r3
 801592e:	b29a      	uxth	r2, r3
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015936:	b29b      	uxth	r3, r3
 8015938:	4413      	add	r3, r2
 801593a:	b29b      	uxth	r3, r3
 801593c:	b21a      	sxth	r2, r3
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015944:	4b18      	ldr	r3, [pc, #96]	@ (80159a8 <tcp_receive+0x270>)
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	b29a      	uxth	r2, r3
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801594e:	b29b      	uxth	r3, r3
 8015950:	1ad3      	subs	r3, r2, r3
 8015952:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	2200      	movs	r2, #0
 8015958:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801595c:	4b12      	ldr	r3, [pc, #72]	@ (80159a8 <tcp_receive+0x270>)
 801595e:	681a      	ldr	r2, [r3, #0]
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	7d1b      	ldrb	r3, [r3, #20]
 8015968:	2b03      	cmp	r3, #3
 801596a:	f240 8097 	bls.w	8015a9c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801597a:	429a      	cmp	r2, r3
 801597c:	d245      	bcs.n	8015a0a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	8b5b      	ldrh	r3, [r3, #26]
 8015982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015986:	2b00      	cmp	r3, #0
 8015988:	d014      	beq.n	80159b4 <tcp_receive+0x27c>
 801598a:	2301      	movs	r3, #1
 801598c:	e013      	b.n	80159b6 <tcp_receive+0x27e>
 801598e:	bf00      	nop
 8015990:	0801e7d0 	.word	0x0801e7d0
 8015994:	0801eb00 	.word	0x0801eb00
 8015998:	0801e81c 	.word	0x0801e81c
 801599c:	0801eb1c 	.word	0x0801eb1c
 80159a0:	200275c0 	.word	0x200275c0
 80159a4:	200275b4 	.word	0x200275b4
 80159a8:	200275b8 	.word	0x200275b8
 80159ac:	200275a4 	.word	0x200275a4
 80159b0:	200275be 	.word	0x200275be
 80159b4:	2302      	movs	r3, #2
 80159b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80159ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80159be:	b29a      	uxth	r2, r3
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80159c4:	fb12 f303 	smulbb	r3, r2, r3
 80159c8:	b29b      	uxth	r3, r3
 80159ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80159cc:	4293      	cmp	r3, r2
 80159ce:	bf28      	it	cs
 80159d0:	4613      	movcs	r3, r2
 80159d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80159da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80159dc:	4413      	add	r3, r2
 80159de:	b29a      	uxth	r2, r3
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80159e6:	429a      	cmp	r2, r3
 80159e8:	d309      	bcc.n	80159fe <tcp_receive+0x2c6>
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80159f0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80159f2:	4413      	add	r3, r2
 80159f4:	b29a      	uxth	r2, r3
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80159fc:	e04e      	b.n	8015a9c <tcp_receive+0x364>
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015a04:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015a08:	e048      	b.n	8015a9c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015a10:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015a12:	4413      	add	r3, r2
 8015a14:	b29a      	uxth	r2, r3
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015a1c:	429a      	cmp	r2, r3
 8015a1e:	d309      	bcc.n	8015a34 <tcp_receive+0x2fc>
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015a26:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015a28:	4413      	add	r3, r2
 8015a2a:	b29a      	uxth	r2, r3
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015a32:	e004      	b.n	8015a3e <tcp_receive+0x306>
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015a3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d326      	bcc.n	8015a9c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015a5a:	1ad3      	subs	r3, r2, r3
 8015a5c:	b29a      	uxth	r2, r3
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015a6e:	4413      	add	r3, r2
 8015a70:	b29a      	uxth	r2, r3
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015a78:	429a      	cmp	r2, r3
 8015a7a:	d30a      	bcc.n	8015a92 <tcp_receive+0x35a>
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015a86:	4413      	add	r3, r2
 8015a88:	b29a      	uxth	r2, r3
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015a90:	e004      	b.n	8015a9c <tcp_receive+0x364>
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015a98:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015aa4:	4a98      	ldr	r2, [pc, #608]	@ (8015d08 <tcp_receive+0x5d0>)
 8015aa6:	6878      	ldr	r0, [r7, #4]
 8015aa8:	f7ff fdca 	bl	8015640 <tcp_free_acked_segments>
 8015aac:	4602      	mov	r2, r0
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015aba:	4a94      	ldr	r2, [pc, #592]	@ (8015d0c <tcp_receive+0x5d4>)
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f7ff fdbf 	bl	8015640 <tcp_free_acked_segments>
 8015ac2:	4602      	mov	r2, r0
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d104      	bne.n	8015ada <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015ad6:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015ad8:	e002      	b.n	8015ae0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	2200      	movs	r2, #0
 8015ade:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d103      	bne.n	8015af6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2200      	movs	r2, #0
 8015af2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8015afc:	4b84      	ldr	r3, [pc, #528]	@ (8015d10 <tcp_receive+0x5d8>)
 8015afe:	881b      	ldrh	r3, [r3, #0]
 8015b00:	4413      	add	r3, r2
 8015b02:	b29a      	uxth	r2, r3
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	8b5b      	ldrh	r3, [r3, #26]
 8015b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d035      	beq.n	8015b82 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d118      	bne.n	8015b50 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d00c      	beq.n	8015b40 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015b2e:	68db      	ldr	r3, [r3, #12]
 8015b30:	685b      	ldr	r3, [r3, #4]
 8015b32:	4618      	mov	r0, r3
 8015b34:	f7fb f92a 	bl	8010d8c <lwip_htonl>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	dc20      	bgt.n	8015b82 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	8b5b      	ldrh	r3, [r3, #26]
 8015b44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015b48:	b29a      	uxth	r2, r3
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015b4e:	e018      	b.n	8015b82 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015b58:	68db      	ldr	r3, [r3, #12]
 8015b5a:	685b      	ldr	r3, [r3, #4]
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f7fb f915 	bl	8010d8c <lwip_htonl>
 8015b62:	4603      	mov	r3, r0
 8015b64:	1ae3      	subs	r3, r4, r3
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	dc0b      	bgt.n	8015b82 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	8b5b      	ldrh	r3, [r3, #26]
 8015b6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015b72:	b29a      	uxth	r2, r3
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015b78:	e003      	b.n	8015b82 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015b7a:	6878      	ldr	r0, [r7, #4]
 8015b7c:	f001 ff70 	bl	8017a60 <tcp_send_empty_ack>
 8015b80:	e000      	b.n	8015b84 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015b82:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d05b      	beq.n	8015c44 <tcp_receive+0x50c>
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015b90:	4b60      	ldr	r3, [pc, #384]	@ (8015d14 <tcp_receive+0x5dc>)
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	1ad3      	subs	r3, r2, r3
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	da54      	bge.n	8015c44 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8015d18 <tcp_receive+0x5e0>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	b29a      	uxth	r2, r3
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015ba4:	b29b      	uxth	r3, r3
 8015ba6:	1ad3      	subs	r3, r2, r3
 8015ba8:	b29b      	uxth	r3, r3
 8015baa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015bae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015bb8:	10db      	asrs	r3, r3, #3
 8015bba:	b21b      	sxth	r3, r3
 8015bbc:	b29b      	uxth	r3, r3
 8015bbe:	1ad3      	subs	r3, r2, r3
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015bcc:	b29a      	uxth	r2, r3
 8015bce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015bd2:	4413      	add	r3, r2
 8015bd4:	b29b      	uxth	r3, r3
 8015bd6:	b21a      	sxth	r2, r3
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8015bdc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	da05      	bge.n	8015bf0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015be4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015be8:	425b      	negs	r3, r3
 8015bea:	b29b      	uxth	r3, r3
 8015bec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015bf0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015bfa:	109b      	asrs	r3, r3, #2
 8015bfc:	b21b      	sxth	r3, r3
 8015bfe:	b29b      	uxth	r3, r3
 8015c00:	1ad3      	subs	r3, r2, r3
 8015c02:	b29b      	uxth	r3, r3
 8015c04:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015c0e:	b29a      	uxth	r2, r3
 8015c10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015c14:	4413      	add	r3, r2
 8015c16:	b29b      	uxth	r3, r3
 8015c18:	b21a      	sxth	r2, r3
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015c24:	10db      	asrs	r3, r3, #3
 8015c26:	b21b      	sxth	r3, r3
 8015c28:	b29a      	uxth	r2, r3
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015c30:	b29b      	uxth	r3, r3
 8015c32:	4413      	add	r3, r2
 8015c34:	b29b      	uxth	r3, r3
 8015c36:	b21a      	sxth	r2, r3
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	2200      	movs	r2, #0
 8015c42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015c44:	4b35      	ldr	r3, [pc, #212]	@ (8015d1c <tcp_receive+0x5e4>)
 8015c46:	881b      	ldrh	r3, [r3, #0]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	f000 84df 	beq.w	801660c <tcp_receive+0xed4>
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	7d1b      	ldrb	r3, [r3, #20]
 8015c52:	2b06      	cmp	r3, #6
 8015c54:	f200 84da 	bhi.w	801660c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015c5c:	4b30      	ldr	r3, [pc, #192]	@ (8015d20 <tcp_receive+0x5e8>)
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	1ad3      	subs	r3, r2, r3
 8015c62:	3b01      	subs	r3, #1
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	f2c0 808f 	blt.w	8015d88 <tcp_receive+0x650>
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8015d1c <tcp_receive+0x5e4>)
 8015c70:	881b      	ldrh	r3, [r3, #0]
 8015c72:	4619      	mov	r1, r3
 8015c74:	4b2a      	ldr	r3, [pc, #168]	@ (8015d20 <tcp_receive+0x5e8>)
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	440b      	add	r3, r1
 8015c7a:	1ad3      	subs	r3, r2, r3
 8015c7c:	3301      	adds	r3, #1
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	f300 8082 	bgt.w	8015d88 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015c84:	4b27      	ldr	r3, [pc, #156]	@ (8015d24 <tcp_receive+0x5ec>)
 8015c86:	685b      	ldr	r3, [r3, #4]
 8015c88:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015c8e:	4b24      	ldr	r3, [pc, #144]	@ (8015d20 <tcp_receive+0x5e8>)
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	1ad3      	subs	r3, r2, r3
 8015c94:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015c96:	4b23      	ldr	r3, [pc, #140]	@ (8015d24 <tcp_receive+0x5ec>)
 8015c98:	685b      	ldr	r3, [r3, #4]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d106      	bne.n	8015cac <tcp_receive+0x574>
 8015c9e:	4b22      	ldr	r3, [pc, #136]	@ (8015d28 <tcp_receive+0x5f0>)
 8015ca0:	f240 5294 	movw	r2, #1428	@ 0x594
 8015ca4:	4921      	ldr	r1, [pc, #132]	@ (8015d2c <tcp_receive+0x5f4>)
 8015ca6:	4822      	ldr	r0, [pc, #136]	@ (8015d30 <tcp_receive+0x5f8>)
 8015ca8:	f006 fadc 	bl	801c264 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015cb2:	4293      	cmp	r3, r2
 8015cb4:	d906      	bls.n	8015cc4 <tcp_receive+0x58c>
 8015cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8015d28 <tcp_receive+0x5f0>)
 8015cb8:	f240 5295 	movw	r2, #1429	@ 0x595
 8015cbc:	491d      	ldr	r1, [pc, #116]	@ (8015d34 <tcp_receive+0x5fc>)
 8015cbe:	481c      	ldr	r0, [pc, #112]	@ (8015d30 <tcp_receive+0x5f8>)
 8015cc0:	f006 fad0 	bl	801c264 <iprintf>
      off = (u16_t)off32;
 8015cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cc6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015cca:	4b16      	ldr	r3, [pc, #88]	@ (8015d24 <tcp_receive+0x5ec>)
 8015ccc:	685b      	ldr	r3, [r3, #4]
 8015cce:	891b      	ldrh	r3, [r3, #8]
 8015cd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015cd4:	429a      	cmp	r2, r3
 8015cd6:	d906      	bls.n	8015ce6 <tcp_receive+0x5ae>
 8015cd8:	4b13      	ldr	r3, [pc, #76]	@ (8015d28 <tcp_receive+0x5f0>)
 8015cda:	f240 5297 	movw	r2, #1431	@ 0x597
 8015cde:	4916      	ldr	r1, [pc, #88]	@ (8015d38 <tcp_receive+0x600>)
 8015ce0:	4813      	ldr	r0, [pc, #76]	@ (8015d30 <tcp_receive+0x5f8>)
 8015ce2:	f006 fabf 	bl	801c264 <iprintf>
      inseg.len -= off;
 8015ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8015d24 <tcp_receive+0x5ec>)
 8015ce8:	891a      	ldrh	r2, [r3, #8]
 8015cea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015cee:	1ad3      	subs	r3, r2, r3
 8015cf0:	b29a      	uxth	r2, r3
 8015cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8015d24 <tcp_receive+0x5ec>)
 8015cf4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8015d24 <tcp_receive+0x5ec>)
 8015cf8:	685b      	ldr	r3, [r3, #4]
 8015cfa:	891a      	ldrh	r2, [r3, #8]
 8015cfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015d00:	1ad3      	subs	r3, r2, r3
 8015d02:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8015d04:	e02a      	b.n	8015d5c <tcp_receive+0x624>
 8015d06:	bf00      	nop
 8015d08:	0801eb38 	.word	0x0801eb38
 8015d0c:	0801eb40 	.word	0x0801eb40
 8015d10:	200275bc 	.word	0x200275bc
 8015d14:	200275b8 	.word	0x200275b8
 8015d18:	2002757c 	.word	0x2002757c
 8015d1c:	200275be 	.word	0x200275be
 8015d20:	200275b4 	.word	0x200275b4
 8015d24:	20027594 	.word	0x20027594
 8015d28:	0801e7d0 	.word	0x0801e7d0
 8015d2c:	0801eb48 	.word	0x0801eb48
 8015d30:	0801e81c 	.word	0x0801e81c
 8015d34:	0801eb58 	.word	0x0801eb58
 8015d38:	0801eb68 	.word	0x0801eb68
        off -= p->len;
 8015d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d3e:	895b      	ldrh	r3, [r3, #10]
 8015d40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015d44:	1ad3      	subs	r3, r2, r3
 8015d46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d4c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015d4e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d52:	2200      	movs	r2, #0
 8015d54:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8015d5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d5e:	895b      	ldrh	r3, [r3, #10]
 8015d60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015d64:	429a      	cmp	r2, r3
 8015d66:	d8e9      	bhi.n	8015d3c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015d68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015d6c:	4619      	mov	r1, r3
 8015d6e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015d70:	f7fc fb5e 	bl	8012430 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d78:	4a90      	ldr	r2, [pc, #576]	@ (8015fbc <tcp_receive+0x884>)
 8015d7a:	6013      	str	r3, [r2, #0]
 8015d7c:	4b90      	ldr	r3, [pc, #576]	@ (8015fc0 <tcp_receive+0x888>)
 8015d7e:	68db      	ldr	r3, [r3, #12]
 8015d80:	4a8e      	ldr	r2, [pc, #568]	@ (8015fbc <tcp_receive+0x884>)
 8015d82:	6812      	ldr	r2, [r2, #0]
 8015d84:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015d86:	e00d      	b.n	8015da4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015d88:	4b8c      	ldr	r3, [pc, #560]	@ (8015fbc <tcp_receive+0x884>)
 8015d8a:	681a      	ldr	r2, [r3, #0]
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d90:	1ad3      	subs	r3, r2, r3
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	da06      	bge.n	8015da4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	8b5b      	ldrh	r3, [r3, #26]
 8015d9a:	f043 0302 	orr.w	r3, r3, #2
 8015d9e:	b29a      	uxth	r2, r3
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015da4:	4b85      	ldr	r3, [pc, #532]	@ (8015fbc <tcp_receive+0x884>)
 8015da6:	681a      	ldr	r2, [r3, #0]
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dac:	1ad3      	subs	r3, r2, r3
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	f2c0 8427 	blt.w	8016602 <tcp_receive+0xeca>
 8015db4:	4b81      	ldr	r3, [pc, #516]	@ (8015fbc <tcp_receive+0x884>)
 8015db6:	681a      	ldr	r2, [r3, #0]
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dbc:	6879      	ldr	r1, [r7, #4]
 8015dbe:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015dc0:	440b      	add	r3, r1
 8015dc2:	1ad3      	subs	r3, r2, r3
 8015dc4:	3301      	adds	r3, #1
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	f300 841b 	bgt.w	8016602 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015dd0:	4b7a      	ldr	r3, [pc, #488]	@ (8015fbc <tcp_receive+0x884>)
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	429a      	cmp	r2, r3
 8015dd6:	f040 8298 	bne.w	801630a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015dda:	4b79      	ldr	r3, [pc, #484]	@ (8015fc0 <tcp_receive+0x888>)
 8015ddc:	891c      	ldrh	r4, [r3, #8]
 8015dde:	4b78      	ldr	r3, [pc, #480]	@ (8015fc0 <tcp_receive+0x888>)
 8015de0:	68db      	ldr	r3, [r3, #12]
 8015de2:	899b      	ldrh	r3, [r3, #12]
 8015de4:	b29b      	uxth	r3, r3
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7fa ffba 	bl	8010d60 <lwip_htons>
 8015dec:	4603      	mov	r3, r0
 8015dee:	b2db      	uxtb	r3, r3
 8015df0:	f003 0303 	and.w	r3, r3, #3
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d001      	beq.n	8015dfc <tcp_receive+0x6c4>
 8015df8:	2301      	movs	r3, #1
 8015dfa:	e000      	b.n	8015dfe <tcp_receive+0x6c6>
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	4423      	add	r3, r4
 8015e00:	b29a      	uxth	r2, r3
 8015e02:	4b70      	ldr	r3, [pc, #448]	@ (8015fc4 <tcp_receive+0x88c>)
 8015e04:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015e0a:	4b6e      	ldr	r3, [pc, #440]	@ (8015fc4 <tcp_receive+0x88c>)
 8015e0c:	881b      	ldrh	r3, [r3, #0]
 8015e0e:	429a      	cmp	r2, r3
 8015e10:	d274      	bcs.n	8015efc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015e12:	4b6b      	ldr	r3, [pc, #428]	@ (8015fc0 <tcp_receive+0x888>)
 8015e14:	68db      	ldr	r3, [r3, #12]
 8015e16:	899b      	ldrh	r3, [r3, #12]
 8015e18:	b29b      	uxth	r3, r3
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f7fa ffa0 	bl	8010d60 <lwip_htons>
 8015e20:	4603      	mov	r3, r0
 8015e22:	b2db      	uxtb	r3, r3
 8015e24:	f003 0301 	and.w	r3, r3, #1
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d01e      	beq.n	8015e6a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015e2c:	4b64      	ldr	r3, [pc, #400]	@ (8015fc0 <tcp_receive+0x888>)
 8015e2e:	68db      	ldr	r3, [r3, #12]
 8015e30:	899b      	ldrh	r3, [r3, #12]
 8015e32:	b29b      	uxth	r3, r3
 8015e34:	b21b      	sxth	r3, r3
 8015e36:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015e3a:	b21c      	sxth	r4, r3
 8015e3c:	4b60      	ldr	r3, [pc, #384]	@ (8015fc0 <tcp_receive+0x888>)
 8015e3e:	68db      	ldr	r3, [r3, #12]
 8015e40:	899b      	ldrh	r3, [r3, #12]
 8015e42:	b29b      	uxth	r3, r3
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7fa ff8b 	bl	8010d60 <lwip_htons>
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	b2db      	uxtb	r3, r3
 8015e4e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015e52:	b29b      	uxth	r3, r3
 8015e54:	4618      	mov	r0, r3
 8015e56:	f7fa ff83 	bl	8010d60 <lwip_htons>
 8015e5a:	4603      	mov	r3, r0
 8015e5c:	b21b      	sxth	r3, r3
 8015e5e:	4323      	orrs	r3, r4
 8015e60:	b21a      	sxth	r2, r3
 8015e62:	4b57      	ldr	r3, [pc, #348]	@ (8015fc0 <tcp_receive+0x888>)
 8015e64:	68db      	ldr	r3, [r3, #12]
 8015e66:	b292      	uxth	r2, r2
 8015e68:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015e6e:	4b54      	ldr	r3, [pc, #336]	@ (8015fc0 <tcp_receive+0x888>)
 8015e70:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015e72:	4b53      	ldr	r3, [pc, #332]	@ (8015fc0 <tcp_receive+0x888>)
 8015e74:	68db      	ldr	r3, [r3, #12]
 8015e76:	899b      	ldrh	r3, [r3, #12]
 8015e78:	b29b      	uxth	r3, r3
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f7fa ff70 	bl	8010d60 <lwip_htons>
 8015e80:	4603      	mov	r3, r0
 8015e82:	b2db      	uxtb	r3, r3
 8015e84:	f003 0302 	and.w	r3, r3, #2
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d005      	beq.n	8015e98 <tcp_receive+0x760>
            inseg.len -= 1;
 8015e8c:	4b4c      	ldr	r3, [pc, #304]	@ (8015fc0 <tcp_receive+0x888>)
 8015e8e:	891b      	ldrh	r3, [r3, #8]
 8015e90:	3b01      	subs	r3, #1
 8015e92:	b29a      	uxth	r2, r3
 8015e94:	4b4a      	ldr	r3, [pc, #296]	@ (8015fc0 <tcp_receive+0x888>)
 8015e96:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015e98:	4b49      	ldr	r3, [pc, #292]	@ (8015fc0 <tcp_receive+0x888>)
 8015e9a:	685b      	ldr	r3, [r3, #4]
 8015e9c:	4a48      	ldr	r2, [pc, #288]	@ (8015fc0 <tcp_receive+0x888>)
 8015e9e:	8912      	ldrh	r2, [r2, #8]
 8015ea0:	4611      	mov	r1, r2
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	f7fc f9c4 	bl	8012230 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015ea8:	4b45      	ldr	r3, [pc, #276]	@ (8015fc0 <tcp_receive+0x888>)
 8015eaa:	891c      	ldrh	r4, [r3, #8]
 8015eac:	4b44      	ldr	r3, [pc, #272]	@ (8015fc0 <tcp_receive+0x888>)
 8015eae:	68db      	ldr	r3, [r3, #12]
 8015eb0:	899b      	ldrh	r3, [r3, #12]
 8015eb2:	b29b      	uxth	r3, r3
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f7fa ff53 	bl	8010d60 <lwip_htons>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	b2db      	uxtb	r3, r3
 8015ebe:	f003 0303 	and.w	r3, r3, #3
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d001      	beq.n	8015eca <tcp_receive+0x792>
 8015ec6:	2301      	movs	r3, #1
 8015ec8:	e000      	b.n	8015ecc <tcp_receive+0x794>
 8015eca:	2300      	movs	r3, #0
 8015ecc:	4423      	add	r3, r4
 8015ece:	b29a      	uxth	r2, r3
 8015ed0:	4b3c      	ldr	r3, [pc, #240]	@ (8015fc4 <tcp_receive+0x88c>)
 8015ed2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8015fc4 <tcp_receive+0x88c>)
 8015ed6:	881b      	ldrh	r3, [r3, #0]
 8015ed8:	461a      	mov	r2, r3
 8015eda:	4b38      	ldr	r3, [pc, #224]	@ (8015fbc <tcp_receive+0x884>)
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	441a      	add	r2, r3
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ee4:	6879      	ldr	r1, [r7, #4]
 8015ee6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015ee8:	440b      	add	r3, r1
 8015eea:	429a      	cmp	r2, r3
 8015eec:	d006      	beq.n	8015efc <tcp_receive+0x7c4>
 8015eee:	4b36      	ldr	r3, [pc, #216]	@ (8015fc8 <tcp_receive+0x890>)
 8015ef0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8015ef4:	4935      	ldr	r1, [pc, #212]	@ (8015fcc <tcp_receive+0x894>)
 8015ef6:	4836      	ldr	r0, [pc, #216]	@ (8015fd0 <tcp_receive+0x898>)
 8015ef8:	f006 f9b4 	bl	801c264 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	f000 80e6 	beq.w	80160d2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015f06:	4b2e      	ldr	r3, [pc, #184]	@ (8015fc0 <tcp_receive+0x888>)
 8015f08:	68db      	ldr	r3, [r3, #12]
 8015f0a:	899b      	ldrh	r3, [r3, #12]
 8015f0c:	b29b      	uxth	r3, r3
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7fa ff26 	bl	8010d60 <lwip_htons>
 8015f14:	4603      	mov	r3, r0
 8015f16:	b2db      	uxtb	r3, r3
 8015f18:	f003 0301 	and.w	r3, r3, #1
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d010      	beq.n	8015f42 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015f20:	e00a      	b.n	8015f38 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f26:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f2c:	681a      	ldr	r2, [r3, #0]
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8015f32:	68f8      	ldr	r0, [r7, #12]
 8015f34:	f7fd fd93 	bl	8013a5e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d1f0      	bne.n	8015f22 <tcp_receive+0x7ea>
 8015f40:	e0c7      	b.n	80160d2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015f48:	e051      	b.n	8015fee <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f4c:	68db      	ldr	r3, [r3, #12]
 8015f4e:	899b      	ldrh	r3, [r3, #12]
 8015f50:	b29b      	uxth	r3, r3
 8015f52:	4618      	mov	r0, r3
 8015f54:	f7fa ff04 	bl	8010d60 <lwip_htons>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	b2db      	uxtb	r3, r3
 8015f5c:	f003 0301 	and.w	r3, r3, #1
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d03c      	beq.n	8015fde <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015f64:	4b16      	ldr	r3, [pc, #88]	@ (8015fc0 <tcp_receive+0x888>)
 8015f66:	68db      	ldr	r3, [r3, #12]
 8015f68:	899b      	ldrh	r3, [r3, #12]
 8015f6a:	b29b      	uxth	r3, r3
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	f7fa fef7 	bl	8010d60 <lwip_htons>
 8015f72:	4603      	mov	r3, r0
 8015f74:	b2db      	uxtb	r3, r3
 8015f76:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d12f      	bne.n	8015fde <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015f7e:	4b10      	ldr	r3, [pc, #64]	@ (8015fc0 <tcp_receive+0x888>)
 8015f80:	68db      	ldr	r3, [r3, #12]
 8015f82:	899b      	ldrh	r3, [r3, #12]
 8015f84:	b29c      	uxth	r4, r3
 8015f86:	2001      	movs	r0, #1
 8015f88:	f7fa feea 	bl	8010d60 <lwip_htons>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	461a      	mov	r2, r3
 8015f90:	4b0b      	ldr	r3, [pc, #44]	@ (8015fc0 <tcp_receive+0x888>)
 8015f92:	68db      	ldr	r3, [r3, #12]
 8015f94:	4322      	orrs	r2, r4
 8015f96:	b292      	uxth	r2, r2
 8015f98:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015f9a:	4b09      	ldr	r3, [pc, #36]	@ (8015fc0 <tcp_receive+0x888>)
 8015f9c:	891c      	ldrh	r4, [r3, #8]
 8015f9e:	4b08      	ldr	r3, [pc, #32]	@ (8015fc0 <tcp_receive+0x888>)
 8015fa0:	68db      	ldr	r3, [r3, #12]
 8015fa2:	899b      	ldrh	r3, [r3, #12]
 8015fa4:	b29b      	uxth	r3, r3
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f7fa feda 	bl	8010d60 <lwip_htons>
 8015fac:	4603      	mov	r3, r0
 8015fae:	b2db      	uxtb	r3, r3
 8015fb0:	f003 0303 	and.w	r3, r3, #3
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d00d      	beq.n	8015fd4 <tcp_receive+0x89c>
 8015fb8:	2301      	movs	r3, #1
 8015fba:	e00c      	b.n	8015fd6 <tcp_receive+0x89e>
 8015fbc:	200275b4 	.word	0x200275b4
 8015fc0:	20027594 	.word	0x20027594
 8015fc4:	200275be 	.word	0x200275be
 8015fc8:	0801e7d0 	.word	0x0801e7d0
 8015fcc:	0801eb78 	.word	0x0801eb78
 8015fd0:	0801e81c 	.word	0x0801e81c
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	4423      	add	r3, r4
 8015fd8:	b29a      	uxth	r2, r3
 8015fda:	4b98      	ldr	r3, [pc, #608]	@ (801623c <tcp_receive+0xb04>)
 8015fdc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015fe0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8015fe8:	6938      	ldr	r0, [r7, #16]
 8015fea:	f7fd fd38 	bl	8013a5e <tcp_seg_free>
            while (next &&
 8015fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d00e      	beq.n	8016012 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015ff4:	4b91      	ldr	r3, [pc, #580]	@ (801623c <tcp_receive+0xb04>)
 8015ff6:	881b      	ldrh	r3, [r3, #0]
 8015ff8:	461a      	mov	r2, r3
 8015ffa:	4b91      	ldr	r3, [pc, #580]	@ (8016240 <tcp_receive+0xb08>)
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	441a      	add	r2, r3
 8016000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016002:	68db      	ldr	r3, [r3, #12]
 8016004:	685b      	ldr	r3, [r3, #4]
 8016006:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016008:	8909      	ldrh	r1, [r1, #8]
 801600a:	440b      	add	r3, r1
 801600c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801600e:	2b00      	cmp	r3, #0
 8016010:	da9b      	bge.n	8015f4a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016014:	2b00      	cmp	r3, #0
 8016016:	d059      	beq.n	80160cc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8016018:	4b88      	ldr	r3, [pc, #544]	@ (801623c <tcp_receive+0xb04>)
 801601a:	881b      	ldrh	r3, [r3, #0]
 801601c:	461a      	mov	r2, r3
 801601e:	4b88      	ldr	r3, [pc, #544]	@ (8016240 <tcp_receive+0xb08>)
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	441a      	add	r2, r3
 8016024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016026:	68db      	ldr	r3, [r3, #12]
 8016028:	685b      	ldr	r3, [r3, #4]
 801602a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801602c:	2b00      	cmp	r3, #0
 801602e:	dd4d      	ble.n	80160cc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016032:	68db      	ldr	r3, [r3, #12]
 8016034:	685b      	ldr	r3, [r3, #4]
 8016036:	b29a      	uxth	r2, r3
 8016038:	4b81      	ldr	r3, [pc, #516]	@ (8016240 <tcp_receive+0xb08>)
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	b29b      	uxth	r3, r3
 801603e:	1ad3      	subs	r3, r2, r3
 8016040:	b29a      	uxth	r2, r3
 8016042:	4b80      	ldr	r3, [pc, #512]	@ (8016244 <tcp_receive+0xb0c>)
 8016044:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016046:	4b7f      	ldr	r3, [pc, #508]	@ (8016244 <tcp_receive+0xb0c>)
 8016048:	68db      	ldr	r3, [r3, #12]
 801604a:	899b      	ldrh	r3, [r3, #12]
 801604c:	b29b      	uxth	r3, r3
 801604e:	4618      	mov	r0, r3
 8016050:	f7fa fe86 	bl	8010d60 <lwip_htons>
 8016054:	4603      	mov	r3, r0
 8016056:	b2db      	uxtb	r3, r3
 8016058:	f003 0302 	and.w	r3, r3, #2
 801605c:	2b00      	cmp	r3, #0
 801605e:	d005      	beq.n	801606c <tcp_receive+0x934>
                inseg.len -= 1;
 8016060:	4b78      	ldr	r3, [pc, #480]	@ (8016244 <tcp_receive+0xb0c>)
 8016062:	891b      	ldrh	r3, [r3, #8]
 8016064:	3b01      	subs	r3, #1
 8016066:	b29a      	uxth	r2, r3
 8016068:	4b76      	ldr	r3, [pc, #472]	@ (8016244 <tcp_receive+0xb0c>)
 801606a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801606c:	4b75      	ldr	r3, [pc, #468]	@ (8016244 <tcp_receive+0xb0c>)
 801606e:	685b      	ldr	r3, [r3, #4]
 8016070:	4a74      	ldr	r2, [pc, #464]	@ (8016244 <tcp_receive+0xb0c>)
 8016072:	8912      	ldrh	r2, [r2, #8]
 8016074:	4611      	mov	r1, r2
 8016076:	4618      	mov	r0, r3
 8016078:	f7fc f8da 	bl	8012230 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801607c:	4b71      	ldr	r3, [pc, #452]	@ (8016244 <tcp_receive+0xb0c>)
 801607e:	891c      	ldrh	r4, [r3, #8]
 8016080:	4b70      	ldr	r3, [pc, #448]	@ (8016244 <tcp_receive+0xb0c>)
 8016082:	68db      	ldr	r3, [r3, #12]
 8016084:	899b      	ldrh	r3, [r3, #12]
 8016086:	b29b      	uxth	r3, r3
 8016088:	4618      	mov	r0, r3
 801608a:	f7fa fe69 	bl	8010d60 <lwip_htons>
 801608e:	4603      	mov	r3, r0
 8016090:	b2db      	uxtb	r3, r3
 8016092:	f003 0303 	and.w	r3, r3, #3
 8016096:	2b00      	cmp	r3, #0
 8016098:	d001      	beq.n	801609e <tcp_receive+0x966>
 801609a:	2301      	movs	r3, #1
 801609c:	e000      	b.n	80160a0 <tcp_receive+0x968>
 801609e:	2300      	movs	r3, #0
 80160a0:	4423      	add	r3, r4
 80160a2:	b29a      	uxth	r2, r3
 80160a4:	4b65      	ldr	r3, [pc, #404]	@ (801623c <tcp_receive+0xb04>)
 80160a6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80160a8:	4b64      	ldr	r3, [pc, #400]	@ (801623c <tcp_receive+0xb04>)
 80160aa:	881b      	ldrh	r3, [r3, #0]
 80160ac:	461a      	mov	r2, r3
 80160ae:	4b64      	ldr	r3, [pc, #400]	@ (8016240 <tcp_receive+0xb08>)
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	441a      	add	r2, r3
 80160b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80160b6:	68db      	ldr	r3, [r3, #12]
 80160b8:	685b      	ldr	r3, [r3, #4]
 80160ba:	429a      	cmp	r2, r3
 80160bc:	d006      	beq.n	80160cc <tcp_receive+0x994>
 80160be:	4b62      	ldr	r3, [pc, #392]	@ (8016248 <tcp_receive+0xb10>)
 80160c0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80160c4:	4961      	ldr	r1, [pc, #388]	@ (801624c <tcp_receive+0xb14>)
 80160c6:	4862      	ldr	r0, [pc, #392]	@ (8016250 <tcp_receive+0xb18>)
 80160c8:	f006 f8cc 	bl	801c264 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80160d0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80160d2:	4b5a      	ldr	r3, [pc, #360]	@ (801623c <tcp_receive+0xb04>)
 80160d4:	881b      	ldrh	r3, [r3, #0]
 80160d6:	461a      	mov	r2, r3
 80160d8:	4b59      	ldr	r3, [pc, #356]	@ (8016240 <tcp_receive+0xb08>)
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	441a      	add	r2, r3
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80160e6:	4b55      	ldr	r3, [pc, #340]	@ (801623c <tcp_receive+0xb04>)
 80160e8:	881b      	ldrh	r3, [r3, #0]
 80160ea:	429a      	cmp	r2, r3
 80160ec:	d206      	bcs.n	80160fc <tcp_receive+0x9c4>
 80160ee:	4b56      	ldr	r3, [pc, #344]	@ (8016248 <tcp_receive+0xb10>)
 80160f0:	f240 6207 	movw	r2, #1543	@ 0x607
 80160f4:	4957      	ldr	r1, [pc, #348]	@ (8016254 <tcp_receive+0xb1c>)
 80160f6:	4856      	ldr	r0, [pc, #344]	@ (8016250 <tcp_receive+0xb18>)
 80160f8:	f006 f8b4 	bl	801c264 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016100:	4b4e      	ldr	r3, [pc, #312]	@ (801623c <tcp_receive+0xb04>)
 8016102:	881b      	ldrh	r3, [r3, #0]
 8016104:	1ad3      	subs	r3, r2, r3
 8016106:	b29a      	uxth	r2, r3
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f7fc ffc5 	bl	801309c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016112:	4b4c      	ldr	r3, [pc, #304]	@ (8016244 <tcp_receive+0xb0c>)
 8016114:	685b      	ldr	r3, [r3, #4]
 8016116:	891b      	ldrh	r3, [r3, #8]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d006      	beq.n	801612a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801611c:	4b49      	ldr	r3, [pc, #292]	@ (8016244 <tcp_receive+0xb0c>)
 801611e:	685b      	ldr	r3, [r3, #4]
 8016120:	4a4d      	ldr	r2, [pc, #308]	@ (8016258 <tcp_receive+0xb20>)
 8016122:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016124:	4b47      	ldr	r3, [pc, #284]	@ (8016244 <tcp_receive+0xb0c>)
 8016126:	2200      	movs	r2, #0
 8016128:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801612a:	4b46      	ldr	r3, [pc, #280]	@ (8016244 <tcp_receive+0xb0c>)
 801612c:	68db      	ldr	r3, [r3, #12]
 801612e:	899b      	ldrh	r3, [r3, #12]
 8016130:	b29b      	uxth	r3, r3
 8016132:	4618      	mov	r0, r3
 8016134:	f7fa fe14 	bl	8010d60 <lwip_htons>
 8016138:	4603      	mov	r3, r0
 801613a:	b2db      	uxtb	r3, r3
 801613c:	f003 0301 	and.w	r3, r3, #1
 8016140:	2b00      	cmp	r3, #0
 8016142:	f000 80b8 	beq.w	80162b6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016146:	4b45      	ldr	r3, [pc, #276]	@ (801625c <tcp_receive+0xb24>)
 8016148:	781b      	ldrb	r3, [r3, #0]
 801614a:	f043 0320 	orr.w	r3, r3, #32
 801614e:	b2da      	uxtb	r2, r3
 8016150:	4b42      	ldr	r3, [pc, #264]	@ (801625c <tcp_receive+0xb24>)
 8016152:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016154:	e0af      	b.n	80162b6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801615a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016160:	68db      	ldr	r3, [r3, #12]
 8016162:	685b      	ldr	r3, [r3, #4]
 8016164:	4a36      	ldr	r2, [pc, #216]	@ (8016240 <tcp_receive+0xb08>)
 8016166:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	891b      	ldrh	r3, [r3, #8]
 801616c:	461c      	mov	r4, r3
 801616e:	68bb      	ldr	r3, [r7, #8]
 8016170:	68db      	ldr	r3, [r3, #12]
 8016172:	899b      	ldrh	r3, [r3, #12]
 8016174:	b29b      	uxth	r3, r3
 8016176:	4618      	mov	r0, r3
 8016178:	f7fa fdf2 	bl	8010d60 <lwip_htons>
 801617c:	4603      	mov	r3, r0
 801617e:	b2db      	uxtb	r3, r3
 8016180:	f003 0303 	and.w	r3, r3, #3
 8016184:	2b00      	cmp	r3, #0
 8016186:	d001      	beq.n	801618c <tcp_receive+0xa54>
 8016188:	2301      	movs	r3, #1
 801618a:	e000      	b.n	801618e <tcp_receive+0xa56>
 801618c:	2300      	movs	r3, #0
 801618e:	191a      	adds	r2, r3, r4
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016194:	441a      	add	r2, r3
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801619e:	461c      	mov	r4, r3
 80161a0:	68bb      	ldr	r3, [r7, #8]
 80161a2:	891b      	ldrh	r3, [r3, #8]
 80161a4:	461d      	mov	r5, r3
 80161a6:	68bb      	ldr	r3, [r7, #8]
 80161a8:	68db      	ldr	r3, [r3, #12]
 80161aa:	899b      	ldrh	r3, [r3, #12]
 80161ac:	b29b      	uxth	r3, r3
 80161ae:	4618      	mov	r0, r3
 80161b0:	f7fa fdd6 	bl	8010d60 <lwip_htons>
 80161b4:	4603      	mov	r3, r0
 80161b6:	b2db      	uxtb	r3, r3
 80161b8:	f003 0303 	and.w	r3, r3, #3
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d001      	beq.n	80161c4 <tcp_receive+0xa8c>
 80161c0:	2301      	movs	r3, #1
 80161c2:	e000      	b.n	80161c6 <tcp_receive+0xa8e>
 80161c4:	2300      	movs	r3, #0
 80161c6:	442b      	add	r3, r5
 80161c8:	429c      	cmp	r4, r3
 80161ca:	d206      	bcs.n	80161da <tcp_receive+0xaa2>
 80161cc:	4b1e      	ldr	r3, [pc, #120]	@ (8016248 <tcp_receive+0xb10>)
 80161ce:	f240 622b 	movw	r2, #1579	@ 0x62b
 80161d2:	4923      	ldr	r1, [pc, #140]	@ (8016260 <tcp_receive+0xb28>)
 80161d4:	481e      	ldr	r0, [pc, #120]	@ (8016250 <tcp_receive+0xb18>)
 80161d6:	f006 f845 	bl	801c264 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80161da:	68bb      	ldr	r3, [r7, #8]
 80161dc:	891b      	ldrh	r3, [r3, #8]
 80161de:	461c      	mov	r4, r3
 80161e0:	68bb      	ldr	r3, [r7, #8]
 80161e2:	68db      	ldr	r3, [r3, #12]
 80161e4:	899b      	ldrh	r3, [r3, #12]
 80161e6:	b29b      	uxth	r3, r3
 80161e8:	4618      	mov	r0, r3
 80161ea:	f7fa fdb9 	bl	8010d60 <lwip_htons>
 80161ee:	4603      	mov	r3, r0
 80161f0:	b2db      	uxtb	r3, r3
 80161f2:	f003 0303 	and.w	r3, r3, #3
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d001      	beq.n	80161fe <tcp_receive+0xac6>
 80161fa:	2301      	movs	r3, #1
 80161fc:	e000      	b.n	8016200 <tcp_receive+0xac8>
 80161fe:	2300      	movs	r3, #0
 8016200:	1919      	adds	r1, r3, r4
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016206:	b28b      	uxth	r3, r1
 8016208:	1ad3      	subs	r3, r2, r3
 801620a:	b29a      	uxth	r2, r3
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016210:	6878      	ldr	r0, [r7, #4]
 8016212:	f7fc ff43 	bl	801309c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016216:	68bb      	ldr	r3, [r7, #8]
 8016218:	685b      	ldr	r3, [r3, #4]
 801621a:	891b      	ldrh	r3, [r3, #8]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d028      	beq.n	8016272 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016220:	4b0d      	ldr	r3, [pc, #52]	@ (8016258 <tcp_receive+0xb20>)
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d01d      	beq.n	8016264 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8016228:	4b0b      	ldr	r3, [pc, #44]	@ (8016258 <tcp_receive+0xb20>)
 801622a:	681a      	ldr	r2, [r3, #0]
 801622c:	68bb      	ldr	r3, [r7, #8]
 801622e:	685b      	ldr	r3, [r3, #4]
 8016230:	4619      	mov	r1, r3
 8016232:	4610      	mov	r0, r2
 8016234:	f7fc fa50 	bl	80126d8 <pbuf_cat>
 8016238:	e018      	b.n	801626c <tcp_receive+0xb34>
 801623a:	bf00      	nop
 801623c:	200275be 	.word	0x200275be
 8016240:	200275b4 	.word	0x200275b4
 8016244:	20027594 	.word	0x20027594
 8016248:	0801e7d0 	.word	0x0801e7d0
 801624c:	0801ebb0 	.word	0x0801ebb0
 8016250:	0801e81c 	.word	0x0801e81c
 8016254:	0801ebec 	.word	0x0801ebec
 8016258:	200275c4 	.word	0x200275c4
 801625c:	200275c1 	.word	0x200275c1
 8016260:	0801ec0c 	.word	0x0801ec0c
            } else {
              recv_data = cseg->p;
 8016264:	68bb      	ldr	r3, [r7, #8]
 8016266:	685b      	ldr	r3, [r3, #4]
 8016268:	4a70      	ldr	r2, [pc, #448]	@ (801642c <tcp_receive+0xcf4>)
 801626a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801626c:	68bb      	ldr	r3, [r7, #8]
 801626e:	2200      	movs	r2, #0
 8016270:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016272:	68bb      	ldr	r3, [r7, #8]
 8016274:	68db      	ldr	r3, [r3, #12]
 8016276:	899b      	ldrh	r3, [r3, #12]
 8016278:	b29b      	uxth	r3, r3
 801627a:	4618      	mov	r0, r3
 801627c:	f7fa fd70 	bl	8010d60 <lwip_htons>
 8016280:	4603      	mov	r3, r0
 8016282:	b2db      	uxtb	r3, r3
 8016284:	f003 0301 	and.w	r3, r3, #1
 8016288:	2b00      	cmp	r3, #0
 801628a:	d00d      	beq.n	80162a8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801628c:	4b68      	ldr	r3, [pc, #416]	@ (8016430 <tcp_receive+0xcf8>)
 801628e:	781b      	ldrb	r3, [r3, #0]
 8016290:	f043 0320 	orr.w	r3, r3, #32
 8016294:	b2da      	uxtb	r2, r3
 8016296:	4b66      	ldr	r3, [pc, #408]	@ (8016430 <tcp_receive+0xcf8>)
 8016298:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	7d1b      	ldrb	r3, [r3, #20]
 801629e:	2b04      	cmp	r3, #4
 80162a0:	d102      	bne.n	80162a8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	2207      	movs	r2, #7
 80162a6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	681a      	ldr	r2, [r3, #0]
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80162b0:	68b8      	ldr	r0, [r7, #8]
 80162b2:	f7fd fbd4 	bl	8013a5e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d008      	beq.n	80162d0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80162c2:	68db      	ldr	r3, [r3, #12]
 80162c4:	685a      	ldr	r2, [r3, #4]
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80162ca:	429a      	cmp	r2, r3
 80162cc:	f43f af43 	beq.w	8016156 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	8b5b      	ldrh	r3, [r3, #26]
 80162d4:	f003 0301 	and.w	r3, r3, #1
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d00e      	beq.n	80162fa <tcp_receive+0xbc2>
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	8b5b      	ldrh	r3, [r3, #26]
 80162e0:	f023 0301 	bic.w	r3, r3, #1
 80162e4:	b29a      	uxth	r2, r3
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	835a      	strh	r2, [r3, #26]
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	8b5b      	ldrh	r3, [r3, #26]
 80162ee:	f043 0302 	orr.w	r3, r3, #2
 80162f2:	b29a      	uxth	r2, r3
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80162f8:	e187      	b.n	801660a <tcp_receive+0xed2>
        tcp_ack(pcb);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	8b5b      	ldrh	r3, [r3, #26]
 80162fe:	f043 0301 	orr.w	r3, r3, #1
 8016302:	b29a      	uxth	r2, r3
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016308:	e17f      	b.n	801660a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801630e:	2b00      	cmp	r3, #0
 8016310:	d106      	bne.n	8016320 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8016312:	4848      	ldr	r0, [pc, #288]	@ (8016434 <tcp_receive+0xcfc>)
 8016314:	f7fd fbbc 	bl	8013a90 <tcp_seg_copy>
 8016318:	4602      	mov	r2, r0
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	675a      	str	r2, [r3, #116]	@ 0x74
 801631e:	e16c      	b.n	80165fa <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8016320:	2300      	movs	r3, #0
 8016322:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016328:	63bb      	str	r3, [r7, #56]	@ 0x38
 801632a:	e156      	b.n	80165da <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801632c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801632e:	68db      	ldr	r3, [r3, #12]
 8016330:	685a      	ldr	r2, [r3, #4]
 8016332:	4b41      	ldr	r3, [pc, #260]	@ (8016438 <tcp_receive+0xd00>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	429a      	cmp	r2, r3
 8016338:	d11d      	bne.n	8016376 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801633a:	4b3e      	ldr	r3, [pc, #248]	@ (8016434 <tcp_receive+0xcfc>)
 801633c:	891a      	ldrh	r2, [r3, #8]
 801633e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016340:	891b      	ldrh	r3, [r3, #8]
 8016342:	429a      	cmp	r2, r3
 8016344:	f240 814e 	bls.w	80165e4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016348:	483a      	ldr	r0, [pc, #232]	@ (8016434 <tcp_receive+0xcfc>)
 801634a:	f7fd fba1 	bl	8013a90 <tcp_seg_copy>
 801634e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8016350:	697b      	ldr	r3, [r7, #20]
 8016352:	2b00      	cmp	r3, #0
 8016354:	f000 8148 	beq.w	80165e8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8016358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801635a:	2b00      	cmp	r3, #0
 801635c:	d003      	beq.n	8016366 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801635e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016360:	697a      	ldr	r2, [r7, #20]
 8016362:	601a      	str	r2, [r3, #0]
 8016364:	e002      	b.n	801636c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	697a      	ldr	r2, [r7, #20]
 801636a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801636c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801636e:	6978      	ldr	r0, [r7, #20]
 8016370:	f7ff f8de 	bl	8015530 <tcp_oos_insert_segment>
                }
                break;
 8016374:	e138      	b.n	80165e8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8016376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016378:	2b00      	cmp	r3, #0
 801637a:	d117      	bne.n	80163ac <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801637c:	4b2e      	ldr	r3, [pc, #184]	@ (8016438 <tcp_receive+0xd00>)
 801637e:	681a      	ldr	r2, [r3, #0]
 8016380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016382:	68db      	ldr	r3, [r3, #12]
 8016384:	685b      	ldr	r3, [r3, #4]
 8016386:	1ad3      	subs	r3, r2, r3
 8016388:	2b00      	cmp	r3, #0
 801638a:	da57      	bge.n	801643c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801638c:	4829      	ldr	r0, [pc, #164]	@ (8016434 <tcp_receive+0xcfc>)
 801638e:	f7fd fb7f 	bl	8013a90 <tcp_seg_copy>
 8016392:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016394:	69bb      	ldr	r3, [r7, #24]
 8016396:	2b00      	cmp	r3, #0
 8016398:	f000 8128 	beq.w	80165ec <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	69ba      	ldr	r2, [r7, #24]
 80163a0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80163a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80163a4:	69b8      	ldr	r0, [r7, #24]
 80163a6:	f7ff f8c3 	bl	8015530 <tcp_oos_insert_segment>
                  }
                  break;
 80163aa:	e11f      	b.n	80165ec <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80163ac:	4b22      	ldr	r3, [pc, #136]	@ (8016438 <tcp_receive+0xd00>)
 80163ae:	681a      	ldr	r2, [r3, #0]
 80163b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80163b2:	68db      	ldr	r3, [r3, #12]
 80163b4:	685b      	ldr	r3, [r3, #4]
 80163b6:	1ad3      	subs	r3, r2, r3
 80163b8:	3b01      	subs	r3, #1
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	db3e      	blt.n	801643c <tcp_receive+0xd04>
 80163be:	4b1e      	ldr	r3, [pc, #120]	@ (8016438 <tcp_receive+0xd00>)
 80163c0:	681a      	ldr	r2, [r3, #0]
 80163c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163c4:	68db      	ldr	r3, [r3, #12]
 80163c6:	685b      	ldr	r3, [r3, #4]
 80163c8:	1ad3      	subs	r3, r2, r3
 80163ca:	3301      	adds	r3, #1
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	dc35      	bgt.n	801643c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80163d0:	4818      	ldr	r0, [pc, #96]	@ (8016434 <tcp_receive+0xcfc>)
 80163d2:	f7fd fb5d 	bl	8013a90 <tcp_seg_copy>
 80163d6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80163d8:	69fb      	ldr	r3, [r7, #28]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	f000 8108 	beq.w	80165f0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80163e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80163e2:	68db      	ldr	r3, [r3, #12]
 80163e4:	685b      	ldr	r3, [r3, #4]
 80163e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80163e8:	8912      	ldrh	r2, [r2, #8]
 80163ea:	441a      	add	r2, r3
 80163ec:	4b12      	ldr	r3, [pc, #72]	@ (8016438 <tcp_receive+0xd00>)
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	1ad3      	subs	r3, r2, r3
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	dd12      	ble.n	801641c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80163f6:	4b10      	ldr	r3, [pc, #64]	@ (8016438 <tcp_receive+0xd00>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	b29a      	uxth	r2, r3
 80163fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80163fe:	68db      	ldr	r3, [r3, #12]
 8016400:	685b      	ldr	r3, [r3, #4]
 8016402:	b29b      	uxth	r3, r3
 8016404:	1ad3      	subs	r3, r2, r3
 8016406:	b29a      	uxth	r2, r3
 8016408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801640a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801640c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801640e:	685a      	ldr	r2, [r3, #4]
 8016410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016412:	891b      	ldrh	r3, [r3, #8]
 8016414:	4619      	mov	r1, r3
 8016416:	4610      	mov	r0, r2
 8016418:	f7fb ff0a 	bl	8012230 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801641c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801641e:	69fa      	ldr	r2, [r7, #28]
 8016420:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8016422:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016424:	69f8      	ldr	r0, [r7, #28]
 8016426:	f7ff f883 	bl	8015530 <tcp_oos_insert_segment>
                  }
                  break;
 801642a:	e0e1      	b.n	80165f0 <tcp_receive+0xeb8>
 801642c:	200275c4 	.word	0x200275c4
 8016430:	200275c1 	.word	0x200275c1
 8016434:	20027594 	.word	0x20027594
 8016438:	200275b4 	.word	0x200275b4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801643c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801643e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8016440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	2b00      	cmp	r3, #0
 8016446:	f040 80c5 	bne.w	80165d4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801644a:	4b7f      	ldr	r3, [pc, #508]	@ (8016648 <tcp_receive+0xf10>)
 801644c:	681a      	ldr	r2, [r3, #0]
 801644e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016450:	68db      	ldr	r3, [r3, #12]
 8016452:	685b      	ldr	r3, [r3, #4]
 8016454:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8016456:	2b00      	cmp	r3, #0
 8016458:	f340 80bc 	ble.w	80165d4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801645c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801645e:	68db      	ldr	r3, [r3, #12]
 8016460:	899b      	ldrh	r3, [r3, #12]
 8016462:	b29b      	uxth	r3, r3
 8016464:	4618      	mov	r0, r3
 8016466:	f7fa fc7b 	bl	8010d60 <lwip_htons>
 801646a:	4603      	mov	r3, r0
 801646c:	b2db      	uxtb	r3, r3
 801646e:	f003 0301 	and.w	r3, r3, #1
 8016472:	2b00      	cmp	r3, #0
 8016474:	f040 80be 	bne.w	80165f4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016478:	4874      	ldr	r0, [pc, #464]	@ (801664c <tcp_receive+0xf14>)
 801647a:	f7fd fb09 	bl	8013a90 <tcp_seg_copy>
 801647e:	4602      	mov	r2, r0
 8016480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016482:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	2b00      	cmp	r3, #0
 801648a:	f000 80b5 	beq.w	80165f8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016490:	68db      	ldr	r3, [r3, #12]
 8016492:	685b      	ldr	r3, [r3, #4]
 8016494:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016496:	8912      	ldrh	r2, [r2, #8]
 8016498:	441a      	add	r2, r3
 801649a:	4b6b      	ldr	r3, [pc, #428]	@ (8016648 <tcp_receive+0xf10>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	1ad3      	subs	r3, r2, r3
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	dd12      	ble.n	80164ca <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80164a4:	4b68      	ldr	r3, [pc, #416]	@ (8016648 <tcp_receive+0xf10>)
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	b29a      	uxth	r2, r3
 80164aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164ac:	68db      	ldr	r3, [r3, #12]
 80164ae:	685b      	ldr	r3, [r3, #4]
 80164b0:	b29b      	uxth	r3, r3
 80164b2:	1ad3      	subs	r3, r2, r3
 80164b4:	b29a      	uxth	r2, r3
 80164b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164b8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80164ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164bc:	685a      	ldr	r2, [r3, #4]
 80164be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164c0:	891b      	ldrh	r3, [r3, #8]
 80164c2:	4619      	mov	r1, r3
 80164c4:	4610      	mov	r0, r2
 80164c6:	f7fb feb3 	bl	8012230 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80164ca:	4b61      	ldr	r3, [pc, #388]	@ (8016650 <tcp_receive+0xf18>)
 80164cc:	881b      	ldrh	r3, [r3, #0]
 80164ce:	461a      	mov	r2, r3
 80164d0:	4b5d      	ldr	r3, [pc, #372]	@ (8016648 <tcp_receive+0xf10>)
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	441a      	add	r2, r3
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164da:	6879      	ldr	r1, [r7, #4]
 80164dc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80164de:	440b      	add	r3, r1
 80164e0:	1ad3      	subs	r3, r2, r3
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	f340 8088 	ble.w	80165f8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80164e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	68db      	ldr	r3, [r3, #12]
 80164ee:	899b      	ldrh	r3, [r3, #12]
 80164f0:	b29b      	uxth	r3, r3
 80164f2:	4618      	mov	r0, r3
 80164f4:	f7fa fc34 	bl	8010d60 <lwip_htons>
 80164f8:	4603      	mov	r3, r0
 80164fa:	b2db      	uxtb	r3, r3
 80164fc:	f003 0301 	and.w	r3, r3, #1
 8016500:	2b00      	cmp	r3, #0
 8016502:	d021      	beq.n	8016548 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	68db      	ldr	r3, [r3, #12]
 801650a:	899b      	ldrh	r3, [r3, #12]
 801650c:	b29b      	uxth	r3, r3
 801650e:	b21b      	sxth	r3, r3
 8016510:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016514:	b21c      	sxth	r4, r3
 8016516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	68db      	ldr	r3, [r3, #12]
 801651c:	899b      	ldrh	r3, [r3, #12]
 801651e:	b29b      	uxth	r3, r3
 8016520:	4618      	mov	r0, r3
 8016522:	f7fa fc1d 	bl	8010d60 <lwip_htons>
 8016526:	4603      	mov	r3, r0
 8016528:	b2db      	uxtb	r3, r3
 801652a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801652e:	b29b      	uxth	r3, r3
 8016530:	4618      	mov	r0, r3
 8016532:	f7fa fc15 	bl	8010d60 <lwip_htons>
 8016536:	4603      	mov	r3, r0
 8016538:	b21b      	sxth	r3, r3
 801653a:	4323      	orrs	r3, r4
 801653c:	b21a      	sxth	r2, r3
 801653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	68db      	ldr	r3, [r3, #12]
 8016544:	b292      	uxth	r2, r2
 8016546:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801654c:	b29a      	uxth	r2, r3
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016552:	4413      	add	r3, r2
 8016554:	b299      	uxth	r1, r3
 8016556:	4b3c      	ldr	r3, [pc, #240]	@ (8016648 <tcp_receive+0xf10>)
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	b29a      	uxth	r2, r3
 801655c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	1a8a      	subs	r2, r1, r2
 8016562:	b292      	uxth	r2, r2
 8016564:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	685a      	ldr	r2, [r3, #4]
 801656c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	891b      	ldrh	r3, [r3, #8]
 8016572:	4619      	mov	r1, r3
 8016574:	4610      	mov	r0, r2
 8016576:	f7fb fe5b 	bl	8012230 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801657a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	891c      	ldrh	r4, [r3, #8]
 8016580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	68db      	ldr	r3, [r3, #12]
 8016586:	899b      	ldrh	r3, [r3, #12]
 8016588:	b29b      	uxth	r3, r3
 801658a:	4618      	mov	r0, r3
 801658c:	f7fa fbe8 	bl	8010d60 <lwip_htons>
 8016590:	4603      	mov	r3, r0
 8016592:	b2db      	uxtb	r3, r3
 8016594:	f003 0303 	and.w	r3, r3, #3
 8016598:	2b00      	cmp	r3, #0
 801659a:	d001      	beq.n	80165a0 <tcp_receive+0xe68>
 801659c:	2301      	movs	r3, #1
 801659e:	e000      	b.n	80165a2 <tcp_receive+0xe6a>
 80165a0:	2300      	movs	r3, #0
 80165a2:	4423      	add	r3, r4
 80165a4:	b29a      	uxth	r2, r3
 80165a6:	4b2a      	ldr	r3, [pc, #168]	@ (8016650 <tcp_receive+0xf18>)
 80165a8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80165aa:	4b29      	ldr	r3, [pc, #164]	@ (8016650 <tcp_receive+0xf18>)
 80165ac:	881b      	ldrh	r3, [r3, #0]
 80165ae:	461a      	mov	r2, r3
 80165b0:	4b25      	ldr	r3, [pc, #148]	@ (8016648 <tcp_receive+0xf10>)
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	441a      	add	r2, r3
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165ba:	6879      	ldr	r1, [r7, #4]
 80165bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80165be:	440b      	add	r3, r1
 80165c0:	429a      	cmp	r2, r3
 80165c2:	d019      	beq.n	80165f8 <tcp_receive+0xec0>
 80165c4:	4b23      	ldr	r3, [pc, #140]	@ (8016654 <tcp_receive+0xf1c>)
 80165c6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80165ca:	4923      	ldr	r1, [pc, #140]	@ (8016658 <tcp_receive+0xf20>)
 80165cc:	4823      	ldr	r0, [pc, #140]	@ (801665c <tcp_receive+0xf24>)
 80165ce:	f005 fe49 	bl	801c264 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80165d2:	e011      	b.n	80165f8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80165d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80165da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165dc:	2b00      	cmp	r3, #0
 80165de:	f47f aea5 	bne.w	801632c <tcp_receive+0xbf4>
 80165e2:	e00a      	b.n	80165fa <tcp_receive+0xec2>
                break;
 80165e4:	bf00      	nop
 80165e6:	e008      	b.n	80165fa <tcp_receive+0xec2>
                break;
 80165e8:	bf00      	nop
 80165ea:	e006      	b.n	80165fa <tcp_receive+0xec2>
                  break;
 80165ec:	bf00      	nop
 80165ee:	e004      	b.n	80165fa <tcp_receive+0xec2>
                  break;
 80165f0:	bf00      	nop
 80165f2:	e002      	b.n	80165fa <tcp_receive+0xec2>
                  break;
 80165f4:	bf00      	nop
 80165f6:	e000      	b.n	80165fa <tcp_receive+0xec2>
                break;
 80165f8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f001 fa30 	bl	8017a60 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8016600:	e003      	b.n	801660a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f001 fa2c 	bl	8017a60 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016608:	e01a      	b.n	8016640 <tcp_receive+0xf08>
 801660a:	e019      	b.n	8016640 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801660c:	4b0e      	ldr	r3, [pc, #56]	@ (8016648 <tcp_receive+0xf10>)
 801660e:	681a      	ldr	r2, [r3, #0]
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016614:	1ad3      	subs	r3, r2, r3
 8016616:	2b00      	cmp	r3, #0
 8016618:	db0a      	blt.n	8016630 <tcp_receive+0xef8>
 801661a:	4b0b      	ldr	r3, [pc, #44]	@ (8016648 <tcp_receive+0xf10>)
 801661c:	681a      	ldr	r2, [r3, #0]
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016622:	6879      	ldr	r1, [r7, #4]
 8016624:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016626:	440b      	add	r3, r1
 8016628:	1ad3      	subs	r3, r2, r3
 801662a:	3301      	adds	r3, #1
 801662c:	2b00      	cmp	r3, #0
 801662e:	dd07      	ble.n	8016640 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	8b5b      	ldrh	r3, [r3, #26]
 8016634:	f043 0302 	orr.w	r3, r3, #2
 8016638:	b29a      	uxth	r2, r3
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801663e:	e7ff      	b.n	8016640 <tcp_receive+0xf08>
 8016640:	bf00      	nop
 8016642:	3750      	adds	r7, #80	@ 0x50
 8016644:	46bd      	mov	sp, r7
 8016646:	bdb0      	pop	{r4, r5, r7, pc}
 8016648:	200275b4 	.word	0x200275b4
 801664c:	20027594 	.word	0x20027594
 8016650:	200275be 	.word	0x200275be
 8016654:	0801e7d0 	.word	0x0801e7d0
 8016658:	0801eb78 	.word	0x0801eb78
 801665c:	0801e81c 	.word	0x0801e81c

08016660 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8016660:	b480      	push	{r7}
 8016662:	b083      	sub	sp, #12
 8016664:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016666:	4b15      	ldr	r3, [pc, #84]	@ (80166bc <tcp_get_next_optbyte+0x5c>)
 8016668:	881b      	ldrh	r3, [r3, #0]
 801666a:	1c5a      	adds	r2, r3, #1
 801666c:	b291      	uxth	r1, r2
 801666e:	4a13      	ldr	r2, [pc, #76]	@ (80166bc <tcp_get_next_optbyte+0x5c>)
 8016670:	8011      	strh	r1, [r2, #0]
 8016672:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016674:	4b12      	ldr	r3, [pc, #72]	@ (80166c0 <tcp_get_next_optbyte+0x60>)
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d004      	beq.n	8016686 <tcp_get_next_optbyte+0x26>
 801667c:	4b11      	ldr	r3, [pc, #68]	@ (80166c4 <tcp_get_next_optbyte+0x64>)
 801667e:	881b      	ldrh	r3, [r3, #0]
 8016680:	88fa      	ldrh	r2, [r7, #6]
 8016682:	429a      	cmp	r2, r3
 8016684:	d208      	bcs.n	8016698 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016686:	4b10      	ldr	r3, [pc, #64]	@ (80166c8 <tcp_get_next_optbyte+0x68>)
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	3314      	adds	r3, #20
 801668c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801668e:	88fb      	ldrh	r3, [r7, #6]
 8016690:	683a      	ldr	r2, [r7, #0]
 8016692:	4413      	add	r3, r2
 8016694:	781b      	ldrb	r3, [r3, #0]
 8016696:	e00b      	b.n	80166b0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016698:	88fb      	ldrh	r3, [r7, #6]
 801669a:	b2da      	uxtb	r2, r3
 801669c:	4b09      	ldr	r3, [pc, #36]	@ (80166c4 <tcp_get_next_optbyte+0x64>)
 801669e:	881b      	ldrh	r3, [r3, #0]
 80166a0:	b2db      	uxtb	r3, r3
 80166a2:	1ad3      	subs	r3, r2, r3
 80166a4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80166a6:	4b06      	ldr	r3, [pc, #24]	@ (80166c0 <tcp_get_next_optbyte+0x60>)
 80166a8:	681a      	ldr	r2, [r3, #0]
 80166aa:	797b      	ldrb	r3, [r7, #5]
 80166ac:	4413      	add	r3, r2
 80166ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80166b0:	4618      	mov	r0, r3
 80166b2:	370c      	adds	r7, #12
 80166b4:	46bd      	mov	sp, r7
 80166b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ba:	4770      	bx	lr
 80166bc:	200275b0 	.word	0x200275b0
 80166c0:	200275ac 	.word	0x200275ac
 80166c4:	200275aa 	.word	0x200275aa
 80166c8:	200275a4 	.word	0x200275a4

080166cc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b084      	sub	sp, #16
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d106      	bne.n	80166e8 <tcp_parseopt+0x1c>
 80166da:	4b32      	ldr	r3, [pc, #200]	@ (80167a4 <tcp_parseopt+0xd8>)
 80166dc:	f240 727d 	movw	r2, #1917	@ 0x77d
 80166e0:	4931      	ldr	r1, [pc, #196]	@ (80167a8 <tcp_parseopt+0xdc>)
 80166e2:	4832      	ldr	r0, [pc, #200]	@ (80167ac <tcp_parseopt+0xe0>)
 80166e4:	f005 fdbe 	bl	801c264 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80166e8:	4b31      	ldr	r3, [pc, #196]	@ (80167b0 <tcp_parseopt+0xe4>)
 80166ea:	881b      	ldrh	r3, [r3, #0]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d056      	beq.n	801679e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80166f0:	4b30      	ldr	r3, [pc, #192]	@ (80167b4 <tcp_parseopt+0xe8>)
 80166f2:	2200      	movs	r2, #0
 80166f4:	801a      	strh	r2, [r3, #0]
 80166f6:	e046      	b.n	8016786 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80166f8:	f7ff ffb2 	bl	8016660 <tcp_get_next_optbyte>
 80166fc:	4603      	mov	r3, r0
 80166fe:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016700:	7bfb      	ldrb	r3, [r7, #15]
 8016702:	2b02      	cmp	r3, #2
 8016704:	d006      	beq.n	8016714 <tcp_parseopt+0x48>
 8016706:	2b02      	cmp	r3, #2
 8016708:	dc2a      	bgt.n	8016760 <tcp_parseopt+0x94>
 801670a:	2b00      	cmp	r3, #0
 801670c:	d042      	beq.n	8016794 <tcp_parseopt+0xc8>
 801670e:	2b01      	cmp	r3, #1
 8016710:	d038      	beq.n	8016784 <tcp_parseopt+0xb8>
 8016712:	e025      	b.n	8016760 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016714:	f7ff ffa4 	bl	8016660 <tcp_get_next_optbyte>
 8016718:	4603      	mov	r3, r0
 801671a:	2b04      	cmp	r3, #4
 801671c:	d13c      	bne.n	8016798 <tcp_parseopt+0xcc>
 801671e:	4b25      	ldr	r3, [pc, #148]	@ (80167b4 <tcp_parseopt+0xe8>)
 8016720:	881b      	ldrh	r3, [r3, #0]
 8016722:	3301      	adds	r3, #1
 8016724:	4a22      	ldr	r2, [pc, #136]	@ (80167b0 <tcp_parseopt+0xe4>)
 8016726:	8812      	ldrh	r2, [r2, #0]
 8016728:	4293      	cmp	r3, r2
 801672a:	da35      	bge.n	8016798 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801672c:	f7ff ff98 	bl	8016660 <tcp_get_next_optbyte>
 8016730:	4603      	mov	r3, r0
 8016732:	021b      	lsls	r3, r3, #8
 8016734:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016736:	f7ff ff93 	bl	8016660 <tcp_get_next_optbyte>
 801673a:	4603      	mov	r3, r0
 801673c:	461a      	mov	r2, r3
 801673e:	89bb      	ldrh	r3, [r7, #12]
 8016740:	4313      	orrs	r3, r2
 8016742:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016744:	89bb      	ldrh	r3, [r7, #12]
 8016746:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801674a:	d804      	bhi.n	8016756 <tcp_parseopt+0x8a>
 801674c:	89bb      	ldrh	r3, [r7, #12]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d001      	beq.n	8016756 <tcp_parseopt+0x8a>
 8016752:	89ba      	ldrh	r2, [r7, #12]
 8016754:	e001      	b.n	801675a <tcp_parseopt+0x8e>
 8016756:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801675e:	e012      	b.n	8016786 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8016760:	f7ff ff7e 	bl	8016660 <tcp_get_next_optbyte>
 8016764:	4603      	mov	r3, r0
 8016766:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8016768:	7afb      	ldrb	r3, [r7, #11]
 801676a:	2b01      	cmp	r3, #1
 801676c:	d916      	bls.n	801679c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801676e:	7afb      	ldrb	r3, [r7, #11]
 8016770:	b29a      	uxth	r2, r3
 8016772:	4b10      	ldr	r3, [pc, #64]	@ (80167b4 <tcp_parseopt+0xe8>)
 8016774:	881b      	ldrh	r3, [r3, #0]
 8016776:	4413      	add	r3, r2
 8016778:	b29b      	uxth	r3, r3
 801677a:	3b02      	subs	r3, #2
 801677c:	b29a      	uxth	r2, r3
 801677e:	4b0d      	ldr	r3, [pc, #52]	@ (80167b4 <tcp_parseopt+0xe8>)
 8016780:	801a      	strh	r2, [r3, #0]
 8016782:	e000      	b.n	8016786 <tcp_parseopt+0xba>
          break;
 8016784:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016786:	4b0b      	ldr	r3, [pc, #44]	@ (80167b4 <tcp_parseopt+0xe8>)
 8016788:	881a      	ldrh	r2, [r3, #0]
 801678a:	4b09      	ldr	r3, [pc, #36]	@ (80167b0 <tcp_parseopt+0xe4>)
 801678c:	881b      	ldrh	r3, [r3, #0]
 801678e:	429a      	cmp	r2, r3
 8016790:	d3b2      	bcc.n	80166f8 <tcp_parseopt+0x2c>
 8016792:	e004      	b.n	801679e <tcp_parseopt+0xd2>
          return;
 8016794:	bf00      	nop
 8016796:	e002      	b.n	801679e <tcp_parseopt+0xd2>
            return;
 8016798:	bf00      	nop
 801679a:	e000      	b.n	801679e <tcp_parseopt+0xd2>
            return;
 801679c:	bf00      	nop
      }
    }
  }
}
 801679e:	3710      	adds	r7, #16
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bd80      	pop	{r7, pc}
 80167a4:	0801e7d0 	.word	0x0801e7d0
 80167a8:	0801ec34 	.word	0x0801ec34
 80167ac:	0801e81c 	.word	0x0801e81c
 80167b0:	200275a8 	.word	0x200275a8
 80167b4:	200275b0 	.word	0x200275b0

080167b8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80167b8:	b480      	push	{r7}
 80167ba:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80167bc:	4b05      	ldr	r3, [pc, #20]	@ (80167d4 <tcp_trigger_input_pcb_close+0x1c>)
 80167be:	781b      	ldrb	r3, [r3, #0]
 80167c0:	f043 0310 	orr.w	r3, r3, #16
 80167c4:	b2da      	uxtb	r2, r3
 80167c6:	4b03      	ldr	r3, [pc, #12]	@ (80167d4 <tcp_trigger_input_pcb_close+0x1c>)
 80167c8:	701a      	strb	r2, [r3, #0]
}
 80167ca:	bf00      	nop
 80167cc:	46bd      	mov	sp, r7
 80167ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d2:	4770      	bx	lr
 80167d4:	200275c1 	.word	0x200275c1

080167d8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b084      	sub	sp, #16
 80167dc:	af00      	add	r7, sp, #0
 80167de:	60f8      	str	r0, [r7, #12]
 80167e0:	60b9      	str	r1, [r7, #8]
 80167e2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d00a      	beq.n	8016800 <tcp_route+0x28>
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	7a1b      	ldrb	r3, [r3, #8]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d006      	beq.n	8016800 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	7a1b      	ldrb	r3, [r3, #8]
 80167f6:	4618      	mov	r0, r3
 80167f8:	f7fb fb12 	bl	8011e20 <netif_get_by_index>
 80167fc:	4603      	mov	r3, r0
 80167fe:	e003      	b.n	8016808 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016800:	6878      	ldr	r0, [r7, #4]
 8016802:	f003 f959 	bl	8019ab8 <ip4_route>
 8016806:	4603      	mov	r3, r0
  }
}
 8016808:	4618      	mov	r0, r3
 801680a:	3710      	adds	r7, #16
 801680c:	46bd      	mov	sp, r7
 801680e:	bd80      	pop	{r7, pc}

08016810 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016810:	b590      	push	{r4, r7, lr}
 8016812:	b087      	sub	sp, #28
 8016814:	af00      	add	r7, sp, #0
 8016816:	60f8      	str	r0, [r7, #12]
 8016818:	60b9      	str	r1, [r7, #8]
 801681a:	603b      	str	r3, [r7, #0]
 801681c:	4613      	mov	r3, r2
 801681e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d105      	bne.n	8016832 <tcp_create_segment+0x22>
 8016826:	4b43      	ldr	r3, [pc, #268]	@ (8016934 <tcp_create_segment+0x124>)
 8016828:	22a3      	movs	r2, #163	@ 0xa3
 801682a:	4943      	ldr	r1, [pc, #268]	@ (8016938 <tcp_create_segment+0x128>)
 801682c:	4843      	ldr	r0, [pc, #268]	@ (801693c <tcp_create_segment+0x12c>)
 801682e:	f005 fd19 	bl	801c264 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016832:	68bb      	ldr	r3, [r7, #8]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d105      	bne.n	8016844 <tcp_create_segment+0x34>
 8016838:	4b3e      	ldr	r3, [pc, #248]	@ (8016934 <tcp_create_segment+0x124>)
 801683a:	22a4      	movs	r2, #164	@ 0xa4
 801683c:	4940      	ldr	r1, [pc, #256]	@ (8016940 <tcp_create_segment+0x130>)
 801683e:	483f      	ldr	r0, [pc, #252]	@ (801693c <tcp_create_segment+0x12c>)
 8016840:	f005 fd10 	bl	801c264 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016844:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016848:	009b      	lsls	r3, r3, #2
 801684a:	b2db      	uxtb	r3, r3
 801684c:	f003 0304 	and.w	r3, r3, #4
 8016850:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016852:	2003      	movs	r0, #3
 8016854:	f7fa ff58 	bl	8011708 <memp_malloc>
 8016858:	6138      	str	r0, [r7, #16]
 801685a:	693b      	ldr	r3, [r7, #16]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d104      	bne.n	801686a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016860:	68b8      	ldr	r0, [r7, #8]
 8016862:	f7fb fe6b 	bl	801253c <pbuf_free>
    return NULL;
 8016866:	2300      	movs	r3, #0
 8016868:	e060      	b.n	801692c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801686a:	693b      	ldr	r3, [r7, #16]
 801686c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016870:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8016872:	693b      	ldr	r3, [r7, #16]
 8016874:	2200      	movs	r2, #0
 8016876:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016878:	693b      	ldr	r3, [r7, #16]
 801687a:	68ba      	ldr	r2, [r7, #8]
 801687c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801687e:	68bb      	ldr	r3, [r7, #8]
 8016880:	891a      	ldrh	r2, [r3, #8]
 8016882:	7dfb      	ldrb	r3, [r7, #23]
 8016884:	b29b      	uxth	r3, r3
 8016886:	429a      	cmp	r2, r3
 8016888:	d205      	bcs.n	8016896 <tcp_create_segment+0x86>
 801688a:	4b2a      	ldr	r3, [pc, #168]	@ (8016934 <tcp_create_segment+0x124>)
 801688c:	22b0      	movs	r2, #176	@ 0xb0
 801688e:	492d      	ldr	r1, [pc, #180]	@ (8016944 <tcp_create_segment+0x134>)
 8016890:	482a      	ldr	r0, [pc, #168]	@ (801693c <tcp_create_segment+0x12c>)
 8016892:	f005 fce7 	bl	801c264 <iprintf>
  seg->len = p->tot_len - optlen;
 8016896:	68bb      	ldr	r3, [r7, #8]
 8016898:	891a      	ldrh	r2, [r3, #8]
 801689a:	7dfb      	ldrb	r3, [r7, #23]
 801689c:	b29b      	uxth	r3, r3
 801689e:	1ad3      	subs	r3, r2, r3
 80168a0:	b29a      	uxth	r2, r3
 80168a2:	693b      	ldr	r3, [r7, #16]
 80168a4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80168a6:	2114      	movs	r1, #20
 80168a8:	68b8      	ldr	r0, [r7, #8]
 80168aa:	f7fb fdb1 	bl	8012410 <pbuf_add_header>
 80168ae:	4603      	mov	r3, r0
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d004      	beq.n	80168be <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80168b4:	6938      	ldr	r0, [r7, #16]
 80168b6:	f7fd f8d2 	bl	8013a5e <tcp_seg_free>
    return NULL;
 80168ba:	2300      	movs	r3, #0
 80168bc:	e036      	b.n	801692c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80168be:	693b      	ldr	r3, [r7, #16]
 80168c0:	685b      	ldr	r3, [r3, #4]
 80168c2:	685a      	ldr	r2, [r3, #4]
 80168c4:	693b      	ldr	r3, [r7, #16]
 80168c6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	8ada      	ldrh	r2, [r3, #22]
 80168cc:	693b      	ldr	r3, [r7, #16]
 80168ce:	68dc      	ldr	r4, [r3, #12]
 80168d0:	4610      	mov	r0, r2
 80168d2:	f7fa fa45 	bl	8010d60 <lwip_htons>
 80168d6:	4603      	mov	r3, r0
 80168d8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	8b1a      	ldrh	r2, [r3, #24]
 80168de:	693b      	ldr	r3, [r7, #16]
 80168e0:	68dc      	ldr	r4, [r3, #12]
 80168e2:	4610      	mov	r0, r2
 80168e4:	f7fa fa3c 	bl	8010d60 <lwip_htons>
 80168e8:	4603      	mov	r3, r0
 80168ea:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80168ec:	693b      	ldr	r3, [r7, #16]
 80168ee:	68dc      	ldr	r4, [r3, #12]
 80168f0:	6838      	ldr	r0, [r7, #0]
 80168f2:	f7fa fa4b 	bl	8010d8c <lwip_htonl>
 80168f6:	4603      	mov	r3, r0
 80168f8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80168fa:	7dfb      	ldrb	r3, [r7, #23]
 80168fc:	089b      	lsrs	r3, r3, #2
 80168fe:	b2db      	uxtb	r3, r3
 8016900:	3305      	adds	r3, #5
 8016902:	b29b      	uxth	r3, r3
 8016904:	031b      	lsls	r3, r3, #12
 8016906:	b29a      	uxth	r2, r3
 8016908:	79fb      	ldrb	r3, [r7, #7]
 801690a:	b29b      	uxth	r3, r3
 801690c:	4313      	orrs	r3, r2
 801690e:	b29a      	uxth	r2, r3
 8016910:	693b      	ldr	r3, [r7, #16]
 8016912:	68dc      	ldr	r4, [r3, #12]
 8016914:	4610      	mov	r0, r2
 8016916:	f7fa fa23 	bl	8010d60 <lwip_htons>
 801691a:	4603      	mov	r3, r0
 801691c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801691e:	693b      	ldr	r3, [r7, #16]
 8016920:	68db      	ldr	r3, [r3, #12]
 8016922:	2200      	movs	r2, #0
 8016924:	749a      	strb	r2, [r3, #18]
 8016926:	2200      	movs	r2, #0
 8016928:	74da      	strb	r2, [r3, #19]
  return seg;
 801692a:	693b      	ldr	r3, [r7, #16]
}
 801692c:	4618      	mov	r0, r3
 801692e:	371c      	adds	r7, #28
 8016930:	46bd      	mov	sp, r7
 8016932:	bd90      	pop	{r4, r7, pc}
 8016934:	0801ec50 	.word	0x0801ec50
 8016938:	0801ec84 	.word	0x0801ec84
 801693c:	0801eca4 	.word	0x0801eca4
 8016940:	0801eccc 	.word	0x0801eccc
 8016944:	0801ecf0 	.word	0x0801ecf0

08016948 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016948:	b590      	push	{r4, r7, lr}
 801694a:	b08b      	sub	sp, #44	@ 0x2c
 801694c:	af02      	add	r7, sp, #8
 801694e:	6078      	str	r0, [r7, #4]
 8016950:	460b      	mov	r3, r1
 8016952:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016954:	2300      	movs	r3, #0
 8016956:	61fb      	str	r3, [r7, #28]
 8016958:	2300      	movs	r3, #0
 801695a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801695c:	2300      	movs	r3, #0
 801695e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d106      	bne.n	8016974 <tcp_split_unsent_seg+0x2c>
 8016966:	4b95      	ldr	r3, [pc, #596]	@ (8016bbc <tcp_split_unsent_seg+0x274>)
 8016968:	f240 324b 	movw	r2, #843	@ 0x34b
 801696c:	4994      	ldr	r1, [pc, #592]	@ (8016bc0 <tcp_split_unsent_seg+0x278>)
 801696e:	4895      	ldr	r0, [pc, #596]	@ (8016bc4 <tcp_split_unsent_seg+0x27c>)
 8016970:	f005 fc78 	bl	801c264 <iprintf>

  useg = pcb->unsent;
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016978:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801697a:	697b      	ldr	r3, [r7, #20]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d102      	bne.n	8016986 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016980:	f04f 33ff 	mov.w	r3, #4294967295
 8016984:	e116      	b.n	8016bb4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016986:	887b      	ldrh	r3, [r7, #2]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d109      	bne.n	80169a0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801698c:	4b8b      	ldr	r3, [pc, #556]	@ (8016bbc <tcp_split_unsent_seg+0x274>)
 801698e:	f240 3253 	movw	r2, #851	@ 0x353
 8016992:	498d      	ldr	r1, [pc, #564]	@ (8016bc8 <tcp_split_unsent_seg+0x280>)
 8016994:	488b      	ldr	r0, [pc, #556]	@ (8016bc4 <tcp_split_unsent_seg+0x27c>)
 8016996:	f005 fc65 	bl	801c264 <iprintf>
    return ERR_VAL;
 801699a:	f06f 0305 	mvn.w	r3, #5
 801699e:	e109      	b.n	8016bb4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80169a0:	697b      	ldr	r3, [r7, #20]
 80169a2:	891b      	ldrh	r3, [r3, #8]
 80169a4:	887a      	ldrh	r2, [r7, #2]
 80169a6:	429a      	cmp	r2, r3
 80169a8:	d301      	bcc.n	80169ae <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80169aa:	2300      	movs	r3, #0
 80169ac:	e102      	b.n	8016bb4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80169b2:	887a      	ldrh	r2, [r7, #2]
 80169b4:	429a      	cmp	r2, r3
 80169b6:	d906      	bls.n	80169c6 <tcp_split_unsent_seg+0x7e>
 80169b8:	4b80      	ldr	r3, [pc, #512]	@ (8016bbc <tcp_split_unsent_seg+0x274>)
 80169ba:	f240 325b 	movw	r2, #859	@ 0x35b
 80169be:	4983      	ldr	r1, [pc, #524]	@ (8016bcc <tcp_split_unsent_seg+0x284>)
 80169c0:	4880      	ldr	r0, [pc, #512]	@ (8016bc4 <tcp_split_unsent_seg+0x27c>)
 80169c2:	f005 fc4f 	bl	801c264 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80169c6:	697b      	ldr	r3, [r7, #20]
 80169c8:	891b      	ldrh	r3, [r3, #8]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d106      	bne.n	80169dc <tcp_split_unsent_seg+0x94>
 80169ce:	4b7b      	ldr	r3, [pc, #492]	@ (8016bbc <tcp_split_unsent_seg+0x274>)
 80169d0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80169d4:	497e      	ldr	r1, [pc, #504]	@ (8016bd0 <tcp_split_unsent_seg+0x288>)
 80169d6:	487b      	ldr	r0, [pc, #492]	@ (8016bc4 <tcp_split_unsent_seg+0x27c>)
 80169d8:	f005 fc44 	bl	801c264 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80169dc:	697b      	ldr	r3, [r7, #20]
 80169de:	7a9b      	ldrb	r3, [r3, #10]
 80169e0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80169e2:	7bfb      	ldrb	r3, [r7, #15]
 80169e4:	009b      	lsls	r3, r3, #2
 80169e6:	b2db      	uxtb	r3, r3
 80169e8:	f003 0304 	and.w	r3, r3, #4
 80169ec:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80169ee:	697b      	ldr	r3, [r7, #20]
 80169f0:	891a      	ldrh	r2, [r3, #8]
 80169f2:	887b      	ldrh	r3, [r7, #2]
 80169f4:	1ad3      	subs	r3, r2, r3
 80169f6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80169f8:	7bbb      	ldrb	r3, [r7, #14]
 80169fa:	b29a      	uxth	r2, r3
 80169fc:	89bb      	ldrh	r3, [r7, #12]
 80169fe:	4413      	add	r3, r2
 8016a00:	b29b      	uxth	r3, r3
 8016a02:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016a06:	4619      	mov	r1, r3
 8016a08:	2036      	movs	r0, #54	@ 0x36
 8016a0a:	f7fb fab3 	bl	8011f74 <pbuf_alloc>
 8016a0e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016a10:	693b      	ldr	r3, [r7, #16]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	f000 80b7 	beq.w	8016b86 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016a18:	697b      	ldr	r3, [r7, #20]
 8016a1a:	685b      	ldr	r3, [r3, #4]
 8016a1c:	891a      	ldrh	r2, [r3, #8]
 8016a1e:	697b      	ldr	r3, [r7, #20]
 8016a20:	891b      	ldrh	r3, [r3, #8]
 8016a22:	1ad3      	subs	r3, r2, r3
 8016a24:	b29a      	uxth	r2, r3
 8016a26:	887b      	ldrh	r3, [r7, #2]
 8016a28:	4413      	add	r3, r2
 8016a2a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016a2c:	697b      	ldr	r3, [r7, #20]
 8016a2e:	6858      	ldr	r0, [r3, #4]
 8016a30:	693b      	ldr	r3, [r7, #16]
 8016a32:	685a      	ldr	r2, [r3, #4]
 8016a34:	7bbb      	ldrb	r3, [r7, #14]
 8016a36:	18d1      	adds	r1, r2, r3
 8016a38:	897b      	ldrh	r3, [r7, #10]
 8016a3a:	89ba      	ldrh	r2, [r7, #12]
 8016a3c:	f7fb ff84 	bl	8012948 <pbuf_copy_partial>
 8016a40:	4603      	mov	r3, r0
 8016a42:	461a      	mov	r2, r3
 8016a44:	89bb      	ldrh	r3, [r7, #12]
 8016a46:	4293      	cmp	r3, r2
 8016a48:	f040 809f 	bne.w	8016b8a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016a4c:	697b      	ldr	r3, [r7, #20]
 8016a4e:	68db      	ldr	r3, [r3, #12]
 8016a50:	899b      	ldrh	r3, [r3, #12]
 8016a52:	b29b      	uxth	r3, r3
 8016a54:	4618      	mov	r0, r3
 8016a56:	f7fa f983 	bl	8010d60 <lwip_htons>
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	b2db      	uxtb	r3, r3
 8016a5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016a62:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016a64:	2300      	movs	r3, #0
 8016a66:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016a68:	7efb      	ldrb	r3, [r7, #27]
 8016a6a:	f003 0308 	and.w	r3, r3, #8
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d007      	beq.n	8016a82 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016a72:	7efb      	ldrb	r3, [r7, #27]
 8016a74:	f023 0308 	bic.w	r3, r3, #8
 8016a78:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016a7a:	7ebb      	ldrb	r3, [r7, #26]
 8016a7c:	f043 0308 	orr.w	r3, r3, #8
 8016a80:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016a82:	7efb      	ldrb	r3, [r7, #27]
 8016a84:	f003 0301 	and.w	r3, r3, #1
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d007      	beq.n	8016a9c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016a8c:	7efb      	ldrb	r3, [r7, #27]
 8016a8e:	f023 0301 	bic.w	r3, r3, #1
 8016a92:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016a94:	7ebb      	ldrb	r3, [r7, #26]
 8016a96:	f043 0301 	orr.w	r3, r3, #1
 8016a9a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016a9c:	697b      	ldr	r3, [r7, #20]
 8016a9e:	68db      	ldr	r3, [r3, #12]
 8016aa0:	685b      	ldr	r3, [r3, #4]
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	f7fa f972 	bl	8010d8c <lwip_htonl>
 8016aa8:	4602      	mov	r2, r0
 8016aaa:	887b      	ldrh	r3, [r7, #2]
 8016aac:	18d1      	adds	r1, r2, r3
 8016aae:	7eba      	ldrb	r2, [r7, #26]
 8016ab0:	7bfb      	ldrb	r3, [r7, #15]
 8016ab2:	9300      	str	r3, [sp, #0]
 8016ab4:	460b      	mov	r3, r1
 8016ab6:	6939      	ldr	r1, [r7, #16]
 8016ab8:	6878      	ldr	r0, [r7, #4]
 8016aba:	f7ff fea9 	bl	8016810 <tcp_create_segment>
 8016abe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016ac0:	69fb      	ldr	r3, [r7, #28]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d063      	beq.n	8016b8e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016ac6:	697b      	ldr	r3, [r7, #20]
 8016ac8:	685b      	ldr	r3, [r3, #4]
 8016aca:	4618      	mov	r0, r3
 8016acc:	f7fb fdc4 	bl	8012658 <pbuf_clen>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	461a      	mov	r2, r3
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016ada:	1a9b      	subs	r3, r3, r2
 8016adc:	b29a      	uxth	r2, r3
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016ae4:	697b      	ldr	r3, [r7, #20]
 8016ae6:	6858      	ldr	r0, [r3, #4]
 8016ae8:	697b      	ldr	r3, [r7, #20]
 8016aea:	685b      	ldr	r3, [r3, #4]
 8016aec:	891a      	ldrh	r2, [r3, #8]
 8016aee:	89bb      	ldrh	r3, [r7, #12]
 8016af0:	1ad3      	subs	r3, r2, r3
 8016af2:	b29b      	uxth	r3, r3
 8016af4:	4619      	mov	r1, r3
 8016af6:	f7fb fb9b 	bl	8012230 <pbuf_realloc>
  useg->len -= remainder;
 8016afa:	697b      	ldr	r3, [r7, #20]
 8016afc:	891a      	ldrh	r2, [r3, #8]
 8016afe:	89bb      	ldrh	r3, [r7, #12]
 8016b00:	1ad3      	subs	r3, r2, r3
 8016b02:	b29a      	uxth	r2, r3
 8016b04:	697b      	ldr	r3, [r7, #20]
 8016b06:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016b08:	697b      	ldr	r3, [r7, #20]
 8016b0a:	68db      	ldr	r3, [r3, #12]
 8016b0c:	899b      	ldrh	r3, [r3, #12]
 8016b0e:	b29c      	uxth	r4, r3
 8016b10:	7efb      	ldrb	r3, [r7, #27]
 8016b12:	b29b      	uxth	r3, r3
 8016b14:	4618      	mov	r0, r3
 8016b16:	f7fa f923 	bl	8010d60 <lwip_htons>
 8016b1a:	4603      	mov	r3, r0
 8016b1c:	461a      	mov	r2, r3
 8016b1e:	697b      	ldr	r3, [r7, #20]
 8016b20:	68db      	ldr	r3, [r3, #12]
 8016b22:	4322      	orrs	r2, r4
 8016b24:	b292      	uxth	r2, r2
 8016b26:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016b28:	697b      	ldr	r3, [r7, #20]
 8016b2a:	685b      	ldr	r3, [r3, #4]
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f7fb fd93 	bl	8012658 <pbuf_clen>
 8016b32:	4603      	mov	r3, r0
 8016b34:	461a      	mov	r2, r3
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016b3c:	4413      	add	r3, r2
 8016b3e:	b29a      	uxth	r2, r3
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016b46:	69fb      	ldr	r3, [r7, #28]
 8016b48:	685b      	ldr	r3, [r3, #4]
 8016b4a:	4618      	mov	r0, r3
 8016b4c:	f7fb fd84 	bl	8012658 <pbuf_clen>
 8016b50:	4603      	mov	r3, r0
 8016b52:	461a      	mov	r2, r3
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016b5a:	4413      	add	r3, r2
 8016b5c:	b29a      	uxth	r2, r3
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016b64:	697b      	ldr	r3, [r7, #20]
 8016b66:	681a      	ldr	r2, [r3, #0]
 8016b68:	69fb      	ldr	r3, [r7, #28]
 8016b6a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016b6c:	697b      	ldr	r3, [r7, #20]
 8016b6e:	69fa      	ldr	r2, [r7, #28]
 8016b70:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016b72:	69fb      	ldr	r3, [r7, #28]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d103      	bne.n	8016b82 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016b82:	2300      	movs	r3, #0
 8016b84:	e016      	b.n	8016bb4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016b86:	bf00      	nop
 8016b88:	e002      	b.n	8016b90 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016b8a:	bf00      	nop
 8016b8c:	e000      	b.n	8016b90 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016b8e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016b90:	69fb      	ldr	r3, [r7, #28]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d006      	beq.n	8016ba4 <tcp_split_unsent_seg+0x25c>
 8016b96:	4b09      	ldr	r3, [pc, #36]	@ (8016bbc <tcp_split_unsent_seg+0x274>)
 8016b98:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8016b9c:	490d      	ldr	r1, [pc, #52]	@ (8016bd4 <tcp_split_unsent_seg+0x28c>)
 8016b9e:	4809      	ldr	r0, [pc, #36]	@ (8016bc4 <tcp_split_unsent_seg+0x27c>)
 8016ba0:	f005 fb60 	bl	801c264 <iprintf>
  if (p != NULL) {
 8016ba4:	693b      	ldr	r3, [r7, #16]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d002      	beq.n	8016bb0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016baa:	6938      	ldr	r0, [r7, #16]
 8016bac:	f7fb fcc6 	bl	801253c <pbuf_free>
  }

  return ERR_MEM;
 8016bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	3724      	adds	r7, #36	@ 0x24
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	bd90      	pop	{r4, r7, pc}
 8016bbc:	0801ec50 	.word	0x0801ec50
 8016bc0:	0801efe4 	.word	0x0801efe4
 8016bc4:	0801eca4 	.word	0x0801eca4
 8016bc8:	0801f008 	.word	0x0801f008
 8016bcc:	0801f02c 	.word	0x0801f02c
 8016bd0:	0801f03c 	.word	0x0801f03c
 8016bd4:	0801f04c 	.word	0x0801f04c

08016bd8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016bd8:	b590      	push	{r4, r7, lr}
 8016bda:	b085      	sub	sp, #20
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d106      	bne.n	8016bf4 <tcp_send_fin+0x1c>
 8016be6:	4b21      	ldr	r3, [pc, #132]	@ (8016c6c <tcp_send_fin+0x94>)
 8016be8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8016bec:	4920      	ldr	r1, [pc, #128]	@ (8016c70 <tcp_send_fin+0x98>)
 8016bee:	4821      	ldr	r0, [pc, #132]	@ (8016c74 <tcp_send_fin+0x9c>)
 8016bf0:	f005 fb38 	bl	801c264 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d02e      	beq.n	8016c5a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c00:	60fb      	str	r3, [r7, #12]
 8016c02:	e002      	b.n	8016c0a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d1f8      	bne.n	8016c04 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	68db      	ldr	r3, [r3, #12]
 8016c16:	899b      	ldrh	r3, [r3, #12]
 8016c18:	b29b      	uxth	r3, r3
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f7fa f8a0 	bl	8010d60 <lwip_htons>
 8016c20:	4603      	mov	r3, r0
 8016c22:	b2db      	uxtb	r3, r3
 8016c24:	f003 0307 	and.w	r3, r3, #7
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d116      	bne.n	8016c5a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	68db      	ldr	r3, [r3, #12]
 8016c30:	899b      	ldrh	r3, [r3, #12]
 8016c32:	b29c      	uxth	r4, r3
 8016c34:	2001      	movs	r0, #1
 8016c36:	f7fa f893 	bl	8010d60 <lwip_htons>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	461a      	mov	r2, r3
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	68db      	ldr	r3, [r3, #12]
 8016c42:	4322      	orrs	r2, r4
 8016c44:	b292      	uxth	r2, r2
 8016c46:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	8b5b      	ldrh	r3, [r3, #26]
 8016c4c:	f043 0320 	orr.w	r3, r3, #32
 8016c50:	b29a      	uxth	r2, r3
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016c56:	2300      	movs	r3, #0
 8016c58:	e004      	b.n	8016c64 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016c5a:	2101      	movs	r1, #1
 8016c5c:	6878      	ldr	r0, [r7, #4]
 8016c5e:	f000 f80b 	bl	8016c78 <tcp_enqueue_flags>
 8016c62:	4603      	mov	r3, r0
}
 8016c64:	4618      	mov	r0, r3
 8016c66:	3714      	adds	r7, #20
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd90      	pop	{r4, r7, pc}
 8016c6c:	0801ec50 	.word	0x0801ec50
 8016c70:	0801f058 	.word	0x0801f058
 8016c74:	0801eca4 	.word	0x0801eca4

08016c78 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b08a      	sub	sp, #40	@ 0x28
 8016c7c:	af02      	add	r7, sp, #8
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	460b      	mov	r3, r1
 8016c82:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016c84:	2300      	movs	r3, #0
 8016c86:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016c88:	2300      	movs	r3, #0
 8016c8a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016c8c:	78fb      	ldrb	r3, [r7, #3]
 8016c8e:	f003 0303 	and.w	r3, r3, #3
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d106      	bne.n	8016ca4 <tcp_enqueue_flags+0x2c>
 8016c96:	4b67      	ldr	r3, [pc, #412]	@ (8016e34 <tcp_enqueue_flags+0x1bc>)
 8016c98:	f240 4211 	movw	r2, #1041	@ 0x411
 8016c9c:	4966      	ldr	r1, [pc, #408]	@ (8016e38 <tcp_enqueue_flags+0x1c0>)
 8016c9e:	4867      	ldr	r0, [pc, #412]	@ (8016e3c <tcp_enqueue_flags+0x1c4>)
 8016ca0:	f005 fae0 	bl	801c264 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d106      	bne.n	8016cb8 <tcp_enqueue_flags+0x40>
 8016caa:	4b62      	ldr	r3, [pc, #392]	@ (8016e34 <tcp_enqueue_flags+0x1bc>)
 8016cac:	f240 4213 	movw	r2, #1043	@ 0x413
 8016cb0:	4963      	ldr	r1, [pc, #396]	@ (8016e40 <tcp_enqueue_flags+0x1c8>)
 8016cb2:	4862      	ldr	r0, [pc, #392]	@ (8016e3c <tcp_enqueue_flags+0x1c4>)
 8016cb4:	f005 fad6 	bl	801c264 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016cb8:	78fb      	ldrb	r3, [r7, #3]
 8016cba:	f003 0302 	and.w	r3, r3, #2
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d001      	beq.n	8016cc6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016cc2:	2301      	movs	r3, #1
 8016cc4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016cc6:	7ffb      	ldrb	r3, [r7, #31]
 8016cc8:	009b      	lsls	r3, r3, #2
 8016cca:	b2db      	uxtb	r3, r3
 8016ccc:	f003 0304 	and.w	r3, r3, #4
 8016cd0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016cd2:	7dfb      	ldrb	r3, [r7, #23]
 8016cd4:	b29b      	uxth	r3, r3
 8016cd6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016cda:	4619      	mov	r1, r3
 8016cdc:	2036      	movs	r0, #54	@ 0x36
 8016cde:	f7fb f949 	bl	8011f74 <pbuf_alloc>
 8016ce2:	6138      	str	r0, [r7, #16]
 8016ce4:	693b      	ldr	r3, [r7, #16]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d109      	bne.n	8016cfe <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	8b5b      	ldrh	r3, [r3, #26]
 8016cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016cf2:	b29a      	uxth	r2, r3
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8016cfc:	e095      	b.n	8016e2a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016cfe:	693b      	ldr	r3, [r7, #16]
 8016d00:	895a      	ldrh	r2, [r3, #10]
 8016d02:	7dfb      	ldrb	r3, [r7, #23]
 8016d04:	b29b      	uxth	r3, r3
 8016d06:	429a      	cmp	r2, r3
 8016d08:	d206      	bcs.n	8016d18 <tcp_enqueue_flags+0xa0>
 8016d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8016e34 <tcp_enqueue_flags+0x1bc>)
 8016d0c:	f240 4239 	movw	r2, #1081	@ 0x439
 8016d10:	494c      	ldr	r1, [pc, #304]	@ (8016e44 <tcp_enqueue_flags+0x1cc>)
 8016d12:	484a      	ldr	r0, [pc, #296]	@ (8016e3c <tcp_enqueue_flags+0x1c4>)
 8016d14:	f005 faa6 	bl	801c264 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8016d1c:	78fa      	ldrb	r2, [r7, #3]
 8016d1e:	7ffb      	ldrb	r3, [r7, #31]
 8016d20:	9300      	str	r3, [sp, #0]
 8016d22:	460b      	mov	r3, r1
 8016d24:	6939      	ldr	r1, [r7, #16]
 8016d26:	6878      	ldr	r0, [r7, #4]
 8016d28:	f7ff fd72 	bl	8016810 <tcp_create_segment>
 8016d2c:	60f8      	str	r0, [r7, #12]
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d109      	bne.n	8016d48 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	8b5b      	ldrh	r3, [r3, #26]
 8016d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016d3c:	b29a      	uxth	r2, r3
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016d42:	f04f 33ff 	mov.w	r3, #4294967295
 8016d46:	e070      	b.n	8016e2a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	68db      	ldr	r3, [r3, #12]
 8016d4c:	f003 0303 	and.w	r3, r3, #3
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d006      	beq.n	8016d62 <tcp_enqueue_flags+0xea>
 8016d54:	4b37      	ldr	r3, [pc, #220]	@ (8016e34 <tcp_enqueue_flags+0x1bc>)
 8016d56:	f240 4242 	movw	r2, #1090	@ 0x442
 8016d5a:	493b      	ldr	r1, [pc, #236]	@ (8016e48 <tcp_enqueue_flags+0x1d0>)
 8016d5c:	4837      	ldr	r0, [pc, #220]	@ (8016e3c <tcp_enqueue_flags+0x1c4>)
 8016d5e:	f005 fa81 	bl	801c264 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	891b      	ldrh	r3, [r3, #8]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d006      	beq.n	8016d78 <tcp_enqueue_flags+0x100>
 8016d6a:	4b32      	ldr	r3, [pc, #200]	@ (8016e34 <tcp_enqueue_flags+0x1bc>)
 8016d6c:	f240 4243 	movw	r2, #1091	@ 0x443
 8016d70:	4936      	ldr	r1, [pc, #216]	@ (8016e4c <tcp_enqueue_flags+0x1d4>)
 8016d72:	4832      	ldr	r0, [pc, #200]	@ (8016e3c <tcp_enqueue_flags+0x1c4>)
 8016d74:	f005 fa76 	bl	801c264 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d103      	bne.n	8016d88 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	68fa      	ldr	r2, [r7, #12]
 8016d84:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016d86:	e00d      	b.n	8016da4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d8c:	61bb      	str	r3, [r7, #24]
 8016d8e:	e002      	b.n	8016d96 <tcp_enqueue_flags+0x11e>
 8016d90:	69bb      	ldr	r3, [r7, #24]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	61bb      	str	r3, [r7, #24]
 8016d96:	69bb      	ldr	r3, [r7, #24]
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d1f8      	bne.n	8016d90 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016d9e:	69bb      	ldr	r3, [r7, #24]
 8016da0:	68fa      	ldr	r2, [r7, #12]
 8016da2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	2200      	movs	r2, #0
 8016da8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016dac:	78fb      	ldrb	r3, [r7, #3]
 8016dae:	f003 0302 	and.w	r3, r3, #2
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d104      	bne.n	8016dc0 <tcp_enqueue_flags+0x148>
 8016db6:	78fb      	ldrb	r3, [r7, #3]
 8016db8:	f003 0301 	and.w	r3, r3, #1
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d004      	beq.n	8016dca <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016dc4:	1c5a      	adds	r2, r3, #1
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016dca:	78fb      	ldrb	r3, [r7, #3]
 8016dcc:	f003 0301 	and.w	r3, r3, #1
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d006      	beq.n	8016de2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	8b5b      	ldrh	r3, [r3, #26]
 8016dd8:	f043 0320 	orr.w	r3, r3, #32
 8016ddc:	b29a      	uxth	r2, r3
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	685b      	ldr	r3, [r3, #4]
 8016de6:	4618      	mov	r0, r3
 8016de8:	f7fb fc36 	bl	8012658 <pbuf_clen>
 8016dec:	4603      	mov	r3, r0
 8016dee:	461a      	mov	r2, r3
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016df6:	4413      	add	r3, r2
 8016df8:	b29a      	uxth	r2, r3
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d00e      	beq.n	8016e28 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d10a      	bne.n	8016e28 <tcp_enqueue_flags+0x1b0>
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d106      	bne.n	8016e28 <tcp_enqueue_flags+0x1b0>
 8016e1a:	4b06      	ldr	r3, [pc, #24]	@ (8016e34 <tcp_enqueue_flags+0x1bc>)
 8016e1c:	f240 4265 	movw	r2, #1125	@ 0x465
 8016e20:	490b      	ldr	r1, [pc, #44]	@ (8016e50 <tcp_enqueue_flags+0x1d8>)
 8016e22:	4806      	ldr	r0, [pc, #24]	@ (8016e3c <tcp_enqueue_flags+0x1c4>)
 8016e24:	f005 fa1e 	bl	801c264 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016e28:	2300      	movs	r3, #0
}
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	3720      	adds	r7, #32
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	bd80      	pop	{r7, pc}
 8016e32:	bf00      	nop
 8016e34:	0801ec50 	.word	0x0801ec50
 8016e38:	0801f074 	.word	0x0801f074
 8016e3c:	0801eca4 	.word	0x0801eca4
 8016e40:	0801f0cc 	.word	0x0801f0cc
 8016e44:	0801f0ec 	.word	0x0801f0ec
 8016e48:	0801f128 	.word	0x0801f128
 8016e4c:	0801f140 	.word	0x0801f140
 8016e50:	0801f16c 	.word	0x0801f16c

08016e54 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016e54:	b5b0      	push	{r4, r5, r7, lr}
 8016e56:	b08a      	sub	sp, #40	@ 0x28
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d106      	bne.n	8016e70 <tcp_output+0x1c>
 8016e62:	4b8a      	ldr	r3, [pc, #552]	@ (801708c <tcp_output+0x238>)
 8016e64:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8016e68:	4989      	ldr	r1, [pc, #548]	@ (8017090 <tcp_output+0x23c>)
 8016e6a:	488a      	ldr	r0, [pc, #552]	@ (8017094 <tcp_output+0x240>)
 8016e6c:	f005 f9fa 	bl	801c264 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	7d1b      	ldrb	r3, [r3, #20]
 8016e74:	2b01      	cmp	r3, #1
 8016e76:	d106      	bne.n	8016e86 <tcp_output+0x32>
 8016e78:	4b84      	ldr	r3, [pc, #528]	@ (801708c <tcp_output+0x238>)
 8016e7a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8016e7e:	4986      	ldr	r1, [pc, #536]	@ (8017098 <tcp_output+0x244>)
 8016e80:	4884      	ldr	r0, [pc, #528]	@ (8017094 <tcp_output+0x240>)
 8016e82:	f005 f9ef 	bl	801c264 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016e86:	4b85      	ldr	r3, [pc, #532]	@ (801709c <tcp_output+0x248>)
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	687a      	ldr	r2, [r7, #4]
 8016e8c:	429a      	cmp	r2, r3
 8016e8e:	d101      	bne.n	8016e94 <tcp_output+0x40>
    return ERR_OK;
 8016e90:	2300      	movs	r3, #0
 8016e92:	e1ce      	b.n	8017232 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016ea0:	4293      	cmp	r3, r2
 8016ea2:	bf28      	it	cs
 8016ea4:	4613      	movcs	r3, r2
 8016ea6:	b29b      	uxth	r3, r3
 8016ea8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016eae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8016eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d10b      	bne.n	8016ece <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	8b5b      	ldrh	r3, [r3, #26]
 8016eba:	f003 0302 	and.w	r3, r3, #2
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	f000 81aa 	beq.w	8017218 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016ec4:	6878      	ldr	r0, [r7, #4]
 8016ec6:	f000 fdcb 	bl	8017a60 <tcp_send_empty_ack>
 8016eca:	4603      	mov	r3, r0
 8016ecc:	e1b1      	b.n	8017232 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016ece:	6879      	ldr	r1, [r7, #4]
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	3304      	adds	r3, #4
 8016ed4:	461a      	mov	r2, r3
 8016ed6:	6878      	ldr	r0, [r7, #4]
 8016ed8:	f7ff fc7e 	bl	80167d8 <tcp_route>
 8016edc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016ede:	697b      	ldr	r3, [r7, #20]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d102      	bne.n	8016eea <tcp_output+0x96>
    return ERR_RTE;
 8016ee4:	f06f 0303 	mvn.w	r3, #3
 8016ee8:	e1a3      	b.n	8017232 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d003      	beq.n	8016ef8 <tcp_output+0xa4>
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d111      	bne.n	8016f1c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016ef8:	697b      	ldr	r3, [r7, #20]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d002      	beq.n	8016f04 <tcp_output+0xb0>
 8016efe:	697b      	ldr	r3, [r7, #20]
 8016f00:	3304      	adds	r3, #4
 8016f02:	e000      	b.n	8016f06 <tcp_output+0xb2>
 8016f04:	2300      	movs	r3, #0
 8016f06:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016f08:	693b      	ldr	r3, [r7, #16]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d102      	bne.n	8016f14 <tcp_output+0xc0>
      return ERR_RTE;
 8016f0e:	f06f 0303 	mvn.w	r3, #3
 8016f12:	e18e      	b.n	8017232 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016f14:	693b      	ldr	r3, [r7, #16]
 8016f16:	681a      	ldr	r2, [r3, #0]
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f1e:	68db      	ldr	r3, [r3, #12]
 8016f20:	685b      	ldr	r3, [r3, #4]
 8016f22:	4618      	mov	r0, r3
 8016f24:	f7f9 ff32 	bl	8010d8c <lwip_htonl>
 8016f28:	4602      	mov	r2, r0
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f2e:	1ad3      	subs	r3, r2, r3
 8016f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016f32:	8912      	ldrh	r2, [r2, #8]
 8016f34:	4413      	add	r3, r2
 8016f36:	69ba      	ldr	r2, [r7, #24]
 8016f38:	429a      	cmp	r2, r3
 8016f3a:	d227      	bcs.n	8016f8c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016f42:	461a      	mov	r2, r3
 8016f44:	69bb      	ldr	r3, [r7, #24]
 8016f46:	4293      	cmp	r3, r2
 8016f48:	d114      	bne.n	8016f74 <tcp_output+0x120>
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d110      	bne.n	8016f74 <tcp_output+0x120>
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d10b      	bne.n	8016f74 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	2200      	movs	r2, #0
 8016f60:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	2201      	movs	r2, #1
 8016f68:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	2200      	movs	r2, #0
 8016f70:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	8b5b      	ldrh	r3, [r3, #26]
 8016f78:	f003 0302 	and.w	r3, r3, #2
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	f000 814d 	beq.w	801721c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	f000 fd6c 	bl	8017a60 <tcp_send_empty_ack>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	e152      	b.n	8017232 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	2200      	movs	r2, #0
 8016f90:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016f98:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016f9a:	6a3b      	ldr	r3, [r7, #32]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	f000 811c 	beq.w	80171da <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016fa2:	e002      	b.n	8016faa <tcp_output+0x156>
 8016fa4:	6a3b      	ldr	r3, [r7, #32]
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	623b      	str	r3, [r7, #32]
 8016faa:	6a3b      	ldr	r3, [r7, #32]
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d1f8      	bne.n	8016fa4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016fb2:	e112      	b.n	80171da <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fb6:	68db      	ldr	r3, [r3, #12]
 8016fb8:	899b      	ldrh	r3, [r3, #12]
 8016fba:	b29b      	uxth	r3, r3
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	f7f9 fecf 	bl	8010d60 <lwip_htons>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	b2db      	uxtb	r3, r3
 8016fc6:	f003 0304 	and.w	r3, r3, #4
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d006      	beq.n	8016fdc <tcp_output+0x188>
 8016fce:	4b2f      	ldr	r3, [pc, #188]	@ (801708c <tcp_output+0x238>)
 8016fd0:	f240 5236 	movw	r2, #1334	@ 0x536
 8016fd4:	4932      	ldr	r1, [pc, #200]	@ (80170a0 <tcp_output+0x24c>)
 8016fd6:	482f      	ldr	r0, [pc, #188]	@ (8017094 <tcp_output+0x240>)
 8016fd8:	f005 f944 	bl	801c264 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d01f      	beq.n	8017024 <tcp_output+0x1d0>
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	8b5b      	ldrh	r3, [r3, #26]
 8016fe8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d119      	bne.n	8017024 <tcp_output+0x1d0>
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d00b      	beq.n	8017010 <tcp_output+0x1bc>
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d110      	bne.n	8017024 <tcp_output+0x1d0>
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017006:	891a      	ldrh	r2, [r3, #8]
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801700c:	429a      	cmp	r2, r3
 801700e:	d209      	bcs.n	8017024 <tcp_output+0x1d0>
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017016:	2b00      	cmp	r3, #0
 8017018:	d004      	beq.n	8017024 <tcp_output+0x1d0>
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017020:	2b08      	cmp	r3, #8
 8017022:	d901      	bls.n	8017028 <tcp_output+0x1d4>
 8017024:	2301      	movs	r3, #1
 8017026:	e000      	b.n	801702a <tcp_output+0x1d6>
 8017028:	2300      	movs	r3, #0
 801702a:	2b00      	cmp	r3, #0
 801702c:	d106      	bne.n	801703c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	8b5b      	ldrh	r3, [r3, #26]
 8017032:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017036:	2b00      	cmp	r3, #0
 8017038:	f000 80e4 	beq.w	8017204 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	7d1b      	ldrb	r3, [r3, #20]
 8017040:	2b02      	cmp	r3, #2
 8017042:	d00d      	beq.n	8017060 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017046:	68db      	ldr	r3, [r3, #12]
 8017048:	899b      	ldrh	r3, [r3, #12]
 801704a:	b29c      	uxth	r4, r3
 801704c:	2010      	movs	r0, #16
 801704e:	f7f9 fe87 	bl	8010d60 <lwip_htons>
 8017052:	4603      	mov	r3, r0
 8017054:	461a      	mov	r2, r3
 8017056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017058:	68db      	ldr	r3, [r3, #12]
 801705a:	4322      	orrs	r2, r4
 801705c:	b292      	uxth	r2, r2
 801705e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017060:	697a      	ldr	r2, [r7, #20]
 8017062:	6879      	ldr	r1, [r7, #4]
 8017064:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017066:	f000 f909 	bl	801727c <tcp_output_segment>
 801706a:	4603      	mov	r3, r0
 801706c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801706e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d016      	beq.n	80170a4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	8b5b      	ldrh	r3, [r3, #26]
 801707a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801707e:	b29a      	uxth	r2, r3
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	835a      	strh	r2, [r3, #26]
      return err;
 8017084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017088:	e0d3      	b.n	8017232 <tcp_output+0x3de>
 801708a:	bf00      	nop
 801708c:	0801ec50 	.word	0x0801ec50
 8017090:	0801f194 	.word	0x0801f194
 8017094:	0801eca4 	.word	0x0801eca4
 8017098:	0801f1ac 	.word	0x0801f1ac
 801709c:	200275c8 	.word	0x200275c8
 80170a0:	0801f1d4 	.word	0x0801f1d4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80170a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170a6:	681a      	ldr	r2, [r3, #0]
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	7d1b      	ldrb	r3, [r3, #20]
 80170b0:	2b02      	cmp	r3, #2
 80170b2:	d006      	beq.n	80170c2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	8b5b      	ldrh	r3, [r3, #26]
 80170b8:	f023 0303 	bic.w	r3, r3, #3
 80170bc:	b29a      	uxth	r2, r3
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80170c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170c4:	68db      	ldr	r3, [r3, #12]
 80170c6:	685b      	ldr	r3, [r3, #4]
 80170c8:	4618      	mov	r0, r3
 80170ca:	f7f9 fe5f 	bl	8010d8c <lwip_htonl>
 80170ce:	4604      	mov	r4, r0
 80170d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170d2:	891b      	ldrh	r3, [r3, #8]
 80170d4:	461d      	mov	r5, r3
 80170d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170d8:	68db      	ldr	r3, [r3, #12]
 80170da:	899b      	ldrh	r3, [r3, #12]
 80170dc:	b29b      	uxth	r3, r3
 80170de:	4618      	mov	r0, r3
 80170e0:	f7f9 fe3e 	bl	8010d60 <lwip_htons>
 80170e4:	4603      	mov	r3, r0
 80170e6:	b2db      	uxtb	r3, r3
 80170e8:	f003 0303 	and.w	r3, r3, #3
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d001      	beq.n	80170f4 <tcp_output+0x2a0>
 80170f0:	2301      	movs	r3, #1
 80170f2:	e000      	b.n	80170f6 <tcp_output+0x2a2>
 80170f4:	2300      	movs	r3, #0
 80170f6:	442b      	add	r3, r5
 80170f8:	4423      	add	r3, r4
 80170fa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017100:	68bb      	ldr	r3, [r7, #8]
 8017102:	1ad3      	subs	r3, r2, r3
 8017104:	2b00      	cmp	r3, #0
 8017106:	da02      	bge.n	801710e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	68ba      	ldr	r2, [r7, #8]
 801710c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801710e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017110:	891b      	ldrh	r3, [r3, #8]
 8017112:	461c      	mov	r4, r3
 8017114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017116:	68db      	ldr	r3, [r3, #12]
 8017118:	899b      	ldrh	r3, [r3, #12]
 801711a:	b29b      	uxth	r3, r3
 801711c:	4618      	mov	r0, r3
 801711e:	f7f9 fe1f 	bl	8010d60 <lwip_htons>
 8017122:	4603      	mov	r3, r0
 8017124:	b2db      	uxtb	r3, r3
 8017126:	f003 0303 	and.w	r3, r3, #3
 801712a:	2b00      	cmp	r3, #0
 801712c:	d001      	beq.n	8017132 <tcp_output+0x2de>
 801712e:	2301      	movs	r3, #1
 8017130:	e000      	b.n	8017134 <tcp_output+0x2e0>
 8017132:	2300      	movs	r3, #0
 8017134:	4423      	add	r3, r4
 8017136:	2b00      	cmp	r3, #0
 8017138:	d049      	beq.n	80171ce <tcp_output+0x37a>
      seg->next = NULL;
 801713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801713c:	2200      	movs	r2, #0
 801713e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017144:	2b00      	cmp	r3, #0
 8017146:	d105      	bne.n	8017154 <tcp_output+0x300>
        pcb->unacked = seg;
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801714c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017150:	623b      	str	r3, [r7, #32]
 8017152:	e03f      	b.n	80171d4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017156:	68db      	ldr	r3, [r3, #12]
 8017158:	685b      	ldr	r3, [r3, #4]
 801715a:	4618      	mov	r0, r3
 801715c:	f7f9 fe16 	bl	8010d8c <lwip_htonl>
 8017160:	4604      	mov	r4, r0
 8017162:	6a3b      	ldr	r3, [r7, #32]
 8017164:	68db      	ldr	r3, [r3, #12]
 8017166:	685b      	ldr	r3, [r3, #4]
 8017168:	4618      	mov	r0, r3
 801716a:	f7f9 fe0f 	bl	8010d8c <lwip_htonl>
 801716e:	4603      	mov	r3, r0
 8017170:	1ae3      	subs	r3, r4, r3
 8017172:	2b00      	cmp	r3, #0
 8017174:	da24      	bge.n	80171c0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	3370      	adds	r3, #112	@ 0x70
 801717a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801717c:	e002      	b.n	8017184 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801717e:	69fb      	ldr	r3, [r7, #28]
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017184:	69fb      	ldr	r3, [r7, #28]
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d011      	beq.n	80171b0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801718c:	69fb      	ldr	r3, [r7, #28]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	68db      	ldr	r3, [r3, #12]
 8017192:	685b      	ldr	r3, [r3, #4]
 8017194:	4618      	mov	r0, r3
 8017196:	f7f9 fdf9 	bl	8010d8c <lwip_htonl>
 801719a:	4604      	mov	r4, r0
 801719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801719e:	68db      	ldr	r3, [r3, #12]
 80171a0:	685b      	ldr	r3, [r3, #4]
 80171a2:	4618      	mov	r0, r3
 80171a4:	f7f9 fdf2 	bl	8010d8c <lwip_htonl>
 80171a8:	4603      	mov	r3, r0
 80171aa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	dbe6      	blt.n	801717e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80171b0:	69fb      	ldr	r3, [r7, #28]
 80171b2:	681a      	ldr	r2, [r3, #0]
 80171b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171b6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80171b8:	69fb      	ldr	r3, [r7, #28]
 80171ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80171bc:	601a      	str	r2, [r3, #0]
 80171be:	e009      	b.n	80171d4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80171c0:	6a3b      	ldr	r3, [r7, #32]
 80171c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80171c4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80171c6:	6a3b      	ldr	r3, [r7, #32]
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	623b      	str	r3, [r7, #32]
 80171cc:	e002      	b.n	80171d4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80171ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80171d0:	f7fc fc45 	bl	8013a5e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80171d8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80171da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d012      	beq.n	8017206 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80171e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171e2:	68db      	ldr	r3, [r3, #12]
 80171e4:	685b      	ldr	r3, [r3, #4]
 80171e6:	4618      	mov	r0, r3
 80171e8:	f7f9 fdd0 	bl	8010d8c <lwip_htonl>
 80171ec:	4602      	mov	r2, r0
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80171f2:	1ad3      	subs	r3, r2, r3
 80171f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80171f6:	8912      	ldrh	r2, [r2, #8]
 80171f8:	4413      	add	r3, r2
  while (seg != NULL &&
 80171fa:	69ba      	ldr	r2, [r7, #24]
 80171fc:	429a      	cmp	r2, r3
 80171fe:	f4bf aed9 	bcs.w	8016fb4 <tcp_output+0x160>
 8017202:	e000      	b.n	8017206 <tcp_output+0x3b2>
      break;
 8017204:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801720a:	2b00      	cmp	r3, #0
 801720c:	d108      	bne.n	8017220 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	2200      	movs	r2, #0
 8017212:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8017216:	e004      	b.n	8017222 <tcp_output+0x3ce>
    goto output_done;
 8017218:	bf00      	nop
 801721a:	e002      	b.n	8017222 <tcp_output+0x3ce>
    goto output_done;
 801721c:	bf00      	nop
 801721e:	e000      	b.n	8017222 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017220:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	8b5b      	ldrh	r3, [r3, #26]
 8017226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801722a:	b29a      	uxth	r2, r3
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017230:	2300      	movs	r3, #0
}
 8017232:	4618      	mov	r0, r3
 8017234:	3728      	adds	r7, #40	@ 0x28
 8017236:	46bd      	mov	sp, r7
 8017238:	bdb0      	pop	{r4, r5, r7, pc}
 801723a:	bf00      	nop

0801723c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b082      	sub	sp, #8
 8017240:	af00      	add	r7, sp, #0
 8017242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d106      	bne.n	8017258 <tcp_output_segment_busy+0x1c>
 801724a:	4b09      	ldr	r3, [pc, #36]	@ (8017270 <tcp_output_segment_busy+0x34>)
 801724c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8017250:	4908      	ldr	r1, [pc, #32]	@ (8017274 <tcp_output_segment_busy+0x38>)
 8017252:	4809      	ldr	r0, [pc, #36]	@ (8017278 <tcp_output_segment_busy+0x3c>)
 8017254:	f005 f806 	bl	801c264 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	685b      	ldr	r3, [r3, #4]
 801725c:	7b9b      	ldrb	r3, [r3, #14]
 801725e:	2b01      	cmp	r3, #1
 8017260:	d001      	beq.n	8017266 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017262:	2301      	movs	r3, #1
 8017264:	e000      	b.n	8017268 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017266:	2300      	movs	r3, #0
}
 8017268:	4618      	mov	r0, r3
 801726a:	3708      	adds	r7, #8
 801726c:	46bd      	mov	sp, r7
 801726e:	bd80      	pop	{r7, pc}
 8017270:	0801ec50 	.word	0x0801ec50
 8017274:	0801f1ec 	.word	0x0801f1ec
 8017278:	0801eca4 	.word	0x0801eca4

0801727c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801727c:	b5b0      	push	{r4, r5, r7, lr}
 801727e:	b08c      	sub	sp, #48	@ 0x30
 8017280:	af04      	add	r7, sp, #16
 8017282:	60f8      	str	r0, [r7, #12]
 8017284:	60b9      	str	r1, [r7, #8]
 8017286:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d106      	bne.n	801729c <tcp_output_segment+0x20>
 801728e:	4b64      	ldr	r3, [pc, #400]	@ (8017420 <tcp_output_segment+0x1a4>)
 8017290:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8017294:	4963      	ldr	r1, [pc, #396]	@ (8017424 <tcp_output_segment+0x1a8>)
 8017296:	4864      	ldr	r0, [pc, #400]	@ (8017428 <tcp_output_segment+0x1ac>)
 8017298:	f004 ffe4 	bl	801c264 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801729c:	68bb      	ldr	r3, [r7, #8]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d106      	bne.n	80172b0 <tcp_output_segment+0x34>
 80172a2:	4b5f      	ldr	r3, [pc, #380]	@ (8017420 <tcp_output_segment+0x1a4>)
 80172a4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80172a8:	4960      	ldr	r1, [pc, #384]	@ (801742c <tcp_output_segment+0x1b0>)
 80172aa:	485f      	ldr	r0, [pc, #380]	@ (8017428 <tcp_output_segment+0x1ac>)
 80172ac:	f004 ffda 	bl	801c264 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d106      	bne.n	80172c4 <tcp_output_segment+0x48>
 80172b6:	4b5a      	ldr	r3, [pc, #360]	@ (8017420 <tcp_output_segment+0x1a4>)
 80172b8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80172bc:	495c      	ldr	r1, [pc, #368]	@ (8017430 <tcp_output_segment+0x1b4>)
 80172be:	485a      	ldr	r0, [pc, #360]	@ (8017428 <tcp_output_segment+0x1ac>)
 80172c0:	f004 ffd0 	bl	801c264 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80172c4:	68f8      	ldr	r0, [r7, #12]
 80172c6:	f7ff ffb9 	bl	801723c <tcp_output_segment_busy>
 80172ca:	4603      	mov	r3, r0
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d001      	beq.n	80172d4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80172d0:	2300      	movs	r3, #0
 80172d2:	e0a1      	b.n	8017418 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80172d4:	68bb      	ldr	r3, [r7, #8]
 80172d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	68dc      	ldr	r4, [r3, #12]
 80172dc:	4610      	mov	r0, r2
 80172de:	f7f9 fd55 	bl	8010d8c <lwip_htonl>
 80172e2:	4603      	mov	r3, r0
 80172e4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80172e6:	68bb      	ldr	r3, [r7, #8]
 80172e8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	68dc      	ldr	r4, [r3, #12]
 80172ee:	4610      	mov	r0, r2
 80172f0:	f7f9 fd36 	bl	8010d60 <lwip_htons>
 80172f4:	4603      	mov	r3, r0
 80172f6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80172f8:	68bb      	ldr	r3, [r7, #8]
 80172fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172fc:	68ba      	ldr	r2, [r7, #8]
 80172fe:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017300:	441a      	add	r2, r3
 8017302:	68bb      	ldr	r3, [r7, #8]
 8017304:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	68db      	ldr	r3, [r3, #12]
 801730a:	3314      	adds	r3, #20
 801730c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	7a9b      	ldrb	r3, [r3, #10]
 8017312:	f003 0301 	and.w	r3, r3, #1
 8017316:	2b00      	cmp	r3, #0
 8017318:	d015      	beq.n	8017346 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801731a:	68bb      	ldr	r3, [r7, #8]
 801731c:	3304      	adds	r3, #4
 801731e:	461a      	mov	r2, r3
 8017320:	6879      	ldr	r1, [r7, #4]
 8017322:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8017326:	f7fc fe91 	bl	801404c <tcp_eff_send_mss_netif>
 801732a:	4603      	mov	r3, r0
 801732c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801732e:	8b7b      	ldrh	r3, [r7, #26]
 8017330:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8017334:	4618      	mov	r0, r3
 8017336:	f7f9 fd29 	bl	8010d8c <lwip_htonl>
 801733a:	4602      	mov	r2, r0
 801733c:	69fb      	ldr	r3, [r7, #28]
 801733e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017340:	69fb      	ldr	r3, [r7, #28]
 8017342:	3304      	adds	r3, #4
 8017344:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017346:	68bb      	ldr	r3, [r7, #8]
 8017348:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801734c:	2b00      	cmp	r3, #0
 801734e:	da02      	bge.n	8017356 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017350:	68bb      	ldr	r3, [r7, #8]
 8017352:	2200      	movs	r2, #0
 8017354:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8017356:	68bb      	ldr	r3, [r7, #8]
 8017358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801735a:	2b00      	cmp	r3, #0
 801735c:	d10c      	bne.n	8017378 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801735e:	4b35      	ldr	r3, [pc, #212]	@ (8017434 <tcp_output_segment+0x1b8>)
 8017360:	681a      	ldr	r2, [r3, #0]
 8017362:	68bb      	ldr	r3, [r7, #8]
 8017364:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	68db      	ldr	r3, [r3, #12]
 801736a:	685b      	ldr	r3, [r3, #4]
 801736c:	4618      	mov	r0, r3
 801736e:	f7f9 fd0d 	bl	8010d8c <lwip_htonl>
 8017372:	4602      	mov	r2, r0
 8017374:	68bb      	ldr	r3, [r7, #8]
 8017376:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	68da      	ldr	r2, [r3, #12]
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	685b      	ldr	r3, [r3, #4]
 8017380:	685b      	ldr	r3, [r3, #4]
 8017382:	1ad3      	subs	r3, r2, r3
 8017384:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	685b      	ldr	r3, [r3, #4]
 801738a:	8959      	ldrh	r1, [r3, #10]
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	685b      	ldr	r3, [r3, #4]
 8017390:	8b3a      	ldrh	r2, [r7, #24]
 8017392:	1a8a      	subs	r2, r1, r2
 8017394:	b292      	uxth	r2, r2
 8017396:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	685b      	ldr	r3, [r3, #4]
 801739c:	8919      	ldrh	r1, [r3, #8]
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	685b      	ldr	r3, [r3, #4]
 80173a2:	8b3a      	ldrh	r2, [r7, #24]
 80173a4:	1a8a      	subs	r2, r1, r2
 80173a6:	b292      	uxth	r2, r2
 80173a8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	685b      	ldr	r3, [r3, #4]
 80173ae:	68fa      	ldr	r2, [r7, #12]
 80173b0:	68d2      	ldr	r2, [r2, #12]
 80173b2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	68db      	ldr	r3, [r3, #12]
 80173b8:	2200      	movs	r2, #0
 80173ba:	741a      	strb	r2, [r3, #16]
 80173bc:	2200      	movs	r2, #0
 80173be:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	68da      	ldr	r2, [r3, #12]
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	7a9b      	ldrb	r3, [r3, #10]
 80173c8:	f003 0301 	and.w	r3, r3, #1
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d001      	beq.n	80173d4 <tcp_output_segment+0x158>
 80173d0:	2318      	movs	r3, #24
 80173d2:	e000      	b.n	80173d6 <tcp_output_segment+0x15a>
 80173d4:	2314      	movs	r3, #20
 80173d6:	4413      	add	r3, r2
 80173d8:	69fa      	ldr	r2, [r7, #28]
 80173da:	429a      	cmp	r2, r3
 80173dc:	d006      	beq.n	80173ec <tcp_output_segment+0x170>
 80173de:	4b10      	ldr	r3, [pc, #64]	@ (8017420 <tcp_output_segment+0x1a4>)
 80173e0:	f240 621c 	movw	r2, #1564	@ 0x61c
 80173e4:	4914      	ldr	r1, [pc, #80]	@ (8017438 <tcp_output_segment+0x1bc>)
 80173e6:	4810      	ldr	r0, [pc, #64]	@ (8017428 <tcp_output_segment+0x1ac>)
 80173e8:	f004 ff3c 	bl	801c264 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	6858      	ldr	r0, [r3, #4]
 80173f0:	68b9      	ldr	r1, [r7, #8]
 80173f2:	68bb      	ldr	r3, [r7, #8]
 80173f4:	1d1c      	adds	r4, r3, #4
 80173f6:	68bb      	ldr	r3, [r7, #8]
 80173f8:	7add      	ldrb	r5, [r3, #11]
 80173fa:	68bb      	ldr	r3, [r7, #8]
 80173fc:	7a9b      	ldrb	r3, [r3, #10]
 80173fe:	687a      	ldr	r2, [r7, #4]
 8017400:	9202      	str	r2, [sp, #8]
 8017402:	2206      	movs	r2, #6
 8017404:	9201      	str	r2, [sp, #4]
 8017406:	9300      	str	r3, [sp, #0]
 8017408:	462b      	mov	r3, r5
 801740a:	4622      	mov	r2, r4
 801740c:	f002 fd12 	bl	8019e34 <ip4_output_if>
 8017410:	4603      	mov	r3, r0
 8017412:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017414:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017418:	4618      	mov	r0, r3
 801741a:	3720      	adds	r7, #32
 801741c:	46bd      	mov	sp, r7
 801741e:	bdb0      	pop	{r4, r5, r7, pc}
 8017420:	0801ec50 	.word	0x0801ec50
 8017424:	0801f214 	.word	0x0801f214
 8017428:	0801eca4 	.word	0x0801eca4
 801742c:	0801f234 	.word	0x0801f234
 8017430:	0801f254 	.word	0x0801f254
 8017434:	2002757c 	.word	0x2002757c
 8017438:	0801f278 	.word	0x0801f278

0801743c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801743c:	b5b0      	push	{r4, r5, r7, lr}
 801743e:	b084      	sub	sp, #16
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d106      	bne.n	8017458 <tcp_rexmit_rto_prepare+0x1c>
 801744a:	4b31      	ldr	r3, [pc, #196]	@ (8017510 <tcp_rexmit_rto_prepare+0xd4>)
 801744c:	f240 6263 	movw	r2, #1635	@ 0x663
 8017450:	4930      	ldr	r1, [pc, #192]	@ (8017514 <tcp_rexmit_rto_prepare+0xd8>)
 8017452:	4831      	ldr	r0, [pc, #196]	@ (8017518 <tcp_rexmit_rto_prepare+0xdc>)
 8017454:	f004 ff06 	bl	801c264 <iprintf>

  if (pcb->unacked == NULL) {
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801745c:	2b00      	cmp	r3, #0
 801745e:	d102      	bne.n	8017466 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017460:	f06f 0305 	mvn.w	r3, #5
 8017464:	e050      	b.n	8017508 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801746a:	60fb      	str	r3, [r7, #12]
 801746c:	e00b      	b.n	8017486 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801746e:	68f8      	ldr	r0, [r7, #12]
 8017470:	f7ff fee4 	bl	801723c <tcp_output_segment_busy>
 8017474:	4603      	mov	r3, r0
 8017476:	2b00      	cmp	r3, #0
 8017478:	d002      	beq.n	8017480 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801747a:	f06f 0305 	mvn.w	r3, #5
 801747e:	e043      	b.n	8017508 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	60fb      	str	r3, [r7, #12]
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	2b00      	cmp	r3, #0
 801748c:	d1ef      	bne.n	801746e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801748e:	68f8      	ldr	r0, [r7, #12]
 8017490:	f7ff fed4 	bl	801723c <tcp_output_segment_busy>
 8017494:	4603      	mov	r3, r0
 8017496:	2b00      	cmp	r3, #0
 8017498:	d002      	beq.n	80174a0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801749a:	f06f 0305 	mvn.w	r3, #5
 801749e:	e033      	b.n	8017508 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	2200      	movs	r2, #0
 80174b4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	8b5b      	ldrh	r3, [r3, #26]
 80174ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80174be:	b29a      	uxth	r2, r3
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	68db      	ldr	r3, [r3, #12]
 80174c8:	685b      	ldr	r3, [r3, #4]
 80174ca:	4618      	mov	r0, r3
 80174cc:	f7f9 fc5e 	bl	8010d8c <lwip_htonl>
 80174d0:	4604      	mov	r4, r0
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	891b      	ldrh	r3, [r3, #8]
 80174d6:	461d      	mov	r5, r3
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	68db      	ldr	r3, [r3, #12]
 80174dc:	899b      	ldrh	r3, [r3, #12]
 80174de:	b29b      	uxth	r3, r3
 80174e0:	4618      	mov	r0, r3
 80174e2:	f7f9 fc3d 	bl	8010d60 <lwip_htons>
 80174e6:	4603      	mov	r3, r0
 80174e8:	b2db      	uxtb	r3, r3
 80174ea:	f003 0303 	and.w	r3, r3, #3
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d001      	beq.n	80174f6 <tcp_rexmit_rto_prepare+0xba>
 80174f2:	2301      	movs	r3, #1
 80174f4:	e000      	b.n	80174f8 <tcp_rexmit_rto_prepare+0xbc>
 80174f6:	2300      	movs	r3, #0
 80174f8:	442b      	add	r3, r5
 80174fa:	18e2      	adds	r2, r4, r3
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	2200      	movs	r2, #0
 8017504:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8017506:	2300      	movs	r3, #0
}
 8017508:	4618      	mov	r0, r3
 801750a:	3710      	adds	r7, #16
 801750c:	46bd      	mov	sp, r7
 801750e:	bdb0      	pop	{r4, r5, r7, pc}
 8017510:	0801ec50 	.word	0x0801ec50
 8017514:	0801f28c 	.word	0x0801f28c
 8017518:	0801eca4 	.word	0x0801eca4

0801751c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801751c:	b580      	push	{r7, lr}
 801751e:	b082      	sub	sp, #8
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d106      	bne.n	8017538 <tcp_rexmit_rto_commit+0x1c>
 801752a:	4b0d      	ldr	r3, [pc, #52]	@ (8017560 <tcp_rexmit_rto_commit+0x44>)
 801752c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8017530:	490c      	ldr	r1, [pc, #48]	@ (8017564 <tcp_rexmit_rto_commit+0x48>)
 8017532:	480d      	ldr	r0, [pc, #52]	@ (8017568 <tcp_rexmit_rto_commit+0x4c>)
 8017534:	f004 fe96 	bl	801c264 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801753e:	2bff      	cmp	r3, #255	@ 0xff
 8017540:	d007      	beq.n	8017552 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017548:	3301      	adds	r3, #1
 801754a:	b2da      	uxtb	r2, r3
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017552:	6878      	ldr	r0, [r7, #4]
 8017554:	f7ff fc7e 	bl	8016e54 <tcp_output>
}
 8017558:	bf00      	nop
 801755a:	3708      	adds	r7, #8
 801755c:	46bd      	mov	sp, r7
 801755e:	bd80      	pop	{r7, pc}
 8017560:	0801ec50 	.word	0x0801ec50
 8017564:	0801f2b0 	.word	0x0801f2b0
 8017568:	0801eca4 	.word	0x0801eca4

0801756c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801756c:	b580      	push	{r7, lr}
 801756e:	b082      	sub	sp, #8
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d106      	bne.n	8017588 <tcp_rexmit_rto+0x1c>
 801757a:	4b0a      	ldr	r3, [pc, #40]	@ (80175a4 <tcp_rexmit_rto+0x38>)
 801757c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8017580:	4909      	ldr	r1, [pc, #36]	@ (80175a8 <tcp_rexmit_rto+0x3c>)
 8017582:	480a      	ldr	r0, [pc, #40]	@ (80175ac <tcp_rexmit_rto+0x40>)
 8017584:	f004 fe6e 	bl	801c264 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017588:	6878      	ldr	r0, [r7, #4]
 801758a:	f7ff ff57 	bl	801743c <tcp_rexmit_rto_prepare>
 801758e:	4603      	mov	r3, r0
 8017590:	2b00      	cmp	r3, #0
 8017592:	d102      	bne.n	801759a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017594:	6878      	ldr	r0, [r7, #4]
 8017596:	f7ff ffc1 	bl	801751c <tcp_rexmit_rto_commit>
  }
}
 801759a:	bf00      	nop
 801759c:	3708      	adds	r7, #8
 801759e:	46bd      	mov	sp, r7
 80175a0:	bd80      	pop	{r7, pc}
 80175a2:	bf00      	nop
 80175a4:	0801ec50 	.word	0x0801ec50
 80175a8:	0801f2d4 	.word	0x0801f2d4
 80175ac:	0801eca4 	.word	0x0801eca4

080175b0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80175b0:	b590      	push	{r4, r7, lr}
 80175b2:	b085      	sub	sp, #20
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d106      	bne.n	80175cc <tcp_rexmit+0x1c>
 80175be:	4b2f      	ldr	r3, [pc, #188]	@ (801767c <tcp_rexmit+0xcc>)
 80175c0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80175c4:	492e      	ldr	r1, [pc, #184]	@ (8017680 <tcp_rexmit+0xd0>)
 80175c6:	482f      	ldr	r0, [pc, #188]	@ (8017684 <tcp_rexmit+0xd4>)
 80175c8:	f004 fe4c 	bl	801c264 <iprintf>

  if (pcb->unacked == NULL) {
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d102      	bne.n	80175da <tcp_rexmit+0x2a>
    return ERR_VAL;
 80175d4:	f06f 0305 	mvn.w	r3, #5
 80175d8:	e04c      	b.n	8017674 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175de:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80175e0:	68b8      	ldr	r0, [r7, #8]
 80175e2:	f7ff fe2b 	bl	801723c <tcp_output_segment_busy>
 80175e6:	4603      	mov	r3, r0
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d002      	beq.n	80175f2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80175ec:	f06f 0305 	mvn.w	r3, #5
 80175f0:	e040      	b.n	8017674 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80175f2:	68bb      	ldr	r3, [r7, #8]
 80175f4:	681a      	ldr	r2, [r3, #0]
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	336c      	adds	r3, #108	@ 0x6c
 80175fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017600:	e002      	b.n	8017608 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d011      	beq.n	8017634 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	68db      	ldr	r3, [r3, #12]
 8017616:	685b      	ldr	r3, [r3, #4]
 8017618:	4618      	mov	r0, r3
 801761a:	f7f9 fbb7 	bl	8010d8c <lwip_htonl>
 801761e:	4604      	mov	r4, r0
 8017620:	68bb      	ldr	r3, [r7, #8]
 8017622:	68db      	ldr	r3, [r3, #12]
 8017624:	685b      	ldr	r3, [r3, #4]
 8017626:	4618      	mov	r0, r3
 8017628:	f7f9 fbb0 	bl	8010d8c <lwip_htonl>
 801762c:	4603      	mov	r3, r0
 801762e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017630:	2b00      	cmp	r3, #0
 8017632:	dbe6      	blt.n	8017602 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	681a      	ldr	r2, [r3, #0]
 8017638:	68bb      	ldr	r3, [r7, #8]
 801763a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	68ba      	ldr	r2, [r7, #8]
 8017640:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017642:	68bb      	ldr	r3, [r7, #8]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d103      	bne.n	8017652 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	2200      	movs	r2, #0
 801764e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017658:	2bff      	cmp	r3, #255	@ 0xff
 801765a:	d007      	beq.n	801766c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017662:	3301      	adds	r3, #1
 8017664:	b2da      	uxtb	r2, r3
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	2200      	movs	r2, #0
 8017670:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017672:	2300      	movs	r3, #0
}
 8017674:	4618      	mov	r0, r3
 8017676:	3714      	adds	r7, #20
 8017678:	46bd      	mov	sp, r7
 801767a:	bd90      	pop	{r4, r7, pc}
 801767c:	0801ec50 	.word	0x0801ec50
 8017680:	0801f2f0 	.word	0x0801f2f0
 8017684:	0801eca4 	.word	0x0801eca4

08017688 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b082      	sub	sp, #8
 801768c:	af00      	add	r7, sp, #0
 801768e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d106      	bne.n	80176a4 <tcp_rexmit_fast+0x1c>
 8017696:	4b2a      	ldr	r3, [pc, #168]	@ (8017740 <tcp_rexmit_fast+0xb8>)
 8017698:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801769c:	4929      	ldr	r1, [pc, #164]	@ (8017744 <tcp_rexmit_fast+0xbc>)
 801769e:	482a      	ldr	r0, [pc, #168]	@ (8017748 <tcp_rexmit_fast+0xc0>)
 80176a0:	f004 fde0 	bl	801c264 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d045      	beq.n	8017738 <tcp_rexmit_fast+0xb0>
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	8b5b      	ldrh	r3, [r3, #26]
 80176b0:	f003 0304 	and.w	r3, r3, #4
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d13f      	bne.n	8017738 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80176b8:	6878      	ldr	r0, [r7, #4]
 80176ba:	f7ff ff79 	bl	80175b0 <tcp_rexmit>
 80176be:	4603      	mov	r3, r0
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d139      	bne.n	8017738 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80176d0:	4293      	cmp	r3, r2
 80176d2:	bf28      	it	cs
 80176d4:	4613      	movcs	r3, r2
 80176d6:	b29b      	uxth	r3, r3
 80176d8:	2b00      	cmp	r3, #0
 80176da:	da00      	bge.n	80176de <tcp_rexmit_fast+0x56>
 80176dc:	3301      	adds	r3, #1
 80176de:	105b      	asrs	r3, r3, #1
 80176e0:	b29a      	uxth	r2, r3
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80176ee:	461a      	mov	r2, r3
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80176f4:	005b      	lsls	r3, r3, #1
 80176f6:	429a      	cmp	r2, r3
 80176f8:	d206      	bcs.n	8017708 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80176fe:	005b      	lsls	r3, r3, #1
 8017700:	b29a      	uxth	r2, r3
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017712:	4619      	mov	r1, r3
 8017714:	0049      	lsls	r1, r1, #1
 8017716:	440b      	add	r3, r1
 8017718:	b29b      	uxth	r3, r3
 801771a:	4413      	add	r3, r2
 801771c:	b29a      	uxth	r2, r3
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	8b5b      	ldrh	r3, [r3, #26]
 8017728:	f043 0304 	orr.w	r3, r3, #4
 801772c:	b29a      	uxth	r2, r3
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	2200      	movs	r2, #0
 8017736:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8017738:	bf00      	nop
 801773a:	3708      	adds	r7, #8
 801773c:	46bd      	mov	sp, r7
 801773e:	bd80      	pop	{r7, pc}
 8017740:	0801ec50 	.word	0x0801ec50
 8017744:	0801f308 	.word	0x0801f308
 8017748:	0801eca4 	.word	0x0801eca4

0801774c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801774c:	b580      	push	{r7, lr}
 801774e:	b086      	sub	sp, #24
 8017750:	af00      	add	r7, sp, #0
 8017752:	60f8      	str	r0, [r7, #12]
 8017754:	607b      	str	r3, [r7, #4]
 8017756:	460b      	mov	r3, r1
 8017758:	817b      	strh	r3, [r7, #10]
 801775a:	4613      	mov	r3, r2
 801775c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801775e:	897a      	ldrh	r2, [r7, #10]
 8017760:	893b      	ldrh	r3, [r7, #8]
 8017762:	4413      	add	r3, r2
 8017764:	b29b      	uxth	r3, r3
 8017766:	3314      	adds	r3, #20
 8017768:	b29b      	uxth	r3, r3
 801776a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801776e:	4619      	mov	r1, r3
 8017770:	2022      	movs	r0, #34	@ 0x22
 8017772:	f7fa fbff 	bl	8011f74 <pbuf_alloc>
 8017776:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017778:	697b      	ldr	r3, [r7, #20]
 801777a:	2b00      	cmp	r3, #0
 801777c:	d04d      	beq.n	801781a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801777e:	897b      	ldrh	r3, [r7, #10]
 8017780:	3313      	adds	r3, #19
 8017782:	697a      	ldr	r2, [r7, #20]
 8017784:	8952      	ldrh	r2, [r2, #10]
 8017786:	4293      	cmp	r3, r2
 8017788:	db06      	blt.n	8017798 <tcp_output_alloc_header_common+0x4c>
 801778a:	4b26      	ldr	r3, [pc, #152]	@ (8017824 <tcp_output_alloc_header_common+0xd8>)
 801778c:	f240 7223 	movw	r2, #1827	@ 0x723
 8017790:	4925      	ldr	r1, [pc, #148]	@ (8017828 <tcp_output_alloc_header_common+0xdc>)
 8017792:	4826      	ldr	r0, [pc, #152]	@ (801782c <tcp_output_alloc_header_common+0xe0>)
 8017794:	f004 fd66 	bl	801c264 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017798:	697b      	ldr	r3, [r7, #20]
 801779a:	685b      	ldr	r3, [r3, #4]
 801779c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801779e:	8c3b      	ldrh	r3, [r7, #32]
 80177a0:	4618      	mov	r0, r3
 80177a2:	f7f9 fadd 	bl	8010d60 <lwip_htons>
 80177a6:	4603      	mov	r3, r0
 80177a8:	461a      	mov	r2, r3
 80177aa:	693b      	ldr	r3, [r7, #16]
 80177ac:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80177ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80177b0:	4618      	mov	r0, r3
 80177b2:	f7f9 fad5 	bl	8010d60 <lwip_htons>
 80177b6:	4603      	mov	r3, r0
 80177b8:	461a      	mov	r2, r3
 80177ba:	693b      	ldr	r3, [r7, #16]
 80177bc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80177be:	693b      	ldr	r3, [r7, #16]
 80177c0:	687a      	ldr	r2, [r7, #4]
 80177c2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80177c4:	68f8      	ldr	r0, [r7, #12]
 80177c6:	f7f9 fae1 	bl	8010d8c <lwip_htonl>
 80177ca:	4602      	mov	r2, r0
 80177cc:	693b      	ldr	r3, [r7, #16]
 80177ce:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80177d0:	897b      	ldrh	r3, [r7, #10]
 80177d2:	089b      	lsrs	r3, r3, #2
 80177d4:	b29b      	uxth	r3, r3
 80177d6:	3305      	adds	r3, #5
 80177d8:	b29b      	uxth	r3, r3
 80177da:	031b      	lsls	r3, r3, #12
 80177dc:	b29a      	uxth	r2, r3
 80177de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80177e2:	b29b      	uxth	r3, r3
 80177e4:	4313      	orrs	r3, r2
 80177e6:	b29b      	uxth	r3, r3
 80177e8:	4618      	mov	r0, r3
 80177ea:	f7f9 fab9 	bl	8010d60 <lwip_htons>
 80177ee:	4603      	mov	r3, r0
 80177f0:	461a      	mov	r2, r3
 80177f2:	693b      	ldr	r3, [r7, #16]
 80177f4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80177f6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7f9 fab1 	bl	8010d60 <lwip_htons>
 80177fe:	4603      	mov	r3, r0
 8017800:	461a      	mov	r2, r3
 8017802:	693b      	ldr	r3, [r7, #16]
 8017804:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017806:	693b      	ldr	r3, [r7, #16]
 8017808:	2200      	movs	r2, #0
 801780a:	741a      	strb	r2, [r3, #16]
 801780c:	2200      	movs	r2, #0
 801780e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017810:	693b      	ldr	r3, [r7, #16]
 8017812:	2200      	movs	r2, #0
 8017814:	749a      	strb	r2, [r3, #18]
 8017816:	2200      	movs	r2, #0
 8017818:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801781a:	697b      	ldr	r3, [r7, #20]
}
 801781c:	4618      	mov	r0, r3
 801781e:	3718      	adds	r7, #24
 8017820:	46bd      	mov	sp, r7
 8017822:	bd80      	pop	{r7, pc}
 8017824:	0801ec50 	.word	0x0801ec50
 8017828:	0801f328 	.word	0x0801f328
 801782c:	0801eca4 	.word	0x0801eca4

08017830 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017830:	b5b0      	push	{r4, r5, r7, lr}
 8017832:	b08a      	sub	sp, #40	@ 0x28
 8017834:	af04      	add	r7, sp, #16
 8017836:	60f8      	str	r0, [r7, #12]
 8017838:	607b      	str	r3, [r7, #4]
 801783a:	460b      	mov	r3, r1
 801783c:	817b      	strh	r3, [r7, #10]
 801783e:	4613      	mov	r3, r2
 8017840:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d106      	bne.n	8017856 <tcp_output_alloc_header+0x26>
 8017848:	4b15      	ldr	r3, [pc, #84]	@ (80178a0 <tcp_output_alloc_header+0x70>)
 801784a:	f240 7242 	movw	r2, #1858	@ 0x742
 801784e:	4915      	ldr	r1, [pc, #84]	@ (80178a4 <tcp_output_alloc_header+0x74>)
 8017850:	4815      	ldr	r0, [pc, #84]	@ (80178a8 <tcp_output_alloc_header+0x78>)
 8017852:	f004 fd07 	bl	801c264 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	8adb      	ldrh	r3, [r3, #22]
 801785e:	68fa      	ldr	r2, [r7, #12]
 8017860:	8b12      	ldrh	r2, [r2, #24]
 8017862:	68f9      	ldr	r1, [r7, #12]
 8017864:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8017866:	893d      	ldrh	r5, [r7, #8]
 8017868:	897c      	ldrh	r4, [r7, #10]
 801786a:	9103      	str	r1, [sp, #12]
 801786c:	2110      	movs	r1, #16
 801786e:	9102      	str	r1, [sp, #8]
 8017870:	9201      	str	r2, [sp, #4]
 8017872:	9300      	str	r3, [sp, #0]
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	462a      	mov	r2, r5
 8017878:	4621      	mov	r1, r4
 801787a:	f7ff ff67 	bl	801774c <tcp_output_alloc_header_common>
 801787e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017880:	697b      	ldr	r3, [r7, #20]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d006      	beq.n	8017894 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801788a:	68fa      	ldr	r2, [r7, #12]
 801788c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801788e:	441a      	add	r2, r3
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8017894:	697b      	ldr	r3, [r7, #20]
}
 8017896:	4618      	mov	r0, r3
 8017898:	3718      	adds	r7, #24
 801789a:	46bd      	mov	sp, r7
 801789c:	bdb0      	pop	{r4, r5, r7, pc}
 801789e:	bf00      	nop
 80178a0:	0801ec50 	.word	0x0801ec50
 80178a4:	0801f358 	.word	0x0801f358
 80178a8:	0801eca4 	.word	0x0801eca4

080178ac <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b088      	sub	sp, #32
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	60f8      	str	r0, [r7, #12]
 80178b4:	60b9      	str	r1, [r7, #8]
 80178b6:	4611      	mov	r1, r2
 80178b8:	461a      	mov	r2, r3
 80178ba:	460b      	mov	r3, r1
 80178bc:	71fb      	strb	r3, [r7, #7]
 80178be:	4613      	mov	r3, r2
 80178c0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80178c2:	2300      	movs	r3, #0
 80178c4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80178c6:	68bb      	ldr	r3, [r7, #8]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d106      	bne.n	80178da <tcp_output_fill_options+0x2e>
 80178cc:	4b12      	ldr	r3, [pc, #72]	@ (8017918 <tcp_output_fill_options+0x6c>)
 80178ce:	f240 7256 	movw	r2, #1878	@ 0x756
 80178d2:	4912      	ldr	r1, [pc, #72]	@ (801791c <tcp_output_fill_options+0x70>)
 80178d4:	4812      	ldr	r0, [pc, #72]	@ (8017920 <tcp_output_fill_options+0x74>)
 80178d6:	f004 fcc5 	bl	801c264 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80178da:	68bb      	ldr	r3, [r7, #8]
 80178dc:	685b      	ldr	r3, [r3, #4]
 80178de:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80178e0:	69bb      	ldr	r3, [r7, #24]
 80178e2:	3314      	adds	r3, #20
 80178e4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80178e6:	8bfb      	ldrh	r3, [r7, #30]
 80178e8:	009b      	lsls	r3, r3, #2
 80178ea:	461a      	mov	r2, r3
 80178ec:	79fb      	ldrb	r3, [r7, #7]
 80178ee:	009b      	lsls	r3, r3, #2
 80178f0:	f003 0304 	and.w	r3, r3, #4
 80178f4:	4413      	add	r3, r2
 80178f6:	3314      	adds	r3, #20
 80178f8:	69ba      	ldr	r2, [r7, #24]
 80178fa:	4413      	add	r3, r2
 80178fc:	697a      	ldr	r2, [r7, #20]
 80178fe:	429a      	cmp	r2, r3
 8017900:	d006      	beq.n	8017910 <tcp_output_fill_options+0x64>
 8017902:	4b05      	ldr	r3, [pc, #20]	@ (8017918 <tcp_output_fill_options+0x6c>)
 8017904:	f240 7275 	movw	r2, #1909	@ 0x775
 8017908:	4906      	ldr	r1, [pc, #24]	@ (8017924 <tcp_output_fill_options+0x78>)
 801790a:	4805      	ldr	r0, [pc, #20]	@ (8017920 <tcp_output_fill_options+0x74>)
 801790c:	f004 fcaa 	bl	801c264 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017910:	bf00      	nop
 8017912:	3720      	adds	r7, #32
 8017914:	46bd      	mov	sp, r7
 8017916:	bd80      	pop	{r7, pc}
 8017918:	0801ec50 	.word	0x0801ec50
 801791c:	0801f380 	.word	0x0801f380
 8017920:	0801eca4 	.word	0x0801eca4
 8017924:	0801f278 	.word	0x0801f278

08017928 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b08a      	sub	sp, #40	@ 0x28
 801792c:	af04      	add	r7, sp, #16
 801792e:	60f8      	str	r0, [r7, #12]
 8017930:	60b9      	str	r1, [r7, #8]
 8017932:	607a      	str	r2, [r7, #4]
 8017934:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017936:	68bb      	ldr	r3, [r7, #8]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d106      	bne.n	801794a <tcp_output_control_segment+0x22>
 801793c:	4b1c      	ldr	r3, [pc, #112]	@ (80179b0 <tcp_output_control_segment+0x88>)
 801793e:	f240 7287 	movw	r2, #1927	@ 0x787
 8017942:	491c      	ldr	r1, [pc, #112]	@ (80179b4 <tcp_output_control_segment+0x8c>)
 8017944:	481c      	ldr	r0, [pc, #112]	@ (80179b8 <tcp_output_control_segment+0x90>)
 8017946:	f004 fc8d 	bl	801c264 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801794a:	683a      	ldr	r2, [r7, #0]
 801794c:	6879      	ldr	r1, [r7, #4]
 801794e:	68f8      	ldr	r0, [r7, #12]
 8017950:	f7fe ff42 	bl	80167d8 <tcp_route>
 8017954:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017956:	693b      	ldr	r3, [r7, #16]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d102      	bne.n	8017962 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801795c:	23fc      	movs	r3, #252	@ 0xfc
 801795e:	75fb      	strb	r3, [r7, #23]
 8017960:	e01c      	b.n	801799c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d006      	beq.n	8017976 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	7adb      	ldrb	r3, [r3, #11]
 801796c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	7a9b      	ldrb	r3, [r3, #10]
 8017972:	757b      	strb	r3, [r7, #21]
 8017974:	e003      	b.n	801797e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017976:	23ff      	movs	r3, #255	@ 0xff
 8017978:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801797a:	2300      	movs	r3, #0
 801797c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801797e:	7dba      	ldrb	r2, [r7, #22]
 8017980:	693b      	ldr	r3, [r7, #16]
 8017982:	9302      	str	r3, [sp, #8]
 8017984:	2306      	movs	r3, #6
 8017986:	9301      	str	r3, [sp, #4]
 8017988:	7d7b      	ldrb	r3, [r7, #21]
 801798a:	9300      	str	r3, [sp, #0]
 801798c:	4613      	mov	r3, r2
 801798e:	683a      	ldr	r2, [r7, #0]
 8017990:	6879      	ldr	r1, [r7, #4]
 8017992:	68b8      	ldr	r0, [r7, #8]
 8017994:	f002 fa4e 	bl	8019e34 <ip4_output_if>
 8017998:	4603      	mov	r3, r0
 801799a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801799c:	68b8      	ldr	r0, [r7, #8]
 801799e:	f7fa fdcd 	bl	801253c <pbuf_free>
  return err;
 80179a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80179a6:	4618      	mov	r0, r3
 80179a8:	3718      	adds	r7, #24
 80179aa:	46bd      	mov	sp, r7
 80179ac:	bd80      	pop	{r7, pc}
 80179ae:	bf00      	nop
 80179b0:	0801ec50 	.word	0x0801ec50
 80179b4:	0801f3a8 	.word	0x0801f3a8
 80179b8:	0801eca4 	.word	0x0801eca4

080179bc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80179bc:	b590      	push	{r4, r7, lr}
 80179be:	b08b      	sub	sp, #44	@ 0x2c
 80179c0:	af04      	add	r7, sp, #16
 80179c2:	60f8      	str	r0, [r7, #12]
 80179c4:	60b9      	str	r1, [r7, #8]
 80179c6:	607a      	str	r2, [r7, #4]
 80179c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80179ca:	683b      	ldr	r3, [r7, #0]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d106      	bne.n	80179de <tcp_rst+0x22>
 80179d0:	4b1f      	ldr	r3, [pc, #124]	@ (8017a50 <tcp_rst+0x94>)
 80179d2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80179d6:	491f      	ldr	r1, [pc, #124]	@ (8017a54 <tcp_rst+0x98>)
 80179d8:	481f      	ldr	r0, [pc, #124]	@ (8017a58 <tcp_rst+0x9c>)
 80179da:	f004 fc43 	bl	801c264 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80179de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d106      	bne.n	80179f2 <tcp_rst+0x36>
 80179e4:	4b1a      	ldr	r3, [pc, #104]	@ (8017a50 <tcp_rst+0x94>)
 80179e6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80179ea:	491c      	ldr	r1, [pc, #112]	@ (8017a5c <tcp_rst+0xa0>)
 80179ec:	481a      	ldr	r0, [pc, #104]	@ (8017a58 <tcp_rst+0x9c>)
 80179ee:	f004 fc39 	bl	801c264 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80179f2:	2300      	movs	r3, #0
 80179f4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80179f6:	f246 0308 	movw	r3, #24584	@ 0x6008
 80179fa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80179fc:	7dfb      	ldrb	r3, [r7, #23]
 80179fe:	b29c      	uxth	r4, r3
 8017a00:	68b8      	ldr	r0, [r7, #8]
 8017a02:	f7f9 f9c3 	bl	8010d8c <lwip_htonl>
 8017a06:	4602      	mov	r2, r0
 8017a08:	8abb      	ldrh	r3, [r7, #20]
 8017a0a:	9303      	str	r3, [sp, #12]
 8017a0c:	2314      	movs	r3, #20
 8017a0e:	9302      	str	r3, [sp, #8]
 8017a10:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017a12:	9301      	str	r3, [sp, #4]
 8017a14:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017a16:	9300      	str	r3, [sp, #0]
 8017a18:	4613      	mov	r3, r2
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	4621      	mov	r1, r4
 8017a1e:	6878      	ldr	r0, [r7, #4]
 8017a20:	f7ff fe94 	bl	801774c <tcp_output_alloc_header_common>
 8017a24:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017a26:	693b      	ldr	r3, [r7, #16]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d00c      	beq.n	8017a46 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017a2c:	7dfb      	ldrb	r3, [r7, #23]
 8017a2e:	2200      	movs	r2, #0
 8017a30:	6939      	ldr	r1, [r7, #16]
 8017a32:	68f8      	ldr	r0, [r7, #12]
 8017a34:	f7ff ff3a 	bl	80178ac <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a3a:	683a      	ldr	r2, [r7, #0]
 8017a3c:	6939      	ldr	r1, [r7, #16]
 8017a3e:	68f8      	ldr	r0, [r7, #12]
 8017a40:	f7ff ff72 	bl	8017928 <tcp_output_control_segment>
 8017a44:	e000      	b.n	8017a48 <tcp_rst+0x8c>
    return;
 8017a46:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017a48:	371c      	adds	r7, #28
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bd90      	pop	{r4, r7, pc}
 8017a4e:	bf00      	nop
 8017a50:	0801ec50 	.word	0x0801ec50
 8017a54:	0801f3d4 	.word	0x0801f3d4
 8017a58:	0801eca4 	.word	0x0801eca4
 8017a5c:	0801f3f0 	.word	0x0801f3f0

08017a60 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017a60:	b590      	push	{r4, r7, lr}
 8017a62:	b087      	sub	sp, #28
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017a68:	2300      	movs	r3, #0
 8017a6a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017a6c:	2300      	movs	r3, #0
 8017a6e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d106      	bne.n	8017a84 <tcp_send_empty_ack+0x24>
 8017a76:	4b28      	ldr	r3, [pc, #160]	@ (8017b18 <tcp_send_empty_ack+0xb8>)
 8017a78:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8017a7c:	4927      	ldr	r1, [pc, #156]	@ (8017b1c <tcp_send_empty_ack+0xbc>)
 8017a7e:	4828      	ldr	r0, [pc, #160]	@ (8017b20 <tcp_send_empty_ack+0xc0>)
 8017a80:	f004 fbf0 	bl	801c264 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017a84:	7dfb      	ldrb	r3, [r7, #23]
 8017a86:	009b      	lsls	r3, r3, #2
 8017a88:	b2db      	uxtb	r3, r3
 8017a8a:	f003 0304 	and.w	r3, r3, #4
 8017a8e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017a90:	7d7b      	ldrb	r3, [r7, #21]
 8017a92:	b29c      	uxth	r4, r3
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f7f9 f977 	bl	8010d8c <lwip_htonl>
 8017a9e:	4603      	mov	r3, r0
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	4621      	mov	r1, r4
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	f7ff fec3 	bl	8017830 <tcp_output_alloc_header>
 8017aaa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017aac:	693b      	ldr	r3, [r7, #16]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d109      	bne.n	8017ac6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	8b5b      	ldrh	r3, [r3, #26]
 8017ab6:	f043 0303 	orr.w	r3, r3, #3
 8017aba:	b29a      	uxth	r2, r3
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017ac0:	f06f 0301 	mvn.w	r3, #1
 8017ac4:	e023      	b.n	8017b0e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017ac6:	7dbb      	ldrb	r3, [r7, #22]
 8017ac8:	7dfa      	ldrb	r2, [r7, #23]
 8017aca:	6939      	ldr	r1, [r7, #16]
 8017acc:	6878      	ldr	r0, [r7, #4]
 8017ace:	f7ff feed 	bl	80178ac <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017ad2:	687a      	ldr	r2, [r7, #4]
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	3304      	adds	r3, #4
 8017ad8:	6939      	ldr	r1, [r7, #16]
 8017ada:	6878      	ldr	r0, [r7, #4]
 8017adc:	f7ff ff24 	bl	8017928 <tcp_output_control_segment>
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d007      	beq.n	8017afc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	8b5b      	ldrh	r3, [r3, #26]
 8017af0:	f043 0303 	orr.w	r3, r3, #3
 8017af4:	b29a      	uxth	r2, r3
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	835a      	strh	r2, [r3, #26]
 8017afa:	e006      	b.n	8017b0a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	8b5b      	ldrh	r3, [r3, #26]
 8017b00:	f023 0303 	bic.w	r3, r3, #3
 8017b04:	b29a      	uxth	r2, r3
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017b0e:	4618      	mov	r0, r3
 8017b10:	371c      	adds	r7, #28
 8017b12:	46bd      	mov	sp, r7
 8017b14:	bd90      	pop	{r4, r7, pc}
 8017b16:	bf00      	nop
 8017b18:	0801ec50 	.word	0x0801ec50
 8017b1c:	0801f40c 	.word	0x0801f40c
 8017b20:	0801eca4 	.word	0x0801eca4

08017b24 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017b24:	b590      	push	{r4, r7, lr}
 8017b26:	b087      	sub	sp, #28
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d106      	bne.n	8017b44 <tcp_keepalive+0x20>
 8017b36:	4b18      	ldr	r3, [pc, #96]	@ (8017b98 <tcp_keepalive+0x74>)
 8017b38:	f640 0224 	movw	r2, #2084	@ 0x824
 8017b3c:	4917      	ldr	r1, [pc, #92]	@ (8017b9c <tcp_keepalive+0x78>)
 8017b3e:	4818      	ldr	r0, [pc, #96]	@ (8017ba0 <tcp_keepalive+0x7c>)
 8017b40:	f004 fb90 	bl	801c264 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017b44:	7dfb      	ldrb	r3, [r7, #23]
 8017b46:	b29c      	uxth	r4, r3
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017b4c:	3b01      	subs	r3, #1
 8017b4e:	4618      	mov	r0, r3
 8017b50:	f7f9 f91c 	bl	8010d8c <lwip_htonl>
 8017b54:	4603      	mov	r3, r0
 8017b56:	2200      	movs	r2, #0
 8017b58:	4621      	mov	r1, r4
 8017b5a:	6878      	ldr	r0, [r7, #4]
 8017b5c:	f7ff fe68 	bl	8017830 <tcp_output_alloc_header>
 8017b60:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017b62:	693b      	ldr	r3, [r7, #16]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d102      	bne.n	8017b6e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017b68:	f04f 33ff 	mov.w	r3, #4294967295
 8017b6c:	e010      	b.n	8017b90 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017b6e:	7dfb      	ldrb	r3, [r7, #23]
 8017b70:	2200      	movs	r2, #0
 8017b72:	6939      	ldr	r1, [r7, #16]
 8017b74:	6878      	ldr	r0, [r7, #4]
 8017b76:	f7ff fe99 	bl	80178ac <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017b7a:	687a      	ldr	r2, [r7, #4]
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	3304      	adds	r3, #4
 8017b80:	6939      	ldr	r1, [r7, #16]
 8017b82:	6878      	ldr	r0, [r7, #4]
 8017b84:	f7ff fed0 	bl	8017928 <tcp_output_control_segment>
 8017b88:	4603      	mov	r3, r0
 8017b8a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017b90:	4618      	mov	r0, r3
 8017b92:	371c      	adds	r7, #28
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd90      	pop	{r4, r7, pc}
 8017b98:	0801ec50 	.word	0x0801ec50
 8017b9c:	0801f42c 	.word	0x0801f42c
 8017ba0:	0801eca4 	.word	0x0801eca4

08017ba4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017ba4:	b590      	push	{r4, r7, lr}
 8017ba6:	b08b      	sub	sp, #44	@ 0x2c
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017bac:	2300      	movs	r3, #0
 8017bae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d106      	bne.n	8017bc6 <tcp_zero_window_probe+0x22>
 8017bb8:	4b4c      	ldr	r3, [pc, #304]	@ (8017cec <tcp_zero_window_probe+0x148>)
 8017bba:	f640 024f 	movw	r2, #2127	@ 0x84f
 8017bbe:	494c      	ldr	r1, [pc, #304]	@ (8017cf0 <tcp_zero_window_probe+0x14c>)
 8017bc0:	484c      	ldr	r0, [pc, #304]	@ (8017cf4 <tcp_zero_window_probe+0x150>)
 8017bc2:	f004 fb4f 	bl	801c264 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017bca:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017bcc:	6a3b      	ldr	r3, [r7, #32]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d101      	bne.n	8017bd6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	e086      	b.n	8017ce4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017bdc:	2bff      	cmp	r3, #255	@ 0xff
 8017bde:	d007      	beq.n	8017bf0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017be6:	3301      	adds	r3, #1
 8017be8:	b2da      	uxtb	r2, r3
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017bf0:	6a3b      	ldr	r3, [r7, #32]
 8017bf2:	68db      	ldr	r3, [r3, #12]
 8017bf4:	899b      	ldrh	r3, [r3, #12]
 8017bf6:	b29b      	uxth	r3, r3
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	f7f9 f8b1 	bl	8010d60 <lwip_htons>
 8017bfe:	4603      	mov	r3, r0
 8017c00:	b2db      	uxtb	r3, r3
 8017c02:	f003 0301 	and.w	r3, r3, #1
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d005      	beq.n	8017c16 <tcp_zero_window_probe+0x72>
 8017c0a:	6a3b      	ldr	r3, [r7, #32]
 8017c0c:	891b      	ldrh	r3, [r3, #8]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d101      	bne.n	8017c16 <tcp_zero_window_probe+0x72>
 8017c12:	2301      	movs	r3, #1
 8017c14:	e000      	b.n	8017c18 <tcp_zero_window_probe+0x74>
 8017c16:	2300      	movs	r3, #0
 8017c18:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017c1a:	7ffb      	ldrb	r3, [r7, #31]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	bf0c      	ite	eq
 8017c20:	2301      	moveq	r3, #1
 8017c22:	2300      	movne	r3, #0
 8017c24:	b2db      	uxtb	r3, r3
 8017c26:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017c28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017c2c:	b299      	uxth	r1, r3
 8017c2e:	6a3b      	ldr	r3, [r7, #32]
 8017c30:	68db      	ldr	r3, [r3, #12]
 8017c32:	685b      	ldr	r3, [r3, #4]
 8017c34:	8bba      	ldrh	r2, [r7, #28]
 8017c36:	6878      	ldr	r0, [r7, #4]
 8017c38:	f7ff fdfa 	bl	8017830 <tcp_output_alloc_header>
 8017c3c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017c3e:	69bb      	ldr	r3, [r7, #24]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d102      	bne.n	8017c4a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017c44:	f04f 33ff 	mov.w	r3, #4294967295
 8017c48:	e04c      	b.n	8017ce4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017c4a:	69bb      	ldr	r3, [r7, #24]
 8017c4c:	685b      	ldr	r3, [r3, #4]
 8017c4e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017c50:	7ffb      	ldrb	r3, [r7, #31]
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d011      	beq.n	8017c7a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017c56:	697b      	ldr	r3, [r7, #20]
 8017c58:	899b      	ldrh	r3, [r3, #12]
 8017c5a:	b29b      	uxth	r3, r3
 8017c5c:	b21b      	sxth	r3, r3
 8017c5e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017c62:	b21c      	sxth	r4, r3
 8017c64:	2011      	movs	r0, #17
 8017c66:	f7f9 f87b 	bl	8010d60 <lwip_htons>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	b21b      	sxth	r3, r3
 8017c6e:	4323      	orrs	r3, r4
 8017c70:	b21b      	sxth	r3, r3
 8017c72:	b29a      	uxth	r2, r3
 8017c74:	697b      	ldr	r3, [r7, #20]
 8017c76:	819a      	strh	r2, [r3, #12]
 8017c78:	e010      	b.n	8017c9c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017c7a:	69bb      	ldr	r3, [r7, #24]
 8017c7c:	685b      	ldr	r3, [r3, #4]
 8017c7e:	3314      	adds	r3, #20
 8017c80:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017c82:	6a3b      	ldr	r3, [r7, #32]
 8017c84:	6858      	ldr	r0, [r3, #4]
 8017c86:	6a3b      	ldr	r3, [r7, #32]
 8017c88:	685b      	ldr	r3, [r3, #4]
 8017c8a:	891a      	ldrh	r2, [r3, #8]
 8017c8c:	6a3b      	ldr	r3, [r7, #32]
 8017c8e:	891b      	ldrh	r3, [r3, #8]
 8017c90:	1ad3      	subs	r3, r2, r3
 8017c92:	b29b      	uxth	r3, r3
 8017c94:	2201      	movs	r2, #1
 8017c96:	6939      	ldr	r1, [r7, #16]
 8017c98:	f7fa fe56 	bl	8012948 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017c9c:	6a3b      	ldr	r3, [r7, #32]
 8017c9e:	68db      	ldr	r3, [r3, #12]
 8017ca0:	685b      	ldr	r3, [r3, #4]
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	f7f9 f872 	bl	8010d8c <lwip_htonl>
 8017ca8:	4603      	mov	r3, r0
 8017caa:	3301      	adds	r3, #1
 8017cac:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	1ad3      	subs	r3, r2, r3
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	da02      	bge.n	8017cc0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	68fa      	ldr	r2, [r7, #12]
 8017cbe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	69b9      	ldr	r1, [r7, #24]
 8017cc8:	6878      	ldr	r0, [r7, #4]
 8017cca:	f7ff fdef 	bl	80178ac <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017cce:	687a      	ldr	r2, [r7, #4]
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	3304      	adds	r3, #4
 8017cd4:	69b9      	ldr	r1, [r7, #24]
 8017cd6:	6878      	ldr	r0, [r7, #4]
 8017cd8:	f7ff fe26 	bl	8017928 <tcp_output_control_segment>
 8017cdc:	4603      	mov	r3, r0
 8017cde:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017ce0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	372c      	adds	r7, #44	@ 0x2c
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	bd90      	pop	{r4, r7, pc}
 8017cec:	0801ec50 	.word	0x0801ec50
 8017cf0:	0801f448 	.word	0x0801f448
 8017cf4:	0801eca4 	.word	0x0801eca4

08017cf8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b082      	sub	sp, #8
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017d00:	f7fa ff10 	bl	8012b24 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017d04:	4b0a      	ldr	r3, [pc, #40]	@ (8017d30 <tcpip_tcp_timer+0x38>)
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d103      	bne.n	8017d14 <tcpip_tcp_timer+0x1c>
 8017d0c:	4b09      	ldr	r3, [pc, #36]	@ (8017d34 <tcpip_tcp_timer+0x3c>)
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d005      	beq.n	8017d20 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017d14:	2200      	movs	r2, #0
 8017d16:	4908      	ldr	r1, [pc, #32]	@ (8017d38 <tcpip_tcp_timer+0x40>)
 8017d18:	20fa      	movs	r0, #250	@ 0xfa
 8017d1a:	f000 f8f3 	bl	8017f04 <sys_timeout>
 8017d1e:	e003      	b.n	8017d28 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017d20:	4b06      	ldr	r3, [pc, #24]	@ (8017d3c <tcpip_tcp_timer+0x44>)
 8017d22:	2200      	movs	r2, #0
 8017d24:	601a      	str	r2, [r3, #0]
  }
}
 8017d26:	bf00      	nop
 8017d28:	bf00      	nop
 8017d2a:	3708      	adds	r7, #8
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	bd80      	pop	{r7, pc}
 8017d30:	20027588 	.word	0x20027588
 8017d34:	2002758c 	.word	0x2002758c
 8017d38:	08017cf9 	.word	0x08017cf9
 8017d3c:	200275d4 	.word	0x200275d4

08017d40 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017d44:	4b0a      	ldr	r3, [pc, #40]	@ (8017d70 <tcp_timer_needed+0x30>)
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d10f      	bne.n	8017d6c <tcp_timer_needed+0x2c>
 8017d4c:	4b09      	ldr	r3, [pc, #36]	@ (8017d74 <tcp_timer_needed+0x34>)
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d103      	bne.n	8017d5c <tcp_timer_needed+0x1c>
 8017d54:	4b08      	ldr	r3, [pc, #32]	@ (8017d78 <tcp_timer_needed+0x38>)
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d007      	beq.n	8017d6c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017d5c:	4b04      	ldr	r3, [pc, #16]	@ (8017d70 <tcp_timer_needed+0x30>)
 8017d5e:	2201      	movs	r2, #1
 8017d60:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017d62:	2200      	movs	r2, #0
 8017d64:	4905      	ldr	r1, [pc, #20]	@ (8017d7c <tcp_timer_needed+0x3c>)
 8017d66:	20fa      	movs	r0, #250	@ 0xfa
 8017d68:	f000 f8cc 	bl	8017f04 <sys_timeout>
  }
}
 8017d6c:	bf00      	nop
 8017d6e:	bd80      	pop	{r7, pc}
 8017d70:	200275d4 	.word	0x200275d4
 8017d74:	20027588 	.word	0x20027588
 8017d78:	2002758c 	.word	0x2002758c
 8017d7c:	08017cf9 	.word	0x08017cf9

08017d80 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b086      	sub	sp, #24
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	60f8      	str	r0, [r7, #12]
 8017d88:	60b9      	str	r1, [r7, #8]
 8017d8a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017d8c:	200a      	movs	r0, #10
 8017d8e:	f7f9 fcbb 	bl	8011708 <memp_malloc>
 8017d92:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017d94:	693b      	ldr	r3, [r7, #16]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d109      	bne.n	8017dae <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017d9a:	693b      	ldr	r3, [r7, #16]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d151      	bne.n	8017e44 <sys_timeout_abs+0xc4>
 8017da0:	4b2a      	ldr	r3, [pc, #168]	@ (8017e4c <sys_timeout_abs+0xcc>)
 8017da2:	22be      	movs	r2, #190	@ 0xbe
 8017da4:	492a      	ldr	r1, [pc, #168]	@ (8017e50 <sys_timeout_abs+0xd0>)
 8017da6:	482b      	ldr	r0, [pc, #172]	@ (8017e54 <sys_timeout_abs+0xd4>)
 8017da8:	f004 fa5c 	bl	801c264 <iprintf>
    return;
 8017dac:	e04a      	b.n	8017e44 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017dae:	693b      	ldr	r3, [r7, #16]
 8017db0:	2200      	movs	r2, #0
 8017db2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017db4:	693b      	ldr	r3, [r7, #16]
 8017db6:	68ba      	ldr	r2, [r7, #8]
 8017db8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017dba:	693b      	ldr	r3, [r7, #16]
 8017dbc:	687a      	ldr	r2, [r7, #4]
 8017dbe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017dc0:	693b      	ldr	r3, [r7, #16]
 8017dc2:	68fa      	ldr	r2, [r7, #12]
 8017dc4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017dc6:	4b24      	ldr	r3, [pc, #144]	@ (8017e58 <sys_timeout_abs+0xd8>)
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d103      	bne.n	8017dd6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017dce:	4a22      	ldr	r2, [pc, #136]	@ (8017e58 <sys_timeout_abs+0xd8>)
 8017dd0:	693b      	ldr	r3, [r7, #16]
 8017dd2:	6013      	str	r3, [r2, #0]
    return;
 8017dd4:	e037      	b.n	8017e46 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017dd6:	693b      	ldr	r3, [r7, #16]
 8017dd8:	685a      	ldr	r2, [r3, #4]
 8017dda:	4b1f      	ldr	r3, [pc, #124]	@ (8017e58 <sys_timeout_abs+0xd8>)
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	685b      	ldr	r3, [r3, #4]
 8017de0:	1ad3      	subs	r3, r2, r3
 8017de2:	0fdb      	lsrs	r3, r3, #31
 8017de4:	f003 0301 	and.w	r3, r3, #1
 8017de8:	b2db      	uxtb	r3, r3
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d007      	beq.n	8017dfe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017dee:	4b1a      	ldr	r3, [pc, #104]	@ (8017e58 <sys_timeout_abs+0xd8>)
 8017df0:	681a      	ldr	r2, [r3, #0]
 8017df2:	693b      	ldr	r3, [r7, #16]
 8017df4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017df6:	4a18      	ldr	r2, [pc, #96]	@ (8017e58 <sys_timeout_abs+0xd8>)
 8017df8:	693b      	ldr	r3, [r7, #16]
 8017dfa:	6013      	str	r3, [r2, #0]
 8017dfc:	e023      	b.n	8017e46 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017dfe:	4b16      	ldr	r3, [pc, #88]	@ (8017e58 <sys_timeout_abs+0xd8>)
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	617b      	str	r3, [r7, #20]
 8017e04:	e01a      	b.n	8017e3c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017e06:	697b      	ldr	r3, [r7, #20]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d00b      	beq.n	8017e26 <sys_timeout_abs+0xa6>
 8017e0e:	693b      	ldr	r3, [r7, #16]
 8017e10:	685a      	ldr	r2, [r3, #4]
 8017e12:	697b      	ldr	r3, [r7, #20]
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	685b      	ldr	r3, [r3, #4]
 8017e18:	1ad3      	subs	r3, r2, r3
 8017e1a:	0fdb      	lsrs	r3, r3, #31
 8017e1c:	f003 0301 	and.w	r3, r3, #1
 8017e20:	b2db      	uxtb	r3, r3
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d007      	beq.n	8017e36 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017e26:	697b      	ldr	r3, [r7, #20]
 8017e28:	681a      	ldr	r2, [r3, #0]
 8017e2a:	693b      	ldr	r3, [r7, #16]
 8017e2c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017e2e:	697b      	ldr	r3, [r7, #20]
 8017e30:	693a      	ldr	r2, [r7, #16]
 8017e32:	601a      	str	r2, [r3, #0]
        break;
 8017e34:	e007      	b.n	8017e46 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017e36:	697b      	ldr	r3, [r7, #20]
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	617b      	str	r3, [r7, #20]
 8017e3c:	697b      	ldr	r3, [r7, #20]
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d1e1      	bne.n	8017e06 <sys_timeout_abs+0x86>
 8017e42:	e000      	b.n	8017e46 <sys_timeout_abs+0xc6>
    return;
 8017e44:	bf00      	nop
      }
    }
  }
}
 8017e46:	3718      	adds	r7, #24
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	bd80      	pop	{r7, pc}
 8017e4c:	0801f46c 	.word	0x0801f46c
 8017e50:	0801f4a0 	.word	0x0801f4a0
 8017e54:	0801f4e0 	.word	0x0801f4e0
 8017e58:	200275cc 	.word	0x200275cc

08017e5c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b086      	sub	sp, #24
 8017e60:	af00      	add	r7, sp, #0
 8017e62:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017e68:	697b      	ldr	r3, [r7, #20]
 8017e6a:	685b      	ldr	r3, [r3, #4]
 8017e6c:	4798      	blx	r3

  now = sys_now();
 8017e6e:	f7f4 facf 	bl	800c410 <sys_now>
 8017e72:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017e74:	697b      	ldr	r3, [r7, #20]
 8017e76:	681a      	ldr	r2, [r3, #0]
 8017e78:	4b0f      	ldr	r3, [pc, #60]	@ (8017eb8 <lwip_cyclic_timer+0x5c>)
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	4413      	add	r3, r2
 8017e7e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017e80:	68fa      	ldr	r2, [r7, #12]
 8017e82:	693b      	ldr	r3, [r7, #16]
 8017e84:	1ad3      	subs	r3, r2, r3
 8017e86:	0fdb      	lsrs	r3, r3, #31
 8017e88:	f003 0301 	and.w	r3, r3, #1
 8017e8c:	b2db      	uxtb	r3, r3
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d009      	beq.n	8017ea6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017e92:	697b      	ldr	r3, [r7, #20]
 8017e94:	681a      	ldr	r2, [r3, #0]
 8017e96:	693b      	ldr	r3, [r7, #16]
 8017e98:	4413      	add	r3, r2
 8017e9a:	687a      	ldr	r2, [r7, #4]
 8017e9c:	4907      	ldr	r1, [pc, #28]	@ (8017ebc <lwip_cyclic_timer+0x60>)
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f7ff ff6e 	bl	8017d80 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017ea4:	e004      	b.n	8017eb0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017ea6:	687a      	ldr	r2, [r7, #4]
 8017ea8:	4904      	ldr	r1, [pc, #16]	@ (8017ebc <lwip_cyclic_timer+0x60>)
 8017eaa:	68f8      	ldr	r0, [r7, #12]
 8017eac:	f7ff ff68 	bl	8017d80 <sys_timeout_abs>
}
 8017eb0:	bf00      	nop
 8017eb2:	3718      	adds	r7, #24
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	bd80      	pop	{r7, pc}
 8017eb8:	200275d0 	.word	0x200275d0
 8017ebc:	08017e5d 	.word	0x08017e5d

08017ec0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017ec0:	b580      	push	{r7, lr}
 8017ec2:	b082      	sub	sp, #8
 8017ec4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017ec6:	2301      	movs	r3, #1
 8017ec8:	607b      	str	r3, [r7, #4]
 8017eca:	e00e      	b.n	8017eea <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8017efc <sys_timeouts_init+0x3c>)
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	00db      	lsls	r3, r3, #3
 8017ed8:	4a08      	ldr	r2, [pc, #32]	@ (8017efc <sys_timeouts_init+0x3c>)
 8017eda:	4413      	add	r3, r2
 8017edc:	461a      	mov	r2, r3
 8017ede:	4908      	ldr	r1, [pc, #32]	@ (8017f00 <sys_timeouts_init+0x40>)
 8017ee0:	f000 f810 	bl	8017f04 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	3301      	adds	r3, #1
 8017ee8:	607b      	str	r3, [r7, #4]
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	2b02      	cmp	r3, #2
 8017eee:	d9ed      	bls.n	8017ecc <sys_timeouts_init+0xc>
  }
}
 8017ef0:	bf00      	nop
 8017ef2:	bf00      	nop
 8017ef4:	3708      	adds	r7, #8
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	bd80      	pop	{r7, pc}
 8017efa:	bf00      	nop
 8017efc:	08020700 	.word	0x08020700
 8017f00:	08017e5d 	.word	0x08017e5d

08017f04 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b086      	sub	sp, #24
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	60f8      	str	r0, [r7, #12]
 8017f0c:	60b9      	str	r1, [r7, #8]
 8017f0e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017f16:	d306      	bcc.n	8017f26 <sys_timeout+0x22>
 8017f18:	4b0a      	ldr	r3, [pc, #40]	@ (8017f44 <sys_timeout+0x40>)
 8017f1a:	f240 1229 	movw	r2, #297	@ 0x129
 8017f1e:	490a      	ldr	r1, [pc, #40]	@ (8017f48 <sys_timeout+0x44>)
 8017f20:	480a      	ldr	r0, [pc, #40]	@ (8017f4c <sys_timeout+0x48>)
 8017f22:	f004 f99f 	bl	801c264 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017f26:	f7f4 fa73 	bl	800c410 <sys_now>
 8017f2a:	4602      	mov	r2, r0
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	4413      	add	r3, r2
 8017f30:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017f32:	687a      	ldr	r2, [r7, #4]
 8017f34:	68b9      	ldr	r1, [r7, #8]
 8017f36:	6978      	ldr	r0, [r7, #20]
 8017f38:	f7ff ff22 	bl	8017d80 <sys_timeout_abs>
#endif
}
 8017f3c:	bf00      	nop
 8017f3e:	3718      	adds	r7, #24
 8017f40:	46bd      	mov	sp, r7
 8017f42:	bd80      	pop	{r7, pc}
 8017f44:	0801f46c 	.word	0x0801f46c
 8017f48:	0801f508 	.word	0x0801f508
 8017f4c:	0801f4e0 	.word	0x0801f4e0

08017f50 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	b084      	sub	sp, #16
 8017f54:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017f56:	f7f4 fa5b 	bl	800c410 <sys_now>
 8017f5a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017f5c:	4b17      	ldr	r3, [pc, #92]	@ (8017fbc <sys_check_timeouts+0x6c>)
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017f62:	68bb      	ldr	r3, [r7, #8]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d022      	beq.n	8017fae <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017f68:	68bb      	ldr	r3, [r7, #8]
 8017f6a:	685b      	ldr	r3, [r3, #4]
 8017f6c:	68fa      	ldr	r2, [r7, #12]
 8017f6e:	1ad3      	subs	r3, r2, r3
 8017f70:	0fdb      	lsrs	r3, r3, #31
 8017f72:	f003 0301 	and.w	r3, r3, #1
 8017f76:	b2db      	uxtb	r3, r3
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d11a      	bne.n	8017fb2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017f7c:	68bb      	ldr	r3, [r7, #8]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	4a0e      	ldr	r2, [pc, #56]	@ (8017fbc <sys_check_timeouts+0x6c>)
 8017f82:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017f84:	68bb      	ldr	r3, [r7, #8]
 8017f86:	689b      	ldr	r3, [r3, #8]
 8017f88:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017f8a:	68bb      	ldr	r3, [r7, #8]
 8017f8c:	68db      	ldr	r3, [r3, #12]
 8017f8e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017f90:	68bb      	ldr	r3, [r7, #8]
 8017f92:	685b      	ldr	r3, [r3, #4]
 8017f94:	4a0a      	ldr	r2, [pc, #40]	@ (8017fc0 <sys_check_timeouts+0x70>)
 8017f96:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017f98:	68b9      	ldr	r1, [r7, #8]
 8017f9a:	200a      	movs	r0, #10
 8017f9c:	f7f9 fc2a 	bl	80117f4 <memp_free>
    if (handler != NULL) {
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d0da      	beq.n	8017f5c <sys_check_timeouts+0xc>
      handler(arg);
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	6838      	ldr	r0, [r7, #0]
 8017faa:	4798      	blx	r3
  do {
 8017fac:	e7d6      	b.n	8017f5c <sys_check_timeouts+0xc>
      return;
 8017fae:	bf00      	nop
 8017fb0:	e000      	b.n	8017fb4 <sys_check_timeouts+0x64>
      return;
 8017fb2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017fb4:	3710      	adds	r7, #16
 8017fb6:	46bd      	mov	sp, r7
 8017fb8:	bd80      	pop	{r7, pc}
 8017fba:	bf00      	nop
 8017fbc:	200275cc 	.word	0x200275cc
 8017fc0:	200275d0 	.word	0x200275d0

08017fc4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b082      	sub	sp, #8
 8017fc8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017fca:	4b16      	ldr	r3, [pc, #88]	@ (8018024 <sys_timeouts_sleeptime+0x60>)
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d102      	bne.n	8017fd8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8017fd6:	e020      	b.n	801801a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017fd8:	f7f4 fa1a 	bl	800c410 <sys_now>
 8017fdc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017fde:	4b11      	ldr	r3, [pc, #68]	@ (8018024 <sys_timeouts_sleeptime+0x60>)
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	685a      	ldr	r2, [r3, #4]
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	1ad3      	subs	r3, r2, r3
 8017fe8:	0fdb      	lsrs	r3, r3, #31
 8017fea:	f003 0301 	and.w	r3, r3, #1
 8017fee:	b2db      	uxtb	r3, r3
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d001      	beq.n	8017ff8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	e010      	b.n	801801a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8018024 <sys_timeouts_sleeptime+0x60>)
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	685a      	ldr	r2, [r3, #4]
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	1ad3      	subs	r3, r2, r3
 8018002:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8018004:	683b      	ldr	r3, [r7, #0]
 8018006:	2b00      	cmp	r3, #0
 8018008:	da06      	bge.n	8018018 <sys_timeouts_sleeptime+0x54>
 801800a:	4b07      	ldr	r3, [pc, #28]	@ (8018028 <sys_timeouts_sleeptime+0x64>)
 801800c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8018010:	4906      	ldr	r1, [pc, #24]	@ (801802c <sys_timeouts_sleeptime+0x68>)
 8018012:	4807      	ldr	r0, [pc, #28]	@ (8018030 <sys_timeouts_sleeptime+0x6c>)
 8018014:	f004 f926 	bl	801c264 <iprintf>
    return ret;
 8018018:	683b      	ldr	r3, [r7, #0]
  }
}
 801801a:	4618      	mov	r0, r3
 801801c:	3708      	adds	r7, #8
 801801e:	46bd      	mov	sp, r7
 8018020:	bd80      	pop	{r7, pc}
 8018022:	bf00      	nop
 8018024:	200275cc 	.word	0x200275cc
 8018028:	0801f46c 	.word	0x0801f46c
 801802c:	0801f540 	.word	0x0801f540
 8018030:	0801f4e0 	.word	0x0801f4e0

08018034 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018034:	b580      	push	{r7, lr}
 8018036:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018038:	f004 f814 	bl	801c064 <rand>
 801803c:	4603      	mov	r3, r0
 801803e:	b29b      	uxth	r3, r3
 8018040:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018044:	b29b      	uxth	r3, r3
 8018046:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801804a:	b29a      	uxth	r2, r3
 801804c:	4b01      	ldr	r3, [pc, #4]	@ (8018054 <udp_init+0x20>)
 801804e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018050:	bf00      	nop
 8018052:	bd80      	pop	{r7, pc}
 8018054:	2000002c 	.word	0x2000002c

08018058 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8018058:	b480      	push	{r7}
 801805a:	b083      	sub	sp, #12
 801805c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801805e:	2300      	movs	r3, #0
 8018060:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8018062:	4b17      	ldr	r3, [pc, #92]	@ (80180c0 <udp_new_port+0x68>)
 8018064:	881b      	ldrh	r3, [r3, #0]
 8018066:	1c5a      	adds	r2, r3, #1
 8018068:	b291      	uxth	r1, r2
 801806a:	4a15      	ldr	r2, [pc, #84]	@ (80180c0 <udp_new_port+0x68>)
 801806c:	8011      	strh	r1, [r2, #0]
 801806e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018072:	4293      	cmp	r3, r2
 8018074:	d103      	bne.n	801807e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8018076:	4b12      	ldr	r3, [pc, #72]	@ (80180c0 <udp_new_port+0x68>)
 8018078:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801807c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801807e:	4b11      	ldr	r3, [pc, #68]	@ (80180c4 <udp_new_port+0x6c>)
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	603b      	str	r3, [r7, #0]
 8018084:	e011      	b.n	80180aa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8018086:	683b      	ldr	r3, [r7, #0]
 8018088:	8a5a      	ldrh	r2, [r3, #18]
 801808a:	4b0d      	ldr	r3, [pc, #52]	@ (80180c0 <udp_new_port+0x68>)
 801808c:	881b      	ldrh	r3, [r3, #0]
 801808e:	429a      	cmp	r2, r3
 8018090:	d108      	bne.n	80180a4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8018092:	88fb      	ldrh	r3, [r7, #6]
 8018094:	3301      	adds	r3, #1
 8018096:	80fb      	strh	r3, [r7, #6]
 8018098:	88fb      	ldrh	r3, [r7, #6]
 801809a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801809e:	d3e0      	bcc.n	8018062 <udp_new_port+0xa>
        return 0;
 80180a0:	2300      	movs	r3, #0
 80180a2:	e007      	b.n	80180b4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80180a4:	683b      	ldr	r3, [r7, #0]
 80180a6:	68db      	ldr	r3, [r3, #12]
 80180a8:	603b      	str	r3, [r7, #0]
 80180aa:	683b      	ldr	r3, [r7, #0]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d1ea      	bne.n	8018086 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80180b0:	4b03      	ldr	r3, [pc, #12]	@ (80180c0 <udp_new_port+0x68>)
 80180b2:	881b      	ldrh	r3, [r3, #0]
}
 80180b4:	4618      	mov	r0, r3
 80180b6:	370c      	adds	r7, #12
 80180b8:	46bd      	mov	sp, r7
 80180ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180be:	4770      	bx	lr
 80180c0:	2000002c 	.word	0x2000002c
 80180c4:	200275d8 	.word	0x200275d8

080180c8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b084      	sub	sp, #16
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	60f8      	str	r0, [r7, #12]
 80180d0:	60b9      	str	r1, [r7, #8]
 80180d2:	4613      	mov	r3, r2
 80180d4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d105      	bne.n	80180e8 <udp_input_local_match+0x20>
 80180dc:	4b27      	ldr	r3, [pc, #156]	@ (801817c <udp_input_local_match+0xb4>)
 80180de:	2287      	movs	r2, #135	@ 0x87
 80180e0:	4927      	ldr	r1, [pc, #156]	@ (8018180 <udp_input_local_match+0xb8>)
 80180e2:	4828      	ldr	r0, [pc, #160]	@ (8018184 <udp_input_local_match+0xbc>)
 80180e4:	f004 f8be 	bl	801c264 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80180e8:	68bb      	ldr	r3, [r7, #8]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d105      	bne.n	80180fa <udp_input_local_match+0x32>
 80180ee:	4b23      	ldr	r3, [pc, #140]	@ (801817c <udp_input_local_match+0xb4>)
 80180f0:	2288      	movs	r2, #136	@ 0x88
 80180f2:	4925      	ldr	r1, [pc, #148]	@ (8018188 <udp_input_local_match+0xc0>)
 80180f4:	4823      	ldr	r0, [pc, #140]	@ (8018184 <udp_input_local_match+0xbc>)
 80180f6:	f004 f8b5 	bl	801c264 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	7a1b      	ldrb	r3, [r3, #8]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d00b      	beq.n	801811a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	7a1a      	ldrb	r2, [r3, #8]
 8018106:	4b21      	ldr	r3, [pc, #132]	@ (801818c <udp_input_local_match+0xc4>)
 8018108:	685b      	ldr	r3, [r3, #4]
 801810a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801810e:	3301      	adds	r3, #1
 8018110:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018112:	429a      	cmp	r2, r3
 8018114:	d001      	beq.n	801811a <udp_input_local_match+0x52>
    return 0;
 8018116:	2300      	movs	r3, #0
 8018118:	e02b      	b.n	8018172 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801811a:	79fb      	ldrb	r3, [r7, #7]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d018      	beq.n	8018152 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d013      	beq.n	801814e <udp_input_local_match+0x86>
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	2b00      	cmp	r3, #0
 801812c:	d00f      	beq.n	801814e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801812e:	4b17      	ldr	r3, [pc, #92]	@ (801818c <udp_input_local_match+0xc4>)
 8018130:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018136:	d00a      	beq.n	801814e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	681a      	ldr	r2, [r3, #0]
 801813c:	4b13      	ldr	r3, [pc, #76]	@ (801818c <udp_input_local_match+0xc4>)
 801813e:	695b      	ldr	r3, [r3, #20]
 8018140:	405a      	eors	r2, r3
 8018142:	68bb      	ldr	r3, [r7, #8]
 8018144:	3308      	adds	r3, #8
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801814a:	2b00      	cmp	r3, #0
 801814c:	d110      	bne.n	8018170 <udp_input_local_match+0xa8>
          return 1;
 801814e:	2301      	movs	r3, #1
 8018150:	e00f      	b.n	8018172 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	2b00      	cmp	r3, #0
 8018156:	d009      	beq.n	801816c <udp_input_local_match+0xa4>
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d005      	beq.n	801816c <udp_input_local_match+0xa4>
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	681a      	ldr	r2, [r3, #0]
 8018164:	4b09      	ldr	r3, [pc, #36]	@ (801818c <udp_input_local_match+0xc4>)
 8018166:	695b      	ldr	r3, [r3, #20]
 8018168:	429a      	cmp	r2, r3
 801816a:	d101      	bne.n	8018170 <udp_input_local_match+0xa8>
        return 1;
 801816c:	2301      	movs	r3, #1
 801816e:	e000      	b.n	8018172 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8018170:	2300      	movs	r3, #0
}
 8018172:	4618      	mov	r0, r3
 8018174:	3710      	adds	r7, #16
 8018176:	46bd      	mov	sp, r7
 8018178:	bd80      	pop	{r7, pc}
 801817a:	bf00      	nop
 801817c:	0801f554 	.word	0x0801f554
 8018180:	0801f584 	.word	0x0801f584
 8018184:	0801f5a8 	.word	0x0801f5a8
 8018188:	0801f5d0 	.word	0x0801f5d0
 801818c:	2002447c 	.word	0x2002447c

08018190 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8018190:	b590      	push	{r4, r7, lr}
 8018192:	b08d      	sub	sp, #52	@ 0x34
 8018194:	af02      	add	r7, sp, #8
 8018196:	6078      	str	r0, [r7, #4]
 8018198:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801819a:	2300      	movs	r3, #0
 801819c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d105      	bne.n	80181b0 <udp_input+0x20>
 80181a4:	4b7c      	ldr	r3, [pc, #496]	@ (8018398 <udp_input+0x208>)
 80181a6:	22cf      	movs	r2, #207	@ 0xcf
 80181a8:	497c      	ldr	r1, [pc, #496]	@ (801839c <udp_input+0x20c>)
 80181aa:	487d      	ldr	r0, [pc, #500]	@ (80183a0 <udp_input+0x210>)
 80181ac:	f004 f85a 	bl	801c264 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80181b0:	683b      	ldr	r3, [r7, #0]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d105      	bne.n	80181c2 <udp_input+0x32>
 80181b6:	4b78      	ldr	r3, [pc, #480]	@ (8018398 <udp_input+0x208>)
 80181b8:	22d0      	movs	r2, #208	@ 0xd0
 80181ba:	497a      	ldr	r1, [pc, #488]	@ (80183a4 <udp_input+0x214>)
 80181bc:	4878      	ldr	r0, [pc, #480]	@ (80183a0 <udp_input+0x210>)
 80181be:	f004 f851 	bl	801c264 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	895b      	ldrh	r3, [r3, #10]
 80181c6:	2b07      	cmp	r3, #7
 80181c8:	d803      	bhi.n	80181d2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80181ca:	6878      	ldr	r0, [r7, #4]
 80181cc:	f7fa f9b6 	bl	801253c <pbuf_free>
    goto end;
 80181d0:	e0de      	b.n	8018390 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	685b      	ldr	r3, [r3, #4]
 80181d6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80181d8:	4b73      	ldr	r3, [pc, #460]	@ (80183a8 <udp_input+0x218>)
 80181da:	695b      	ldr	r3, [r3, #20]
 80181dc:	4a72      	ldr	r2, [pc, #456]	@ (80183a8 <udp_input+0x218>)
 80181de:	6812      	ldr	r2, [r2, #0]
 80181e0:	4611      	mov	r1, r2
 80181e2:	4618      	mov	r0, r3
 80181e4:	f001 fefe 	bl	8019fe4 <ip4_addr_isbroadcast_u32>
 80181e8:	4603      	mov	r3, r0
 80181ea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80181ec:	697b      	ldr	r3, [r7, #20]
 80181ee:	881b      	ldrh	r3, [r3, #0]
 80181f0:	b29b      	uxth	r3, r3
 80181f2:	4618      	mov	r0, r3
 80181f4:	f7f8 fdb4 	bl	8010d60 <lwip_htons>
 80181f8:	4603      	mov	r3, r0
 80181fa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80181fc:	697b      	ldr	r3, [r7, #20]
 80181fe:	885b      	ldrh	r3, [r3, #2]
 8018200:	b29b      	uxth	r3, r3
 8018202:	4618      	mov	r0, r3
 8018204:	f7f8 fdac 	bl	8010d60 <lwip_htons>
 8018208:	4603      	mov	r3, r0
 801820a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801820c:	2300      	movs	r3, #0
 801820e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8018210:	2300      	movs	r3, #0
 8018212:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018214:	2300      	movs	r3, #0
 8018216:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018218:	4b64      	ldr	r3, [pc, #400]	@ (80183ac <udp_input+0x21c>)
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	627b      	str	r3, [r7, #36]	@ 0x24
 801821e:	e054      	b.n	80182ca <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018222:	8a5b      	ldrh	r3, [r3, #18]
 8018224:	89fa      	ldrh	r2, [r7, #14]
 8018226:	429a      	cmp	r2, r3
 8018228:	d14a      	bne.n	80182c0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801822a:	7cfb      	ldrb	r3, [r7, #19]
 801822c:	461a      	mov	r2, r3
 801822e:	6839      	ldr	r1, [r7, #0]
 8018230:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018232:	f7ff ff49 	bl	80180c8 <udp_input_local_match>
 8018236:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018238:	2b00      	cmp	r3, #0
 801823a:	d041      	beq.n	80182c0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801823c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801823e:	7c1b      	ldrb	r3, [r3, #16]
 8018240:	f003 0304 	and.w	r3, r3, #4
 8018244:	2b00      	cmp	r3, #0
 8018246:	d11d      	bne.n	8018284 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018248:	69fb      	ldr	r3, [r7, #28]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d102      	bne.n	8018254 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801824e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018250:	61fb      	str	r3, [r7, #28]
 8018252:	e017      	b.n	8018284 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018254:	7cfb      	ldrb	r3, [r7, #19]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d014      	beq.n	8018284 <udp_input+0xf4>
 801825a:	4b53      	ldr	r3, [pc, #332]	@ (80183a8 <udp_input+0x218>)
 801825c:	695b      	ldr	r3, [r3, #20]
 801825e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018262:	d10f      	bne.n	8018284 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018264:	69fb      	ldr	r3, [r7, #28]
 8018266:	681a      	ldr	r2, [r3, #0]
 8018268:	683b      	ldr	r3, [r7, #0]
 801826a:	3304      	adds	r3, #4
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	429a      	cmp	r2, r3
 8018270:	d008      	beq.n	8018284 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8018272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018274:	681a      	ldr	r2, [r3, #0]
 8018276:	683b      	ldr	r3, [r7, #0]
 8018278:	3304      	adds	r3, #4
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	429a      	cmp	r2, r3
 801827e:	d101      	bne.n	8018284 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018282:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018286:	8a9b      	ldrh	r3, [r3, #20]
 8018288:	8a3a      	ldrh	r2, [r7, #16]
 801828a:	429a      	cmp	r2, r3
 801828c:	d118      	bne.n	80182c0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801828e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018290:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8018292:	2b00      	cmp	r3, #0
 8018294:	d005      	beq.n	80182a2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018298:	685a      	ldr	r2, [r3, #4]
 801829a:	4b43      	ldr	r3, [pc, #268]	@ (80183a8 <udp_input+0x218>)
 801829c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801829e:	429a      	cmp	r2, r3
 80182a0:	d10e      	bne.n	80182c0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80182a2:	6a3b      	ldr	r3, [r7, #32]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d014      	beq.n	80182d2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80182a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182aa:	68da      	ldr	r2, [r3, #12]
 80182ac:	6a3b      	ldr	r3, [r7, #32]
 80182ae:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80182b0:	4b3e      	ldr	r3, [pc, #248]	@ (80183ac <udp_input+0x21c>)
 80182b2:	681a      	ldr	r2, [r3, #0]
 80182b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182b6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80182b8:	4a3c      	ldr	r2, [pc, #240]	@ (80183ac <udp_input+0x21c>)
 80182ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182bc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80182be:	e008      	b.n	80182d2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80182c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182c2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80182c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182c6:	68db      	ldr	r3, [r3, #12]
 80182c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80182ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d1a7      	bne.n	8018220 <udp_input+0x90>
 80182d0:	e000      	b.n	80182d4 <udp_input+0x144>
        break;
 80182d2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80182d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d101      	bne.n	80182de <udp_input+0x14e>
    pcb = uncon_pcb;
 80182da:	69fb      	ldr	r3, [r7, #28]
 80182dc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80182de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d002      	beq.n	80182ea <udp_input+0x15a>
    for_us = 1;
 80182e4:	2301      	movs	r3, #1
 80182e6:	76fb      	strb	r3, [r7, #27]
 80182e8:	e00a      	b.n	8018300 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80182ea:	683b      	ldr	r3, [r7, #0]
 80182ec:	3304      	adds	r3, #4
 80182ee:	681a      	ldr	r2, [r3, #0]
 80182f0:	4b2d      	ldr	r3, [pc, #180]	@ (80183a8 <udp_input+0x218>)
 80182f2:	695b      	ldr	r3, [r3, #20]
 80182f4:	429a      	cmp	r2, r3
 80182f6:	bf0c      	ite	eq
 80182f8:	2301      	moveq	r3, #1
 80182fa:	2300      	movne	r3, #0
 80182fc:	b2db      	uxtb	r3, r3
 80182fe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018300:	7efb      	ldrb	r3, [r7, #27]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d041      	beq.n	801838a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018306:	2108      	movs	r1, #8
 8018308:	6878      	ldr	r0, [r7, #4]
 801830a:	f7fa f891 	bl	8012430 <pbuf_remove_header>
 801830e:	4603      	mov	r3, r0
 8018310:	2b00      	cmp	r3, #0
 8018312:	d00a      	beq.n	801832a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018314:	4b20      	ldr	r3, [pc, #128]	@ (8018398 <udp_input+0x208>)
 8018316:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801831a:	4925      	ldr	r1, [pc, #148]	@ (80183b0 <udp_input+0x220>)
 801831c:	4820      	ldr	r0, [pc, #128]	@ (80183a0 <udp_input+0x210>)
 801831e:	f003 ffa1 	bl	801c264 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018322:	6878      	ldr	r0, [r7, #4]
 8018324:	f7fa f90a 	bl	801253c <pbuf_free>
      goto end;
 8018328:	e032      	b.n	8018390 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801832a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801832c:	2b00      	cmp	r3, #0
 801832e:	d012      	beq.n	8018356 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018332:	699b      	ldr	r3, [r3, #24]
 8018334:	2b00      	cmp	r3, #0
 8018336:	d00a      	beq.n	801834e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801833a:	699c      	ldr	r4, [r3, #24]
 801833c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801833e:	69d8      	ldr	r0, [r3, #28]
 8018340:	8a3b      	ldrh	r3, [r7, #16]
 8018342:	9300      	str	r3, [sp, #0]
 8018344:	4b1b      	ldr	r3, [pc, #108]	@ (80183b4 <udp_input+0x224>)
 8018346:	687a      	ldr	r2, [r7, #4]
 8018348:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801834a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801834c:	e021      	b.n	8018392 <udp_input+0x202>
        pbuf_free(p);
 801834e:	6878      	ldr	r0, [r7, #4]
 8018350:	f7fa f8f4 	bl	801253c <pbuf_free>
        goto end;
 8018354:	e01c      	b.n	8018390 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018356:	7cfb      	ldrb	r3, [r7, #19]
 8018358:	2b00      	cmp	r3, #0
 801835a:	d112      	bne.n	8018382 <udp_input+0x1f2>
 801835c:	4b12      	ldr	r3, [pc, #72]	@ (80183a8 <udp_input+0x218>)
 801835e:	695b      	ldr	r3, [r3, #20]
 8018360:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018364:	2be0      	cmp	r3, #224	@ 0xe0
 8018366:	d00c      	beq.n	8018382 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018368:	4b0f      	ldr	r3, [pc, #60]	@ (80183a8 <udp_input+0x218>)
 801836a:	899b      	ldrh	r3, [r3, #12]
 801836c:	3308      	adds	r3, #8
 801836e:	b29b      	uxth	r3, r3
 8018370:	b21b      	sxth	r3, r3
 8018372:	4619      	mov	r1, r3
 8018374:	6878      	ldr	r0, [r7, #4]
 8018376:	f7fa f8ce 	bl	8012516 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801837a:	2103      	movs	r1, #3
 801837c:	6878      	ldr	r0, [r7, #4]
 801837e:	f001 fb11 	bl	80199a4 <icmp_dest_unreach>
      pbuf_free(p);
 8018382:	6878      	ldr	r0, [r7, #4]
 8018384:	f7fa f8da 	bl	801253c <pbuf_free>
  return;
 8018388:	e003      	b.n	8018392 <udp_input+0x202>
    pbuf_free(p);
 801838a:	6878      	ldr	r0, [r7, #4]
 801838c:	f7fa f8d6 	bl	801253c <pbuf_free>
  return;
 8018390:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018392:	372c      	adds	r7, #44	@ 0x2c
 8018394:	46bd      	mov	sp, r7
 8018396:	bd90      	pop	{r4, r7, pc}
 8018398:	0801f554 	.word	0x0801f554
 801839c:	0801f5f8 	.word	0x0801f5f8
 80183a0:	0801f5a8 	.word	0x0801f5a8
 80183a4:	0801f610 	.word	0x0801f610
 80183a8:	2002447c 	.word	0x2002447c
 80183ac:	200275d8 	.word	0x200275d8
 80183b0:	0801f62c 	.word	0x0801f62c
 80183b4:	2002448c 	.word	0x2002448c

080183b8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b088      	sub	sp, #32
 80183bc:	af02      	add	r7, sp, #8
 80183be:	60f8      	str	r0, [r7, #12]
 80183c0:	60b9      	str	r1, [r7, #8]
 80183c2:	607a      	str	r2, [r7, #4]
 80183c4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d109      	bne.n	80183e0 <udp_sendto+0x28>
 80183cc:	4b23      	ldr	r3, [pc, #140]	@ (801845c <udp_sendto+0xa4>)
 80183ce:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80183d2:	4923      	ldr	r1, [pc, #140]	@ (8018460 <udp_sendto+0xa8>)
 80183d4:	4823      	ldr	r0, [pc, #140]	@ (8018464 <udp_sendto+0xac>)
 80183d6:	f003 ff45 	bl	801c264 <iprintf>
 80183da:	f06f 030f 	mvn.w	r3, #15
 80183de:	e038      	b.n	8018452 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80183e0:	68bb      	ldr	r3, [r7, #8]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d109      	bne.n	80183fa <udp_sendto+0x42>
 80183e6:	4b1d      	ldr	r3, [pc, #116]	@ (801845c <udp_sendto+0xa4>)
 80183e8:	f240 2219 	movw	r2, #537	@ 0x219
 80183ec:	491e      	ldr	r1, [pc, #120]	@ (8018468 <udp_sendto+0xb0>)
 80183ee:	481d      	ldr	r0, [pc, #116]	@ (8018464 <udp_sendto+0xac>)
 80183f0:	f003 ff38 	bl	801c264 <iprintf>
 80183f4:	f06f 030f 	mvn.w	r3, #15
 80183f8:	e02b      	b.n	8018452 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d109      	bne.n	8018414 <udp_sendto+0x5c>
 8018400:	4b16      	ldr	r3, [pc, #88]	@ (801845c <udp_sendto+0xa4>)
 8018402:	f240 221a 	movw	r2, #538	@ 0x21a
 8018406:	4919      	ldr	r1, [pc, #100]	@ (801846c <udp_sendto+0xb4>)
 8018408:	4816      	ldr	r0, [pc, #88]	@ (8018464 <udp_sendto+0xac>)
 801840a:	f003 ff2b 	bl	801c264 <iprintf>
 801840e:	f06f 030f 	mvn.w	r3, #15
 8018412:	e01e      	b.n	8018452 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	7a1b      	ldrb	r3, [r3, #8]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d006      	beq.n	801842a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	7a1b      	ldrb	r3, [r3, #8]
 8018420:	4618      	mov	r0, r3
 8018422:	f7f9 fcfd 	bl	8011e20 <netif_get_by_index>
 8018426:	6178      	str	r0, [r7, #20]
 8018428:	e003      	b.n	8018432 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801842a:	6878      	ldr	r0, [r7, #4]
 801842c:	f001 fb44 	bl	8019ab8 <ip4_route>
 8018430:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8018432:	697b      	ldr	r3, [r7, #20]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d102      	bne.n	801843e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8018438:	f06f 0303 	mvn.w	r3, #3
 801843c:	e009      	b.n	8018452 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801843e:	887a      	ldrh	r2, [r7, #2]
 8018440:	697b      	ldr	r3, [r7, #20]
 8018442:	9300      	str	r3, [sp, #0]
 8018444:	4613      	mov	r3, r2
 8018446:	687a      	ldr	r2, [r7, #4]
 8018448:	68b9      	ldr	r1, [r7, #8]
 801844a:	68f8      	ldr	r0, [r7, #12]
 801844c:	f000 f810 	bl	8018470 <udp_sendto_if>
 8018450:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018452:	4618      	mov	r0, r3
 8018454:	3718      	adds	r7, #24
 8018456:	46bd      	mov	sp, r7
 8018458:	bd80      	pop	{r7, pc}
 801845a:	bf00      	nop
 801845c:	0801f554 	.word	0x0801f554
 8018460:	0801f678 	.word	0x0801f678
 8018464:	0801f5a8 	.word	0x0801f5a8
 8018468:	0801f690 	.word	0x0801f690
 801846c:	0801f6ac 	.word	0x0801f6ac

08018470 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8018470:	b580      	push	{r7, lr}
 8018472:	b088      	sub	sp, #32
 8018474:	af02      	add	r7, sp, #8
 8018476:	60f8      	str	r0, [r7, #12]
 8018478:	60b9      	str	r1, [r7, #8]
 801847a:	607a      	str	r2, [r7, #4]
 801847c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	2b00      	cmp	r3, #0
 8018482:	d109      	bne.n	8018498 <udp_sendto_if+0x28>
 8018484:	4b2e      	ldr	r3, [pc, #184]	@ (8018540 <udp_sendto_if+0xd0>)
 8018486:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801848a:	492e      	ldr	r1, [pc, #184]	@ (8018544 <udp_sendto_if+0xd4>)
 801848c:	482e      	ldr	r0, [pc, #184]	@ (8018548 <udp_sendto_if+0xd8>)
 801848e:	f003 fee9 	bl	801c264 <iprintf>
 8018492:	f06f 030f 	mvn.w	r3, #15
 8018496:	e04f      	b.n	8018538 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018498:	68bb      	ldr	r3, [r7, #8]
 801849a:	2b00      	cmp	r3, #0
 801849c:	d109      	bne.n	80184b2 <udp_sendto_if+0x42>
 801849e:	4b28      	ldr	r3, [pc, #160]	@ (8018540 <udp_sendto_if+0xd0>)
 80184a0:	f240 2281 	movw	r2, #641	@ 0x281
 80184a4:	4929      	ldr	r1, [pc, #164]	@ (801854c <udp_sendto_if+0xdc>)
 80184a6:	4828      	ldr	r0, [pc, #160]	@ (8018548 <udp_sendto_if+0xd8>)
 80184a8:	f003 fedc 	bl	801c264 <iprintf>
 80184ac:	f06f 030f 	mvn.w	r3, #15
 80184b0:	e042      	b.n	8018538 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d109      	bne.n	80184cc <udp_sendto_if+0x5c>
 80184b8:	4b21      	ldr	r3, [pc, #132]	@ (8018540 <udp_sendto_if+0xd0>)
 80184ba:	f240 2282 	movw	r2, #642	@ 0x282
 80184be:	4924      	ldr	r1, [pc, #144]	@ (8018550 <udp_sendto_if+0xe0>)
 80184c0:	4821      	ldr	r0, [pc, #132]	@ (8018548 <udp_sendto_if+0xd8>)
 80184c2:	f003 fecf 	bl	801c264 <iprintf>
 80184c6:	f06f 030f 	mvn.w	r3, #15
 80184ca:	e035      	b.n	8018538 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80184cc:	6a3b      	ldr	r3, [r7, #32]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d109      	bne.n	80184e6 <udp_sendto_if+0x76>
 80184d2:	4b1b      	ldr	r3, [pc, #108]	@ (8018540 <udp_sendto_if+0xd0>)
 80184d4:	f240 2283 	movw	r2, #643	@ 0x283
 80184d8:	491e      	ldr	r1, [pc, #120]	@ (8018554 <udp_sendto_if+0xe4>)
 80184da:	481b      	ldr	r0, [pc, #108]	@ (8018548 <udp_sendto_if+0xd8>)
 80184dc:	f003 fec2 	bl	801c264 <iprintf>
 80184e0:	f06f 030f 	mvn.w	r3, #15
 80184e4:	e028      	b.n	8018538 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80184e6:	68fb      	ldr	r3, [r7, #12]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d009      	beq.n	8018500 <udp_sendto_if+0x90>
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d005      	beq.n	8018500 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80184fc:	2be0      	cmp	r3, #224	@ 0xe0
 80184fe:	d103      	bne.n	8018508 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018500:	6a3b      	ldr	r3, [r7, #32]
 8018502:	3304      	adds	r3, #4
 8018504:	617b      	str	r3, [r7, #20]
 8018506:	e00b      	b.n	8018520 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	681a      	ldr	r2, [r3, #0]
 801850c:	6a3b      	ldr	r3, [r7, #32]
 801850e:	3304      	adds	r3, #4
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	429a      	cmp	r2, r3
 8018514:	d002      	beq.n	801851c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8018516:	f06f 0303 	mvn.w	r3, #3
 801851a:	e00d      	b.n	8018538 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018520:	887a      	ldrh	r2, [r7, #2]
 8018522:	697b      	ldr	r3, [r7, #20]
 8018524:	9301      	str	r3, [sp, #4]
 8018526:	6a3b      	ldr	r3, [r7, #32]
 8018528:	9300      	str	r3, [sp, #0]
 801852a:	4613      	mov	r3, r2
 801852c:	687a      	ldr	r2, [r7, #4]
 801852e:	68b9      	ldr	r1, [r7, #8]
 8018530:	68f8      	ldr	r0, [r7, #12]
 8018532:	f000 f811 	bl	8018558 <udp_sendto_if_src>
 8018536:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018538:	4618      	mov	r0, r3
 801853a:	3718      	adds	r7, #24
 801853c:	46bd      	mov	sp, r7
 801853e:	bd80      	pop	{r7, pc}
 8018540:	0801f554 	.word	0x0801f554
 8018544:	0801f6c8 	.word	0x0801f6c8
 8018548:	0801f5a8 	.word	0x0801f5a8
 801854c:	0801f6e4 	.word	0x0801f6e4
 8018550:	0801f700 	.word	0x0801f700
 8018554:	0801f720 	.word	0x0801f720

08018558 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b08c      	sub	sp, #48	@ 0x30
 801855c:	af04      	add	r7, sp, #16
 801855e:	60f8      	str	r0, [r7, #12]
 8018560:	60b9      	str	r1, [r7, #8]
 8018562:	607a      	str	r2, [r7, #4]
 8018564:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d109      	bne.n	8018580 <udp_sendto_if_src+0x28>
 801856c:	4b65      	ldr	r3, [pc, #404]	@ (8018704 <udp_sendto_if_src+0x1ac>)
 801856e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8018572:	4965      	ldr	r1, [pc, #404]	@ (8018708 <udp_sendto_if_src+0x1b0>)
 8018574:	4865      	ldr	r0, [pc, #404]	@ (801870c <udp_sendto_if_src+0x1b4>)
 8018576:	f003 fe75 	bl	801c264 <iprintf>
 801857a:	f06f 030f 	mvn.w	r3, #15
 801857e:	e0bc      	b.n	80186fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8018580:	68bb      	ldr	r3, [r7, #8]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d109      	bne.n	801859a <udp_sendto_if_src+0x42>
 8018586:	4b5f      	ldr	r3, [pc, #380]	@ (8018704 <udp_sendto_if_src+0x1ac>)
 8018588:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801858c:	4960      	ldr	r1, [pc, #384]	@ (8018710 <udp_sendto_if_src+0x1b8>)
 801858e:	485f      	ldr	r0, [pc, #380]	@ (801870c <udp_sendto_if_src+0x1b4>)
 8018590:	f003 fe68 	bl	801c264 <iprintf>
 8018594:	f06f 030f 	mvn.w	r3, #15
 8018598:	e0af      	b.n	80186fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	2b00      	cmp	r3, #0
 801859e:	d109      	bne.n	80185b4 <udp_sendto_if_src+0x5c>
 80185a0:	4b58      	ldr	r3, [pc, #352]	@ (8018704 <udp_sendto_if_src+0x1ac>)
 80185a2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80185a6:	495b      	ldr	r1, [pc, #364]	@ (8018714 <udp_sendto_if_src+0x1bc>)
 80185a8:	4858      	ldr	r0, [pc, #352]	@ (801870c <udp_sendto_if_src+0x1b4>)
 80185aa:	f003 fe5b 	bl	801c264 <iprintf>
 80185ae:	f06f 030f 	mvn.w	r3, #15
 80185b2:	e0a2      	b.n	80186fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80185b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d109      	bne.n	80185ce <udp_sendto_if_src+0x76>
 80185ba:	4b52      	ldr	r3, [pc, #328]	@ (8018704 <udp_sendto_if_src+0x1ac>)
 80185bc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80185c0:	4955      	ldr	r1, [pc, #340]	@ (8018718 <udp_sendto_if_src+0x1c0>)
 80185c2:	4852      	ldr	r0, [pc, #328]	@ (801870c <udp_sendto_if_src+0x1b4>)
 80185c4:	f003 fe4e 	bl	801c264 <iprintf>
 80185c8:	f06f 030f 	mvn.w	r3, #15
 80185cc:	e095      	b.n	80186fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80185ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d109      	bne.n	80185e8 <udp_sendto_if_src+0x90>
 80185d4:	4b4b      	ldr	r3, [pc, #300]	@ (8018704 <udp_sendto_if_src+0x1ac>)
 80185d6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80185da:	4950      	ldr	r1, [pc, #320]	@ (801871c <udp_sendto_if_src+0x1c4>)
 80185dc:	484b      	ldr	r0, [pc, #300]	@ (801870c <udp_sendto_if_src+0x1b4>)
 80185de:	f003 fe41 	bl	801c264 <iprintf>
 80185e2:	f06f 030f 	mvn.w	r3, #15
 80185e6:	e088      	b.n	80186fa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	8a5b      	ldrh	r3, [r3, #18]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d10f      	bne.n	8018610 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80185f0:	68f9      	ldr	r1, [r7, #12]
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	8a5b      	ldrh	r3, [r3, #18]
 80185f6:	461a      	mov	r2, r3
 80185f8:	68f8      	ldr	r0, [r7, #12]
 80185fa:	f000 f893 	bl	8018724 <udp_bind>
 80185fe:	4603      	mov	r3, r0
 8018600:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8018602:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d002      	beq.n	8018610 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801860a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801860e:	e074      	b.n	80186fa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8018610:	68bb      	ldr	r3, [r7, #8]
 8018612:	891b      	ldrh	r3, [r3, #8]
 8018614:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8018618:	4293      	cmp	r3, r2
 801861a:	d902      	bls.n	8018622 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801861c:	f04f 33ff 	mov.w	r3, #4294967295
 8018620:	e06b      	b.n	80186fa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8018622:	2108      	movs	r1, #8
 8018624:	68b8      	ldr	r0, [r7, #8]
 8018626:	f7f9 fef3 	bl	8012410 <pbuf_add_header>
 801862a:	4603      	mov	r3, r0
 801862c:	2b00      	cmp	r3, #0
 801862e:	d015      	beq.n	801865c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8018630:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018634:	2108      	movs	r1, #8
 8018636:	2022      	movs	r0, #34	@ 0x22
 8018638:	f7f9 fc9c 	bl	8011f74 <pbuf_alloc>
 801863c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801863e:	69fb      	ldr	r3, [r7, #28]
 8018640:	2b00      	cmp	r3, #0
 8018642:	d102      	bne.n	801864a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8018644:	f04f 33ff 	mov.w	r3, #4294967295
 8018648:	e057      	b.n	80186fa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801864a:	68bb      	ldr	r3, [r7, #8]
 801864c:	891b      	ldrh	r3, [r3, #8]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d006      	beq.n	8018660 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8018652:	68b9      	ldr	r1, [r7, #8]
 8018654:	69f8      	ldr	r0, [r7, #28]
 8018656:	f7fa f895 	bl	8012784 <pbuf_chain>
 801865a:	e001      	b.n	8018660 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801865c:	68bb      	ldr	r3, [r7, #8]
 801865e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8018660:	69fb      	ldr	r3, [r7, #28]
 8018662:	895b      	ldrh	r3, [r3, #10]
 8018664:	2b07      	cmp	r3, #7
 8018666:	d806      	bhi.n	8018676 <udp_sendto_if_src+0x11e>
 8018668:	4b26      	ldr	r3, [pc, #152]	@ (8018704 <udp_sendto_if_src+0x1ac>)
 801866a:	f240 320d 	movw	r2, #781	@ 0x30d
 801866e:	492c      	ldr	r1, [pc, #176]	@ (8018720 <udp_sendto_if_src+0x1c8>)
 8018670:	4826      	ldr	r0, [pc, #152]	@ (801870c <udp_sendto_if_src+0x1b4>)
 8018672:	f003 fdf7 	bl	801c264 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8018676:	69fb      	ldr	r3, [r7, #28]
 8018678:	685b      	ldr	r3, [r3, #4]
 801867a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	8a5b      	ldrh	r3, [r3, #18]
 8018680:	4618      	mov	r0, r3
 8018682:	f7f8 fb6d 	bl	8010d60 <lwip_htons>
 8018686:	4603      	mov	r3, r0
 8018688:	461a      	mov	r2, r3
 801868a:	697b      	ldr	r3, [r7, #20]
 801868c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801868e:	887b      	ldrh	r3, [r7, #2]
 8018690:	4618      	mov	r0, r3
 8018692:	f7f8 fb65 	bl	8010d60 <lwip_htons>
 8018696:	4603      	mov	r3, r0
 8018698:	461a      	mov	r2, r3
 801869a:	697b      	ldr	r3, [r7, #20]
 801869c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801869e:	697b      	ldr	r3, [r7, #20]
 80186a0:	2200      	movs	r2, #0
 80186a2:	719a      	strb	r2, [r3, #6]
 80186a4:	2200      	movs	r2, #0
 80186a6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80186a8:	69fb      	ldr	r3, [r7, #28]
 80186aa:	891b      	ldrh	r3, [r3, #8]
 80186ac:	4618      	mov	r0, r3
 80186ae:	f7f8 fb57 	bl	8010d60 <lwip_htons>
 80186b2:	4603      	mov	r3, r0
 80186b4:	461a      	mov	r2, r3
 80186b6:	697b      	ldr	r3, [r7, #20]
 80186b8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80186ba:	2311      	movs	r3, #17
 80186bc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	7adb      	ldrb	r3, [r3, #11]
 80186c2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	7a9b      	ldrb	r3, [r3, #10]
 80186c8:	7cb9      	ldrb	r1, [r7, #18]
 80186ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80186cc:	9202      	str	r2, [sp, #8]
 80186ce:	7cfa      	ldrb	r2, [r7, #19]
 80186d0:	9201      	str	r2, [sp, #4]
 80186d2:	9300      	str	r3, [sp, #0]
 80186d4:	460b      	mov	r3, r1
 80186d6:	687a      	ldr	r2, [r7, #4]
 80186d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80186da:	69f8      	ldr	r0, [r7, #28]
 80186dc:	f001 fbd4 	bl	8019e88 <ip4_output_if_src>
 80186e0:	4603      	mov	r3, r0
 80186e2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80186e4:	69fa      	ldr	r2, [r7, #28]
 80186e6:	68bb      	ldr	r3, [r7, #8]
 80186e8:	429a      	cmp	r2, r3
 80186ea:	d004      	beq.n	80186f6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80186ec:	69f8      	ldr	r0, [r7, #28]
 80186ee:	f7f9 ff25 	bl	801253c <pbuf_free>
    q = NULL;
 80186f2:	2300      	movs	r3, #0
 80186f4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80186f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80186fa:	4618      	mov	r0, r3
 80186fc:	3720      	adds	r7, #32
 80186fe:	46bd      	mov	sp, r7
 8018700:	bd80      	pop	{r7, pc}
 8018702:	bf00      	nop
 8018704:	0801f554 	.word	0x0801f554
 8018708:	0801f740 	.word	0x0801f740
 801870c:	0801f5a8 	.word	0x0801f5a8
 8018710:	0801f760 	.word	0x0801f760
 8018714:	0801f780 	.word	0x0801f780
 8018718:	0801f7a4 	.word	0x0801f7a4
 801871c:	0801f7c8 	.word	0x0801f7c8
 8018720:	0801f7ec 	.word	0x0801f7ec

08018724 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b086      	sub	sp, #24
 8018728:	af00      	add	r7, sp, #0
 801872a:	60f8      	str	r0, [r7, #12]
 801872c:	60b9      	str	r1, [r7, #8]
 801872e:	4613      	mov	r3, r2
 8018730:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018732:	68bb      	ldr	r3, [r7, #8]
 8018734:	2b00      	cmp	r3, #0
 8018736:	d101      	bne.n	801873c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018738:	4b39      	ldr	r3, [pc, #228]	@ (8018820 <udp_bind+0xfc>)
 801873a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d109      	bne.n	8018756 <udp_bind+0x32>
 8018742:	4b38      	ldr	r3, [pc, #224]	@ (8018824 <udp_bind+0x100>)
 8018744:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8018748:	4937      	ldr	r1, [pc, #220]	@ (8018828 <udp_bind+0x104>)
 801874a:	4838      	ldr	r0, [pc, #224]	@ (801882c <udp_bind+0x108>)
 801874c:	f003 fd8a 	bl	801c264 <iprintf>
 8018750:	f06f 030f 	mvn.w	r3, #15
 8018754:	e060      	b.n	8018818 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8018756:	2300      	movs	r3, #0
 8018758:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801875a:	4b35      	ldr	r3, [pc, #212]	@ (8018830 <udp_bind+0x10c>)
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	617b      	str	r3, [r7, #20]
 8018760:	e009      	b.n	8018776 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8018762:	68fa      	ldr	r2, [r7, #12]
 8018764:	697b      	ldr	r3, [r7, #20]
 8018766:	429a      	cmp	r2, r3
 8018768:	d102      	bne.n	8018770 <udp_bind+0x4c>
      rebind = 1;
 801876a:	2301      	movs	r3, #1
 801876c:	74fb      	strb	r3, [r7, #19]
      break;
 801876e:	e005      	b.n	801877c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018770:	697b      	ldr	r3, [r7, #20]
 8018772:	68db      	ldr	r3, [r3, #12]
 8018774:	617b      	str	r3, [r7, #20]
 8018776:	697b      	ldr	r3, [r7, #20]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d1f2      	bne.n	8018762 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801877c:	88fb      	ldrh	r3, [r7, #6]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d109      	bne.n	8018796 <udp_bind+0x72>
    port = udp_new_port();
 8018782:	f7ff fc69 	bl	8018058 <udp_new_port>
 8018786:	4603      	mov	r3, r0
 8018788:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801878a:	88fb      	ldrh	r3, [r7, #6]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d12c      	bne.n	80187ea <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018790:	f06f 0307 	mvn.w	r3, #7
 8018794:	e040      	b.n	8018818 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018796:	4b26      	ldr	r3, [pc, #152]	@ (8018830 <udp_bind+0x10c>)
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	617b      	str	r3, [r7, #20]
 801879c:	e022      	b.n	80187e4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801879e:	68fa      	ldr	r2, [r7, #12]
 80187a0:	697b      	ldr	r3, [r7, #20]
 80187a2:	429a      	cmp	r2, r3
 80187a4:	d01b      	beq.n	80187de <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80187a6:	697b      	ldr	r3, [r7, #20]
 80187a8:	8a5b      	ldrh	r3, [r3, #18]
 80187aa:	88fa      	ldrh	r2, [r7, #6]
 80187ac:	429a      	cmp	r2, r3
 80187ae:	d116      	bne.n	80187de <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80187b0:	697b      	ldr	r3, [r7, #20]
 80187b2:	681a      	ldr	r2, [r3, #0]
 80187b4:	68bb      	ldr	r3, [r7, #8]
 80187b6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80187b8:	429a      	cmp	r2, r3
 80187ba:	d00d      	beq.n	80187d8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80187bc:	68bb      	ldr	r3, [r7, #8]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d00a      	beq.n	80187d8 <udp_bind+0xb4>
 80187c2:	68bb      	ldr	r3, [r7, #8]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d006      	beq.n	80187d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80187ca:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d003      	beq.n	80187d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80187d0:	697b      	ldr	r3, [r7, #20]
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d102      	bne.n	80187de <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80187d8:	f06f 0307 	mvn.w	r3, #7
 80187dc:	e01c      	b.n	8018818 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80187de:	697b      	ldr	r3, [r7, #20]
 80187e0:	68db      	ldr	r3, [r3, #12]
 80187e2:	617b      	str	r3, [r7, #20]
 80187e4:	697b      	ldr	r3, [r7, #20]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d1d9      	bne.n	801879e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80187ea:	68bb      	ldr	r3, [r7, #8]
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d002      	beq.n	80187f6 <udp_bind+0xd2>
 80187f0:	68bb      	ldr	r3, [r7, #8]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	e000      	b.n	80187f8 <udp_bind+0xd4>
 80187f6:	2300      	movs	r3, #0
 80187f8:	68fa      	ldr	r2, [r7, #12]
 80187fa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	88fa      	ldrh	r2, [r7, #6]
 8018800:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018802:	7cfb      	ldrb	r3, [r7, #19]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d106      	bne.n	8018816 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018808:	4b09      	ldr	r3, [pc, #36]	@ (8018830 <udp_bind+0x10c>)
 801880a:	681a      	ldr	r2, [r3, #0]
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018810:	4a07      	ldr	r2, [pc, #28]	@ (8018830 <udp_bind+0x10c>)
 8018812:	68fb      	ldr	r3, [r7, #12]
 8018814:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8018816:	2300      	movs	r3, #0
}
 8018818:	4618      	mov	r0, r3
 801881a:	3718      	adds	r7, #24
 801881c:	46bd      	mov	sp, r7
 801881e:	bd80      	pop	{r7, pc}
 8018820:	08020718 	.word	0x08020718
 8018824:	0801f554 	.word	0x0801f554
 8018828:	0801f81c 	.word	0x0801f81c
 801882c:	0801f5a8 	.word	0x0801f5a8
 8018830:	200275d8 	.word	0x200275d8

08018834 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8018834:	b580      	push	{r7, lr}
 8018836:	b084      	sub	sp, #16
 8018838:	af00      	add	r7, sp, #0
 801883a:	60f8      	str	r0, [r7, #12]
 801883c:	60b9      	str	r1, [r7, #8]
 801883e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d107      	bne.n	8018856 <udp_recv+0x22>
 8018846:	4b08      	ldr	r3, [pc, #32]	@ (8018868 <udp_recv+0x34>)
 8018848:	f240 428a 	movw	r2, #1162	@ 0x48a
 801884c:	4907      	ldr	r1, [pc, #28]	@ (801886c <udp_recv+0x38>)
 801884e:	4808      	ldr	r0, [pc, #32]	@ (8018870 <udp_recv+0x3c>)
 8018850:	f003 fd08 	bl	801c264 <iprintf>
 8018854:	e005      	b.n	8018862 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	68ba      	ldr	r2, [r7, #8]
 801885a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	687a      	ldr	r2, [r7, #4]
 8018860:	61da      	str	r2, [r3, #28]
}
 8018862:	3710      	adds	r7, #16
 8018864:	46bd      	mov	sp, r7
 8018866:	bd80      	pop	{r7, pc}
 8018868:	0801f554 	.word	0x0801f554
 801886c:	0801f888 	.word	0x0801f888
 8018870:	0801f5a8 	.word	0x0801f5a8

08018874 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018874:	b580      	push	{r7, lr}
 8018876:	b082      	sub	sp, #8
 8018878:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801887a:	2000      	movs	r0, #0
 801887c:	f7f8 ff44 	bl	8011708 <memp_malloc>
 8018880:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	2b00      	cmp	r3, #0
 8018886:	d007      	beq.n	8018898 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018888:	2220      	movs	r2, #32
 801888a:	2100      	movs	r1, #0
 801888c:	6878      	ldr	r0, [r7, #4]
 801888e:	f003 fe41 	bl	801c514 <memset>
    pcb->ttl = UDP_TTL;
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	22ff      	movs	r2, #255	@ 0xff
 8018896:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018898:	687b      	ldr	r3, [r7, #4]
}
 801889a:	4618      	mov	r0, r3
 801889c:	3708      	adds	r7, #8
 801889e:	46bd      	mov	sp, r7
 80188a0:	bd80      	pop	{r7, pc}
	...

080188a4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80188a4:	b480      	push	{r7}
 80188a6:	b085      	sub	sp, #20
 80188a8:	af00      	add	r7, sp, #0
 80188aa:	6078      	str	r0, [r7, #4]
 80188ac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d01e      	beq.n	80188f2 <udp_netif_ip_addr_changed+0x4e>
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d01a      	beq.n	80188f2 <udp_netif_ip_addr_changed+0x4e>
 80188bc:	683b      	ldr	r3, [r7, #0]
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d017      	beq.n	80188f2 <udp_netif_ip_addr_changed+0x4e>
 80188c2:	683b      	ldr	r3, [r7, #0]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d013      	beq.n	80188f2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80188ca:	4b0d      	ldr	r3, [pc, #52]	@ (8018900 <udp_netif_ip_addr_changed+0x5c>)
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	60fb      	str	r3, [r7, #12]
 80188d0:	e00c      	b.n	80188ec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	681a      	ldr	r2, [r3, #0]
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	429a      	cmp	r2, r3
 80188dc:	d103      	bne.n	80188e6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80188de:	683b      	ldr	r3, [r7, #0]
 80188e0:	681a      	ldr	r2, [r3, #0]
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80188e6:	68fb      	ldr	r3, [r7, #12]
 80188e8:	68db      	ldr	r3, [r3, #12]
 80188ea:	60fb      	str	r3, [r7, #12]
 80188ec:	68fb      	ldr	r3, [r7, #12]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d1ef      	bne.n	80188d2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80188f2:	bf00      	nop
 80188f4:	3714      	adds	r7, #20
 80188f6:	46bd      	mov	sp, r7
 80188f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188fc:	4770      	bx	lr
 80188fe:	bf00      	nop
 8018900:	200275d8 	.word	0x200275d8

08018904 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b082      	sub	sp, #8
 8018908:	af00      	add	r7, sp, #0
 801890a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801890c:	4915      	ldr	r1, [pc, #84]	@ (8018964 <etharp_free_entry+0x60>)
 801890e:	687a      	ldr	r2, [r7, #4]
 8018910:	4613      	mov	r3, r2
 8018912:	005b      	lsls	r3, r3, #1
 8018914:	4413      	add	r3, r2
 8018916:	00db      	lsls	r3, r3, #3
 8018918:	440b      	add	r3, r1
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d013      	beq.n	8018948 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018920:	4910      	ldr	r1, [pc, #64]	@ (8018964 <etharp_free_entry+0x60>)
 8018922:	687a      	ldr	r2, [r7, #4]
 8018924:	4613      	mov	r3, r2
 8018926:	005b      	lsls	r3, r3, #1
 8018928:	4413      	add	r3, r2
 801892a:	00db      	lsls	r3, r3, #3
 801892c:	440b      	add	r3, r1
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	4618      	mov	r0, r3
 8018932:	f7f9 fe03 	bl	801253c <pbuf_free>
    arp_table[i].q = NULL;
 8018936:	490b      	ldr	r1, [pc, #44]	@ (8018964 <etharp_free_entry+0x60>)
 8018938:	687a      	ldr	r2, [r7, #4]
 801893a:	4613      	mov	r3, r2
 801893c:	005b      	lsls	r3, r3, #1
 801893e:	4413      	add	r3, r2
 8018940:	00db      	lsls	r3, r3, #3
 8018942:	440b      	add	r3, r1
 8018944:	2200      	movs	r2, #0
 8018946:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018948:	4906      	ldr	r1, [pc, #24]	@ (8018964 <etharp_free_entry+0x60>)
 801894a:	687a      	ldr	r2, [r7, #4]
 801894c:	4613      	mov	r3, r2
 801894e:	005b      	lsls	r3, r3, #1
 8018950:	4413      	add	r3, r2
 8018952:	00db      	lsls	r3, r3, #3
 8018954:	440b      	add	r3, r1
 8018956:	3314      	adds	r3, #20
 8018958:	2200      	movs	r2, #0
 801895a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801895c:	bf00      	nop
 801895e:	3708      	adds	r7, #8
 8018960:	46bd      	mov	sp, r7
 8018962:	bd80      	pop	{r7, pc}
 8018964:	200275dc 	.word	0x200275dc

08018968 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b082      	sub	sp, #8
 801896c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801896e:	2300      	movs	r3, #0
 8018970:	607b      	str	r3, [r7, #4]
 8018972:	e096      	b.n	8018aa2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018974:	494f      	ldr	r1, [pc, #316]	@ (8018ab4 <etharp_tmr+0x14c>)
 8018976:	687a      	ldr	r2, [r7, #4]
 8018978:	4613      	mov	r3, r2
 801897a:	005b      	lsls	r3, r3, #1
 801897c:	4413      	add	r3, r2
 801897e:	00db      	lsls	r3, r3, #3
 8018980:	440b      	add	r3, r1
 8018982:	3314      	adds	r3, #20
 8018984:	781b      	ldrb	r3, [r3, #0]
 8018986:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018988:	78fb      	ldrb	r3, [r7, #3]
 801898a:	2b00      	cmp	r3, #0
 801898c:	f000 8086 	beq.w	8018a9c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018990:	4948      	ldr	r1, [pc, #288]	@ (8018ab4 <etharp_tmr+0x14c>)
 8018992:	687a      	ldr	r2, [r7, #4]
 8018994:	4613      	mov	r3, r2
 8018996:	005b      	lsls	r3, r3, #1
 8018998:	4413      	add	r3, r2
 801899a:	00db      	lsls	r3, r3, #3
 801899c:	440b      	add	r3, r1
 801899e:	3312      	adds	r3, #18
 80189a0:	881b      	ldrh	r3, [r3, #0]
 80189a2:	3301      	adds	r3, #1
 80189a4:	b298      	uxth	r0, r3
 80189a6:	4943      	ldr	r1, [pc, #268]	@ (8018ab4 <etharp_tmr+0x14c>)
 80189a8:	687a      	ldr	r2, [r7, #4]
 80189aa:	4613      	mov	r3, r2
 80189ac:	005b      	lsls	r3, r3, #1
 80189ae:	4413      	add	r3, r2
 80189b0:	00db      	lsls	r3, r3, #3
 80189b2:	440b      	add	r3, r1
 80189b4:	3312      	adds	r3, #18
 80189b6:	4602      	mov	r2, r0
 80189b8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80189ba:	493e      	ldr	r1, [pc, #248]	@ (8018ab4 <etharp_tmr+0x14c>)
 80189bc:	687a      	ldr	r2, [r7, #4]
 80189be:	4613      	mov	r3, r2
 80189c0:	005b      	lsls	r3, r3, #1
 80189c2:	4413      	add	r3, r2
 80189c4:	00db      	lsls	r3, r3, #3
 80189c6:	440b      	add	r3, r1
 80189c8:	3312      	adds	r3, #18
 80189ca:	881b      	ldrh	r3, [r3, #0]
 80189cc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80189d0:	d215      	bcs.n	80189fe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80189d2:	4938      	ldr	r1, [pc, #224]	@ (8018ab4 <etharp_tmr+0x14c>)
 80189d4:	687a      	ldr	r2, [r7, #4]
 80189d6:	4613      	mov	r3, r2
 80189d8:	005b      	lsls	r3, r3, #1
 80189da:	4413      	add	r3, r2
 80189dc:	00db      	lsls	r3, r3, #3
 80189de:	440b      	add	r3, r1
 80189e0:	3314      	adds	r3, #20
 80189e2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80189e4:	2b01      	cmp	r3, #1
 80189e6:	d10e      	bne.n	8018a06 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80189e8:	4932      	ldr	r1, [pc, #200]	@ (8018ab4 <etharp_tmr+0x14c>)
 80189ea:	687a      	ldr	r2, [r7, #4]
 80189ec:	4613      	mov	r3, r2
 80189ee:	005b      	lsls	r3, r3, #1
 80189f0:	4413      	add	r3, r2
 80189f2:	00db      	lsls	r3, r3, #3
 80189f4:	440b      	add	r3, r1
 80189f6:	3312      	adds	r3, #18
 80189f8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80189fa:	2b04      	cmp	r3, #4
 80189fc:	d903      	bls.n	8018a06 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80189fe:	6878      	ldr	r0, [r7, #4]
 8018a00:	f7ff ff80 	bl	8018904 <etharp_free_entry>
 8018a04:	e04a      	b.n	8018a9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018a06:	492b      	ldr	r1, [pc, #172]	@ (8018ab4 <etharp_tmr+0x14c>)
 8018a08:	687a      	ldr	r2, [r7, #4]
 8018a0a:	4613      	mov	r3, r2
 8018a0c:	005b      	lsls	r3, r3, #1
 8018a0e:	4413      	add	r3, r2
 8018a10:	00db      	lsls	r3, r3, #3
 8018a12:	440b      	add	r3, r1
 8018a14:	3314      	adds	r3, #20
 8018a16:	781b      	ldrb	r3, [r3, #0]
 8018a18:	2b03      	cmp	r3, #3
 8018a1a:	d10a      	bne.n	8018a32 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018a1c:	4925      	ldr	r1, [pc, #148]	@ (8018ab4 <etharp_tmr+0x14c>)
 8018a1e:	687a      	ldr	r2, [r7, #4]
 8018a20:	4613      	mov	r3, r2
 8018a22:	005b      	lsls	r3, r3, #1
 8018a24:	4413      	add	r3, r2
 8018a26:	00db      	lsls	r3, r3, #3
 8018a28:	440b      	add	r3, r1
 8018a2a:	3314      	adds	r3, #20
 8018a2c:	2204      	movs	r2, #4
 8018a2e:	701a      	strb	r2, [r3, #0]
 8018a30:	e034      	b.n	8018a9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018a32:	4920      	ldr	r1, [pc, #128]	@ (8018ab4 <etharp_tmr+0x14c>)
 8018a34:	687a      	ldr	r2, [r7, #4]
 8018a36:	4613      	mov	r3, r2
 8018a38:	005b      	lsls	r3, r3, #1
 8018a3a:	4413      	add	r3, r2
 8018a3c:	00db      	lsls	r3, r3, #3
 8018a3e:	440b      	add	r3, r1
 8018a40:	3314      	adds	r3, #20
 8018a42:	781b      	ldrb	r3, [r3, #0]
 8018a44:	2b04      	cmp	r3, #4
 8018a46:	d10a      	bne.n	8018a5e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018a48:	491a      	ldr	r1, [pc, #104]	@ (8018ab4 <etharp_tmr+0x14c>)
 8018a4a:	687a      	ldr	r2, [r7, #4]
 8018a4c:	4613      	mov	r3, r2
 8018a4e:	005b      	lsls	r3, r3, #1
 8018a50:	4413      	add	r3, r2
 8018a52:	00db      	lsls	r3, r3, #3
 8018a54:	440b      	add	r3, r1
 8018a56:	3314      	adds	r3, #20
 8018a58:	2202      	movs	r2, #2
 8018a5a:	701a      	strb	r2, [r3, #0]
 8018a5c:	e01e      	b.n	8018a9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018a5e:	4915      	ldr	r1, [pc, #84]	@ (8018ab4 <etharp_tmr+0x14c>)
 8018a60:	687a      	ldr	r2, [r7, #4]
 8018a62:	4613      	mov	r3, r2
 8018a64:	005b      	lsls	r3, r3, #1
 8018a66:	4413      	add	r3, r2
 8018a68:	00db      	lsls	r3, r3, #3
 8018a6a:	440b      	add	r3, r1
 8018a6c:	3314      	adds	r3, #20
 8018a6e:	781b      	ldrb	r3, [r3, #0]
 8018a70:	2b01      	cmp	r3, #1
 8018a72:	d113      	bne.n	8018a9c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018a74:	490f      	ldr	r1, [pc, #60]	@ (8018ab4 <etharp_tmr+0x14c>)
 8018a76:	687a      	ldr	r2, [r7, #4]
 8018a78:	4613      	mov	r3, r2
 8018a7a:	005b      	lsls	r3, r3, #1
 8018a7c:	4413      	add	r3, r2
 8018a7e:	00db      	lsls	r3, r3, #3
 8018a80:	440b      	add	r3, r1
 8018a82:	3308      	adds	r3, #8
 8018a84:	6818      	ldr	r0, [r3, #0]
 8018a86:	687a      	ldr	r2, [r7, #4]
 8018a88:	4613      	mov	r3, r2
 8018a8a:	005b      	lsls	r3, r3, #1
 8018a8c:	4413      	add	r3, r2
 8018a8e:	00db      	lsls	r3, r3, #3
 8018a90:	4a08      	ldr	r2, [pc, #32]	@ (8018ab4 <etharp_tmr+0x14c>)
 8018a92:	4413      	add	r3, r2
 8018a94:	3304      	adds	r3, #4
 8018a96:	4619      	mov	r1, r3
 8018a98:	f000 fe6e 	bl	8019778 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	3301      	adds	r3, #1
 8018aa0:	607b      	str	r3, [r7, #4]
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	2b09      	cmp	r3, #9
 8018aa6:	f77f af65 	ble.w	8018974 <etharp_tmr+0xc>
      }
    }
  }
}
 8018aaa:	bf00      	nop
 8018aac:	bf00      	nop
 8018aae:	3708      	adds	r7, #8
 8018ab0:	46bd      	mov	sp, r7
 8018ab2:	bd80      	pop	{r7, pc}
 8018ab4:	200275dc 	.word	0x200275dc

08018ab8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018ab8:	b580      	push	{r7, lr}
 8018aba:	b08a      	sub	sp, #40	@ 0x28
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	60f8      	str	r0, [r7, #12]
 8018ac0:	460b      	mov	r3, r1
 8018ac2:	607a      	str	r2, [r7, #4]
 8018ac4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018ac6:	230a      	movs	r3, #10
 8018ac8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8018aca:	230a      	movs	r3, #10
 8018acc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8018ace:	230a      	movs	r3, #10
 8018ad0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8018ad2:	2300      	movs	r3, #0
 8018ad4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018ad6:	230a      	movs	r3, #10
 8018ad8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018ada:	2300      	movs	r3, #0
 8018adc:	83bb      	strh	r3, [r7, #28]
 8018ade:	2300      	movs	r3, #0
 8018ae0:	837b      	strh	r3, [r7, #26]
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018ae6:	2300      	movs	r3, #0
 8018ae8:	843b      	strh	r3, [r7, #32]
 8018aea:	e0ae      	b.n	8018c4a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018aec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018af0:	49a6      	ldr	r1, [pc, #664]	@ (8018d8c <etharp_find_entry+0x2d4>)
 8018af2:	4613      	mov	r3, r2
 8018af4:	005b      	lsls	r3, r3, #1
 8018af6:	4413      	add	r3, r2
 8018af8:	00db      	lsls	r3, r3, #3
 8018afa:	440b      	add	r3, r1
 8018afc:	3314      	adds	r3, #20
 8018afe:	781b      	ldrb	r3, [r3, #0]
 8018b00:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018b02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018b06:	2b0a      	cmp	r3, #10
 8018b08:	d105      	bne.n	8018b16 <etharp_find_entry+0x5e>
 8018b0a:	7dfb      	ldrb	r3, [r7, #23]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d102      	bne.n	8018b16 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018b10:	8c3b      	ldrh	r3, [r7, #32]
 8018b12:	847b      	strh	r3, [r7, #34]	@ 0x22
 8018b14:	e095      	b.n	8018c42 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018b16:	7dfb      	ldrb	r3, [r7, #23]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	f000 8092 	beq.w	8018c42 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018b1e:	7dfb      	ldrb	r3, [r7, #23]
 8018b20:	2b01      	cmp	r3, #1
 8018b22:	d009      	beq.n	8018b38 <etharp_find_entry+0x80>
 8018b24:	7dfb      	ldrb	r3, [r7, #23]
 8018b26:	2b01      	cmp	r3, #1
 8018b28:	d806      	bhi.n	8018b38 <etharp_find_entry+0x80>
 8018b2a:	4b99      	ldr	r3, [pc, #612]	@ (8018d90 <etharp_find_entry+0x2d8>)
 8018b2c:	f240 1223 	movw	r2, #291	@ 0x123
 8018b30:	4998      	ldr	r1, [pc, #608]	@ (8018d94 <etharp_find_entry+0x2dc>)
 8018b32:	4899      	ldr	r0, [pc, #612]	@ (8018d98 <etharp_find_entry+0x2e0>)
 8018b34:	f003 fb96 	bl	801c264 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d020      	beq.n	8018b80 <etharp_find_entry+0xc8>
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	6819      	ldr	r1, [r3, #0]
 8018b42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b46:	4891      	ldr	r0, [pc, #580]	@ (8018d8c <etharp_find_entry+0x2d4>)
 8018b48:	4613      	mov	r3, r2
 8018b4a:	005b      	lsls	r3, r3, #1
 8018b4c:	4413      	add	r3, r2
 8018b4e:	00db      	lsls	r3, r3, #3
 8018b50:	4403      	add	r3, r0
 8018b52:	3304      	adds	r3, #4
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	4299      	cmp	r1, r3
 8018b58:	d112      	bne.n	8018b80 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d00c      	beq.n	8018b7a <etharp_find_entry+0xc2>
 8018b60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b64:	4989      	ldr	r1, [pc, #548]	@ (8018d8c <etharp_find_entry+0x2d4>)
 8018b66:	4613      	mov	r3, r2
 8018b68:	005b      	lsls	r3, r3, #1
 8018b6a:	4413      	add	r3, r2
 8018b6c:	00db      	lsls	r3, r3, #3
 8018b6e:	440b      	add	r3, r1
 8018b70:	3308      	adds	r3, #8
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	687a      	ldr	r2, [r7, #4]
 8018b76:	429a      	cmp	r2, r3
 8018b78:	d102      	bne.n	8018b80 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018b7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018b7e:	e100      	b.n	8018d82 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018b80:	7dfb      	ldrb	r3, [r7, #23]
 8018b82:	2b01      	cmp	r3, #1
 8018b84:	d140      	bne.n	8018c08 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018b86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b8a:	4980      	ldr	r1, [pc, #512]	@ (8018d8c <etharp_find_entry+0x2d4>)
 8018b8c:	4613      	mov	r3, r2
 8018b8e:	005b      	lsls	r3, r3, #1
 8018b90:	4413      	add	r3, r2
 8018b92:	00db      	lsls	r3, r3, #3
 8018b94:	440b      	add	r3, r1
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d01a      	beq.n	8018bd2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018b9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ba0:	497a      	ldr	r1, [pc, #488]	@ (8018d8c <etharp_find_entry+0x2d4>)
 8018ba2:	4613      	mov	r3, r2
 8018ba4:	005b      	lsls	r3, r3, #1
 8018ba6:	4413      	add	r3, r2
 8018ba8:	00db      	lsls	r3, r3, #3
 8018baa:	440b      	add	r3, r1
 8018bac:	3312      	adds	r3, #18
 8018bae:	881b      	ldrh	r3, [r3, #0]
 8018bb0:	8bba      	ldrh	r2, [r7, #28]
 8018bb2:	429a      	cmp	r2, r3
 8018bb4:	d845      	bhi.n	8018c42 <etharp_find_entry+0x18a>
            old_queue = i;
 8018bb6:	8c3b      	ldrh	r3, [r7, #32]
 8018bb8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018bba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bbe:	4973      	ldr	r1, [pc, #460]	@ (8018d8c <etharp_find_entry+0x2d4>)
 8018bc0:	4613      	mov	r3, r2
 8018bc2:	005b      	lsls	r3, r3, #1
 8018bc4:	4413      	add	r3, r2
 8018bc6:	00db      	lsls	r3, r3, #3
 8018bc8:	440b      	add	r3, r1
 8018bca:	3312      	adds	r3, #18
 8018bcc:	881b      	ldrh	r3, [r3, #0]
 8018bce:	83bb      	strh	r3, [r7, #28]
 8018bd0:	e037      	b.n	8018c42 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018bd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bd6:	496d      	ldr	r1, [pc, #436]	@ (8018d8c <etharp_find_entry+0x2d4>)
 8018bd8:	4613      	mov	r3, r2
 8018bda:	005b      	lsls	r3, r3, #1
 8018bdc:	4413      	add	r3, r2
 8018bde:	00db      	lsls	r3, r3, #3
 8018be0:	440b      	add	r3, r1
 8018be2:	3312      	adds	r3, #18
 8018be4:	881b      	ldrh	r3, [r3, #0]
 8018be6:	8b7a      	ldrh	r2, [r7, #26]
 8018be8:	429a      	cmp	r2, r3
 8018bea:	d82a      	bhi.n	8018c42 <etharp_find_entry+0x18a>
            old_pending = i;
 8018bec:	8c3b      	ldrh	r3, [r7, #32]
 8018bee:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8018bf0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bf4:	4965      	ldr	r1, [pc, #404]	@ (8018d8c <etharp_find_entry+0x2d4>)
 8018bf6:	4613      	mov	r3, r2
 8018bf8:	005b      	lsls	r3, r3, #1
 8018bfa:	4413      	add	r3, r2
 8018bfc:	00db      	lsls	r3, r3, #3
 8018bfe:	440b      	add	r3, r1
 8018c00:	3312      	adds	r3, #18
 8018c02:	881b      	ldrh	r3, [r3, #0]
 8018c04:	837b      	strh	r3, [r7, #26]
 8018c06:	e01c      	b.n	8018c42 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018c08:	7dfb      	ldrb	r3, [r7, #23]
 8018c0a:	2b01      	cmp	r3, #1
 8018c0c:	d919      	bls.n	8018c42 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018c0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c12:	495e      	ldr	r1, [pc, #376]	@ (8018d8c <etharp_find_entry+0x2d4>)
 8018c14:	4613      	mov	r3, r2
 8018c16:	005b      	lsls	r3, r3, #1
 8018c18:	4413      	add	r3, r2
 8018c1a:	00db      	lsls	r3, r3, #3
 8018c1c:	440b      	add	r3, r1
 8018c1e:	3312      	adds	r3, #18
 8018c20:	881b      	ldrh	r3, [r3, #0]
 8018c22:	8b3a      	ldrh	r2, [r7, #24]
 8018c24:	429a      	cmp	r2, r3
 8018c26:	d80c      	bhi.n	8018c42 <etharp_find_entry+0x18a>
            old_stable = i;
 8018c28:	8c3b      	ldrh	r3, [r7, #32]
 8018c2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8018c2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c30:	4956      	ldr	r1, [pc, #344]	@ (8018d8c <etharp_find_entry+0x2d4>)
 8018c32:	4613      	mov	r3, r2
 8018c34:	005b      	lsls	r3, r3, #1
 8018c36:	4413      	add	r3, r2
 8018c38:	00db      	lsls	r3, r3, #3
 8018c3a:	440b      	add	r3, r1
 8018c3c:	3312      	adds	r3, #18
 8018c3e:	881b      	ldrh	r3, [r3, #0]
 8018c40:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018c42:	8c3b      	ldrh	r3, [r7, #32]
 8018c44:	3301      	adds	r3, #1
 8018c46:	b29b      	uxth	r3, r3
 8018c48:	843b      	strh	r3, [r7, #32]
 8018c4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c4e:	2b09      	cmp	r3, #9
 8018c50:	f77f af4c 	ble.w	8018aec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018c54:	7afb      	ldrb	r3, [r7, #11]
 8018c56:	f003 0302 	and.w	r3, r3, #2
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d108      	bne.n	8018c70 <etharp_find_entry+0x1b8>
 8018c5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018c62:	2b0a      	cmp	r3, #10
 8018c64:	d107      	bne.n	8018c76 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018c66:	7afb      	ldrb	r3, [r7, #11]
 8018c68:	f003 0301 	and.w	r3, r3, #1
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d102      	bne.n	8018c76 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018c70:	f04f 33ff 	mov.w	r3, #4294967295
 8018c74:	e085      	b.n	8018d82 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018c76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018c7a:	2b09      	cmp	r3, #9
 8018c7c:	dc02      	bgt.n	8018c84 <etharp_find_entry+0x1cc>
    i = empty;
 8018c7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018c80:	843b      	strh	r3, [r7, #32]
 8018c82:	e039      	b.n	8018cf8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018c84:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8018c88:	2b09      	cmp	r3, #9
 8018c8a:	dc14      	bgt.n	8018cb6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018c8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018c8e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018c90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c94:	493d      	ldr	r1, [pc, #244]	@ (8018d8c <etharp_find_entry+0x2d4>)
 8018c96:	4613      	mov	r3, r2
 8018c98:	005b      	lsls	r3, r3, #1
 8018c9a:	4413      	add	r3, r2
 8018c9c:	00db      	lsls	r3, r3, #3
 8018c9e:	440b      	add	r3, r1
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d018      	beq.n	8018cd8 <etharp_find_entry+0x220>
 8018ca6:	4b3a      	ldr	r3, [pc, #232]	@ (8018d90 <etharp_find_entry+0x2d8>)
 8018ca8:	f240 126d 	movw	r2, #365	@ 0x16d
 8018cac:	493b      	ldr	r1, [pc, #236]	@ (8018d9c <etharp_find_entry+0x2e4>)
 8018cae:	483a      	ldr	r0, [pc, #232]	@ (8018d98 <etharp_find_entry+0x2e0>)
 8018cb0:	f003 fad8 	bl	801c264 <iprintf>
 8018cb4:	e010      	b.n	8018cd8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018cb6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8018cba:	2b09      	cmp	r3, #9
 8018cbc:	dc02      	bgt.n	8018cc4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018cbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018cc0:	843b      	strh	r3, [r7, #32]
 8018cc2:	e009      	b.n	8018cd8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018cc4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018cc8:	2b09      	cmp	r3, #9
 8018cca:	dc02      	bgt.n	8018cd2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018ccc:	8bfb      	ldrh	r3, [r7, #30]
 8018cce:	843b      	strh	r3, [r7, #32]
 8018cd0:	e002      	b.n	8018cd8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8018cd6:	e054      	b.n	8018d82 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018cd8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018cdc:	2b09      	cmp	r3, #9
 8018cde:	dd06      	ble.n	8018cee <etharp_find_entry+0x236>
 8018ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8018d90 <etharp_find_entry+0x2d8>)
 8018ce2:	f240 127f 	movw	r2, #383	@ 0x17f
 8018ce6:	492e      	ldr	r1, [pc, #184]	@ (8018da0 <etharp_find_entry+0x2e8>)
 8018ce8:	482b      	ldr	r0, [pc, #172]	@ (8018d98 <etharp_find_entry+0x2e0>)
 8018cea:	f003 fabb 	bl	801c264 <iprintf>
    etharp_free_entry(i);
 8018cee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f7ff fe06 	bl	8018904 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018cf8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018cfc:	2b09      	cmp	r3, #9
 8018cfe:	dd06      	ble.n	8018d0e <etharp_find_entry+0x256>
 8018d00:	4b23      	ldr	r3, [pc, #140]	@ (8018d90 <etharp_find_entry+0x2d8>)
 8018d02:	f240 1283 	movw	r2, #387	@ 0x183
 8018d06:	4926      	ldr	r1, [pc, #152]	@ (8018da0 <etharp_find_entry+0x2e8>)
 8018d08:	4823      	ldr	r0, [pc, #140]	@ (8018d98 <etharp_find_entry+0x2e0>)
 8018d0a:	f003 faab 	bl	801c264 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018d0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d12:	491e      	ldr	r1, [pc, #120]	@ (8018d8c <etharp_find_entry+0x2d4>)
 8018d14:	4613      	mov	r3, r2
 8018d16:	005b      	lsls	r3, r3, #1
 8018d18:	4413      	add	r3, r2
 8018d1a:	00db      	lsls	r3, r3, #3
 8018d1c:	440b      	add	r3, r1
 8018d1e:	3314      	adds	r3, #20
 8018d20:	781b      	ldrb	r3, [r3, #0]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d006      	beq.n	8018d34 <etharp_find_entry+0x27c>
 8018d26:	4b1a      	ldr	r3, [pc, #104]	@ (8018d90 <etharp_find_entry+0x2d8>)
 8018d28:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8018d2c:	491d      	ldr	r1, [pc, #116]	@ (8018da4 <etharp_find_entry+0x2ec>)
 8018d2e:	481a      	ldr	r0, [pc, #104]	@ (8018d98 <etharp_find_entry+0x2e0>)
 8018d30:	f003 fa98 	bl	801c264 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d00b      	beq.n	8018d52 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018d3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	6819      	ldr	r1, [r3, #0]
 8018d42:	4812      	ldr	r0, [pc, #72]	@ (8018d8c <etharp_find_entry+0x2d4>)
 8018d44:	4613      	mov	r3, r2
 8018d46:	005b      	lsls	r3, r3, #1
 8018d48:	4413      	add	r3, r2
 8018d4a:	00db      	lsls	r3, r3, #3
 8018d4c:	4403      	add	r3, r0
 8018d4e:	3304      	adds	r3, #4
 8018d50:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018d52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d56:	490d      	ldr	r1, [pc, #52]	@ (8018d8c <etharp_find_entry+0x2d4>)
 8018d58:	4613      	mov	r3, r2
 8018d5a:	005b      	lsls	r3, r3, #1
 8018d5c:	4413      	add	r3, r2
 8018d5e:	00db      	lsls	r3, r3, #3
 8018d60:	440b      	add	r3, r1
 8018d62:	3312      	adds	r3, #18
 8018d64:	2200      	movs	r2, #0
 8018d66:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018d68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d6c:	4907      	ldr	r1, [pc, #28]	@ (8018d8c <etharp_find_entry+0x2d4>)
 8018d6e:	4613      	mov	r3, r2
 8018d70:	005b      	lsls	r3, r3, #1
 8018d72:	4413      	add	r3, r2
 8018d74:	00db      	lsls	r3, r3, #3
 8018d76:	440b      	add	r3, r1
 8018d78:	3308      	adds	r3, #8
 8018d7a:	687a      	ldr	r2, [r7, #4]
 8018d7c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018d7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018d82:	4618      	mov	r0, r3
 8018d84:	3728      	adds	r7, #40	@ 0x28
 8018d86:	46bd      	mov	sp, r7
 8018d88:	bd80      	pop	{r7, pc}
 8018d8a:	bf00      	nop
 8018d8c:	200275dc 	.word	0x200275dc
 8018d90:	0801f8b8 	.word	0x0801f8b8
 8018d94:	0801f8f0 	.word	0x0801f8f0
 8018d98:	0801f930 	.word	0x0801f930
 8018d9c:	0801f958 	.word	0x0801f958
 8018da0:	0801f970 	.word	0x0801f970
 8018da4:	0801f984 	.word	0x0801f984

08018da8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b088      	sub	sp, #32
 8018dac:	af02      	add	r7, sp, #8
 8018dae:	60f8      	str	r0, [r7, #12]
 8018db0:	60b9      	str	r1, [r7, #8]
 8018db2:	607a      	str	r2, [r7, #4]
 8018db4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018db6:	68fb      	ldr	r3, [r7, #12]
 8018db8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018dbc:	2b06      	cmp	r3, #6
 8018dbe:	d006      	beq.n	8018dce <etharp_update_arp_entry+0x26>
 8018dc0:	4b48      	ldr	r3, [pc, #288]	@ (8018ee4 <etharp_update_arp_entry+0x13c>)
 8018dc2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8018dc6:	4948      	ldr	r1, [pc, #288]	@ (8018ee8 <etharp_update_arp_entry+0x140>)
 8018dc8:	4848      	ldr	r0, [pc, #288]	@ (8018eec <etharp_update_arp_entry+0x144>)
 8018dca:	f003 fa4b 	bl	801c264 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018dce:	68bb      	ldr	r3, [r7, #8]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d012      	beq.n	8018dfa <etharp_update_arp_entry+0x52>
 8018dd4:	68bb      	ldr	r3, [r7, #8]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d00e      	beq.n	8018dfa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018ddc:	68bb      	ldr	r3, [r7, #8]
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	68f9      	ldr	r1, [r7, #12]
 8018de2:	4618      	mov	r0, r3
 8018de4:	f001 f8fe 	bl	8019fe4 <ip4_addr_isbroadcast_u32>
 8018de8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d105      	bne.n	8018dfa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018dee:	68bb      	ldr	r3, [r7, #8]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018df6:	2be0      	cmp	r3, #224	@ 0xe0
 8018df8:	d102      	bne.n	8018e00 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018dfa:	f06f 030f 	mvn.w	r3, #15
 8018dfe:	e06c      	b.n	8018eda <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018e00:	78fb      	ldrb	r3, [r7, #3]
 8018e02:	68fa      	ldr	r2, [r7, #12]
 8018e04:	4619      	mov	r1, r3
 8018e06:	68b8      	ldr	r0, [r7, #8]
 8018e08:	f7ff fe56 	bl	8018ab8 <etharp_find_entry>
 8018e0c:	4603      	mov	r3, r0
 8018e0e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018e10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	da02      	bge.n	8018e1e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018e18:	8afb      	ldrh	r3, [r7, #22]
 8018e1a:	b25b      	sxtb	r3, r3
 8018e1c:	e05d      	b.n	8018eda <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018e1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018e22:	4933      	ldr	r1, [pc, #204]	@ (8018ef0 <etharp_update_arp_entry+0x148>)
 8018e24:	4613      	mov	r3, r2
 8018e26:	005b      	lsls	r3, r3, #1
 8018e28:	4413      	add	r3, r2
 8018e2a:	00db      	lsls	r3, r3, #3
 8018e2c:	440b      	add	r3, r1
 8018e2e:	3314      	adds	r3, #20
 8018e30:	2202      	movs	r2, #2
 8018e32:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018e34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018e38:	492d      	ldr	r1, [pc, #180]	@ (8018ef0 <etharp_update_arp_entry+0x148>)
 8018e3a:	4613      	mov	r3, r2
 8018e3c:	005b      	lsls	r3, r3, #1
 8018e3e:	4413      	add	r3, r2
 8018e40:	00db      	lsls	r3, r3, #3
 8018e42:	440b      	add	r3, r1
 8018e44:	3308      	adds	r3, #8
 8018e46:	68fa      	ldr	r2, [r7, #12]
 8018e48:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018e4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018e4e:	4613      	mov	r3, r2
 8018e50:	005b      	lsls	r3, r3, #1
 8018e52:	4413      	add	r3, r2
 8018e54:	00db      	lsls	r3, r3, #3
 8018e56:	3308      	adds	r3, #8
 8018e58:	4a25      	ldr	r2, [pc, #148]	@ (8018ef0 <etharp_update_arp_entry+0x148>)
 8018e5a:	4413      	add	r3, r2
 8018e5c:	3304      	adds	r3, #4
 8018e5e:	2206      	movs	r2, #6
 8018e60:	6879      	ldr	r1, [r7, #4]
 8018e62:	4618      	mov	r0, r3
 8018e64:	f003 fc29 	bl	801c6ba <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018e68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018e6c:	4920      	ldr	r1, [pc, #128]	@ (8018ef0 <etharp_update_arp_entry+0x148>)
 8018e6e:	4613      	mov	r3, r2
 8018e70:	005b      	lsls	r3, r3, #1
 8018e72:	4413      	add	r3, r2
 8018e74:	00db      	lsls	r3, r3, #3
 8018e76:	440b      	add	r3, r1
 8018e78:	3312      	adds	r3, #18
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018e7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018e82:	491b      	ldr	r1, [pc, #108]	@ (8018ef0 <etharp_update_arp_entry+0x148>)
 8018e84:	4613      	mov	r3, r2
 8018e86:	005b      	lsls	r3, r3, #1
 8018e88:	4413      	add	r3, r2
 8018e8a:	00db      	lsls	r3, r3, #3
 8018e8c:	440b      	add	r3, r1
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d021      	beq.n	8018ed8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018e94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018e98:	4915      	ldr	r1, [pc, #84]	@ (8018ef0 <etharp_update_arp_entry+0x148>)
 8018e9a:	4613      	mov	r3, r2
 8018e9c:	005b      	lsls	r3, r3, #1
 8018e9e:	4413      	add	r3, r2
 8018ea0:	00db      	lsls	r3, r3, #3
 8018ea2:	440b      	add	r3, r1
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018ea8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018eac:	4910      	ldr	r1, [pc, #64]	@ (8018ef0 <etharp_update_arp_entry+0x148>)
 8018eae:	4613      	mov	r3, r2
 8018eb0:	005b      	lsls	r3, r3, #1
 8018eb2:	4413      	add	r3, r2
 8018eb4:	00db      	lsls	r3, r3, #3
 8018eb6:	440b      	add	r3, r1
 8018eb8:	2200      	movs	r2, #0
 8018eba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8018ec2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018ec6:	9300      	str	r3, [sp, #0]
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	6939      	ldr	r1, [r7, #16]
 8018ecc:	68f8      	ldr	r0, [r7, #12]
 8018ece:	f002 f827 	bl	801af20 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018ed2:	6938      	ldr	r0, [r7, #16]
 8018ed4:	f7f9 fb32 	bl	801253c <pbuf_free>
  }
  return ERR_OK;
 8018ed8:	2300      	movs	r3, #0
}
 8018eda:	4618      	mov	r0, r3
 8018edc:	3718      	adds	r7, #24
 8018ede:	46bd      	mov	sp, r7
 8018ee0:	bd80      	pop	{r7, pc}
 8018ee2:	bf00      	nop
 8018ee4:	0801f8b8 	.word	0x0801f8b8
 8018ee8:	0801f9b0 	.word	0x0801f9b0
 8018eec:	0801f930 	.word	0x0801f930
 8018ef0:	200275dc 	.word	0x200275dc

08018ef4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018ef4:	b580      	push	{r7, lr}
 8018ef6:	b084      	sub	sp, #16
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018efc:	2300      	movs	r3, #0
 8018efe:	60fb      	str	r3, [r7, #12]
 8018f00:	e01e      	b.n	8018f40 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018f02:	4913      	ldr	r1, [pc, #76]	@ (8018f50 <etharp_cleanup_netif+0x5c>)
 8018f04:	68fa      	ldr	r2, [r7, #12]
 8018f06:	4613      	mov	r3, r2
 8018f08:	005b      	lsls	r3, r3, #1
 8018f0a:	4413      	add	r3, r2
 8018f0c:	00db      	lsls	r3, r3, #3
 8018f0e:	440b      	add	r3, r1
 8018f10:	3314      	adds	r3, #20
 8018f12:	781b      	ldrb	r3, [r3, #0]
 8018f14:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018f16:	7afb      	ldrb	r3, [r7, #11]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d00e      	beq.n	8018f3a <etharp_cleanup_netif+0x46>
 8018f1c:	490c      	ldr	r1, [pc, #48]	@ (8018f50 <etharp_cleanup_netif+0x5c>)
 8018f1e:	68fa      	ldr	r2, [r7, #12]
 8018f20:	4613      	mov	r3, r2
 8018f22:	005b      	lsls	r3, r3, #1
 8018f24:	4413      	add	r3, r2
 8018f26:	00db      	lsls	r3, r3, #3
 8018f28:	440b      	add	r3, r1
 8018f2a:	3308      	adds	r3, #8
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	687a      	ldr	r2, [r7, #4]
 8018f30:	429a      	cmp	r2, r3
 8018f32:	d102      	bne.n	8018f3a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018f34:	68f8      	ldr	r0, [r7, #12]
 8018f36:	f7ff fce5 	bl	8018904 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	3301      	adds	r3, #1
 8018f3e:	60fb      	str	r3, [r7, #12]
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	2b09      	cmp	r3, #9
 8018f44:	dddd      	ble.n	8018f02 <etharp_cleanup_netif+0xe>
    }
  }
}
 8018f46:	bf00      	nop
 8018f48:	bf00      	nop
 8018f4a:	3710      	adds	r7, #16
 8018f4c:	46bd      	mov	sp, r7
 8018f4e:	bd80      	pop	{r7, pc}
 8018f50:	200275dc 	.word	0x200275dc

08018f54 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018f54:	b5b0      	push	{r4, r5, r7, lr}
 8018f56:	b08a      	sub	sp, #40	@ 0x28
 8018f58:	af04      	add	r7, sp, #16
 8018f5a:	6078      	str	r0, [r7, #4]
 8018f5c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018f5e:	683b      	ldr	r3, [r7, #0]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d107      	bne.n	8018f74 <etharp_input+0x20>
 8018f64:	4b3d      	ldr	r3, [pc, #244]	@ (801905c <etharp_input+0x108>)
 8018f66:	f240 228a 	movw	r2, #650	@ 0x28a
 8018f6a:	493d      	ldr	r1, [pc, #244]	@ (8019060 <etharp_input+0x10c>)
 8018f6c:	483d      	ldr	r0, [pc, #244]	@ (8019064 <etharp_input+0x110>)
 8018f6e:	f003 f979 	bl	801c264 <iprintf>
 8018f72:	e06f      	b.n	8019054 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	685b      	ldr	r3, [r3, #4]
 8018f78:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018f7a:	693b      	ldr	r3, [r7, #16]
 8018f7c:	881b      	ldrh	r3, [r3, #0]
 8018f7e:	b29b      	uxth	r3, r3
 8018f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018f84:	d10c      	bne.n	8018fa0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018f86:	693b      	ldr	r3, [r7, #16]
 8018f88:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018f8a:	2b06      	cmp	r3, #6
 8018f8c:	d108      	bne.n	8018fa0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018f8e:	693b      	ldr	r3, [r7, #16]
 8018f90:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018f92:	2b04      	cmp	r3, #4
 8018f94:	d104      	bne.n	8018fa0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018f96:	693b      	ldr	r3, [r7, #16]
 8018f98:	885b      	ldrh	r3, [r3, #2]
 8018f9a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018f9c:	2b08      	cmp	r3, #8
 8018f9e:	d003      	beq.n	8018fa8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018fa0:	6878      	ldr	r0, [r7, #4]
 8018fa2:	f7f9 facb 	bl	801253c <pbuf_free>
    return;
 8018fa6:	e055      	b.n	8019054 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018fa8:	693b      	ldr	r3, [r7, #16]
 8018faa:	330e      	adds	r3, #14
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018fb0:	693b      	ldr	r3, [r7, #16]
 8018fb2:	3318      	adds	r3, #24
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018fb8:	683b      	ldr	r3, [r7, #0]
 8018fba:	3304      	adds	r3, #4
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d102      	bne.n	8018fc8 <etharp_input+0x74>
    for_us = 0;
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	75fb      	strb	r3, [r7, #23]
 8018fc6:	e009      	b.n	8018fdc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018fc8:	68ba      	ldr	r2, [r7, #8]
 8018fca:	683b      	ldr	r3, [r7, #0]
 8018fcc:	3304      	adds	r3, #4
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	429a      	cmp	r2, r3
 8018fd2:	bf0c      	ite	eq
 8018fd4:	2301      	moveq	r3, #1
 8018fd6:	2300      	movne	r3, #0
 8018fd8:	b2db      	uxtb	r3, r3
 8018fda:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018fdc:	693b      	ldr	r3, [r7, #16]
 8018fde:	f103 0208 	add.w	r2, r3, #8
 8018fe2:	7dfb      	ldrb	r3, [r7, #23]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d001      	beq.n	8018fec <etharp_input+0x98>
 8018fe8:	2301      	movs	r3, #1
 8018fea:	e000      	b.n	8018fee <etharp_input+0x9a>
 8018fec:	2302      	movs	r3, #2
 8018fee:	f107 010c 	add.w	r1, r7, #12
 8018ff2:	6838      	ldr	r0, [r7, #0]
 8018ff4:	f7ff fed8 	bl	8018da8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018ff8:	693b      	ldr	r3, [r7, #16]
 8018ffa:	88db      	ldrh	r3, [r3, #6]
 8018ffc:	b29b      	uxth	r3, r3
 8018ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019002:	d003      	beq.n	801900c <etharp_input+0xb8>
 8019004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019008:	d01e      	beq.n	8019048 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801900a:	e020      	b.n	801904e <etharp_input+0xfa>
      if (for_us) {
 801900c:	7dfb      	ldrb	r3, [r7, #23]
 801900e:	2b00      	cmp	r3, #0
 8019010:	d01c      	beq.n	801904c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8019012:	683b      	ldr	r3, [r7, #0]
 8019014:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8019018:	693b      	ldr	r3, [r7, #16]
 801901a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801901e:	683b      	ldr	r3, [r7, #0]
 8019020:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8019024:	683b      	ldr	r3, [r7, #0]
 8019026:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8019028:	693a      	ldr	r2, [r7, #16]
 801902a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801902c:	2102      	movs	r1, #2
 801902e:	9103      	str	r1, [sp, #12]
 8019030:	f107 010c 	add.w	r1, r7, #12
 8019034:	9102      	str	r1, [sp, #8]
 8019036:	9201      	str	r2, [sp, #4]
 8019038:	9300      	str	r3, [sp, #0]
 801903a:	462b      	mov	r3, r5
 801903c:	4622      	mov	r2, r4
 801903e:	4601      	mov	r1, r0
 8019040:	6838      	ldr	r0, [r7, #0]
 8019042:	f000 faeb 	bl	801961c <etharp_raw>
      break;
 8019046:	e001      	b.n	801904c <etharp_input+0xf8>
      break;
 8019048:	bf00      	nop
 801904a:	e000      	b.n	801904e <etharp_input+0xfa>
      break;
 801904c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801904e:	6878      	ldr	r0, [r7, #4]
 8019050:	f7f9 fa74 	bl	801253c <pbuf_free>
}
 8019054:	3718      	adds	r7, #24
 8019056:	46bd      	mov	sp, r7
 8019058:	bdb0      	pop	{r4, r5, r7, pc}
 801905a:	bf00      	nop
 801905c:	0801f8b8 	.word	0x0801f8b8
 8019060:	0801fa08 	.word	0x0801fa08
 8019064:	0801f930 	.word	0x0801f930

08019068 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b086      	sub	sp, #24
 801906c:	af02      	add	r7, sp, #8
 801906e:	60f8      	str	r0, [r7, #12]
 8019070:	60b9      	str	r1, [r7, #8]
 8019072:	4613      	mov	r3, r2
 8019074:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8019076:	79fa      	ldrb	r2, [r7, #7]
 8019078:	4944      	ldr	r1, [pc, #272]	@ (801918c <etharp_output_to_arp_index+0x124>)
 801907a:	4613      	mov	r3, r2
 801907c:	005b      	lsls	r3, r3, #1
 801907e:	4413      	add	r3, r2
 8019080:	00db      	lsls	r3, r3, #3
 8019082:	440b      	add	r3, r1
 8019084:	3314      	adds	r3, #20
 8019086:	781b      	ldrb	r3, [r3, #0]
 8019088:	2b01      	cmp	r3, #1
 801908a:	d806      	bhi.n	801909a <etharp_output_to_arp_index+0x32>
 801908c:	4b40      	ldr	r3, [pc, #256]	@ (8019190 <etharp_output_to_arp_index+0x128>)
 801908e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8019092:	4940      	ldr	r1, [pc, #256]	@ (8019194 <etharp_output_to_arp_index+0x12c>)
 8019094:	4840      	ldr	r0, [pc, #256]	@ (8019198 <etharp_output_to_arp_index+0x130>)
 8019096:	f003 f8e5 	bl	801c264 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801909a:	79fa      	ldrb	r2, [r7, #7]
 801909c:	493b      	ldr	r1, [pc, #236]	@ (801918c <etharp_output_to_arp_index+0x124>)
 801909e:	4613      	mov	r3, r2
 80190a0:	005b      	lsls	r3, r3, #1
 80190a2:	4413      	add	r3, r2
 80190a4:	00db      	lsls	r3, r3, #3
 80190a6:	440b      	add	r3, r1
 80190a8:	3314      	adds	r3, #20
 80190aa:	781b      	ldrb	r3, [r3, #0]
 80190ac:	2b02      	cmp	r3, #2
 80190ae:	d153      	bne.n	8019158 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80190b0:	79fa      	ldrb	r2, [r7, #7]
 80190b2:	4936      	ldr	r1, [pc, #216]	@ (801918c <etharp_output_to_arp_index+0x124>)
 80190b4:	4613      	mov	r3, r2
 80190b6:	005b      	lsls	r3, r3, #1
 80190b8:	4413      	add	r3, r2
 80190ba:	00db      	lsls	r3, r3, #3
 80190bc:	440b      	add	r3, r1
 80190be:	3312      	adds	r3, #18
 80190c0:	881b      	ldrh	r3, [r3, #0]
 80190c2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80190c6:	d919      	bls.n	80190fc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80190c8:	79fa      	ldrb	r2, [r7, #7]
 80190ca:	4613      	mov	r3, r2
 80190cc:	005b      	lsls	r3, r3, #1
 80190ce:	4413      	add	r3, r2
 80190d0:	00db      	lsls	r3, r3, #3
 80190d2:	4a2e      	ldr	r2, [pc, #184]	@ (801918c <etharp_output_to_arp_index+0x124>)
 80190d4:	4413      	add	r3, r2
 80190d6:	3304      	adds	r3, #4
 80190d8:	4619      	mov	r1, r3
 80190da:	68f8      	ldr	r0, [r7, #12]
 80190dc:	f000 fb4c 	bl	8019778 <etharp_request>
 80190e0:	4603      	mov	r3, r0
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d138      	bne.n	8019158 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80190e6:	79fa      	ldrb	r2, [r7, #7]
 80190e8:	4928      	ldr	r1, [pc, #160]	@ (801918c <etharp_output_to_arp_index+0x124>)
 80190ea:	4613      	mov	r3, r2
 80190ec:	005b      	lsls	r3, r3, #1
 80190ee:	4413      	add	r3, r2
 80190f0:	00db      	lsls	r3, r3, #3
 80190f2:	440b      	add	r3, r1
 80190f4:	3314      	adds	r3, #20
 80190f6:	2203      	movs	r2, #3
 80190f8:	701a      	strb	r2, [r3, #0]
 80190fa:	e02d      	b.n	8019158 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80190fc:	79fa      	ldrb	r2, [r7, #7]
 80190fe:	4923      	ldr	r1, [pc, #140]	@ (801918c <etharp_output_to_arp_index+0x124>)
 8019100:	4613      	mov	r3, r2
 8019102:	005b      	lsls	r3, r3, #1
 8019104:	4413      	add	r3, r2
 8019106:	00db      	lsls	r3, r3, #3
 8019108:	440b      	add	r3, r1
 801910a:	3312      	adds	r3, #18
 801910c:	881b      	ldrh	r3, [r3, #0]
 801910e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8019112:	d321      	bcc.n	8019158 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8019114:	79fa      	ldrb	r2, [r7, #7]
 8019116:	4613      	mov	r3, r2
 8019118:	005b      	lsls	r3, r3, #1
 801911a:	4413      	add	r3, r2
 801911c:	00db      	lsls	r3, r3, #3
 801911e:	4a1b      	ldr	r2, [pc, #108]	@ (801918c <etharp_output_to_arp_index+0x124>)
 8019120:	4413      	add	r3, r2
 8019122:	1d19      	adds	r1, r3, #4
 8019124:	79fa      	ldrb	r2, [r7, #7]
 8019126:	4613      	mov	r3, r2
 8019128:	005b      	lsls	r3, r3, #1
 801912a:	4413      	add	r3, r2
 801912c:	00db      	lsls	r3, r3, #3
 801912e:	3308      	adds	r3, #8
 8019130:	4a16      	ldr	r2, [pc, #88]	@ (801918c <etharp_output_to_arp_index+0x124>)
 8019132:	4413      	add	r3, r2
 8019134:	3304      	adds	r3, #4
 8019136:	461a      	mov	r2, r3
 8019138:	68f8      	ldr	r0, [r7, #12]
 801913a:	f000 fafb 	bl	8019734 <etharp_request_dst>
 801913e:	4603      	mov	r3, r0
 8019140:	2b00      	cmp	r3, #0
 8019142:	d109      	bne.n	8019158 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019144:	79fa      	ldrb	r2, [r7, #7]
 8019146:	4911      	ldr	r1, [pc, #68]	@ (801918c <etharp_output_to_arp_index+0x124>)
 8019148:	4613      	mov	r3, r2
 801914a:	005b      	lsls	r3, r3, #1
 801914c:	4413      	add	r3, r2
 801914e:	00db      	lsls	r3, r3, #3
 8019150:	440b      	add	r3, r1
 8019152:	3314      	adds	r3, #20
 8019154:	2203      	movs	r2, #3
 8019156:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801915e:	79fa      	ldrb	r2, [r7, #7]
 8019160:	4613      	mov	r3, r2
 8019162:	005b      	lsls	r3, r3, #1
 8019164:	4413      	add	r3, r2
 8019166:	00db      	lsls	r3, r3, #3
 8019168:	3308      	adds	r3, #8
 801916a:	4a08      	ldr	r2, [pc, #32]	@ (801918c <etharp_output_to_arp_index+0x124>)
 801916c:	4413      	add	r3, r2
 801916e:	3304      	adds	r3, #4
 8019170:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019174:	9200      	str	r2, [sp, #0]
 8019176:	460a      	mov	r2, r1
 8019178:	68b9      	ldr	r1, [r7, #8]
 801917a:	68f8      	ldr	r0, [r7, #12]
 801917c:	f001 fed0 	bl	801af20 <ethernet_output>
 8019180:	4603      	mov	r3, r0
}
 8019182:	4618      	mov	r0, r3
 8019184:	3710      	adds	r7, #16
 8019186:	46bd      	mov	sp, r7
 8019188:	bd80      	pop	{r7, pc}
 801918a:	bf00      	nop
 801918c:	200275dc 	.word	0x200275dc
 8019190:	0801f8b8 	.word	0x0801f8b8
 8019194:	0801fa28 	.word	0x0801fa28
 8019198:	0801f930 	.word	0x0801f930

0801919c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801919c:	b580      	push	{r7, lr}
 801919e:	b08a      	sub	sp, #40	@ 0x28
 80191a0:	af02      	add	r7, sp, #8
 80191a2:	60f8      	str	r0, [r7, #12]
 80191a4:	60b9      	str	r1, [r7, #8]
 80191a6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d106      	bne.n	80191c0 <etharp_output+0x24>
 80191b2:	4b73      	ldr	r3, [pc, #460]	@ (8019380 <etharp_output+0x1e4>)
 80191b4:	f240 321e 	movw	r2, #798	@ 0x31e
 80191b8:	4972      	ldr	r1, [pc, #456]	@ (8019384 <etharp_output+0x1e8>)
 80191ba:	4873      	ldr	r0, [pc, #460]	@ (8019388 <etharp_output+0x1ec>)
 80191bc:	f003 f852 	bl	801c264 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80191c0:	68bb      	ldr	r3, [r7, #8]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d106      	bne.n	80191d4 <etharp_output+0x38>
 80191c6:	4b6e      	ldr	r3, [pc, #440]	@ (8019380 <etharp_output+0x1e4>)
 80191c8:	f240 321f 	movw	r2, #799	@ 0x31f
 80191cc:	496f      	ldr	r1, [pc, #444]	@ (801938c <etharp_output+0x1f0>)
 80191ce:	486e      	ldr	r0, [pc, #440]	@ (8019388 <etharp_output+0x1ec>)
 80191d0:	f003 f848 	bl	801c264 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d106      	bne.n	80191e8 <etharp_output+0x4c>
 80191da:	4b69      	ldr	r3, [pc, #420]	@ (8019380 <etharp_output+0x1e4>)
 80191dc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80191e0:	496b      	ldr	r1, [pc, #428]	@ (8019390 <etharp_output+0x1f4>)
 80191e2:	4869      	ldr	r0, [pc, #420]	@ (8019388 <etharp_output+0x1ec>)
 80191e4:	f003 f83e 	bl	801c264 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	68f9      	ldr	r1, [r7, #12]
 80191ee:	4618      	mov	r0, r3
 80191f0:	f000 fef8 	bl	8019fe4 <ip4_addr_isbroadcast_u32>
 80191f4:	4603      	mov	r3, r0
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d002      	beq.n	8019200 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80191fa:	4b66      	ldr	r3, [pc, #408]	@ (8019394 <etharp_output+0x1f8>)
 80191fc:	61fb      	str	r3, [r7, #28]
 80191fe:	e0af      	b.n	8019360 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019208:	2be0      	cmp	r3, #224	@ 0xe0
 801920a:	d118      	bne.n	801923e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801920c:	2301      	movs	r3, #1
 801920e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019210:	2300      	movs	r3, #0
 8019212:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8019214:	235e      	movs	r3, #94	@ 0x5e
 8019216:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	3301      	adds	r3, #1
 801921c:	781b      	ldrb	r3, [r3, #0]
 801921e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019222:	b2db      	uxtb	r3, r3
 8019224:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	3302      	adds	r3, #2
 801922a:	781b      	ldrb	r3, [r3, #0]
 801922c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	3303      	adds	r3, #3
 8019232:	781b      	ldrb	r3, [r3, #0]
 8019234:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8019236:	f107 0310 	add.w	r3, r7, #16
 801923a:	61fb      	str	r3, [r7, #28]
 801923c:	e090      	b.n	8019360 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	681a      	ldr	r2, [r3, #0]
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	3304      	adds	r3, #4
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	405a      	eors	r2, r3
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	3308      	adds	r3, #8
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	4013      	ands	r3, r2
 8019252:	2b00      	cmp	r3, #0
 8019254:	d012      	beq.n	801927c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801925c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8019260:	4293      	cmp	r3, r2
 8019262:	d00b      	beq.n	801927c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	330c      	adds	r3, #12
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	2b00      	cmp	r3, #0
 801926c:	d003      	beq.n	8019276 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	330c      	adds	r3, #12
 8019272:	61bb      	str	r3, [r7, #24]
 8019274:	e002      	b.n	801927c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8019276:	f06f 0303 	mvn.w	r3, #3
 801927a:	e07d      	b.n	8019378 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801927c:	4b46      	ldr	r3, [pc, #280]	@ (8019398 <etharp_output+0x1fc>)
 801927e:	781b      	ldrb	r3, [r3, #0]
 8019280:	4619      	mov	r1, r3
 8019282:	4a46      	ldr	r2, [pc, #280]	@ (801939c <etharp_output+0x200>)
 8019284:	460b      	mov	r3, r1
 8019286:	005b      	lsls	r3, r3, #1
 8019288:	440b      	add	r3, r1
 801928a:	00db      	lsls	r3, r3, #3
 801928c:	4413      	add	r3, r2
 801928e:	3314      	adds	r3, #20
 8019290:	781b      	ldrb	r3, [r3, #0]
 8019292:	2b01      	cmp	r3, #1
 8019294:	d925      	bls.n	80192e2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019296:	4b40      	ldr	r3, [pc, #256]	@ (8019398 <etharp_output+0x1fc>)
 8019298:	781b      	ldrb	r3, [r3, #0]
 801929a:	4619      	mov	r1, r3
 801929c:	4a3f      	ldr	r2, [pc, #252]	@ (801939c <etharp_output+0x200>)
 801929e:	460b      	mov	r3, r1
 80192a0:	005b      	lsls	r3, r3, #1
 80192a2:	440b      	add	r3, r1
 80192a4:	00db      	lsls	r3, r3, #3
 80192a6:	4413      	add	r3, r2
 80192a8:	3308      	adds	r3, #8
 80192aa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80192ac:	68fa      	ldr	r2, [r7, #12]
 80192ae:	429a      	cmp	r2, r3
 80192b0:	d117      	bne.n	80192e2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80192b2:	69bb      	ldr	r3, [r7, #24]
 80192b4:	681a      	ldr	r2, [r3, #0]
 80192b6:	4b38      	ldr	r3, [pc, #224]	@ (8019398 <etharp_output+0x1fc>)
 80192b8:	781b      	ldrb	r3, [r3, #0]
 80192ba:	4618      	mov	r0, r3
 80192bc:	4937      	ldr	r1, [pc, #220]	@ (801939c <etharp_output+0x200>)
 80192be:	4603      	mov	r3, r0
 80192c0:	005b      	lsls	r3, r3, #1
 80192c2:	4403      	add	r3, r0
 80192c4:	00db      	lsls	r3, r3, #3
 80192c6:	440b      	add	r3, r1
 80192c8:	3304      	adds	r3, #4
 80192ca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80192cc:	429a      	cmp	r2, r3
 80192ce:	d108      	bne.n	80192e2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80192d0:	4b31      	ldr	r3, [pc, #196]	@ (8019398 <etharp_output+0x1fc>)
 80192d2:	781b      	ldrb	r3, [r3, #0]
 80192d4:	461a      	mov	r2, r3
 80192d6:	68b9      	ldr	r1, [r7, #8]
 80192d8:	68f8      	ldr	r0, [r7, #12]
 80192da:	f7ff fec5 	bl	8019068 <etharp_output_to_arp_index>
 80192de:	4603      	mov	r3, r0
 80192e0:	e04a      	b.n	8019378 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80192e2:	2300      	movs	r3, #0
 80192e4:	75fb      	strb	r3, [r7, #23]
 80192e6:	e031      	b.n	801934c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80192e8:	7dfa      	ldrb	r2, [r7, #23]
 80192ea:	492c      	ldr	r1, [pc, #176]	@ (801939c <etharp_output+0x200>)
 80192ec:	4613      	mov	r3, r2
 80192ee:	005b      	lsls	r3, r3, #1
 80192f0:	4413      	add	r3, r2
 80192f2:	00db      	lsls	r3, r3, #3
 80192f4:	440b      	add	r3, r1
 80192f6:	3314      	adds	r3, #20
 80192f8:	781b      	ldrb	r3, [r3, #0]
 80192fa:	2b01      	cmp	r3, #1
 80192fc:	d923      	bls.n	8019346 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80192fe:	7dfa      	ldrb	r2, [r7, #23]
 8019300:	4926      	ldr	r1, [pc, #152]	@ (801939c <etharp_output+0x200>)
 8019302:	4613      	mov	r3, r2
 8019304:	005b      	lsls	r3, r3, #1
 8019306:	4413      	add	r3, r2
 8019308:	00db      	lsls	r3, r3, #3
 801930a:	440b      	add	r3, r1
 801930c:	3308      	adds	r3, #8
 801930e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019310:	68fa      	ldr	r2, [r7, #12]
 8019312:	429a      	cmp	r2, r3
 8019314:	d117      	bne.n	8019346 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8019316:	69bb      	ldr	r3, [r7, #24]
 8019318:	6819      	ldr	r1, [r3, #0]
 801931a:	7dfa      	ldrb	r2, [r7, #23]
 801931c:	481f      	ldr	r0, [pc, #124]	@ (801939c <etharp_output+0x200>)
 801931e:	4613      	mov	r3, r2
 8019320:	005b      	lsls	r3, r3, #1
 8019322:	4413      	add	r3, r2
 8019324:	00db      	lsls	r3, r3, #3
 8019326:	4403      	add	r3, r0
 8019328:	3304      	adds	r3, #4
 801932a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801932c:	4299      	cmp	r1, r3
 801932e:	d10a      	bne.n	8019346 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019330:	4a19      	ldr	r2, [pc, #100]	@ (8019398 <etharp_output+0x1fc>)
 8019332:	7dfb      	ldrb	r3, [r7, #23]
 8019334:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019336:	7dfb      	ldrb	r3, [r7, #23]
 8019338:	461a      	mov	r2, r3
 801933a:	68b9      	ldr	r1, [r7, #8]
 801933c:	68f8      	ldr	r0, [r7, #12]
 801933e:	f7ff fe93 	bl	8019068 <etharp_output_to_arp_index>
 8019342:	4603      	mov	r3, r0
 8019344:	e018      	b.n	8019378 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019346:	7dfb      	ldrb	r3, [r7, #23]
 8019348:	3301      	adds	r3, #1
 801934a:	75fb      	strb	r3, [r7, #23]
 801934c:	7dfb      	ldrb	r3, [r7, #23]
 801934e:	2b09      	cmp	r3, #9
 8019350:	d9ca      	bls.n	80192e8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019352:	68ba      	ldr	r2, [r7, #8]
 8019354:	69b9      	ldr	r1, [r7, #24]
 8019356:	68f8      	ldr	r0, [r7, #12]
 8019358:	f000 f822 	bl	80193a0 <etharp_query>
 801935c:	4603      	mov	r3, r0
 801935e:	e00b      	b.n	8019378 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8019366:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801936a:	9300      	str	r3, [sp, #0]
 801936c:	69fb      	ldr	r3, [r7, #28]
 801936e:	68b9      	ldr	r1, [r7, #8]
 8019370:	68f8      	ldr	r0, [r7, #12]
 8019372:	f001 fdd5 	bl	801af20 <ethernet_output>
 8019376:	4603      	mov	r3, r0
}
 8019378:	4618      	mov	r0, r3
 801937a:	3720      	adds	r7, #32
 801937c:	46bd      	mov	sp, r7
 801937e:	bd80      	pop	{r7, pc}
 8019380:	0801f8b8 	.word	0x0801f8b8
 8019384:	0801fa08 	.word	0x0801fa08
 8019388:	0801f930 	.word	0x0801f930
 801938c:	0801fa58 	.word	0x0801fa58
 8019390:	0801f9f8 	.word	0x0801f9f8
 8019394:	0802071c 	.word	0x0802071c
 8019398:	200276cc 	.word	0x200276cc
 801939c:	200275dc 	.word	0x200275dc

080193a0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b08c      	sub	sp, #48	@ 0x30
 80193a4:	af02      	add	r7, sp, #8
 80193a6:	60f8      	str	r0, [r7, #12]
 80193a8:	60b9      	str	r1, [r7, #8]
 80193aa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	3326      	adds	r3, #38	@ 0x26
 80193b0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80193b2:	23ff      	movs	r3, #255	@ 0xff
 80193b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80193b8:	2300      	movs	r3, #0
 80193ba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80193bc:	68bb      	ldr	r3, [r7, #8]
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	68f9      	ldr	r1, [r7, #12]
 80193c2:	4618      	mov	r0, r3
 80193c4:	f000 fe0e 	bl	8019fe4 <ip4_addr_isbroadcast_u32>
 80193c8:	4603      	mov	r3, r0
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d10c      	bne.n	80193e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80193ce:	68bb      	ldr	r3, [r7, #8]
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80193d6:	2be0      	cmp	r3, #224	@ 0xe0
 80193d8:	d006      	beq.n	80193e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80193da:	68bb      	ldr	r3, [r7, #8]
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d003      	beq.n	80193e8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80193e0:	68bb      	ldr	r3, [r7, #8]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d102      	bne.n	80193ee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80193e8:	f06f 030f 	mvn.w	r3, #15
 80193ec:	e101      	b.n	80195f2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80193ee:	68fa      	ldr	r2, [r7, #12]
 80193f0:	2101      	movs	r1, #1
 80193f2:	68b8      	ldr	r0, [r7, #8]
 80193f4:	f7ff fb60 	bl	8018ab8 <etharp_find_entry>
 80193f8:	4603      	mov	r3, r0
 80193fa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80193fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019400:	2b00      	cmp	r3, #0
 8019402:	da02      	bge.n	801940a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8019404:	8a7b      	ldrh	r3, [r7, #18]
 8019406:	b25b      	sxtb	r3, r3
 8019408:	e0f3      	b.n	80195f2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801940a:	8a7b      	ldrh	r3, [r7, #18]
 801940c:	2b7e      	cmp	r3, #126	@ 0x7e
 801940e:	d906      	bls.n	801941e <etharp_query+0x7e>
 8019410:	4b7a      	ldr	r3, [pc, #488]	@ (80195fc <etharp_query+0x25c>)
 8019412:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8019416:	497a      	ldr	r1, [pc, #488]	@ (8019600 <etharp_query+0x260>)
 8019418:	487a      	ldr	r0, [pc, #488]	@ (8019604 <etharp_query+0x264>)
 801941a:	f002 ff23 	bl	801c264 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801941e:	8a7b      	ldrh	r3, [r7, #18]
 8019420:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019422:	7c7a      	ldrb	r2, [r7, #17]
 8019424:	4978      	ldr	r1, [pc, #480]	@ (8019608 <etharp_query+0x268>)
 8019426:	4613      	mov	r3, r2
 8019428:	005b      	lsls	r3, r3, #1
 801942a:	4413      	add	r3, r2
 801942c:	00db      	lsls	r3, r3, #3
 801942e:	440b      	add	r3, r1
 8019430:	3314      	adds	r3, #20
 8019432:	781b      	ldrb	r3, [r3, #0]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d115      	bne.n	8019464 <etharp_query+0xc4>
    is_new_entry = 1;
 8019438:	2301      	movs	r3, #1
 801943a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801943c:	7c7a      	ldrb	r2, [r7, #17]
 801943e:	4972      	ldr	r1, [pc, #456]	@ (8019608 <etharp_query+0x268>)
 8019440:	4613      	mov	r3, r2
 8019442:	005b      	lsls	r3, r3, #1
 8019444:	4413      	add	r3, r2
 8019446:	00db      	lsls	r3, r3, #3
 8019448:	440b      	add	r3, r1
 801944a:	3314      	adds	r3, #20
 801944c:	2201      	movs	r2, #1
 801944e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019450:	7c7a      	ldrb	r2, [r7, #17]
 8019452:	496d      	ldr	r1, [pc, #436]	@ (8019608 <etharp_query+0x268>)
 8019454:	4613      	mov	r3, r2
 8019456:	005b      	lsls	r3, r3, #1
 8019458:	4413      	add	r3, r2
 801945a:	00db      	lsls	r3, r3, #3
 801945c:	440b      	add	r3, r1
 801945e:	3308      	adds	r3, #8
 8019460:	68fa      	ldr	r2, [r7, #12]
 8019462:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019464:	7c7a      	ldrb	r2, [r7, #17]
 8019466:	4968      	ldr	r1, [pc, #416]	@ (8019608 <etharp_query+0x268>)
 8019468:	4613      	mov	r3, r2
 801946a:	005b      	lsls	r3, r3, #1
 801946c:	4413      	add	r3, r2
 801946e:	00db      	lsls	r3, r3, #3
 8019470:	440b      	add	r3, r1
 8019472:	3314      	adds	r3, #20
 8019474:	781b      	ldrb	r3, [r3, #0]
 8019476:	2b01      	cmp	r3, #1
 8019478:	d011      	beq.n	801949e <etharp_query+0xfe>
 801947a:	7c7a      	ldrb	r2, [r7, #17]
 801947c:	4962      	ldr	r1, [pc, #392]	@ (8019608 <etharp_query+0x268>)
 801947e:	4613      	mov	r3, r2
 8019480:	005b      	lsls	r3, r3, #1
 8019482:	4413      	add	r3, r2
 8019484:	00db      	lsls	r3, r3, #3
 8019486:	440b      	add	r3, r1
 8019488:	3314      	adds	r3, #20
 801948a:	781b      	ldrb	r3, [r3, #0]
 801948c:	2b01      	cmp	r3, #1
 801948e:	d806      	bhi.n	801949e <etharp_query+0xfe>
 8019490:	4b5a      	ldr	r3, [pc, #360]	@ (80195fc <etharp_query+0x25c>)
 8019492:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8019496:	495d      	ldr	r1, [pc, #372]	@ (801960c <etharp_query+0x26c>)
 8019498:	485a      	ldr	r0, [pc, #360]	@ (8019604 <etharp_query+0x264>)
 801949a:	f002 fee3 	bl	801c264 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801949e:	6a3b      	ldr	r3, [r7, #32]
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d102      	bne.n	80194aa <etharp_query+0x10a>
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d10c      	bne.n	80194c4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80194aa:	68b9      	ldr	r1, [r7, #8]
 80194ac:	68f8      	ldr	r0, [r7, #12]
 80194ae:	f000 f963 	bl	8019778 <etharp_request>
 80194b2:	4603      	mov	r3, r0
 80194b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d102      	bne.n	80194c4 <etharp_query+0x124>
      return result;
 80194be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80194c2:	e096      	b.n	80195f2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d106      	bne.n	80194d8 <etharp_query+0x138>
 80194ca:	4b4c      	ldr	r3, [pc, #304]	@ (80195fc <etharp_query+0x25c>)
 80194cc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80194d0:	494f      	ldr	r1, [pc, #316]	@ (8019610 <etharp_query+0x270>)
 80194d2:	484c      	ldr	r0, [pc, #304]	@ (8019604 <etharp_query+0x264>)
 80194d4:	f002 fec6 	bl	801c264 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80194d8:	7c7a      	ldrb	r2, [r7, #17]
 80194da:	494b      	ldr	r1, [pc, #300]	@ (8019608 <etharp_query+0x268>)
 80194dc:	4613      	mov	r3, r2
 80194de:	005b      	lsls	r3, r3, #1
 80194e0:	4413      	add	r3, r2
 80194e2:	00db      	lsls	r3, r3, #3
 80194e4:	440b      	add	r3, r1
 80194e6:	3314      	adds	r3, #20
 80194e8:	781b      	ldrb	r3, [r3, #0]
 80194ea:	2b01      	cmp	r3, #1
 80194ec:	d917      	bls.n	801951e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80194ee:	4a49      	ldr	r2, [pc, #292]	@ (8019614 <etharp_query+0x274>)
 80194f0:	7c7b      	ldrb	r3, [r7, #17]
 80194f2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80194f4:	7c7a      	ldrb	r2, [r7, #17]
 80194f6:	4613      	mov	r3, r2
 80194f8:	005b      	lsls	r3, r3, #1
 80194fa:	4413      	add	r3, r2
 80194fc:	00db      	lsls	r3, r3, #3
 80194fe:	3308      	adds	r3, #8
 8019500:	4a41      	ldr	r2, [pc, #260]	@ (8019608 <etharp_query+0x268>)
 8019502:	4413      	add	r3, r2
 8019504:	3304      	adds	r3, #4
 8019506:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801950a:	9200      	str	r2, [sp, #0]
 801950c:	697a      	ldr	r2, [r7, #20]
 801950e:	6879      	ldr	r1, [r7, #4]
 8019510:	68f8      	ldr	r0, [r7, #12]
 8019512:	f001 fd05 	bl	801af20 <ethernet_output>
 8019516:	4603      	mov	r3, r0
 8019518:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801951c:	e067      	b.n	80195ee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801951e:	7c7a      	ldrb	r2, [r7, #17]
 8019520:	4939      	ldr	r1, [pc, #228]	@ (8019608 <etharp_query+0x268>)
 8019522:	4613      	mov	r3, r2
 8019524:	005b      	lsls	r3, r3, #1
 8019526:	4413      	add	r3, r2
 8019528:	00db      	lsls	r3, r3, #3
 801952a:	440b      	add	r3, r1
 801952c:	3314      	adds	r3, #20
 801952e:	781b      	ldrb	r3, [r3, #0]
 8019530:	2b01      	cmp	r3, #1
 8019532:	d15c      	bne.n	80195ee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019534:	2300      	movs	r3, #0
 8019536:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801953c:	e01c      	b.n	8019578 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801953e:	69fb      	ldr	r3, [r7, #28]
 8019540:	895a      	ldrh	r2, [r3, #10]
 8019542:	69fb      	ldr	r3, [r7, #28]
 8019544:	891b      	ldrh	r3, [r3, #8]
 8019546:	429a      	cmp	r2, r3
 8019548:	d10a      	bne.n	8019560 <etharp_query+0x1c0>
 801954a:	69fb      	ldr	r3, [r7, #28]
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d006      	beq.n	8019560 <etharp_query+0x1c0>
 8019552:	4b2a      	ldr	r3, [pc, #168]	@ (80195fc <etharp_query+0x25c>)
 8019554:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8019558:	492f      	ldr	r1, [pc, #188]	@ (8019618 <etharp_query+0x278>)
 801955a:	482a      	ldr	r0, [pc, #168]	@ (8019604 <etharp_query+0x264>)
 801955c:	f002 fe82 	bl	801c264 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019560:	69fb      	ldr	r3, [r7, #28]
 8019562:	7b1b      	ldrb	r3, [r3, #12]
 8019564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019568:	2b00      	cmp	r3, #0
 801956a:	d002      	beq.n	8019572 <etharp_query+0x1d2>
        copy_needed = 1;
 801956c:	2301      	movs	r3, #1
 801956e:	61bb      	str	r3, [r7, #24]
        break;
 8019570:	e005      	b.n	801957e <etharp_query+0x1de>
      }
      p = p->next;
 8019572:	69fb      	ldr	r3, [r7, #28]
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019578:	69fb      	ldr	r3, [r7, #28]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d1df      	bne.n	801953e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801957e:	69bb      	ldr	r3, [r7, #24]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d007      	beq.n	8019594 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019584:	687a      	ldr	r2, [r7, #4]
 8019586:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801958a:	200e      	movs	r0, #14
 801958c:	f7f9 fa4e 	bl	8012a2c <pbuf_clone>
 8019590:	61f8      	str	r0, [r7, #28]
 8019592:	e004      	b.n	801959e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019598:	69f8      	ldr	r0, [r7, #28]
 801959a:	f7f9 f875 	bl	8012688 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801959e:	69fb      	ldr	r3, [r7, #28]
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d021      	beq.n	80195e8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80195a4:	7c7a      	ldrb	r2, [r7, #17]
 80195a6:	4918      	ldr	r1, [pc, #96]	@ (8019608 <etharp_query+0x268>)
 80195a8:	4613      	mov	r3, r2
 80195aa:	005b      	lsls	r3, r3, #1
 80195ac:	4413      	add	r3, r2
 80195ae:	00db      	lsls	r3, r3, #3
 80195b0:	440b      	add	r3, r1
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d00a      	beq.n	80195ce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80195b8:	7c7a      	ldrb	r2, [r7, #17]
 80195ba:	4913      	ldr	r1, [pc, #76]	@ (8019608 <etharp_query+0x268>)
 80195bc:	4613      	mov	r3, r2
 80195be:	005b      	lsls	r3, r3, #1
 80195c0:	4413      	add	r3, r2
 80195c2:	00db      	lsls	r3, r3, #3
 80195c4:	440b      	add	r3, r1
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	4618      	mov	r0, r3
 80195ca:	f7f8 ffb7 	bl	801253c <pbuf_free>
      }
      arp_table[i].q = p;
 80195ce:	7c7a      	ldrb	r2, [r7, #17]
 80195d0:	490d      	ldr	r1, [pc, #52]	@ (8019608 <etharp_query+0x268>)
 80195d2:	4613      	mov	r3, r2
 80195d4:	005b      	lsls	r3, r3, #1
 80195d6:	4413      	add	r3, r2
 80195d8:	00db      	lsls	r3, r3, #3
 80195da:	440b      	add	r3, r1
 80195dc:	69fa      	ldr	r2, [r7, #28]
 80195de:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80195e0:	2300      	movs	r3, #0
 80195e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80195e6:	e002      	b.n	80195ee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80195e8:	23ff      	movs	r3, #255	@ 0xff
 80195ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80195ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80195f2:	4618      	mov	r0, r3
 80195f4:	3728      	adds	r7, #40	@ 0x28
 80195f6:	46bd      	mov	sp, r7
 80195f8:	bd80      	pop	{r7, pc}
 80195fa:	bf00      	nop
 80195fc:	0801f8b8 	.word	0x0801f8b8
 8019600:	0801fa64 	.word	0x0801fa64
 8019604:	0801f930 	.word	0x0801f930
 8019608:	200275dc 	.word	0x200275dc
 801960c:	0801fa74 	.word	0x0801fa74
 8019610:	0801fa58 	.word	0x0801fa58
 8019614:	200276cc 	.word	0x200276cc
 8019618:	0801fa9c 	.word	0x0801fa9c

0801961c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b08a      	sub	sp, #40	@ 0x28
 8019620:	af02      	add	r7, sp, #8
 8019622:	60f8      	str	r0, [r7, #12]
 8019624:	60b9      	str	r1, [r7, #8]
 8019626:	607a      	str	r2, [r7, #4]
 8019628:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801962a:	2300      	movs	r3, #0
 801962c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	2b00      	cmp	r3, #0
 8019632:	d106      	bne.n	8019642 <etharp_raw+0x26>
 8019634:	4b3a      	ldr	r3, [pc, #232]	@ (8019720 <etharp_raw+0x104>)
 8019636:	f240 4257 	movw	r2, #1111	@ 0x457
 801963a:	493a      	ldr	r1, [pc, #232]	@ (8019724 <etharp_raw+0x108>)
 801963c:	483a      	ldr	r0, [pc, #232]	@ (8019728 <etharp_raw+0x10c>)
 801963e:	f002 fe11 	bl	801c264 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019642:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019646:	211c      	movs	r1, #28
 8019648:	200e      	movs	r0, #14
 801964a:	f7f8 fc93 	bl	8011f74 <pbuf_alloc>
 801964e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019650:	69bb      	ldr	r3, [r7, #24]
 8019652:	2b00      	cmp	r3, #0
 8019654:	d102      	bne.n	801965c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019656:	f04f 33ff 	mov.w	r3, #4294967295
 801965a:	e05d      	b.n	8019718 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801965c:	69bb      	ldr	r3, [r7, #24]
 801965e:	895b      	ldrh	r3, [r3, #10]
 8019660:	2b1b      	cmp	r3, #27
 8019662:	d806      	bhi.n	8019672 <etharp_raw+0x56>
 8019664:	4b2e      	ldr	r3, [pc, #184]	@ (8019720 <etharp_raw+0x104>)
 8019666:	f240 4262 	movw	r2, #1122	@ 0x462
 801966a:	4930      	ldr	r1, [pc, #192]	@ (801972c <etharp_raw+0x110>)
 801966c:	482e      	ldr	r0, [pc, #184]	@ (8019728 <etharp_raw+0x10c>)
 801966e:	f002 fdf9 	bl	801c264 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019672:	69bb      	ldr	r3, [r7, #24]
 8019674:	685b      	ldr	r3, [r3, #4]
 8019676:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019678:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801967a:	4618      	mov	r0, r3
 801967c:	f7f7 fb70 	bl	8010d60 <lwip_htons>
 8019680:	4603      	mov	r3, r0
 8019682:	461a      	mov	r2, r3
 8019684:	697b      	ldr	r3, [r7, #20]
 8019686:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801968e:	2b06      	cmp	r3, #6
 8019690:	d006      	beq.n	80196a0 <etharp_raw+0x84>
 8019692:	4b23      	ldr	r3, [pc, #140]	@ (8019720 <etharp_raw+0x104>)
 8019694:	f240 4269 	movw	r2, #1129	@ 0x469
 8019698:	4925      	ldr	r1, [pc, #148]	@ (8019730 <etharp_raw+0x114>)
 801969a:	4823      	ldr	r0, [pc, #140]	@ (8019728 <etharp_raw+0x10c>)
 801969c:	f002 fde2 	bl	801c264 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80196a0:	697b      	ldr	r3, [r7, #20]
 80196a2:	3308      	adds	r3, #8
 80196a4:	2206      	movs	r2, #6
 80196a6:	6839      	ldr	r1, [r7, #0]
 80196a8:	4618      	mov	r0, r3
 80196aa:	f003 f806 	bl	801c6ba <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80196ae:	697b      	ldr	r3, [r7, #20]
 80196b0:	3312      	adds	r3, #18
 80196b2:	2206      	movs	r2, #6
 80196b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80196b6:	4618      	mov	r0, r3
 80196b8:	f002 ffff 	bl	801c6ba <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80196bc:	697b      	ldr	r3, [r7, #20]
 80196be:	330e      	adds	r3, #14
 80196c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80196c2:	6812      	ldr	r2, [r2, #0]
 80196c4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80196c6:	697b      	ldr	r3, [r7, #20]
 80196c8:	3318      	adds	r3, #24
 80196ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80196cc:	6812      	ldr	r2, [r2, #0]
 80196ce:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80196d0:	697b      	ldr	r3, [r7, #20]
 80196d2:	2200      	movs	r2, #0
 80196d4:	701a      	strb	r2, [r3, #0]
 80196d6:	2200      	movs	r2, #0
 80196d8:	f042 0201 	orr.w	r2, r2, #1
 80196dc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80196de:	697b      	ldr	r3, [r7, #20]
 80196e0:	2200      	movs	r2, #0
 80196e2:	f042 0208 	orr.w	r2, r2, #8
 80196e6:	709a      	strb	r2, [r3, #2]
 80196e8:	2200      	movs	r2, #0
 80196ea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80196ec:	697b      	ldr	r3, [r7, #20]
 80196ee:	2206      	movs	r2, #6
 80196f0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80196f2:	697b      	ldr	r3, [r7, #20]
 80196f4:	2204      	movs	r2, #4
 80196f6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80196f8:	f640 0306 	movw	r3, #2054	@ 0x806
 80196fc:	9300      	str	r3, [sp, #0]
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	68ba      	ldr	r2, [r7, #8]
 8019702:	69b9      	ldr	r1, [r7, #24]
 8019704:	68f8      	ldr	r0, [r7, #12]
 8019706:	f001 fc0b 	bl	801af20 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801970a:	69b8      	ldr	r0, [r7, #24]
 801970c:	f7f8 ff16 	bl	801253c <pbuf_free>
  p = NULL;
 8019710:	2300      	movs	r3, #0
 8019712:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019714:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019718:	4618      	mov	r0, r3
 801971a:	3720      	adds	r7, #32
 801971c:	46bd      	mov	sp, r7
 801971e:	bd80      	pop	{r7, pc}
 8019720:	0801f8b8 	.word	0x0801f8b8
 8019724:	0801fa08 	.word	0x0801fa08
 8019728:	0801f930 	.word	0x0801f930
 801972c:	0801fab8 	.word	0x0801fab8
 8019730:	0801faec 	.word	0x0801faec

08019734 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019734:	b580      	push	{r7, lr}
 8019736:	b088      	sub	sp, #32
 8019738:	af04      	add	r7, sp, #16
 801973a:	60f8      	str	r0, [r7, #12]
 801973c:	60b9      	str	r1, [r7, #8]
 801973e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019750:	2201      	movs	r2, #1
 8019752:	9203      	str	r2, [sp, #12]
 8019754:	68ba      	ldr	r2, [r7, #8]
 8019756:	9202      	str	r2, [sp, #8]
 8019758:	4a06      	ldr	r2, [pc, #24]	@ (8019774 <etharp_request_dst+0x40>)
 801975a:	9201      	str	r2, [sp, #4]
 801975c:	9300      	str	r3, [sp, #0]
 801975e:	4603      	mov	r3, r0
 8019760:	687a      	ldr	r2, [r7, #4]
 8019762:	68f8      	ldr	r0, [r7, #12]
 8019764:	f7ff ff5a 	bl	801961c <etharp_raw>
 8019768:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801976a:	4618      	mov	r0, r3
 801976c:	3710      	adds	r7, #16
 801976e:	46bd      	mov	sp, r7
 8019770:	bd80      	pop	{r7, pc}
 8019772:	bf00      	nop
 8019774:	08020724 	.word	0x08020724

08019778 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019778:	b580      	push	{r7, lr}
 801977a:	b082      	sub	sp, #8
 801977c:	af00      	add	r7, sp, #0
 801977e:	6078      	str	r0, [r7, #4]
 8019780:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019782:	4a05      	ldr	r2, [pc, #20]	@ (8019798 <etharp_request+0x20>)
 8019784:	6839      	ldr	r1, [r7, #0]
 8019786:	6878      	ldr	r0, [r7, #4]
 8019788:	f7ff ffd4 	bl	8019734 <etharp_request_dst>
 801978c:	4603      	mov	r3, r0
}
 801978e:	4618      	mov	r0, r3
 8019790:	3708      	adds	r7, #8
 8019792:	46bd      	mov	sp, r7
 8019794:	bd80      	pop	{r7, pc}
 8019796:	bf00      	nop
 8019798:	0802071c 	.word	0x0802071c

0801979c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801979c:	b580      	push	{r7, lr}
 801979e:	b08e      	sub	sp, #56	@ 0x38
 80197a0:	af04      	add	r7, sp, #16
 80197a2:	6078      	str	r0, [r7, #4]
 80197a4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80197a6:	4b79      	ldr	r3, [pc, #484]	@ (801998c <icmp_input+0x1f0>)
 80197a8:	689b      	ldr	r3, [r3, #8]
 80197aa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80197ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197ae:	781b      	ldrb	r3, [r3, #0]
 80197b0:	f003 030f 	and.w	r3, r3, #15
 80197b4:	b2db      	uxtb	r3, r3
 80197b6:	009b      	lsls	r3, r3, #2
 80197b8:	b2db      	uxtb	r3, r3
 80197ba:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80197bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80197be:	2b13      	cmp	r3, #19
 80197c0:	f240 80cd 	bls.w	801995e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	895b      	ldrh	r3, [r3, #10]
 80197c8:	2b03      	cmp	r3, #3
 80197ca:	f240 80ca 	bls.w	8019962 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	685b      	ldr	r3, [r3, #4]
 80197d2:	781b      	ldrb	r3, [r3, #0]
 80197d4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80197d8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80197dc:	2b00      	cmp	r3, #0
 80197de:	f000 80b7 	beq.w	8019950 <icmp_input+0x1b4>
 80197e2:	2b08      	cmp	r3, #8
 80197e4:	f040 80b7 	bne.w	8019956 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80197e8:	4b69      	ldr	r3, [pc, #420]	@ (8019990 <icmp_input+0x1f4>)
 80197ea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80197ec:	4b67      	ldr	r3, [pc, #412]	@ (801998c <icmp_input+0x1f0>)
 80197ee:	695b      	ldr	r3, [r3, #20]
 80197f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80197f4:	2be0      	cmp	r3, #224	@ 0xe0
 80197f6:	f000 80bb 	beq.w	8019970 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80197fa:	4b64      	ldr	r3, [pc, #400]	@ (801998c <icmp_input+0x1f0>)
 80197fc:	695b      	ldr	r3, [r3, #20]
 80197fe:	4a63      	ldr	r2, [pc, #396]	@ (801998c <icmp_input+0x1f0>)
 8019800:	6812      	ldr	r2, [r2, #0]
 8019802:	4611      	mov	r1, r2
 8019804:	4618      	mov	r0, r3
 8019806:	f000 fbed 	bl	8019fe4 <ip4_addr_isbroadcast_u32>
 801980a:	4603      	mov	r3, r0
 801980c:	2b00      	cmp	r3, #0
 801980e:	f040 80b1 	bne.w	8019974 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	891b      	ldrh	r3, [r3, #8]
 8019816:	2b07      	cmp	r3, #7
 8019818:	f240 80a5 	bls.w	8019966 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801981c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801981e:	330e      	adds	r3, #14
 8019820:	4619      	mov	r1, r3
 8019822:	6878      	ldr	r0, [r7, #4]
 8019824:	f7f8 fdf4 	bl	8012410 <pbuf_add_header>
 8019828:	4603      	mov	r3, r0
 801982a:	2b00      	cmp	r3, #0
 801982c:	d04b      	beq.n	80198c6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	891a      	ldrh	r2, [r3, #8]
 8019832:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019834:	4413      	add	r3, r2
 8019836:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	891b      	ldrh	r3, [r3, #8]
 801983c:	8b7a      	ldrh	r2, [r7, #26]
 801983e:	429a      	cmp	r2, r3
 8019840:	f0c0 809a 	bcc.w	8019978 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019844:	8b7b      	ldrh	r3, [r7, #26]
 8019846:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801984a:	4619      	mov	r1, r3
 801984c:	200e      	movs	r0, #14
 801984e:	f7f8 fb91 	bl	8011f74 <pbuf_alloc>
 8019852:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019854:	697b      	ldr	r3, [r7, #20]
 8019856:	2b00      	cmp	r3, #0
 8019858:	f000 8090 	beq.w	801997c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801985c:	697b      	ldr	r3, [r7, #20]
 801985e:	895b      	ldrh	r3, [r3, #10]
 8019860:	461a      	mov	r2, r3
 8019862:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019864:	3308      	adds	r3, #8
 8019866:	429a      	cmp	r2, r3
 8019868:	d203      	bcs.n	8019872 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801986a:	6978      	ldr	r0, [r7, #20]
 801986c:	f7f8 fe66 	bl	801253c <pbuf_free>
          goto icmperr;
 8019870:	e085      	b.n	801997e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019872:	697b      	ldr	r3, [r7, #20]
 8019874:	685b      	ldr	r3, [r3, #4]
 8019876:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801987a:	4618      	mov	r0, r3
 801987c:	f002 ff1d 	bl	801c6ba <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019880:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019882:	4619      	mov	r1, r3
 8019884:	6978      	ldr	r0, [r7, #20]
 8019886:	f7f8 fdd3 	bl	8012430 <pbuf_remove_header>
 801988a:	4603      	mov	r3, r0
 801988c:	2b00      	cmp	r3, #0
 801988e:	d009      	beq.n	80198a4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019890:	4b40      	ldr	r3, [pc, #256]	@ (8019994 <icmp_input+0x1f8>)
 8019892:	22b6      	movs	r2, #182	@ 0xb6
 8019894:	4940      	ldr	r1, [pc, #256]	@ (8019998 <icmp_input+0x1fc>)
 8019896:	4841      	ldr	r0, [pc, #260]	@ (801999c <icmp_input+0x200>)
 8019898:	f002 fce4 	bl	801c264 <iprintf>
          pbuf_free(r);
 801989c:	6978      	ldr	r0, [r7, #20]
 801989e:	f7f8 fe4d 	bl	801253c <pbuf_free>
          goto icmperr;
 80198a2:	e06c      	b.n	801997e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80198a4:	6879      	ldr	r1, [r7, #4]
 80198a6:	6978      	ldr	r0, [r7, #20]
 80198a8:	f7f8 ff7c 	bl	80127a4 <pbuf_copy>
 80198ac:	4603      	mov	r3, r0
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d003      	beq.n	80198ba <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80198b2:	6978      	ldr	r0, [r7, #20]
 80198b4:	f7f8 fe42 	bl	801253c <pbuf_free>
          goto icmperr;
 80198b8:	e061      	b.n	801997e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80198ba:	6878      	ldr	r0, [r7, #4]
 80198bc:	f7f8 fe3e 	bl	801253c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80198c0:	697b      	ldr	r3, [r7, #20]
 80198c2:	607b      	str	r3, [r7, #4]
 80198c4:	e00f      	b.n	80198e6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80198c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80198c8:	330e      	adds	r3, #14
 80198ca:	4619      	mov	r1, r3
 80198cc:	6878      	ldr	r0, [r7, #4]
 80198ce:	f7f8 fdaf 	bl	8012430 <pbuf_remove_header>
 80198d2:	4603      	mov	r3, r0
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	d006      	beq.n	80198e6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80198d8:	4b2e      	ldr	r3, [pc, #184]	@ (8019994 <icmp_input+0x1f8>)
 80198da:	22c7      	movs	r2, #199	@ 0xc7
 80198dc:	4930      	ldr	r1, [pc, #192]	@ (80199a0 <icmp_input+0x204>)
 80198de:	482f      	ldr	r0, [pc, #188]	@ (801999c <icmp_input+0x200>)
 80198e0:	f002 fcc0 	bl	801c264 <iprintf>
          goto icmperr;
 80198e4:	e04b      	b.n	801997e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	685b      	ldr	r3, [r3, #4]
 80198ea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80198ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80198ee:	4619      	mov	r1, r3
 80198f0:	6878      	ldr	r0, [r7, #4]
 80198f2:	f7f8 fd8d 	bl	8012410 <pbuf_add_header>
 80198f6:	4603      	mov	r3, r0
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d12b      	bne.n	8019954 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	685b      	ldr	r3, [r3, #4]
 8019900:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019902:	69fb      	ldr	r3, [r7, #28]
 8019904:	681a      	ldr	r2, [r3, #0]
 8019906:	68fb      	ldr	r3, [r7, #12]
 8019908:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801990a:	4b20      	ldr	r3, [pc, #128]	@ (801998c <icmp_input+0x1f0>)
 801990c:	691a      	ldr	r2, [r3, #16]
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019912:	693b      	ldr	r3, [r7, #16]
 8019914:	2200      	movs	r2, #0
 8019916:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019918:	693b      	ldr	r3, [r7, #16]
 801991a:	2200      	movs	r2, #0
 801991c:	709a      	strb	r2, [r3, #2]
 801991e:	2200      	movs	r2, #0
 8019920:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	22ff      	movs	r2, #255	@ 0xff
 8019926:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	2200      	movs	r2, #0
 801992c:	729a      	strb	r2, [r3, #10]
 801992e:	2200      	movs	r2, #0
 8019930:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019932:	683b      	ldr	r3, [r7, #0]
 8019934:	9302      	str	r3, [sp, #8]
 8019936:	2301      	movs	r3, #1
 8019938:	9301      	str	r3, [sp, #4]
 801993a:	2300      	movs	r3, #0
 801993c:	9300      	str	r3, [sp, #0]
 801993e:	23ff      	movs	r3, #255	@ 0xff
 8019940:	2200      	movs	r2, #0
 8019942:	69f9      	ldr	r1, [r7, #28]
 8019944:	6878      	ldr	r0, [r7, #4]
 8019946:	f000 fa75 	bl	8019e34 <ip4_output_if>
 801994a:	4603      	mov	r3, r0
 801994c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801994e:	e001      	b.n	8019954 <icmp_input+0x1b8>
      break;
 8019950:	bf00      	nop
 8019952:	e000      	b.n	8019956 <icmp_input+0x1ba>
      break;
 8019954:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019956:	6878      	ldr	r0, [r7, #4]
 8019958:	f7f8 fdf0 	bl	801253c <pbuf_free>
  return;
 801995c:	e013      	b.n	8019986 <icmp_input+0x1ea>
    goto lenerr;
 801995e:	bf00      	nop
 8019960:	e002      	b.n	8019968 <icmp_input+0x1cc>
    goto lenerr;
 8019962:	bf00      	nop
 8019964:	e000      	b.n	8019968 <icmp_input+0x1cc>
        goto lenerr;
 8019966:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019968:	6878      	ldr	r0, [r7, #4]
 801996a:	f7f8 fde7 	bl	801253c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801996e:	e00a      	b.n	8019986 <icmp_input+0x1ea>
        goto icmperr;
 8019970:	bf00      	nop
 8019972:	e004      	b.n	801997e <icmp_input+0x1e2>
        goto icmperr;
 8019974:	bf00      	nop
 8019976:	e002      	b.n	801997e <icmp_input+0x1e2>
          goto icmperr;
 8019978:	bf00      	nop
 801997a:	e000      	b.n	801997e <icmp_input+0x1e2>
          goto icmperr;
 801997c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801997e:	6878      	ldr	r0, [r7, #4]
 8019980:	f7f8 fddc 	bl	801253c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019984:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019986:	3728      	adds	r7, #40	@ 0x28
 8019988:	46bd      	mov	sp, r7
 801998a:	bd80      	pop	{r7, pc}
 801998c:	2002447c 	.word	0x2002447c
 8019990:	20024490 	.word	0x20024490
 8019994:	0801fb30 	.word	0x0801fb30
 8019998:	0801fb68 	.word	0x0801fb68
 801999c:	0801fba0 	.word	0x0801fba0
 80199a0:	0801fbc8 	.word	0x0801fbc8

080199a4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80199a4:	b580      	push	{r7, lr}
 80199a6:	b082      	sub	sp, #8
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	6078      	str	r0, [r7, #4]
 80199ac:	460b      	mov	r3, r1
 80199ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80199b0:	78fb      	ldrb	r3, [r7, #3]
 80199b2:	461a      	mov	r2, r3
 80199b4:	2103      	movs	r1, #3
 80199b6:	6878      	ldr	r0, [r7, #4]
 80199b8:	f000 f814 	bl	80199e4 <icmp_send_response>
}
 80199bc:	bf00      	nop
 80199be:	3708      	adds	r7, #8
 80199c0:	46bd      	mov	sp, r7
 80199c2:	bd80      	pop	{r7, pc}

080199c4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80199c4:	b580      	push	{r7, lr}
 80199c6:	b082      	sub	sp, #8
 80199c8:	af00      	add	r7, sp, #0
 80199ca:	6078      	str	r0, [r7, #4]
 80199cc:	460b      	mov	r3, r1
 80199ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80199d0:	78fb      	ldrb	r3, [r7, #3]
 80199d2:	461a      	mov	r2, r3
 80199d4:	210b      	movs	r1, #11
 80199d6:	6878      	ldr	r0, [r7, #4]
 80199d8:	f000 f804 	bl	80199e4 <icmp_send_response>
}
 80199dc:	bf00      	nop
 80199de:	3708      	adds	r7, #8
 80199e0:	46bd      	mov	sp, r7
 80199e2:	bd80      	pop	{r7, pc}

080199e4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80199e4:	b580      	push	{r7, lr}
 80199e6:	b08c      	sub	sp, #48	@ 0x30
 80199e8:	af04      	add	r7, sp, #16
 80199ea:	6078      	str	r0, [r7, #4]
 80199ec:	460b      	mov	r3, r1
 80199ee:	70fb      	strb	r3, [r7, #3]
 80199f0:	4613      	mov	r3, r2
 80199f2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80199f4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80199f8:	2124      	movs	r1, #36	@ 0x24
 80199fa:	2022      	movs	r0, #34	@ 0x22
 80199fc:	f7f8 faba 	bl	8011f74 <pbuf_alloc>
 8019a00:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019a02:	69fb      	ldr	r3, [r7, #28]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d04c      	beq.n	8019aa2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019a08:	69fb      	ldr	r3, [r7, #28]
 8019a0a:	895b      	ldrh	r3, [r3, #10]
 8019a0c:	2b23      	cmp	r3, #35	@ 0x23
 8019a0e:	d806      	bhi.n	8019a1e <icmp_send_response+0x3a>
 8019a10:	4b26      	ldr	r3, [pc, #152]	@ (8019aac <icmp_send_response+0xc8>)
 8019a12:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8019a16:	4926      	ldr	r1, [pc, #152]	@ (8019ab0 <icmp_send_response+0xcc>)
 8019a18:	4826      	ldr	r0, [pc, #152]	@ (8019ab4 <icmp_send_response+0xd0>)
 8019a1a:	f002 fc23 	bl	801c264 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	685b      	ldr	r3, [r3, #4]
 8019a22:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019a24:	69fb      	ldr	r3, [r7, #28]
 8019a26:	685b      	ldr	r3, [r3, #4]
 8019a28:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019a2a:	697b      	ldr	r3, [r7, #20]
 8019a2c:	78fa      	ldrb	r2, [r7, #3]
 8019a2e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019a30:	697b      	ldr	r3, [r7, #20]
 8019a32:	78ba      	ldrb	r2, [r7, #2]
 8019a34:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019a36:	697b      	ldr	r3, [r7, #20]
 8019a38:	2200      	movs	r2, #0
 8019a3a:	711a      	strb	r2, [r3, #4]
 8019a3c:	2200      	movs	r2, #0
 8019a3e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019a40:	697b      	ldr	r3, [r7, #20]
 8019a42:	2200      	movs	r2, #0
 8019a44:	719a      	strb	r2, [r3, #6]
 8019a46:	2200      	movs	r2, #0
 8019a48:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019a4a:	69fb      	ldr	r3, [r7, #28]
 8019a4c:	685b      	ldr	r3, [r3, #4]
 8019a4e:	f103 0008 	add.w	r0, r3, #8
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	685b      	ldr	r3, [r3, #4]
 8019a56:	221c      	movs	r2, #28
 8019a58:	4619      	mov	r1, r3
 8019a5a:	f002 fe2e 	bl	801c6ba <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019a5e:	69bb      	ldr	r3, [r7, #24]
 8019a60:	68db      	ldr	r3, [r3, #12]
 8019a62:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019a64:	f107 030c 	add.w	r3, r7, #12
 8019a68:	4618      	mov	r0, r3
 8019a6a:	f000 f825 	bl	8019ab8 <ip4_route>
 8019a6e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019a70:	693b      	ldr	r3, [r7, #16]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d011      	beq.n	8019a9a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019a76:	697b      	ldr	r3, [r7, #20]
 8019a78:	2200      	movs	r2, #0
 8019a7a:	709a      	strb	r2, [r3, #2]
 8019a7c:	2200      	movs	r2, #0
 8019a7e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019a80:	f107 020c 	add.w	r2, r7, #12
 8019a84:	693b      	ldr	r3, [r7, #16]
 8019a86:	9302      	str	r3, [sp, #8]
 8019a88:	2301      	movs	r3, #1
 8019a8a:	9301      	str	r3, [sp, #4]
 8019a8c:	2300      	movs	r3, #0
 8019a8e:	9300      	str	r3, [sp, #0]
 8019a90:	23ff      	movs	r3, #255	@ 0xff
 8019a92:	2100      	movs	r1, #0
 8019a94:	69f8      	ldr	r0, [r7, #28]
 8019a96:	f000 f9cd 	bl	8019e34 <ip4_output_if>
  }
  pbuf_free(q);
 8019a9a:	69f8      	ldr	r0, [r7, #28]
 8019a9c:	f7f8 fd4e 	bl	801253c <pbuf_free>
 8019aa0:	e000      	b.n	8019aa4 <icmp_send_response+0xc0>
    return;
 8019aa2:	bf00      	nop
}
 8019aa4:	3720      	adds	r7, #32
 8019aa6:	46bd      	mov	sp, r7
 8019aa8:	bd80      	pop	{r7, pc}
 8019aaa:	bf00      	nop
 8019aac:	0801fb30 	.word	0x0801fb30
 8019ab0:	0801fbfc 	.word	0x0801fbfc
 8019ab4:	0801fba0 	.word	0x0801fba0

08019ab8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019ab8:	b480      	push	{r7}
 8019aba:	b085      	sub	sp, #20
 8019abc:	af00      	add	r7, sp, #0
 8019abe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019ac0:	4b33      	ldr	r3, [pc, #204]	@ (8019b90 <ip4_route+0xd8>)
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	60fb      	str	r3, [r7, #12]
 8019ac6:	e036      	b.n	8019b36 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019ace:	f003 0301 	and.w	r3, r3, #1
 8019ad2:	b2db      	uxtb	r3, r3
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d02b      	beq.n	8019b30 <ip4_route+0x78>
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019ade:	089b      	lsrs	r3, r3, #2
 8019ae0:	f003 0301 	and.w	r3, r3, #1
 8019ae4:	b2db      	uxtb	r3, r3
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d022      	beq.n	8019b30 <ip4_route+0x78>
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	3304      	adds	r3, #4
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d01d      	beq.n	8019b30 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	681a      	ldr	r2, [r3, #0]
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	3304      	adds	r3, #4
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	405a      	eors	r2, r3
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	3308      	adds	r3, #8
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	4013      	ands	r3, r2
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d101      	bne.n	8019b10 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	e038      	b.n	8019b82 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019b16:	f003 0302 	and.w	r3, r3, #2
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d108      	bne.n	8019b30 <ip4_route+0x78>
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	681a      	ldr	r2, [r3, #0]
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	330c      	adds	r3, #12
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	429a      	cmp	r2, r3
 8019b2a:	d101      	bne.n	8019b30 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	e028      	b.n	8019b82 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	60fb      	str	r3, [r7, #12]
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d1c5      	bne.n	8019ac8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019b3c:	4b15      	ldr	r3, [pc, #84]	@ (8019b94 <ip4_route+0xdc>)
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d01a      	beq.n	8019b7a <ip4_route+0xc2>
 8019b44:	4b13      	ldr	r3, [pc, #76]	@ (8019b94 <ip4_route+0xdc>)
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019b4c:	f003 0301 	and.w	r3, r3, #1
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d012      	beq.n	8019b7a <ip4_route+0xc2>
 8019b54:	4b0f      	ldr	r3, [pc, #60]	@ (8019b94 <ip4_route+0xdc>)
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019b5c:	f003 0304 	and.w	r3, r3, #4
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d00a      	beq.n	8019b7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019b64:	4b0b      	ldr	r3, [pc, #44]	@ (8019b94 <ip4_route+0xdc>)
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	3304      	adds	r3, #4
 8019b6a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d004      	beq.n	8019b7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	b2db      	uxtb	r3, r3
 8019b76:	2b7f      	cmp	r3, #127	@ 0x7f
 8019b78:	d101      	bne.n	8019b7e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	e001      	b.n	8019b82 <ip4_route+0xca>
  }

  return netif_default;
 8019b7e:	4b05      	ldr	r3, [pc, #20]	@ (8019b94 <ip4_route+0xdc>)
 8019b80:	681b      	ldr	r3, [r3, #0]
}
 8019b82:	4618      	mov	r0, r3
 8019b84:	3714      	adds	r7, #20
 8019b86:	46bd      	mov	sp, r7
 8019b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b8c:	4770      	bx	lr
 8019b8e:	bf00      	nop
 8019b90:	20027570 	.word	0x20027570
 8019b94:	20027574 	.word	0x20027574

08019b98 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b082      	sub	sp, #8
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019ba6:	f003 0301 	and.w	r3, r3, #1
 8019baa:	b2db      	uxtb	r3, r3
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d016      	beq.n	8019bde <ip4_input_accept+0x46>
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	3304      	adds	r3, #4
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d011      	beq.n	8019bde <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019bba:	4b0b      	ldr	r3, [pc, #44]	@ (8019be8 <ip4_input_accept+0x50>)
 8019bbc:	695a      	ldr	r2, [r3, #20]
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	3304      	adds	r3, #4
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	429a      	cmp	r2, r3
 8019bc6:	d008      	beq.n	8019bda <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019bc8:	4b07      	ldr	r3, [pc, #28]	@ (8019be8 <ip4_input_accept+0x50>)
 8019bca:	695b      	ldr	r3, [r3, #20]
 8019bcc:	6879      	ldr	r1, [r7, #4]
 8019bce:	4618      	mov	r0, r3
 8019bd0:	f000 fa08 	bl	8019fe4 <ip4_addr_isbroadcast_u32>
 8019bd4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d001      	beq.n	8019bde <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019bda:	2301      	movs	r3, #1
 8019bdc:	e000      	b.n	8019be0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019bde:	2300      	movs	r3, #0
}
 8019be0:	4618      	mov	r0, r3
 8019be2:	3708      	adds	r7, #8
 8019be4:	46bd      	mov	sp, r7
 8019be6:	bd80      	pop	{r7, pc}
 8019be8:	2002447c 	.word	0x2002447c

08019bec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019bec:	b580      	push	{r7, lr}
 8019bee:	b086      	sub	sp, #24
 8019bf0:	af00      	add	r7, sp, #0
 8019bf2:	6078      	str	r0, [r7, #4]
 8019bf4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	685b      	ldr	r3, [r3, #4]
 8019bfa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019bfc:	697b      	ldr	r3, [r7, #20]
 8019bfe:	781b      	ldrb	r3, [r3, #0]
 8019c00:	091b      	lsrs	r3, r3, #4
 8019c02:	b2db      	uxtb	r3, r3
 8019c04:	2b04      	cmp	r3, #4
 8019c06:	d004      	beq.n	8019c12 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019c08:	6878      	ldr	r0, [r7, #4]
 8019c0a:	f7f8 fc97 	bl	801253c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019c0e:	2300      	movs	r3, #0
 8019c10:	e107      	b.n	8019e22 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019c12:	697b      	ldr	r3, [r7, #20]
 8019c14:	781b      	ldrb	r3, [r3, #0]
 8019c16:	f003 030f 	and.w	r3, r3, #15
 8019c1a:	b2db      	uxtb	r3, r3
 8019c1c:	009b      	lsls	r3, r3, #2
 8019c1e:	b2db      	uxtb	r3, r3
 8019c20:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019c22:	697b      	ldr	r3, [r7, #20]
 8019c24:	885b      	ldrh	r3, [r3, #2]
 8019c26:	b29b      	uxth	r3, r3
 8019c28:	4618      	mov	r0, r3
 8019c2a:	f7f7 f899 	bl	8010d60 <lwip_htons>
 8019c2e:	4603      	mov	r3, r0
 8019c30:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	891b      	ldrh	r3, [r3, #8]
 8019c36:	89ba      	ldrh	r2, [r7, #12]
 8019c38:	429a      	cmp	r2, r3
 8019c3a:	d204      	bcs.n	8019c46 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019c3c:	89bb      	ldrh	r3, [r7, #12]
 8019c3e:	4619      	mov	r1, r3
 8019c40:	6878      	ldr	r0, [r7, #4]
 8019c42:	f7f8 faf5 	bl	8012230 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	895b      	ldrh	r3, [r3, #10]
 8019c4a:	89fa      	ldrh	r2, [r7, #14]
 8019c4c:	429a      	cmp	r2, r3
 8019c4e:	d807      	bhi.n	8019c60 <ip4_input+0x74>
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	891b      	ldrh	r3, [r3, #8]
 8019c54:	89ba      	ldrh	r2, [r7, #12]
 8019c56:	429a      	cmp	r2, r3
 8019c58:	d802      	bhi.n	8019c60 <ip4_input+0x74>
 8019c5a:	89fb      	ldrh	r3, [r7, #14]
 8019c5c:	2b13      	cmp	r3, #19
 8019c5e:	d804      	bhi.n	8019c6a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019c60:	6878      	ldr	r0, [r7, #4]
 8019c62:	f7f8 fc6b 	bl	801253c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019c66:	2300      	movs	r3, #0
 8019c68:	e0db      	b.n	8019e22 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019c6a:	697b      	ldr	r3, [r7, #20]
 8019c6c:	691b      	ldr	r3, [r3, #16]
 8019c6e:	4a6f      	ldr	r2, [pc, #444]	@ (8019e2c <ip4_input+0x240>)
 8019c70:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019c72:	697b      	ldr	r3, [r7, #20]
 8019c74:	68db      	ldr	r3, [r3, #12]
 8019c76:	4a6d      	ldr	r2, [pc, #436]	@ (8019e2c <ip4_input+0x240>)
 8019c78:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019c7a:	4b6c      	ldr	r3, [pc, #432]	@ (8019e2c <ip4_input+0x240>)
 8019c7c:	695b      	ldr	r3, [r3, #20]
 8019c7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019c82:	2be0      	cmp	r3, #224	@ 0xe0
 8019c84:	d112      	bne.n	8019cac <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019c86:	683b      	ldr	r3, [r7, #0]
 8019c88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019c8c:	f003 0301 	and.w	r3, r3, #1
 8019c90:	b2db      	uxtb	r3, r3
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d007      	beq.n	8019ca6 <ip4_input+0xba>
 8019c96:	683b      	ldr	r3, [r7, #0]
 8019c98:	3304      	adds	r3, #4
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d002      	beq.n	8019ca6 <ip4_input+0xba>
      netif = inp;
 8019ca0:	683b      	ldr	r3, [r7, #0]
 8019ca2:	613b      	str	r3, [r7, #16]
 8019ca4:	e02a      	b.n	8019cfc <ip4_input+0x110>
    } else {
      netif = NULL;
 8019ca6:	2300      	movs	r3, #0
 8019ca8:	613b      	str	r3, [r7, #16]
 8019caa:	e027      	b.n	8019cfc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019cac:	6838      	ldr	r0, [r7, #0]
 8019cae:	f7ff ff73 	bl	8019b98 <ip4_input_accept>
 8019cb2:	4603      	mov	r3, r0
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d002      	beq.n	8019cbe <ip4_input+0xd2>
      netif = inp;
 8019cb8:	683b      	ldr	r3, [r7, #0]
 8019cba:	613b      	str	r3, [r7, #16]
 8019cbc:	e01e      	b.n	8019cfc <ip4_input+0x110>
    } else {
      netif = NULL;
 8019cbe:	2300      	movs	r3, #0
 8019cc0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019cc2:	4b5a      	ldr	r3, [pc, #360]	@ (8019e2c <ip4_input+0x240>)
 8019cc4:	695b      	ldr	r3, [r3, #20]
 8019cc6:	b2db      	uxtb	r3, r3
 8019cc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8019cca:	d017      	beq.n	8019cfc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019ccc:	4b58      	ldr	r3, [pc, #352]	@ (8019e30 <ip4_input+0x244>)
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	613b      	str	r3, [r7, #16]
 8019cd2:	e00e      	b.n	8019cf2 <ip4_input+0x106>
          if (netif == inp) {
 8019cd4:	693a      	ldr	r2, [r7, #16]
 8019cd6:	683b      	ldr	r3, [r7, #0]
 8019cd8:	429a      	cmp	r2, r3
 8019cda:	d006      	beq.n	8019cea <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019cdc:	6938      	ldr	r0, [r7, #16]
 8019cde:	f7ff ff5b 	bl	8019b98 <ip4_input_accept>
 8019ce2:	4603      	mov	r3, r0
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d108      	bne.n	8019cfa <ip4_input+0x10e>
 8019ce8:	e000      	b.n	8019cec <ip4_input+0x100>
            continue;
 8019cea:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019cec:	693b      	ldr	r3, [r7, #16]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	613b      	str	r3, [r7, #16]
 8019cf2:	693b      	ldr	r3, [r7, #16]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d1ed      	bne.n	8019cd4 <ip4_input+0xe8>
 8019cf8:	e000      	b.n	8019cfc <ip4_input+0x110>
            break;
 8019cfa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8019e2c <ip4_input+0x240>)
 8019cfe:	691b      	ldr	r3, [r3, #16]
 8019d00:	6839      	ldr	r1, [r7, #0]
 8019d02:	4618      	mov	r0, r3
 8019d04:	f000 f96e 	bl	8019fe4 <ip4_addr_isbroadcast_u32>
 8019d08:	4603      	mov	r3, r0
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d105      	bne.n	8019d1a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019d0e:	4b47      	ldr	r3, [pc, #284]	@ (8019e2c <ip4_input+0x240>)
 8019d10:	691b      	ldr	r3, [r3, #16]
 8019d12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019d16:	2be0      	cmp	r3, #224	@ 0xe0
 8019d18:	d104      	bne.n	8019d24 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019d1a:	6878      	ldr	r0, [r7, #4]
 8019d1c:	f7f8 fc0e 	bl	801253c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019d20:	2300      	movs	r3, #0
 8019d22:	e07e      	b.n	8019e22 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019d24:	693b      	ldr	r3, [r7, #16]
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d104      	bne.n	8019d34 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019d2a:	6878      	ldr	r0, [r7, #4]
 8019d2c:	f7f8 fc06 	bl	801253c <pbuf_free>
    return ERR_OK;
 8019d30:	2300      	movs	r3, #0
 8019d32:	e076      	b.n	8019e22 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019d34:	697b      	ldr	r3, [r7, #20]
 8019d36:	88db      	ldrh	r3, [r3, #6]
 8019d38:	b29b      	uxth	r3, r3
 8019d3a:	461a      	mov	r2, r3
 8019d3c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8019d40:	4013      	ands	r3, r2
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d00b      	beq.n	8019d5e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019d46:	6878      	ldr	r0, [r7, #4]
 8019d48:	f000 fd22 	bl	801a790 <ip4_reass>
 8019d4c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d101      	bne.n	8019d58 <ip4_input+0x16c>
      return ERR_OK;
 8019d54:	2300      	movs	r3, #0
 8019d56:	e064      	b.n	8019e22 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	685b      	ldr	r3, [r3, #4]
 8019d5c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019d5e:	4a33      	ldr	r2, [pc, #204]	@ (8019e2c <ip4_input+0x240>)
 8019d60:	693b      	ldr	r3, [r7, #16]
 8019d62:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019d64:	4a31      	ldr	r2, [pc, #196]	@ (8019e2c <ip4_input+0x240>)
 8019d66:	683b      	ldr	r3, [r7, #0]
 8019d68:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019d6a:	4a30      	ldr	r2, [pc, #192]	@ (8019e2c <ip4_input+0x240>)
 8019d6c:	697b      	ldr	r3, [r7, #20]
 8019d6e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019d70:	697b      	ldr	r3, [r7, #20]
 8019d72:	781b      	ldrb	r3, [r3, #0]
 8019d74:	f003 030f 	and.w	r3, r3, #15
 8019d78:	b2db      	uxtb	r3, r3
 8019d7a:	009b      	lsls	r3, r3, #2
 8019d7c:	b2db      	uxtb	r3, r3
 8019d7e:	461a      	mov	r2, r3
 8019d80:	4b2a      	ldr	r3, [pc, #168]	@ (8019e2c <ip4_input+0x240>)
 8019d82:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019d84:	89fb      	ldrh	r3, [r7, #14]
 8019d86:	4619      	mov	r1, r3
 8019d88:	6878      	ldr	r0, [r7, #4]
 8019d8a:	f7f8 fb51 	bl	8012430 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019d8e:	697b      	ldr	r3, [r7, #20]
 8019d90:	7a5b      	ldrb	r3, [r3, #9]
 8019d92:	2b11      	cmp	r3, #17
 8019d94:	d006      	beq.n	8019da4 <ip4_input+0x1b8>
 8019d96:	2b11      	cmp	r3, #17
 8019d98:	dc13      	bgt.n	8019dc2 <ip4_input+0x1d6>
 8019d9a:	2b01      	cmp	r3, #1
 8019d9c:	d00c      	beq.n	8019db8 <ip4_input+0x1cc>
 8019d9e:	2b06      	cmp	r3, #6
 8019da0:	d005      	beq.n	8019dae <ip4_input+0x1c2>
 8019da2:	e00e      	b.n	8019dc2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019da4:	6839      	ldr	r1, [r7, #0]
 8019da6:	6878      	ldr	r0, [r7, #4]
 8019da8:	f7fe f9f2 	bl	8018190 <udp_input>
        break;
 8019dac:	e026      	b.n	8019dfc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019dae:	6839      	ldr	r1, [r7, #0]
 8019db0:	6878      	ldr	r0, [r7, #4]
 8019db2:	f7fa fa09 	bl	80141c8 <tcp_input>
        break;
 8019db6:	e021      	b.n	8019dfc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019db8:	6839      	ldr	r1, [r7, #0]
 8019dba:	6878      	ldr	r0, [r7, #4]
 8019dbc:	f7ff fcee 	bl	801979c <icmp_input>
        break;
 8019dc0:	e01c      	b.n	8019dfc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8019e2c <ip4_input+0x240>)
 8019dc4:	695b      	ldr	r3, [r3, #20]
 8019dc6:	6939      	ldr	r1, [r7, #16]
 8019dc8:	4618      	mov	r0, r3
 8019dca:	f000 f90b 	bl	8019fe4 <ip4_addr_isbroadcast_u32>
 8019dce:	4603      	mov	r3, r0
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d10f      	bne.n	8019df4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019dd4:	4b15      	ldr	r3, [pc, #84]	@ (8019e2c <ip4_input+0x240>)
 8019dd6:	695b      	ldr	r3, [r3, #20]
 8019dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019ddc:	2be0      	cmp	r3, #224	@ 0xe0
 8019dde:	d009      	beq.n	8019df4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019de0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019de4:	4619      	mov	r1, r3
 8019de6:	6878      	ldr	r0, [r7, #4]
 8019de8:	f7f8 fb95 	bl	8012516 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019dec:	2102      	movs	r1, #2
 8019dee:	6878      	ldr	r0, [r7, #4]
 8019df0:	f7ff fdd8 	bl	80199a4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019df4:	6878      	ldr	r0, [r7, #4]
 8019df6:	f7f8 fba1 	bl	801253c <pbuf_free>
        break;
 8019dfa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8019e2c <ip4_input+0x240>)
 8019dfe:	2200      	movs	r2, #0
 8019e00:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019e02:	4b0a      	ldr	r3, [pc, #40]	@ (8019e2c <ip4_input+0x240>)
 8019e04:	2200      	movs	r2, #0
 8019e06:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019e08:	4b08      	ldr	r3, [pc, #32]	@ (8019e2c <ip4_input+0x240>)
 8019e0a:	2200      	movs	r2, #0
 8019e0c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019e0e:	4b07      	ldr	r3, [pc, #28]	@ (8019e2c <ip4_input+0x240>)
 8019e10:	2200      	movs	r2, #0
 8019e12:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019e14:	4b05      	ldr	r3, [pc, #20]	@ (8019e2c <ip4_input+0x240>)
 8019e16:	2200      	movs	r2, #0
 8019e18:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019e1a:	4b04      	ldr	r3, [pc, #16]	@ (8019e2c <ip4_input+0x240>)
 8019e1c:	2200      	movs	r2, #0
 8019e1e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019e20:	2300      	movs	r3, #0
}
 8019e22:	4618      	mov	r0, r3
 8019e24:	3718      	adds	r7, #24
 8019e26:	46bd      	mov	sp, r7
 8019e28:	bd80      	pop	{r7, pc}
 8019e2a:	bf00      	nop
 8019e2c:	2002447c 	.word	0x2002447c
 8019e30:	20027570 	.word	0x20027570

08019e34 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019e34:	b580      	push	{r7, lr}
 8019e36:	b08a      	sub	sp, #40	@ 0x28
 8019e38:	af04      	add	r7, sp, #16
 8019e3a:	60f8      	str	r0, [r7, #12]
 8019e3c:	60b9      	str	r1, [r7, #8]
 8019e3e:	607a      	str	r2, [r7, #4]
 8019e40:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019e42:	68bb      	ldr	r3, [r7, #8]
 8019e44:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d009      	beq.n	8019e60 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019e4c:	68bb      	ldr	r3, [r7, #8]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d003      	beq.n	8019e5a <ip4_output_if+0x26>
 8019e52:	68bb      	ldr	r3, [r7, #8]
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	d102      	bne.n	8019e60 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e5c:	3304      	adds	r3, #4
 8019e5e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019e60:	78fa      	ldrb	r2, [r7, #3]
 8019e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e64:	9302      	str	r3, [sp, #8]
 8019e66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019e6a:	9301      	str	r3, [sp, #4]
 8019e6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019e70:	9300      	str	r3, [sp, #0]
 8019e72:	4613      	mov	r3, r2
 8019e74:	687a      	ldr	r2, [r7, #4]
 8019e76:	6979      	ldr	r1, [r7, #20]
 8019e78:	68f8      	ldr	r0, [r7, #12]
 8019e7a:	f000 f805 	bl	8019e88 <ip4_output_if_src>
 8019e7e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019e80:	4618      	mov	r0, r3
 8019e82:	3718      	adds	r7, #24
 8019e84:	46bd      	mov	sp, r7
 8019e86:	bd80      	pop	{r7, pc}

08019e88 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b088      	sub	sp, #32
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	60f8      	str	r0, [r7, #12]
 8019e90:	60b9      	str	r1, [r7, #8]
 8019e92:	607a      	str	r2, [r7, #4]
 8019e94:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	7b9b      	ldrb	r3, [r3, #14]
 8019e9a:	2b01      	cmp	r3, #1
 8019e9c:	d006      	beq.n	8019eac <ip4_output_if_src+0x24>
 8019e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8019fcc <ip4_output_if_src+0x144>)
 8019ea0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8019ea4:	494a      	ldr	r1, [pc, #296]	@ (8019fd0 <ip4_output_if_src+0x148>)
 8019ea6:	484b      	ldr	r0, [pc, #300]	@ (8019fd4 <ip4_output_if_src+0x14c>)
 8019ea8:	f002 f9dc 	bl	801c264 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d060      	beq.n	8019f74 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019eb2:	2314      	movs	r3, #20
 8019eb4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019eb6:	2114      	movs	r1, #20
 8019eb8:	68f8      	ldr	r0, [r7, #12]
 8019eba:	f7f8 faa9 	bl	8012410 <pbuf_add_header>
 8019ebe:	4603      	mov	r3, r0
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d002      	beq.n	8019eca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019ec4:	f06f 0301 	mvn.w	r3, #1
 8019ec8:	e07c      	b.n	8019fc4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019eca:	68fb      	ldr	r3, [r7, #12]
 8019ecc:	685b      	ldr	r3, [r3, #4]
 8019ece:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019ed0:	68fb      	ldr	r3, [r7, #12]
 8019ed2:	895b      	ldrh	r3, [r3, #10]
 8019ed4:	2b13      	cmp	r3, #19
 8019ed6:	d806      	bhi.n	8019ee6 <ip4_output_if_src+0x5e>
 8019ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8019fcc <ip4_output_if_src+0x144>)
 8019eda:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8019ede:	493e      	ldr	r1, [pc, #248]	@ (8019fd8 <ip4_output_if_src+0x150>)
 8019ee0:	483c      	ldr	r0, [pc, #240]	@ (8019fd4 <ip4_output_if_src+0x14c>)
 8019ee2:	f002 f9bf 	bl	801c264 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019ee6:	69fb      	ldr	r3, [r7, #28]
 8019ee8:	78fa      	ldrb	r2, [r7, #3]
 8019eea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019eec:	69fb      	ldr	r3, [r7, #28]
 8019eee:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019ef2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	681a      	ldr	r2, [r3, #0]
 8019ef8:	69fb      	ldr	r3, [r7, #28]
 8019efa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019efc:	8b7b      	ldrh	r3, [r7, #26]
 8019efe:	089b      	lsrs	r3, r3, #2
 8019f00:	b29b      	uxth	r3, r3
 8019f02:	b2db      	uxtb	r3, r3
 8019f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019f08:	b2da      	uxtb	r2, r3
 8019f0a:	69fb      	ldr	r3, [r7, #28]
 8019f0c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019f0e:	69fb      	ldr	r3, [r7, #28]
 8019f10:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019f14:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	891b      	ldrh	r3, [r3, #8]
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	f7f6 ff20 	bl	8010d60 <lwip_htons>
 8019f20:	4603      	mov	r3, r0
 8019f22:	461a      	mov	r2, r3
 8019f24:	69fb      	ldr	r3, [r7, #28]
 8019f26:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019f28:	69fb      	ldr	r3, [r7, #28]
 8019f2a:	2200      	movs	r2, #0
 8019f2c:	719a      	strb	r2, [r3, #6]
 8019f2e:	2200      	movs	r2, #0
 8019f30:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019f32:	4b2a      	ldr	r3, [pc, #168]	@ (8019fdc <ip4_output_if_src+0x154>)
 8019f34:	881b      	ldrh	r3, [r3, #0]
 8019f36:	4618      	mov	r0, r3
 8019f38:	f7f6 ff12 	bl	8010d60 <lwip_htons>
 8019f3c:	4603      	mov	r3, r0
 8019f3e:	461a      	mov	r2, r3
 8019f40:	69fb      	ldr	r3, [r7, #28]
 8019f42:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019f44:	4b25      	ldr	r3, [pc, #148]	@ (8019fdc <ip4_output_if_src+0x154>)
 8019f46:	881b      	ldrh	r3, [r3, #0]
 8019f48:	3301      	adds	r3, #1
 8019f4a:	b29a      	uxth	r2, r3
 8019f4c:	4b23      	ldr	r3, [pc, #140]	@ (8019fdc <ip4_output_if_src+0x154>)
 8019f4e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019f50:	68bb      	ldr	r3, [r7, #8]
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d104      	bne.n	8019f60 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019f56:	4b22      	ldr	r3, [pc, #136]	@ (8019fe0 <ip4_output_if_src+0x158>)
 8019f58:	681a      	ldr	r2, [r3, #0]
 8019f5a:	69fb      	ldr	r3, [r7, #28]
 8019f5c:	60da      	str	r2, [r3, #12]
 8019f5e:	e003      	b.n	8019f68 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019f60:	68bb      	ldr	r3, [r7, #8]
 8019f62:	681a      	ldr	r2, [r3, #0]
 8019f64:	69fb      	ldr	r3, [r7, #28]
 8019f66:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019f68:	69fb      	ldr	r3, [r7, #28]
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	729a      	strb	r2, [r3, #10]
 8019f6e:	2200      	movs	r2, #0
 8019f70:	72da      	strb	r2, [r3, #11]
 8019f72:	e00f      	b.n	8019f94 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	895b      	ldrh	r3, [r3, #10]
 8019f78:	2b13      	cmp	r3, #19
 8019f7a:	d802      	bhi.n	8019f82 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019f7c:	f06f 0301 	mvn.w	r3, #1
 8019f80:	e020      	b.n	8019fc4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019f82:	68fb      	ldr	r3, [r7, #12]
 8019f84:	685b      	ldr	r3, [r3, #4]
 8019f86:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019f88:	69fb      	ldr	r3, [r7, #28]
 8019f8a:	691b      	ldr	r3, [r3, #16]
 8019f8c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019f8e:	f107 0314 	add.w	r3, r7, #20
 8019f92:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d00c      	beq.n	8019fb6 <ip4_output_if_src+0x12e>
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	891a      	ldrh	r2, [r3, #8]
 8019fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019fa2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8019fa4:	429a      	cmp	r2, r3
 8019fa6:	d906      	bls.n	8019fb6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019fa8:	687a      	ldr	r2, [r7, #4]
 8019faa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019fac:	68f8      	ldr	r0, [r7, #12]
 8019fae:	f000 fde3 	bl	801ab78 <ip4_frag>
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	e006      	b.n	8019fc4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019fb8:	695b      	ldr	r3, [r3, #20]
 8019fba:	687a      	ldr	r2, [r7, #4]
 8019fbc:	68f9      	ldr	r1, [r7, #12]
 8019fbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019fc0:	4798      	blx	r3
 8019fc2:	4603      	mov	r3, r0
}
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	3720      	adds	r7, #32
 8019fc8:	46bd      	mov	sp, r7
 8019fca:	bd80      	pop	{r7, pc}
 8019fcc:	0801fc28 	.word	0x0801fc28
 8019fd0:	0801fc5c 	.word	0x0801fc5c
 8019fd4:	0801fc68 	.word	0x0801fc68
 8019fd8:	0801fc90 	.word	0x0801fc90
 8019fdc:	200276ce 	.word	0x200276ce
 8019fe0:	08020718 	.word	0x08020718

08019fe4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019fe4:	b480      	push	{r7}
 8019fe6:	b085      	sub	sp, #20
 8019fe8:	af00      	add	r7, sp, #0
 8019fea:	6078      	str	r0, [r7, #4]
 8019fec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ff8:	d002      	beq.n	801a000 <ip4_addr_isbroadcast_u32+0x1c>
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d101      	bne.n	801a004 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a000:	2301      	movs	r3, #1
 801a002:	e02a      	b.n	801a05a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a004:	683b      	ldr	r3, [r7, #0]
 801a006:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a00a:	f003 0302 	and.w	r3, r3, #2
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d101      	bne.n	801a016 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a012:	2300      	movs	r3, #0
 801a014:	e021      	b.n	801a05a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a016:	683b      	ldr	r3, [r7, #0]
 801a018:	3304      	adds	r3, #4
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	687a      	ldr	r2, [r7, #4]
 801a01e:	429a      	cmp	r2, r3
 801a020:	d101      	bne.n	801a026 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a022:	2300      	movs	r3, #0
 801a024:	e019      	b.n	801a05a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a026:	68fa      	ldr	r2, [r7, #12]
 801a028:	683b      	ldr	r3, [r7, #0]
 801a02a:	3304      	adds	r3, #4
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	405a      	eors	r2, r3
 801a030:	683b      	ldr	r3, [r7, #0]
 801a032:	3308      	adds	r3, #8
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	4013      	ands	r3, r2
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d10d      	bne.n	801a058 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a03c:	683b      	ldr	r3, [r7, #0]
 801a03e:	3308      	adds	r3, #8
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	43da      	mvns	r2, r3
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a048:	683b      	ldr	r3, [r7, #0]
 801a04a:	3308      	adds	r3, #8
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a050:	429a      	cmp	r2, r3
 801a052:	d101      	bne.n	801a058 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a054:	2301      	movs	r3, #1
 801a056:	e000      	b.n	801a05a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a058:	2300      	movs	r3, #0
  }
}
 801a05a:	4618      	mov	r0, r3
 801a05c:	3714      	adds	r7, #20
 801a05e:	46bd      	mov	sp, r7
 801a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a064:	4770      	bx	lr
	...

0801a068 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801a068:	b580      	push	{r7, lr}
 801a06a:	b082      	sub	sp, #8
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801a070:	2210      	movs	r2, #16
 801a072:	4904      	ldr	r1, [pc, #16]	@ (801a084 <ip4addr_ntoa+0x1c>)
 801a074:	6878      	ldr	r0, [r7, #4]
 801a076:	f000 f807 	bl	801a088 <ip4addr_ntoa_r>
 801a07a:	4603      	mov	r3, r0
}
 801a07c:	4618      	mov	r0, r3
 801a07e:	3708      	adds	r7, #8
 801a080:	46bd      	mov	sp, r7
 801a082:	bd80      	pop	{r7, pc}
 801a084:	200276d0 	.word	0x200276d0

0801a088 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801a088:	b480      	push	{r7}
 801a08a:	b08d      	sub	sp, #52	@ 0x34
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	60f8      	str	r0, [r7, #12]
 801a090:	60b9      	str	r1, [r7, #8]
 801a092:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801a094:	2300      	movs	r3, #0
 801a096:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801a09e:	68bb      	ldr	r3, [r7, #8]
 801a0a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 801a0a2:	f107 0318 	add.w	r3, r7, #24
 801a0a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a0ae:	e058      	b.n	801a162 <ip4addr_ntoa_r+0xda>
    i = 0;
 801a0b0:	2300      	movs	r3, #0
 801a0b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 801a0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0b8:	781a      	ldrb	r2, [r3, #0]
 801a0ba:	4b32      	ldr	r3, [pc, #200]	@ (801a184 <ip4addr_ntoa_r+0xfc>)
 801a0bc:	fba3 1302 	umull	r1, r3, r3, r2
 801a0c0:	08d9      	lsrs	r1, r3, #3
 801a0c2:	460b      	mov	r3, r1
 801a0c4:	009b      	lsls	r3, r3, #2
 801a0c6:	440b      	add	r3, r1
 801a0c8:	005b      	lsls	r3, r3, #1
 801a0ca:	1ad3      	subs	r3, r2, r3
 801a0cc:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801a0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0d0:	781b      	ldrb	r3, [r3, #0]
 801a0d2:	4a2c      	ldr	r2, [pc, #176]	@ (801a184 <ip4addr_ntoa_r+0xfc>)
 801a0d4:	fba2 2303 	umull	r2, r3, r2, r3
 801a0d8:	08db      	lsrs	r3, r3, #3
 801a0da:	b2da      	uxtb	r2, r3
 801a0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0de:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801a0e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a0e4:	1c5a      	adds	r2, r3, #1
 801a0e6:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801a0ea:	4619      	mov	r1, r3
 801a0ec:	7ffb      	ldrb	r3, [r7, #31]
 801a0ee:	3330      	adds	r3, #48	@ 0x30
 801a0f0:	b2da      	uxtb	r2, r3
 801a0f2:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 801a0f6:	443b      	add	r3, r7
 801a0f8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801a0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0fe:	781b      	ldrb	r3, [r3, #0]
 801a100:	2b00      	cmp	r3, #0
 801a102:	d1d8      	bne.n	801a0b6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801a104:	e011      	b.n	801a12a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801a106:	6a3b      	ldr	r3, [r7, #32]
 801a108:	1c5a      	adds	r2, r3, #1
 801a10a:	623a      	str	r2, [r7, #32]
 801a10c:	687a      	ldr	r2, [r7, #4]
 801a10e:	429a      	cmp	r2, r3
 801a110:	dc01      	bgt.n	801a116 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801a112:	2300      	movs	r3, #0
 801a114:	e030      	b.n	801a178 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801a116:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801a11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a11c:	1c59      	adds	r1, r3, #1
 801a11e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a120:	3230      	adds	r2, #48	@ 0x30
 801a122:	443a      	add	r2, r7
 801a124:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801a128:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801a12a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a12e:	1e5a      	subs	r2, r3, #1
 801a130:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801a134:	2b00      	cmp	r3, #0
 801a136:	d1e6      	bne.n	801a106 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801a138:	6a3b      	ldr	r3, [r7, #32]
 801a13a:	1c5a      	adds	r2, r3, #1
 801a13c:	623a      	str	r2, [r7, #32]
 801a13e:	687a      	ldr	r2, [r7, #4]
 801a140:	429a      	cmp	r2, r3
 801a142:	dc01      	bgt.n	801a148 <ip4addr_ntoa_r+0xc0>
      return NULL;
 801a144:	2300      	movs	r3, #0
 801a146:	e017      	b.n	801a178 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801a148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a14a:	1c5a      	adds	r2, r3, #1
 801a14c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a14e:	222e      	movs	r2, #46	@ 0x2e
 801a150:	701a      	strb	r2, [r3, #0]
    ap++;
 801a152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a154:	3301      	adds	r3, #1
 801a156:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801a158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a15c:	3301      	adds	r3, #1
 801a15e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a162:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a166:	2b03      	cmp	r3, #3
 801a168:	d9a2      	bls.n	801a0b0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801a16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a16c:	3b01      	subs	r3, #1
 801a16e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a172:	2200      	movs	r2, #0
 801a174:	701a      	strb	r2, [r3, #0]
  return buf;
 801a176:	68bb      	ldr	r3, [r7, #8]
}
 801a178:	4618      	mov	r0, r3
 801a17a:	3734      	adds	r7, #52	@ 0x34
 801a17c:	46bd      	mov	sp, r7
 801a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a182:	4770      	bx	lr
 801a184:	cccccccd 	.word	0xcccccccd

0801a188 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a188:	b580      	push	{r7, lr}
 801a18a:	b084      	sub	sp, #16
 801a18c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a18e:	2300      	movs	r3, #0
 801a190:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a192:	4b12      	ldr	r3, [pc, #72]	@ (801a1dc <ip_reass_tmr+0x54>)
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a198:	e018      	b.n	801a1cc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	7fdb      	ldrb	r3, [r3, #31]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d00b      	beq.n	801a1ba <ip_reass_tmr+0x32>
      r->timer--;
 801a1a2:	68fb      	ldr	r3, [r7, #12]
 801a1a4:	7fdb      	ldrb	r3, [r3, #31]
 801a1a6:	3b01      	subs	r3, #1
 801a1a8:	b2da      	uxtb	r2, r3
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	60fb      	str	r3, [r7, #12]
 801a1b8:	e008      	b.n	801a1cc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a1c4:	68b9      	ldr	r1, [r7, #8]
 801a1c6:	6878      	ldr	r0, [r7, #4]
 801a1c8:	f000 f80a 	bl	801a1e0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d1e3      	bne.n	801a19a <ip_reass_tmr+0x12>
    }
  }
}
 801a1d2:	bf00      	nop
 801a1d4:	bf00      	nop
 801a1d6:	3710      	adds	r7, #16
 801a1d8:	46bd      	mov	sp, r7
 801a1da:	bd80      	pop	{r7, pc}
 801a1dc:	200276e0 	.word	0x200276e0

0801a1e0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a1e0:	b580      	push	{r7, lr}
 801a1e2:	b088      	sub	sp, #32
 801a1e4:	af00      	add	r7, sp, #0
 801a1e6:	6078      	str	r0, [r7, #4]
 801a1e8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a1ee:	683a      	ldr	r2, [r7, #0]
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	429a      	cmp	r2, r3
 801a1f4:	d105      	bne.n	801a202 <ip_reass_free_complete_datagram+0x22>
 801a1f6:	4b45      	ldr	r3, [pc, #276]	@ (801a30c <ip_reass_free_complete_datagram+0x12c>)
 801a1f8:	22ab      	movs	r2, #171	@ 0xab
 801a1fa:	4945      	ldr	r1, [pc, #276]	@ (801a310 <ip_reass_free_complete_datagram+0x130>)
 801a1fc:	4845      	ldr	r0, [pc, #276]	@ (801a314 <ip_reass_free_complete_datagram+0x134>)
 801a1fe:	f002 f831 	bl	801c264 <iprintf>
  if (prev != NULL) {
 801a202:	683b      	ldr	r3, [r7, #0]
 801a204:	2b00      	cmp	r3, #0
 801a206:	d00a      	beq.n	801a21e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a208:	683b      	ldr	r3, [r7, #0]
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	687a      	ldr	r2, [r7, #4]
 801a20e:	429a      	cmp	r2, r3
 801a210:	d005      	beq.n	801a21e <ip_reass_free_complete_datagram+0x3e>
 801a212:	4b3e      	ldr	r3, [pc, #248]	@ (801a30c <ip_reass_free_complete_datagram+0x12c>)
 801a214:	22ad      	movs	r2, #173	@ 0xad
 801a216:	4940      	ldr	r1, [pc, #256]	@ (801a318 <ip_reass_free_complete_datagram+0x138>)
 801a218:	483e      	ldr	r0, [pc, #248]	@ (801a314 <ip_reass_free_complete_datagram+0x134>)
 801a21a:	f002 f823 	bl	801c264 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	685b      	ldr	r3, [r3, #4]
 801a222:	685b      	ldr	r3, [r3, #4]
 801a224:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a226:	697b      	ldr	r3, [r7, #20]
 801a228:	889b      	ldrh	r3, [r3, #4]
 801a22a:	b29b      	uxth	r3, r3
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d12a      	bne.n	801a286 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	685b      	ldr	r3, [r3, #4]
 801a234:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a236:	697b      	ldr	r3, [r7, #20]
 801a238:	681a      	ldr	r2, [r3, #0]
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a23e:	69bb      	ldr	r3, [r7, #24]
 801a240:	6858      	ldr	r0, [r3, #4]
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	3308      	adds	r3, #8
 801a246:	2214      	movs	r2, #20
 801a248:	4619      	mov	r1, r3
 801a24a:	f002 fa36 	bl	801c6ba <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a24e:	2101      	movs	r1, #1
 801a250:	69b8      	ldr	r0, [r7, #24]
 801a252:	f7ff fbb7 	bl	80199c4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a256:	69b8      	ldr	r0, [r7, #24]
 801a258:	f7f8 f9fe 	bl	8012658 <pbuf_clen>
 801a25c:	4603      	mov	r3, r0
 801a25e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a260:	8bfa      	ldrh	r2, [r7, #30]
 801a262:	8a7b      	ldrh	r3, [r7, #18]
 801a264:	4413      	add	r3, r2
 801a266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a26a:	db05      	blt.n	801a278 <ip_reass_free_complete_datagram+0x98>
 801a26c:	4b27      	ldr	r3, [pc, #156]	@ (801a30c <ip_reass_free_complete_datagram+0x12c>)
 801a26e:	22bc      	movs	r2, #188	@ 0xbc
 801a270:	492a      	ldr	r1, [pc, #168]	@ (801a31c <ip_reass_free_complete_datagram+0x13c>)
 801a272:	4828      	ldr	r0, [pc, #160]	@ (801a314 <ip_reass_free_complete_datagram+0x134>)
 801a274:	f001 fff6 	bl	801c264 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a278:	8bfa      	ldrh	r2, [r7, #30]
 801a27a:	8a7b      	ldrh	r3, [r7, #18]
 801a27c:	4413      	add	r3, r2
 801a27e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a280:	69b8      	ldr	r0, [r7, #24]
 801a282:	f7f8 f95b 	bl	801253c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	685b      	ldr	r3, [r3, #4]
 801a28a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a28c:	e01f      	b.n	801a2ce <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a28e:	69bb      	ldr	r3, [r7, #24]
 801a290:	685b      	ldr	r3, [r3, #4]
 801a292:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a294:	69bb      	ldr	r3, [r7, #24]
 801a296:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a298:	697b      	ldr	r3, [r7, #20]
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a29e:	68f8      	ldr	r0, [r7, #12]
 801a2a0:	f7f8 f9da 	bl	8012658 <pbuf_clen>
 801a2a4:	4603      	mov	r3, r0
 801a2a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a2a8:	8bfa      	ldrh	r2, [r7, #30]
 801a2aa:	8a7b      	ldrh	r3, [r7, #18]
 801a2ac:	4413      	add	r3, r2
 801a2ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a2b2:	db05      	blt.n	801a2c0 <ip_reass_free_complete_datagram+0xe0>
 801a2b4:	4b15      	ldr	r3, [pc, #84]	@ (801a30c <ip_reass_free_complete_datagram+0x12c>)
 801a2b6:	22cc      	movs	r2, #204	@ 0xcc
 801a2b8:	4918      	ldr	r1, [pc, #96]	@ (801a31c <ip_reass_free_complete_datagram+0x13c>)
 801a2ba:	4816      	ldr	r0, [pc, #88]	@ (801a314 <ip_reass_free_complete_datagram+0x134>)
 801a2bc:	f001 ffd2 	bl	801c264 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a2c0:	8bfa      	ldrh	r2, [r7, #30]
 801a2c2:	8a7b      	ldrh	r3, [r7, #18]
 801a2c4:	4413      	add	r3, r2
 801a2c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a2c8:	68f8      	ldr	r0, [r7, #12]
 801a2ca:	f7f8 f937 	bl	801253c <pbuf_free>
  while (p != NULL) {
 801a2ce:	69bb      	ldr	r3, [r7, #24]
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d1dc      	bne.n	801a28e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a2d4:	6839      	ldr	r1, [r7, #0]
 801a2d6:	6878      	ldr	r0, [r7, #4]
 801a2d8:	f000 f8c2 	bl	801a460 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a2dc:	4b10      	ldr	r3, [pc, #64]	@ (801a320 <ip_reass_free_complete_datagram+0x140>)
 801a2de:	881b      	ldrh	r3, [r3, #0]
 801a2e0:	8bfa      	ldrh	r2, [r7, #30]
 801a2e2:	429a      	cmp	r2, r3
 801a2e4:	d905      	bls.n	801a2f2 <ip_reass_free_complete_datagram+0x112>
 801a2e6:	4b09      	ldr	r3, [pc, #36]	@ (801a30c <ip_reass_free_complete_datagram+0x12c>)
 801a2e8:	22d2      	movs	r2, #210	@ 0xd2
 801a2ea:	490e      	ldr	r1, [pc, #56]	@ (801a324 <ip_reass_free_complete_datagram+0x144>)
 801a2ec:	4809      	ldr	r0, [pc, #36]	@ (801a314 <ip_reass_free_complete_datagram+0x134>)
 801a2ee:	f001 ffb9 	bl	801c264 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a2f2:	4b0b      	ldr	r3, [pc, #44]	@ (801a320 <ip_reass_free_complete_datagram+0x140>)
 801a2f4:	881a      	ldrh	r2, [r3, #0]
 801a2f6:	8bfb      	ldrh	r3, [r7, #30]
 801a2f8:	1ad3      	subs	r3, r2, r3
 801a2fa:	b29a      	uxth	r2, r3
 801a2fc:	4b08      	ldr	r3, [pc, #32]	@ (801a320 <ip_reass_free_complete_datagram+0x140>)
 801a2fe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a300:	8bfb      	ldrh	r3, [r7, #30]
}
 801a302:	4618      	mov	r0, r3
 801a304:	3720      	adds	r7, #32
 801a306:	46bd      	mov	sp, r7
 801a308:	bd80      	pop	{r7, pc}
 801a30a:	bf00      	nop
 801a30c:	0801fcc0 	.word	0x0801fcc0
 801a310:	0801fcfc 	.word	0x0801fcfc
 801a314:	0801fd08 	.word	0x0801fd08
 801a318:	0801fd30 	.word	0x0801fd30
 801a31c:	0801fd44 	.word	0x0801fd44
 801a320:	200276e4 	.word	0x200276e4
 801a324:	0801fd64 	.word	0x0801fd64

0801a328 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a328:	b580      	push	{r7, lr}
 801a32a:	b08a      	sub	sp, #40	@ 0x28
 801a32c:	af00      	add	r7, sp, #0
 801a32e:	6078      	str	r0, [r7, #4]
 801a330:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a332:	2300      	movs	r3, #0
 801a334:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a336:	2300      	movs	r3, #0
 801a338:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a33a:	2300      	movs	r3, #0
 801a33c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a33e:	2300      	movs	r3, #0
 801a340:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a342:	2300      	movs	r3, #0
 801a344:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a346:	4b28      	ldr	r3, [pc, #160]	@ (801a3e8 <ip_reass_remove_oldest_datagram+0xc0>)
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801a34c:	e030      	b.n	801a3b0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a350:	695a      	ldr	r2, [r3, #20]
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	68db      	ldr	r3, [r3, #12]
 801a356:	429a      	cmp	r2, r3
 801a358:	d10c      	bne.n	801a374 <ip_reass_remove_oldest_datagram+0x4c>
 801a35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a35c:	699a      	ldr	r2, [r3, #24]
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	691b      	ldr	r3, [r3, #16]
 801a362:	429a      	cmp	r2, r3
 801a364:	d106      	bne.n	801a374 <ip_reass_remove_oldest_datagram+0x4c>
 801a366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a368:	899a      	ldrh	r2, [r3, #12]
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	889b      	ldrh	r3, [r3, #4]
 801a36e:	b29b      	uxth	r3, r3
 801a370:	429a      	cmp	r2, r3
 801a372:	d014      	beq.n	801a39e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a374:	693b      	ldr	r3, [r7, #16]
 801a376:	3301      	adds	r3, #1
 801a378:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a37a:	6a3b      	ldr	r3, [r7, #32]
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d104      	bne.n	801a38a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a382:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a384:	69fb      	ldr	r3, [r7, #28]
 801a386:	61bb      	str	r3, [r7, #24]
 801a388:	e009      	b.n	801a39e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a38c:	7fda      	ldrb	r2, [r3, #31]
 801a38e:	6a3b      	ldr	r3, [r7, #32]
 801a390:	7fdb      	ldrb	r3, [r3, #31]
 801a392:	429a      	cmp	r2, r3
 801a394:	d803      	bhi.n	801a39e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a398:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a39a:	69fb      	ldr	r3, [r7, #28]
 801a39c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d001      	beq.n	801a3aa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3a8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801a3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d1cb      	bne.n	801a34e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a3b6:	6a3b      	ldr	r3, [r7, #32]
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	d008      	beq.n	801a3ce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a3bc:	69b9      	ldr	r1, [r7, #24]
 801a3be:	6a38      	ldr	r0, [r7, #32]
 801a3c0:	f7ff ff0e 	bl	801a1e0 <ip_reass_free_complete_datagram>
 801a3c4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a3c6:	697a      	ldr	r2, [r7, #20]
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	4413      	add	r3, r2
 801a3cc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a3ce:	697a      	ldr	r2, [r7, #20]
 801a3d0:	683b      	ldr	r3, [r7, #0]
 801a3d2:	429a      	cmp	r2, r3
 801a3d4:	da02      	bge.n	801a3dc <ip_reass_remove_oldest_datagram+0xb4>
 801a3d6:	693b      	ldr	r3, [r7, #16]
 801a3d8:	2b01      	cmp	r3, #1
 801a3da:	dcac      	bgt.n	801a336 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a3dc:	697b      	ldr	r3, [r7, #20]
}
 801a3de:	4618      	mov	r0, r3
 801a3e0:	3728      	adds	r7, #40	@ 0x28
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	bd80      	pop	{r7, pc}
 801a3e6:	bf00      	nop
 801a3e8:	200276e0 	.word	0x200276e0

0801a3ec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b084      	sub	sp, #16
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
 801a3f4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a3f6:	2004      	movs	r0, #4
 801a3f8:	f7f7 f986 	bl	8011708 <memp_malloc>
 801a3fc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	2b00      	cmp	r3, #0
 801a402:	d110      	bne.n	801a426 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a404:	6839      	ldr	r1, [r7, #0]
 801a406:	6878      	ldr	r0, [r7, #4]
 801a408:	f7ff ff8e 	bl	801a328 <ip_reass_remove_oldest_datagram>
 801a40c:	4602      	mov	r2, r0
 801a40e:	683b      	ldr	r3, [r7, #0]
 801a410:	4293      	cmp	r3, r2
 801a412:	dc03      	bgt.n	801a41c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a414:	2004      	movs	r0, #4
 801a416:	f7f7 f977 	bl	8011708 <memp_malloc>
 801a41a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d101      	bne.n	801a426 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a422:	2300      	movs	r3, #0
 801a424:	e016      	b.n	801a454 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a426:	2220      	movs	r2, #32
 801a428:	2100      	movs	r1, #0
 801a42a:	68f8      	ldr	r0, [r7, #12]
 801a42c:	f002 f872 	bl	801c514 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	220f      	movs	r2, #15
 801a434:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a436:	4b09      	ldr	r3, [pc, #36]	@ (801a45c <ip_reass_enqueue_new_datagram+0x70>)
 801a438:	681a      	ldr	r2, [r3, #0]
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a43e:	4a07      	ldr	r2, [pc, #28]	@ (801a45c <ip_reass_enqueue_new_datagram+0x70>)
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	3308      	adds	r3, #8
 801a448:	2214      	movs	r2, #20
 801a44a:	6879      	ldr	r1, [r7, #4]
 801a44c:	4618      	mov	r0, r3
 801a44e:	f002 f934 	bl	801c6ba <memcpy>
  return ipr;
 801a452:	68fb      	ldr	r3, [r7, #12]
}
 801a454:	4618      	mov	r0, r3
 801a456:	3710      	adds	r7, #16
 801a458:	46bd      	mov	sp, r7
 801a45a:	bd80      	pop	{r7, pc}
 801a45c:	200276e0 	.word	0x200276e0

0801a460 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a460:	b580      	push	{r7, lr}
 801a462:	b082      	sub	sp, #8
 801a464:	af00      	add	r7, sp, #0
 801a466:	6078      	str	r0, [r7, #4]
 801a468:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a46a:	4b10      	ldr	r3, [pc, #64]	@ (801a4ac <ip_reass_dequeue_datagram+0x4c>)
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	687a      	ldr	r2, [r7, #4]
 801a470:	429a      	cmp	r2, r3
 801a472:	d104      	bne.n	801a47e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	4a0c      	ldr	r2, [pc, #48]	@ (801a4ac <ip_reass_dequeue_datagram+0x4c>)
 801a47a:	6013      	str	r3, [r2, #0]
 801a47c:	e00d      	b.n	801a49a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a47e:	683b      	ldr	r3, [r7, #0]
 801a480:	2b00      	cmp	r3, #0
 801a482:	d106      	bne.n	801a492 <ip_reass_dequeue_datagram+0x32>
 801a484:	4b0a      	ldr	r3, [pc, #40]	@ (801a4b0 <ip_reass_dequeue_datagram+0x50>)
 801a486:	f240 1245 	movw	r2, #325	@ 0x145
 801a48a:	490a      	ldr	r1, [pc, #40]	@ (801a4b4 <ip_reass_dequeue_datagram+0x54>)
 801a48c:	480a      	ldr	r0, [pc, #40]	@ (801a4b8 <ip_reass_dequeue_datagram+0x58>)
 801a48e:	f001 fee9 	bl	801c264 <iprintf>
    prev->next = ipr->next;
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	681a      	ldr	r2, [r3, #0]
 801a496:	683b      	ldr	r3, [r7, #0]
 801a498:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a49a:	6879      	ldr	r1, [r7, #4]
 801a49c:	2004      	movs	r0, #4
 801a49e:	f7f7 f9a9 	bl	80117f4 <memp_free>
}
 801a4a2:	bf00      	nop
 801a4a4:	3708      	adds	r7, #8
 801a4a6:	46bd      	mov	sp, r7
 801a4a8:	bd80      	pop	{r7, pc}
 801a4aa:	bf00      	nop
 801a4ac:	200276e0 	.word	0x200276e0
 801a4b0:	0801fcc0 	.word	0x0801fcc0
 801a4b4:	0801fd88 	.word	0x0801fd88
 801a4b8:	0801fd08 	.word	0x0801fd08

0801a4bc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a4bc:	b580      	push	{r7, lr}
 801a4be:	b08c      	sub	sp, #48	@ 0x30
 801a4c0:	af00      	add	r7, sp, #0
 801a4c2:	60f8      	str	r0, [r7, #12]
 801a4c4:	60b9      	str	r1, [r7, #8]
 801a4c6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a4c8:	2300      	movs	r3, #0
 801a4ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a4cc:	2301      	movs	r3, #1
 801a4ce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a4d0:	68bb      	ldr	r3, [r7, #8]
 801a4d2:	685b      	ldr	r3, [r3, #4]
 801a4d4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a4d6:	69fb      	ldr	r3, [r7, #28]
 801a4d8:	885b      	ldrh	r3, [r3, #2]
 801a4da:	b29b      	uxth	r3, r3
 801a4dc:	4618      	mov	r0, r3
 801a4de:	f7f6 fc3f 	bl	8010d60 <lwip_htons>
 801a4e2:	4603      	mov	r3, r0
 801a4e4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a4e6:	69fb      	ldr	r3, [r7, #28]
 801a4e8:	781b      	ldrb	r3, [r3, #0]
 801a4ea:	f003 030f 	and.w	r3, r3, #15
 801a4ee:	b2db      	uxtb	r3, r3
 801a4f0:	009b      	lsls	r3, r3, #2
 801a4f2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a4f4:	7e7b      	ldrb	r3, [r7, #25]
 801a4f6:	b29b      	uxth	r3, r3
 801a4f8:	8b7a      	ldrh	r2, [r7, #26]
 801a4fa:	429a      	cmp	r2, r3
 801a4fc:	d202      	bcs.n	801a504 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a4fe:	f04f 33ff 	mov.w	r3, #4294967295
 801a502:	e135      	b.n	801a770 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a504:	7e7b      	ldrb	r3, [r7, #25]
 801a506:	b29b      	uxth	r3, r3
 801a508:	8b7a      	ldrh	r2, [r7, #26]
 801a50a:	1ad3      	subs	r3, r2, r3
 801a50c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a50e:	69fb      	ldr	r3, [r7, #28]
 801a510:	88db      	ldrh	r3, [r3, #6]
 801a512:	b29b      	uxth	r3, r3
 801a514:	4618      	mov	r0, r3
 801a516:	f7f6 fc23 	bl	8010d60 <lwip_htons>
 801a51a:	4603      	mov	r3, r0
 801a51c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a520:	b29b      	uxth	r3, r3
 801a522:	00db      	lsls	r3, r3, #3
 801a524:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a526:	68bb      	ldr	r3, [r7, #8]
 801a528:	685b      	ldr	r3, [r3, #4]
 801a52a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801a52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a52e:	2200      	movs	r2, #0
 801a530:	701a      	strb	r2, [r3, #0]
 801a532:	2200      	movs	r2, #0
 801a534:	705a      	strb	r2, [r3, #1]
 801a536:	2200      	movs	r2, #0
 801a538:	709a      	strb	r2, [r3, #2]
 801a53a:	2200      	movs	r2, #0
 801a53c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a540:	8afa      	ldrh	r2, [r7, #22]
 801a542:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a544:	8afa      	ldrh	r2, [r7, #22]
 801a546:	8b7b      	ldrh	r3, [r7, #26]
 801a548:	4413      	add	r3, r2
 801a54a:	b29a      	uxth	r2, r3
 801a54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a54e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a552:	88db      	ldrh	r3, [r3, #6]
 801a554:	b29b      	uxth	r3, r3
 801a556:	8afa      	ldrh	r2, [r7, #22]
 801a558:	429a      	cmp	r2, r3
 801a55a:	d902      	bls.n	801a562 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a55c:	f04f 33ff 	mov.w	r3, #4294967295
 801a560:	e106      	b.n	801a770 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a562:	68fb      	ldr	r3, [r7, #12]
 801a564:	685b      	ldr	r3, [r3, #4]
 801a566:	627b      	str	r3, [r7, #36]	@ 0x24
 801a568:	e068      	b.n	801a63c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a56c:	685b      	ldr	r3, [r3, #4]
 801a56e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a572:	889b      	ldrh	r3, [r3, #4]
 801a574:	b29a      	uxth	r2, r3
 801a576:	693b      	ldr	r3, [r7, #16]
 801a578:	889b      	ldrh	r3, [r3, #4]
 801a57a:	b29b      	uxth	r3, r3
 801a57c:	429a      	cmp	r2, r3
 801a57e:	d235      	bcs.n	801a5ec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a584:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d020      	beq.n	801a5ce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a58e:	889b      	ldrh	r3, [r3, #4]
 801a590:	b29a      	uxth	r2, r3
 801a592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a594:	88db      	ldrh	r3, [r3, #6]
 801a596:	b29b      	uxth	r3, r3
 801a598:	429a      	cmp	r2, r3
 801a59a:	d307      	bcc.n	801a5ac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a59e:	88db      	ldrh	r3, [r3, #6]
 801a5a0:	b29a      	uxth	r2, r3
 801a5a2:	693b      	ldr	r3, [r7, #16]
 801a5a4:	889b      	ldrh	r3, [r3, #4]
 801a5a6:	b29b      	uxth	r3, r3
 801a5a8:	429a      	cmp	r2, r3
 801a5aa:	d902      	bls.n	801a5b2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a5ac:	f04f 33ff 	mov.w	r3, #4294967295
 801a5b0:	e0de      	b.n	801a770 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5b4:	68ba      	ldr	r2, [r7, #8]
 801a5b6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5ba:	88db      	ldrh	r3, [r3, #6]
 801a5bc:	b29a      	uxth	r2, r3
 801a5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5c0:	889b      	ldrh	r3, [r3, #4]
 801a5c2:	b29b      	uxth	r3, r3
 801a5c4:	429a      	cmp	r2, r3
 801a5c6:	d03d      	beq.n	801a644 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a5cc:	e03a      	b.n	801a644 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a5ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5d0:	88db      	ldrh	r3, [r3, #6]
 801a5d2:	b29a      	uxth	r2, r3
 801a5d4:	693b      	ldr	r3, [r7, #16]
 801a5d6:	889b      	ldrh	r3, [r3, #4]
 801a5d8:	b29b      	uxth	r3, r3
 801a5da:	429a      	cmp	r2, r3
 801a5dc:	d902      	bls.n	801a5e4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a5de:	f04f 33ff 	mov.w	r3, #4294967295
 801a5e2:	e0c5      	b.n	801a770 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	68ba      	ldr	r2, [r7, #8]
 801a5e8:	605a      	str	r2, [r3, #4]
      break;
 801a5ea:	e02b      	b.n	801a644 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5ee:	889b      	ldrh	r3, [r3, #4]
 801a5f0:	b29a      	uxth	r2, r3
 801a5f2:	693b      	ldr	r3, [r7, #16]
 801a5f4:	889b      	ldrh	r3, [r3, #4]
 801a5f6:	b29b      	uxth	r3, r3
 801a5f8:	429a      	cmp	r2, r3
 801a5fa:	d102      	bne.n	801a602 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a5fc:	f04f 33ff 	mov.w	r3, #4294967295
 801a600:	e0b6      	b.n	801a770 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a604:	889b      	ldrh	r3, [r3, #4]
 801a606:	b29a      	uxth	r2, r3
 801a608:	693b      	ldr	r3, [r7, #16]
 801a60a:	88db      	ldrh	r3, [r3, #6]
 801a60c:	b29b      	uxth	r3, r3
 801a60e:	429a      	cmp	r2, r3
 801a610:	d202      	bcs.n	801a618 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a612:	f04f 33ff 	mov.w	r3, #4294967295
 801a616:	e0ab      	b.n	801a770 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d009      	beq.n	801a632 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a620:	88db      	ldrh	r3, [r3, #6]
 801a622:	b29a      	uxth	r2, r3
 801a624:	693b      	ldr	r3, [r7, #16]
 801a626:	889b      	ldrh	r3, [r3, #4]
 801a628:	b29b      	uxth	r3, r3
 801a62a:	429a      	cmp	r2, r3
 801a62c:	d001      	beq.n	801a632 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a62e:	2300      	movs	r3, #0
 801a630:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a632:	693b      	ldr	r3, [r7, #16]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801a638:	693b      	ldr	r3, [r7, #16]
 801a63a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801a63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d193      	bne.n	801a56a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a642:	e000      	b.n	801a646 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a644:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d12d      	bne.n	801a6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a64e:	2b00      	cmp	r3, #0
 801a650:	d01c      	beq.n	801a68c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a654:	88db      	ldrh	r3, [r3, #6]
 801a656:	b29a      	uxth	r2, r3
 801a658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a65a:	889b      	ldrh	r3, [r3, #4]
 801a65c:	b29b      	uxth	r3, r3
 801a65e:	429a      	cmp	r2, r3
 801a660:	d906      	bls.n	801a670 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a662:	4b45      	ldr	r3, [pc, #276]	@ (801a778 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a664:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801a668:	4944      	ldr	r1, [pc, #272]	@ (801a77c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a66a:	4845      	ldr	r0, [pc, #276]	@ (801a780 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a66c:	f001 fdfa 	bl	801c264 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a672:	68ba      	ldr	r2, [r7, #8]
 801a674:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a678:	88db      	ldrh	r3, [r3, #6]
 801a67a:	b29a      	uxth	r2, r3
 801a67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a67e:	889b      	ldrh	r3, [r3, #4]
 801a680:	b29b      	uxth	r3, r3
 801a682:	429a      	cmp	r2, r3
 801a684:	d010      	beq.n	801a6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a686:	2300      	movs	r3, #0
 801a688:	623b      	str	r3, [r7, #32]
 801a68a:	e00d      	b.n	801a6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a68c:	68fb      	ldr	r3, [r7, #12]
 801a68e:	685b      	ldr	r3, [r3, #4]
 801a690:	2b00      	cmp	r3, #0
 801a692:	d006      	beq.n	801a6a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a694:	4b38      	ldr	r3, [pc, #224]	@ (801a778 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a696:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801a69a:	493a      	ldr	r1, [pc, #232]	@ (801a784 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a69c:	4838      	ldr	r0, [pc, #224]	@ (801a780 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a69e:	f001 fde1 	bl	801c264 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	68ba      	ldr	r2, [r7, #8]
 801a6a6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d105      	bne.n	801a6ba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a6ae:	68fb      	ldr	r3, [r7, #12]
 801a6b0:	7f9b      	ldrb	r3, [r3, #30]
 801a6b2:	f003 0301 	and.w	r3, r3, #1
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d059      	beq.n	801a76e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a6ba:	6a3b      	ldr	r3, [r7, #32]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d04f      	beq.n	801a760 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	685b      	ldr	r3, [r3, #4]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d006      	beq.n	801a6d6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a6c8:	68fb      	ldr	r3, [r7, #12]
 801a6ca:	685b      	ldr	r3, [r3, #4]
 801a6cc:	685b      	ldr	r3, [r3, #4]
 801a6ce:	889b      	ldrh	r3, [r3, #4]
 801a6d0:	b29b      	uxth	r3, r3
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d002      	beq.n	801a6dc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a6d6:	2300      	movs	r3, #0
 801a6d8:	623b      	str	r3, [r7, #32]
 801a6da:	e041      	b.n	801a760 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a6dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6de:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801a6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a6e6:	e012      	b.n	801a70e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6ea:	685b      	ldr	r3, [r3, #4]
 801a6ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801a6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6f0:	88db      	ldrh	r3, [r3, #6]
 801a6f2:	b29a      	uxth	r2, r3
 801a6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6f6:	889b      	ldrh	r3, [r3, #4]
 801a6f8:	b29b      	uxth	r3, r3
 801a6fa:	429a      	cmp	r2, r3
 801a6fc:	d002      	beq.n	801a704 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a6fe:	2300      	movs	r3, #0
 801a700:	623b      	str	r3, [r7, #32]
            break;
 801a702:	e007      	b.n	801a714 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a706:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801a708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a710:	2b00      	cmp	r3, #0
 801a712:	d1e9      	bne.n	801a6e8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a714:	6a3b      	ldr	r3, [r7, #32]
 801a716:	2b00      	cmp	r3, #0
 801a718:	d022      	beq.n	801a760 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	685b      	ldr	r3, [r3, #4]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d106      	bne.n	801a730 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a722:	4b15      	ldr	r3, [pc, #84]	@ (801a778 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a724:	f240 12df 	movw	r2, #479	@ 0x1df
 801a728:	4917      	ldr	r1, [pc, #92]	@ (801a788 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a72a:	4815      	ldr	r0, [pc, #84]	@ (801a780 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a72c:	f001 fd9a 	bl	801c264 <iprintf>
          LWIP_ASSERT("sanity check",
 801a730:	68fb      	ldr	r3, [r7, #12]
 801a732:	685b      	ldr	r3, [r3, #4]
 801a734:	685b      	ldr	r3, [r3, #4]
 801a736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a738:	429a      	cmp	r2, r3
 801a73a:	d106      	bne.n	801a74a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a73c:	4b0e      	ldr	r3, [pc, #56]	@ (801a778 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a73e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801a742:	4911      	ldr	r1, [pc, #68]	@ (801a788 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a744:	480e      	ldr	r0, [pc, #56]	@ (801a780 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a746:	f001 fd8d 	bl	801c264 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d006      	beq.n	801a760 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a752:	4b09      	ldr	r3, [pc, #36]	@ (801a778 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a754:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801a758:	490c      	ldr	r1, [pc, #48]	@ (801a78c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a75a:	4809      	ldr	r0, [pc, #36]	@ (801a780 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a75c:	f001 fd82 	bl	801c264 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a760:	6a3b      	ldr	r3, [r7, #32]
 801a762:	2b00      	cmp	r3, #0
 801a764:	bf14      	ite	ne
 801a766:	2301      	movne	r3, #1
 801a768:	2300      	moveq	r3, #0
 801a76a:	b2db      	uxtb	r3, r3
 801a76c:	e000      	b.n	801a770 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a76e:	2300      	movs	r3, #0
}
 801a770:	4618      	mov	r0, r3
 801a772:	3730      	adds	r7, #48	@ 0x30
 801a774:	46bd      	mov	sp, r7
 801a776:	bd80      	pop	{r7, pc}
 801a778:	0801fcc0 	.word	0x0801fcc0
 801a77c:	0801fda4 	.word	0x0801fda4
 801a780:	0801fd08 	.word	0x0801fd08
 801a784:	0801fdc4 	.word	0x0801fdc4
 801a788:	0801fdfc 	.word	0x0801fdfc
 801a78c:	0801fe0c 	.word	0x0801fe0c

0801a790 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a790:	b580      	push	{r7, lr}
 801a792:	b08e      	sub	sp, #56	@ 0x38
 801a794:	af00      	add	r7, sp, #0
 801a796:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	685b      	ldr	r3, [r3, #4]
 801a79c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7a0:	781b      	ldrb	r3, [r3, #0]
 801a7a2:	f003 030f 	and.w	r3, r3, #15
 801a7a6:	b2db      	uxtb	r3, r3
 801a7a8:	009b      	lsls	r3, r3, #2
 801a7aa:	b2db      	uxtb	r3, r3
 801a7ac:	2b14      	cmp	r3, #20
 801a7ae:	f040 8171 	bne.w	801aa94 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7b4:	88db      	ldrh	r3, [r3, #6]
 801a7b6:	b29b      	uxth	r3, r3
 801a7b8:	4618      	mov	r0, r3
 801a7ba:	f7f6 fad1 	bl	8010d60 <lwip_htons>
 801a7be:	4603      	mov	r3, r0
 801a7c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a7c4:	b29b      	uxth	r3, r3
 801a7c6:	00db      	lsls	r3, r3, #3
 801a7c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7cc:	885b      	ldrh	r3, [r3, #2]
 801a7ce:	b29b      	uxth	r3, r3
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	f7f6 fac5 	bl	8010d60 <lwip_htons>
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7dc:	781b      	ldrb	r3, [r3, #0]
 801a7de:	f003 030f 	and.w	r3, r3, #15
 801a7e2:	b2db      	uxtb	r3, r3
 801a7e4:	009b      	lsls	r3, r3, #2
 801a7e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801a7ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a7ee:	b29b      	uxth	r3, r3
 801a7f0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a7f2:	429a      	cmp	r2, r3
 801a7f4:	f0c0 8150 	bcc.w	801aa98 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a7f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a7fc:	b29b      	uxth	r3, r3
 801a7fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a800:	1ad3      	subs	r3, r2, r3
 801a802:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a804:	6878      	ldr	r0, [r7, #4]
 801a806:	f7f7 ff27 	bl	8012658 <pbuf_clen>
 801a80a:	4603      	mov	r3, r0
 801a80c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a80e:	4b8c      	ldr	r3, [pc, #560]	@ (801aa40 <ip4_reass+0x2b0>)
 801a810:	881b      	ldrh	r3, [r3, #0]
 801a812:	461a      	mov	r2, r3
 801a814:	8c3b      	ldrh	r3, [r7, #32]
 801a816:	4413      	add	r3, r2
 801a818:	2b0a      	cmp	r3, #10
 801a81a:	dd10      	ble.n	801a83e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a81c:	8c3b      	ldrh	r3, [r7, #32]
 801a81e:	4619      	mov	r1, r3
 801a820:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a822:	f7ff fd81 	bl	801a328 <ip_reass_remove_oldest_datagram>
 801a826:	4603      	mov	r3, r0
 801a828:	2b00      	cmp	r3, #0
 801a82a:	f000 8137 	beq.w	801aa9c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a82e:	4b84      	ldr	r3, [pc, #528]	@ (801aa40 <ip4_reass+0x2b0>)
 801a830:	881b      	ldrh	r3, [r3, #0]
 801a832:	461a      	mov	r2, r3
 801a834:	8c3b      	ldrh	r3, [r7, #32]
 801a836:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a838:	2b0a      	cmp	r3, #10
 801a83a:	f300 812f 	bgt.w	801aa9c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a83e:	4b81      	ldr	r3, [pc, #516]	@ (801aa44 <ip4_reass+0x2b4>)
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	633b      	str	r3, [r7, #48]	@ 0x30
 801a844:	e015      	b.n	801a872 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a848:	695a      	ldr	r2, [r3, #20]
 801a84a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a84c:	68db      	ldr	r3, [r3, #12]
 801a84e:	429a      	cmp	r2, r3
 801a850:	d10c      	bne.n	801a86c <ip4_reass+0xdc>
 801a852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a854:	699a      	ldr	r2, [r3, #24]
 801a856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a858:	691b      	ldr	r3, [r3, #16]
 801a85a:	429a      	cmp	r2, r3
 801a85c:	d106      	bne.n	801a86c <ip4_reass+0xdc>
 801a85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a860:	899a      	ldrh	r2, [r3, #12]
 801a862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a864:	889b      	ldrh	r3, [r3, #4]
 801a866:	b29b      	uxth	r3, r3
 801a868:	429a      	cmp	r2, r3
 801a86a:	d006      	beq.n	801a87a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	633b      	str	r3, [r7, #48]	@ 0x30
 801a872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a874:	2b00      	cmp	r3, #0
 801a876:	d1e6      	bne.n	801a846 <ip4_reass+0xb6>
 801a878:	e000      	b.n	801a87c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a87a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d109      	bne.n	801a896 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a882:	8c3b      	ldrh	r3, [r7, #32]
 801a884:	4619      	mov	r1, r3
 801a886:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a888:	f7ff fdb0 	bl	801a3ec <ip_reass_enqueue_new_datagram>
 801a88c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a890:	2b00      	cmp	r3, #0
 801a892:	d11c      	bne.n	801a8ce <ip4_reass+0x13e>
      goto nullreturn;
 801a894:	e105      	b.n	801aaa2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a898:	88db      	ldrh	r3, [r3, #6]
 801a89a:	b29b      	uxth	r3, r3
 801a89c:	4618      	mov	r0, r3
 801a89e:	f7f6 fa5f 	bl	8010d60 <lwip_htons>
 801a8a2:	4603      	mov	r3, r0
 801a8a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d110      	bne.n	801a8ce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8ae:	89db      	ldrh	r3, [r3, #14]
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	f7f6 fa55 	bl	8010d60 <lwip_htons>
 801a8b6:	4603      	mov	r3, r0
 801a8b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d006      	beq.n	801a8ce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8c2:	3308      	adds	r3, #8
 801a8c4:	2214      	movs	r2, #20
 801a8c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a8c8:	4618      	mov	r0, r3
 801a8ca:	f001 fef6 	bl	801c6ba <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8d0:	88db      	ldrh	r3, [r3, #6]
 801a8d2:	b29b      	uxth	r3, r3
 801a8d4:	f003 0320 	and.w	r3, r3, #32
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	bf0c      	ite	eq
 801a8dc:	2301      	moveq	r3, #1
 801a8de:	2300      	movne	r3, #0
 801a8e0:	b2db      	uxtb	r3, r3
 801a8e2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a8e4:	69fb      	ldr	r3, [r7, #28]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d00e      	beq.n	801a908 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a8ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a8ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a8ee:	4413      	add	r3, r2
 801a8f0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a8f2:	8b7a      	ldrh	r2, [r7, #26]
 801a8f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a8f6:	429a      	cmp	r2, r3
 801a8f8:	f0c0 80a0 	bcc.w	801aa3c <ip4_reass+0x2ac>
 801a8fc:	8b7b      	ldrh	r3, [r7, #26]
 801a8fe:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801a902:	4293      	cmp	r3, r2
 801a904:	f200 809a 	bhi.w	801aa3c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a908:	69fa      	ldr	r2, [r7, #28]
 801a90a:	6879      	ldr	r1, [r7, #4]
 801a90c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a90e:	f7ff fdd5 	bl	801a4bc <ip_reass_chain_frag_into_datagram_and_validate>
 801a912:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a914:	697b      	ldr	r3, [r7, #20]
 801a916:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a91a:	f000 809b 	beq.w	801aa54 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a91e:	4b48      	ldr	r3, [pc, #288]	@ (801aa40 <ip4_reass+0x2b0>)
 801a920:	881a      	ldrh	r2, [r3, #0]
 801a922:	8c3b      	ldrh	r3, [r7, #32]
 801a924:	4413      	add	r3, r2
 801a926:	b29a      	uxth	r2, r3
 801a928:	4b45      	ldr	r3, [pc, #276]	@ (801aa40 <ip4_reass+0x2b0>)
 801a92a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a92c:	69fb      	ldr	r3, [r7, #28]
 801a92e:	2b00      	cmp	r3, #0
 801a930:	d00d      	beq.n	801a94e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a932:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a934:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a936:	4413      	add	r3, r2
 801a938:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a93c:	8a7a      	ldrh	r2, [r7, #18]
 801a93e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a942:	7f9b      	ldrb	r3, [r3, #30]
 801a944:	f043 0301 	orr.w	r3, r3, #1
 801a948:	b2da      	uxtb	r2, r3
 801a94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a94c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a94e:	697b      	ldr	r3, [r7, #20]
 801a950:	2b01      	cmp	r3, #1
 801a952:	d171      	bne.n	801aa38 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a956:	8b9b      	ldrh	r3, [r3, #28]
 801a958:	3314      	adds	r3, #20
 801a95a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a95e:	685b      	ldr	r3, [r3, #4]
 801a960:	685b      	ldr	r3, [r3, #4]
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a968:	685b      	ldr	r3, [r3, #4]
 801a96a:	685b      	ldr	r3, [r3, #4]
 801a96c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a970:	3308      	adds	r3, #8
 801a972:	2214      	movs	r2, #20
 801a974:	4619      	mov	r1, r3
 801a976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a978:	f001 fe9f 	bl	801c6ba <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a97c:	8a3b      	ldrh	r3, [r7, #16]
 801a97e:	4618      	mov	r0, r3
 801a980:	f7f6 f9ee 	bl	8010d60 <lwip_htons>
 801a984:	4603      	mov	r3, r0
 801a986:	461a      	mov	r2, r3
 801a988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a98a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a98e:	2200      	movs	r2, #0
 801a990:	719a      	strb	r2, [r3, #6]
 801a992:	2200      	movs	r2, #0
 801a994:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a998:	2200      	movs	r2, #0
 801a99a:	729a      	strb	r2, [r3, #10]
 801a99c:	2200      	movs	r2, #0
 801a99e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9a2:	685b      	ldr	r3, [r3, #4]
 801a9a4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a9a6:	e00d      	b.n	801a9c4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a9aa:	685b      	ldr	r3, [r3, #4]
 801a9ac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a9ae:	2114      	movs	r1, #20
 801a9b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a9b2:	f7f7 fd3d 	bl	8012430 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a9b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a9b8:	6878      	ldr	r0, [r7, #4]
 801a9ba:	f7f7 fe8d 	bl	80126d8 <pbuf_cat>
      r = iprh->next_pbuf;
 801a9be:	68fb      	ldr	r3, [r7, #12]
 801a9c0:	681b      	ldr	r3, [r3, #0]
 801a9c2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801a9c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	d1ee      	bne.n	801a9a8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a9ca:	4b1e      	ldr	r3, [pc, #120]	@ (801aa44 <ip4_reass+0x2b4>)
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a9d0:	429a      	cmp	r2, r3
 801a9d2:	d102      	bne.n	801a9da <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a9d4:	2300      	movs	r3, #0
 801a9d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a9d8:	e010      	b.n	801a9fc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a9da:	4b1a      	ldr	r3, [pc, #104]	@ (801aa44 <ip4_reass+0x2b4>)
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a9e0:	e007      	b.n	801a9f2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a9e8:	429a      	cmp	r2, r3
 801a9ea:	d006      	beq.n	801a9fa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d1f4      	bne.n	801a9e2 <ip4_reass+0x252>
 801a9f8:	e000      	b.n	801a9fc <ip4_reass+0x26c>
          break;
 801a9fa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a9fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a9fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801aa00:	f7ff fd2e 	bl	801a460 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801aa04:	6878      	ldr	r0, [r7, #4]
 801aa06:	f7f7 fe27 	bl	8012658 <pbuf_clen>
 801aa0a:	4603      	mov	r3, r0
 801aa0c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801aa0e:	4b0c      	ldr	r3, [pc, #48]	@ (801aa40 <ip4_reass+0x2b0>)
 801aa10:	881b      	ldrh	r3, [r3, #0]
 801aa12:	8c3a      	ldrh	r2, [r7, #32]
 801aa14:	429a      	cmp	r2, r3
 801aa16:	d906      	bls.n	801aa26 <ip4_reass+0x296>
 801aa18:	4b0b      	ldr	r3, [pc, #44]	@ (801aa48 <ip4_reass+0x2b8>)
 801aa1a:	f240 229b 	movw	r2, #667	@ 0x29b
 801aa1e:	490b      	ldr	r1, [pc, #44]	@ (801aa4c <ip4_reass+0x2bc>)
 801aa20:	480b      	ldr	r0, [pc, #44]	@ (801aa50 <ip4_reass+0x2c0>)
 801aa22:	f001 fc1f 	bl	801c264 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801aa26:	4b06      	ldr	r3, [pc, #24]	@ (801aa40 <ip4_reass+0x2b0>)
 801aa28:	881a      	ldrh	r2, [r3, #0]
 801aa2a:	8c3b      	ldrh	r3, [r7, #32]
 801aa2c:	1ad3      	subs	r3, r2, r3
 801aa2e:	b29a      	uxth	r2, r3
 801aa30:	4b03      	ldr	r3, [pc, #12]	@ (801aa40 <ip4_reass+0x2b0>)
 801aa32:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	e038      	b.n	801aaaa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801aa38:	2300      	movs	r3, #0
 801aa3a:	e036      	b.n	801aaaa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801aa3c:	bf00      	nop
 801aa3e:	e00a      	b.n	801aa56 <ip4_reass+0x2c6>
 801aa40:	200276e4 	.word	0x200276e4
 801aa44:	200276e0 	.word	0x200276e0
 801aa48:	0801fcc0 	.word	0x0801fcc0
 801aa4c:	0801fe30 	.word	0x0801fe30
 801aa50:	0801fd08 	.word	0x0801fd08
    goto nullreturn_ipr;
 801aa54:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801aa56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d106      	bne.n	801aa6a <ip4_reass+0x2da>
 801aa5c:	4b15      	ldr	r3, [pc, #84]	@ (801aab4 <ip4_reass+0x324>)
 801aa5e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801aa62:	4915      	ldr	r1, [pc, #84]	@ (801aab8 <ip4_reass+0x328>)
 801aa64:	4815      	ldr	r0, [pc, #84]	@ (801aabc <ip4_reass+0x32c>)
 801aa66:	f001 fbfd 	bl	801c264 <iprintf>
  if (ipr->p == NULL) {
 801aa6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa6c:	685b      	ldr	r3, [r3, #4]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d116      	bne.n	801aaa0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801aa72:	4b13      	ldr	r3, [pc, #76]	@ (801aac0 <ip4_reass+0x330>)
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aa78:	429a      	cmp	r2, r3
 801aa7a:	d006      	beq.n	801aa8a <ip4_reass+0x2fa>
 801aa7c:	4b0d      	ldr	r3, [pc, #52]	@ (801aab4 <ip4_reass+0x324>)
 801aa7e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801aa82:	4910      	ldr	r1, [pc, #64]	@ (801aac4 <ip4_reass+0x334>)
 801aa84:	480d      	ldr	r0, [pc, #52]	@ (801aabc <ip4_reass+0x32c>)
 801aa86:	f001 fbed 	bl	801c264 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801aa8a:	2100      	movs	r1, #0
 801aa8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801aa8e:	f7ff fce7 	bl	801a460 <ip_reass_dequeue_datagram>
 801aa92:	e006      	b.n	801aaa2 <ip4_reass+0x312>
    goto nullreturn;
 801aa94:	bf00      	nop
 801aa96:	e004      	b.n	801aaa2 <ip4_reass+0x312>
    goto nullreturn;
 801aa98:	bf00      	nop
 801aa9a:	e002      	b.n	801aaa2 <ip4_reass+0x312>
      goto nullreturn;
 801aa9c:	bf00      	nop
 801aa9e:	e000      	b.n	801aaa2 <ip4_reass+0x312>
  }

nullreturn:
 801aaa0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801aaa2:	6878      	ldr	r0, [r7, #4]
 801aaa4:	f7f7 fd4a 	bl	801253c <pbuf_free>
  return NULL;
 801aaa8:	2300      	movs	r3, #0
}
 801aaaa:	4618      	mov	r0, r3
 801aaac:	3738      	adds	r7, #56	@ 0x38
 801aaae:	46bd      	mov	sp, r7
 801aab0:	bd80      	pop	{r7, pc}
 801aab2:	bf00      	nop
 801aab4:	0801fcc0 	.word	0x0801fcc0
 801aab8:	0801fe4c 	.word	0x0801fe4c
 801aabc:	0801fd08 	.word	0x0801fd08
 801aac0:	200276e0 	.word	0x200276e0
 801aac4:	0801fe58 	.word	0x0801fe58

0801aac8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801aac8:	b580      	push	{r7, lr}
 801aaca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801aacc:	2005      	movs	r0, #5
 801aace:	f7f6 fe1b 	bl	8011708 <memp_malloc>
 801aad2:	4603      	mov	r3, r0
}
 801aad4:	4618      	mov	r0, r3
 801aad6:	bd80      	pop	{r7, pc}

0801aad8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801aad8:	b580      	push	{r7, lr}
 801aada:	b082      	sub	sp, #8
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d106      	bne.n	801aaf4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801aae6:	4b07      	ldr	r3, [pc, #28]	@ (801ab04 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801aae8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801aaec:	4906      	ldr	r1, [pc, #24]	@ (801ab08 <ip_frag_free_pbuf_custom_ref+0x30>)
 801aaee:	4807      	ldr	r0, [pc, #28]	@ (801ab0c <ip_frag_free_pbuf_custom_ref+0x34>)
 801aaf0:	f001 fbb8 	bl	801c264 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801aaf4:	6879      	ldr	r1, [r7, #4]
 801aaf6:	2005      	movs	r0, #5
 801aaf8:	f7f6 fe7c 	bl	80117f4 <memp_free>
}
 801aafc:	bf00      	nop
 801aafe:	3708      	adds	r7, #8
 801ab00:	46bd      	mov	sp, r7
 801ab02:	bd80      	pop	{r7, pc}
 801ab04:	0801fcc0 	.word	0x0801fcc0
 801ab08:	0801fe78 	.word	0x0801fe78
 801ab0c:	0801fd08 	.word	0x0801fd08

0801ab10 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ab10:	b580      	push	{r7, lr}
 801ab12:	b084      	sub	sp, #16
 801ab14:	af00      	add	r7, sp, #0
 801ab16:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d106      	bne.n	801ab30 <ipfrag_free_pbuf_custom+0x20>
 801ab22:	4b11      	ldr	r3, [pc, #68]	@ (801ab68 <ipfrag_free_pbuf_custom+0x58>)
 801ab24:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801ab28:	4910      	ldr	r1, [pc, #64]	@ (801ab6c <ipfrag_free_pbuf_custom+0x5c>)
 801ab2a:	4811      	ldr	r0, [pc, #68]	@ (801ab70 <ipfrag_free_pbuf_custom+0x60>)
 801ab2c:	f001 fb9a 	bl	801c264 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ab30:	68fa      	ldr	r2, [r7, #12]
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	429a      	cmp	r2, r3
 801ab36:	d006      	beq.n	801ab46 <ipfrag_free_pbuf_custom+0x36>
 801ab38:	4b0b      	ldr	r3, [pc, #44]	@ (801ab68 <ipfrag_free_pbuf_custom+0x58>)
 801ab3a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801ab3e:	490d      	ldr	r1, [pc, #52]	@ (801ab74 <ipfrag_free_pbuf_custom+0x64>)
 801ab40:	480b      	ldr	r0, [pc, #44]	@ (801ab70 <ipfrag_free_pbuf_custom+0x60>)
 801ab42:	f001 fb8f 	bl	801c264 <iprintf>
  if (pcr->original != NULL) {
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	695b      	ldr	r3, [r3, #20]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d004      	beq.n	801ab58 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ab4e:	68fb      	ldr	r3, [r7, #12]
 801ab50:	695b      	ldr	r3, [r3, #20]
 801ab52:	4618      	mov	r0, r3
 801ab54:	f7f7 fcf2 	bl	801253c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ab58:	68f8      	ldr	r0, [r7, #12]
 801ab5a:	f7ff ffbd 	bl	801aad8 <ip_frag_free_pbuf_custom_ref>
}
 801ab5e:	bf00      	nop
 801ab60:	3710      	adds	r7, #16
 801ab62:	46bd      	mov	sp, r7
 801ab64:	bd80      	pop	{r7, pc}
 801ab66:	bf00      	nop
 801ab68:	0801fcc0 	.word	0x0801fcc0
 801ab6c:	0801fe84 	.word	0x0801fe84
 801ab70:	0801fd08 	.word	0x0801fd08
 801ab74:	0801fe90 	.word	0x0801fe90

0801ab78 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b094      	sub	sp, #80	@ 0x50
 801ab7c:	af02      	add	r7, sp, #8
 801ab7e:	60f8      	str	r0, [r7, #12]
 801ab80:	60b9      	str	r1, [r7, #8]
 801ab82:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ab84:	2300      	movs	r3, #0
 801ab86:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ab8a:	68bb      	ldr	r3, [r7, #8]
 801ab8c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ab8e:	3b14      	subs	r3, #20
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	da00      	bge.n	801ab96 <ip4_frag+0x1e>
 801ab94:	3307      	adds	r3, #7
 801ab96:	10db      	asrs	r3, r3, #3
 801ab98:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ab9a:	2314      	movs	r3, #20
 801ab9c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ab9e:	68fb      	ldr	r3, [r7, #12]
 801aba0:	685b      	ldr	r3, [r3, #4]
 801aba2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801aba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aba6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801aba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abaa:	781b      	ldrb	r3, [r3, #0]
 801abac:	f003 030f 	and.w	r3, r3, #15
 801abb0:	b2db      	uxtb	r3, r3
 801abb2:	009b      	lsls	r3, r3, #2
 801abb4:	b2db      	uxtb	r3, r3
 801abb6:	2b14      	cmp	r3, #20
 801abb8:	d002      	beq.n	801abc0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801abba:	f06f 0305 	mvn.w	r3, #5
 801abbe:	e110      	b.n	801ade2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	895b      	ldrh	r3, [r3, #10]
 801abc4:	2b13      	cmp	r3, #19
 801abc6:	d809      	bhi.n	801abdc <ip4_frag+0x64>
 801abc8:	4b88      	ldr	r3, [pc, #544]	@ (801adec <ip4_frag+0x274>)
 801abca:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801abce:	4988      	ldr	r1, [pc, #544]	@ (801adf0 <ip4_frag+0x278>)
 801abd0:	4888      	ldr	r0, [pc, #544]	@ (801adf4 <ip4_frag+0x27c>)
 801abd2:	f001 fb47 	bl	801c264 <iprintf>
 801abd6:	f06f 0305 	mvn.w	r3, #5
 801abda:	e102      	b.n	801ade2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801abdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abde:	88db      	ldrh	r3, [r3, #6]
 801abe0:	b29b      	uxth	r3, r3
 801abe2:	4618      	mov	r0, r3
 801abe4:	f7f6 f8bc 	bl	8010d60 <lwip_htons>
 801abe8:	4603      	mov	r3, r0
 801abea:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801abec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801abee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801abf2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801abf6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801abf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801abfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	891b      	ldrh	r3, [r3, #8]
 801ac02:	3b14      	subs	r3, #20
 801ac04:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801ac08:	e0e1      	b.n	801adce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ac0a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ac0c:	00db      	lsls	r3, r3, #3
 801ac0e:	b29b      	uxth	r3, r3
 801ac10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ac14:	4293      	cmp	r3, r2
 801ac16:	bf28      	it	cs
 801ac18:	4613      	movcs	r3, r2
 801ac1a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ac1c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ac20:	2114      	movs	r1, #20
 801ac22:	200e      	movs	r0, #14
 801ac24:	f7f7 f9a6 	bl	8011f74 <pbuf_alloc>
 801ac28:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801ac2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	f000 80d5 	beq.w	801addc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ac32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac34:	895b      	ldrh	r3, [r3, #10]
 801ac36:	2b13      	cmp	r3, #19
 801ac38:	d806      	bhi.n	801ac48 <ip4_frag+0xd0>
 801ac3a:	4b6c      	ldr	r3, [pc, #432]	@ (801adec <ip4_frag+0x274>)
 801ac3c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801ac40:	496d      	ldr	r1, [pc, #436]	@ (801adf8 <ip4_frag+0x280>)
 801ac42:	486c      	ldr	r0, [pc, #432]	@ (801adf4 <ip4_frag+0x27c>)
 801ac44:	f001 fb0e 	bl	801c264 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ac48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac4a:	685b      	ldr	r3, [r3, #4]
 801ac4c:	2214      	movs	r2, #20
 801ac4e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801ac50:	4618      	mov	r0, r3
 801ac52:	f001 fd32 	bl	801c6ba <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ac56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac58:	685b      	ldr	r3, [r3, #4]
 801ac5a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801ac5c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ac5e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801ac62:	e064      	b.n	801ad2e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	895a      	ldrh	r2, [r3, #10]
 801ac68:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ac6a:	1ad3      	subs	r3, r2, r3
 801ac6c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ac6e:	68fb      	ldr	r3, [r7, #12]
 801ac70:	895b      	ldrh	r3, [r3, #10]
 801ac72:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801ac74:	429a      	cmp	r2, r3
 801ac76:	d906      	bls.n	801ac86 <ip4_frag+0x10e>
 801ac78:	4b5c      	ldr	r3, [pc, #368]	@ (801adec <ip4_frag+0x274>)
 801ac7a:	f240 322d 	movw	r2, #813	@ 0x32d
 801ac7e:	495f      	ldr	r1, [pc, #380]	@ (801adfc <ip4_frag+0x284>)
 801ac80:	485c      	ldr	r0, [pc, #368]	@ (801adf4 <ip4_frag+0x27c>)
 801ac82:	f001 faef 	bl	801c264 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ac86:	8bfa      	ldrh	r2, [r7, #30]
 801ac88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ac8c:	4293      	cmp	r3, r2
 801ac8e:	bf28      	it	cs
 801ac90:	4613      	movcs	r3, r2
 801ac92:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801ac96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d105      	bne.n	801acaa <ip4_frag+0x132>
        poff = 0;
 801ac9e:	2300      	movs	r3, #0
 801aca0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801aca2:	68fb      	ldr	r3, [r7, #12]
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	60fb      	str	r3, [r7, #12]
        continue;
 801aca8:	e041      	b.n	801ad2e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801acaa:	f7ff ff0d 	bl	801aac8 <ip_frag_alloc_pbuf_custom_ref>
 801acae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801acb0:	69bb      	ldr	r3, [r7, #24]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d103      	bne.n	801acbe <ip4_frag+0x146>
        pbuf_free(rambuf);
 801acb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801acb8:	f7f7 fc40 	bl	801253c <pbuf_free>
        goto memerr;
 801acbc:	e08f      	b.n	801adde <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801acbe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801acc0:	68fb      	ldr	r3, [r7, #12]
 801acc2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801acc4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801acc6:	4413      	add	r3, r2
 801acc8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801accc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801acd0:	9201      	str	r2, [sp, #4]
 801acd2:	9300      	str	r3, [sp, #0]
 801acd4:	4603      	mov	r3, r0
 801acd6:	2241      	movs	r2, #65	@ 0x41
 801acd8:	2000      	movs	r0, #0
 801acda:	f7f7 fa75 	bl	80121c8 <pbuf_alloced_custom>
 801acde:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ace0:	697b      	ldr	r3, [r7, #20]
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	d106      	bne.n	801acf4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ace6:	69b8      	ldr	r0, [r7, #24]
 801ace8:	f7ff fef6 	bl	801aad8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801acec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801acee:	f7f7 fc25 	bl	801253c <pbuf_free>
        goto memerr;
 801acf2:	e074      	b.n	801adde <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801acf4:	68f8      	ldr	r0, [r7, #12]
 801acf6:	f7f7 fcc7 	bl	8012688 <pbuf_ref>
      pcr->original = p;
 801acfa:	69bb      	ldr	r3, [r7, #24]
 801acfc:	68fa      	ldr	r2, [r7, #12]
 801acfe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ad00:	69bb      	ldr	r3, [r7, #24]
 801ad02:	4a3f      	ldr	r2, [pc, #252]	@ (801ae00 <ip4_frag+0x288>)
 801ad04:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ad06:	6979      	ldr	r1, [r7, #20]
 801ad08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ad0a:	f7f7 fce5 	bl	80126d8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ad0e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801ad12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ad16:	1ad3      	subs	r3, r2, r3
 801ad18:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801ad1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d004      	beq.n	801ad2e <ip4_frag+0x1b6>
        poff = 0;
 801ad24:	2300      	movs	r3, #0
 801ad26:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801ad28:	68fb      	ldr	r3, [r7, #12]
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ad2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d196      	bne.n	801ac64 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ad36:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801ad38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ad3c:	4413      	add	r3, r2
 801ad3e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ad40:	68bb      	ldr	r3, [r7, #8]
 801ad42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ad44:	f1a3 0213 	sub.w	r2, r3, #19
 801ad48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ad4c:	429a      	cmp	r2, r3
 801ad4e:	bfcc      	ite	gt
 801ad50:	2301      	movgt	r3, #1
 801ad52:	2300      	movle	r3, #0
 801ad54:	b2db      	uxtb	r3, r3
 801ad56:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ad58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801ad5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ad60:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801ad62:	6a3b      	ldr	r3, [r7, #32]
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d002      	beq.n	801ad6e <ip4_frag+0x1f6>
 801ad68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d003      	beq.n	801ad76 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ad6e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ad70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801ad74:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ad76:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ad78:	4618      	mov	r0, r3
 801ad7a:	f7f5 fff1 	bl	8010d60 <lwip_htons>
 801ad7e:	4603      	mov	r3, r0
 801ad80:	461a      	mov	r2, r3
 801ad82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad84:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ad86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ad88:	3314      	adds	r3, #20
 801ad8a:	b29b      	uxth	r3, r3
 801ad8c:	4618      	mov	r0, r3
 801ad8e:	f7f5 ffe7 	bl	8010d60 <lwip_htons>
 801ad92:	4603      	mov	r3, r0
 801ad94:	461a      	mov	r2, r3
 801ad96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad98:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ad9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad9c:	2200      	movs	r2, #0
 801ad9e:	729a      	strb	r2, [r3, #10]
 801ada0:	2200      	movs	r2, #0
 801ada2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ada4:	68bb      	ldr	r3, [r7, #8]
 801ada6:	695b      	ldr	r3, [r3, #20]
 801ada8:	687a      	ldr	r2, [r7, #4]
 801adaa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801adac:	68b8      	ldr	r0, [r7, #8]
 801adae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801adb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801adb2:	f7f7 fbc3 	bl	801253c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801adb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801adba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801adbc:	1ad3      	subs	r3, r2, r3
 801adbe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801adc2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801adc6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801adc8:	4413      	add	r3, r2
 801adca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801adce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801add2:	2b00      	cmp	r3, #0
 801add4:	f47f af19 	bne.w	801ac0a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801add8:	2300      	movs	r3, #0
 801adda:	e002      	b.n	801ade2 <ip4_frag+0x26a>
      goto memerr;
 801addc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801adde:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ade2:	4618      	mov	r0, r3
 801ade4:	3748      	adds	r7, #72	@ 0x48
 801ade6:	46bd      	mov	sp, r7
 801ade8:	bd80      	pop	{r7, pc}
 801adea:	bf00      	nop
 801adec:	0801fcc0 	.word	0x0801fcc0
 801adf0:	0801fe9c 	.word	0x0801fe9c
 801adf4:	0801fd08 	.word	0x0801fd08
 801adf8:	0801feb8 	.word	0x0801feb8
 801adfc:	0801fed8 	.word	0x0801fed8
 801ae00:	0801ab11 	.word	0x0801ab11

0801ae04 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ae04:	b580      	push	{r7, lr}
 801ae06:	b086      	sub	sp, #24
 801ae08:	af00      	add	r7, sp, #0
 801ae0a:	6078      	str	r0, [r7, #4]
 801ae0c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ae0e:	230e      	movs	r3, #14
 801ae10:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	895b      	ldrh	r3, [r3, #10]
 801ae16:	2b0e      	cmp	r3, #14
 801ae18:	d96e      	bls.n	801aef8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	7bdb      	ldrb	r3, [r3, #15]
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d106      	bne.n	801ae30 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801ae22:	683b      	ldr	r3, [r7, #0]
 801ae24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ae28:	3301      	adds	r3, #1
 801ae2a:	b2da      	uxtb	r2, r3
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	685b      	ldr	r3, [r3, #4]
 801ae34:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ae36:	693b      	ldr	r3, [r7, #16]
 801ae38:	7b1a      	ldrb	r2, [r3, #12]
 801ae3a:	7b5b      	ldrb	r3, [r3, #13]
 801ae3c:	021b      	lsls	r3, r3, #8
 801ae3e:	4313      	orrs	r3, r2
 801ae40:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ae42:	693b      	ldr	r3, [r7, #16]
 801ae44:	781b      	ldrb	r3, [r3, #0]
 801ae46:	f003 0301 	and.w	r3, r3, #1
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d023      	beq.n	801ae96 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ae4e:	693b      	ldr	r3, [r7, #16]
 801ae50:	781b      	ldrb	r3, [r3, #0]
 801ae52:	2b01      	cmp	r3, #1
 801ae54:	d10f      	bne.n	801ae76 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ae56:	693b      	ldr	r3, [r7, #16]
 801ae58:	785b      	ldrb	r3, [r3, #1]
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d11b      	bne.n	801ae96 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ae5e:	693b      	ldr	r3, [r7, #16]
 801ae60:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ae62:	2b5e      	cmp	r3, #94	@ 0x5e
 801ae64:	d117      	bne.n	801ae96 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	7b5b      	ldrb	r3, [r3, #13]
 801ae6a:	f043 0310 	orr.w	r3, r3, #16
 801ae6e:	b2da      	uxtb	r2, r3
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	735a      	strb	r2, [r3, #13]
 801ae74:	e00f      	b.n	801ae96 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ae76:	693b      	ldr	r3, [r7, #16]
 801ae78:	2206      	movs	r2, #6
 801ae7a:	4928      	ldr	r1, [pc, #160]	@ (801af1c <ethernet_input+0x118>)
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	f001 fb39 	bl	801c4f4 <memcmp>
 801ae82:	4603      	mov	r3, r0
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d106      	bne.n	801ae96 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	7b5b      	ldrb	r3, [r3, #13]
 801ae8c:	f043 0308 	orr.w	r3, r3, #8
 801ae90:	b2da      	uxtb	r2, r3
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801ae96:	89fb      	ldrh	r3, [r7, #14]
 801ae98:	2b08      	cmp	r3, #8
 801ae9a:	d003      	beq.n	801aea4 <ethernet_input+0xa0>
 801ae9c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801aea0:	d014      	beq.n	801aecc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801aea2:	e032      	b.n	801af0a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801aea4:	683b      	ldr	r3, [r7, #0]
 801aea6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801aeaa:	f003 0308 	and.w	r3, r3, #8
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	d024      	beq.n	801aefc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801aeb2:	8afb      	ldrh	r3, [r7, #22]
 801aeb4:	4619      	mov	r1, r3
 801aeb6:	6878      	ldr	r0, [r7, #4]
 801aeb8:	f7f7 faba 	bl	8012430 <pbuf_remove_header>
 801aebc:	4603      	mov	r3, r0
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d11e      	bne.n	801af00 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801aec2:	6839      	ldr	r1, [r7, #0]
 801aec4:	6878      	ldr	r0, [r7, #4]
 801aec6:	f7fe fe91 	bl	8019bec <ip4_input>
      break;
 801aeca:	e013      	b.n	801aef4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801aecc:	683b      	ldr	r3, [r7, #0]
 801aece:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801aed2:	f003 0308 	and.w	r3, r3, #8
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d014      	beq.n	801af04 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801aeda:	8afb      	ldrh	r3, [r7, #22]
 801aedc:	4619      	mov	r1, r3
 801aede:	6878      	ldr	r0, [r7, #4]
 801aee0:	f7f7 faa6 	bl	8012430 <pbuf_remove_header>
 801aee4:	4603      	mov	r3, r0
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d10e      	bne.n	801af08 <ethernet_input+0x104>
        etharp_input(p, netif);
 801aeea:	6839      	ldr	r1, [r7, #0]
 801aeec:	6878      	ldr	r0, [r7, #4]
 801aeee:	f7fe f831 	bl	8018f54 <etharp_input>
      break;
 801aef2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801aef4:	2300      	movs	r3, #0
 801aef6:	e00c      	b.n	801af12 <ethernet_input+0x10e>
    goto free_and_return;
 801aef8:	bf00      	nop
 801aefa:	e006      	b.n	801af0a <ethernet_input+0x106>
        goto free_and_return;
 801aefc:	bf00      	nop
 801aefe:	e004      	b.n	801af0a <ethernet_input+0x106>
        goto free_and_return;
 801af00:	bf00      	nop
 801af02:	e002      	b.n	801af0a <ethernet_input+0x106>
        goto free_and_return;
 801af04:	bf00      	nop
 801af06:	e000      	b.n	801af0a <ethernet_input+0x106>
        goto free_and_return;
 801af08:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801af0a:	6878      	ldr	r0, [r7, #4]
 801af0c:	f7f7 fb16 	bl	801253c <pbuf_free>
  return ERR_OK;
 801af10:	2300      	movs	r3, #0
}
 801af12:	4618      	mov	r0, r3
 801af14:	3718      	adds	r7, #24
 801af16:	46bd      	mov	sp, r7
 801af18:	bd80      	pop	{r7, pc}
 801af1a:	bf00      	nop
 801af1c:	0802071c 	.word	0x0802071c

0801af20 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801af20:	b580      	push	{r7, lr}
 801af22:	b086      	sub	sp, #24
 801af24:	af00      	add	r7, sp, #0
 801af26:	60f8      	str	r0, [r7, #12]
 801af28:	60b9      	str	r1, [r7, #8]
 801af2a:	607a      	str	r2, [r7, #4]
 801af2c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801af2e:	8c3b      	ldrh	r3, [r7, #32]
 801af30:	4618      	mov	r0, r3
 801af32:	f7f5 ff15 	bl	8010d60 <lwip_htons>
 801af36:	4603      	mov	r3, r0
 801af38:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801af3a:	210e      	movs	r1, #14
 801af3c:	68b8      	ldr	r0, [r7, #8]
 801af3e:	f7f7 fa67 	bl	8012410 <pbuf_add_header>
 801af42:	4603      	mov	r3, r0
 801af44:	2b00      	cmp	r3, #0
 801af46:	d125      	bne.n	801af94 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801af48:	68bb      	ldr	r3, [r7, #8]
 801af4a:	685b      	ldr	r3, [r3, #4]
 801af4c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801af4e:	693b      	ldr	r3, [r7, #16]
 801af50:	8afa      	ldrh	r2, [r7, #22]
 801af52:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801af54:	693b      	ldr	r3, [r7, #16]
 801af56:	2206      	movs	r2, #6
 801af58:	6839      	ldr	r1, [r7, #0]
 801af5a:	4618      	mov	r0, r3
 801af5c:	f001 fbad 	bl	801c6ba <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801af60:	693b      	ldr	r3, [r7, #16]
 801af62:	3306      	adds	r3, #6
 801af64:	2206      	movs	r2, #6
 801af66:	6879      	ldr	r1, [r7, #4]
 801af68:	4618      	mov	r0, r3
 801af6a:	f001 fba6 	bl	801c6ba <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801af6e:	68fb      	ldr	r3, [r7, #12]
 801af70:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801af74:	2b06      	cmp	r3, #6
 801af76:	d006      	beq.n	801af86 <ethernet_output+0x66>
 801af78:	4b0a      	ldr	r3, [pc, #40]	@ (801afa4 <ethernet_output+0x84>)
 801af7a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801af7e:	490a      	ldr	r1, [pc, #40]	@ (801afa8 <ethernet_output+0x88>)
 801af80:	480a      	ldr	r0, [pc, #40]	@ (801afac <ethernet_output+0x8c>)
 801af82:	f001 f96f 	bl	801c264 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	699b      	ldr	r3, [r3, #24]
 801af8a:	68b9      	ldr	r1, [r7, #8]
 801af8c:	68f8      	ldr	r0, [r7, #12]
 801af8e:	4798      	blx	r3
 801af90:	4603      	mov	r3, r0
 801af92:	e002      	b.n	801af9a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801af94:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801af96:	f06f 0301 	mvn.w	r3, #1
}
 801af9a:	4618      	mov	r0, r3
 801af9c:	3718      	adds	r7, #24
 801af9e:	46bd      	mov	sp, r7
 801afa0:	bd80      	pop	{r7, pc}
 801afa2:	bf00      	nop
 801afa4:	0801fee8 	.word	0x0801fee8
 801afa8:	0801ff20 	.word	0x0801ff20
 801afac:	0801ff54 	.word	0x0801ff54

0801afb0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801afb0:	b580      	push	{r7, lr}
 801afb2:	b082      	sub	sp, #8
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	6078      	str	r0, [r7, #4]
 801afb8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801afba:	683b      	ldr	r3, [r7, #0]
 801afbc:	2200      	movs	r2, #0
 801afbe:	2104      	movs	r1, #4
 801afc0:	4618      	mov	r0, r3
 801afc2:	f7f2 f85d 	bl	800d080 <osMessageQueueNew>
 801afc6:	4602      	mov	r2, r0
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	d102      	bne.n	801afda <sys_mbox_new+0x2a>
    return ERR_MEM;
 801afd4:	f04f 33ff 	mov.w	r3, #4294967295
 801afd8:	e000      	b.n	801afdc <sys_mbox_new+0x2c>

  return ERR_OK;
 801afda:	2300      	movs	r3, #0
}
 801afdc:	4618      	mov	r0, r3
 801afde:	3708      	adds	r7, #8
 801afe0:	46bd      	mov	sp, r7
 801afe2:	bd80      	pop	{r7, pc}

0801afe4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801afe4:	b580      	push	{r7, lr}
 801afe6:	b084      	sub	sp, #16
 801afe8:	af00      	add	r7, sp, #0
 801afea:	6078      	str	r0, [r7, #4]
 801afec:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	6818      	ldr	r0, [r3, #0]
 801aff2:	4639      	mov	r1, r7
 801aff4:	2300      	movs	r3, #0
 801aff6:	2200      	movs	r2, #0
 801aff8:	f7f2 f8c8 	bl	800d18c <osMessageQueuePut>
 801affc:	4603      	mov	r3, r0
 801affe:	2b00      	cmp	r3, #0
 801b000:	d102      	bne.n	801b008 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801b002:	2300      	movs	r3, #0
 801b004:	73fb      	strb	r3, [r7, #15]
 801b006:	e001      	b.n	801b00c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801b008:	23ff      	movs	r3, #255	@ 0xff
 801b00a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801b00c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b010:	4618      	mov	r0, r3
 801b012:	3710      	adds	r7, #16
 801b014:	46bd      	mov	sp, r7
 801b016:	bd80      	pop	{r7, pc}

0801b018 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b018:	b580      	push	{r7, lr}
 801b01a:	b086      	sub	sp, #24
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	60f8      	str	r0, [r7, #12]
 801b020:	60b9      	str	r1, [r7, #8]
 801b022:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801b024:	f7f1 fc8e 	bl	800c944 <osKernelGetTickCount>
 801b028:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d013      	beq.n	801b058 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801b030:	68fb      	ldr	r3, [r7, #12]
 801b032:	6818      	ldr	r0, [r3, #0]
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	2200      	movs	r2, #0
 801b038:	68b9      	ldr	r1, [r7, #8]
 801b03a:	f7f2 f91b 	bl	800d274 <osMessageQueueGet>
 801b03e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801b040:	693b      	ldr	r3, [r7, #16]
 801b042:	2b00      	cmp	r3, #0
 801b044:	d105      	bne.n	801b052 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801b046:	f7f1 fc7d 	bl	800c944 <osKernelGetTickCount>
 801b04a:	4602      	mov	r2, r0
 801b04c:	697b      	ldr	r3, [r7, #20]
 801b04e:	1ad3      	subs	r3, r2, r3
 801b050:	e00f      	b.n	801b072 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b052:	f04f 33ff 	mov.w	r3, #4294967295
 801b056:	e00c      	b.n	801b072 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801b058:	68fb      	ldr	r3, [r7, #12]
 801b05a:	6818      	ldr	r0, [r3, #0]
 801b05c:	f04f 33ff 	mov.w	r3, #4294967295
 801b060:	2200      	movs	r2, #0
 801b062:	68b9      	ldr	r1, [r7, #8]
 801b064:	f7f2 f906 	bl	800d274 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801b068:	f7f1 fc6c 	bl	800c944 <osKernelGetTickCount>
 801b06c:	4602      	mov	r2, r0
 801b06e:	697b      	ldr	r3, [r7, #20]
 801b070:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801b072:	4618      	mov	r0, r3
 801b074:	3718      	adds	r7, #24
 801b076:	46bd      	mov	sp, r7
 801b078:	bd80      	pop	{r7, pc}

0801b07a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801b07a:	b480      	push	{r7}
 801b07c:	b083      	sub	sp, #12
 801b07e:	af00      	add	r7, sp, #0
 801b080:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	2b00      	cmp	r3, #0
 801b088:	d101      	bne.n	801b08e <sys_mbox_valid+0x14>
    return 0;
 801b08a:	2300      	movs	r3, #0
 801b08c:	e000      	b.n	801b090 <sys_mbox_valid+0x16>
  else
    return 1;
 801b08e:	2301      	movs	r3, #1
}
 801b090:	4618      	mov	r0, r3
 801b092:	370c      	adds	r7, #12
 801b094:	46bd      	mov	sp, r7
 801b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b09a:	4770      	bx	lr

0801b09c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b09c:	b580      	push	{r7, lr}
 801b09e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801b0a0:	2000      	movs	r0, #0
 801b0a2:	f7f1 fd4b 	bl	800cb3c <osMutexNew>
 801b0a6:	4603      	mov	r3, r0
 801b0a8:	4a01      	ldr	r2, [pc, #4]	@ (801b0b0 <sys_init+0x14>)
 801b0aa:	6013      	str	r3, [r2, #0]
#endif
}
 801b0ac:	bf00      	nop
 801b0ae:	bd80      	pop	{r7, pc}
 801b0b0:	200276e8 	.word	0x200276e8

0801b0b4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b0b4:	b580      	push	{r7, lr}
 801b0b6:	b082      	sub	sp, #8
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801b0bc:	2000      	movs	r0, #0
 801b0be:	f7f1 fd3d 	bl	800cb3c <osMutexNew>
 801b0c2:	4602      	mov	r2, r0
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d102      	bne.n	801b0d6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b0d0:	f04f 33ff 	mov.w	r3, #4294967295
 801b0d4:	e000      	b.n	801b0d8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b0d6:	2300      	movs	r3, #0
}
 801b0d8:	4618      	mov	r0, r3
 801b0da:	3708      	adds	r7, #8
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	bd80      	pop	{r7, pc}

0801b0e0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b082      	sub	sp, #8
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	f04f 31ff 	mov.w	r1, #4294967295
 801b0f0:	4618      	mov	r0, r3
 801b0f2:	f7f1 fdbd 	bl	800cc70 <osMutexAcquire>
#endif
}
 801b0f6:	bf00      	nop
 801b0f8:	3708      	adds	r7, #8
 801b0fa:	46bd      	mov	sp, r7
 801b0fc:	bd80      	pop	{r7, pc}

0801b0fe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b0fe:	b580      	push	{r7, lr}
 801b100:	b082      	sub	sp, #8
 801b102:	af00      	add	r7, sp, #0
 801b104:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	4618      	mov	r0, r3
 801b10c:	f7f1 fe0e 	bl	800cd2c <osMutexRelease>
}
 801b110:	bf00      	nop
 801b112:	3708      	adds	r7, #8
 801b114:	46bd      	mov	sp, r7
 801b116:	bd80      	pop	{r7, pc}

0801b118 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b118:	b580      	push	{r7, lr}
 801b11a:	b08e      	sub	sp, #56	@ 0x38
 801b11c:	af00      	add	r7, sp, #0
 801b11e:	60f8      	str	r0, [r7, #12]
 801b120:	60b9      	str	r1, [r7, #8]
 801b122:	607a      	str	r2, [r7, #4]
 801b124:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801b126:	f107 0314 	add.w	r3, r7, #20
 801b12a:	2224      	movs	r2, #36	@ 0x24
 801b12c:	2100      	movs	r1, #0
 801b12e:	4618      	mov	r0, r3
 801b130:	f001 f9f0 	bl	801c514 <memset>
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	617b      	str	r3, [r7, #20]
 801b138:	683b      	ldr	r3, [r7, #0]
 801b13a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b13c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b13e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801b140:	f107 0314 	add.w	r3, r7, #20
 801b144:	461a      	mov	r2, r3
 801b146:	6879      	ldr	r1, [r7, #4]
 801b148:	68b8      	ldr	r0, [r7, #8]
 801b14a:	f7f1 fc23 	bl	800c994 <osThreadNew>
 801b14e:	4603      	mov	r3, r0
#endif
}
 801b150:	4618      	mov	r0, r3
 801b152:	3738      	adds	r7, #56	@ 0x38
 801b154:	46bd      	mov	sp, r7
 801b156:	bd80      	pop	{r7, pc}

0801b158 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b158:	b580      	push	{r7, lr}
 801b15a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801b15c:	4b04      	ldr	r3, [pc, #16]	@ (801b170 <sys_arch_protect+0x18>)
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	f04f 31ff 	mov.w	r1, #4294967295
 801b164:	4618      	mov	r0, r3
 801b166:	f7f1 fd83 	bl	800cc70 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801b16a:	2301      	movs	r3, #1
}
 801b16c:	4618      	mov	r0, r3
 801b16e:	bd80      	pop	{r7, pc}
 801b170:	200276e8 	.word	0x200276e8

0801b174 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b174:	b580      	push	{r7, lr}
 801b176:	b082      	sub	sp, #8
 801b178:	af00      	add	r7, sp, #0
 801b17a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b17c:	4b04      	ldr	r3, [pc, #16]	@ (801b190 <sys_arch_unprotect+0x1c>)
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	4618      	mov	r0, r3
 801b182:	f7f1 fdd3 	bl	800cd2c <osMutexRelease>
}
 801b186:	bf00      	nop
 801b188:	3708      	adds	r7, #8
 801b18a:	46bd      	mov	sp, r7
 801b18c:	bd80      	pop	{r7, pc}
 801b18e:	bf00      	nop
 801b190:	200276e8 	.word	0x200276e8

0801b194 <i2c_testing>:
#define I2C_SENDER 		(&hi2c4) // Master
#define I2C_RECEIVER 	(&hi2c1) // Slave
#define I2C_SLAVE_ADDR  (120 << 1) // left-shifted 7-bit address


result_pro_t i2c_testing(test_command_t* command){
 801b194:	b580      	push	{r7, lr}
 801b196:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801b19a:	af00      	add	r7, sp, #0
 801b19c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b1a0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b1a4:	6018      	str	r0, [r3, #0]
 801b1a6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b1aa:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b1ae:	6019      	str	r1, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801b1b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b1b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801b1b8:	4618      	mov	r0, r3
 801b1ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b1be:	461a      	mov	r2, r3
 801b1c0:	2100      	movs	r1, #0
 801b1c2:	f001 f9a7 	bl	801c514 <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801b1c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b1ca:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801b1ce:	4618      	mov	r0, r3
 801b1d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b1d4:	461a      	mov	r2, r3
 801b1d6:	2100      	movs	r1, #0
 801b1d8:	f001 f99c 	bl	801c514 <memset>

	result_pro_t response;
	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 801b1dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b1e0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	d118      	bne.n	801b21c <i2c_testing+0x88>
        printf("I2C_TEST: Received NULL command pointer. Skipping.\n");
 801b1ea:	48cc      	ldr	r0, [pc, #816]	@ (801b51c <i2c_testing+0x388>)
 801b1ec:	f001 f8a2 	bl	801c334 <puts>
        response.test_result = TEST_ERR;
 801b1f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b1f4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b1f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b1fc:	809a      	strh	r2, [r3, #4]
        return response;
 801b1fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b202:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b206:	6819      	ldr	r1, [r3, #0]
 801b208:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b20c:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801b210:	460b      	mov	r3, r1
 801b212:	6810      	ldr	r0, [r2, #0]
 801b214:	6018      	str	r0, [r3, #0]
 801b216:	8892      	ldrh	r2, [r2, #4]
 801b218:	809a      	strh	r2, [r3, #4]
 801b21a:	e1cc      	b.n	801b5b6 <i2c_testing+0x422>
	}

	response.test_id = command->test_id;
 801b21c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b220:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	681a      	ldr	r2, [r3, #0]
 801b228:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b22c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b230:	601a      	str	r2, [r3, #0]
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801b232:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b236:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	1dd9      	adds	r1, r3, #7
 801b23e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b242:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	799b      	ldrb	r3, [r3, #6]
 801b24a:	461a      	mov	r2, r3
 801b24c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801b250:	4618      	mov	r0, r3
 801b252:	f001 fa32 	bl	801c6ba <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801b256:	2300      	movs	r3, #0
 801b258:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801b25c:	e185      	b.n	801b56a <i2c_testing+0x3d6>
	    printf("I2C_TEST: Iteration %u/%u -\n", i + 1, command->iterations);
 801b25e:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801b262:	1c59      	adds	r1, r3, #1
 801b264:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b268:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	795b      	ldrb	r3, [r3, #5]
 801b270:	461a      	mov	r2, r3
 801b272:	48ab      	ldr	r0, [pc, #684]	@ (801b520 <i2c_testing+0x38c>)
 801b274:	f000 fff6 	bl	801c264 <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801b278:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b27c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	799b      	ldrb	r3, [r3, #6]
 801b284:	461a      	mov	r2, r3
 801b286:	f107 0310 	add.w	r3, r7, #16
 801b28a:	2100      	movs	r1, #0
 801b28c:	4618      	mov	r0, r3
 801b28e:	f001 f941 	bl	801c514 <memset>

	    // --- 1. START RECEIVE DMA FIRST (SLAVE) ---
	    rx_status = HAL_I2C_Slave_Receive_DMA(I2C_RECEIVER, rx_buffer, command->bit_pattern_length);
 801b292:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b296:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	799b      	ldrb	r3, [r3, #6]
 801b29e:	461a      	mov	r2, r3
 801b2a0:	f107 0310 	add.w	r3, r7, #16
 801b2a4:	4619      	mov	r1, r3
 801b2a6:	489f      	ldr	r0, [pc, #636]	@ (801b524 <i2c_testing+0x390>)
 801b2a8:	f7e9 fee4 	bl	8005074 <HAL_I2C_Slave_Receive_DMA>
 801b2ac:	4603      	mov	r3, r0
 801b2ae:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	    if (rx_status != HAL_OK) {
 801b2b2:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d021      	beq.n	801b2fe <i2c_testing+0x16a>
	        printf("Failed to start slave receive DMA: %d\n", rx_status);
 801b2ba:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801b2be:	4619      	mov	r1, r3
 801b2c0:	4899      	ldr	r0, [pc, #612]	@ (801b528 <i2c_testing+0x394>)
 801b2c2:	f000 ffcf 	bl	801c264 <iprintf>
	        response.test_result = TEST_FAIL;
 801b2c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b2ca:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b2ce:	22ff      	movs	r2, #255	@ 0xff
 801b2d0:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801b2d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b2d6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b2da:	6818      	ldr	r0, [r3, #0]
 801b2dc:	f7f5 fa82 	bl	80107e4 <vPortFree>
	        return response;
 801b2e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b2e4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b2e8:	6819      	ldr	r1, [r3, #0]
 801b2ea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b2ee:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801b2f2:	460b      	mov	r3, r1
 801b2f4:	6810      	ldr	r0, [r2, #0]
 801b2f6:	6018      	str	r0, [r3, #0]
 801b2f8:	8892      	ldrh	r2, [r2, #4]
 801b2fa:	809a      	strh	r2, [r3, #4]
 801b2fc:	e15b      	b.n	801b5b6 <i2c_testing+0x422>
	    }

	    // --- 2. TRANSMIT a block of data via DMA (MASTER) ---
	    tx_status = HAL_I2C_Master_Transmit_DMA(I2C_SENDER, I2C_SLAVE_ADDR, tx_buffer, command->bit_pattern_length);
 801b2fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b302:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	799b      	ldrb	r3, [r3, #6]
 801b30a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 801b30e:	21f0      	movs	r1, #240	@ 0xf0
 801b310:	4886      	ldr	r0, [pc, #536]	@ (801b52c <i2c_testing+0x398>)
 801b312:	f7e9 fd9b 	bl	8004e4c <HAL_I2C_Master_Transmit_DMA>
 801b316:	4603      	mov	r3, r0
 801b318:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	    if (tx_status != HAL_OK) {
 801b31c:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801b320:	2b00      	cmp	r3, #0
 801b322:	d027      	beq.n	801b374 <i2c_testing+0x1e0>
	        printf("Failed to send DMA on I2C sender: %d\n", tx_status);
 801b324:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801b328:	4619      	mov	r1, r3
 801b32a:	4881      	ldr	r0, [pc, #516]	@ (801b530 <i2c_testing+0x39c>)
 801b32c:	f000 ff9a 	bl	801c264 <iprintf>
	        response.test_result = TEST_FAIL;
 801b330:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b334:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b338:	22ff      	movs	r2, #255	@ 0xff
 801b33a:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801b33c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b340:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b344:	6818      	ldr	r0, [r3, #0]
 801b346:	f7f5 fa4d 	bl	80107e4 <vPortFree>
	        i2c_reset(I2C_SENDER); // Reset the Master on error
 801b34a:	4878      	ldr	r0, [pc, #480]	@ (801b52c <i2c_testing+0x398>)
 801b34c:	f000 f99a 	bl	801b684 <i2c_reset>
	        i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801b350:	4874      	ldr	r0, [pc, #464]	@ (801b524 <i2c_testing+0x390>)
 801b352:	f000 f997 	bl	801b684 <i2c_reset>
	        return response;
 801b356:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b35a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b35e:	6819      	ldr	r1, [r3, #0]
 801b360:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b364:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801b368:	460b      	mov	r3, r1
 801b36a:	6810      	ldr	r0, [r2, #0]
 801b36c:	6018      	str	r0, [r3, #0]
 801b36e:	8892      	ldrh	r2, [r2, #4]
 801b370:	809a      	strh	r2, [r3, #4]
 801b372:	e120      	b.n	801b5b6 <i2c_testing+0x422>
	    }

	    // --- 3. WAIT FOR BOTH TX AND RX DMA COMPLETION ---
	    if (xSemaphoreTake(I2cTxHandle, TIMEOUT) != pdPASS) {
 801b374:	4b6f      	ldr	r3, [pc, #444]	@ (801b534 <i2c_testing+0x3a0>)
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801b37c:	4618      	mov	r0, r3
 801b37e:	f7f2 fe8d 	bl	800e09c <xQueueSemaphoreTake>
 801b382:	4603      	mov	r3, r0
 801b384:	2b01      	cmp	r3, #1
 801b386:	d024      	beq.n	801b3d2 <i2c_testing+0x23e>
	         printf("Master TX timeout\n");
 801b388:	486b      	ldr	r0, [pc, #428]	@ (801b538 <i2c_testing+0x3a4>)
 801b38a:	f000 ffd3 	bl	801c334 <puts>
	         response.test_result = TEST_FAIL;
 801b38e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b392:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b396:	22ff      	movs	r2, #255	@ 0xff
 801b398:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 801b39a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b39e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b3a2:	6818      	ldr	r0, [r3, #0]
 801b3a4:	f7f5 fa1e 	bl	80107e4 <vPortFree>
	         i2c_reset(I2C_SENDER); // Reset the Master on timeout
 801b3a8:	4860      	ldr	r0, [pc, #384]	@ (801b52c <i2c_testing+0x398>)
 801b3aa:	f000 f96b 	bl	801b684 <i2c_reset>
	         i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801b3ae:	485d      	ldr	r0, [pc, #372]	@ (801b524 <i2c_testing+0x390>)
 801b3b0:	f000 f968 	bl	801b684 <i2c_reset>
	         return response;
 801b3b4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b3b8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b3bc:	6819      	ldr	r1, [r3, #0]
 801b3be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b3c2:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801b3c6:	460b      	mov	r3, r1
 801b3c8:	6810      	ldr	r0, [r2, #0]
 801b3ca:	6018      	str	r0, [r3, #0]
 801b3cc:	8892      	ldrh	r2, [r2, #4]
 801b3ce:	809a      	strh	r2, [r3, #4]
 801b3d0:	e0f1      	b.n	801b5b6 <i2c_testing+0x422>
	    }

	    if (xSemaphoreTake(I2cRxHandle, TIMEOUT) != pdPASS) {
 801b3d2:	4b5a      	ldr	r3, [pc, #360]	@ (801b53c <i2c_testing+0x3a8>)
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801b3da:	4618      	mov	r0, r3
 801b3dc:	f7f2 fe5e 	bl	800e09c <xQueueSemaphoreTake>
 801b3e0:	4603      	mov	r3, r0
 801b3e2:	2b01      	cmp	r3, #1
 801b3e4:	d012      	beq.n	801b40c <i2c_testing+0x278>
	         printf("Slave RX timeout\n");
 801b3e6:	4856      	ldr	r0, [pc, #344]	@ (801b540 <i2c_testing+0x3ac>)
 801b3e8:	f000 ffa4 	bl	801c334 <puts>
	         response.test_result = TEST_FAIL;
 801b3ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b3f0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b3f4:	22ff      	movs	r2, #255	@ 0xff
 801b3f6:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 801b3f8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b3fc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b400:	6818      	ldr	r0, [r3, #0]
 801b402:	f7f5 f9ef 	bl	80107e4 <vPortFree>
	         i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution	         return response;
 801b406:	4847      	ldr	r0, [pc, #284]	@ (801b524 <i2c_testing+0x390>)
 801b408:	f000 f93c 	bl	801b684 <i2c_reset>
	    }

	    // --- 4. COMPARE SENT vs. RECEIVED data ---
	    if (command->bit_pattern_length > 100) {
 801b40c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b410:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	799b      	ldrb	r3, [r3, #6]
 801b418:	2b64      	cmp	r3, #100	@ 0x64
 801b41a:	d948      	bls.n	801b4ae <i2c_testing+0x31a>
	        uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801b41c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b420:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b424:	681b      	ldr	r3, [r3, #0]
 801b426:	799b      	ldrb	r3, [r3, #6]
 801b428:	461a      	mov	r2, r3
 801b42a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801b42e:	4611      	mov	r1, r2
 801b430:	4618      	mov	r0, r3
 801b432:	f7e5 fde7 	bl	8001004 <calculate_crc>
 801b436:	4603      	mov	r3, r0
 801b438:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	        uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801b43c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b440:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b444:	681b      	ldr	r3, [r3, #0]
 801b446:	799b      	ldrb	r3, [r3, #6]
 801b448:	461a      	mov	r2, r3
 801b44a:	f107 0310 	add.w	r3, r7, #16
 801b44e:	4611      	mov	r1, r2
 801b450:	4618      	mov	r0, r3
 801b452:	f7e5 fdd7 	bl	8001004 <calculate_crc>
 801b456:	4603      	mov	r3, r0
 801b458:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	        if (sent_crc != received_crc) {
 801b45c:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801b460:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801b464:	429a      	cmp	r2, r3
 801b466:	d071      	beq.n	801b54c <i2c_testing+0x3b8>
	            printf("I2C_TEST: CRC mismatch on iteration %u.\n", i + 1);
 801b468:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801b46c:	3301      	adds	r3, #1
 801b46e:	4619      	mov	r1, r3
 801b470:	4834      	ldr	r0, [pc, #208]	@ (801b544 <i2c_testing+0x3b0>)
 801b472:	f000 fef7 	bl	801c264 <iprintf>
	            response.test_result = TEST_FAIL;
 801b476:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b47a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b47e:	22ff      	movs	r2, #255	@ 0xff
 801b480:	809a      	strh	r2, [r3, #4]
	            vPortFree(command);
 801b482:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b486:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b48a:	6818      	ldr	r0, [r3, #0]
 801b48c:	f7f5 f9aa 	bl	80107e4 <vPortFree>
	            return response;
 801b490:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b494:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b498:	6819      	ldr	r1, [r3, #0]
 801b49a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b49e:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801b4a2:	460b      	mov	r3, r1
 801b4a4:	6810      	ldr	r0, [r2, #0]
 801b4a6:	6018      	str	r0, [r3, #0]
 801b4a8:	8892      	ldrh	r2, [r2, #4]
 801b4aa:	809a      	strh	r2, [r3, #4]
 801b4ac:	e083      	b.n	801b5b6 <i2c_testing+0x422>
	        }
	    } else {
	        int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801b4ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b4b2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	799b      	ldrb	r3, [r3, #6]
 801b4ba:	461a      	mov	r2, r3
 801b4bc:	f107 0110 	add.w	r1, r7, #16
 801b4c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	f001 f815 	bl	801c4f4 <memcmp>
 801b4ca:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	        if (comp != 0) {
 801b4ce:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d03a      	beq.n	801b54c <i2c_testing+0x3b8>
	            printf("Data mismatch on iteration %u.\n", i + 1);
 801b4d6:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801b4da:	3301      	adds	r3, #1
 801b4dc:	4619      	mov	r1, r3
 801b4de:	481a      	ldr	r0, [pc, #104]	@ (801b548 <i2c_testing+0x3b4>)
 801b4e0:	f000 fec0 	bl	801c264 <iprintf>
	            response.test_result = TEST_FAIL;
 801b4e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b4e8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b4ec:	22ff      	movs	r2, #255	@ 0xff
 801b4ee:	809a      	strh	r2, [r3, #4]
	            vPortFree(command);
 801b4f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b4f4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b4f8:	6818      	ldr	r0, [r3, #0]
 801b4fa:	f7f5 f973 	bl	80107e4 <vPortFree>
	            return response;
 801b4fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b502:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b506:	6819      	ldr	r1, [r3, #0]
 801b508:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b50c:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801b510:	460b      	mov	r3, r1
 801b512:	6810      	ldr	r0, [r2, #0]
 801b514:	6018      	str	r0, [r3, #0]
 801b516:	8892      	ldrh	r2, [r2, #4]
 801b518:	809a      	strh	r2, [r3, #4]
 801b51a:	e04c      	b.n	801b5b6 <i2c_testing+0x422>
 801b51c:	0801ff7c 	.word	0x0801ff7c
 801b520:	0801ffb0 	.word	0x0801ffb0
 801b524:	20000214 	.word	0x20000214
 801b528:	0801ffd0 	.word	0x0801ffd0
 801b52c:	20000268 	.word	0x20000268
 801b530:	0801fff8 	.word	0x0801fff8
 801b534:	20000b9c 	.word	0x20000b9c
 801b538:	08020020 	.word	0x08020020
 801b53c:	20000b98 	.word	0x20000b98
 801b540:	08020034 	.word	0x08020034
 801b544:	08020048 	.word	0x08020048
 801b548:	08020074 	.word	0x08020074
	        }
	    }
	    printf("Data Match on iteration %u.\n", i + 1);
 801b54c:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801b550:	3301      	adds	r3, #1
 801b552:	4619      	mov	r1, r3
 801b554:	481c      	ldr	r0, [pc, #112]	@ (801b5c8 <i2c_testing+0x434>)
 801b556:	f000 fe85 	bl	801c264 <iprintf>

        osDelay(10);
 801b55a:	200a      	movs	r0, #10
 801b55c:	f7f1 fac0 	bl	800cae0 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801b560:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801b564:	3301      	adds	r3, #1
 801b566:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801b56a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b56e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	795b      	ldrb	r3, [r3, #5]
 801b576:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 801b57a:	429a      	cmp	r2, r3
 801b57c:	f4ff ae6f 	bcc.w	801b25e <i2c_testing+0xca>
	}
    response.test_result = TEST_PASS;
 801b580:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b584:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b588:	2201      	movs	r2, #1
 801b58a:	809a      	strh	r2, [r3, #4]
    vPortFree(command);
 801b58c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b590:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b594:	6818      	ldr	r0, [r3, #0]
 801b596:	f7f5 f925 	bl	80107e4 <vPortFree>
    return response;
 801b59a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b59e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b5a2:	6819      	ldr	r1, [r3, #0]
 801b5a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b5a8:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801b5ac:	460b      	mov	r3, r1
 801b5ae:	6810      	ldr	r0, [r2, #0]
 801b5b0:	6018      	str	r0, [r3, #0]
 801b5b2:	8892      	ldrh	r2, [r2, #4]
 801b5b4:	809a      	strh	r2, [r3, #4]
}
 801b5b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b5ba:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b5be:	6818      	ldr	r0, [r3, #0]
 801b5c0:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 801b5c4:	46bd      	mov	sp, r7
 801b5c6:	bd80      	pop	{r7, pc}
 801b5c8:	08020094 	.word	0x08020094

0801b5cc <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801b5cc:	b580      	push	{r7, lr}
 801b5ce:	b084      	sub	sp, #16
 801b5d0:	af00      	add	r7, sp, #0
 801b5d2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801b5d4:	2300      	movs	r3, #0
 801b5d6:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_SENDER->Instance) // Check the instance of your sender UART
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	681a      	ldr	r2, [r3, #0]
 801b5dc:	4b0e      	ldr	r3, [pc, #56]	@ (801b618 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	429a      	cmp	r2, r3
 801b5e2:	d10a      	bne.n	801b5fa <HAL_I2C_MasterTxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(I2cTxHandle, &xHigherPriorityTaskWoken);
 801b5e4:	4b0d      	ldr	r3, [pc, #52]	@ (801b61c <HAL_I2C_MasterTxCpltCallback+0x50>)
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	f107 020c 	add.w	r2, r7, #12
 801b5ec:	4611      	mov	r1, r2
 801b5ee:	4618      	mov	r0, r3
 801b5f0:	f7f2 fbd3 	bl	800dd9a <xQueueGiveFromISR>
        printf("TX callback fired and freed the semaphore\n");
 801b5f4:	480a      	ldr	r0, [pc, #40]	@ (801b620 <HAL_I2C_MasterTxCpltCallback+0x54>)
 801b5f6:	f000 fe9d 	bl	801c334 <puts>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d007      	beq.n	801b610 <HAL_I2C_MasterTxCpltCallback+0x44>
 801b600:	4b08      	ldr	r3, [pc, #32]	@ (801b624 <HAL_I2C_MasterTxCpltCallback+0x58>)
 801b602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b606:	601a      	str	r2, [r3, #0]
 801b608:	f3bf 8f4f 	dsb	sy
 801b60c:	f3bf 8f6f 	isb	sy

}
 801b610:	bf00      	nop
 801b612:	3710      	adds	r7, #16
 801b614:	46bd      	mov	sp, r7
 801b616:	bd80      	pop	{r7, pc}
 801b618:	20000268 	.word	0x20000268
 801b61c:	20000b9c 	.word	0x20000b9c
 801b620:	080200b4 	.word	0x080200b4
 801b624:	e000ed04 	.word	0xe000ed04

0801b628 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801b628:	b580      	push	{r7, lr}
 801b62a:	b084      	sub	sp, #16
 801b62c:	af00      	add	r7, sp, #0
 801b62e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801b630:	2300      	movs	r3, #0
 801b632:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_RECEIVER->Instance) // Check the instance of your receiver UART
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	681a      	ldr	r2, [r3, #0]
 801b638:	4b0e      	ldr	r3, [pc, #56]	@ (801b674 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	429a      	cmp	r2, r3
 801b63e:	d10a      	bne.n	801b656 <HAL_I2C_SlaveRxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(I2cRxHandle, &xHigherPriorityTaskWoken);
 801b640:	4b0d      	ldr	r3, [pc, #52]	@ (801b678 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	f107 020c 	add.w	r2, r7, #12
 801b648:	4611      	mov	r1, r2
 801b64a:	4618      	mov	r0, r3
 801b64c:	f7f2 fba5 	bl	800dd9a <xQueueGiveFromISR>
        printf("RX callback fired and freed the semaphore\n");
 801b650:	480a      	ldr	r0, [pc, #40]	@ (801b67c <HAL_I2C_SlaveRxCpltCallback+0x54>)
 801b652:	f000 fe6f 	bl	801c334 <puts>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d007      	beq.n	801b66c <HAL_I2C_SlaveRxCpltCallback+0x44>
 801b65c:	4b08      	ldr	r3, [pc, #32]	@ (801b680 <HAL_I2C_SlaveRxCpltCallback+0x58>)
 801b65e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b662:	601a      	str	r2, [r3, #0]
 801b664:	f3bf 8f4f 	dsb	sy
 801b668:	f3bf 8f6f 	isb	sy
}
 801b66c:	bf00      	nop
 801b66e:	3710      	adds	r7, #16
 801b670:	46bd      	mov	sp, r7
 801b672:	bd80      	pop	{r7, pc}
 801b674:	20000214 	.word	0x20000214
 801b678:	20000b98 	.word	0x20000b98
 801b67c:	080200e0 	.word	0x080200e0
 801b680:	e000ed04 	.word	0xe000ed04

0801b684 <i2c_reset>:

// Create a function to reset the I2C peripheral
void i2c_reset(I2C_HandleTypeDef *hi2c) {
 801b684:	b580      	push	{r7, lr}
 801b686:	b082      	sub	sp, #8
 801b688:	af00      	add	r7, sp, #0
 801b68a:	6078      	str	r0, [r7, #4]
    if (HAL_I2C_DeInit(hi2c) != HAL_OK) {
 801b68c:	6878      	ldr	r0, [r7, #4]
 801b68e:	f7e9 fbad 	bl	8004dec <HAL_I2C_DeInit>
 801b692:	4603      	mov	r3, r0
 801b694:	2b00      	cmp	r3, #0
 801b696:	d002      	beq.n	801b69e <i2c_reset+0x1a>
        // Log a fatal error, the peripheral is in an unrecoverable state
        printf("Failed to de-initialize I2C peripheral!\n");
 801b698:	4807      	ldr	r0, [pc, #28]	@ (801b6b8 <i2c_reset+0x34>)
 801b69a:	f000 fe4b 	bl	801c334 <puts>
    }
    if (HAL_I2C_Init(hi2c) != HAL_OK) {
 801b69e:	6878      	ldr	r0, [r7, #4]
 801b6a0:	f7e9 fb08 	bl	8004cb4 <HAL_I2C_Init>
 801b6a4:	4603      	mov	r3, r0
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d002      	beq.n	801b6b0 <i2c_reset+0x2c>
        // Log a fatal error
        printf("Failed to re-initialize I2C peripheral!\n");
 801b6aa:	4804      	ldr	r0, [pc, #16]	@ (801b6bc <i2c_reset+0x38>)
 801b6ac:	f000 fe42 	bl	801c334 <puts>
    }
}
 801b6b0:	bf00      	nop
 801b6b2:	3708      	adds	r7, #8
 801b6b4:	46bd      	mov	sp, r7
 801b6b6:	bd80      	pop	{r7, pc}
 801b6b8:	0802010c 	.word	0x0802010c
 801b6bc:	08020134 	.word	0x08020134

0801b6c0 <spi_testing>:
 */
#define SPI_SENDER 		(&hspi1) // Master
#define SPI_RECEIVER 	(&hspi2) // Slave


result_pro_t spi_testing(test_command_t* command){
 801b6c0:	b580      	push	{r7, lr}
 801b6c2:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801b6c6:	af00      	add	r7, sp, #0
 801b6c8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b6cc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b6d0:	6018      	str	r0, [r3, #0]
 801b6d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b6d6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b6da:	6019      	str	r1, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801b6dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b6e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801b6e4:	4618      	mov	r0, r3
 801b6e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b6ea:	461a      	mov	r2, r3
 801b6ec:	2100      	movs	r1, #0
 801b6ee:	f000 ff11 	bl	801c514 <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801b6f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b6f6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801b6fa:	4618      	mov	r0, r3
 801b6fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b700:	461a      	mov	r2, r3
 801b702:	2100      	movs	r1, #0
 801b704:	f000 ff06 	bl	801c514 <memset>

	result_pro_t response;
	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 801b708:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b70c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b710:	681b      	ldr	r3, [r3, #0]
 801b712:	2b00      	cmp	r3, #0
 801b714:	d118      	bne.n	801b748 <spi_testing+0x88>
        printf("SPI_TEST: Received NULL command pointer. Skipping.\n");
 801b716:	48bd      	ldr	r0, [pc, #756]	@ (801ba0c <spi_testing+0x34c>)
 801b718:	f000 fe0c 	bl	801c334 <puts>
        response.test_result = TEST_ERR;
 801b71c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b720:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b724:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b728:	809a      	strh	r2, [r3, #4]
        return response;
 801b72a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b72e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b732:	6819      	ldr	r1, [r3, #0]
 801b734:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b738:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801b73c:	460b      	mov	r3, r1
 801b73e:	6810      	ldr	r0, [r2, #0]
 801b740:	6018      	str	r0, [r3, #0]
 801b742:	8892      	ldrh	r2, [r2, #4]
 801b744:	809a      	strh	r2, [r3, #4]
 801b746:	e1aa      	b.n	801ba9e <spi_testing+0x3de>
	}

	response.test_id = command->test_id;
 801b748:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b74c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b750:	681b      	ldr	r3, [r3, #0]
 801b752:	681a      	ldr	r2, [r3, #0]
 801b754:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b758:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b75c:	601a      	str	r2, [r3, #0]

    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801b75e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b762:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	1dd9      	adds	r1, r3, #7
 801b76a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b76e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b772:	681b      	ldr	r3, [r3, #0]
 801b774:	799b      	ldrb	r3, [r3, #6]
 801b776:	461a      	mov	r2, r3
 801b778:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801b77c:	4618      	mov	r0, r3
 801b77e:	f000 ff9c 	bl	801c6ba <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801b782:	2300      	movs	r3, #0
 801b784:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801b788:	e163      	b.n	801ba52 <spi_testing+0x392>
	    printf("SPI_TEST: Iteration %u/%u -\n", i + 1, command->iterations);
 801b78a:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801b78e:	1c59      	adds	r1, r3, #1
 801b790:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b794:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	795b      	ldrb	r3, [r3, #5]
 801b79c:	461a      	mov	r2, r3
 801b79e:	489c      	ldr	r0, [pc, #624]	@ (801ba10 <spi_testing+0x350>)
 801b7a0:	f000 fd60 	bl	801c264 <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801b7a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b7a8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	799b      	ldrb	r3, [r3, #6]
 801b7b0:	461a      	mov	r2, r3
 801b7b2:	f107 0310 	add.w	r3, r7, #16
 801b7b6:	2100      	movs	r1, #0
 801b7b8:	4618      	mov	r0, r3
 801b7ba:	f000 feab 	bl	801c514 <memset>

	    // --- 1. START RECEIVE DMA FIRST (SLAVE) ---
		//SPI_RECEIVER->Instance->CR1 |= SPI_CR1_SSI; // turn OFF
	    rx_status = HAL_SPI_Receive_IT(SPI_RECEIVER, rx_buffer, command->bit_pattern_length);
 801b7be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b7c2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b7c6:	681b      	ldr	r3, [r3, #0]
 801b7c8:	799b      	ldrb	r3, [r3, #6]
 801b7ca:	461a      	mov	r2, r3
 801b7cc:	f107 0310 	add.w	r3, r7, #16
 801b7d0:	4619      	mov	r1, r3
 801b7d2:	4890      	ldr	r0, [pc, #576]	@ (801ba14 <spi_testing+0x354>)
 801b7d4:	f7ec fefa 	bl	80085cc <HAL_SPI_Receive_IT>
 801b7d8:	4603      	mov	r3, r0
 801b7da:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	    if (rx_status != HAL_OK) {
 801b7de:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d021      	beq.n	801b82a <spi_testing+0x16a>
	        printf("Failed to start slave receive DMA: %d\n", rx_status);
 801b7e6:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801b7ea:	4619      	mov	r1, r3
 801b7ec:	488a      	ldr	r0, [pc, #552]	@ (801ba18 <spi_testing+0x358>)
 801b7ee:	f000 fd39 	bl	801c264 <iprintf>
	        response.test_result = TEST_FAIL;
 801b7f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b7f6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b7fa:	22ff      	movs	r2, #255	@ 0xff
 801b7fc:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801b7fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b802:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b806:	6818      	ldr	r0, [r3, #0]
 801b808:	f7f4 ffec 	bl	80107e4 <vPortFree>
	        return response;
 801b80c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b810:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b814:	6819      	ldr	r1, [r3, #0]
 801b816:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b81a:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801b81e:	460b      	mov	r3, r1
 801b820:	6810      	ldr	r0, [r2, #0]
 801b822:	6018      	str	r0, [r3, #0]
 801b824:	8892      	ldrh	r2, [r2, #4]
 801b826:	809a      	strh	r2, [r3, #4]
 801b828:	e139      	b.n	801ba9e <spi_testing+0x3de>
	    }

	    // --- 2. TRANSMIT & RECEIVE a block of data via DMA (MASTER) ---
		//SPI_RECEIVER->Instance->CR1 &= ~SPI_CR1_SSI; // turn ON

	    tx_status = HAL_SPI_Transmit(SPI_SENDER, tx_buffer, command->bit_pattern_length,TIMEOUT);
 801b82a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b82e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	799b      	ldrb	r3, [r3, #6]
 801b836:	461a      	mov	r2, r3
 801b838:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801b83c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801b840:	4876      	ldr	r0, [pc, #472]	@ (801ba1c <spi_testing+0x35c>)
 801b842:	f7ec fd4c 	bl	80082de <HAL_SPI_Transmit>
 801b846:	4603      	mov	r3, r0
 801b848:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	    if (tx_status != HAL_OK) {
 801b84c:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801b850:	2b00      	cmp	r3, #0
 801b852:	d027      	beq.n	801b8a4 <spi_testing+0x1e4>
	        printf("Failed to send DMA on SPI sender: %d\n", tx_status);
 801b854:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801b858:	4619      	mov	r1, r3
 801b85a:	4871      	ldr	r0, [pc, #452]	@ (801ba20 <spi_testing+0x360>)
 801b85c:	f000 fd02 	bl	801c264 <iprintf>
	        response.test_result = TEST_FAIL;
 801b860:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b864:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b868:	22ff      	movs	r2, #255	@ 0xff
 801b86a:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801b86c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b870:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b874:	6818      	ldr	r0, [r3, #0]
 801b876:	f7f4 ffb5 	bl	80107e4 <vPortFree>
	        HAL_SPI_Abort_IT(SPI_SENDER); // Stop the stuck sending
 801b87a:	4868      	ldr	r0, [pc, #416]	@ (801ba1c <spi_testing+0x35c>)
 801b87c:	f7ec fffa 	bl	8008874 <HAL_SPI_Abort_IT>
		    HAL_SPI_Abort_IT(SPI_RECEIVER); // Stop the pending receive
 801b880:	4864      	ldr	r0, [pc, #400]	@ (801ba14 <spi_testing+0x354>)
 801b882:	f7ec fff7 	bl	8008874 <HAL_SPI_Abort_IT>

			//SPI_RECEIVER->Instance->CR1 |= SPI_CR1_SSI; // turn OFF
	        return response;
 801b886:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b88a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b88e:	6819      	ldr	r1, [r3, #0]
 801b890:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b894:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801b898:	460b      	mov	r3, r1
 801b89a:	6810      	ldr	r0, [r2, #0]
 801b89c:	6018      	str	r0, [r3, #0]
 801b89e:	8892      	ldrh	r2, [r2, #4]
 801b8a0:	809a      	strh	r2, [r3, #4]
 801b8a2:	e0fc      	b.n	801ba9e <spi_testing+0x3de>
//		     HAL_SPI_Abort_IT(SPI_RECEIVER); // Stop the pending receive
//		     //SPI_RECEIVER->Instance->CR1 |= SPI_CR1_SSI; // turn OFF
//	         return response;
//	    }

	    if (xSemaphoreTake(SpiRxHandle, TIMEOUT) != pdPASS) {
 801b8a4:	4b5f      	ldr	r3, [pc, #380]	@ (801ba24 <spi_testing+0x364>)
 801b8a6:	681b      	ldr	r3, [r3, #0]
 801b8a8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 801b8ac:	4618      	mov	r0, r3
 801b8ae:	f7f2 fbf5 	bl	800e09c <xQueueSemaphoreTake>
 801b8b2:	4603      	mov	r3, r0
 801b8b4:	2b01      	cmp	r3, #1
 801b8b6:	d021      	beq.n	801b8fc <spi_testing+0x23c>
	         printf("Slave RX timeout\n");
 801b8b8:	485b      	ldr	r0, [pc, #364]	@ (801ba28 <spi_testing+0x368>)
 801b8ba:	f000 fd3b 	bl	801c334 <puts>
	         response.test_result = TEST_FAIL;
 801b8be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b8c2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b8c6:	22ff      	movs	r2, #255	@ 0xff
 801b8c8:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 801b8ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b8ce:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b8d2:	6818      	ldr	r0, [r3, #0]
 801b8d4:	f7f4 ff86 	bl	80107e4 <vPortFree>
	         HAL_SPI_Abort_IT(SPI_RECEIVER);
 801b8d8:	484e      	ldr	r0, [pc, #312]	@ (801ba14 <spi_testing+0x354>)
 801b8da:	f7ec ffcb 	bl	8008874 <HAL_SPI_Abort_IT>
		     //SPI_RECEIVER->Instance->CR1 |= SPI_CR1_SSI; // turn OFF
	         return response;
 801b8de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b8e2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b8e6:	6819      	ldr	r1, [r3, #0]
 801b8e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b8ec:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801b8f0:	460b      	mov	r3, r1
 801b8f2:	6810      	ldr	r0, [r2, #0]
 801b8f4:	6018      	str	r0, [r3, #0]
 801b8f6:	8892      	ldrh	r2, [r2, #4]
 801b8f8:	809a      	strh	r2, [r3, #4]
 801b8fa:	e0d0      	b.n	801ba9e <spi_testing+0x3de>

		//SPI_RECEIVER->Instance->CR1 |= SPI_CR1_SSI; // turn OFF


		// --- 4. COMPARE SENT vs. RECEIVED data ---
	    if (command->bit_pattern_length > 100) {
 801b8fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b900:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b904:	681b      	ldr	r3, [r3, #0]
 801b906:	799b      	ldrb	r3, [r3, #6]
 801b908:	2b64      	cmp	r3, #100	@ 0x64
 801b90a:	d948      	bls.n	801b99e <spi_testing+0x2de>
	        uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801b90c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b910:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	799b      	ldrb	r3, [r3, #6]
 801b918:	461a      	mov	r2, r3
 801b91a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801b91e:	4611      	mov	r1, r2
 801b920:	4618      	mov	r0, r3
 801b922:	f7e5 fb6f 	bl	8001004 <calculate_crc>
 801b926:	4603      	mov	r3, r0
 801b928:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	        uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801b92c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b930:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	799b      	ldrb	r3, [r3, #6]
 801b938:	461a      	mov	r2, r3
 801b93a:	f107 0310 	add.w	r3, r7, #16
 801b93e:	4611      	mov	r1, r2
 801b940:	4618      	mov	r0, r3
 801b942:	f7e5 fb5f 	bl	8001004 <calculate_crc>
 801b946:	4603      	mov	r3, r0
 801b948:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	        if (sent_crc != received_crc) {
 801b94c:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801b950:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801b954:	429a      	cmp	r2, r3
 801b956:	d06d      	beq.n	801ba34 <spi_testing+0x374>
	            printf("SPI_TEST: CRC mismatch on iteration %u.\n", i + 1);
 801b958:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801b95c:	3301      	adds	r3, #1
 801b95e:	4619      	mov	r1, r3
 801b960:	4832      	ldr	r0, [pc, #200]	@ (801ba2c <spi_testing+0x36c>)
 801b962:	f000 fc7f 	bl	801c264 <iprintf>
	            response.test_result = TEST_FAIL;
 801b966:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b96a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b96e:	22ff      	movs	r2, #255	@ 0xff
 801b970:	809a      	strh	r2, [r3, #4]
	            vPortFree(command);
 801b972:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b976:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b97a:	6818      	ldr	r0, [r3, #0]
 801b97c:	f7f4 ff32 	bl	80107e4 <vPortFree>
	            return response;
 801b980:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b984:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b988:	6819      	ldr	r1, [r3, #0]
 801b98a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b98e:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801b992:	460b      	mov	r3, r1
 801b994:	6810      	ldr	r0, [r2, #0]
 801b996:	6018      	str	r0, [r3, #0]
 801b998:	8892      	ldrh	r2, [r2, #4]
 801b99a:	809a      	strh	r2, [r3, #4]
 801b99c:	e07f      	b.n	801ba9e <spi_testing+0x3de>
	        }
	    } else {
	        int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801b99e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b9a2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	799b      	ldrb	r3, [r3, #6]
 801b9aa:	461a      	mov	r2, r3
 801b9ac:	f107 0110 	add.w	r1, r7, #16
 801b9b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801b9b4:	4618      	mov	r0, r3
 801b9b6:	f000 fd9d 	bl	801c4f4 <memcmp>
 801b9ba:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	        if (comp != 0) {
 801b9be:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d036      	beq.n	801ba34 <spi_testing+0x374>
	            printf("Data mismatch on iteration %u.\n", i + 1);
 801b9c6:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801b9ca:	3301      	adds	r3, #1
 801b9cc:	4619      	mov	r1, r3
 801b9ce:	4818      	ldr	r0, [pc, #96]	@ (801ba30 <spi_testing+0x370>)
 801b9d0:	f000 fc48 	bl	801c264 <iprintf>
	            response.test_result = TEST_FAIL;
 801b9d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b9d8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801b9dc:	22ff      	movs	r2, #255	@ 0xff
 801b9de:	809a      	strh	r2, [r3, #4]
	            vPortFree(command);
 801b9e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b9e4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b9e8:	6818      	ldr	r0, [r3, #0]
 801b9ea:	f7f4 fefb 	bl	80107e4 <vPortFree>
	            return response;
 801b9ee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b9f2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b9f6:	6819      	ldr	r1, [r3, #0]
 801b9f8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b9fc:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801ba00:	460b      	mov	r3, r1
 801ba02:	6810      	ldr	r0, [r2, #0]
 801ba04:	6018      	str	r0, [r3, #0]
 801ba06:	8892      	ldrh	r2, [r2, #4]
 801ba08:	809a      	strh	r2, [r3, #4]
 801ba0a:	e048      	b.n	801ba9e <spi_testing+0x3de>
 801ba0c:	0802015c 	.word	0x0802015c
 801ba10:	08020190 	.word	0x08020190
 801ba14:	200003e0 	.word	0x200003e0
 801ba18:	080201b0 	.word	0x080201b0
 801ba1c:	2000037c 	.word	0x2000037c
 801ba20:	080201d8 	.word	0x080201d8
 801ba24:	20000ba4 	.word	0x20000ba4
 801ba28:	08020200 	.word	0x08020200
 801ba2c:	08020214 	.word	0x08020214
 801ba30:	08020240 	.word	0x08020240
	        }
	    }
	    printf("Data Match on iteration %u.\n", i + 1);
 801ba34:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801ba38:	3301      	adds	r3, #1
 801ba3a:	4619      	mov	r1, r3
 801ba3c:	481c      	ldr	r0, [pc, #112]	@ (801bab0 <spi_testing+0x3f0>)
 801ba3e:	f000 fc11 	bl	801c264 <iprintf>

        osDelay(10);
 801ba42:	200a      	movs	r0, #10
 801ba44:	f7f1 f84c 	bl	800cae0 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801ba48:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801ba4c:	3301      	adds	r3, #1
 801ba4e:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801ba52:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ba56:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	795b      	ldrb	r3, [r3, #5]
 801ba5e:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 801ba62:	429a      	cmp	r2, r3
 801ba64:	f4ff ae91 	bcc.w	801b78a <spi_testing+0xca>
	}
    response.test_result = TEST_PASS;
 801ba68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ba6c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801ba70:	2201      	movs	r2, #1
 801ba72:	809a      	strh	r2, [r3, #4]
    vPortFree(command);
 801ba74:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ba78:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ba7c:	6818      	ldr	r0, [r3, #0]
 801ba7e:	f7f4 feb1 	bl	80107e4 <vPortFree>
    return response;
 801ba82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ba86:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801ba8a:	6819      	ldr	r1, [r3, #0]
 801ba8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ba90:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801ba94:	460b      	mov	r3, r1
 801ba96:	6810      	ldr	r0, [r2, #0]
 801ba98:	6018      	str	r0, [r3, #0]
 801ba9a:	8892      	ldrh	r2, [r2, #4]
 801ba9c:	809a      	strh	r2, [r3, #4]
}
 801ba9e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801baa2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801baa6:	6818      	ldr	r0, [r3, #0]
 801baa8:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 801baac:	46bd      	mov	sp, r7
 801baae:	bd80      	pop	{r7, pc}
 801bab0:	08020260 	.word	0x08020260

0801bab4 <HAL_SPI_RxCpltCallback>:
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

// Correct callback for the Slave Receive
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 801bab4:	b580      	push	{r7, lr}
 801bab6:	b084      	sub	sp, #16
 801bab8:	af00      	add	r7, sp, #0
 801baba:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801babc:	2300      	movs	r3, #0
 801babe:	60fb      	str	r3, [r7, #12]
    if (hspi->Instance == SPI_RECEIVER->Instance) {
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	681a      	ldr	r2, [r3, #0]
 801bac4:	4b0e      	ldr	r3, [pc, #56]	@ (801bb00 <HAL_SPI_RxCpltCallback+0x4c>)
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	429a      	cmp	r2, r3
 801baca:	d10a      	bne.n	801bae2 <HAL_SPI_RxCpltCallback+0x2e>
        xSemaphoreGiveFromISR(SpiRxHandle, &xHigherPriorityTaskWoken);
 801bacc:	4b0d      	ldr	r3, [pc, #52]	@ (801bb04 <HAL_SPI_RxCpltCallback+0x50>)
 801bace:	681b      	ldr	r3, [r3, #0]
 801bad0:	f107 020c 	add.w	r2, r7, #12
 801bad4:	4611      	mov	r1, r2
 801bad6:	4618      	mov	r0, r3
 801bad8:	f7f2 f95f 	bl	800dd9a <xQueueGiveFromISR>
        printf("Slave Rx callback fired and gave a semaphore\n");
 801badc:	480a      	ldr	r0, [pc, #40]	@ (801bb08 <HAL_SPI_RxCpltCallback+0x54>)
 801bade:	f000 fc29 	bl	801c334 <puts>
    }
//    if (hspi->Instance == SPI_SENDER->Instance) {
//        xSemaphoreGiveFromISR(SpiTxHandle, &xHigherPriorityTaskWoken);
//        printf("Master TxRx callback fired\n");
//    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d007      	beq.n	801baf8 <HAL_SPI_RxCpltCallback+0x44>
 801bae8:	4b08      	ldr	r3, [pc, #32]	@ (801bb0c <HAL_SPI_RxCpltCallback+0x58>)
 801baea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801baee:	601a      	str	r2, [r3, #0]
 801baf0:	f3bf 8f4f 	dsb	sy
 801baf4:	f3bf 8f6f 	isb	sy
}
 801baf8:	bf00      	nop
 801bafa:	3710      	adds	r7, #16
 801bafc:	46bd      	mov	sp, r7
 801bafe:	bd80      	pop	{r7, pc}
 801bb00:	200003e0 	.word	0x200003e0
 801bb04:	20000ba4 	.word	0x20000ba4
 801bb08:	080202b0 	.word	0x080202b0
 801bb0c:	e000ed04 	.word	0xe000ed04

0801bb10 <uart_testing>:
#include "uarts.h"

#define UART_SENDER 		(&huart2)
#define UART_RECEIVER 		(&huart4)

result_pro_t uart_testing(test_command_t* command){
 801bb10:	b580      	push	{r7, lr}
 801bb12:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801bb16:	af00      	add	r7, sp, #0
 801bb18:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bb1c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801bb20:	6018      	str	r0, [r3, #0]
 801bb22:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bb26:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bb2a:	6019      	str	r1, [r3, #0]


	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801bb2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bb30:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801bb34:	4618      	mov	r0, r3
 801bb36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801bb3a:	461a      	mov	r2, r3
 801bb3c:	2100      	movs	r1, #0
 801bb3e:	f000 fce9 	bl	801c514 <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801bb42:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bb46:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801bb4a:	4618      	mov	r0, r3
 801bb4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801bb50:	461a      	mov	r2, r3
 801bb52:	2100      	movs	r1, #0
 801bb54:	f000 fcde 	bl	801c514 <memset>

	result_pro_t response;
	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 801bb58:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bb5c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d118      	bne.n	801bb98 <uart_testing+0x88>
        printf("UART_TEST: Received NULL command pointer. Skipping.\n");
 801bb66:	48b9      	ldr	r0, [pc, #740]	@ (801be4c <uart_testing+0x33c>)
 801bb68:	f000 fbe4 	bl	801c334 <puts>
        response.test_result = TEST_ERR;
 801bb6c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bb70:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801bb74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bb78:	809a      	strh	r2, [r3, #4]
        return response;
 801bb7a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bb7e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801bb82:	6819      	ldr	r1, [r3, #0]
 801bb84:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bb88:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801bb8c:	460b      	mov	r3, r1
 801bb8e:	6810      	ldr	r0, [r2, #0]
 801bb90:	6018      	str	r0, [r3, #0]
 801bb92:	8892      	ldrh	r2, [r2, #4]
 801bb94:	809a      	strh	r2, [r3, #4]
 801bb96:	e1f7      	b.n	801bf88 <uart_testing+0x478>
	}

	response.test_id = command->test_id;
 801bb98:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bb9c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bba0:	681b      	ldr	r3, [r3, #0]
 801bba2:	681a      	ldr	r2, [r3, #0]
 801bba4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bba8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801bbac:	601a      	str	r2, [r3, #0]
	// Copy pattern to TX buffer
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801bbae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bbb2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bbb6:	681b      	ldr	r3, [r3, #0]
 801bbb8:	1dd9      	adds	r1, r3, #7
 801bbba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bbbe:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	799b      	ldrb	r3, [r3, #6]
 801bbc6:	461a      	mov	r2, r3
 801bbc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801bbcc:	4618      	mov	r0, r3
 801bbce:	f000 fd74 	bl	801c6ba <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801bbd2:	2300      	movs	r3, #0
 801bbd4:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801bbd8:	e1b0      	b.n	801bf3c <uart_testing+0x42c>
	    printf("UART_TEST: Iteration %u/%u -\n", i + 1, command->iterations);
 801bbda:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801bbde:	1c59      	adds	r1, r3, #1
 801bbe0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bbe4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	795b      	ldrb	r3, [r3, #5]
 801bbec:	461a      	mov	r2, r3
 801bbee:	4898      	ldr	r0, [pc, #608]	@ (801be50 <uart_testing+0x340>)
 801bbf0:	f000 fb38 	bl	801c264 <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801bbf4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bbf8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	799b      	ldrb	r3, [r3, #6]
 801bc00:	461a      	mov	r2, r3
 801bc02:	f107 0310 	add.w	r3, r7, #16
 801bc06:	2100      	movs	r1, #0
 801bc08:	4618      	mov	r0, r3
 801bc0a:	f000 fc83 	bl	801c514 <memset>

	    // --- 1. START RECEIVE DMA ---
	    HAL_StatusTypeDef rx_status = HAL_UART_Receive_DMA(UART_RECEIVER, rx_buffer, command->bit_pattern_length);
 801bc0e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bc12:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	799b      	ldrb	r3, [r3, #6]
 801bc1a:	461a      	mov	r2, r3
 801bc1c:	f107 0310 	add.w	r3, r7, #16
 801bc20:	4619      	mov	r1, r3
 801bc22:	488c      	ldr	r0, [pc, #560]	@ (801be54 <uart_testing+0x344>)
 801bc24:	f7ee fa26 	bl	800a074 <HAL_UART_Receive_DMA>
 801bc28:	4603      	mov	r3, r0
 801bc2a:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	    if (rx_status != HAL_OK) {
 801bc2e:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d021      	beq.n	801bc7a <uart_testing+0x16a>
	        printf("Failed to start receive DMA: %d\n", rx_status);
 801bc36:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801bc3a:	4619      	mov	r1, r3
 801bc3c:	4886      	ldr	r0, [pc, #536]	@ (801be58 <uart_testing+0x348>)
 801bc3e:	f000 fb11 	bl	801c264 <iprintf>
	        response.test_result = TEST_FAIL;
 801bc42:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bc46:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801bc4a:	22ff      	movs	r2, #255	@ 0xff
 801bc4c:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801bc4e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bc52:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bc56:	6818      	ldr	r0, [r3, #0]
 801bc58:	f7f4 fdc4 	bl	80107e4 <vPortFree>
	        return response;
 801bc5c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bc60:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801bc64:	6819      	ldr	r1, [r3, #0]
 801bc66:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bc6a:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801bc6e:	460b      	mov	r3, r1
 801bc70:	6810      	ldr	r0, [r2, #0]
 801bc72:	6018      	str	r0, [r3, #0]
 801bc74:	8892      	ldrh	r2, [r2, #4]
 801bc76:	809a      	strh	r2, [r3, #4]
 801bc78:	e186      	b.n	801bf88 <uart_testing+0x478>
	    }

	    // --- 2. TRANSMIT a block of data via DMA ---
	    HAL_StatusTypeDef tx_status = HAL_UART_Transmit_DMA(UART_SENDER, tx_buffer, command->bit_pattern_length);
 801bc7a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bc7e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	799b      	ldrb	r3, [r3, #6]
 801bc86:	461a      	mov	r2, r3
 801bc88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801bc8c:	4619      	mov	r1, r3
 801bc8e:	4873      	ldr	r0, [pc, #460]	@ (801be5c <uart_testing+0x34c>)
 801bc90:	f7ee f974 	bl	8009f7c <HAL_UART_Transmit_DMA>
 801bc94:	4603      	mov	r3, r0
 801bc96:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	    if (tx_status != HAL_OK) {
 801bc9a:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d024      	beq.n	801bcec <uart_testing+0x1dc>
	        printf("Failed to send DMA on UART sender: %d\n", tx_status);
 801bca2:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801bca6:	4619      	mov	r1, r3
 801bca8:	486d      	ldr	r0, [pc, #436]	@ (801be60 <uart_testing+0x350>)
 801bcaa:	f000 fadb 	bl	801c264 <iprintf>
	        response.test_result = TEST_FAIL;
 801bcae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bcb2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801bcb6:	22ff      	movs	r2, #255	@ 0xff
 801bcb8:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801bcba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bcbe:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bcc2:	6818      	ldr	r0, [r3, #0]
 801bcc4:	f7f4 fd8e 	bl	80107e4 <vPortFree>
	        HAL_UART_DMAStop(UART_RECEIVER); // Stop the pending receive
 801bcc8:	4862      	ldr	r0, [pc, #392]	@ (801be54 <uart_testing+0x344>)
 801bcca:	f7ee fa17 	bl	800a0fc <HAL_UART_DMAStop>
	        return response;
 801bcce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bcd2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801bcd6:	6819      	ldr	r1, [r3, #0]
 801bcd8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bcdc:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801bce0:	460b      	mov	r3, r1
 801bce2:	6810      	ldr	r0, [r2, #0]
 801bce4:	6018      	str	r0, [r3, #0]
 801bce6:	8892      	ldrh	r2, [r2, #4]
 801bce8:	809a      	strh	r2, [r3, #4]
 801bcea:	e14d      	b.n	801bf88 <uart_testing+0x478>
	    }

	    // --- 3. WAIT FOR BOTH TX AND RX DMA COMPLETION ---
	    if (xSemaphoreTake(UartTxHandle, TIMEOUT) != pdPASS) {
 801bcec:	4b5d      	ldr	r3, [pc, #372]	@ (801be64 <uart_testing+0x354>)
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801bcf4:	4618      	mov	r0, r3
 801bcf6:	f7f2 f9d1 	bl	800e09c <xQueueSemaphoreTake>
 801bcfa:	4603      	mov	r3, r0
 801bcfc:	2b01      	cmp	r3, #1
 801bcfe:	d021      	beq.n	801bd44 <uart_testing+0x234>
	         printf("fail to get TxSemaphore\n");
 801bd00:	4859      	ldr	r0, [pc, #356]	@ (801be68 <uart_testing+0x358>)
 801bd02:	f000 fb17 	bl	801c334 <puts>
	         response.test_result = TEST_FAIL;
 801bd06:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bd0a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801bd0e:	22ff      	movs	r2, #255	@ 0xff
 801bd10:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 801bd12:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bd16:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bd1a:	6818      	ldr	r0, [r3, #0]
 801bd1c:	f7f4 fd62 	bl	80107e4 <vPortFree>
	         HAL_UART_DMAStop(UART_RECEIVER); // Stop the pending receive
 801bd20:	484c      	ldr	r0, [pc, #304]	@ (801be54 <uart_testing+0x344>)
 801bd22:	f7ee f9eb 	bl	800a0fc <HAL_UART_DMAStop>
	         return response;
 801bd26:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bd2a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801bd2e:	6819      	ldr	r1, [r3, #0]
 801bd30:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bd34:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801bd38:	460b      	mov	r3, r1
 801bd3a:	6810      	ldr	r0, [r2, #0]
 801bd3c:	6018      	str	r0, [r3, #0]
 801bd3e:	8892      	ldrh	r2, [r2, #4]
 801bd40:	809a      	strh	r2, [r3, #4]
 801bd42:	e121      	b.n	801bf88 <uart_testing+0x478>
	    }

	    if (xSemaphoreTake(UartRxHandle, TIMEOUT) != pdPASS) {
 801bd44:	4b49      	ldr	r3, [pc, #292]	@ (801be6c <uart_testing+0x35c>)
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801bd4c:	4618      	mov	r0, r3
 801bd4e:	f7f2 f9a5 	bl	800e09c <xQueueSemaphoreTake>
 801bd52:	4603      	mov	r3, r0
 801bd54:	2b01      	cmp	r3, #1
 801bd56:	d021      	beq.n	801bd9c <uart_testing+0x28c>
	         printf("fail to get RxSemaphore\n");
 801bd58:	4845      	ldr	r0, [pc, #276]	@ (801be70 <uart_testing+0x360>)
 801bd5a:	f000 faeb 	bl	801c334 <puts>
	        response.test_result = TEST_FAIL;
 801bd5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bd62:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801bd66:	22ff      	movs	r2, #255	@ 0xff
 801bd68:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801bd6a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bd6e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bd72:	6818      	ldr	r0, [r3, #0]
 801bd74:	f7f4 fd36 	bl	80107e4 <vPortFree>
	        HAL_UART_DMAStop(UART_RECEIVER); //Stop the stuck receive
 801bd78:	4836      	ldr	r0, [pc, #216]	@ (801be54 <uart_testing+0x344>)
 801bd7a:	f7ee f9bf 	bl	800a0fc <HAL_UART_DMAStop>
	        return response;
 801bd7e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bd82:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801bd86:	6819      	ldr	r1, [r3, #0]
 801bd88:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bd8c:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801bd90:	460b      	mov	r3, r1
 801bd92:	6810      	ldr	r0, [r2, #0]
 801bd94:	6018      	str	r0, [r3, #0]
 801bd96:	8892      	ldrh	r2, [r2, #4]
 801bd98:	809a      	strh	r2, [r3, #4]
 801bd9a:	e0f5      	b.n	801bf88 <uart_testing+0x478>
	    }

	    // --- 4. COMPARE SENT vs. RECEIVED data ---
	    if (command->bit_pattern_length > 100) {
 801bd9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bda0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bda4:	681b      	ldr	r3, [r3, #0]
 801bda6:	799b      	ldrb	r3, [r3, #6]
 801bda8:	2b64      	cmp	r3, #100	@ 0x64
 801bdaa:	d967      	bls.n	801be7c <uart_testing+0x36c>
			printf("bit_pattern_length more than 100\n");
 801bdac:	4831      	ldr	r0, [pc, #196]	@ (801be74 <uart_testing+0x364>)
 801bdae:	f000 fac1 	bl	801c334 <puts>

			// Use CRC comparison for large data
			uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801bdb2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bdb6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bdba:	681b      	ldr	r3, [r3, #0]
 801bdbc:	799b      	ldrb	r3, [r3, #6]
 801bdbe:	461a      	mov	r2, r3
 801bdc0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801bdc4:	4611      	mov	r1, r2
 801bdc6:	4618      	mov	r0, r3
 801bdc8:	f7e5 f91c 	bl	8001004 <calculate_crc>
 801bdcc:	4603      	mov	r3, r0
 801bdce:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
			uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801bdd2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bdd6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	799b      	ldrb	r3, [r3, #6]
 801bdde:	461a      	mov	r2, r3
 801bde0:	f107 0310 	add.w	r3, r7, #16
 801bde4:	4611      	mov	r1, r2
 801bde6:	4618      	mov	r0, r3
 801bde8:	f7e5 f90c 	bl	8001004 <calculate_crc>
 801bdec:	4603      	mov	r3, r0
 801bdee:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
			if (sent_crc != received_crc) {
 801bdf2:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801bdf6:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801bdfa:	429a      	cmp	r2, r3
 801bdfc:	f000 808f 	beq.w	801bf1e <uart_testing+0x40e>
				printf("UART_TEST: CRC mismatch on iteration %u. Sent CRC: 0x%lX, Received CRC: 0x%lX\n",
 801be00:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801be04:	1c59      	adds	r1, r3, #1
 801be06:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801be0a:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801be0e:	481a      	ldr	r0, [pc, #104]	@ (801be78 <uart_testing+0x368>)
 801be10:	f000 fa28 	bl	801c264 <iprintf>
					   i + 1, sent_crc, received_crc);
				response.test_result = TEST_FAIL;
 801be14:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801be18:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801be1c:	22ff      	movs	r2, #255	@ 0xff
 801be1e:	809a      	strh	r2, [r3, #4]
				vPortFree(command);
 801be20:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801be24:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801be28:	6818      	ldr	r0, [r3, #0]
 801be2a:	f7f4 fcdb 	bl	80107e4 <vPortFree>
				return response;
 801be2e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801be32:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801be36:	6819      	ldr	r1, [r3, #0]
 801be38:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801be3c:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801be40:	460b      	mov	r3, r1
 801be42:	6810      	ldr	r0, [r2, #0]
 801be44:	6018      	str	r0, [r3, #0]
 801be46:	8892      	ldrh	r2, [r2, #4]
 801be48:	809a      	strh	r2, [r3, #4]
 801be4a:	e09d      	b.n	801bf88 <uart_testing+0x478>
 801be4c:	080202e0 	.word	0x080202e0
 801be50:	08020314 	.word	0x08020314
 801be54:	20000444 	.word	0x20000444
 801be58:	08020334 	.word	0x08020334
 801be5c:	200004cc 	.word	0x200004cc
 801be60:	08020358 	.word	0x08020358
 801be64:	20000b94 	.word	0x20000b94
 801be68:	08020380 	.word	0x08020380
 801be6c:	20000b90 	.word	0x20000b90
 801be70:	08020398 	.word	0x08020398
 801be74:	080203b0 	.word	0x080203b0
 801be78:	080203d4 	.word	0x080203d4
			}
	    }
	    else {
			int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801be7c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801be80:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	799b      	ldrb	r3, [r3, #6]
 801be88:	461a      	mov	r2, r3
 801be8a:	f107 0110 	add.w	r1, r7, #16
 801be8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801be92:	4618      	mov	r0, r3
 801be94:	f000 fb2e 	bl	801c4f4 <memcmp>
 801be98:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
			if (comp != 0) {
 801be9c:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	d03c      	beq.n	801bf1e <uart_testing+0x40e>
				printf("Data mismatch on iteration %u.\n", i + 1);
 801bea4:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801bea8:	3301      	adds	r3, #1
 801beaa:	4619      	mov	r1, r3
 801beac:	483b      	ldr	r0, [pc, #236]	@ (801bf9c <uart_testing+0x48c>)
 801beae:	f000 f9d9 	bl	801c264 <iprintf>
				printf("Sent: %.*s\n", command->bit_pattern_length, tx_buffer);
 801beb2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801beb6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	799b      	ldrb	r3, [r3, #6]
 801bebe:	4619      	mov	r1, r3
 801bec0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801bec4:	461a      	mov	r2, r3
 801bec6:	4836      	ldr	r0, [pc, #216]	@ (801bfa0 <uart_testing+0x490>)
 801bec8:	f000 f9cc 	bl	801c264 <iprintf>
				printf("Recv: %.*s\n", command->bit_pattern_length, rx_buffer);
 801becc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bed0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	799b      	ldrb	r3, [r3, #6]
 801bed8:	4619      	mov	r1, r3
 801beda:	f107 0310 	add.w	r3, r7, #16
 801bede:	461a      	mov	r2, r3
 801bee0:	4830      	ldr	r0, [pc, #192]	@ (801bfa4 <uart_testing+0x494>)
 801bee2:	f000 f9bf 	bl	801c264 <iprintf>
				response.test_result = TEST_FAIL;
 801bee6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801beea:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801beee:	22ff      	movs	r2, #255	@ 0xff
 801bef0:	809a      	strh	r2, [r3, #4]
				vPortFree(command);
 801bef2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bef6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801befa:	6818      	ldr	r0, [r3, #0]
 801befc:	f7f4 fc72 	bl	80107e4 <vPortFree>
				return response;
 801bf00:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bf04:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801bf08:	6819      	ldr	r1, [r3, #0]
 801bf0a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bf0e:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801bf12:	460b      	mov	r3, r1
 801bf14:	6810      	ldr	r0, [r2, #0]
 801bf16:	6018      	str	r0, [r3, #0]
 801bf18:	8892      	ldrh	r2, [r2, #4]
 801bf1a:	809a      	strh	r2, [r3, #4]
 801bf1c:	e034      	b.n	801bf88 <uart_testing+0x478>
			}
	    }
	    printf("Data Match on iteration %u.\n", i + 1);
 801bf1e:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801bf22:	3301      	adds	r3, #1
 801bf24:	4619      	mov	r1, r3
 801bf26:	4820      	ldr	r0, [pc, #128]	@ (801bfa8 <uart_testing+0x498>)
 801bf28:	f000 f99c 	bl	801c264 <iprintf>

        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 801bf2c:	200a      	movs	r0, #10
 801bf2e:	f7f0 fdd7 	bl	800cae0 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801bf32:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801bf36:	3301      	adds	r3, #1
 801bf38:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801bf3c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bf40:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	795b      	ldrb	r3, [r3, #5]
 801bf48:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 801bf4c:	429a      	cmp	r2, r3
 801bf4e:	f4ff ae44 	bcc.w	801bbda <uart_testing+0xca>
	}
    response.test_result = TEST_PASS;
 801bf52:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bf56:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801bf5a:	2201      	movs	r2, #1
 801bf5c:	809a      	strh	r2, [r3, #4]
    vPortFree(command);
 801bf5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bf62:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801bf66:	6818      	ldr	r0, [r3, #0]
 801bf68:	f7f4 fc3c 	bl	80107e4 <vPortFree>
    return response;
 801bf6c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bf70:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801bf74:	6819      	ldr	r1, [r3, #0]
 801bf76:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bf7a:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801bf7e:	460b      	mov	r3, r1
 801bf80:	6810      	ldr	r0, [r2, #0]
 801bf82:	6018      	str	r0, [r3, #0]
 801bf84:	8892      	ldrh	r2, [r2, #4]
 801bf86:	809a      	strh	r2, [r3, #4]
}
 801bf88:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801bf8c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801bf90:	6818      	ldr	r0, [r3, #0]
 801bf92:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 801bf96:	46bd      	mov	sp, r7
 801bf98:	bd80      	pop	{r7, pc}
 801bf9a:	bf00      	nop
 801bf9c:	08020424 	.word	0x08020424
 801bfa0:	08020444 	.word	0x08020444
 801bfa4:	08020450 	.word	0x08020450
 801bfa8:	0802045c 	.word	0x0802045c

0801bfac <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801bfac:	b580      	push	{r7, lr}
 801bfae:	b084      	sub	sp, #16
 801bfb0:	af00      	add	r7, sp, #0
 801bfb2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801bfb4:	2300      	movs	r3, #0
 801bfb6:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_SENDER->Instance) // Check the instance of your sender UART
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	681a      	ldr	r2, [r3, #0]
 801bfbc:	4b0e      	ldr	r3, [pc, #56]	@ (801bff8 <HAL_UART_TxCpltCallback+0x4c>)
 801bfbe:	681b      	ldr	r3, [r3, #0]
 801bfc0:	429a      	cmp	r2, r3
 801bfc2:	d10a      	bne.n	801bfda <HAL_UART_TxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(UartTxHandle, &xHigherPriorityTaskWoken);
 801bfc4:	4b0d      	ldr	r3, [pc, #52]	@ (801bffc <HAL_UART_TxCpltCallback+0x50>)
 801bfc6:	681b      	ldr	r3, [r3, #0]
 801bfc8:	f107 020c 	add.w	r2, r7, #12
 801bfcc:	4611      	mov	r1, r2
 801bfce:	4618      	mov	r0, r3
 801bfd0:	f7f1 fee3 	bl	800dd9a <xQueueGiveFromISR>
        printf("TX callback fired and freed the semaphore\n");
 801bfd4:	480a      	ldr	r0, [pc, #40]	@ (801c000 <HAL_UART_TxCpltCallback+0x54>)
 801bfd6:	f000 f9ad 	bl	801c334 <puts>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801bfda:	68fb      	ldr	r3, [r7, #12]
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d007      	beq.n	801bff0 <HAL_UART_TxCpltCallback+0x44>
 801bfe0:	4b08      	ldr	r3, [pc, #32]	@ (801c004 <HAL_UART_TxCpltCallback+0x58>)
 801bfe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801bfe6:	601a      	str	r2, [r3, #0]
 801bfe8:	f3bf 8f4f 	dsb	sy
 801bfec:	f3bf 8f6f 	isb	sy

}
 801bff0:	bf00      	nop
 801bff2:	3710      	adds	r7, #16
 801bff4:	46bd      	mov	sp, r7
 801bff6:	bd80      	pop	{r7, pc}
 801bff8:	200004cc 	.word	0x200004cc
 801bffc:	20000b94 	.word	0x20000b94
 801c000:	0802047c 	.word	0x0802047c
 801c004:	e000ed04 	.word	0xe000ed04

0801c008 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801c008:	b580      	push	{r7, lr}
 801c00a:	b084      	sub	sp, #16
 801c00c:	af00      	add	r7, sp, #0
 801c00e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801c010:	2300      	movs	r3, #0
 801c012:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_RECEIVER->Instance) // Check the instance of your receiver UART
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	681a      	ldr	r2, [r3, #0]
 801c018:	4b0e      	ldr	r3, [pc, #56]	@ (801c054 <HAL_UART_RxCpltCallback+0x4c>)
 801c01a:	681b      	ldr	r3, [r3, #0]
 801c01c:	429a      	cmp	r2, r3
 801c01e:	d10a      	bne.n	801c036 <HAL_UART_RxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(UartRxHandle, &xHigherPriorityTaskWoken);
 801c020:	4b0d      	ldr	r3, [pc, #52]	@ (801c058 <HAL_UART_RxCpltCallback+0x50>)
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	f107 020c 	add.w	r2, r7, #12
 801c028:	4611      	mov	r1, r2
 801c02a:	4618      	mov	r0, r3
 801c02c:	f7f1 feb5 	bl	800dd9a <xQueueGiveFromISR>
        printf("RX callback fired and freed the semaphore\n");
 801c030:	480a      	ldr	r0, [pc, #40]	@ (801c05c <HAL_UART_RxCpltCallback+0x54>)
 801c032:	f000 f97f 	bl	801c334 <puts>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	2b00      	cmp	r3, #0
 801c03a:	d007      	beq.n	801c04c <HAL_UART_RxCpltCallback+0x44>
 801c03c:	4b08      	ldr	r3, [pc, #32]	@ (801c060 <HAL_UART_RxCpltCallback+0x58>)
 801c03e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c042:	601a      	str	r2, [r3, #0]
 801c044:	f3bf 8f4f 	dsb	sy
 801c048:	f3bf 8f6f 	isb	sy
}
 801c04c:	bf00      	nop
 801c04e:	3710      	adds	r7, #16
 801c050:	46bd      	mov	sp, r7
 801c052:	bd80      	pop	{r7, pc}
 801c054:	20000444 	.word	0x20000444
 801c058:	20000b90 	.word	0x20000b90
 801c05c:	080204a8 	.word	0x080204a8
 801c060:	e000ed04 	.word	0xe000ed04

0801c064 <rand>:
 801c064:	4b16      	ldr	r3, [pc, #88]	@ (801c0c0 <rand+0x5c>)
 801c066:	b510      	push	{r4, lr}
 801c068:	681c      	ldr	r4, [r3, #0]
 801c06a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c06c:	b9b3      	cbnz	r3, 801c09c <rand+0x38>
 801c06e:	2018      	movs	r0, #24
 801c070:	f000 fb9a 	bl	801c7a8 <malloc>
 801c074:	4602      	mov	r2, r0
 801c076:	6320      	str	r0, [r4, #48]	@ 0x30
 801c078:	b920      	cbnz	r0, 801c084 <rand+0x20>
 801c07a:	4b12      	ldr	r3, [pc, #72]	@ (801c0c4 <rand+0x60>)
 801c07c:	4812      	ldr	r0, [pc, #72]	@ (801c0c8 <rand+0x64>)
 801c07e:	2152      	movs	r1, #82	@ 0x52
 801c080:	f000 fb2a 	bl	801c6d8 <__assert_func>
 801c084:	4911      	ldr	r1, [pc, #68]	@ (801c0cc <rand+0x68>)
 801c086:	4b12      	ldr	r3, [pc, #72]	@ (801c0d0 <rand+0x6c>)
 801c088:	e9c0 1300 	strd	r1, r3, [r0]
 801c08c:	4b11      	ldr	r3, [pc, #68]	@ (801c0d4 <rand+0x70>)
 801c08e:	6083      	str	r3, [r0, #8]
 801c090:	230b      	movs	r3, #11
 801c092:	8183      	strh	r3, [r0, #12]
 801c094:	2100      	movs	r1, #0
 801c096:	2001      	movs	r0, #1
 801c098:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c09c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c09e:	480e      	ldr	r0, [pc, #56]	@ (801c0d8 <rand+0x74>)
 801c0a0:	690b      	ldr	r3, [r1, #16]
 801c0a2:	694c      	ldr	r4, [r1, #20]
 801c0a4:	4a0d      	ldr	r2, [pc, #52]	@ (801c0dc <rand+0x78>)
 801c0a6:	4358      	muls	r0, r3
 801c0a8:	fb02 0004 	mla	r0, r2, r4, r0
 801c0ac:	fba3 3202 	umull	r3, r2, r3, r2
 801c0b0:	3301      	adds	r3, #1
 801c0b2:	eb40 0002 	adc.w	r0, r0, r2
 801c0b6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c0ba:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801c0be:	bd10      	pop	{r4, pc}
 801c0c0:	2000003c 	.word	0x2000003c
 801c0c4:	0802072a 	.word	0x0802072a
 801c0c8:	08020741 	.word	0x08020741
 801c0cc:	abcd330e 	.word	0xabcd330e
 801c0d0:	e66d1234 	.word	0xe66d1234
 801c0d4:	0005deec 	.word	0x0005deec
 801c0d8:	5851f42d 	.word	0x5851f42d
 801c0dc:	4c957f2d 	.word	0x4c957f2d

0801c0e0 <std>:
 801c0e0:	2300      	movs	r3, #0
 801c0e2:	b510      	push	{r4, lr}
 801c0e4:	4604      	mov	r4, r0
 801c0e6:	e9c0 3300 	strd	r3, r3, [r0]
 801c0ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c0ee:	6083      	str	r3, [r0, #8]
 801c0f0:	8181      	strh	r1, [r0, #12]
 801c0f2:	6643      	str	r3, [r0, #100]	@ 0x64
 801c0f4:	81c2      	strh	r2, [r0, #14]
 801c0f6:	6183      	str	r3, [r0, #24]
 801c0f8:	4619      	mov	r1, r3
 801c0fa:	2208      	movs	r2, #8
 801c0fc:	305c      	adds	r0, #92	@ 0x5c
 801c0fe:	f000 fa09 	bl	801c514 <memset>
 801c102:	4b0d      	ldr	r3, [pc, #52]	@ (801c138 <std+0x58>)
 801c104:	6263      	str	r3, [r4, #36]	@ 0x24
 801c106:	4b0d      	ldr	r3, [pc, #52]	@ (801c13c <std+0x5c>)
 801c108:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c10a:	4b0d      	ldr	r3, [pc, #52]	@ (801c140 <std+0x60>)
 801c10c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c10e:	4b0d      	ldr	r3, [pc, #52]	@ (801c144 <std+0x64>)
 801c110:	6323      	str	r3, [r4, #48]	@ 0x30
 801c112:	4b0d      	ldr	r3, [pc, #52]	@ (801c148 <std+0x68>)
 801c114:	6224      	str	r4, [r4, #32]
 801c116:	429c      	cmp	r4, r3
 801c118:	d006      	beq.n	801c128 <std+0x48>
 801c11a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c11e:	4294      	cmp	r4, r2
 801c120:	d002      	beq.n	801c128 <std+0x48>
 801c122:	33d0      	adds	r3, #208	@ 0xd0
 801c124:	429c      	cmp	r4, r3
 801c126:	d105      	bne.n	801c134 <std+0x54>
 801c128:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c130:	f000 bac0 	b.w	801c6b4 <__retarget_lock_init_recursive>
 801c134:	bd10      	pop	{r4, pc}
 801c136:	bf00      	nop
 801c138:	0801c345 	.word	0x0801c345
 801c13c:	0801c367 	.word	0x0801c367
 801c140:	0801c39f 	.word	0x0801c39f
 801c144:	0801c3c3 	.word	0x0801c3c3
 801c148:	200276ec 	.word	0x200276ec

0801c14c <stdio_exit_handler>:
 801c14c:	4a02      	ldr	r2, [pc, #8]	@ (801c158 <stdio_exit_handler+0xc>)
 801c14e:	4903      	ldr	r1, [pc, #12]	@ (801c15c <stdio_exit_handler+0x10>)
 801c150:	4803      	ldr	r0, [pc, #12]	@ (801c160 <stdio_exit_handler+0x14>)
 801c152:	f000 b869 	b.w	801c228 <_fwalk_sglue>
 801c156:	bf00      	nop
 801c158:	20000030 	.word	0x20000030
 801c15c:	0801cfb9 	.word	0x0801cfb9
 801c160:	20000040 	.word	0x20000040

0801c164 <cleanup_stdio>:
 801c164:	6841      	ldr	r1, [r0, #4]
 801c166:	4b0c      	ldr	r3, [pc, #48]	@ (801c198 <cleanup_stdio+0x34>)
 801c168:	4299      	cmp	r1, r3
 801c16a:	b510      	push	{r4, lr}
 801c16c:	4604      	mov	r4, r0
 801c16e:	d001      	beq.n	801c174 <cleanup_stdio+0x10>
 801c170:	f000 ff22 	bl	801cfb8 <_fflush_r>
 801c174:	68a1      	ldr	r1, [r4, #8]
 801c176:	4b09      	ldr	r3, [pc, #36]	@ (801c19c <cleanup_stdio+0x38>)
 801c178:	4299      	cmp	r1, r3
 801c17a:	d002      	beq.n	801c182 <cleanup_stdio+0x1e>
 801c17c:	4620      	mov	r0, r4
 801c17e:	f000 ff1b 	bl	801cfb8 <_fflush_r>
 801c182:	68e1      	ldr	r1, [r4, #12]
 801c184:	4b06      	ldr	r3, [pc, #24]	@ (801c1a0 <cleanup_stdio+0x3c>)
 801c186:	4299      	cmp	r1, r3
 801c188:	d004      	beq.n	801c194 <cleanup_stdio+0x30>
 801c18a:	4620      	mov	r0, r4
 801c18c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c190:	f000 bf12 	b.w	801cfb8 <_fflush_r>
 801c194:	bd10      	pop	{r4, pc}
 801c196:	bf00      	nop
 801c198:	200276ec 	.word	0x200276ec
 801c19c:	20027754 	.word	0x20027754
 801c1a0:	200277bc 	.word	0x200277bc

0801c1a4 <global_stdio_init.part.0>:
 801c1a4:	b510      	push	{r4, lr}
 801c1a6:	4b0b      	ldr	r3, [pc, #44]	@ (801c1d4 <global_stdio_init.part.0+0x30>)
 801c1a8:	4c0b      	ldr	r4, [pc, #44]	@ (801c1d8 <global_stdio_init.part.0+0x34>)
 801c1aa:	4a0c      	ldr	r2, [pc, #48]	@ (801c1dc <global_stdio_init.part.0+0x38>)
 801c1ac:	601a      	str	r2, [r3, #0]
 801c1ae:	4620      	mov	r0, r4
 801c1b0:	2200      	movs	r2, #0
 801c1b2:	2104      	movs	r1, #4
 801c1b4:	f7ff ff94 	bl	801c0e0 <std>
 801c1b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c1bc:	2201      	movs	r2, #1
 801c1be:	2109      	movs	r1, #9
 801c1c0:	f7ff ff8e 	bl	801c0e0 <std>
 801c1c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c1c8:	2202      	movs	r2, #2
 801c1ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c1ce:	2112      	movs	r1, #18
 801c1d0:	f7ff bf86 	b.w	801c0e0 <std>
 801c1d4:	20027824 	.word	0x20027824
 801c1d8:	200276ec 	.word	0x200276ec
 801c1dc:	0801c14d 	.word	0x0801c14d

0801c1e0 <__sfp_lock_acquire>:
 801c1e0:	4801      	ldr	r0, [pc, #4]	@ (801c1e8 <__sfp_lock_acquire+0x8>)
 801c1e2:	f000 ba68 	b.w	801c6b6 <__retarget_lock_acquire_recursive>
 801c1e6:	bf00      	nop
 801c1e8:	2002782d 	.word	0x2002782d

0801c1ec <__sfp_lock_release>:
 801c1ec:	4801      	ldr	r0, [pc, #4]	@ (801c1f4 <__sfp_lock_release+0x8>)
 801c1ee:	f000 ba63 	b.w	801c6b8 <__retarget_lock_release_recursive>
 801c1f2:	bf00      	nop
 801c1f4:	2002782d 	.word	0x2002782d

0801c1f8 <__sinit>:
 801c1f8:	b510      	push	{r4, lr}
 801c1fa:	4604      	mov	r4, r0
 801c1fc:	f7ff fff0 	bl	801c1e0 <__sfp_lock_acquire>
 801c200:	6a23      	ldr	r3, [r4, #32]
 801c202:	b11b      	cbz	r3, 801c20c <__sinit+0x14>
 801c204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c208:	f7ff bff0 	b.w	801c1ec <__sfp_lock_release>
 801c20c:	4b04      	ldr	r3, [pc, #16]	@ (801c220 <__sinit+0x28>)
 801c20e:	6223      	str	r3, [r4, #32]
 801c210:	4b04      	ldr	r3, [pc, #16]	@ (801c224 <__sinit+0x2c>)
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	2b00      	cmp	r3, #0
 801c216:	d1f5      	bne.n	801c204 <__sinit+0xc>
 801c218:	f7ff ffc4 	bl	801c1a4 <global_stdio_init.part.0>
 801c21c:	e7f2      	b.n	801c204 <__sinit+0xc>
 801c21e:	bf00      	nop
 801c220:	0801c165 	.word	0x0801c165
 801c224:	20027824 	.word	0x20027824

0801c228 <_fwalk_sglue>:
 801c228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c22c:	4607      	mov	r7, r0
 801c22e:	4688      	mov	r8, r1
 801c230:	4614      	mov	r4, r2
 801c232:	2600      	movs	r6, #0
 801c234:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c238:	f1b9 0901 	subs.w	r9, r9, #1
 801c23c:	d505      	bpl.n	801c24a <_fwalk_sglue+0x22>
 801c23e:	6824      	ldr	r4, [r4, #0]
 801c240:	2c00      	cmp	r4, #0
 801c242:	d1f7      	bne.n	801c234 <_fwalk_sglue+0xc>
 801c244:	4630      	mov	r0, r6
 801c246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c24a:	89ab      	ldrh	r3, [r5, #12]
 801c24c:	2b01      	cmp	r3, #1
 801c24e:	d907      	bls.n	801c260 <_fwalk_sglue+0x38>
 801c250:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c254:	3301      	adds	r3, #1
 801c256:	d003      	beq.n	801c260 <_fwalk_sglue+0x38>
 801c258:	4629      	mov	r1, r5
 801c25a:	4638      	mov	r0, r7
 801c25c:	47c0      	blx	r8
 801c25e:	4306      	orrs	r6, r0
 801c260:	3568      	adds	r5, #104	@ 0x68
 801c262:	e7e9      	b.n	801c238 <_fwalk_sglue+0x10>

0801c264 <iprintf>:
 801c264:	b40f      	push	{r0, r1, r2, r3}
 801c266:	b507      	push	{r0, r1, r2, lr}
 801c268:	4906      	ldr	r1, [pc, #24]	@ (801c284 <iprintf+0x20>)
 801c26a:	ab04      	add	r3, sp, #16
 801c26c:	6808      	ldr	r0, [r1, #0]
 801c26e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c272:	6881      	ldr	r1, [r0, #8]
 801c274:	9301      	str	r3, [sp, #4]
 801c276:	f000 fb77 	bl	801c968 <_vfiprintf_r>
 801c27a:	b003      	add	sp, #12
 801c27c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c280:	b004      	add	sp, #16
 801c282:	4770      	bx	lr
 801c284:	2000003c 	.word	0x2000003c

0801c288 <_puts_r>:
 801c288:	6a03      	ldr	r3, [r0, #32]
 801c28a:	b570      	push	{r4, r5, r6, lr}
 801c28c:	6884      	ldr	r4, [r0, #8]
 801c28e:	4605      	mov	r5, r0
 801c290:	460e      	mov	r6, r1
 801c292:	b90b      	cbnz	r3, 801c298 <_puts_r+0x10>
 801c294:	f7ff ffb0 	bl	801c1f8 <__sinit>
 801c298:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c29a:	07db      	lsls	r3, r3, #31
 801c29c:	d405      	bmi.n	801c2aa <_puts_r+0x22>
 801c29e:	89a3      	ldrh	r3, [r4, #12]
 801c2a0:	0598      	lsls	r0, r3, #22
 801c2a2:	d402      	bmi.n	801c2aa <_puts_r+0x22>
 801c2a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c2a6:	f000 fa06 	bl	801c6b6 <__retarget_lock_acquire_recursive>
 801c2aa:	89a3      	ldrh	r3, [r4, #12]
 801c2ac:	0719      	lsls	r1, r3, #28
 801c2ae:	d502      	bpl.n	801c2b6 <_puts_r+0x2e>
 801c2b0:	6923      	ldr	r3, [r4, #16]
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d135      	bne.n	801c322 <_puts_r+0x9a>
 801c2b6:	4621      	mov	r1, r4
 801c2b8:	4628      	mov	r0, r5
 801c2ba:	f000 f8c5 	bl	801c448 <__swsetup_r>
 801c2be:	b380      	cbz	r0, 801c322 <_puts_r+0x9a>
 801c2c0:	f04f 35ff 	mov.w	r5, #4294967295
 801c2c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c2c6:	07da      	lsls	r2, r3, #31
 801c2c8:	d405      	bmi.n	801c2d6 <_puts_r+0x4e>
 801c2ca:	89a3      	ldrh	r3, [r4, #12]
 801c2cc:	059b      	lsls	r3, r3, #22
 801c2ce:	d402      	bmi.n	801c2d6 <_puts_r+0x4e>
 801c2d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c2d2:	f000 f9f1 	bl	801c6b8 <__retarget_lock_release_recursive>
 801c2d6:	4628      	mov	r0, r5
 801c2d8:	bd70      	pop	{r4, r5, r6, pc}
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	da04      	bge.n	801c2e8 <_puts_r+0x60>
 801c2de:	69a2      	ldr	r2, [r4, #24]
 801c2e0:	429a      	cmp	r2, r3
 801c2e2:	dc17      	bgt.n	801c314 <_puts_r+0x8c>
 801c2e4:	290a      	cmp	r1, #10
 801c2e6:	d015      	beq.n	801c314 <_puts_r+0x8c>
 801c2e8:	6823      	ldr	r3, [r4, #0]
 801c2ea:	1c5a      	adds	r2, r3, #1
 801c2ec:	6022      	str	r2, [r4, #0]
 801c2ee:	7019      	strb	r1, [r3, #0]
 801c2f0:	68a3      	ldr	r3, [r4, #8]
 801c2f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c2f6:	3b01      	subs	r3, #1
 801c2f8:	60a3      	str	r3, [r4, #8]
 801c2fa:	2900      	cmp	r1, #0
 801c2fc:	d1ed      	bne.n	801c2da <_puts_r+0x52>
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	da11      	bge.n	801c326 <_puts_r+0x9e>
 801c302:	4622      	mov	r2, r4
 801c304:	210a      	movs	r1, #10
 801c306:	4628      	mov	r0, r5
 801c308:	f000 f85f 	bl	801c3ca <__swbuf_r>
 801c30c:	3001      	adds	r0, #1
 801c30e:	d0d7      	beq.n	801c2c0 <_puts_r+0x38>
 801c310:	250a      	movs	r5, #10
 801c312:	e7d7      	b.n	801c2c4 <_puts_r+0x3c>
 801c314:	4622      	mov	r2, r4
 801c316:	4628      	mov	r0, r5
 801c318:	f000 f857 	bl	801c3ca <__swbuf_r>
 801c31c:	3001      	adds	r0, #1
 801c31e:	d1e7      	bne.n	801c2f0 <_puts_r+0x68>
 801c320:	e7ce      	b.n	801c2c0 <_puts_r+0x38>
 801c322:	3e01      	subs	r6, #1
 801c324:	e7e4      	b.n	801c2f0 <_puts_r+0x68>
 801c326:	6823      	ldr	r3, [r4, #0]
 801c328:	1c5a      	adds	r2, r3, #1
 801c32a:	6022      	str	r2, [r4, #0]
 801c32c:	220a      	movs	r2, #10
 801c32e:	701a      	strb	r2, [r3, #0]
 801c330:	e7ee      	b.n	801c310 <_puts_r+0x88>
	...

0801c334 <puts>:
 801c334:	4b02      	ldr	r3, [pc, #8]	@ (801c340 <puts+0xc>)
 801c336:	4601      	mov	r1, r0
 801c338:	6818      	ldr	r0, [r3, #0]
 801c33a:	f7ff bfa5 	b.w	801c288 <_puts_r>
 801c33e:	bf00      	nop
 801c340:	2000003c 	.word	0x2000003c

0801c344 <__sread>:
 801c344:	b510      	push	{r4, lr}
 801c346:	460c      	mov	r4, r1
 801c348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c34c:	f000 f96a 	bl	801c624 <_read_r>
 801c350:	2800      	cmp	r0, #0
 801c352:	bfab      	itete	ge
 801c354:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c356:	89a3      	ldrhlt	r3, [r4, #12]
 801c358:	181b      	addge	r3, r3, r0
 801c35a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c35e:	bfac      	ite	ge
 801c360:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c362:	81a3      	strhlt	r3, [r4, #12]
 801c364:	bd10      	pop	{r4, pc}

0801c366 <__swrite>:
 801c366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c36a:	461f      	mov	r7, r3
 801c36c:	898b      	ldrh	r3, [r1, #12]
 801c36e:	05db      	lsls	r3, r3, #23
 801c370:	4605      	mov	r5, r0
 801c372:	460c      	mov	r4, r1
 801c374:	4616      	mov	r6, r2
 801c376:	d505      	bpl.n	801c384 <__swrite+0x1e>
 801c378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c37c:	2302      	movs	r3, #2
 801c37e:	2200      	movs	r2, #0
 801c380:	f000 f93e 	bl	801c600 <_lseek_r>
 801c384:	89a3      	ldrh	r3, [r4, #12]
 801c386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c38a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c38e:	81a3      	strh	r3, [r4, #12]
 801c390:	4632      	mov	r2, r6
 801c392:	463b      	mov	r3, r7
 801c394:	4628      	mov	r0, r5
 801c396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c39a:	f000 b955 	b.w	801c648 <_write_r>

0801c39e <__sseek>:
 801c39e:	b510      	push	{r4, lr}
 801c3a0:	460c      	mov	r4, r1
 801c3a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c3a6:	f000 f92b 	bl	801c600 <_lseek_r>
 801c3aa:	1c43      	adds	r3, r0, #1
 801c3ac:	89a3      	ldrh	r3, [r4, #12]
 801c3ae:	bf15      	itete	ne
 801c3b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c3b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c3b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c3ba:	81a3      	strheq	r3, [r4, #12]
 801c3bc:	bf18      	it	ne
 801c3be:	81a3      	strhne	r3, [r4, #12]
 801c3c0:	bd10      	pop	{r4, pc}

0801c3c2 <__sclose>:
 801c3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c3c6:	f000 b8ad 	b.w	801c524 <_close_r>

0801c3ca <__swbuf_r>:
 801c3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3cc:	460e      	mov	r6, r1
 801c3ce:	4614      	mov	r4, r2
 801c3d0:	4605      	mov	r5, r0
 801c3d2:	b118      	cbz	r0, 801c3dc <__swbuf_r+0x12>
 801c3d4:	6a03      	ldr	r3, [r0, #32]
 801c3d6:	b90b      	cbnz	r3, 801c3dc <__swbuf_r+0x12>
 801c3d8:	f7ff ff0e 	bl	801c1f8 <__sinit>
 801c3dc:	69a3      	ldr	r3, [r4, #24]
 801c3de:	60a3      	str	r3, [r4, #8]
 801c3e0:	89a3      	ldrh	r3, [r4, #12]
 801c3e2:	071a      	lsls	r2, r3, #28
 801c3e4:	d501      	bpl.n	801c3ea <__swbuf_r+0x20>
 801c3e6:	6923      	ldr	r3, [r4, #16]
 801c3e8:	b943      	cbnz	r3, 801c3fc <__swbuf_r+0x32>
 801c3ea:	4621      	mov	r1, r4
 801c3ec:	4628      	mov	r0, r5
 801c3ee:	f000 f82b 	bl	801c448 <__swsetup_r>
 801c3f2:	b118      	cbz	r0, 801c3fc <__swbuf_r+0x32>
 801c3f4:	f04f 37ff 	mov.w	r7, #4294967295
 801c3f8:	4638      	mov	r0, r7
 801c3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3fc:	6823      	ldr	r3, [r4, #0]
 801c3fe:	6922      	ldr	r2, [r4, #16]
 801c400:	1a98      	subs	r0, r3, r2
 801c402:	6963      	ldr	r3, [r4, #20]
 801c404:	b2f6      	uxtb	r6, r6
 801c406:	4283      	cmp	r3, r0
 801c408:	4637      	mov	r7, r6
 801c40a:	dc05      	bgt.n	801c418 <__swbuf_r+0x4e>
 801c40c:	4621      	mov	r1, r4
 801c40e:	4628      	mov	r0, r5
 801c410:	f000 fdd2 	bl	801cfb8 <_fflush_r>
 801c414:	2800      	cmp	r0, #0
 801c416:	d1ed      	bne.n	801c3f4 <__swbuf_r+0x2a>
 801c418:	68a3      	ldr	r3, [r4, #8]
 801c41a:	3b01      	subs	r3, #1
 801c41c:	60a3      	str	r3, [r4, #8]
 801c41e:	6823      	ldr	r3, [r4, #0]
 801c420:	1c5a      	adds	r2, r3, #1
 801c422:	6022      	str	r2, [r4, #0]
 801c424:	701e      	strb	r6, [r3, #0]
 801c426:	6962      	ldr	r2, [r4, #20]
 801c428:	1c43      	adds	r3, r0, #1
 801c42a:	429a      	cmp	r2, r3
 801c42c:	d004      	beq.n	801c438 <__swbuf_r+0x6e>
 801c42e:	89a3      	ldrh	r3, [r4, #12]
 801c430:	07db      	lsls	r3, r3, #31
 801c432:	d5e1      	bpl.n	801c3f8 <__swbuf_r+0x2e>
 801c434:	2e0a      	cmp	r6, #10
 801c436:	d1df      	bne.n	801c3f8 <__swbuf_r+0x2e>
 801c438:	4621      	mov	r1, r4
 801c43a:	4628      	mov	r0, r5
 801c43c:	f000 fdbc 	bl	801cfb8 <_fflush_r>
 801c440:	2800      	cmp	r0, #0
 801c442:	d0d9      	beq.n	801c3f8 <__swbuf_r+0x2e>
 801c444:	e7d6      	b.n	801c3f4 <__swbuf_r+0x2a>
	...

0801c448 <__swsetup_r>:
 801c448:	b538      	push	{r3, r4, r5, lr}
 801c44a:	4b29      	ldr	r3, [pc, #164]	@ (801c4f0 <__swsetup_r+0xa8>)
 801c44c:	4605      	mov	r5, r0
 801c44e:	6818      	ldr	r0, [r3, #0]
 801c450:	460c      	mov	r4, r1
 801c452:	b118      	cbz	r0, 801c45c <__swsetup_r+0x14>
 801c454:	6a03      	ldr	r3, [r0, #32]
 801c456:	b90b      	cbnz	r3, 801c45c <__swsetup_r+0x14>
 801c458:	f7ff fece 	bl	801c1f8 <__sinit>
 801c45c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c460:	0719      	lsls	r1, r3, #28
 801c462:	d422      	bmi.n	801c4aa <__swsetup_r+0x62>
 801c464:	06da      	lsls	r2, r3, #27
 801c466:	d407      	bmi.n	801c478 <__swsetup_r+0x30>
 801c468:	2209      	movs	r2, #9
 801c46a:	602a      	str	r2, [r5, #0]
 801c46c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c470:	81a3      	strh	r3, [r4, #12]
 801c472:	f04f 30ff 	mov.w	r0, #4294967295
 801c476:	e033      	b.n	801c4e0 <__swsetup_r+0x98>
 801c478:	0758      	lsls	r0, r3, #29
 801c47a:	d512      	bpl.n	801c4a2 <__swsetup_r+0x5a>
 801c47c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c47e:	b141      	cbz	r1, 801c492 <__swsetup_r+0x4a>
 801c480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c484:	4299      	cmp	r1, r3
 801c486:	d002      	beq.n	801c48e <__swsetup_r+0x46>
 801c488:	4628      	mov	r0, r5
 801c48a:	f000 f943 	bl	801c714 <_free_r>
 801c48e:	2300      	movs	r3, #0
 801c490:	6363      	str	r3, [r4, #52]	@ 0x34
 801c492:	89a3      	ldrh	r3, [r4, #12]
 801c494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c498:	81a3      	strh	r3, [r4, #12]
 801c49a:	2300      	movs	r3, #0
 801c49c:	6063      	str	r3, [r4, #4]
 801c49e:	6923      	ldr	r3, [r4, #16]
 801c4a0:	6023      	str	r3, [r4, #0]
 801c4a2:	89a3      	ldrh	r3, [r4, #12]
 801c4a4:	f043 0308 	orr.w	r3, r3, #8
 801c4a8:	81a3      	strh	r3, [r4, #12]
 801c4aa:	6923      	ldr	r3, [r4, #16]
 801c4ac:	b94b      	cbnz	r3, 801c4c2 <__swsetup_r+0x7a>
 801c4ae:	89a3      	ldrh	r3, [r4, #12]
 801c4b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c4b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c4b8:	d003      	beq.n	801c4c2 <__swsetup_r+0x7a>
 801c4ba:	4621      	mov	r1, r4
 801c4bc:	4628      	mov	r0, r5
 801c4be:	f000 fddb 	bl	801d078 <__smakebuf_r>
 801c4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c4c6:	f013 0201 	ands.w	r2, r3, #1
 801c4ca:	d00a      	beq.n	801c4e2 <__swsetup_r+0x9a>
 801c4cc:	2200      	movs	r2, #0
 801c4ce:	60a2      	str	r2, [r4, #8]
 801c4d0:	6962      	ldr	r2, [r4, #20]
 801c4d2:	4252      	negs	r2, r2
 801c4d4:	61a2      	str	r2, [r4, #24]
 801c4d6:	6922      	ldr	r2, [r4, #16]
 801c4d8:	b942      	cbnz	r2, 801c4ec <__swsetup_r+0xa4>
 801c4da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c4de:	d1c5      	bne.n	801c46c <__swsetup_r+0x24>
 801c4e0:	bd38      	pop	{r3, r4, r5, pc}
 801c4e2:	0799      	lsls	r1, r3, #30
 801c4e4:	bf58      	it	pl
 801c4e6:	6962      	ldrpl	r2, [r4, #20]
 801c4e8:	60a2      	str	r2, [r4, #8]
 801c4ea:	e7f4      	b.n	801c4d6 <__swsetup_r+0x8e>
 801c4ec:	2000      	movs	r0, #0
 801c4ee:	e7f7      	b.n	801c4e0 <__swsetup_r+0x98>
 801c4f0:	2000003c 	.word	0x2000003c

0801c4f4 <memcmp>:
 801c4f4:	b510      	push	{r4, lr}
 801c4f6:	3901      	subs	r1, #1
 801c4f8:	4402      	add	r2, r0
 801c4fa:	4290      	cmp	r0, r2
 801c4fc:	d101      	bne.n	801c502 <memcmp+0xe>
 801c4fe:	2000      	movs	r0, #0
 801c500:	e005      	b.n	801c50e <memcmp+0x1a>
 801c502:	7803      	ldrb	r3, [r0, #0]
 801c504:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c508:	42a3      	cmp	r3, r4
 801c50a:	d001      	beq.n	801c510 <memcmp+0x1c>
 801c50c:	1b18      	subs	r0, r3, r4
 801c50e:	bd10      	pop	{r4, pc}
 801c510:	3001      	adds	r0, #1
 801c512:	e7f2      	b.n	801c4fa <memcmp+0x6>

0801c514 <memset>:
 801c514:	4402      	add	r2, r0
 801c516:	4603      	mov	r3, r0
 801c518:	4293      	cmp	r3, r2
 801c51a:	d100      	bne.n	801c51e <memset+0xa>
 801c51c:	4770      	bx	lr
 801c51e:	f803 1b01 	strb.w	r1, [r3], #1
 801c522:	e7f9      	b.n	801c518 <memset+0x4>

0801c524 <_close_r>:
 801c524:	b538      	push	{r3, r4, r5, lr}
 801c526:	4d06      	ldr	r5, [pc, #24]	@ (801c540 <_close_r+0x1c>)
 801c528:	2300      	movs	r3, #0
 801c52a:	4604      	mov	r4, r0
 801c52c:	4608      	mov	r0, r1
 801c52e:	602b      	str	r3, [r5, #0]
 801c530:	f7e5 fcc0 	bl	8001eb4 <_close>
 801c534:	1c43      	adds	r3, r0, #1
 801c536:	d102      	bne.n	801c53e <_close_r+0x1a>
 801c538:	682b      	ldr	r3, [r5, #0]
 801c53a:	b103      	cbz	r3, 801c53e <_close_r+0x1a>
 801c53c:	6023      	str	r3, [r4, #0]
 801c53e:	bd38      	pop	{r3, r4, r5, pc}
 801c540:	20027828 	.word	0x20027828

0801c544 <_reclaim_reent>:
 801c544:	4b2d      	ldr	r3, [pc, #180]	@ (801c5fc <_reclaim_reent+0xb8>)
 801c546:	681b      	ldr	r3, [r3, #0]
 801c548:	4283      	cmp	r3, r0
 801c54a:	b570      	push	{r4, r5, r6, lr}
 801c54c:	4604      	mov	r4, r0
 801c54e:	d053      	beq.n	801c5f8 <_reclaim_reent+0xb4>
 801c550:	69c3      	ldr	r3, [r0, #28]
 801c552:	b31b      	cbz	r3, 801c59c <_reclaim_reent+0x58>
 801c554:	68db      	ldr	r3, [r3, #12]
 801c556:	b163      	cbz	r3, 801c572 <_reclaim_reent+0x2e>
 801c558:	2500      	movs	r5, #0
 801c55a:	69e3      	ldr	r3, [r4, #28]
 801c55c:	68db      	ldr	r3, [r3, #12]
 801c55e:	5959      	ldr	r1, [r3, r5]
 801c560:	b9b1      	cbnz	r1, 801c590 <_reclaim_reent+0x4c>
 801c562:	3504      	adds	r5, #4
 801c564:	2d80      	cmp	r5, #128	@ 0x80
 801c566:	d1f8      	bne.n	801c55a <_reclaim_reent+0x16>
 801c568:	69e3      	ldr	r3, [r4, #28]
 801c56a:	4620      	mov	r0, r4
 801c56c:	68d9      	ldr	r1, [r3, #12]
 801c56e:	f000 f8d1 	bl	801c714 <_free_r>
 801c572:	69e3      	ldr	r3, [r4, #28]
 801c574:	6819      	ldr	r1, [r3, #0]
 801c576:	b111      	cbz	r1, 801c57e <_reclaim_reent+0x3a>
 801c578:	4620      	mov	r0, r4
 801c57a:	f000 f8cb 	bl	801c714 <_free_r>
 801c57e:	69e3      	ldr	r3, [r4, #28]
 801c580:	689d      	ldr	r5, [r3, #8]
 801c582:	b15d      	cbz	r5, 801c59c <_reclaim_reent+0x58>
 801c584:	4629      	mov	r1, r5
 801c586:	4620      	mov	r0, r4
 801c588:	682d      	ldr	r5, [r5, #0]
 801c58a:	f000 f8c3 	bl	801c714 <_free_r>
 801c58e:	e7f8      	b.n	801c582 <_reclaim_reent+0x3e>
 801c590:	680e      	ldr	r6, [r1, #0]
 801c592:	4620      	mov	r0, r4
 801c594:	f000 f8be 	bl	801c714 <_free_r>
 801c598:	4631      	mov	r1, r6
 801c59a:	e7e1      	b.n	801c560 <_reclaim_reent+0x1c>
 801c59c:	6961      	ldr	r1, [r4, #20]
 801c59e:	b111      	cbz	r1, 801c5a6 <_reclaim_reent+0x62>
 801c5a0:	4620      	mov	r0, r4
 801c5a2:	f000 f8b7 	bl	801c714 <_free_r>
 801c5a6:	69e1      	ldr	r1, [r4, #28]
 801c5a8:	b111      	cbz	r1, 801c5b0 <_reclaim_reent+0x6c>
 801c5aa:	4620      	mov	r0, r4
 801c5ac:	f000 f8b2 	bl	801c714 <_free_r>
 801c5b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c5b2:	b111      	cbz	r1, 801c5ba <_reclaim_reent+0x76>
 801c5b4:	4620      	mov	r0, r4
 801c5b6:	f000 f8ad 	bl	801c714 <_free_r>
 801c5ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c5bc:	b111      	cbz	r1, 801c5c4 <_reclaim_reent+0x80>
 801c5be:	4620      	mov	r0, r4
 801c5c0:	f000 f8a8 	bl	801c714 <_free_r>
 801c5c4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801c5c6:	b111      	cbz	r1, 801c5ce <_reclaim_reent+0x8a>
 801c5c8:	4620      	mov	r0, r4
 801c5ca:	f000 f8a3 	bl	801c714 <_free_r>
 801c5ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801c5d0:	b111      	cbz	r1, 801c5d8 <_reclaim_reent+0x94>
 801c5d2:	4620      	mov	r0, r4
 801c5d4:	f000 f89e 	bl	801c714 <_free_r>
 801c5d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801c5da:	b111      	cbz	r1, 801c5e2 <_reclaim_reent+0x9e>
 801c5dc:	4620      	mov	r0, r4
 801c5de:	f000 f899 	bl	801c714 <_free_r>
 801c5e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801c5e4:	b111      	cbz	r1, 801c5ec <_reclaim_reent+0xa8>
 801c5e6:	4620      	mov	r0, r4
 801c5e8:	f000 f894 	bl	801c714 <_free_r>
 801c5ec:	6a23      	ldr	r3, [r4, #32]
 801c5ee:	b11b      	cbz	r3, 801c5f8 <_reclaim_reent+0xb4>
 801c5f0:	4620      	mov	r0, r4
 801c5f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c5f6:	4718      	bx	r3
 801c5f8:	bd70      	pop	{r4, r5, r6, pc}
 801c5fa:	bf00      	nop
 801c5fc:	2000003c 	.word	0x2000003c

0801c600 <_lseek_r>:
 801c600:	b538      	push	{r3, r4, r5, lr}
 801c602:	4d07      	ldr	r5, [pc, #28]	@ (801c620 <_lseek_r+0x20>)
 801c604:	4604      	mov	r4, r0
 801c606:	4608      	mov	r0, r1
 801c608:	4611      	mov	r1, r2
 801c60a:	2200      	movs	r2, #0
 801c60c:	602a      	str	r2, [r5, #0]
 801c60e:	461a      	mov	r2, r3
 801c610:	f7e5 fc77 	bl	8001f02 <_lseek>
 801c614:	1c43      	adds	r3, r0, #1
 801c616:	d102      	bne.n	801c61e <_lseek_r+0x1e>
 801c618:	682b      	ldr	r3, [r5, #0]
 801c61a:	b103      	cbz	r3, 801c61e <_lseek_r+0x1e>
 801c61c:	6023      	str	r3, [r4, #0]
 801c61e:	bd38      	pop	{r3, r4, r5, pc}
 801c620:	20027828 	.word	0x20027828

0801c624 <_read_r>:
 801c624:	b538      	push	{r3, r4, r5, lr}
 801c626:	4d07      	ldr	r5, [pc, #28]	@ (801c644 <_read_r+0x20>)
 801c628:	4604      	mov	r4, r0
 801c62a:	4608      	mov	r0, r1
 801c62c:	4611      	mov	r1, r2
 801c62e:	2200      	movs	r2, #0
 801c630:	602a      	str	r2, [r5, #0]
 801c632:	461a      	mov	r2, r3
 801c634:	f7e5 fc05 	bl	8001e42 <_read>
 801c638:	1c43      	adds	r3, r0, #1
 801c63a:	d102      	bne.n	801c642 <_read_r+0x1e>
 801c63c:	682b      	ldr	r3, [r5, #0]
 801c63e:	b103      	cbz	r3, 801c642 <_read_r+0x1e>
 801c640:	6023      	str	r3, [r4, #0]
 801c642:	bd38      	pop	{r3, r4, r5, pc}
 801c644:	20027828 	.word	0x20027828

0801c648 <_write_r>:
 801c648:	b538      	push	{r3, r4, r5, lr}
 801c64a:	4d07      	ldr	r5, [pc, #28]	@ (801c668 <_write_r+0x20>)
 801c64c:	4604      	mov	r4, r0
 801c64e:	4608      	mov	r0, r1
 801c650:	4611      	mov	r1, r2
 801c652:	2200      	movs	r2, #0
 801c654:	602a      	str	r2, [r5, #0]
 801c656:	461a      	mov	r2, r3
 801c658:	f7e5 fc10 	bl	8001e7c <_write>
 801c65c:	1c43      	adds	r3, r0, #1
 801c65e:	d102      	bne.n	801c666 <_write_r+0x1e>
 801c660:	682b      	ldr	r3, [r5, #0]
 801c662:	b103      	cbz	r3, 801c666 <_write_r+0x1e>
 801c664:	6023      	str	r3, [r4, #0]
 801c666:	bd38      	pop	{r3, r4, r5, pc}
 801c668:	20027828 	.word	0x20027828

0801c66c <__libc_init_array>:
 801c66c:	b570      	push	{r4, r5, r6, lr}
 801c66e:	4d0d      	ldr	r5, [pc, #52]	@ (801c6a4 <__libc_init_array+0x38>)
 801c670:	4c0d      	ldr	r4, [pc, #52]	@ (801c6a8 <__libc_init_array+0x3c>)
 801c672:	1b64      	subs	r4, r4, r5
 801c674:	10a4      	asrs	r4, r4, #2
 801c676:	2600      	movs	r6, #0
 801c678:	42a6      	cmp	r6, r4
 801c67a:	d109      	bne.n	801c690 <__libc_init_array+0x24>
 801c67c:	4d0b      	ldr	r5, [pc, #44]	@ (801c6ac <__libc_init_array+0x40>)
 801c67e:	4c0c      	ldr	r4, [pc, #48]	@ (801c6b0 <__libc_init_array+0x44>)
 801c680:	f000 fdb4 	bl	801d1ec <_init>
 801c684:	1b64      	subs	r4, r4, r5
 801c686:	10a4      	asrs	r4, r4, #2
 801c688:	2600      	movs	r6, #0
 801c68a:	42a6      	cmp	r6, r4
 801c68c:	d105      	bne.n	801c69a <__libc_init_array+0x2e>
 801c68e:	bd70      	pop	{r4, r5, r6, pc}
 801c690:	f855 3b04 	ldr.w	r3, [r5], #4
 801c694:	4798      	blx	r3
 801c696:	3601      	adds	r6, #1
 801c698:	e7ee      	b.n	801c678 <__libc_init_array+0xc>
 801c69a:	f855 3b04 	ldr.w	r3, [r5], #4
 801c69e:	4798      	blx	r3
 801c6a0:	3601      	adds	r6, #1
 801c6a2:	e7f2      	b.n	801c68a <__libc_init_array+0x1e>
 801c6a4:	08020810 	.word	0x08020810
 801c6a8:	08020810 	.word	0x08020810
 801c6ac:	08020810 	.word	0x08020810
 801c6b0:	08020814 	.word	0x08020814

0801c6b4 <__retarget_lock_init_recursive>:
 801c6b4:	4770      	bx	lr

0801c6b6 <__retarget_lock_acquire_recursive>:
 801c6b6:	4770      	bx	lr

0801c6b8 <__retarget_lock_release_recursive>:
 801c6b8:	4770      	bx	lr

0801c6ba <memcpy>:
 801c6ba:	440a      	add	r2, r1
 801c6bc:	4291      	cmp	r1, r2
 801c6be:	f100 33ff 	add.w	r3, r0, #4294967295
 801c6c2:	d100      	bne.n	801c6c6 <memcpy+0xc>
 801c6c4:	4770      	bx	lr
 801c6c6:	b510      	push	{r4, lr}
 801c6c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c6cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c6d0:	4291      	cmp	r1, r2
 801c6d2:	d1f9      	bne.n	801c6c8 <memcpy+0xe>
 801c6d4:	bd10      	pop	{r4, pc}
	...

0801c6d8 <__assert_func>:
 801c6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c6da:	4614      	mov	r4, r2
 801c6dc:	461a      	mov	r2, r3
 801c6de:	4b09      	ldr	r3, [pc, #36]	@ (801c704 <__assert_func+0x2c>)
 801c6e0:	681b      	ldr	r3, [r3, #0]
 801c6e2:	4605      	mov	r5, r0
 801c6e4:	68d8      	ldr	r0, [r3, #12]
 801c6e6:	b14c      	cbz	r4, 801c6fc <__assert_func+0x24>
 801c6e8:	4b07      	ldr	r3, [pc, #28]	@ (801c708 <__assert_func+0x30>)
 801c6ea:	9100      	str	r1, [sp, #0]
 801c6ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c6f0:	4906      	ldr	r1, [pc, #24]	@ (801c70c <__assert_func+0x34>)
 801c6f2:	462b      	mov	r3, r5
 801c6f4:	f000 fc88 	bl	801d008 <fiprintf>
 801c6f8:	f000 fd2c 	bl	801d154 <abort>
 801c6fc:	4b04      	ldr	r3, [pc, #16]	@ (801c710 <__assert_func+0x38>)
 801c6fe:	461c      	mov	r4, r3
 801c700:	e7f3      	b.n	801c6ea <__assert_func+0x12>
 801c702:	bf00      	nop
 801c704:	2000003c 	.word	0x2000003c
 801c708:	08020799 	.word	0x08020799
 801c70c:	080207a6 	.word	0x080207a6
 801c710:	080207d4 	.word	0x080207d4

0801c714 <_free_r>:
 801c714:	b538      	push	{r3, r4, r5, lr}
 801c716:	4605      	mov	r5, r0
 801c718:	2900      	cmp	r1, #0
 801c71a:	d041      	beq.n	801c7a0 <_free_r+0x8c>
 801c71c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c720:	1f0c      	subs	r4, r1, #4
 801c722:	2b00      	cmp	r3, #0
 801c724:	bfb8      	it	lt
 801c726:	18e4      	addlt	r4, r4, r3
 801c728:	f000 f8e8 	bl	801c8fc <__malloc_lock>
 801c72c:	4a1d      	ldr	r2, [pc, #116]	@ (801c7a4 <_free_r+0x90>)
 801c72e:	6813      	ldr	r3, [r2, #0]
 801c730:	b933      	cbnz	r3, 801c740 <_free_r+0x2c>
 801c732:	6063      	str	r3, [r4, #4]
 801c734:	6014      	str	r4, [r2, #0]
 801c736:	4628      	mov	r0, r5
 801c738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c73c:	f000 b8e4 	b.w	801c908 <__malloc_unlock>
 801c740:	42a3      	cmp	r3, r4
 801c742:	d908      	bls.n	801c756 <_free_r+0x42>
 801c744:	6820      	ldr	r0, [r4, #0]
 801c746:	1821      	adds	r1, r4, r0
 801c748:	428b      	cmp	r3, r1
 801c74a:	bf01      	itttt	eq
 801c74c:	6819      	ldreq	r1, [r3, #0]
 801c74e:	685b      	ldreq	r3, [r3, #4]
 801c750:	1809      	addeq	r1, r1, r0
 801c752:	6021      	streq	r1, [r4, #0]
 801c754:	e7ed      	b.n	801c732 <_free_r+0x1e>
 801c756:	461a      	mov	r2, r3
 801c758:	685b      	ldr	r3, [r3, #4]
 801c75a:	b10b      	cbz	r3, 801c760 <_free_r+0x4c>
 801c75c:	42a3      	cmp	r3, r4
 801c75e:	d9fa      	bls.n	801c756 <_free_r+0x42>
 801c760:	6811      	ldr	r1, [r2, #0]
 801c762:	1850      	adds	r0, r2, r1
 801c764:	42a0      	cmp	r0, r4
 801c766:	d10b      	bne.n	801c780 <_free_r+0x6c>
 801c768:	6820      	ldr	r0, [r4, #0]
 801c76a:	4401      	add	r1, r0
 801c76c:	1850      	adds	r0, r2, r1
 801c76e:	4283      	cmp	r3, r0
 801c770:	6011      	str	r1, [r2, #0]
 801c772:	d1e0      	bne.n	801c736 <_free_r+0x22>
 801c774:	6818      	ldr	r0, [r3, #0]
 801c776:	685b      	ldr	r3, [r3, #4]
 801c778:	6053      	str	r3, [r2, #4]
 801c77a:	4408      	add	r0, r1
 801c77c:	6010      	str	r0, [r2, #0]
 801c77e:	e7da      	b.n	801c736 <_free_r+0x22>
 801c780:	d902      	bls.n	801c788 <_free_r+0x74>
 801c782:	230c      	movs	r3, #12
 801c784:	602b      	str	r3, [r5, #0]
 801c786:	e7d6      	b.n	801c736 <_free_r+0x22>
 801c788:	6820      	ldr	r0, [r4, #0]
 801c78a:	1821      	adds	r1, r4, r0
 801c78c:	428b      	cmp	r3, r1
 801c78e:	bf04      	itt	eq
 801c790:	6819      	ldreq	r1, [r3, #0]
 801c792:	685b      	ldreq	r3, [r3, #4]
 801c794:	6063      	str	r3, [r4, #4]
 801c796:	bf04      	itt	eq
 801c798:	1809      	addeq	r1, r1, r0
 801c79a:	6021      	streq	r1, [r4, #0]
 801c79c:	6054      	str	r4, [r2, #4]
 801c79e:	e7ca      	b.n	801c736 <_free_r+0x22>
 801c7a0:	bd38      	pop	{r3, r4, r5, pc}
 801c7a2:	bf00      	nop
 801c7a4:	20027834 	.word	0x20027834

0801c7a8 <malloc>:
 801c7a8:	4b02      	ldr	r3, [pc, #8]	@ (801c7b4 <malloc+0xc>)
 801c7aa:	4601      	mov	r1, r0
 801c7ac:	6818      	ldr	r0, [r3, #0]
 801c7ae:	f000 b825 	b.w	801c7fc <_malloc_r>
 801c7b2:	bf00      	nop
 801c7b4:	2000003c 	.word	0x2000003c

0801c7b8 <sbrk_aligned>:
 801c7b8:	b570      	push	{r4, r5, r6, lr}
 801c7ba:	4e0f      	ldr	r6, [pc, #60]	@ (801c7f8 <sbrk_aligned+0x40>)
 801c7bc:	460c      	mov	r4, r1
 801c7be:	6831      	ldr	r1, [r6, #0]
 801c7c0:	4605      	mov	r5, r0
 801c7c2:	b911      	cbnz	r1, 801c7ca <sbrk_aligned+0x12>
 801c7c4:	f000 fcb6 	bl	801d134 <_sbrk_r>
 801c7c8:	6030      	str	r0, [r6, #0]
 801c7ca:	4621      	mov	r1, r4
 801c7cc:	4628      	mov	r0, r5
 801c7ce:	f000 fcb1 	bl	801d134 <_sbrk_r>
 801c7d2:	1c43      	adds	r3, r0, #1
 801c7d4:	d103      	bne.n	801c7de <sbrk_aligned+0x26>
 801c7d6:	f04f 34ff 	mov.w	r4, #4294967295
 801c7da:	4620      	mov	r0, r4
 801c7dc:	bd70      	pop	{r4, r5, r6, pc}
 801c7de:	1cc4      	adds	r4, r0, #3
 801c7e0:	f024 0403 	bic.w	r4, r4, #3
 801c7e4:	42a0      	cmp	r0, r4
 801c7e6:	d0f8      	beq.n	801c7da <sbrk_aligned+0x22>
 801c7e8:	1a21      	subs	r1, r4, r0
 801c7ea:	4628      	mov	r0, r5
 801c7ec:	f000 fca2 	bl	801d134 <_sbrk_r>
 801c7f0:	3001      	adds	r0, #1
 801c7f2:	d1f2      	bne.n	801c7da <sbrk_aligned+0x22>
 801c7f4:	e7ef      	b.n	801c7d6 <sbrk_aligned+0x1e>
 801c7f6:	bf00      	nop
 801c7f8:	20027830 	.word	0x20027830

0801c7fc <_malloc_r>:
 801c7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c800:	1ccd      	adds	r5, r1, #3
 801c802:	f025 0503 	bic.w	r5, r5, #3
 801c806:	3508      	adds	r5, #8
 801c808:	2d0c      	cmp	r5, #12
 801c80a:	bf38      	it	cc
 801c80c:	250c      	movcc	r5, #12
 801c80e:	2d00      	cmp	r5, #0
 801c810:	4606      	mov	r6, r0
 801c812:	db01      	blt.n	801c818 <_malloc_r+0x1c>
 801c814:	42a9      	cmp	r1, r5
 801c816:	d904      	bls.n	801c822 <_malloc_r+0x26>
 801c818:	230c      	movs	r3, #12
 801c81a:	6033      	str	r3, [r6, #0]
 801c81c:	2000      	movs	r0, #0
 801c81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c822:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c8f8 <_malloc_r+0xfc>
 801c826:	f000 f869 	bl	801c8fc <__malloc_lock>
 801c82a:	f8d8 3000 	ldr.w	r3, [r8]
 801c82e:	461c      	mov	r4, r3
 801c830:	bb44      	cbnz	r4, 801c884 <_malloc_r+0x88>
 801c832:	4629      	mov	r1, r5
 801c834:	4630      	mov	r0, r6
 801c836:	f7ff ffbf 	bl	801c7b8 <sbrk_aligned>
 801c83a:	1c43      	adds	r3, r0, #1
 801c83c:	4604      	mov	r4, r0
 801c83e:	d158      	bne.n	801c8f2 <_malloc_r+0xf6>
 801c840:	f8d8 4000 	ldr.w	r4, [r8]
 801c844:	4627      	mov	r7, r4
 801c846:	2f00      	cmp	r7, #0
 801c848:	d143      	bne.n	801c8d2 <_malloc_r+0xd6>
 801c84a:	2c00      	cmp	r4, #0
 801c84c:	d04b      	beq.n	801c8e6 <_malloc_r+0xea>
 801c84e:	6823      	ldr	r3, [r4, #0]
 801c850:	4639      	mov	r1, r7
 801c852:	4630      	mov	r0, r6
 801c854:	eb04 0903 	add.w	r9, r4, r3
 801c858:	f000 fc6c 	bl	801d134 <_sbrk_r>
 801c85c:	4581      	cmp	r9, r0
 801c85e:	d142      	bne.n	801c8e6 <_malloc_r+0xea>
 801c860:	6821      	ldr	r1, [r4, #0]
 801c862:	1a6d      	subs	r5, r5, r1
 801c864:	4629      	mov	r1, r5
 801c866:	4630      	mov	r0, r6
 801c868:	f7ff ffa6 	bl	801c7b8 <sbrk_aligned>
 801c86c:	3001      	adds	r0, #1
 801c86e:	d03a      	beq.n	801c8e6 <_malloc_r+0xea>
 801c870:	6823      	ldr	r3, [r4, #0]
 801c872:	442b      	add	r3, r5
 801c874:	6023      	str	r3, [r4, #0]
 801c876:	f8d8 3000 	ldr.w	r3, [r8]
 801c87a:	685a      	ldr	r2, [r3, #4]
 801c87c:	bb62      	cbnz	r2, 801c8d8 <_malloc_r+0xdc>
 801c87e:	f8c8 7000 	str.w	r7, [r8]
 801c882:	e00f      	b.n	801c8a4 <_malloc_r+0xa8>
 801c884:	6822      	ldr	r2, [r4, #0]
 801c886:	1b52      	subs	r2, r2, r5
 801c888:	d420      	bmi.n	801c8cc <_malloc_r+0xd0>
 801c88a:	2a0b      	cmp	r2, #11
 801c88c:	d917      	bls.n	801c8be <_malloc_r+0xc2>
 801c88e:	1961      	adds	r1, r4, r5
 801c890:	42a3      	cmp	r3, r4
 801c892:	6025      	str	r5, [r4, #0]
 801c894:	bf18      	it	ne
 801c896:	6059      	strne	r1, [r3, #4]
 801c898:	6863      	ldr	r3, [r4, #4]
 801c89a:	bf08      	it	eq
 801c89c:	f8c8 1000 	streq.w	r1, [r8]
 801c8a0:	5162      	str	r2, [r4, r5]
 801c8a2:	604b      	str	r3, [r1, #4]
 801c8a4:	4630      	mov	r0, r6
 801c8a6:	f000 f82f 	bl	801c908 <__malloc_unlock>
 801c8aa:	f104 000b 	add.w	r0, r4, #11
 801c8ae:	1d23      	adds	r3, r4, #4
 801c8b0:	f020 0007 	bic.w	r0, r0, #7
 801c8b4:	1ac2      	subs	r2, r0, r3
 801c8b6:	bf1c      	itt	ne
 801c8b8:	1a1b      	subne	r3, r3, r0
 801c8ba:	50a3      	strne	r3, [r4, r2]
 801c8bc:	e7af      	b.n	801c81e <_malloc_r+0x22>
 801c8be:	6862      	ldr	r2, [r4, #4]
 801c8c0:	42a3      	cmp	r3, r4
 801c8c2:	bf0c      	ite	eq
 801c8c4:	f8c8 2000 	streq.w	r2, [r8]
 801c8c8:	605a      	strne	r2, [r3, #4]
 801c8ca:	e7eb      	b.n	801c8a4 <_malloc_r+0xa8>
 801c8cc:	4623      	mov	r3, r4
 801c8ce:	6864      	ldr	r4, [r4, #4]
 801c8d0:	e7ae      	b.n	801c830 <_malloc_r+0x34>
 801c8d2:	463c      	mov	r4, r7
 801c8d4:	687f      	ldr	r7, [r7, #4]
 801c8d6:	e7b6      	b.n	801c846 <_malloc_r+0x4a>
 801c8d8:	461a      	mov	r2, r3
 801c8da:	685b      	ldr	r3, [r3, #4]
 801c8dc:	42a3      	cmp	r3, r4
 801c8de:	d1fb      	bne.n	801c8d8 <_malloc_r+0xdc>
 801c8e0:	2300      	movs	r3, #0
 801c8e2:	6053      	str	r3, [r2, #4]
 801c8e4:	e7de      	b.n	801c8a4 <_malloc_r+0xa8>
 801c8e6:	230c      	movs	r3, #12
 801c8e8:	6033      	str	r3, [r6, #0]
 801c8ea:	4630      	mov	r0, r6
 801c8ec:	f000 f80c 	bl	801c908 <__malloc_unlock>
 801c8f0:	e794      	b.n	801c81c <_malloc_r+0x20>
 801c8f2:	6005      	str	r5, [r0, #0]
 801c8f4:	e7d6      	b.n	801c8a4 <_malloc_r+0xa8>
 801c8f6:	bf00      	nop
 801c8f8:	20027834 	.word	0x20027834

0801c8fc <__malloc_lock>:
 801c8fc:	4801      	ldr	r0, [pc, #4]	@ (801c904 <__malloc_lock+0x8>)
 801c8fe:	f7ff beda 	b.w	801c6b6 <__retarget_lock_acquire_recursive>
 801c902:	bf00      	nop
 801c904:	2002782c 	.word	0x2002782c

0801c908 <__malloc_unlock>:
 801c908:	4801      	ldr	r0, [pc, #4]	@ (801c910 <__malloc_unlock+0x8>)
 801c90a:	f7ff bed5 	b.w	801c6b8 <__retarget_lock_release_recursive>
 801c90e:	bf00      	nop
 801c910:	2002782c 	.word	0x2002782c

0801c914 <__sfputc_r>:
 801c914:	6893      	ldr	r3, [r2, #8]
 801c916:	3b01      	subs	r3, #1
 801c918:	2b00      	cmp	r3, #0
 801c91a:	b410      	push	{r4}
 801c91c:	6093      	str	r3, [r2, #8]
 801c91e:	da08      	bge.n	801c932 <__sfputc_r+0x1e>
 801c920:	6994      	ldr	r4, [r2, #24]
 801c922:	42a3      	cmp	r3, r4
 801c924:	db01      	blt.n	801c92a <__sfputc_r+0x16>
 801c926:	290a      	cmp	r1, #10
 801c928:	d103      	bne.n	801c932 <__sfputc_r+0x1e>
 801c92a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c92e:	f7ff bd4c 	b.w	801c3ca <__swbuf_r>
 801c932:	6813      	ldr	r3, [r2, #0]
 801c934:	1c58      	adds	r0, r3, #1
 801c936:	6010      	str	r0, [r2, #0]
 801c938:	7019      	strb	r1, [r3, #0]
 801c93a:	4608      	mov	r0, r1
 801c93c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c940:	4770      	bx	lr

0801c942 <__sfputs_r>:
 801c942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c944:	4606      	mov	r6, r0
 801c946:	460f      	mov	r7, r1
 801c948:	4614      	mov	r4, r2
 801c94a:	18d5      	adds	r5, r2, r3
 801c94c:	42ac      	cmp	r4, r5
 801c94e:	d101      	bne.n	801c954 <__sfputs_r+0x12>
 801c950:	2000      	movs	r0, #0
 801c952:	e007      	b.n	801c964 <__sfputs_r+0x22>
 801c954:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c958:	463a      	mov	r2, r7
 801c95a:	4630      	mov	r0, r6
 801c95c:	f7ff ffda 	bl	801c914 <__sfputc_r>
 801c960:	1c43      	adds	r3, r0, #1
 801c962:	d1f3      	bne.n	801c94c <__sfputs_r+0xa>
 801c964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c968 <_vfiprintf_r>:
 801c968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c96c:	460d      	mov	r5, r1
 801c96e:	b09d      	sub	sp, #116	@ 0x74
 801c970:	4614      	mov	r4, r2
 801c972:	4698      	mov	r8, r3
 801c974:	4606      	mov	r6, r0
 801c976:	b118      	cbz	r0, 801c980 <_vfiprintf_r+0x18>
 801c978:	6a03      	ldr	r3, [r0, #32]
 801c97a:	b90b      	cbnz	r3, 801c980 <_vfiprintf_r+0x18>
 801c97c:	f7ff fc3c 	bl	801c1f8 <__sinit>
 801c980:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c982:	07d9      	lsls	r1, r3, #31
 801c984:	d405      	bmi.n	801c992 <_vfiprintf_r+0x2a>
 801c986:	89ab      	ldrh	r3, [r5, #12]
 801c988:	059a      	lsls	r2, r3, #22
 801c98a:	d402      	bmi.n	801c992 <_vfiprintf_r+0x2a>
 801c98c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c98e:	f7ff fe92 	bl	801c6b6 <__retarget_lock_acquire_recursive>
 801c992:	89ab      	ldrh	r3, [r5, #12]
 801c994:	071b      	lsls	r3, r3, #28
 801c996:	d501      	bpl.n	801c99c <_vfiprintf_r+0x34>
 801c998:	692b      	ldr	r3, [r5, #16]
 801c99a:	b99b      	cbnz	r3, 801c9c4 <_vfiprintf_r+0x5c>
 801c99c:	4629      	mov	r1, r5
 801c99e:	4630      	mov	r0, r6
 801c9a0:	f7ff fd52 	bl	801c448 <__swsetup_r>
 801c9a4:	b170      	cbz	r0, 801c9c4 <_vfiprintf_r+0x5c>
 801c9a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c9a8:	07dc      	lsls	r4, r3, #31
 801c9aa:	d504      	bpl.n	801c9b6 <_vfiprintf_r+0x4e>
 801c9ac:	f04f 30ff 	mov.w	r0, #4294967295
 801c9b0:	b01d      	add	sp, #116	@ 0x74
 801c9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9b6:	89ab      	ldrh	r3, [r5, #12]
 801c9b8:	0598      	lsls	r0, r3, #22
 801c9ba:	d4f7      	bmi.n	801c9ac <_vfiprintf_r+0x44>
 801c9bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c9be:	f7ff fe7b 	bl	801c6b8 <__retarget_lock_release_recursive>
 801c9c2:	e7f3      	b.n	801c9ac <_vfiprintf_r+0x44>
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	9309      	str	r3, [sp, #36]	@ 0x24
 801c9c8:	2320      	movs	r3, #32
 801c9ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c9ce:	f8cd 800c 	str.w	r8, [sp, #12]
 801c9d2:	2330      	movs	r3, #48	@ 0x30
 801c9d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801cb84 <_vfiprintf_r+0x21c>
 801c9d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c9dc:	f04f 0901 	mov.w	r9, #1
 801c9e0:	4623      	mov	r3, r4
 801c9e2:	469a      	mov	sl, r3
 801c9e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c9e8:	b10a      	cbz	r2, 801c9ee <_vfiprintf_r+0x86>
 801c9ea:	2a25      	cmp	r2, #37	@ 0x25
 801c9ec:	d1f9      	bne.n	801c9e2 <_vfiprintf_r+0x7a>
 801c9ee:	ebba 0b04 	subs.w	fp, sl, r4
 801c9f2:	d00b      	beq.n	801ca0c <_vfiprintf_r+0xa4>
 801c9f4:	465b      	mov	r3, fp
 801c9f6:	4622      	mov	r2, r4
 801c9f8:	4629      	mov	r1, r5
 801c9fa:	4630      	mov	r0, r6
 801c9fc:	f7ff ffa1 	bl	801c942 <__sfputs_r>
 801ca00:	3001      	adds	r0, #1
 801ca02:	f000 80a7 	beq.w	801cb54 <_vfiprintf_r+0x1ec>
 801ca06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ca08:	445a      	add	r2, fp
 801ca0a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ca0c:	f89a 3000 	ldrb.w	r3, [sl]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	f000 809f 	beq.w	801cb54 <_vfiprintf_r+0x1ec>
 801ca16:	2300      	movs	r3, #0
 801ca18:	f04f 32ff 	mov.w	r2, #4294967295
 801ca1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ca20:	f10a 0a01 	add.w	sl, sl, #1
 801ca24:	9304      	str	r3, [sp, #16]
 801ca26:	9307      	str	r3, [sp, #28]
 801ca28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ca2c:	931a      	str	r3, [sp, #104]	@ 0x68
 801ca2e:	4654      	mov	r4, sl
 801ca30:	2205      	movs	r2, #5
 801ca32:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca36:	4853      	ldr	r0, [pc, #332]	@ (801cb84 <_vfiprintf_r+0x21c>)
 801ca38:	f7e3 fbea 	bl	8000210 <memchr>
 801ca3c:	9a04      	ldr	r2, [sp, #16]
 801ca3e:	b9d8      	cbnz	r0, 801ca78 <_vfiprintf_r+0x110>
 801ca40:	06d1      	lsls	r1, r2, #27
 801ca42:	bf44      	itt	mi
 801ca44:	2320      	movmi	r3, #32
 801ca46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ca4a:	0713      	lsls	r3, r2, #28
 801ca4c:	bf44      	itt	mi
 801ca4e:	232b      	movmi	r3, #43	@ 0x2b
 801ca50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ca54:	f89a 3000 	ldrb.w	r3, [sl]
 801ca58:	2b2a      	cmp	r3, #42	@ 0x2a
 801ca5a:	d015      	beq.n	801ca88 <_vfiprintf_r+0x120>
 801ca5c:	9a07      	ldr	r2, [sp, #28]
 801ca5e:	4654      	mov	r4, sl
 801ca60:	2000      	movs	r0, #0
 801ca62:	f04f 0c0a 	mov.w	ip, #10
 801ca66:	4621      	mov	r1, r4
 801ca68:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ca6c:	3b30      	subs	r3, #48	@ 0x30
 801ca6e:	2b09      	cmp	r3, #9
 801ca70:	d94b      	bls.n	801cb0a <_vfiprintf_r+0x1a2>
 801ca72:	b1b0      	cbz	r0, 801caa2 <_vfiprintf_r+0x13a>
 801ca74:	9207      	str	r2, [sp, #28]
 801ca76:	e014      	b.n	801caa2 <_vfiprintf_r+0x13a>
 801ca78:	eba0 0308 	sub.w	r3, r0, r8
 801ca7c:	fa09 f303 	lsl.w	r3, r9, r3
 801ca80:	4313      	orrs	r3, r2
 801ca82:	9304      	str	r3, [sp, #16]
 801ca84:	46a2      	mov	sl, r4
 801ca86:	e7d2      	b.n	801ca2e <_vfiprintf_r+0xc6>
 801ca88:	9b03      	ldr	r3, [sp, #12]
 801ca8a:	1d19      	adds	r1, r3, #4
 801ca8c:	681b      	ldr	r3, [r3, #0]
 801ca8e:	9103      	str	r1, [sp, #12]
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	bfbb      	ittet	lt
 801ca94:	425b      	neglt	r3, r3
 801ca96:	f042 0202 	orrlt.w	r2, r2, #2
 801ca9a:	9307      	strge	r3, [sp, #28]
 801ca9c:	9307      	strlt	r3, [sp, #28]
 801ca9e:	bfb8      	it	lt
 801caa0:	9204      	strlt	r2, [sp, #16]
 801caa2:	7823      	ldrb	r3, [r4, #0]
 801caa4:	2b2e      	cmp	r3, #46	@ 0x2e
 801caa6:	d10a      	bne.n	801cabe <_vfiprintf_r+0x156>
 801caa8:	7863      	ldrb	r3, [r4, #1]
 801caaa:	2b2a      	cmp	r3, #42	@ 0x2a
 801caac:	d132      	bne.n	801cb14 <_vfiprintf_r+0x1ac>
 801caae:	9b03      	ldr	r3, [sp, #12]
 801cab0:	1d1a      	adds	r2, r3, #4
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	9203      	str	r2, [sp, #12]
 801cab6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801caba:	3402      	adds	r4, #2
 801cabc:	9305      	str	r3, [sp, #20]
 801cabe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801cb94 <_vfiprintf_r+0x22c>
 801cac2:	7821      	ldrb	r1, [r4, #0]
 801cac4:	2203      	movs	r2, #3
 801cac6:	4650      	mov	r0, sl
 801cac8:	f7e3 fba2 	bl	8000210 <memchr>
 801cacc:	b138      	cbz	r0, 801cade <_vfiprintf_r+0x176>
 801cace:	9b04      	ldr	r3, [sp, #16]
 801cad0:	eba0 000a 	sub.w	r0, r0, sl
 801cad4:	2240      	movs	r2, #64	@ 0x40
 801cad6:	4082      	lsls	r2, r0
 801cad8:	4313      	orrs	r3, r2
 801cada:	3401      	adds	r4, #1
 801cadc:	9304      	str	r3, [sp, #16]
 801cade:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cae2:	4829      	ldr	r0, [pc, #164]	@ (801cb88 <_vfiprintf_r+0x220>)
 801cae4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cae8:	2206      	movs	r2, #6
 801caea:	f7e3 fb91 	bl	8000210 <memchr>
 801caee:	2800      	cmp	r0, #0
 801caf0:	d03f      	beq.n	801cb72 <_vfiprintf_r+0x20a>
 801caf2:	4b26      	ldr	r3, [pc, #152]	@ (801cb8c <_vfiprintf_r+0x224>)
 801caf4:	bb1b      	cbnz	r3, 801cb3e <_vfiprintf_r+0x1d6>
 801caf6:	9b03      	ldr	r3, [sp, #12]
 801caf8:	3307      	adds	r3, #7
 801cafa:	f023 0307 	bic.w	r3, r3, #7
 801cafe:	3308      	adds	r3, #8
 801cb00:	9303      	str	r3, [sp, #12]
 801cb02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb04:	443b      	add	r3, r7
 801cb06:	9309      	str	r3, [sp, #36]	@ 0x24
 801cb08:	e76a      	b.n	801c9e0 <_vfiprintf_r+0x78>
 801cb0a:	fb0c 3202 	mla	r2, ip, r2, r3
 801cb0e:	460c      	mov	r4, r1
 801cb10:	2001      	movs	r0, #1
 801cb12:	e7a8      	b.n	801ca66 <_vfiprintf_r+0xfe>
 801cb14:	2300      	movs	r3, #0
 801cb16:	3401      	adds	r4, #1
 801cb18:	9305      	str	r3, [sp, #20]
 801cb1a:	4619      	mov	r1, r3
 801cb1c:	f04f 0c0a 	mov.w	ip, #10
 801cb20:	4620      	mov	r0, r4
 801cb22:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cb26:	3a30      	subs	r2, #48	@ 0x30
 801cb28:	2a09      	cmp	r2, #9
 801cb2a:	d903      	bls.n	801cb34 <_vfiprintf_r+0x1cc>
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	d0c6      	beq.n	801cabe <_vfiprintf_r+0x156>
 801cb30:	9105      	str	r1, [sp, #20]
 801cb32:	e7c4      	b.n	801cabe <_vfiprintf_r+0x156>
 801cb34:	fb0c 2101 	mla	r1, ip, r1, r2
 801cb38:	4604      	mov	r4, r0
 801cb3a:	2301      	movs	r3, #1
 801cb3c:	e7f0      	b.n	801cb20 <_vfiprintf_r+0x1b8>
 801cb3e:	ab03      	add	r3, sp, #12
 801cb40:	9300      	str	r3, [sp, #0]
 801cb42:	462a      	mov	r2, r5
 801cb44:	4b12      	ldr	r3, [pc, #72]	@ (801cb90 <_vfiprintf_r+0x228>)
 801cb46:	a904      	add	r1, sp, #16
 801cb48:	4630      	mov	r0, r6
 801cb4a:	f3af 8000 	nop.w
 801cb4e:	4607      	mov	r7, r0
 801cb50:	1c78      	adds	r0, r7, #1
 801cb52:	d1d6      	bne.n	801cb02 <_vfiprintf_r+0x19a>
 801cb54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cb56:	07d9      	lsls	r1, r3, #31
 801cb58:	d405      	bmi.n	801cb66 <_vfiprintf_r+0x1fe>
 801cb5a:	89ab      	ldrh	r3, [r5, #12]
 801cb5c:	059a      	lsls	r2, r3, #22
 801cb5e:	d402      	bmi.n	801cb66 <_vfiprintf_r+0x1fe>
 801cb60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cb62:	f7ff fda9 	bl	801c6b8 <__retarget_lock_release_recursive>
 801cb66:	89ab      	ldrh	r3, [r5, #12]
 801cb68:	065b      	lsls	r3, r3, #25
 801cb6a:	f53f af1f 	bmi.w	801c9ac <_vfiprintf_r+0x44>
 801cb6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cb70:	e71e      	b.n	801c9b0 <_vfiprintf_r+0x48>
 801cb72:	ab03      	add	r3, sp, #12
 801cb74:	9300      	str	r3, [sp, #0]
 801cb76:	462a      	mov	r2, r5
 801cb78:	4b05      	ldr	r3, [pc, #20]	@ (801cb90 <_vfiprintf_r+0x228>)
 801cb7a:	a904      	add	r1, sp, #16
 801cb7c:	4630      	mov	r0, r6
 801cb7e:	f000 f879 	bl	801cc74 <_printf_i>
 801cb82:	e7e4      	b.n	801cb4e <_vfiprintf_r+0x1e6>
 801cb84:	080207d5 	.word	0x080207d5
 801cb88:	080207df 	.word	0x080207df
 801cb8c:	00000000 	.word	0x00000000
 801cb90:	0801c943 	.word	0x0801c943
 801cb94:	080207db 	.word	0x080207db

0801cb98 <_printf_common>:
 801cb98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb9c:	4616      	mov	r6, r2
 801cb9e:	4698      	mov	r8, r3
 801cba0:	688a      	ldr	r2, [r1, #8]
 801cba2:	690b      	ldr	r3, [r1, #16]
 801cba4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801cba8:	4293      	cmp	r3, r2
 801cbaa:	bfb8      	it	lt
 801cbac:	4613      	movlt	r3, r2
 801cbae:	6033      	str	r3, [r6, #0]
 801cbb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801cbb4:	4607      	mov	r7, r0
 801cbb6:	460c      	mov	r4, r1
 801cbb8:	b10a      	cbz	r2, 801cbbe <_printf_common+0x26>
 801cbba:	3301      	adds	r3, #1
 801cbbc:	6033      	str	r3, [r6, #0]
 801cbbe:	6823      	ldr	r3, [r4, #0]
 801cbc0:	0699      	lsls	r1, r3, #26
 801cbc2:	bf42      	ittt	mi
 801cbc4:	6833      	ldrmi	r3, [r6, #0]
 801cbc6:	3302      	addmi	r3, #2
 801cbc8:	6033      	strmi	r3, [r6, #0]
 801cbca:	6825      	ldr	r5, [r4, #0]
 801cbcc:	f015 0506 	ands.w	r5, r5, #6
 801cbd0:	d106      	bne.n	801cbe0 <_printf_common+0x48>
 801cbd2:	f104 0a19 	add.w	sl, r4, #25
 801cbd6:	68e3      	ldr	r3, [r4, #12]
 801cbd8:	6832      	ldr	r2, [r6, #0]
 801cbda:	1a9b      	subs	r3, r3, r2
 801cbdc:	42ab      	cmp	r3, r5
 801cbde:	dc26      	bgt.n	801cc2e <_printf_common+0x96>
 801cbe0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801cbe4:	6822      	ldr	r2, [r4, #0]
 801cbe6:	3b00      	subs	r3, #0
 801cbe8:	bf18      	it	ne
 801cbea:	2301      	movne	r3, #1
 801cbec:	0692      	lsls	r2, r2, #26
 801cbee:	d42b      	bmi.n	801cc48 <_printf_common+0xb0>
 801cbf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801cbf4:	4641      	mov	r1, r8
 801cbf6:	4638      	mov	r0, r7
 801cbf8:	47c8      	blx	r9
 801cbfa:	3001      	adds	r0, #1
 801cbfc:	d01e      	beq.n	801cc3c <_printf_common+0xa4>
 801cbfe:	6823      	ldr	r3, [r4, #0]
 801cc00:	6922      	ldr	r2, [r4, #16]
 801cc02:	f003 0306 	and.w	r3, r3, #6
 801cc06:	2b04      	cmp	r3, #4
 801cc08:	bf02      	ittt	eq
 801cc0a:	68e5      	ldreq	r5, [r4, #12]
 801cc0c:	6833      	ldreq	r3, [r6, #0]
 801cc0e:	1aed      	subeq	r5, r5, r3
 801cc10:	68a3      	ldr	r3, [r4, #8]
 801cc12:	bf0c      	ite	eq
 801cc14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cc18:	2500      	movne	r5, #0
 801cc1a:	4293      	cmp	r3, r2
 801cc1c:	bfc4      	itt	gt
 801cc1e:	1a9b      	subgt	r3, r3, r2
 801cc20:	18ed      	addgt	r5, r5, r3
 801cc22:	2600      	movs	r6, #0
 801cc24:	341a      	adds	r4, #26
 801cc26:	42b5      	cmp	r5, r6
 801cc28:	d11a      	bne.n	801cc60 <_printf_common+0xc8>
 801cc2a:	2000      	movs	r0, #0
 801cc2c:	e008      	b.n	801cc40 <_printf_common+0xa8>
 801cc2e:	2301      	movs	r3, #1
 801cc30:	4652      	mov	r2, sl
 801cc32:	4641      	mov	r1, r8
 801cc34:	4638      	mov	r0, r7
 801cc36:	47c8      	blx	r9
 801cc38:	3001      	adds	r0, #1
 801cc3a:	d103      	bne.n	801cc44 <_printf_common+0xac>
 801cc3c:	f04f 30ff 	mov.w	r0, #4294967295
 801cc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc44:	3501      	adds	r5, #1
 801cc46:	e7c6      	b.n	801cbd6 <_printf_common+0x3e>
 801cc48:	18e1      	adds	r1, r4, r3
 801cc4a:	1c5a      	adds	r2, r3, #1
 801cc4c:	2030      	movs	r0, #48	@ 0x30
 801cc4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801cc52:	4422      	add	r2, r4
 801cc54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801cc58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801cc5c:	3302      	adds	r3, #2
 801cc5e:	e7c7      	b.n	801cbf0 <_printf_common+0x58>
 801cc60:	2301      	movs	r3, #1
 801cc62:	4622      	mov	r2, r4
 801cc64:	4641      	mov	r1, r8
 801cc66:	4638      	mov	r0, r7
 801cc68:	47c8      	blx	r9
 801cc6a:	3001      	adds	r0, #1
 801cc6c:	d0e6      	beq.n	801cc3c <_printf_common+0xa4>
 801cc6e:	3601      	adds	r6, #1
 801cc70:	e7d9      	b.n	801cc26 <_printf_common+0x8e>
	...

0801cc74 <_printf_i>:
 801cc74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cc78:	7e0f      	ldrb	r7, [r1, #24]
 801cc7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801cc7c:	2f78      	cmp	r7, #120	@ 0x78
 801cc7e:	4691      	mov	r9, r2
 801cc80:	4680      	mov	r8, r0
 801cc82:	460c      	mov	r4, r1
 801cc84:	469a      	mov	sl, r3
 801cc86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801cc8a:	d807      	bhi.n	801cc9c <_printf_i+0x28>
 801cc8c:	2f62      	cmp	r7, #98	@ 0x62
 801cc8e:	d80a      	bhi.n	801cca6 <_printf_i+0x32>
 801cc90:	2f00      	cmp	r7, #0
 801cc92:	f000 80d1 	beq.w	801ce38 <_printf_i+0x1c4>
 801cc96:	2f58      	cmp	r7, #88	@ 0x58
 801cc98:	f000 80b8 	beq.w	801ce0c <_printf_i+0x198>
 801cc9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cca0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801cca4:	e03a      	b.n	801cd1c <_printf_i+0xa8>
 801cca6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ccaa:	2b15      	cmp	r3, #21
 801ccac:	d8f6      	bhi.n	801cc9c <_printf_i+0x28>
 801ccae:	a101      	add	r1, pc, #4	@ (adr r1, 801ccb4 <_printf_i+0x40>)
 801ccb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ccb4:	0801cd0d 	.word	0x0801cd0d
 801ccb8:	0801cd21 	.word	0x0801cd21
 801ccbc:	0801cc9d 	.word	0x0801cc9d
 801ccc0:	0801cc9d 	.word	0x0801cc9d
 801ccc4:	0801cc9d 	.word	0x0801cc9d
 801ccc8:	0801cc9d 	.word	0x0801cc9d
 801cccc:	0801cd21 	.word	0x0801cd21
 801ccd0:	0801cc9d 	.word	0x0801cc9d
 801ccd4:	0801cc9d 	.word	0x0801cc9d
 801ccd8:	0801cc9d 	.word	0x0801cc9d
 801ccdc:	0801cc9d 	.word	0x0801cc9d
 801cce0:	0801ce1f 	.word	0x0801ce1f
 801cce4:	0801cd4b 	.word	0x0801cd4b
 801cce8:	0801cdd9 	.word	0x0801cdd9
 801ccec:	0801cc9d 	.word	0x0801cc9d
 801ccf0:	0801cc9d 	.word	0x0801cc9d
 801ccf4:	0801ce41 	.word	0x0801ce41
 801ccf8:	0801cc9d 	.word	0x0801cc9d
 801ccfc:	0801cd4b 	.word	0x0801cd4b
 801cd00:	0801cc9d 	.word	0x0801cc9d
 801cd04:	0801cc9d 	.word	0x0801cc9d
 801cd08:	0801cde1 	.word	0x0801cde1
 801cd0c:	6833      	ldr	r3, [r6, #0]
 801cd0e:	1d1a      	adds	r2, r3, #4
 801cd10:	681b      	ldr	r3, [r3, #0]
 801cd12:	6032      	str	r2, [r6, #0]
 801cd14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cd18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801cd1c:	2301      	movs	r3, #1
 801cd1e:	e09c      	b.n	801ce5a <_printf_i+0x1e6>
 801cd20:	6833      	ldr	r3, [r6, #0]
 801cd22:	6820      	ldr	r0, [r4, #0]
 801cd24:	1d19      	adds	r1, r3, #4
 801cd26:	6031      	str	r1, [r6, #0]
 801cd28:	0606      	lsls	r6, r0, #24
 801cd2a:	d501      	bpl.n	801cd30 <_printf_i+0xbc>
 801cd2c:	681d      	ldr	r5, [r3, #0]
 801cd2e:	e003      	b.n	801cd38 <_printf_i+0xc4>
 801cd30:	0645      	lsls	r5, r0, #25
 801cd32:	d5fb      	bpl.n	801cd2c <_printf_i+0xb8>
 801cd34:	f9b3 5000 	ldrsh.w	r5, [r3]
 801cd38:	2d00      	cmp	r5, #0
 801cd3a:	da03      	bge.n	801cd44 <_printf_i+0xd0>
 801cd3c:	232d      	movs	r3, #45	@ 0x2d
 801cd3e:	426d      	negs	r5, r5
 801cd40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cd44:	4858      	ldr	r0, [pc, #352]	@ (801cea8 <_printf_i+0x234>)
 801cd46:	230a      	movs	r3, #10
 801cd48:	e011      	b.n	801cd6e <_printf_i+0xfa>
 801cd4a:	6821      	ldr	r1, [r4, #0]
 801cd4c:	6833      	ldr	r3, [r6, #0]
 801cd4e:	0608      	lsls	r0, r1, #24
 801cd50:	f853 5b04 	ldr.w	r5, [r3], #4
 801cd54:	d402      	bmi.n	801cd5c <_printf_i+0xe8>
 801cd56:	0649      	lsls	r1, r1, #25
 801cd58:	bf48      	it	mi
 801cd5a:	b2ad      	uxthmi	r5, r5
 801cd5c:	2f6f      	cmp	r7, #111	@ 0x6f
 801cd5e:	4852      	ldr	r0, [pc, #328]	@ (801cea8 <_printf_i+0x234>)
 801cd60:	6033      	str	r3, [r6, #0]
 801cd62:	bf14      	ite	ne
 801cd64:	230a      	movne	r3, #10
 801cd66:	2308      	moveq	r3, #8
 801cd68:	2100      	movs	r1, #0
 801cd6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801cd6e:	6866      	ldr	r6, [r4, #4]
 801cd70:	60a6      	str	r6, [r4, #8]
 801cd72:	2e00      	cmp	r6, #0
 801cd74:	db05      	blt.n	801cd82 <_printf_i+0x10e>
 801cd76:	6821      	ldr	r1, [r4, #0]
 801cd78:	432e      	orrs	r6, r5
 801cd7a:	f021 0104 	bic.w	r1, r1, #4
 801cd7e:	6021      	str	r1, [r4, #0]
 801cd80:	d04b      	beq.n	801ce1a <_printf_i+0x1a6>
 801cd82:	4616      	mov	r6, r2
 801cd84:	fbb5 f1f3 	udiv	r1, r5, r3
 801cd88:	fb03 5711 	mls	r7, r3, r1, r5
 801cd8c:	5dc7      	ldrb	r7, [r0, r7]
 801cd8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801cd92:	462f      	mov	r7, r5
 801cd94:	42bb      	cmp	r3, r7
 801cd96:	460d      	mov	r5, r1
 801cd98:	d9f4      	bls.n	801cd84 <_printf_i+0x110>
 801cd9a:	2b08      	cmp	r3, #8
 801cd9c:	d10b      	bne.n	801cdb6 <_printf_i+0x142>
 801cd9e:	6823      	ldr	r3, [r4, #0]
 801cda0:	07df      	lsls	r7, r3, #31
 801cda2:	d508      	bpl.n	801cdb6 <_printf_i+0x142>
 801cda4:	6923      	ldr	r3, [r4, #16]
 801cda6:	6861      	ldr	r1, [r4, #4]
 801cda8:	4299      	cmp	r1, r3
 801cdaa:	bfde      	ittt	le
 801cdac:	2330      	movle	r3, #48	@ 0x30
 801cdae:	f806 3c01 	strble.w	r3, [r6, #-1]
 801cdb2:	f106 36ff 	addle.w	r6, r6, #4294967295
 801cdb6:	1b92      	subs	r2, r2, r6
 801cdb8:	6122      	str	r2, [r4, #16]
 801cdba:	f8cd a000 	str.w	sl, [sp]
 801cdbe:	464b      	mov	r3, r9
 801cdc0:	aa03      	add	r2, sp, #12
 801cdc2:	4621      	mov	r1, r4
 801cdc4:	4640      	mov	r0, r8
 801cdc6:	f7ff fee7 	bl	801cb98 <_printf_common>
 801cdca:	3001      	adds	r0, #1
 801cdcc:	d14a      	bne.n	801ce64 <_printf_i+0x1f0>
 801cdce:	f04f 30ff 	mov.w	r0, #4294967295
 801cdd2:	b004      	add	sp, #16
 801cdd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cdd8:	6823      	ldr	r3, [r4, #0]
 801cdda:	f043 0320 	orr.w	r3, r3, #32
 801cdde:	6023      	str	r3, [r4, #0]
 801cde0:	4832      	ldr	r0, [pc, #200]	@ (801ceac <_printf_i+0x238>)
 801cde2:	2778      	movs	r7, #120	@ 0x78
 801cde4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801cde8:	6823      	ldr	r3, [r4, #0]
 801cdea:	6831      	ldr	r1, [r6, #0]
 801cdec:	061f      	lsls	r7, r3, #24
 801cdee:	f851 5b04 	ldr.w	r5, [r1], #4
 801cdf2:	d402      	bmi.n	801cdfa <_printf_i+0x186>
 801cdf4:	065f      	lsls	r7, r3, #25
 801cdf6:	bf48      	it	mi
 801cdf8:	b2ad      	uxthmi	r5, r5
 801cdfa:	6031      	str	r1, [r6, #0]
 801cdfc:	07d9      	lsls	r1, r3, #31
 801cdfe:	bf44      	itt	mi
 801ce00:	f043 0320 	orrmi.w	r3, r3, #32
 801ce04:	6023      	strmi	r3, [r4, #0]
 801ce06:	b11d      	cbz	r5, 801ce10 <_printf_i+0x19c>
 801ce08:	2310      	movs	r3, #16
 801ce0a:	e7ad      	b.n	801cd68 <_printf_i+0xf4>
 801ce0c:	4826      	ldr	r0, [pc, #152]	@ (801cea8 <_printf_i+0x234>)
 801ce0e:	e7e9      	b.n	801cde4 <_printf_i+0x170>
 801ce10:	6823      	ldr	r3, [r4, #0]
 801ce12:	f023 0320 	bic.w	r3, r3, #32
 801ce16:	6023      	str	r3, [r4, #0]
 801ce18:	e7f6      	b.n	801ce08 <_printf_i+0x194>
 801ce1a:	4616      	mov	r6, r2
 801ce1c:	e7bd      	b.n	801cd9a <_printf_i+0x126>
 801ce1e:	6833      	ldr	r3, [r6, #0]
 801ce20:	6825      	ldr	r5, [r4, #0]
 801ce22:	6961      	ldr	r1, [r4, #20]
 801ce24:	1d18      	adds	r0, r3, #4
 801ce26:	6030      	str	r0, [r6, #0]
 801ce28:	062e      	lsls	r6, r5, #24
 801ce2a:	681b      	ldr	r3, [r3, #0]
 801ce2c:	d501      	bpl.n	801ce32 <_printf_i+0x1be>
 801ce2e:	6019      	str	r1, [r3, #0]
 801ce30:	e002      	b.n	801ce38 <_printf_i+0x1c4>
 801ce32:	0668      	lsls	r0, r5, #25
 801ce34:	d5fb      	bpl.n	801ce2e <_printf_i+0x1ba>
 801ce36:	8019      	strh	r1, [r3, #0]
 801ce38:	2300      	movs	r3, #0
 801ce3a:	6123      	str	r3, [r4, #16]
 801ce3c:	4616      	mov	r6, r2
 801ce3e:	e7bc      	b.n	801cdba <_printf_i+0x146>
 801ce40:	6833      	ldr	r3, [r6, #0]
 801ce42:	1d1a      	adds	r2, r3, #4
 801ce44:	6032      	str	r2, [r6, #0]
 801ce46:	681e      	ldr	r6, [r3, #0]
 801ce48:	6862      	ldr	r2, [r4, #4]
 801ce4a:	2100      	movs	r1, #0
 801ce4c:	4630      	mov	r0, r6
 801ce4e:	f7e3 f9df 	bl	8000210 <memchr>
 801ce52:	b108      	cbz	r0, 801ce58 <_printf_i+0x1e4>
 801ce54:	1b80      	subs	r0, r0, r6
 801ce56:	6060      	str	r0, [r4, #4]
 801ce58:	6863      	ldr	r3, [r4, #4]
 801ce5a:	6123      	str	r3, [r4, #16]
 801ce5c:	2300      	movs	r3, #0
 801ce5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ce62:	e7aa      	b.n	801cdba <_printf_i+0x146>
 801ce64:	6923      	ldr	r3, [r4, #16]
 801ce66:	4632      	mov	r2, r6
 801ce68:	4649      	mov	r1, r9
 801ce6a:	4640      	mov	r0, r8
 801ce6c:	47d0      	blx	sl
 801ce6e:	3001      	adds	r0, #1
 801ce70:	d0ad      	beq.n	801cdce <_printf_i+0x15a>
 801ce72:	6823      	ldr	r3, [r4, #0]
 801ce74:	079b      	lsls	r3, r3, #30
 801ce76:	d413      	bmi.n	801cea0 <_printf_i+0x22c>
 801ce78:	68e0      	ldr	r0, [r4, #12]
 801ce7a:	9b03      	ldr	r3, [sp, #12]
 801ce7c:	4298      	cmp	r0, r3
 801ce7e:	bfb8      	it	lt
 801ce80:	4618      	movlt	r0, r3
 801ce82:	e7a6      	b.n	801cdd2 <_printf_i+0x15e>
 801ce84:	2301      	movs	r3, #1
 801ce86:	4632      	mov	r2, r6
 801ce88:	4649      	mov	r1, r9
 801ce8a:	4640      	mov	r0, r8
 801ce8c:	47d0      	blx	sl
 801ce8e:	3001      	adds	r0, #1
 801ce90:	d09d      	beq.n	801cdce <_printf_i+0x15a>
 801ce92:	3501      	adds	r5, #1
 801ce94:	68e3      	ldr	r3, [r4, #12]
 801ce96:	9903      	ldr	r1, [sp, #12]
 801ce98:	1a5b      	subs	r3, r3, r1
 801ce9a:	42ab      	cmp	r3, r5
 801ce9c:	dcf2      	bgt.n	801ce84 <_printf_i+0x210>
 801ce9e:	e7eb      	b.n	801ce78 <_printf_i+0x204>
 801cea0:	2500      	movs	r5, #0
 801cea2:	f104 0619 	add.w	r6, r4, #25
 801cea6:	e7f5      	b.n	801ce94 <_printf_i+0x220>
 801cea8:	080207e6 	.word	0x080207e6
 801ceac:	080207f7 	.word	0x080207f7

0801ceb0 <__sflush_r>:
 801ceb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ceb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ceb8:	0716      	lsls	r6, r2, #28
 801ceba:	4605      	mov	r5, r0
 801cebc:	460c      	mov	r4, r1
 801cebe:	d454      	bmi.n	801cf6a <__sflush_r+0xba>
 801cec0:	684b      	ldr	r3, [r1, #4]
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	dc02      	bgt.n	801cecc <__sflush_r+0x1c>
 801cec6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	dd48      	ble.n	801cf5e <__sflush_r+0xae>
 801cecc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cece:	2e00      	cmp	r6, #0
 801ced0:	d045      	beq.n	801cf5e <__sflush_r+0xae>
 801ced2:	2300      	movs	r3, #0
 801ced4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ced8:	682f      	ldr	r7, [r5, #0]
 801ceda:	6a21      	ldr	r1, [r4, #32]
 801cedc:	602b      	str	r3, [r5, #0]
 801cede:	d030      	beq.n	801cf42 <__sflush_r+0x92>
 801cee0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cee2:	89a3      	ldrh	r3, [r4, #12]
 801cee4:	0759      	lsls	r1, r3, #29
 801cee6:	d505      	bpl.n	801cef4 <__sflush_r+0x44>
 801cee8:	6863      	ldr	r3, [r4, #4]
 801ceea:	1ad2      	subs	r2, r2, r3
 801ceec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ceee:	b10b      	cbz	r3, 801cef4 <__sflush_r+0x44>
 801cef0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cef2:	1ad2      	subs	r2, r2, r3
 801cef4:	2300      	movs	r3, #0
 801cef6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cef8:	6a21      	ldr	r1, [r4, #32]
 801cefa:	4628      	mov	r0, r5
 801cefc:	47b0      	blx	r6
 801cefe:	1c43      	adds	r3, r0, #1
 801cf00:	89a3      	ldrh	r3, [r4, #12]
 801cf02:	d106      	bne.n	801cf12 <__sflush_r+0x62>
 801cf04:	6829      	ldr	r1, [r5, #0]
 801cf06:	291d      	cmp	r1, #29
 801cf08:	d82b      	bhi.n	801cf62 <__sflush_r+0xb2>
 801cf0a:	4a2a      	ldr	r2, [pc, #168]	@ (801cfb4 <__sflush_r+0x104>)
 801cf0c:	40ca      	lsrs	r2, r1
 801cf0e:	07d6      	lsls	r6, r2, #31
 801cf10:	d527      	bpl.n	801cf62 <__sflush_r+0xb2>
 801cf12:	2200      	movs	r2, #0
 801cf14:	6062      	str	r2, [r4, #4]
 801cf16:	04d9      	lsls	r1, r3, #19
 801cf18:	6922      	ldr	r2, [r4, #16]
 801cf1a:	6022      	str	r2, [r4, #0]
 801cf1c:	d504      	bpl.n	801cf28 <__sflush_r+0x78>
 801cf1e:	1c42      	adds	r2, r0, #1
 801cf20:	d101      	bne.n	801cf26 <__sflush_r+0x76>
 801cf22:	682b      	ldr	r3, [r5, #0]
 801cf24:	b903      	cbnz	r3, 801cf28 <__sflush_r+0x78>
 801cf26:	6560      	str	r0, [r4, #84]	@ 0x54
 801cf28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cf2a:	602f      	str	r7, [r5, #0]
 801cf2c:	b1b9      	cbz	r1, 801cf5e <__sflush_r+0xae>
 801cf2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cf32:	4299      	cmp	r1, r3
 801cf34:	d002      	beq.n	801cf3c <__sflush_r+0x8c>
 801cf36:	4628      	mov	r0, r5
 801cf38:	f7ff fbec 	bl	801c714 <_free_r>
 801cf3c:	2300      	movs	r3, #0
 801cf3e:	6363      	str	r3, [r4, #52]	@ 0x34
 801cf40:	e00d      	b.n	801cf5e <__sflush_r+0xae>
 801cf42:	2301      	movs	r3, #1
 801cf44:	4628      	mov	r0, r5
 801cf46:	47b0      	blx	r6
 801cf48:	4602      	mov	r2, r0
 801cf4a:	1c50      	adds	r0, r2, #1
 801cf4c:	d1c9      	bne.n	801cee2 <__sflush_r+0x32>
 801cf4e:	682b      	ldr	r3, [r5, #0]
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d0c6      	beq.n	801cee2 <__sflush_r+0x32>
 801cf54:	2b1d      	cmp	r3, #29
 801cf56:	d001      	beq.n	801cf5c <__sflush_r+0xac>
 801cf58:	2b16      	cmp	r3, #22
 801cf5a:	d11e      	bne.n	801cf9a <__sflush_r+0xea>
 801cf5c:	602f      	str	r7, [r5, #0]
 801cf5e:	2000      	movs	r0, #0
 801cf60:	e022      	b.n	801cfa8 <__sflush_r+0xf8>
 801cf62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cf66:	b21b      	sxth	r3, r3
 801cf68:	e01b      	b.n	801cfa2 <__sflush_r+0xf2>
 801cf6a:	690f      	ldr	r7, [r1, #16]
 801cf6c:	2f00      	cmp	r7, #0
 801cf6e:	d0f6      	beq.n	801cf5e <__sflush_r+0xae>
 801cf70:	0793      	lsls	r3, r2, #30
 801cf72:	680e      	ldr	r6, [r1, #0]
 801cf74:	bf08      	it	eq
 801cf76:	694b      	ldreq	r3, [r1, #20]
 801cf78:	600f      	str	r7, [r1, #0]
 801cf7a:	bf18      	it	ne
 801cf7c:	2300      	movne	r3, #0
 801cf7e:	eba6 0807 	sub.w	r8, r6, r7
 801cf82:	608b      	str	r3, [r1, #8]
 801cf84:	f1b8 0f00 	cmp.w	r8, #0
 801cf88:	dde9      	ble.n	801cf5e <__sflush_r+0xae>
 801cf8a:	6a21      	ldr	r1, [r4, #32]
 801cf8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801cf8e:	4643      	mov	r3, r8
 801cf90:	463a      	mov	r2, r7
 801cf92:	4628      	mov	r0, r5
 801cf94:	47b0      	blx	r6
 801cf96:	2800      	cmp	r0, #0
 801cf98:	dc08      	bgt.n	801cfac <__sflush_r+0xfc>
 801cf9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cfa2:	81a3      	strh	r3, [r4, #12]
 801cfa4:	f04f 30ff 	mov.w	r0, #4294967295
 801cfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cfac:	4407      	add	r7, r0
 801cfae:	eba8 0800 	sub.w	r8, r8, r0
 801cfb2:	e7e7      	b.n	801cf84 <__sflush_r+0xd4>
 801cfb4:	20400001 	.word	0x20400001

0801cfb8 <_fflush_r>:
 801cfb8:	b538      	push	{r3, r4, r5, lr}
 801cfba:	690b      	ldr	r3, [r1, #16]
 801cfbc:	4605      	mov	r5, r0
 801cfbe:	460c      	mov	r4, r1
 801cfc0:	b913      	cbnz	r3, 801cfc8 <_fflush_r+0x10>
 801cfc2:	2500      	movs	r5, #0
 801cfc4:	4628      	mov	r0, r5
 801cfc6:	bd38      	pop	{r3, r4, r5, pc}
 801cfc8:	b118      	cbz	r0, 801cfd2 <_fflush_r+0x1a>
 801cfca:	6a03      	ldr	r3, [r0, #32]
 801cfcc:	b90b      	cbnz	r3, 801cfd2 <_fflush_r+0x1a>
 801cfce:	f7ff f913 	bl	801c1f8 <__sinit>
 801cfd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d0f3      	beq.n	801cfc2 <_fflush_r+0xa>
 801cfda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801cfdc:	07d0      	lsls	r0, r2, #31
 801cfde:	d404      	bmi.n	801cfea <_fflush_r+0x32>
 801cfe0:	0599      	lsls	r1, r3, #22
 801cfe2:	d402      	bmi.n	801cfea <_fflush_r+0x32>
 801cfe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cfe6:	f7ff fb66 	bl	801c6b6 <__retarget_lock_acquire_recursive>
 801cfea:	4628      	mov	r0, r5
 801cfec:	4621      	mov	r1, r4
 801cfee:	f7ff ff5f 	bl	801ceb0 <__sflush_r>
 801cff2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cff4:	07da      	lsls	r2, r3, #31
 801cff6:	4605      	mov	r5, r0
 801cff8:	d4e4      	bmi.n	801cfc4 <_fflush_r+0xc>
 801cffa:	89a3      	ldrh	r3, [r4, #12]
 801cffc:	059b      	lsls	r3, r3, #22
 801cffe:	d4e1      	bmi.n	801cfc4 <_fflush_r+0xc>
 801d000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d002:	f7ff fb59 	bl	801c6b8 <__retarget_lock_release_recursive>
 801d006:	e7dd      	b.n	801cfc4 <_fflush_r+0xc>

0801d008 <fiprintf>:
 801d008:	b40e      	push	{r1, r2, r3}
 801d00a:	b503      	push	{r0, r1, lr}
 801d00c:	4601      	mov	r1, r0
 801d00e:	ab03      	add	r3, sp, #12
 801d010:	4805      	ldr	r0, [pc, #20]	@ (801d028 <fiprintf+0x20>)
 801d012:	f853 2b04 	ldr.w	r2, [r3], #4
 801d016:	6800      	ldr	r0, [r0, #0]
 801d018:	9301      	str	r3, [sp, #4]
 801d01a:	f7ff fca5 	bl	801c968 <_vfiprintf_r>
 801d01e:	b002      	add	sp, #8
 801d020:	f85d eb04 	ldr.w	lr, [sp], #4
 801d024:	b003      	add	sp, #12
 801d026:	4770      	bx	lr
 801d028:	2000003c 	.word	0x2000003c

0801d02c <__swhatbuf_r>:
 801d02c:	b570      	push	{r4, r5, r6, lr}
 801d02e:	460c      	mov	r4, r1
 801d030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d034:	2900      	cmp	r1, #0
 801d036:	b096      	sub	sp, #88	@ 0x58
 801d038:	4615      	mov	r5, r2
 801d03a:	461e      	mov	r6, r3
 801d03c:	da0d      	bge.n	801d05a <__swhatbuf_r+0x2e>
 801d03e:	89a3      	ldrh	r3, [r4, #12]
 801d040:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d044:	f04f 0100 	mov.w	r1, #0
 801d048:	bf14      	ite	ne
 801d04a:	2340      	movne	r3, #64	@ 0x40
 801d04c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d050:	2000      	movs	r0, #0
 801d052:	6031      	str	r1, [r6, #0]
 801d054:	602b      	str	r3, [r5, #0]
 801d056:	b016      	add	sp, #88	@ 0x58
 801d058:	bd70      	pop	{r4, r5, r6, pc}
 801d05a:	466a      	mov	r2, sp
 801d05c:	f000 f848 	bl	801d0f0 <_fstat_r>
 801d060:	2800      	cmp	r0, #0
 801d062:	dbec      	blt.n	801d03e <__swhatbuf_r+0x12>
 801d064:	9901      	ldr	r1, [sp, #4]
 801d066:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d06a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d06e:	4259      	negs	r1, r3
 801d070:	4159      	adcs	r1, r3
 801d072:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d076:	e7eb      	b.n	801d050 <__swhatbuf_r+0x24>

0801d078 <__smakebuf_r>:
 801d078:	898b      	ldrh	r3, [r1, #12]
 801d07a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d07c:	079d      	lsls	r5, r3, #30
 801d07e:	4606      	mov	r6, r0
 801d080:	460c      	mov	r4, r1
 801d082:	d507      	bpl.n	801d094 <__smakebuf_r+0x1c>
 801d084:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d088:	6023      	str	r3, [r4, #0]
 801d08a:	6123      	str	r3, [r4, #16]
 801d08c:	2301      	movs	r3, #1
 801d08e:	6163      	str	r3, [r4, #20]
 801d090:	b003      	add	sp, #12
 801d092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d094:	ab01      	add	r3, sp, #4
 801d096:	466a      	mov	r2, sp
 801d098:	f7ff ffc8 	bl	801d02c <__swhatbuf_r>
 801d09c:	9f00      	ldr	r7, [sp, #0]
 801d09e:	4605      	mov	r5, r0
 801d0a0:	4639      	mov	r1, r7
 801d0a2:	4630      	mov	r0, r6
 801d0a4:	f7ff fbaa 	bl	801c7fc <_malloc_r>
 801d0a8:	b948      	cbnz	r0, 801d0be <__smakebuf_r+0x46>
 801d0aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d0ae:	059a      	lsls	r2, r3, #22
 801d0b0:	d4ee      	bmi.n	801d090 <__smakebuf_r+0x18>
 801d0b2:	f023 0303 	bic.w	r3, r3, #3
 801d0b6:	f043 0302 	orr.w	r3, r3, #2
 801d0ba:	81a3      	strh	r3, [r4, #12]
 801d0bc:	e7e2      	b.n	801d084 <__smakebuf_r+0xc>
 801d0be:	89a3      	ldrh	r3, [r4, #12]
 801d0c0:	6020      	str	r0, [r4, #0]
 801d0c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d0c6:	81a3      	strh	r3, [r4, #12]
 801d0c8:	9b01      	ldr	r3, [sp, #4]
 801d0ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d0ce:	b15b      	cbz	r3, 801d0e8 <__smakebuf_r+0x70>
 801d0d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d0d4:	4630      	mov	r0, r6
 801d0d6:	f000 f81d 	bl	801d114 <_isatty_r>
 801d0da:	b128      	cbz	r0, 801d0e8 <__smakebuf_r+0x70>
 801d0dc:	89a3      	ldrh	r3, [r4, #12]
 801d0de:	f023 0303 	bic.w	r3, r3, #3
 801d0e2:	f043 0301 	orr.w	r3, r3, #1
 801d0e6:	81a3      	strh	r3, [r4, #12]
 801d0e8:	89a3      	ldrh	r3, [r4, #12]
 801d0ea:	431d      	orrs	r5, r3
 801d0ec:	81a5      	strh	r5, [r4, #12]
 801d0ee:	e7cf      	b.n	801d090 <__smakebuf_r+0x18>

0801d0f0 <_fstat_r>:
 801d0f0:	b538      	push	{r3, r4, r5, lr}
 801d0f2:	4d07      	ldr	r5, [pc, #28]	@ (801d110 <_fstat_r+0x20>)
 801d0f4:	2300      	movs	r3, #0
 801d0f6:	4604      	mov	r4, r0
 801d0f8:	4608      	mov	r0, r1
 801d0fa:	4611      	mov	r1, r2
 801d0fc:	602b      	str	r3, [r5, #0]
 801d0fe:	f7e4 fee5 	bl	8001ecc <_fstat>
 801d102:	1c43      	adds	r3, r0, #1
 801d104:	d102      	bne.n	801d10c <_fstat_r+0x1c>
 801d106:	682b      	ldr	r3, [r5, #0]
 801d108:	b103      	cbz	r3, 801d10c <_fstat_r+0x1c>
 801d10a:	6023      	str	r3, [r4, #0]
 801d10c:	bd38      	pop	{r3, r4, r5, pc}
 801d10e:	bf00      	nop
 801d110:	20027828 	.word	0x20027828

0801d114 <_isatty_r>:
 801d114:	b538      	push	{r3, r4, r5, lr}
 801d116:	4d06      	ldr	r5, [pc, #24]	@ (801d130 <_isatty_r+0x1c>)
 801d118:	2300      	movs	r3, #0
 801d11a:	4604      	mov	r4, r0
 801d11c:	4608      	mov	r0, r1
 801d11e:	602b      	str	r3, [r5, #0]
 801d120:	f7e4 fee4 	bl	8001eec <_isatty>
 801d124:	1c43      	adds	r3, r0, #1
 801d126:	d102      	bne.n	801d12e <_isatty_r+0x1a>
 801d128:	682b      	ldr	r3, [r5, #0]
 801d12a:	b103      	cbz	r3, 801d12e <_isatty_r+0x1a>
 801d12c:	6023      	str	r3, [r4, #0]
 801d12e:	bd38      	pop	{r3, r4, r5, pc}
 801d130:	20027828 	.word	0x20027828

0801d134 <_sbrk_r>:
 801d134:	b538      	push	{r3, r4, r5, lr}
 801d136:	4d06      	ldr	r5, [pc, #24]	@ (801d150 <_sbrk_r+0x1c>)
 801d138:	2300      	movs	r3, #0
 801d13a:	4604      	mov	r4, r0
 801d13c:	4608      	mov	r0, r1
 801d13e:	602b      	str	r3, [r5, #0]
 801d140:	f7e4 feec 	bl	8001f1c <_sbrk>
 801d144:	1c43      	adds	r3, r0, #1
 801d146:	d102      	bne.n	801d14e <_sbrk_r+0x1a>
 801d148:	682b      	ldr	r3, [r5, #0]
 801d14a:	b103      	cbz	r3, 801d14e <_sbrk_r+0x1a>
 801d14c:	6023      	str	r3, [r4, #0]
 801d14e:	bd38      	pop	{r3, r4, r5, pc}
 801d150:	20027828 	.word	0x20027828

0801d154 <abort>:
 801d154:	b508      	push	{r3, lr}
 801d156:	2006      	movs	r0, #6
 801d158:	f000 f82c 	bl	801d1b4 <raise>
 801d15c:	2001      	movs	r0, #1
 801d15e:	f7e4 fe65 	bl	8001e2c <_exit>

0801d162 <_raise_r>:
 801d162:	291f      	cmp	r1, #31
 801d164:	b538      	push	{r3, r4, r5, lr}
 801d166:	4605      	mov	r5, r0
 801d168:	460c      	mov	r4, r1
 801d16a:	d904      	bls.n	801d176 <_raise_r+0x14>
 801d16c:	2316      	movs	r3, #22
 801d16e:	6003      	str	r3, [r0, #0]
 801d170:	f04f 30ff 	mov.w	r0, #4294967295
 801d174:	bd38      	pop	{r3, r4, r5, pc}
 801d176:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d178:	b112      	cbz	r2, 801d180 <_raise_r+0x1e>
 801d17a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d17e:	b94b      	cbnz	r3, 801d194 <_raise_r+0x32>
 801d180:	4628      	mov	r0, r5
 801d182:	f000 f831 	bl	801d1e8 <_getpid_r>
 801d186:	4622      	mov	r2, r4
 801d188:	4601      	mov	r1, r0
 801d18a:	4628      	mov	r0, r5
 801d18c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d190:	f000 b818 	b.w	801d1c4 <_kill_r>
 801d194:	2b01      	cmp	r3, #1
 801d196:	d00a      	beq.n	801d1ae <_raise_r+0x4c>
 801d198:	1c59      	adds	r1, r3, #1
 801d19a:	d103      	bne.n	801d1a4 <_raise_r+0x42>
 801d19c:	2316      	movs	r3, #22
 801d19e:	6003      	str	r3, [r0, #0]
 801d1a0:	2001      	movs	r0, #1
 801d1a2:	e7e7      	b.n	801d174 <_raise_r+0x12>
 801d1a4:	2100      	movs	r1, #0
 801d1a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d1aa:	4620      	mov	r0, r4
 801d1ac:	4798      	blx	r3
 801d1ae:	2000      	movs	r0, #0
 801d1b0:	e7e0      	b.n	801d174 <_raise_r+0x12>
	...

0801d1b4 <raise>:
 801d1b4:	4b02      	ldr	r3, [pc, #8]	@ (801d1c0 <raise+0xc>)
 801d1b6:	4601      	mov	r1, r0
 801d1b8:	6818      	ldr	r0, [r3, #0]
 801d1ba:	f7ff bfd2 	b.w	801d162 <_raise_r>
 801d1be:	bf00      	nop
 801d1c0:	2000003c 	.word	0x2000003c

0801d1c4 <_kill_r>:
 801d1c4:	b538      	push	{r3, r4, r5, lr}
 801d1c6:	4d07      	ldr	r5, [pc, #28]	@ (801d1e4 <_kill_r+0x20>)
 801d1c8:	2300      	movs	r3, #0
 801d1ca:	4604      	mov	r4, r0
 801d1cc:	4608      	mov	r0, r1
 801d1ce:	4611      	mov	r1, r2
 801d1d0:	602b      	str	r3, [r5, #0]
 801d1d2:	f7e4 fe19 	bl	8001e08 <_kill>
 801d1d6:	1c43      	adds	r3, r0, #1
 801d1d8:	d102      	bne.n	801d1e0 <_kill_r+0x1c>
 801d1da:	682b      	ldr	r3, [r5, #0]
 801d1dc:	b103      	cbz	r3, 801d1e0 <_kill_r+0x1c>
 801d1de:	6023      	str	r3, [r4, #0]
 801d1e0:	bd38      	pop	{r3, r4, r5, pc}
 801d1e2:	bf00      	nop
 801d1e4:	20027828 	.word	0x20027828

0801d1e8 <_getpid_r>:
 801d1e8:	f7e4 be06 	b.w	8001df8 <_getpid>

0801d1ec <_init>:
 801d1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1ee:	bf00      	nop
 801d1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d1f2:	bc08      	pop	{r3}
 801d1f4:	469e      	mov	lr, r3
 801d1f6:	4770      	bx	lr

0801d1f8 <_fini>:
 801d1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1fa:	bf00      	nop
 801d1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d1fe:	bc08      	pop	{r3}
 801d200:	469e      	mov	lr, r3
 801d202:	4770      	bx	lr
