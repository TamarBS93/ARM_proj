
Final_ARM_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018084  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032f4  08018254  08018254  00019254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b548  0801b548  0001d1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b548  0801b548  0001c548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b550  0801b550  0001d1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b550  0801b550  0001c550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b554  0801b554  0001c554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0801b558  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  0801b5e4  0001d08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  0801b684  0001d12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002753c  200001cc  0801b724  0001d1cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20027708  0801b724  0001d708  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001d1cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00039c1d  00000000  00000000  0001d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000870e  00000000  00000000  00056e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002ac0  00000000  00000000  0005f528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000021db  00000000  00000000  00061fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00013329  00000000  00000000  000641c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004090f  00000000  00000000  000774ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011d40d  00000000  00000000  000b7dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001d5208  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000bc18  00000000  00000000  001d524c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  001e0e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801823c 	.word	0x0801823c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	0801823c 	.word	0x0801823c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fb11 	bl	8001c06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f880 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fa4e 	bl	8000a88 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 fa12 	bl	8000a14 <MX_DMA_Init>
  MX_I2C1_Init();
 80005f0:	f000 f8e2 	bl	80007b8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 f980 	bl	80008f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 f9de 	bl	80009b8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f94c 	bl	8000898 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000600:	f000 f9aa 	bl	8000958 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8000604:	f000 f918 	bl	8000838 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  // ethernetif_init(&gnetif);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000608:	f008 f826 	bl	8008658 <osKernelInitialize>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xUartRxSemaphore */
  xUartRxSemaphoreHandle = osSemaphoreNew(1, 1, &xUartRxSemaphore_attributes);
 800060c:	4a23      	ldr	r2, [pc, #140]	@ (800069c <main+0xc0>)
 800060e:	2101      	movs	r1, #1
 8000610:	2001      	movs	r0, #1
 8000612:	f008 facf 	bl	8008bb4 <osSemaphoreNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a21      	ldr	r2, [pc, #132]	@ (80006a0 <main+0xc4>)
 800061a:	6013      	str	r3, [r2, #0]

  /* creation of xUartTxSemaphore */
  xUartTxSemaphoreHandle = osSemaphoreNew(1, 1, &xUartTxSemaphore_attributes);
 800061c:	4a21      	ldr	r2, [pc, #132]	@ (80006a4 <main+0xc8>)
 800061e:	2101      	movs	r1, #1
 8000620:	2001      	movs	r0, #1
 8000622:	f008 fac7 	bl	8008bb4 <osSemaphoreNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a1f      	ldr	r2, [pc, #124]	@ (80006a8 <main+0xcc>)
 800062a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  if (xUartTxSemaphoreHandle == NULL || xUartRxSemaphoreHandle == NULL){
 800062c:	4b1e      	ldr	r3, [pc, #120]	@ (80006a8 <main+0xcc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d003      	beq.n	800063c <main+0x60>
 8000634:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <main+0xc4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d102      	bne.n	8000642 <main+0x66>
	  printf("Failed to create semaphores!\n");
 800063c:	481b      	ldr	r0, [pc, #108]	@ (80006ac <main+0xd0>)
 800063e:	f016 fea1 	bl	8017384 <puts>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of testsQ */
  testsQHandle = osMessageQueueNew (16, 4, &testsQ_attributes);
 8000642:	4a1b      	ldr	r2, [pc, #108]	@ (80006b0 <main+0xd4>)
 8000644:	2104      	movs	r1, #4
 8000646:	2010      	movs	r0, #16
 8000648:	f008 fc0e 	bl	8008e68 <osMessageQueueNew>
 800064c:	4603      	mov	r3, r0
 800064e:	4a19      	ldr	r2, [pc, #100]	@ (80006b4 <main+0xd8>)
 8000650:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(lwip_initiation, NULL, &defaultTask_attributes);
 8000652:	4a19      	ldr	r2, [pc, #100]	@ (80006b8 <main+0xdc>)
 8000654:	2100      	movs	r1, #0
 8000656:	4819      	ldr	r0, [pc, #100]	@ (80006bc <main+0xe0>)
 8000658:	f008 f890 	bl	800877c <osThreadNew>
 800065c:	4603      	mov	r3, r0
 800065e:	4a18      	ldr	r2, [pc, #96]	@ (80006c0 <main+0xe4>)
 8000660:	6013      	str	r3, [r2, #0]

  /* creation of blink_task */
  blink_taskHandle = osThreadNew(blinking_blue, NULL, &blink_task_attributes);
 8000662:	4a18      	ldr	r2, [pc, #96]	@ (80006c4 <main+0xe8>)
 8000664:	2100      	movs	r1, #0
 8000666:	4818      	ldr	r0, [pc, #96]	@ (80006c8 <main+0xec>)
 8000668:	f008 f888 	bl	800877c <osThreadNew>
 800066c:	4603      	mov	r3, r0
 800066e:	4a17      	ldr	r2, [pc, #92]	@ (80006cc <main+0xf0>)
 8000670:	6013      	str	r3, [r2, #0]

  /* creation of udp_task */
  udp_taskHandle = osThreadNew(udp_function, NULL, &udp_task_attributes);
 8000672:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <main+0xf4>)
 8000674:	2100      	movs	r1, #0
 8000676:	4817      	ldr	r0, [pc, #92]	@ (80006d4 <main+0xf8>)
 8000678:	f008 f880 	bl	800877c <osThreadNew>
 800067c:	4603      	mov	r3, r0
 800067e:	4a16      	ldr	r2, [pc, #88]	@ (80006d8 <main+0xfc>)
 8000680:	6013      	str	r3, [r2, #0]

  /* creation of performing_task */
  performing_taskHandle = osThreadNew(perform_tests, NULL, &performing_task_attributes);
 8000682:	4a16      	ldr	r2, [pc, #88]	@ (80006dc <main+0x100>)
 8000684:	2100      	movs	r1, #0
 8000686:	4816      	ldr	r0, [pc, #88]	@ (80006e0 <main+0x104>)
 8000688:	f008 f878 	bl	800877c <osThreadNew>
 800068c:	4603      	mov	r3, r0
 800068e:	4a15      	ldr	r2, [pc, #84]	@ (80006e4 <main+0x108>)
 8000690:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000692:	f008 f815 	bl	80086c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	bf00      	nop
 8000698:	e7fd      	b.n	8000696 <main+0xba>
 800069a:	bf00      	nop
 800069c:	0801b2fc 	.word	0x0801b2fc
 80006a0:	20000a70 	.word	0x20000a70
 80006a4:	0801b30c 	.word	0x0801b30c
 80006a8:	20000a74 	.word	0x20000a74
 80006ac:	08018398 	.word	0x08018398
 80006b0:	0801b2e4 	.word	0x0801b2e4
 80006b4:	20000a6c 	.word	0x20000a6c
 80006b8:	0801b254 	.word	0x0801b254
 80006bc:	08000dc5 	.word	0x08000dc5
 80006c0:	20000a5c 	.word	0x20000a5c
 80006c4:	0801b278 	.word	0x0801b278
 80006c8:	08000dd9 	.word	0x08000dd9
 80006cc:	20000a60 	.word	0x20000a60
 80006d0:	0801b29c 	.word	0x0801b29c
 80006d4:	08000e1d 	.word	0x08000e1d
 80006d8:	20000a64 	.word	0x20000a64
 80006dc:	0801b2c0 	.word	0x0801b2c0
 80006e0:	08000e31 	.word	0x08000e31
 80006e4:	20000a68 	.word	0x20000a68

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	@ 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	2230      	movs	r2, #48	@ 0x30
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f016 ff34 	bl	8017564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800070c:	f003 fe88 	bl	8004420 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <SystemClock_Config+0xc8>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000714:	4a26      	ldr	r2, [pc, #152]	@ (80007b0 <SystemClock_Config+0xc8>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	@ 0x40
 800071c:	4b24      	ldr	r3, [pc, #144]	@ (80007b0 <SystemClock_Config+0xc8>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000728:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <SystemClock_Config+0xcc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000730:	4a20      	ldr	r2, [pc, #128]	@ (80007b4 <SystemClock_Config+0xcc>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <SystemClock_Config+0xcc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000744:	2301      	movs	r3, #1
 8000746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000748:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000758:	2304      	movs	r3, #4
 800075a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800075c:	2348      	movs	r3, #72	@ 0x48
 800075e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000764:	2303      	movs	r3, #3
 8000766:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	4618      	mov	r0, r3
 800076e:	f003 fe67 	bl	8004440 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000778:	f000 fbca 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077c:	230f      	movs	r3, #15
 800077e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2302      	movs	r3, #2
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	2102      	movs	r1, #2
 8000798:	4618      	mov	r0, r3
 800079a:	f004 f8f5 	bl	8004988 <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007a4:	f000 fbb4 	bl	8000f10 <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3750      	adds	r7, #80	@ 0x50
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <MX_I2C1_Init+0x74>)
 80007be:	4a1c      	ldr	r2, [pc, #112]	@ (8000830 <MX_I2C1_Init+0x78>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_I2C1_Init+0x74>)
 80007c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000834 <MX_I2C1_Init+0x7c>)
 80007c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007c8:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ce:	4b17      	ldr	r3, [pc, #92]	@ (800082c <MX_I2C1_Init+0x74>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007da:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_I2C1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f2:	480e      	ldr	r0, [pc, #56]	@ (800082c <MX_I2C1_Init+0x74>)
 80007f4:	f003 fba6 	bl	8003f44 <HAL_I2C_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007fe:	f000 fb87 	bl	8000f10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000802:	2100      	movs	r1, #0
 8000804:	4809      	ldr	r0, [pc, #36]	@ (800082c <MX_I2C1_Init+0x74>)
 8000806:	f003 fc39 	bl	800407c <HAL_I2CEx_ConfigAnalogFilter>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000810:	f000 fb7e 	bl	8000f10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000814:	2100      	movs	r1, #0
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_I2C1_Init+0x74>)
 8000818:	f003 fc7b 	bl	8004112 <HAL_I2CEx_ConfigDigitalFilter>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000822:	f000 fb75 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200001e8 	.word	0x200001e8
 8000830:	40005400 	.word	0x40005400
 8000834:	00808cd2 	.word	0x00808cd2

08000838 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_UART4_Init+0x58>)
 800083e:	4a15      	ldr	r2, [pc, #84]	@ (8000894 <MX_UART4_Init+0x5c>)
 8000840:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_UART4_Init+0x58>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_UART4_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_UART4_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_UART4_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_UART4_Init+0x58>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_UART4_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_UART4_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_UART4_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_UART4_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_UART4_Init+0x58>)
 800087c:	f005 f99a 	bl	8005bb4 <HAL_UART_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000886:	f000 fb43 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000023c 	.word	0x2000023c
 8000894:	40004c00 	.word	0x40004c00

08000898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 800089e:	4a15      	ldr	r2, [pc, #84]	@ (80008f4 <MX_USART2_UART_Init+0x5c>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a2:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008dc:	f005 f96a 	bl	8005bb4 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008e6:	f000 fb13 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200002c4 	.word	0x200002c4
 80008f4:	40004400 	.word	0x40004400

080008f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	@ (8000954 <MX_USART3_UART_Init+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 800093c:	f005 f93a 	bl	8005bb4 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 fae3 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000034c 	.word	0x2000034c
 8000954:	40004800 	.word	0x40004800

08000958 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_USART6_UART_Init+0x58>)
 800095e:	4a15      	ldr	r2, [pc, #84]	@ (80009b4 <MX_USART6_UART_Init+0x5c>)
 8000960:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000962:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <MX_USART6_UART_Init+0x58>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_USART6_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <MX_USART6_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_USART6_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_USART6_UART_Init+0x58>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <MX_USART6_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_USART6_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <MX_USART6_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_USART6_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_USART6_UART_Init+0x58>)
 800099c:	f005 f90a 	bl	8005bb4 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80009a6:	f000 fab3 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200003d4 	.word	0x200003d4
 80009b4:	40011400 	.word	0x40011400

080009b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2206      	movs	r2, #6
 80009c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	2202      	movs	r2, #2
 80009da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2201      	movs	r2, #1
 80009e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fc:	f003 fbd5 	bl	80041aa <HAL_PCD_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 fa83 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000057c 	.word	0x2000057c

08000a14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <MX_DMA_Init+0x70>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a19      	ldr	r2, [pc, #100]	@ (8000a84 <MX_DMA_Init+0x70>)
 8000a20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <MX_DMA_Init+0x70>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a32:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_DMA_Init+0x70>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a13      	ldr	r2, [pc, #76]	@ (8000a84 <MX_DMA_Init+0x70>)
 8000a38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_DMA_Init+0x70>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2106      	movs	r1, #6
 8000a4e:	200d      	movs	r0, #13
 8000a50:	f001 f9e2 	bl	8001e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a54:	200d      	movs	r0, #13
 8000a56:	f001 f9fb 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 6, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2106      	movs	r1, #6
 8000a5e:	2011      	movs	r0, #17
 8000a60:	f001 f9da 	bl	8001e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a64:	2011      	movs	r0, #17
 8000a66:	f001 f9f3 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 6, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2106      	movs	r1, #6
 8000a6e:	203a      	movs	r0, #58	@ 0x3a
 8000a70:	f001 f9d2 	bl	8001e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a74:	203a      	movs	r0, #58	@ 0x3a
 8000a76:	f001 f9eb 	bl	8001e50 <HAL_NVIC_EnableIRQ>

}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	@ 0x30
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	4b47      	ldr	r3, [pc, #284]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a46      	ldr	r2, [pc, #280]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b44      	ldr	r3, [pc, #272]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab6:	4b41      	ldr	r3, [pc, #260]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a40      	ldr	r2, [pc, #256]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b3b      	ldr	r3, [pc, #236]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a3a      	ldr	r2, [pc, #232]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b38      	ldr	r3, [pc, #224]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b35      	ldr	r3, [pc, #212]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a34      	ldr	r2, [pc, #208]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b32      	ldr	r3, [pc, #200]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afe:	4b2f      	ldr	r3, [pc, #188]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a2e      	ldr	r2, [pc, #184]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b16:	4b29      	ldr	r3, [pc, #164]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a28      	ldr	r2, [pc, #160]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b26      	ldr	r3, [pc, #152]	@ (8000bbc <MX_GPIO_Init+0x134>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b34:	4822      	ldr	r0, [pc, #136]	@ (8000bc0 <MX_GPIO_Init+0x138>)
 8000b36:	f003 f9d1 	bl	8003edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2140      	movs	r1, #64	@ 0x40
 8000b3e:	4821      	ldr	r0, [pc, #132]	@ (8000bc4 <MX_GPIO_Init+0x13c>)
 8000b40:	f003 f9cc 	bl	8003edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	481b      	ldr	r0, [pc, #108]	@ (8000bc8 <MX_GPIO_Init+0x140>)
 8000b5c:	f003 f812 	bl	8003b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b60:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4811      	ldr	r0, [pc, #68]	@ (8000bc0 <MX_GPIO_Init+0x138>)
 8000b7a:	f003 f803 	bl	8003b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b7e:	2340      	movs	r3, #64	@ 0x40
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	480b      	ldr	r0, [pc, #44]	@ (8000bc4 <MX_GPIO_Init+0x13c>)
 8000b96:	f002 fff5 	bl	8003b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b9a:	2380      	movs	r3, #128	@ 0x80
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_GPIO_Init+0x13c>)
 8000bae:	f002 ffe9 	bl	8003b84 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3730      	adds	r7, #48	@ 0x30
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020400 	.word	0x40020400
 8000bc4:	40021800 	.word	0x40021800
 8000bc8:	40020800 	.word	0x40020800

08000bcc <vApplicationStackOverflowHook>:
 *
 * @param xTask Task handle of the task whose stack overflowed.
 * @param pcTaskName Pointer to the name of the task whose stack overflowed.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
    // A stack overflow has been detected. This is a critical error.
    // The system is in an unstable state.
    // It is generally not safe to continue execution or call complex functions.

    printf("\n!!! STACK OVERFLOW DETECTED !!!\n");
 8000bd6:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <vApplicationStackOverflowHook+0x50>)
 8000bd8:	f016 fbd4 	bl	8017384 <puts>
    printf("Task: %s\n", pcTaskName);
 8000bdc:	6839      	ldr	r1, [r7, #0]
 8000bde:	4810      	ldr	r0, [pc, #64]	@ (8000c20 <vApplicationStackOverflowHook+0x54>)
 8000be0:	f016 fb68 	bl	80172b4 <iprintf>
    printf("Handle: 0x%lX\n", (uint32_t)xTask);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4619      	mov	r1, r3
 8000be8:	480e      	ldr	r0, [pc, #56]	@ (8000c24 <vApplicationStackOverflowHook+0x58>)
 8000bea:	f016 fb63 	bl	80172b4 <iprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bf2:	b672      	cpsid	i
 8000bf4:	f383 8811 	msr	BASEPRI, r3
 8000bf8:	f3bf 8f6f 	isb	sy
 8000bfc:	f3bf 8f4f 	dsb	sy
 8000c00:	b662      	cpsie	i
 8000c02:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000c04:	bf00      	nop
    // Disable interrupts to prevent further execution and potential damage
    taskDISABLE_INTERRUPTS();
    for(;;)
    {
        // RED LED toggle for visual indication
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000c06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c0a:	4807      	ldr	r0, [pc, #28]	@ (8000c28 <vApplicationStackOverflowHook+0x5c>)
 8000c0c:	f003 f97f 	bl	8003f0e <HAL_GPIO_TogglePin>
        osDelay(1000);
 8000c10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c14:	f007 fe58 	bl	80088c8 <osDelay>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000c18:	bf00      	nop
 8000c1a:	e7f4      	b.n	8000c06 <vApplicationStackOverflowHook+0x3a>
 8000c1c:	080183b8 	.word	0x080183b8
 8000c20:	080183dc 	.word	0x080183dc
 8000c24:	080183e8 	.word	0x080183e8
 8000c28:	40020400 	.word	0x40020400

08000c2c <udp_receive_init>:
    }
}

void udp_receive_init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	//printf("udp_receive_init() called\n");

    udp_pcb_handle = udp_new();
 8000c30:	f013 fb52 	bl	80142d8 <udp_new>
 8000c34:	4603      	mov	r3, r0
 8000c36:	4a13      	ldr	r2, [pc, #76]	@ (8000c84 <udp_receive_init+0x58>)
 8000c38:	6013      	str	r3, [r2, #0]
    if (!udp_pcb_handle) {
 8000c3a:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <udp_receive_init+0x58>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d103      	bne.n	8000c4a <udp_receive_init+0x1e>
        printf("Failed to create UDP PCB\n");
 8000c42:	4811      	ldr	r0, [pc, #68]	@ (8000c88 <udp_receive_init+0x5c>)
 8000c44:	f016 fb9e 	bl	8017384 <puts>
        return;
 8000c48:	e01a      	b.n	8000c80 <udp_receive_init+0x54>
    }

    if (udp_bind(udp_pcb_handle, IP_ADDR_ANY, LOCAL_PORT) != ERR_OK) {
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <udp_receive_init+0x58>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f241 328d 	movw	r2, #5005	@ 0x138d
 8000c52:	490e      	ldr	r1, [pc, #56]	@ (8000c8c <udp_receive_init+0x60>)
 8000c54:	4618      	mov	r0, r3
 8000c56:	f013 fa97 	bl	8014188 <udp_bind>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <udp_receive_init+0x3c>
        printf("UDP bind failed\n");
 8000c60:	480b      	ldr	r0, [pc, #44]	@ (8000c90 <udp_receive_init+0x64>)
 8000c62:	f016 fb8f 	bl	8017384 <puts>
        return;
 8000c66:	e00b      	b.n	8000c80 <udp_receive_init+0x54>
    }

    udp_recv(udp_pcb_handle, udp_receive_callback, NULL);
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <udp_receive_init+0x58>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4909      	ldr	r1, [pc, #36]	@ (8000c94 <udp_receive_init+0x68>)
 8000c70:	4618      	mov	r0, r3
 8000c72:	f013 fb11 	bl	8014298 <udp_recv>
    printf("UDP ready, listening on port %d\n", LOCAL_PORT);
 8000c76:	f241 318d 	movw	r1, #5005	@ 0x138d
 8000c7a:	4807      	ldr	r0, [pc, #28]	@ (8000c98 <udp_receive_init+0x6c>)
 8000c7c:	f016 fb1a 	bl	80172b4 <iprintf>
}
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000a78 	.word	0x20000a78
 8000c88:	080183f8 	.word	0x080183f8
 8000c8c:	0801b458 	.word	0x0801b458
 8000c90:	08018414 	.word	0x08018414
 8000c94:	08000c9d 	.word	0x08000c9d
 8000c98:	08018424 	.word	0x08018424

08000c9c <udp_receive_callback>:

void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af02      	add	r7, sp, #8
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	603b      	str	r3, [r7, #0]
    if (p != NULL) {
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d06d      	beq.n	8000d8c <udp_receive_callback+0xf0>
        printf("Received from %s:%d -> %.*s\n",
 8000cb0:	6838      	ldr	r0, [r7, #0]
 8000cb2:	f014 ff0b 	bl	8015acc <ip4addr_ntoa>
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	8c3a      	ldrh	r2, [r7, #32]
               ipaddr_ntoa(addr), port, p->len, (char *)p->payload);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	895b      	ldrh	r3, [r3, #10]
        printf("Received from %s:%d -> %.*s\n",
 8000cbe:	4618      	mov	r0, r3
               ipaddr_ntoa(addr), port, p->len, (char *)p->payload);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
        printf("Received from %s:%d -> %.*s\n",
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4832      	ldr	r0, [pc, #200]	@ (8000d94 <udp_receive_callback+0xf8>)
 8000cca:	f016 faf3 	bl	80172b4 <iprintf>

        if (p->len >= sizeof(test_command_t)) {
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	895b      	ldrh	r3, [r3, #10]
 8000cd2:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8000cd6:	d950      	bls.n	8000d7a <udp_receive_callback+0xde>
            test_command_t *cmd = (test_command_t *)pvPortMalloc(sizeof(test_command_t));
 8000cd8:	f240 1007 	movw	r0, #263	@ 0x107
 8000cdc:	f00b fbac 	bl	800c438 <pvPortMalloc>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	617b      	str	r3, [r7, #20]
            if (cmd != NULL) {
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d029      	beq.n	8000d3e <udp_receive_callback+0xa2>
			   // Copy the data from the pbuf payload to the allocated memory
			   memcpy(cmd, p->payload, sizeof(test_command_t)); // Only copy the struct size
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f240 1207 	movw	r2, #263	@ 0x107
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f016 fd08 	bl	801770a <memcpy>
				// Debug print received data
				printf("Received Test Command:\n");
 8000cfa:	4827      	ldr	r0, [pc, #156]	@ (8000d98 <udp_receive_callback+0xfc>)
 8000cfc:	f016 fb42 	bl	8017384 <puts>
				printf("test_id: %lu\n", cmd->test_id);
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4825      	ldr	r0, [pc, #148]	@ (8000d9c <udp_receive_callback+0x100>)
 8000d08:	f016 fad4 	bl	80172b4 <iprintf>
				printf("peripheral bitfield: 0x%02X\n", cmd->peripheral);
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	791b      	ldrb	r3, [r3, #4]
 8000d10:	4619      	mov	r1, r3
 8000d12:	4823      	ldr	r0, [pc, #140]	@ (8000da0 <udp_receive_callback+0x104>)
 8000d14:	f016 face 	bl	80172b4 <iprintf>
				printf("iterations: %u\n", cmd->iterations);
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	795b      	ldrb	r3, [r3, #5]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4821      	ldr	r0, [pc, #132]	@ (8000da4 <udp_receive_callback+0x108>)
 8000d20:	f016 fac8 	bl	80172b4 <iprintf>
				printf("bit pattern length: %u\n", cmd->bit_pattern_length);
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	799b      	ldrb	r3, [r3, #6]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	481f      	ldr	r0, [pc, #124]	@ (8000da8 <udp_receive_callback+0x10c>)
 8000d2c:	f016 fac2 	bl	80172b4 <iprintf>
				printf("bit pattern: %s\n",cmd->bit_pattern);
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	3307      	adds	r3, #7
 8000d34:	4619      	mov	r1, r3
 8000d36:	481d      	ldr	r0, [pc, #116]	@ (8000dac <udp_receive_callback+0x110>)
 8000d38:	f016 fabc 	bl	80172b4 <iprintf>
 8000d3c:	e002      	b.n	8000d44 <udp_receive_callback+0xa8>
            }
            else{
                printf("Failed to allocate memory for test_command_t!\n");
 8000d3e:	481c      	ldr	r0, [pc, #112]	@ (8000db0 <udp_receive_callback+0x114>)
 8000d40:	f016 fb20 	bl	8017384 <puts>
            }
            // Send the POINTER to the newly allocated and copied* data to the queue
            if (xQueueSendToBack(testsQHandle, &cmd, 1) != pdPASS){ // Pass address of pointer
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <udp_receive_callback+0x118>)
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	f107 0114 	add.w	r1, r7, #20
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f008 fd6a 	bl	8009828 <xQueueGenericSend>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d007      	beq.n	8000d6a <udp_receive_callback+0xce>
                printf("Failed to send data to tests queue.\n");
 8000d5a:	4817      	ldr	r0, [pc, #92]	@ (8000db8 <udp_receive_callback+0x11c>)
 8000d5c:	f016 fb12 	bl	8017384 <puts>
                // If send fails, free the allocated memory immediately
                vPortFree(cmd);
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f00b fc36 	bl	800c5d4 <vPortFree>
 8000d68:	e00d      	b.n	8000d86 <udp_receive_callback+0xea>
            } else {
                // Only notify if successfully sent to queue
            	//printf("udp_receive_callback sent a command to the tests queue successfully\n");
                xTaskNotifyGive(performing_taskHandle);
 8000d6a:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <udp_receive_callback+0x120>)
 8000d6c:	6818      	ldr	r0, [r3, #0]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2202      	movs	r2, #2
 8000d72:	2100      	movs	r1, #0
 8000d74:	f00a fc9c 	bl	800b6b0 <xTaskGenericNotify>
 8000d78:	e005      	b.n	8000d86 <udp_receive_callback+0xea>
            }
        } else {
            printf("Packet too short: %d bytes\n", p->len);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	895b      	ldrh	r3, [r3, #10]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480f      	ldr	r0, [pc, #60]	@ (8000dc0 <udp_receive_callback+0x124>)
 8000d82:	f016 fa97 	bl	80172b4 <iprintf>
        }
        pbuf_free(p);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f00d fad0 	bl	800e32c <pbuf_free>
    }
}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	08018448 	.word	0x08018448
 8000d98:	08018468 	.word	0x08018468
 8000d9c:	08018480 	.word	0x08018480
 8000da0:	08018490 	.word	0x08018490
 8000da4:	080184b0 	.word	0x080184b0
 8000da8:	080184c0 	.word	0x080184c0
 8000dac:	080184d8 	.word	0x080184d8
 8000db0:	080184ec 	.word	0x080184ec
 8000db4:	20000a6c 	.word	0x20000a6c
 8000db8:	0801851c 	.word	0x0801851c
 8000dbc:	20000a68 	.word	0x20000a68
 8000dc0:	08018540 	.word	0x08018540

08000dc4 <lwip_initiation>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_lwip_initiation */
void lwip_initiation(void *argument)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000dcc:	f006 fdd8 	bl	8007980 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f007 fd79 	bl	80088c8 <osDelay>
 8000dd6:	e7fb      	b.n	8000dd0 <lwip_initiation+0xc>

08000dd8 <blinking_blue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinking_blue */
void blinking_blue(void *argument)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinking_blue */
  /* Infinite loop */
  for(;;)
  {
	/* visual heartbeat */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000de0:	2180      	movs	r1, #128	@ 0x80
 8000de2:	4804      	ldr	r0, [pc, #16]	@ (8000df4 <blinking_blue+0x1c>)
 8000de4:	f003 f893 	bl	8003f0e <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000de8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dec:	f007 fd6c 	bl	80088c8 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000df0:	bf00      	nop
 8000df2:	e7f5      	b.n	8000de0 <blinking_blue+0x8>
 8000df4:	40020400 	.word	0x40020400

08000df8 <__io_putchar>:
  /* USER CODE END blinking_blue */
}

/* USER CODE BEGIN Header_udp_function */
int __io_putchar(int ch)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000e00:	1d39      	adds	r1, r7, #4
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	2201      	movs	r2, #1
 8000e08:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <__io_putchar+0x20>)
 8000e0a:	f004 ff21 	bl	8005c50 <HAL_UART_Transmit>
    return ch;
 8000e0e:	687b      	ldr	r3, [r7, #4]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000034c 	.word	0x2000034c

08000e1c <udp_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_udp_function */
void udp_function(void *argument)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN udp_function */
	udp_receive_init();
 8000e24:	f7ff ff02 	bl	8000c2c <udp_receive_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f007 fd4d 	bl	80088c8 <osDelay>
 8000e2e:	e7fb      	b.n	8000e28 <udp_function+0xc>

08000e30 <perform_tests>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_perform_tests */
void perform_tests(void *argument)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
	test_command_t *cmd;

  /* Infinite loop */
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // waiting for a notification
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f00a fbeb 	bl	800b618 <ulTaskNotifyTake>
	//printf("perform_tests woke up!\n");

	if (xQueueReceive(testsQHandle, &cmd, 0) != pdPASS)
 8000e42:	4b28      	ldr	r3, [pc, #160]	@ (8000ee4 <perform_tests+0xb4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f107 011c 	add.w	r1, r7, #28
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f008 ff31 	bl	8009cb4 <xQueueReceive>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d003      	beq.n	8000e60 <perform_tests+0x30>
	{
		printf("perform_tests: No test command received\n");
 8000e58:	4823      	ldr	r0, [pc, #140]	@ (8000ee8 <perform_tests+0xb8>)
 8000e5a:	f016 fa93 	bl	8017384 <puts>
		continue;
 8000e5e:	e03f      	b.n	8000ee0 <perform_tests+0xb0>
	}
	if(cmd->bit_pattern_length > MAX_BIT_PATTERN_LENGTH || cmd->test_id == NULL || cmd->iterations<1){
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <perform_tests+0x40>
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d105      	bne.n	8000e7c <perform_tests+0x4c>
		result_pro_t response = {cmd->test_id, TEST_ERR};
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e7a:	833b      	strh	r3, [r7, #24]
//		response.test_result = TEST_ERR;
		// send response
	}
	switch (cmd->peripheral){
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	791b      	ldrb	r3, [r3, #4]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	2b0f      	cmp	r3, #15
 8000e84:	d829      	bhi.n	8000eda <perform_tests+0xaa>
 8000e86:	a201      	add	r2, pc, #4	@ (adr r2, 8000e8c <perform_tests+0x5c>)
 8000e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8c:	08000edb 	.word	0x08000edb
 8000e90:	08000ecd 	.word	0x08000ecd
 8000e94:	08000edb 	.word	0x08000edb
 8000e98:	08000edb 	.word	0x08000edb
 8000e9c:	08000edb 	.word	0x08000edb
 8000ea0:	08000edb 	.word	0x08000edb
 8000ea4:	08000edb 	.word	0x08000edb
 8000ea8:	08000edb 	.word	0x08000edb
 8000eac:	08000edb 	.word	0x08000edb
 8000eb0:	08000edb 	.word	0x08000edb
 8000eb4:	08000edb 	.word	0x08000edb
 8000eb8:	08000edb 	.word	0x08000edb
 8000ebc:	08000edb 	.word	0x08000edb
 8000ec0:	08000edb 	.word	0x08000edb
 8000ec4:	08000edb 	.word	0x08000edb
 8000ec8:	08000edb 	.word	0x08000edb
	case TIMER:
		break;
	case UART:
		uart_testing(cmd);
 8000ecc:	69fa      	ldr	r2, [r7, #28]
 8000ece:	463b      	mov	r3, r7
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f015 fe90 	bl	8016bf8 <uart_testing>
		break;
 8000ed8:	bf00      	nop
	case ADC_P:
		break;
	default:
	}
	//vPortFree(cmd); // until i will handle it
    osDelay(1);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f007 fcf4 	bl	80088c8 <osDelay>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // waiting for a notification
 8000ee0:	e7aa      	b.n	8000e38 <perform_tests+0x8>
 8000ee2:	bf00      	nop
 8000ee4:	20000a6c 	.word	0x20000a6c
 8000ee8:	0801855c 	.word	0x0801855c

08000eec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000efe:	f000 fe8f 	bl	8001c20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40001000 	.word	0x40001000

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <Error_Handler+0x8>

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	4a10      	ldr	r2, [pc, #64]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	210f      	movs	r1, #15
 8000f56:	f06f 0001 	mvn.w	r0, #1
 8000f5a:	f000 ff5d 	bl	8001e18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800

08000f6c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b0aa      	sub	sp, #168	@ 0xa8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	2284      	movs	r2, #132	@ 0x84
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f016 fae9 	bl	8017564 <memset>
  if(hi2c->Instance==I2C1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a22      	ldr	r2, [pc, #136]	@ (8001020 <HAL_I2C_MspInit+0xb4>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d13c      	bne.n	8001016 <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fa0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 ff44 	bl	8004e38 <HAL_RCCEx_PeriphCLKConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000fb6:	f7ff ffab 	bl	8000f10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <HAL_I2C_MspInit+0xb8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <HAL_I2C_MspInit+0xb8>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <HAL_I2C_MspInit+0xb8>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fd2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fda:	2312      	movs	r3, #18
 8000fdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fec:	2304      	movs	r3, #4
 8000fee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480b      	ldr	r0, [pc, #44]	@ (8001028 <HAL_I2C_MspInit+0xbc>)
 8000ffa:	f002 fdc3 	bl	8003b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <HAL_I2C_MspInit+0xb8>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <HAL_I2C_MspInit+0xb8>)
 8001004:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001008:	6413      	str	r3, [r2, #64]	@ 0x40
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_I2C_MspInit+0xb8>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001016:	bf00      	nop
 8001018:	37a8      	adds	r7, #168	@ 0xa8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40005400 	.word	0x40005400
 8001024:	40023800 	.word	0x40023800
 8001028:	40020400 	.word	0x40020400

0800102c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0b2      	sub	sp, #200	@ 0xc8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001044:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001048:	2284      	movs	r2, #132	@ 0x84
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f016 fa89 	bl	8017564 <memset>
  if(huart->Instance==UART4)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a9e      	ldr	r2, [pc, #632]	@ (80012d0 <HAL_UART_MspInit+0x2a4>)
 8001058:	4293      	cmp	r3, r2
 800105a:	f040 8096 	bne.w	800118a <HAL_UART_MspInit+0x15e>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800105e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001062:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001064:	2340      	movs	r3, #64	@ 0x40
 8001066:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800106e:	4618      	mov	r0, r3
 8001070:	f003 fee2 	bl	8004e38 <HAL_RCCEx_PeriphCLKConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_UART_MspInit+0x52>
    {
      Error_Handler();
 800107a:	f7ff ff49 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800107e:	4b95      	ldr	r3, [pc, #596]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	4a94      	ldr	r2, [pc, #592]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 8001084:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001088:	6413      	str	r3, [r2, #64]	@ 0x40
 800108a:	4b92      	ldr	r3, [pc, #584]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b8f      	ldr	r3, [pc, #572]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a8e      	ldr	r2, [pc, #568]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b8c      	ldr	r3, [pc, #560]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	4b89      	ldr	r3, [pc, #548]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a88      	ldr	r2, [pc, #544]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b86      	ldr	r3, [pc, #536]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010c6:	2301      	movs	r3, #1
 80010c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80010de:	2308      	movs	r3, #8
 80010e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80010e8:	4619      	mov	r1, r3
 80010ea:	487b      	ldr	r0, [pc, #492]	@ (80012d8 <HAL_UART_MspInit+0x2ac>)
 80010ec:	f002 fd4a 	bl	8003b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800110a:	2308      	movs	r3, #8
 800110c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001110:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001114:	4619      	mov	r1, r3
 8001116:	4871      	ldr	r0, [pc, #452]	@ (80012dc <HAL_UART_MspInit+0x2b0>)
 8001118:	f002 fd34 	bl	8003b84 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800111c:	4b70      	ldr	r3, [pc, #448]	@ (80012e0 <HAL_UART_MspInit+0x2b4>)
 800111e:	4a71      	ldr	r2, [pc, #452]	@ (80012e4 <HAL_UART_MspInit+0x2b8>)
 8001120:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001122:	4b6f      	ldr	r3, [pc, #444]	@ (80012e0 <HAL_UART_MspInit+0x2b4>)
 8001124:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001128:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112a:	4b6d      	ldr	r3, [pc, #436]	@ (80012e0 <HAL_UART_MspInit+0x2b4>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b6b      	ldr	r3, [pc, #428]	@ (80012e0 <HAL_UART_MspInit+0x2b4>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b6a      	ldr	r3, [pc, #424]	@ (80012e0 <HAL_UART_MspInit+0x2b4>)
 8001138:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800113c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113e:	4b68      	ldr	r3, [pc, #416]	@ (80012e0 <HAL_UART_MspInit+0x2b4>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001144:	4b66      	ldr	r3, [pc, #408]	@ (80012e0 <HAL_UART_MspInit+0x2b4>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800114a:	4b65      	ldr	r3, [pc, #404]	@ (80012e0 <HAL_UART_MspInit+0x2b4>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001150:	4b63      	ldr	r3, [pc, #396]	@ (80012e0 <HAL_UART_MspInit+0x2b4>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001156:	4b62      	ldr	r3, [pc, #392]	@ (80012e0 <HAL_UART_MspInit+0x2b4>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800115c:	4860      	ldr	r0, [pc, #384]	@ (80012e0 <HAL_UART_MspInit+0x2b4>)
 800115e:	f000 fe85 	bl	8001e6c <HAL_DMA_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8001168:	f7ff fed2 	bl	8000f10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a5c      	ldr	r2, [pc, #368]	@ (80012e0 <HAL_UART_MspInit+0x2b4>)
 8001170:	675a      	str	r2, [r3, #116]	@ 0x74
 8001172:	4a5b      	ldr	r2, [pc, #364]	@ (80012e0 <HAL_UART_MspInit+0x2b4>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2106      	movs	r1, #6
 800117c:	2034      	movs	r0, #52	@ 0x34
 800117e:	f000 fe4b 	bl	8001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001182:	2034      	movs	r0, #52	@ 0x34
 8001184:	f000 fe64 	bl	8001e50 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001188:	e183      	b.n	8001492 <HAL_UART_MspInit+0x466>
  else if(huart->Instance==USART2)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a56      	ldr	r2, [pc, #344]	@ (80012e8 <HAL_UART_MspInit+0x2bc>)
 8001190:	4293      	cmp	r3, r2
 8001192:	f040 80b1 	bne.w	80012f8 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001196:	2380      	movs	r3, #128	@ 0x80
 8001198:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800119a:	2304      	movs	r3, #4
 800119c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 fe48 	bl	8004e38 <HAL_RCCEx_PeriphCLKConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_UART_MspInit+0x186>
      Error_Handler();
 80011ae:	f7ff feaf 	bl	8000f10 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b2:	4b48      	ldr	r3, [pc, #288]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	4a47      	ldr	r2, [pc, #284]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011be:	4b45      	ldr	r3, [pc, #276]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	623b      	str	r3, [r7, #32]
 80011c8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b42      	ldr	r3, [pc, #264]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a41      	ldr	r2, [pc, #260]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b3f      	ldr	r3, [pc, #252]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e2:	4b3c      	ldr	r3, [pc, #240]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a3b      	ldr	r2, [pc, #236]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ee:	4b39      	ldr	r3, [pc, #228]	@ (80012d4 <HAL_UART_MspInit+0x2a8>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	61bb      	str	r3, [r7, #24]
 80011f8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011fa:	2308      	movs	r3, #8
 80011fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001212:	2307      	movs	r3, #7
 8001214:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800121c:	4619      	mov	r1, r3
 800121e:	482e      	ldr	r0, [pc, #184]	@ (80012d8 <HAL_UART_MspInit+0x2ac>)
 8001220:	f002 fcb0 	bl	8003b84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001224:	2320      	movs	r3, #32
 8001226:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800123c:	2307      	movs	r3, #7
 800123e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001242:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001246:	4619      	mov	r1, r3
 8001248:	4828      	ldr	r0, [pc, #160]	@ (80012ec <HAL_UART_MspInit+0x2c0>)
 800124a:	f002 fc9b 	bl	8003b84 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800124e:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 8001250:	4a28      	ldr	r2, [pc, #160]	@ (80012f4 <HAL_UART_MspInit+0x2c8>)
 8001252:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001254:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 8001256:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800125a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800125c:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 800125e:	2240      	movs	r2, #64	@ 0x40
 8001260:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001262:	4b23      	ldr	r3, [pc, #140]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001268:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 800126a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800126e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001270:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001276:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800127c:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001282:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 8001284:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001288:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800128a:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 800128c:	2204      	movs	r2, #4
 800128e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001290:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 8001292:	2203      	movs	r2, #3
 8001294:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001296:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 8001298:	2200      	movs	r2, #0
 800129a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012a2:	4813      	ldr	r0, [pc, #76]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 80012a4:	f000 fde2 	bl	8001e6c <HAL_DMA_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_UART_MspInit+0x286>
      Error_Handler();
 80012ae:	f7ff fe2f 	bl	8000f10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a0e      	ldr	r2, [pc, #56]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 80012b6:	671a      	str	r2, [r3, #112]	@ 0x70
 80012b8:	4a0d      	ldr	r2, [pc, #52]	@ (80012f0 <HAL_UART_MspInit+0x2c4>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2105      	movs	r1, #5
 80012c2:	2026      	movs	r0, #38	@ 0x26
 80012c4:	f000 fda8 	bl	8001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012c8:	2026      	movs	r0, #38	@ 0x26
 80012ca:	f000 fdc1 	bl	8001e50 <HAL_NVIC_EnableIRQ>
}
 80012ce:	e0e0      	b.n	8001492 <HAL_UART_MspInit+0x466>
 80012d0:	40004c00 	.word	0x40004c00
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40020800 	.word	0x40020800
 80012e0:	2000045c 	.word	0x2000045c
 80012e4:	40026040 	.word	0x40026040
 80012e8:	40004400 	.word	0x40004400
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	200004bc 	.word	0x200004bc
 80012f4:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a67      	ldr	r2, [pc, #412]	@ (800149c <HAL_UART_MspInit+0x470>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d145      	bne.n	800138e <HAL_UART_MspInit+0x362>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001302:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001306:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001308:	2300      	movs	r3, #0
 800130a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001310:	4618      	mov	r0, r3
 8001312:	f003 fd91 	bl	8004e38 <HAL_RCCEx_PeriphCLKConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_UART_MspInit+0x2f4>
      Error_Handler();
 800131c:	f7ff fdf8 	bl	8000f10 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001320:	4b5f      	ldr	r3, [pc, #380]	@ (80014a0 <HAL_UART_MspInit+0x474>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	4a5e      	ldr	r2, [pc, #376]	@ (80014a0 <HAL_UART_MspInit+0x474>)
 8001326:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800132a:	6413      	str	r3, [r2, #64]	@ 0x40
 800132c:	4b5c      	ldr	r3, [pc, #368]	@ (80014a0 <HAL_UART_MspInit+0x474>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001330:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001338:	4b59      	ldr	r3, [pc, #356]	@ (80014a0 <HAL_UART_MspInit+0x474>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133c:	4a58      	ldr	r2, [pc, #352]	@ (80014a0 <HAL_UART_MspInit+0x474>)
 800133e:	f043 0308 	orr.w	r3, r3, #8
 8001342:	6313      	str	r3, [r2, #48]	@ 0x30
 8001344:	4b56      	ldr	r3, [pc, #344]	@ (80014a0 <HAL_UART_MspInit+0x474>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001350:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800136a:	2307      	movs	r3, #7
 800136c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001370:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001374:	4619      	mov	r1, r3
 8001376:	484b      	ldr	r0, [pc, #300]	@ (80014a4 <HAL_UART_MspInit+0x478>)
 8001378:	f002 fc04 	bl	8003b84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2105      	movs	r1, #5
 8001380:	2027      	movs	r0, #39	@ 0x27
 8001382:	f000 fd49 	bl	8001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001386:	2027      	movs	r0, #39	@ 0x27
 8001388:	f000 fd62 	bl	8001e50 <HAL_NVIC_EnableIRQ>
}
 800138c:	e081      	b.n	8001492 <HAL_UART_MspInit+0x466>
  else if(huart->Instance==USART6)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a45      	ldr	r2, [pc, #276]	@ (80014a8 <HAL_UART_MspInit+0x47c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d17c      	bne.n	8001492 <HAL_UART_MspInit+0x466>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001398:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800139c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 fd45 	bl	8004e38 <HAL_RCCEx_PeriphCLKConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_UART_MspInit+0x38c>
      Error_Handler();
 80013b4:	f7ff fdac 	bl	8000f10 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80013b8:	4b39      	ldr	r3, [pc, #228]	@ (80014a0 <HAL_UART_MspInit+0x474>)
 80013ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013bc:	4a38      	ldr	r2, [pc, #224]	@ (80014a0 <HAL_UART_MspInit+0x474>)
 80013be:	f043 0320 	orr.w	r3, r3, #32
 80013c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c4:	4b36      	ldr	r3, [pc, #216]	@ (80014a0 <HAL_UART_MspInit+0x474>)
 80013c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c8:	f003 0320 	and.w	r3, r3, #32
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	4b33      	ldr	r3, [pc, #204]	@ (80014a0 <HAL_UART_MspInit+0x474>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d4:	4a32      	ldr	r2, [pc, #200]	@ (80014a0 <HAL_UART_MspInit+0x474>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6313      	str	r3, [r2, #48]	@ 0x30
 80013dc:	4b30      	ldr	r3, [pc, #192]	@ (80014a0 <HAL_UART_MspInit+0x474>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013e8:	23c0      	movs	r3, #192	@ 0xc0
 80013ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001400:	2308      	movs	r3, #8
 8001402:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001406:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800140a:	4619      	mov	r1, r3
 800140c:	4827      	ldr	r0, [pc, #156]	@ (80014ac <HAL_UART_MspInit+0x480>)
 800140e:	f002 fbb9 	bl	8003b84 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8001412:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 8001414:	4a27      	ldr	r2, [pc, #156]	@ (80014b4 <HAL_UART_MspInit+0x488>)
 8001416:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001418:	4b25      	ldr	r3, [pc, #148]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 800141a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800141e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001420:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001426:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 800142e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001432:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001434:	4b1e      	ldr	r3, [pc, #120]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800143a:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001440:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001446:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 8001448:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800144c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800144e:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 8001450:	2204      	movs	r2, #4
 8001452:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001454:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 8001456:	2203      	movs	r2, #3
 8001458:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 800145c:	2200      	movs	r2, #0
 800145e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001460:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 8001462:	2200      	movs	r2, #0
 8001464:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001466:	4812      	ldr	r0, [pc, #72]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 8001468:	f000 fd00 	bl	8001e6c <HAL_DMA_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_UART_MspInit+0x44a>
      Error_Handler();
 8001472:	f7ff fd4d 	bl	8000f10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a0d      	ldr	r2, [pc, #52]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 800147a:	675a      	str	r2, [r3, #116]	@ 0x74
 800147c:	4a0c      	ldr	r2, [pc, #48]	@ (80014b0 <HAL_UART_MspInit+0x484>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2105      	movs	r1, #5
 8001486:	2047      	movs	r0, #71	@ 0x47
 8001488:	f000 fcc6 	bl	8001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800148c:	2047      	movs	r0, #71	@ 0x47
 800148e:	f000 fcdf 	bl	8001e50 <HAL_NVIC_EnableIRQ>
}
 8001492:	bf00      	nop
 8001494:	37c8      	adds	r7, #200	@ 0xc8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40004800 	.word	0x40004800
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	40011400 	.word	0x40011400
 80014ac:	40020800 	.word	0x40020800
 80014b0:	2000051c 	.word	0x2000051c
 80014b4:	40026440 	.word	0x40026440

080014b8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b0ac      	sub	sp, #176	@ 0xb0
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	2284      	movs	r2, #132	@ 0x84
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f016 f843 	bl	8017564 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014e6:	d159      	bne.n	800159c <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80014e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80014ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f4:	f107 0318 	add.w	r3, r7, #24
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 fc9d 	bl	8004e38 <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001504:	f7ff fd04 	bl	8000f10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <HAL_PCD_MspInit+0xec>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150c:	4a25      	ldr	r2, [pc, #148]	@ (80015a4 <HAL_PCD_MspInit+0xec>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6313      	str	r3, [r2, #48]	@ 0x30
 8001514:	4b23      	ldr	r3, [pc, #140]	@ (80015a4 <HAL_PCD_MspInit+0xec>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001520:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001524:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800153a:	230a      	movs	r3, #10
 800153c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001544:	4619      	mov	r1, r3
 8001546:	4818      	ldr	r0, [pc, #96]	@ (80015a8 <HAL_PCD_MspInit+0xf0>)
 8001548:	f002 fb1c 	bl	8003b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800154c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001550:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001564:	4619      	mov	r1, r3
 8001566:	4810      	ldr	r0, [pc, #64]	@ (80015a8 <HAL_PCD_MspInit+0xf0>)
 8001568:	f002 fb0c 	bl	8003b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800156c:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <HAL_PCD_MspInit+0xec>)
 800156e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001570:	4a0c      	ldr	r2, [pc, #48]	@ (80015a4 <HAL_PCD_MspInit+0xec>)
 8001572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001576:	6353      	str	r3, [r2, #52]	@ 0x34
 8001578:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <HAL_PCD_MspInit+0xec>)
 800157a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800157c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <HAL_PCD_MspInit+0xec>)
 8001586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001588:	4a06      	ldr	r2, [pc, #24]	@ (80015a4 <HAL_PCD_MspInit+0xec>)
 800158a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800158e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001590:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <HAL_PCD_MspInit+0xec>)
 8001592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001594:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800159c:	bf00      	nop
 800159e:	37b0      	adds	r7, #176	@ 0xb0
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020000 	.word	0x40020000

080015ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	@ 0x38
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015bc:	4b33      	ldr	r3, [pc, #204]	@ (800168c <HAL_InitTick+0xe0>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	4a32      	ldr	r2, [pc, #200]	@ (800168c <HAL_InitTick+0xe0>)
 80015c2:	f043 0310 	orr.w	r3, r3, #16
 80015c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c8:	4b30      	ldr	r3, [pc, #192]	@ (800168c <HAL_InitTick+0xe0>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015d4:	f107 0210 	add.w	r2, r7, #16
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4611      	mov	r1, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 fbf8 	bl	8004dd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d103      	bne.n	80015f6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015ee:	f003 fbc9 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 80015f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80015f4:	e004      	b.n	8001600 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015f6:	f003 fbc5 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 80015fa:	4603      	mov	r3, r0
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001602:	4a23      	ldr	r2, [pc, #140]	@ (8001690 <HAL_InitTick+0xe4>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	0c9b      	lsrs	r3, r3, #18
 800160a:	3b01      	subs	r3, #1
 800160c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800160e:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <HAL_InitTick+0xe8>)
 8001610:	4a21      	ldr	r2, [pc, #132]	@ (8001698 <HAL_InitTick+0xec>)
 8001612:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001614:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <HAL_InitTick+0xe8>)
 8001616:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800161a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800161c:	4a1d      	ldr	r2, [pc, #116]	@ (8001694 <HAL_InitTick+0xe8>)
 800161e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001620:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001622:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <HAL_InitTick+0xe8>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <HAL_InitTick+0xe8>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162e:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <HAL_InitTick+0xe8>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001634:	4817      	ldr	r0, [pc, #92]	@ (8001694 <HAL_InitTick+0xe8>)
 8001636:	f003 ffef 	bl	8005618 <HAL_TIM_Base_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001640:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001644:	2b00      	cmp	r3, #0
 8001646:	d11b      	bne.n	8001680 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001648:	4812      	ldr	r0, [pc, #72]	@ (8001694 <HAL_InitTick+0xe8>)
 800164a:	f004 f847 	bl	80056dc <HAL_TIM_Base_Start_IT>
 800164e:	4603      	mov	r3, r0
 8001650:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001654:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001658:	2b00      	cmp	r3, #0
 800165a:	d111      	bne.n	8001680 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800165c:	2036      	movs	r0, #54	@ 0x36
 800165e:	f000 fbf7 	bl	8001e50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d808      	bhi.n	800167a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001668:	2200      	movs	r2, #0
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	2036      	movs	r0, #54	@ 0x36
 800166e:	f000 fbd3 	bl	8001e18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <HAL_InitTick+0xf0>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	e002      	b.n	8001680 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001680:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001684:	4618      	mov	r0, r3
 8001686:	3738      	adds	r7, #56	@ 0x38
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40023800 	.word	0x40023800
 8001690:	431bde83 	.word	0x431bde83
 8001694:	20000a7c 	.word	0x20000a7c
 8001698:	40001000 	.word	0x40001000
 800169c:	20000004 	.word	0x20000004

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <NMI_Handler+0x4>

080016a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("!!! HARD FAULT HANDLER !!!\n");
 80016ae:	4809      	ldr	r0, [pc, #36]	@ (80016d4 <HardFault_Handler+0x2c>)
 80016b0:	f015 fe68 	bl	8017384 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    // RED LED toggle for visual indication
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80016b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016b8:	4807      	ldr	r0, [pc, #28]	@ (80016d8 <HardFault_Handler+0x30>)
 80016ba:	f002 fc28 	bl	8003f0e <HAL_GPIO_TogglePin>
  	for(volatile int i=0; i<1000000; i++);
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	e002      	b.n	80016ca <HardFault_Handler+0x22>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3301      	adds	r3, #1
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a03      	ldr	r2, [pc, #12]	@ (80016dc <HardFault_Handler+0x34>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	ddf8      	ble.n	80016c4 <HardFault_Handler+0x1c>
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80016d2:	e7ef      	b.n	80016b4 <HardFault_Handler+0xc>
 80016d4:	08018584 	.word	0x08018584
 80016d8:	40020400 	.word	0x40020400
 80016dc:	000f423f 	.word	0x000f423f

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n");
 80016e4:	4802      	ldr	r0, [pc, #8]	@ (80016f0 <MemManage_Handler+0x10>)
 80016e6:	f015 fe4d 	bl	8017384 <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ea:	bf00      	nop
 80016ec:	e7fd      	b.n	80016ea <MemManage_Handler+0xa>
 80016ee:	bf00      	nop
 80016f0:	08018584 	.word	0x08018584

080016f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n");
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <BusFault_Handler+0x10>)
 80016fa:	f015 fe43 	bl	8017384 <puts>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fe:	bf00      	nop
 8001700:	e7fd      	b.n	80016fe <BusFault_Handler+0xa>
 8001702:	bf00      	nop
 8001704:	08018584 	.word	0x08018584

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <UsageFault_Handler+0x4>

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <DMA1_Stream2_IRQHandler+0x10>)
 8001726:	f000 fd41 	bl	80021ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2000045c 	.word	0x2000045c

08001734 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <DMA1_Stream6_IRQHandler+0x10>)
 800173a:	f000 fd37 	bl	80021ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200004bc 	.word	0x200004bc

08001748 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <USART2_IRQHandler+0x10>)
 800174e:	f004 fc5b 	bl	8006008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200002c4 	.word	0x200002c4

0800175c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <USART3_IRQHandler+0x10>)
 8001762:	f004 fc51 	bl	8006008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000034c 	.word	0x2000034c

08001770 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <UART4_IRQHandler+0x10>)
 8001776:	f004 fc47 	bl	8006008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000023c 	.word	0x2000023c

08001784 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <TIM6_DAC_IRQHandler+0x10>)
 800178a:	f004 f81f 	bl	80057cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000a7c 	.word	0x20000a7c

08001798 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	printf("DMA2_Stream2_IRQHandler (for uart6) was called\n");
 800179c:	4803      	ldr	r0, [pc, #12]	@ (80017ac <DMA2_Stream2_IRQHandler+0x14>)
 800179e:	f015 fdf1 	bl	8017384 <puts>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80017a2:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <DMA2_Stream2_IRQHandler+0x18>)
 80017a4:	f000 fd02 	bl	80021ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	080185a0 	.word	0x080185a0
 80017b0:	2000051c 	.word	0x2000051c

080017b4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
//	printf("ETH_IRQHandler was called\n");
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <ETH_IRQHandler+0x10>)
 80017ba:	f001 fafb 	bl	8002db4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20009e54 	.word	0x20009e54

080017c8 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <ETH_WKUP_IRQHandler+0x10>)
 80017ce:	f001 faf1 	bl	8002db4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20009e54 	.word	0x20009e54

080017dc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <USART6_IRQHandler+0x10>)
 80017e2:	f004 fc11 	bl	8006008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200003d4 	.word	0x200003d4

080017f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_kill>:

int _kill(int pid, int sig)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800180a:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <_kill+0x20>)
 800180c:	2216      	movs	r2, #22
 800180e:	601a      	str	r2, [r3, #0]
  return -1;
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	200276f8 	.word	0x200276f8

08001824 <_exit>:

void _exit (int status)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ffe5 	bl	8001800 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001836:	bf00      	nop
 8001838:	e7fd      	b.n	8001836 <_exit+0x12>

0800183a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e00a      	b.n	8001862 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800184c:	f3af 8000 	nop.w
 8001850:	4601      	mov	r1, r0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	60ba      	str	r2, [r7, #8]
 8001858:	b2ca      	uxtb	r2, r1
 800185a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	dbf0      	blt.n	800184c <_read+0x12>
  }

  return len;
 800186a:	687b      	ldr	r3, [r7, #4]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e009      	b.n	800189a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	60ba      	str	r2, [r7, #8]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fab2 	bl	8000df8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3301      	adds	r3, #1
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	dbf1      	blt.n	8001886 <_write+0x12>
  }
  return len;
 80018a2:	687b      	ldr	r3, [r7, #4]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_close>:

int _close(int file)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018d4:	605a      	str	r2, [r3, #4]
  return 0;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_isatty>:

int _isatty(int file)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800191c:	4a14      	ldr	r2, [pc, #80]	@ (8001970 <_sbrk+0x5c>)
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <_sbrk+0x60>)
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001928:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <_sbrk+0x64>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001930:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <_sbrk+0x64>)
 8001932:	4a12      	ldr	r2, [pc, #72]	@ (800197c <_sbrk+0x68>)
 8001934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	d205      	bcs.n	8001950 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001944:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <_sbrk+0x6c>)
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e009      	b.n	8001964 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a06      	ldr	r2, [pc, #24]	@ (8001978 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	20050000 	.word	0x20050000
 8001974:	00000400 	.word	0x00000400
 8001978:	20000ac8 	.word	0x20000ac8
 800197c:	20027708 	.word	0x20027708
 8001980:	200276f8 	.word	0x200276f8

08001984 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <SystemInit+0x20>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <SystemInit+0x20>)
 8001990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ac:	f7ff ffea 	bl	8001984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b0:	480c      	ldr	r0, [pc, #48]	@ (80019e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019b2:	490d      	ldr	r1, [pc, #52]	@ (80019e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019b4:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c8:	4c0a      	ldr	r4, [pc, #40]	@ (80019f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80019d6:	f015 fe71 	bl	80176bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019da:	f7fe fdff 	bl	80005dc <main>
  bx  lr    
 80019de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80019ec:	0801b558 	.word	0x0801b558
  ldr r2, =_sbss
 80019f0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80019f4:	20027708 	.word	0x20027708

080019f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC_IRQHandler>

080019fa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00b      	beq.n	8001a22 <LAN8742_RegisterBusIO+0x28>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <LAN8742_RegisterBusIO+0x28>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <LAN8742_RegisterBusIO+0x28>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	e014      	b.n	8001a52 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d139      	bne.n	8001aee <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e01c      	b.n	8001ace <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	f107 020c 	add.w	r2, r7, #12
 8001a9c:	2112      	movs	r1, #18
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	4798      	blx	r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	da03      	bge.n	8001ab0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001aa8:	f06f 0304 	mvn.w	r3, #4
 8001aac:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001aae:	e00b      	b.n	8001ac8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d105      	bne.n	8001ac8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
         break;
 8001ac6:	e005      	b.n	8001ad4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3301      	adds	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2b1f      	cmp	r3, #31
 8001ad2:	d9df      	bls.n	8001a94 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b1f      	cmp	r3, #31
 8001ada:	d902      	bls.n	8001ae2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001adc:	f06f 0302 	mvn.w	r3, #2
 8001ae0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001aee:	693b      	ldr	r3, [r7, #16]
 }
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6810      	ldr	r0, [r2, #0]
 8001b0c:	f107 020c 	add.w	r2, r7, #12
 8001b10:	2101      	movs	r1, #1
 8001b12:	4798      	blx	r3
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	da02      	bge.n	8001b20 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b1a:	f06f 0304 	mvn.w	r3, #4
 8001b1e:	e06e      	b.n	8001bfe <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6810      	ldr	r0, [r2, #0]
 8001b28:	f107 020c 	add.w	r2, r7, #12
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	4798      	blx	r3
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	da02      	bge.n	8001b3c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b36:	f06f 0304 	mvn.w	r3, #4
 8001b3a:	e060      	b.n	8001bfe <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e059      	b.n	8001bfe <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6810      	ldr	r0, [r2, #0]
 8001b52:	f107 020c 	add.w	r2, r7, #12
 8001b56:	2100      	movs	r1, #0
 8001b58:	4798      	blx	r3
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	da02      	bge.n	8001b66 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b60:	f06f 0304 	mvn.w	r3, #4
 8001b64:	e04b      	b.n	8001bfe <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d11b      	bne.n	8001ba8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <LAN8742_GetLinkState+0x90>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b84:	2302      	movs	r3, #2
 8001b86:	e03a      	b.n	8001bfe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e033      	b.n	8001bfe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	e02c      	b.n	8001bfe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001ba4:	2305      	movs	r3, #5
 8001ba6:	e02a      	b.n	8001bfe <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6810      	ldr	r0, [r2, #0]
 8001bb0:	f107 020c 	add.w	r2, r7, #12
 8001bb4:	211f      	movs	r1, #31
 8001bb6:	4798      	blx	r3
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	da02      	bge.n	8001bc4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001bbe:	f06f 0304 	mvn.w	r3, #4
 8001bc2:	e01c      	b.n	8001bfe <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001bce:	2306      	movs	r3, #6
 8001bd0:	e015      	b.n	8001bfe <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f003 031c 	and.w	r3, r3, #28
 8001bd8:	2b18      	cmp	r3, #24
 8001bda:	d101      	bne.n	8001be0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e00e      	b.n	8001bfe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 031c 	and.w	r3, r3, #28
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d101      	bne.n	8001bee <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e007      	b.n	8001bfe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 031c 	and.w	r3, r3, #28
 8001bf4:	2b14      	cmp	r3, #20
 8001bf6:	d101      	bne.n	8001bfc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	e000      	b.n	8001bfe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001bfc:	2305      	movs	r3, #5
    }
  }
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0a:	2003      	movs	r0, #3
 8001c0c:	f000 f8f9 	bl	8001e02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c10:	200f      	movs	r0, #15
 8001c12:	f7ff fccb 	bl	80015ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c16:	f7ff f981 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000008 	.word	0x20000008
 8001c44:	20000acc 	.word	0x20000acc

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000acc 	.word	0x20000acc

08001c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c68:	f7ff ffee 	bl	8001c48 <HAL_GetTick>
 8001c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d005      	beq.n	8001c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <HAL_Delay+0x44>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c86:	bf00      	nop
 8001c88:	f7ff ffde 	bl	8001c48 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d8f7      	bhi.n	8001c88 <HAL_Delay+0x28>
  {
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000008 	.word	0x20000008

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00
 8001cec:	05fa0000 	.word	0x05fa0000

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	@ (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	@ (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	@ (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	@ 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	@ 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ff4c 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2a:	f7ff ff61 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	6978      	ldr	r0, [r7, #20]
 8001e36:	f7ff ffb1 	bl	8001d9c <NVIC_EncodePriority>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff80 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff54 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff fee6 	bl	8001c48 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e099      	b.n	8001fbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea8:	e00f      	b.n	8001eca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eaa:	f7ff fecd 	bl	8001c48 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d908      	bls.n	8001eca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e078      	b.n	8001fbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1e8      	bne.n	8001eaa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4b38      	ldr	r3, [pc, #224]	@ (8001fc4 <HAL_DMA_Init+0x158>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d107      	bne.n	8001f34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f023 0307 	bic.w	r3, r3, #7
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d117      	bne.n	8001f8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00e      	beq.n	8001f8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fb15 	bl	80025a0 <DMA_CheckFifoParam>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2240      	movs	r2, #64	@ 0x40
 8001f80:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e016      	b.n	8001fbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 facc 	bl	8002534 <DMA_CalcBaseAndBitshift>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa4:	223f      	movs	r2, #63	@ 0x3f
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	f010803f 	.word	0xf010803f

08001fc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_DMA_Start_IT+0x26>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e048      	b.n	8002080 <HAL_DMA_Start_IT+0xb8>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d137      	bne.n	8002072 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2202      	movs	r2, #2
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fa5e 	bl	80024d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002020:	223f      	movs	r2, #63	@ 0x3f
 8002022:	409a      	lsls	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0216 	orr.w	r2, r2, #22
 8002036:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002046:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0208 	orr.w	r2, r2, #8
 800205e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e005      	b.n	800207e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800207a:	2302      	movs	r3, #2
 800207c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800207e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002094:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002096:	f7ff fdd7 	bl	8001c48 <HAL_GetTick>
 800209a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d008      	beq.n	80020ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2280      	movs	r2, #128	@ 0x80
 80020ac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e052      	b.n	8002160 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0216 	bic.w	r2, r2, #22
 80020c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d103      	bne.n	80020ea <HAL_DMA_Abort+0x62>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d007      	beq.n	80020fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0208 	bic.w	r2, r2, #8
 80020f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0201 	bic.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800210a:	e013      	b.n	8002134 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800210c:	f7ff fd9c 	bl	8001c48 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b05      	cmp	r3, #5
 8002118:	d90c      	bls.n	8002134 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2220      	movs	r2, #32
 800211e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2203      	movs	r2, #3
 8002124:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e015      	b.n	8002160 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1e4      	bne.n	800210c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002146:	223f      	movs	r2, #63	@ 0x3f
 8002148:	409a      	lsls	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d004      	beq.n	8002186 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2280      	movs	r2, #128	@ 0x80
 8002180:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e00c      	b.n	80021a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2205      	movs	r2, #5
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80021b8:	4b8e      	ldr	r3, [pc, #568]	@ (80023f4 <HAL_DMA_IRQHandler+0x248>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a8e      	ldr	r2, [pc, #568]	@ (80023f8 <HAL_DMA_IRQHandler+0x24c>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0a9b      	lsrs	r3, r3, #10
 80021c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d6:	2208      	movs	r2, #8
 80021d8:	409a      	lsls	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d01a      	beq.n	8002218 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0204 	bic.w	r2, r2, #4
 80021fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002204:	2208      	movs	r2, #8
 8002206:	409a      	lsls	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002210:	f043 0201 	orr.w	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221c:	2201      	movs	r2, #1
 800221e:	409a      	lsls	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d012      	beq.n	800224e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00b      	beq.n	800224e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223a:	2201      	movs	r2, #1
 800223c:	409a      	lsls	r2, r3
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002246:	f043 0202 	orr.w	r2, r3, #2
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002252:	2204      	movs	r2, #4
 8002254:	409a      	lsls	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d012      	beq.n	8002284 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00b      	beq.n	8002284 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002270:	2204      	movs	r2, #4
 8002272:	409a      	lsls	r2, r3
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227c:	f043 0204 	orr.w	r2, r3, #4
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002288:	2210      	movs	r2, #16
 800228a:	409a      	lsls	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d043      	beq.n	800231c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d03c      	beq.n	800231c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a6:	2210      	movs	r2, #16
 80022a8:	409a      	lsls	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d018      	beq.n	80022ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d108      	bne.n	80022dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d024      	beq.n	800231c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	4798      	blx	r3
 80022da:	e01f      	b.n	800231c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01b      	beq.n	800231c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	4798      	blx	r3
 80022ec:	e016      	b.n	800231c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d107      	bne.n	800230c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0208 	bic.w	r2, r2, #8
 800230a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002320:	2220      	movs	r2, #32
 8002322:	409a      	lsls	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 808f 	beq.w	800244c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 8087 	beq.w	800244c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002342:	2220      	movs	r2, #32
 8002344:	409a      	lsls	r2, r3
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b05      	cmp	r3, #5
 8002354:	d136      	bne.n	80023c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0216 	bic.w	r2, r2, #22
 8002364:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002374:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <HAL_DMA_IRQHandler+0x1da>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002382:	2b00      	cmp	r3, #0
 8002384:	d007      	beq.n	8002396 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0208 	bic.w	r2, r2, #8
 8002394:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239a:	223f      	movs	r2, #63	@ 0x3f
 800239c:	409a      	lsls	r2, r3
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d07e      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
        }
        return;
 80023c2:	e079      	b.n	80024b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01d      	beq.n	800240e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10d      	bne.n	80023fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d031      	beq.n	800244c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	4798      	blx	r3
 80023f0:	e02c      	b.n	800244c <HAL_DMA_IRQHandler+0x2a0>
 80023f2:	bf00      	nop
 80023f4:	20000000 	.word	0x20000000
 80023f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002400:	2b00      	cmp	r3, #0
 8002402:	d023      	beq.n	800244c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	4798      	blx	r3
 800240c:	e01e      	b.n	800244c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10f      	bne.n	800243c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0210 	bic.w	r2, r2, #16
 800242a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002450:	2b00      	cmp	r3, #0
 8002452:	d032      	beq.n	80024ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d022      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2205      	movs	r2, #5
 8002464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0201 	bic.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	3301      	adds	r3, #1
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	429a      	cmp	r2, r3
 8002482:	d307      	bcc.n	8002494 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f2      	bne.n	8002478 <HAL_DMA_IRQHandler+0x2cc>
 8002492:	e000      	b.n	8002496 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002494:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	4798      	blx	r3
 80024b6:	e000      	b.n	80024ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80024b8:	bf00      	nop
    }
  }
}
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b40      	cmp	r3, #64	@ 0x40
 8002504:	d108      	bne.n	8002518 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002516:	e007      	b.n	8002528 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	60da      	str	r2, [r3, #12]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	3b10      	subs	r3, #16
 8002544:	4a13      	ldr	r2, [pc, #76]	@ (8002594 <DMA_CalcBaseAndBitshift+0x60>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800254e:	4a12      	ldr	r2, [pc, #72]	@ (8002598 <DMA_CalcBaseAndBitshift+0x64>)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d908      	bls.n	8002574 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <DMA_CalcBaseAndBitshift+0x68>)
 800256a:	4013      	ands	r3, r2
 800256c:	1d1a      	adds	r2, r3, #4
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	659a      	str	r2, [r3, #88]	@ 0x58
 8002572:	e006      	b.n	8002582 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	4b08      	ldr	r3, [pc, #32]	@ (800259c <DMA_CalcBaseAndBitshift+0x68>)
 800257c:	4013      	ands	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	aaaaaaab 	.word	0xaaaaaaab
 8002598:	0801b334 	.word	0x0801b334
 800259c:	fffffc00 	.word	0xfffffc00

080025a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d11f      	bne.n	80025fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d856      	bhi.n	800266e <DMA_CheckFifoParam+0xce>
 80025c0:	a201      	add	r2, pc, #4	@ (adr r2, 80025c8 <DMA_CheckFifoParam+0x28>)
 80025c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c6:	bf00      	nop
 80025c8:	080025d9 	.word	0x080025d9
 80025cc:	080025eb 	.word	0x080025eb
 80025d0:	080025d9 	.word	0x080025d9
 80025d4:	0800266f 	.word	0x0800266f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d046      	beq.n	8002672 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e8:	e043      	b.n	8002672 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025f2:	d140      	bne.n	8002676 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f8:	e03d      	b.n	8002676 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002602:	d121      	bne.n	8002648 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b03      	cmp	r3, #3
 8002608:	d837      	bhi.n	800267a <DMA_CheckFifoParam+0xda>
 800260a:	a201      	add	r2, pc, #4	@ (adr r2, 8002610 <DMA_CheckFifoParam+0x70>)
 800260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002610:	08002621 	.word	0x08002621
 8002614:	08002627 	.word	0x08002627
 8002618:	08002621 	.word	0x08002621
 800261c:	08002639 	.word	0x08002639
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
      break;
 8002624:	e030      	b.n	8002688 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d025      	beq.n	800267e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002636:	e022      	b.n	800267e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002640:	d11f      	bne.n	8002682 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002646:	e01c      	b.n	8002682 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d903      	bls.n	8002656 <DMA_CheckFifoParam+0xb6>
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b03      	cmp	r3, #3
 8002652:	d003      	beq.n	800265c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002654:	e018      	b.n	8002688 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
      break;
 800265a:	e015      	b.n	8002688 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002660:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00e      	beq.n	8002686 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
      break;
 800266c:	e00b      	b.n	8002686 <DMA_CheckFifoParam+0xe6>
      break;
 800266e:	bf00      	nop
 8002670:	e00a      	b.n	8002688 <DMA_CheckFifoParam+0xe8>
      break;
 8002672:	bf00      	nop
 8002674:	e008      	b.n	8002688 <DMA_CheckFifoParam+0xe8>
      break;
 8002676:	bf00      	nop
 8002678:	e006      	b.n	8002688 <DMA_CheckFifoParam+0xe8>
      break;
 800267a:	bf00      	nop
 800267c:	e004      	b.n	8002688 <DMA_CheckFifoParam+0xe8>
      break;
 800267e:	bf00      	nop
 8002680:	e002      	b.n	8002688 <DMA_CheckFifoParam+0xe8>
      break;   
 8002682:	bf00      	nop
 8002684:	e000      	b.n	8002688 <DMA_CheckFifoParam+0xe8>
      break;
 8002686:	bf00      	nop
    }
  } 
  
  return status; 
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop

08002698 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e086      	b.n	80027b8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d106      	bne.n	80026c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f005 fda3 	bl	8008208 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	4b3f      	ldr	r3, [pc, #252]	@ (80027c0 <HAL_ETH_Init+0x128>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	4a3e      	ldr	r2, [pc, #248]	@ (80027c0 <HAL_ETH_Init+0x128>)
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ce:	4b3c      	ldr	r3, [pc, #240]	@ (80027c0 <HAL_ETH_Init+0x128>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026da:	4b3a      	ldr	r3, [pc, #232]	@ (80027c4 <HAL_ETH_Init+0x12c>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4a39      	ldr	r2, [pc, #228]	@ (80027c4 <HAL_ETH_Init+0x12c>)
 80026e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80026e4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026e6:	4b37      	ldr	r3, [pc, #220]	@ (80027c4 <HAL_ETH_Init+0x12c>)
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4935      	ldr	r1, [pc, #212]	@ (80027c4 <HAL_ETH_Init+0x12c>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80026f4:	4b33      	ldr	r3, [pc, #204]	@ (80027c4 <HAL_ETH_Init+0x12c>)
 80026f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800270e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002710:	f7ff fa9a 	bl	8001c48 <HAL_GetTick>
 8002714:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002716:	e011      	b.n	800273c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002718:	f7ff fa96 	bl	8001c48 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002726:	d909      	bls.n	800273c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2204      	movs	r2, #4
 800272c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	22e0      	movs	r2, #224	@ 0xe0
 8002734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e03d      	b.n	80027b8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1e4      	bne.n	8002718 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 ff5c 	bl	800360c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f001 f807 	bl	8003768 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f001 f85d 	bl	800381a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	461a      	mov	r2, r3
 8002766:	2100      	movs	r1, #0
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 ffc5 	bl	80036f8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800277c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b0f      	ldr	r3, [pc, #60]	@ (80027c8 <HAL_ETH_Init+0x130>)
 800278c:	430b      	orrs	r3, r1
 800278e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80027a2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2210      	movs	r2, #16
 80027b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40013800 	.word	0x40013800
 80027c8:	00020060 	.word	0x00020060

080027cc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d15f      	bne.n	800289e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2204      	movs	r2, #4
 80027f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f9f6 	bl	8002be4 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002800:	2001      	movs	r0, #1
 8002802:	f7ff fa2d 	bl	8001c60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002820:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002824:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800283c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fd80 	bl	8003344 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0208 	orr.w	r2, r2, #8
 8002852:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800285c:	2001      	movs	r0, #1
 800285e:	f7ff f9ff 	bl	8001c60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0204 	orr.w	r2, r2, #4
 8002878:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002882:	69d9      	ldr	r1, [r3, #28]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b07      	ldr	r3, [pc, #28]	@ (80028a8 <HAL_ETH_Start_IT+0xdc>)
 800288a:	430b      	orrs	r3, r1
 800288c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002890:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2240      	movs	r2, #64	@ 0x40
 8002896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e000      	b.n	80028a0 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
  }
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	0001a0c1 	.word	0x0001a0c1

080028ac <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ba:	2b40      	cmp	r3, #64	@ 0x40
 80028bc:	d16e      	bne.n	800299c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028ce:	69d9      	ldr	r1, [r3, #28]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b34      	ldr	r3, [pc, #208]	@ (80029a8 <HAL_ETH_Stop_IT+0xfc>)
 80028d6:	400b      	ands	r3, r1
 80028d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028dc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028f4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	f023 0302 	bic.w	r3, r3, #2
 8002908:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800290c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0204 	bic.w	r2, r2, #4
 800291c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002926:	2001      	movs	r0, #1
 8002928:	f7ff f99a 	bl	8001c60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fd05 	bl	8003344 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0208 	bic.w	r2, r2, #8
 8002948:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002952:	2001      	movs	r0, #1
 8002954:	f7ff f984 	bl	8001c60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	e00e      	b.n	8002984 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	3212      	adds	r2, #18
 800296c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002970:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3301      	adds	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b03      	cmp	r3, #3
 8002988:	d9ed      	bls.n	8002966 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2210      	movs	r2, #16
 8002994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	e000      	b.n	800299e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
  }
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	fffe5f3e 	.word	0xfffe5f3e

080029ac <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d109      	bne.n	80029d0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e045      	b.n	8002a5c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029d6:	2b40      	cmp	r3, #64	@ 0x40
 80029d8:	d13f      	bne.n	8002a5a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80029e2:	2201      	movs	r2, #1
 80029e4:	6839      	ldr	r1, [r7, #0]
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 ff86 	bl	80038f8 <ETH_Prepare_Tx_Descriptors>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f8:	f043 0202 	orr.w	r2, r3, #2
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e02a      	b.n	8002a5c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a06:	f3bf 8f4f 	dsb	sy
}
 8002a0a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d904      	bls.n	8002a28 <HAL_ETH_Transmit_IT+0x7c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a22:	1f1a      	subs	r2, r3, #4
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00d      	beq.n	8002a56 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a42:	461a      	mov	r2, r3
 8002a44:	2304      	movs	r3, #4
 8002a46:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a50:	461a      	mov	r2, r3
 8002a52:	2300      	movs	r3, #0
 8002a54:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
  }
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d109      	bne.n	8002a90 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0a4      	b.n	8002bda <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a96:	2b40      	cmp	r3, #64	@ 0x40
 8002a98:	d001      	beq.n	8002a9e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e09d      	b.n	8002bda <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	3212      	adds	r2, #18
 8002aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aae:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ab4:	f1c3 0304 	rsb	r3, r3, #4
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002aba:	e066      	b.n	8002b8a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	699a      	ldr	r2, [r3, #24]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d103      	bne.n	8002aec <HAL_ETH_ReadData+0x88>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d03c      	beq.n	8002b66 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002b0e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002b24:	2301      	movs	r3, #1
 8002b26:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b40:	461a      	mov	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	f005 fd33 	bl	80085b0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	441a      	add	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2200      	movs	r2, #0
 8002b64:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d902      	bls.n	8002b78 <HAL_ETH_ReadData+0x114>
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3b04      	subs	r3, #4
 8002b76:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	3212      	adds	r2, #18
 8002b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b82:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	3301      	adds	r3, #1
 8002b88:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	db06      	blt.n	8002ba0 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d202      	bcs.n	8002ba0 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d08d      	beq.n	8002abc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	441a      	add	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f815 	bl	8002be4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002bc0:	7cfb      	ldrb	r3, [r7, #19]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d108      	bne.n	8002bd8 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e000      	b.n	8002bda <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bf8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	3212      	adds	r2, #18
 8002c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c04:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c0a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002c0c:	e042      	b.n	8002c94 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d112      	bne.n	8002c3c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002c16:	f107 0308 	add.w	r3, r7, #8
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f005 fc98 	bl	8008550 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	74fb      	strb	r3, [r7, #19]
 8002c2a:	e007      	b.n	8002c3c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	461a      	mov	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d028      	beq.n	8002c94 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	4b26      	ldr	r3, [pc, #152]	@ (8002ce8 <ETH_UpdateDescriptor+0x104>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	6053      	str	r3, [r2, #4]
 8002c56:	e005      	b.n	8002c64 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	3301      	adds	r3, #1
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d902      	bls.n	8002c82 <ETH_UpdateDescriptor+0x9e>
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	3b04      	subs	r3, #4
 8002c80:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	3212      	adds	r2, #18
 8002c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c8c:	617b      	str	r3, [r7, #20]
      desccount--;
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <ETH_UpdateDescriptor+0xbc>
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1b6      	bne.n	8002c0e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d01a      	beq.n	8002ce0 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3303      	adds	r3, #3
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002cb4:	f3bf 8f5f 	dmb	sy
}
 8002cb8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6919      	ldr	r1, [r3, #16]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	18ca      	adds	r2, r1, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cd2:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	3720      	adds	r7, #32
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	80004000 	.word	0x80004000

08002cec <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3318      	adds	r3, #24
 8002cf8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfe:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002d06:	2301      	movs	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002d0a:	e047      	b.n	8002d9c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10a      	bne.n	8002d3c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d902      	bls.n	8002d38 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	3b04      	subs	r3, #4
 8002d36:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002d3c:	7bbb      	ldrb	r3, [r7, #14]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d02c      	beq.n	8002d9c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68d9      	ldr	r1, [r3, #12]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	db1f      	blt.n	8002d98 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f005 fc65 	bl	8008634 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	2200      	movs	r2, #0
 8002d76:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d902      	bls.n	8002d8a <HAL_ETH_ReleaseTxPacket+0x9e>
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	3b04      	subs	r3, #4
 8002d88:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d96:	e001      	b.n	8002d9c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1b1      	bne.n	8002d0c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002ddc:	4b4b      	ldr	r3, [pc, #300]	@ (8002f0c <HAL_ETH_IRQHandler+0x158>)
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00e      	beq.n	8002e0a <HAL_ETH_IRQHandler+0x56>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b43      	ldr	r3, [pc, #268]	@ (8002f10 <HAL_ETH_IRQHandler+0x15c>)
 8002e02:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f004 ff3f 	bl	8007c88 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00f      	beq.n	8002e34 <HAL_ETH_IRQHandler+0x80>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e26:	461a      	mov	r2, r3
 8002e28:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002e2c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f004 ff3a 	bl	8007ca8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d042      	beq.n	8002ec4 <HAL_ETH_IRQHandler+0x110>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d03d      	beq.n	8002ec4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4e:	f043 0208 	orr.w	r2, r3, #8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01a      	beq.n	8002e98 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	4b29      	ldr	r3, [pc, #164]	@ (8002f14 <HAL_ETH_IRQHandler+0x160>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002e88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e8c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	22e0      	movs	r2, #224	@ 0xe0
 8002e92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002e96:	e012      	b.n	8002ebe <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002ebc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f004 ff02 	bl	8007cc8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00e      	beq.n	8002eec <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f81a 	bl	8002f18 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d006      	beq.n	8002f04 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002ef6:	4b05      	ldr	r3, [pc, #20]	@ (8002f0c <HAL_ETH_IRQHandler+0x158>)
 8002ef8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002efc:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f814 	bl	8002f2c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002f04:	bf00      	nop
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40013c00 	.word	0x40013c00
 8002f10:	00010040 	.word	0x00010040
 8002f14:	007e2000 	.word	0x007e2000

08002f18 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f003 031c 	and.w	r3, r3, #28
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	02db      	lsls	r3, r3, #11
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	019b      	lsls	r3, r3, #6
 8002f6e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f023 0302 	bic.w	r3, r3, #2
 8002f7e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002f90:	f7fe fe5a 	bl	8001c48 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f96:	e00d      	b.n	8002fb4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002f98:	f7fe fe56 	bl	8001c48 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa6:	d301      	bcc.n	8002fac <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e010      	b.n	8002fce <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1ec      	bne.n	8002f98 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b086      	sub	sp, #24
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 031c 	and.w	r3, r3, #28
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	02db      	lsls	r3, r3, #11
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	019b      	lsls	r3, r3, #6
 8003004:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	4313      	orrs	r3, r2
 800300c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f043 0302 	orr.w	r3, r3, #2
 8003014:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003030:	f7fe fe0a 	bl	8001c48 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003036:	e00d      	b.n	8003054 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003038:	f7fe fe06 	bl	8001c48 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003046:	d301      	bcc.n	800304c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e009      	b.n	8003060 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1ec      	bne.n	8003038 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0e6      	b.n	800324a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b00      	cmp	r3, #0
 8003088:	bf14      	ite	ne
 800308a:	2301      	movne	r3, #1
 800308c:	2300      	moveq	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf14      	ite	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	2300      	moveq	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	461a      	mov	r2, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	bf0c      	ite	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	2300      	movne	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf14      	ite	ne
 800316e:	2301      	movne	r3, #1
 8003170:	2300      	moveq	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf14      	ite	ne
 8003196:	2301      	movne	r3, #1
 8003198:	2300      	moveq	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	461a      	mov	r2, r3
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf0c      	ite	eq
 80031e6:	2301      	moveq	r3, #1
 80031e8:	2300      	movne	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	b29a      	uxth	r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf14      	ite	ne
 800321e:	2301      	movne	r3, #1
 8003220:	2300      	moveq	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e00b      	b.n	8003282 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003270:	2b10      	cmp	r3, #16
 8003272:	d105      	bne.n	8003280 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003274:	6839      	ldr	r1, [r7, #0]
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f88a 	bl	8003390 <ETH_SetMACConfig>

    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 031c 	bic.w	r3, r3, #28
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80032a4:	f001 fd62 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 80032a8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4a14      	ldr	r2, [pc, #80]	@ (8003300 <HAL_ETH_SetMDIOClockRange+0x74>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d804      	bhi.n	80032bc <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f043 0308 	orr.w	r3, r3, #8
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	e019      	b.n	80032f0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4a11      	ldr	r2, [pc, #68]	@ (8003304 <HAL_ETH_SetMDIOClockRange+0x78>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d204      	bcs.n	80032ce <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f043 030c 	orr.w	r3, r3, #12
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e010      	b.n	80032f0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003308 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d90c      	bls.n	80032f0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4a0c      	ldr	r2, [pc, #48]	@ (800330c <HAL_ETH_SetMDIOClockRange+0x80>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d804      	bhi.n	80032e8 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f043 0304 	orr.w	r3, r3, #4
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	e003      	b.n	80032f0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f043 0310 	orr.w	r3, r3, #16
 80032ee:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	611a      	str	r2, [r3, #16]
}
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	02160ebf 	.word	0x02160ebf
 8003304:	03938700 	.word	0x03938700
 8003308:	05f5e0ff 	.word	0x05f5e0ff
 800330c:	08f0d17f 	.word	0x08f0d17f

08003310 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003362:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003366:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003374:	2001      	movs	r0, #1
 8003376:	f7fe fc73 	bl	8001c60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003384:	6193      	str	r3, [r2, #24]
}
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4b53      	ldr	r3, [pc, #332]	@ (80034f4 <ETH_SetMACConfig+0x164>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	7b9b      	ldrb	r3, [r3, #14]
 80033ae:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	7c12      	ldrb	r2, [r2, #16]
 80033b4:	2a00      	cmp	r2, #0
 80033b6:	d102      	bne.n	80033be <ETH_SetMACConfig+0x2e>
 80033b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80033bc:	e000      	b.n	80033c0 <ETH_SetMACConfig+0x30>
 80033be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80033c0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	7c52      	ldrb	r2, [r2, #17]
 80033c6:	2a00      	cmp	r2, #0
 80033c8:	d102      	bne.n	80033d0 <ETH_SetMACConfig+0x40>
 80033ca:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80033ce:	e000      	b.n	80033d2 <ETH_SetMACConfig+0x42>
 80033d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033d2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80033d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	7fdb      	ldrb	r3, [r3, #31]
 80033de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80033e0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80033e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	7f92      	ldrb	r2, [r2, #30]
 80033ec:	2a00      	cmp	r2, #0
 80033ee:	d102      	bne.n	80033f6 <ETH_SetMACConfig+0x66>
 80033f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033f4:	e000      	b.n	80033f8 <ETH_SetMACConfig+0x68>
 80033f6:	2200      	movs	r2, #0
                        macconf->Speed |
 80033f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	7f1b      	ldrb	r3, [r3, #28]
 80033fe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003400:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003406:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	791b      	ldrb	r3, [r3, #4]
 800340c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800340e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003416:	2a00      	cmp	r2, #0
 8003418:	d102      	bne.n	8003420 <ETH_SetMACConfig+0x90>
 800341a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800341e:	e000      	b.n	8003422 <ETH_SetMACConfig+0x92>
 8003420:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003422:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	7bdb      	ldrb	r3, [r3, #15]
 8003428:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800342a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003430:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003438:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800343a:	4313      	orrs	r3, r2
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003452:	2001      	movs	r0, #1
 8003454:	f7fe fc04 	bl	8001c60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800346e:	4013      	ands	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003476:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800347e:	2a00      	cmp	r2, #0
 8003480:	d101      	bne.n	8003486 <ETH_SetMACConfig+0xf6>
 8003482:	2280      	movs	r2, #128	@ 0x80
 8003484:	e000      	b.n	8003488 <ETH_SetMACConfig+0xf8>
 8003486:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003488:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800348e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003496:	2a01      	cmp	r2, #1
 8003498:	d101      	bne.n	800349e <ETH_SetMACConfig+0x10e>
 800349a:	2208      	movs	r2, #8
 800349c:	e000      	b.n	80034a0 <ETH_SetMACConfig+0x110>
 800349e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80034a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80034a8:	2a01      	cmp	r2, #1
 80034aa:	d101      	bne.n	80034b0 <ETH_SetMACConfig+0x120>
 80034ac:	2204      	movs	r2, #4
 80034ae:	e000      	b.n	80034b2 <ETH_SetMACConfig+0x122>
 80034b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80034b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80034ba:	2a01      	cmp	r2, #1
 80034bc:	d101      	bne.n	80034c2 <ETH_SetMACConfig+0x132>
 80034be:	2202      	movs	r2, #2
 80034c0:	e000      	b.n	80034c4 <ETH_SetMACConfig+0x134>
 80034c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80034c4:	4313      	orrs	r3, r2
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034dc:	2001      	movs	r0, #1
 80034de:	f7fe fbbf 	bl	8001c60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	619a      	str	r2, [r3, #24]
}
 80034ea:	bf00      	nop
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	fd20810f 	.word	0xfd20810f

080034f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4b3d      	ldr	r3, [pc, #244]	@ (8003608 <ETH_SetDMAConfig+0x110>)
 8003512:	4013      	ands	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	7b1b      	ldrb	r3, [r3, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <ETH_SetDMAConfig+0x2c>
 800351e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003522:	e000      	b.n	8003526 <ETH_SetDMAConfig+0x2e>
 8003524:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	7b5b      	ldrb	r3, [r3, #13]
 800352a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800352c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	7f52      	ldrb	r2, [r2, #29]
 8003532:	2a00      	cmp	r2, #0
 8003534:	d102      	bne.n	800353c <ETH_SetDMAConfig+0x44>
 8003536:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800353a:	e000      	b.n	800353e <ETH_SetDMAConfig+0x46>
 800353c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800353e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	7b9b      	ldrb	r3, [r3, #14]
 8003544:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003546:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800354c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	7f1b      	ldrb	r3, [r3, #28]
 8003552:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003554:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	7f9b      	ldrb	r3, [r3, #30]
 800355a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800355c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003562:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800356a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800356c:	4313      	orrs	r3, r2
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800357c:	461a      	mov	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800358e:	2001      	movs	r0, #1
 8003590:	f7fe fb66 	bl	8001c60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800359c:	461a      	mov	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	791b      	ldrb	r3, [r3, #4]
 80035a6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035ac:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80035b2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80035b8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035c0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80035c2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80035ca:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035d0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035de:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035ec:	2001      	movs	r0, #1
 80035ee:	f7fe fb37 	bl	8001c60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035fa:	461a      	mov	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6013      	str	r3, [r2, #0]
}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	f8de3f23 	.word	0xf8de3f23

0800360c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b0a6      	sub	sp, #152	@ 0x98
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800361a:	2301      	movs	r3, #1
 800361c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003620:	2300      	movs	r3, #0
 8003622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003624:	2300      	movs	r3, #0
 8003626:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003636:	2301      	movs	r3, #1
 8003638:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003642:	2300      	movs	r3, #0
 8003644:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003648:	2300      	movs	r3, #0
 800364a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800364e:	2300      	movs	r3, #0
 8003650:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003652:	2300      	movs	r3, #0
 8003654:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003658:	2300      	movs	r3, #0
 800365a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800365c:	2300      	movs	r3, #0
 800365e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003662:	2300      	movs	r3, #0
 8003664:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800366e:	2300      	movs	r3, #0
 8003670:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003674:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003678:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800367a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800367e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003680:	2300      	movs	r3, #0
 8003682:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003686:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800368a:	4619      	mov	r1, r3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff fe7f 	bl	8003390 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003692:	2301      	movs	r3, #1
 8003694:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003696:	2301      	movs	r3, #1
 8003698:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800369a:	2301      	movs	r3, #1
 800369c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80036a0:	2301      	movs	r3, #1
 80036a2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80036b4:	2300      	movs	r3, #0
 80036b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80036be:	2301      	movs	r3, #1
 80036c0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80036c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036c6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80036c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80036cc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80036ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036d2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80036de:	2300      	movs	r3, #0
 80036e0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80036e2:	f107 0308 	add.w	r3, r7, #8
 80036e6:	4619      	mov	r1, r3
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ff05 	bl	80034f8 <ETH_SetDMAConfig>
}
 80036ee:	bf00      	nop
 80036f0:	3798      	adds	r7, #152	@ 0x98
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3305      	adds	r3, #5
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	3204      	adds	r2, #4
 8003710:	7812      	ldrb	r2, [r2, #0]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	4b11      	ldr	r3, [pc, #68]	@ (8003760 <ETH_MACAddressConfig+0x68>)
 800371a:	4413      	add	r3, r2
 800371c:	461a      	mov	r2, r3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3303      	adds	r3, #3
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	061a      	lsls	r2, r3, #24
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3302      	adds	r3, #2
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	041b      	lsls	r3, r3, #16
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3301      	adds	r3, #1
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	4313      	orrs	r3, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	7812      	ldrb	r2, [r2, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <ETH_MACAddressConfig+0x6c>)
 800374a:	4413      	add	r3, r2
 800374c:	461a      	mov	r2, r3
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	6013      	str	r3, [r2, #0]
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40028040 	.word	0x40028040
 8003764:	40028044 	.word	0x40028044

08003768 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e03e      	b.n	80037f4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68d9      	ldr	r1, [r3, #12]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	440b      	add	r3, r1
 8003786:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2200      	movs	r2, #0
 8003792:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2200      	movs	r2, #0
 800379e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	3206      	adds	r2, #6
 80037a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d80c      	bhi.n	80037d8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68d9      	ldr	r1, [r3, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	440b      	add	r3, r1
 80037d0:	461a      	mov	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	e004      	b.n	80037e2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	461a      	mov	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3301      	adds	r3, #1
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d9bd      	bls.n	8003776 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800380c:	611a      	str	r2, [r3, #16]
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800381a:	b480      	push	{r7}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	e048      	b.n	80038ba <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6919      	ldr	r1, [r3, #16]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	440b      	add	r3, r1
 8003838:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2200      	movs	r2, #0
 8003844:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2200      	movs	r2, #0
 800384a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2200      	movs	r2, #0
 8003850:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2200      	movs	r2, #0
 8003856:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2200      	movs	r2, #0
 800385c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003864:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	3212      	adds	r2, #18
 8003886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d80c      	bhi.n	80038aa <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6919      	ldr	r1, [r3, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	440b      	add	r3, r1
 80038a2:	461a      	mov	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	e004      	b.n	80038b4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	461a      	mov	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3301      	adds	r3, #1
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d9b3      	bls.n	8003828 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038ea:	60da      	str	r2, [r3, #12]
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b091      	sub	sp, #68	@ 0x44
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3318      	adds	r3, #24
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800391e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003922:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800392e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003936:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800393a:	d007      	beq.n	800394c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800393c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800393e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003940:	3304      	adds	r3, #4
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800394c:	2302      	movs	r3, #2
 800394e:	e111      	b.n	8003b74 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003952:	3301      	adds	r3, #1
 8003954:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	4b86      	ldr	r3, [pc, #536]	@ (8003b80 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003966:	4013      	ands	r3, r2
 8003968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800396a:	6852      	ldr	r2, [r2, #4]
 800396c:	431a      	orrs	r2, r3
 800396e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003970:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	431a      	orrs	r2, r3
 800398c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800399c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	431a      	orrs	r2, r3
 80039aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ac:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80039ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80039c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80039ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d0:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80039d2:	e082      	b.n	8003ada <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80039d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80039dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039de:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d006      	beq.n	80039f4 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80039e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80039ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e005      	b.n	8003a00 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80039f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80039fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fe:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a02:	3301      	adds	r3, #1
 8003a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d902      	bls.n	8003a12 <ETH_Prepare_Tx_Descriptors+0x11a>
 8003a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a0e:	3b04      	subs	r3, #4
 8003a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a1a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a28:	d007      	beq.n	8003a3a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a2e:	3304      	adds	r3, #4
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d029      	beq.n	8003a8e <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a46:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a4c:	e019      	b.n	8003a82 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003a4e:	f3bf 8f5f 	dmb	sy
}
 8003a52:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a62:	3301      	adds	r3, #1
 8003a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d902      	bls.n	8003a72 <ETH_Prepare_Tx_Descriptors+0x17a>
 8003a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a6e:	3b04      	subs	r3, #4
 8003a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a7a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7e:	3301      	adds	r3, #1
 8003a80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d3e1      	bcc.n	8003a4e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e072      	b.n	8003b74 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a98:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aae:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	4b32      	ldr	r3, [pc, #200]	@ (8003b80 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aba:	6852      	ldr	r2, [r2, #4]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac0:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003ac8:	f3bf 8f5f 	dmb	sy
}
 8003acc:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad8:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f47f af78 	bne.w	80039d4 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e005      	b.n	8003b04 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b02:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b12:	6a3a      	ldr	r2, [r7, #32]
 8003b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b18:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003b1a:	f3bf 8f5f 	dmb	sy
}
 8003b1e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b34:	3304      	adds	r3, #4
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b40:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b42:	f3ef 8310 	mrs	r3, PRIMASK
 8003b46:	613b      	str	r3, [r7, #16]
  return(result);
 8003b48:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f383 8810 	msr	PRIMASK, r3
}
 8003b56:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	4413      	add	r3, r2
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f383 8810 	msr	PRIMASK, r3
}
 8003b70:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3744      	adds	r7, #68	@ 0x44
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	ffffe000 	.word	0xffffe000

08003b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b089      	sub	sp, #36	@ 0x24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
 8003ba2:	e175      	b.n	8003e90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	f040 8164 	bne.w	8003e8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d005      	beq.n	8003bda <HAL_GPIO_Init+0x56>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d130      	bne.n	8003c3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	2203      	movs	r2, #3
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c10:	2201      	movs	r2, #1
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	f003 0201 	and.w	r2, r3, #1
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d017      	beq.n	8003c78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	2203      	movs	r2, #3
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d123      	bne.n	8003ccc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	08da      	lsrs	r2, r3, #3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3208      	adds	r2, #8
 8003c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	220f      	movs	r2, #15
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	08da      	lsrs	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3208      	adds	r2, #8
 8003cc6:	69b9      	ldr	r1, [r7, #24]
 8003cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 0203 	and.w	r2, r3, #3
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80be 	beq.w	8003e8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d0e:	4b66      	ldr	r3, [pc, #408]	@ (8003ea8 <HAL_GPIO_Init+0x324>)
 8003d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d12:	4a65      	ldr	r2, [pc, #404]	@ (8003ea8 <HAL_GPIO_Init+0x324>)
 8003d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d1a:	4b63      	ldr	r3, [pc, #396]	@ (8003ea8 <HAL_GPIO_Init+0x324>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003d26:	4a61      	ldr	r2, [pc, #388]	@ (8003eac <HAL_GPIO_Init+0x328>)
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	089b      	lsrs	r3, r3, #2
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	220f      	movs	r2, #15
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43db      	mvns	r3, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4013      	ands	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a58      	ldr	r2, [pc, #352]	@ (8003eb0 <HAL_GPIO_Init+0x32c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d037      	beq.n	8003dc2 <HAL_GPIO_Init+0x23e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a57      	ldr	r2, [pc, #348]	@ (8003eb4 <HAL_GPIO_Init+0x330>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d031      	beq.n	8003dbe <HAL_GPIO_Init+0x23a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a56      	ldr	r2, [pc, #344]	@ (8003eb8 <HAL_GPIO_Init+0x334>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02b      	beq.n	8003dba <HAL_GPIO_Init+0x236>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a55      	ldr	r2, [pc, #340]	@ (8003ebc <HAL_GPIO_Init+0x338>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d025      	beq.n	8003db6 <HAL_GPIO_Init+0x232>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a54      	ldr	r2, [pc, #336]	@ (8003ec0 <HAL_GPIO_Init+0x33c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01f      	beq.n	8003db2 <HAL_GPIO_Init+0x22e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a53      	ldr	r2, [pc, #332]	@ (8003ec4 <HAL_GPIO_Init+0x340>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d019      	beq.n	8003dae <HAL_GPIO_Init+0x22a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a52      	ldr	r2, [pc, #328]	@ (8003ec8 <HAL_GPIO_Init+0x344>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <HAL_GPIO_Init+0x226>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a51      	ldr	r2, [pc, #324]	@ (8003ecc <HAL_GPIO_Init+0x348>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00d      	beq.n	8003da6 <HAL_GPIO_Init+0x222>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a50      	ldr	r2, [pc, #320]	@ (8003ed0 <HAL_GPIO_Init+0x34c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d007      	beq.n	8003da2 <HAL_GPIO_Init+0x21e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4f      	ldr	r2, [pc, #316]	@ (8003ed4 <HAL_GPIO_Init+0x350>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d101      	bne.n	8003d9e <HAL_GPIO_Init+0x21a>
 8003d9a:	2309      	movs	r3, #9
 8003d9c:	e012      	b.n	8003dc4 <HAL_GPIO_Init+0x240>
 8003d9e:	230a      	movs	r3, #10
 8003da0:	e010      	b.n	8003dc4 <HAL_GPIO_Init+0x240>
 8003da2:	2308      	movs	r3, #8
 8003da4:	e00e      	b.n	8003dc4 <HAL_GPIO_Init+0x240>
 8003da6:	2307      	movs	r3, #7
 8003da8:	e00c      	b.n	8003dc4 <HAL_GPIO_Init+0x240>
 8003daa:	2306      	movs	r3, #6
 8003dac:	e00a      	b.n	8003dc4 <HAL_GPIO_Init+0x240>
 8003dae:	2305      	movs	r3, #5
 8003db0:	e008      	b.n	8003dc4 <HAL_GPIO_Init+0x240>
 8003db2:	2304      	movs	r3, #4
 8003db4:	e006      	b.n	8003dc4 <HAL_GPIO_Init+0x240>
 8003db6:	2303      	movs	r3, #3
 8003db8:	e004      	b.n	8003dc4 <HAL_GPIO_Init+0x240>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e002      	b.n	8003dc4 <HAL_GPIO_Init+0x240>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_GPIO_Init+0x240>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	69fa      	ldr	r2, [r7, #28]
 8003dc6:	f002 0203 	and.w	r2, r2, #3
 8003dca:	0092      	lsls	r2, r2, #2
 8003dcc:	4093      	lsls	r3, r2
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003dd4:	4935      	ldr	r1, [pc, #212]	@ (8003eac <HAL_GPIO_Init+0x328>)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	3302      	adds	r3, #2
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003de2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ed8 <HAL_GPIO_Init+0x354>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e06:	4a34      	ldr	r2, [pc, #208]	@ (8003ed8 <HAL_GPIO_Init+0x354>)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e0c:	4b32      	ldr	r3, [pc, #200]	@ (8003ed8 <HAL_GPIO_Init+0x354>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e30:	4a29      	ldr	r2, [pc, #164]	@ (8003ed8 <HAL_GPIO_Init+0x354>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e36:	4b28      	ldr	r3, [pc, #160]	@ (8003ed8 <HAL_GPIO_Init+0x354>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4013      	ands	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed8 <HAL_GPIO_Init+0x354>)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e60:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed8 <HAL_GPIO_Init+0x354>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e84:	4a14      	ldr	r2, [pc, #80]	@ (8003ed8 <HAL_GPIO_Init+0x354>)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	2b0f      	cmp	r3, #15
 8003e94:	f67f ae86 	bls.w	8003ba4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	3724      	adds	r7, #36	@ 0x24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	40013800 	.word	0x40013800
 8003eb0:	40020000 	.word	0x40020000
 8003eb4:	40020400 	.word	0x40020400
 8003eb8:	40020800 	.word	0x40020800
 8003ebc:	40020c00 	.word	0x40020c00
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40021400 	.word	0x40021400
 8003ec8:	40021800 	.word	0x40021800
 8003ecc:	40021c00 	.word	0x40021c00
 8003ed0:	40022000 	.word	0x40022000
 8003ed4:	40022400 	.word	0x40022400
 8003ed8:	40013c00 	.word	0x40013c00

08003edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	807b      	strh	r3, [r7, #2]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eec:	787b      	ldrb	r3, [r7, #1]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ef2:	887a      	ldrh	r2, [r7, #2]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ef8:	e003      	b.n	8003f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003efa:	887b      	ldrh	r3, [r7, #2]
 8003efc:	041a      	lsls	r2, r3, #16
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	619a      	str	r2, [r3, #24]
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b085      	sub	sp, #20
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	460b      	mov	r3, r1
 8003f18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f20:	887a      	ldrh	r2, [r7, #2]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4013      	ands	r3, r2
 8003f26:	041a      	lsls	r2, r3, #16
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	43d9      	mvns	r1, r3
 8003f2c:	887b      	ldrh	r3, [r7, #2]
 8003f2e:	400b      	ands	r3, r1
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	619a      	str	r2, [r3, #24]
}
 8003f36:	bf00      	nop
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e08b      	b.n	800406e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fc fffe 	bl	8000f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	@ 0x24
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fa4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d107      	bne.n	8003fbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fba:	609a      	str	r2, [r3, #8]
 8003fbc:	e006      	b.n	8003fcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003fca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d108      	bne.n	8003fe6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	e007      	b.n	8003ff6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ff4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6859      	ldr	r1, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b1d      	ldr	r3, [pc, #116]	@ (8004078 <HAL_I2C_Init+0x134>)
 8004002:	430b      	orrs	r3, r1
 8004004:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004014:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69d9      	ldr	r1, [r3, #28]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1a      	ldr	r2, [r3, #32]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	02008000 	.word	0x02008000

0800407c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b20      	cmp	r3, #32
 8004090:	d138      	bne.n	8004104 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800409c:	2302      	movs	r3, #2
 800409e:	e032      	b.n	8004106 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2224      	movs	r2, #36	@ 0x24
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6819      	ldr	r1, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	e000      	b.n	8004106 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004104:	2302      	movs	r3, #2
  }
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b20      	cmp	r3, #32
 8004126:	d139      	bne.n	800419c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004132:	2302      	movs	r3, #2
 8004134:	e033      	b.n	800419e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2224      	movs	r2, #36	@ 0x24
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0201 	bic.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004164:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e000      	b.n	800419e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800419c:	2302      	movs	r3, #2
  }
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af02      	add	r7, sp, #8
 80041b0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e108      	b.n	80043ce <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fd f96e 	bl	80014b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2203      	movs	r2, #3
 80041e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041ea:	d102      	bne.n	80041f2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f003 f926 	bl	8007448 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	7c1a      	ldrb	r2, [r3, #16]
 8004204:	f88d 2000 	strb.w	r2, [sp]
 8004208:	3304      	adds	r3, #4
 800420a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800420c:	f003 f8c2 	bl	8007394 <USB_CoreInit>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e0d5      	b.n	80043ce <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f003 f91e 	bl	800746a <USB_SetCurrentMode>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0c6      	b.n	80043ce <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004240:	2300      	movs	r3, #0
 8004242:	73fb      	strb	r3, [r7, #15]
 8004244:	e04a      	b.n	80042dc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004246:	7bfa      	ldrb	r2, [r7, #15]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	3315      	adds	r3, #21
 8004256:	2201      	movs	r2, #1
 8004258:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800425a:	7bfa      	ldrb	r2, [r7, #15]
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	3314      	adds	r3, #20
 800426a:	7bfa      	ldrb	r2, [r7, #15]
 800426c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800426e:	7bfa      	ldrb	r2, [r7, #15]
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	b298      	uxth	r0, r3
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	332e      	adds	r3, #46	@ 0x2e
 8004282:	4602      	mov	r2, r0
 8004284:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004286:	7bfa      	ldrb	r2, [r7, #15]
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	3318      	adds	r3, #24
 8004296:	2200      	movs	r2, #0
 8004298:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800429a:	7bfa      	ldrb	r2, [r7, #15]
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	331c      	adds	r3, #28
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042ae:	7bfa      	ldrb	r2, [r7, #15]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3320      	adds	r3, #32
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042c2:	7bfa      	ldrb	r2, [r7, #15]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4413      	add	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	3324      	adds	r3, #36	@ 0x24
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	3301      	adds	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	791b      	ldrb	r3, [r3, #4]
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d3af      	bcc.n	8004246 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e6:	2300      	movs	r3, #0
 80042e8:	73fb      	strb	r3, [r7, #15]
 80042ea:	e044      	b.n	8004376 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042ec:	7bfa      	ldrb	r2, [r7, #15]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004302:	7bfa      	ldrb	r2, [r7, #15]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004314:	7bfa      	ldrb	r2, [r7, #15]
 8004316:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004318:	7bfa      	ldrb	r2, [r7, #15]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4613      	mov	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800432a:	2200      	movs	r2, #0
 800432c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004344:	7bfa      	ldrb	r2, [r7, #15]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800435a:	7bfa      	ldrb	r2, [r7, #15]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4413      	add	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	3301      	adds	r3, #1
 8004374:	73fb      	strb	r3, [r7, #15]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	791b      	ldrb	r3, [r3, #4]
 800437a:	7bfa      	ldrb	r2, [r7, #15]
 800437c:	429a      	cmp	r2, r3
 800437e:	d3b5      	bcc.n	80042ec <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7c1a      	ldrb	r2, [r3, #16]
 8004388:	f88d 2000 	strb.w	r2, [sp]
 800438c:	3304      	adds	r3, #4
 800438e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004390:	f003 f8b8 	bl	8007504 <USB_DevInit>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e013      	b.n	80043ce <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	7b1b      	ldrb	r3, [r3, #12]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d102      	bne.n	80043c2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f80b 	bl	80043d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f003 fa73 	bl	80078b2 <USB_DevDisconnect>

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004406:	4b05      	ldr	r3, [pc, #20]	@ (800441c <HAL_PCDEx_ActivateLPM+0x44>)
 8004408:	4313      	orrs	r3, r2
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	10000003 	.word	0x10000003

08004420 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004424:	4b05      	ldr	r3, [pc, #20]	@ (800443c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a04      	ldr	r2, [pc, #16]	@ (800443c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800442a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800442e:	6013      	str	r3, [r2, #0]
}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40007000 	.word	0x40007000

08004440 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004448:	2300      	movs	r3, #0
 800444a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e291      	b.n	800497a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8087 	beq.w	8004572 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004464:	4b96      	ldr	r3, [pc, #600]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	2b04      	cmp	r3, #4
 800446e:	d00c      	beq.n	800448a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004470:	4b93      	ldr	r3, [pc, #588]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b08      	cmp	r3, #8
 800447a:	d112      	bne.n	80044a2 <HAL_RCC_OscConfig+0x62>
 800447c:	4b90      	ldr	r3, [pc, #576]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004484:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004488:	d10b      	bne.n	80044a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448a:	4b8d      	ldr	r3, [pc, #564]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d06c      	beq.n	8004570 <HAL_RCC_OscConfig+0x130>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d168      	bne.n	8004570 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e26b      	b.n	800497a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044aa:	d106      	bne.n	80044ba <HAL_RCC_OscConfig+0x7a>
 80044ac:	4b84      	ldr	r3, [pc, #528]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a83      	ldr	r2, [pc, #524]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80044b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	e02e      	b.n	8004518 <HAL_RCC_OscConfig+0xd8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10c      	bne.n	80044dc <HAL_RCC_OscConfig+0x9c>
 80044c2:	4b7f      	ldr	r3, [pc, #508]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a7e      	ldr	r2, [pc, #504]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80044c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	4b7c      	ldr	r3, [pc, #496]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a7b      	ldr	r2, [pc, #492]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80044d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e01d      	b.n	8004518 <HAL_RCC_OscConfig+0xd8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044e4:	d10c      	bne.n	8004500 <HAL_RCC_OscConfig+0xc0>
 80044e6:	4b76      	ldr	r3, [pc, #472]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a75      	ldr	r2, [pc, #468]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80044ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b73      	ldr	r3, [pc, #460]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a72      	ldr	r2, [pc, #456]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e00b      	b.n	8004518 <HAL_RCC_OscConfig+0xd8>
 8004500:	4b6f      	ldr	r3, [pc, #444]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a6e      	ldr	r2, [pc, #440]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 8004506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	4b6c      	ldr	r3, [pc, #432]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a6b      	ldr	r2, [pc, #428]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 8004512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d013      	beq.n	8004548 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd fb92 	bl	8001c48 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004528:	f7fd fb8e 	bl	8001c48 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	@ 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e21f      	b.n	800497a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453a:	4b61      	ldr	r3, [pc, #388]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0xe8>
 8004546:	e014      	b.n	8004572 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fd fb7e 	bl	8001c48 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004550:	f7fd fb7a 	bl	8001c48 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	@ 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e20b      	b.n	800497a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004562:	4b57      	ldr	r3, [pc, #348]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x110>
 800456e:	e000      	b.n	8004572 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d069      	beq.n	8004652 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800457e:	4b50      	ldr	r3, [pc, #320]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00b      	beq.n	80045a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800458a:	4b4d      	ldr	r3, [pc, #308]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b08      	cmp	r3, #8
 8004594:	d11c      	bne.n	80045d0 <HAL_RCC_OscConfig+0x190>
 8004596:	4b4a      	ldr	r3, [pc, #296]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d116      	bne.n	80045d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a2:	4b47      	ldr	r3, [pc, #284]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_RCC_OscConfig+0x17a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d001      	beq.n	80045ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e1df      	b.n	800497a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ba:	4b41      	ldr	r3, [pc, #260]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	493d      	ldr	r1, [pc, #244]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ce:	e040      	b.n	8004652 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d023      	beq.n	8004620 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d8:	4b39      	ldr	r3, [pc, #228]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a38      	ldr	r2, [pc, #224]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd fb30 	bl	8001c48 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ec:	f7fd fb2c 	bl	8001c48 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e1bd      	b.n	800497a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fe:	4b30      	ldr	r3, [pc, #192]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460a:	4b2d      	ldr	r3, [pc, #180]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4929      	ldr	r1, [pc, #164]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 800461a:	4313      	orrs	r3, r2
 800461c:	600b      	str	r3, [r1, #0]
 800461e:	e018      	b.n	8004652 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004620:	4b27      	ldr	r3, [pc, #156]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a26      	ldr	r2, [pc, #152]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fd fb0c 	bl	8001c48 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004634:	f7fd fb08 	bl	8001c48 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e199      	b.n	800497a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004646:	4b1e      	ldr	r3, [pc, #120]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d038      	beq.n	80046d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d019      	beq.n	800469a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004666:	4b16      	ldr	r3, [pc, #88]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 8004668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800466a:	4a15      	ldr	r2, [pc, #84]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004672:	f7fd fae9 	bl	8001c48 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800467a:	f7fd fae5 	bl	8001c48 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e176      	b.n	800497a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468c:	4b0c      	ldr	r3, [pc, #48]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 800468e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0f0      	beq.n	800467a <HAL_RCC_OscConfig+0x23a>
 8004698:	e01a      	b.n	80046d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800469a:	4b09      	ldr	r3, [pc, #36]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 800469c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800469e:	4a08      	ldr	r2, [pc, #32]	@ (80046c0 <HAL_RCC_OscConfig+0x280>)
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a6:	f7fd facf 	bl	8001c48 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ac:	e00a      	b.n	80046c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ae:	f7fd facb 	bl	8001c48 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d903      	bls.n	80046c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e15c      	b.n	800497a <HAL_RCC_OscConfig+0x53a>
 80046c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c4:	4b91      	ldr	r3, [pc, #580]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 80046c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1ee      	bne.n	80046ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80a4 	beq.w	8004826 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046de:	4b8b      	ldr	r3, [pc, #556]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10d      	bne.n	8004706 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ea:	4b88      	ldr	r3, [pc, #544]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	4a87      	ldr	r2, [pc, #540]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 80046f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80046f6:	4b85      	ldr	r3, [pc, #532]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004702:	2301      	movs	r3, #1
 8004704:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004706:	4b82      	ldr	r3, [pc, #520]	@ (8004910 <HAL_RCC_OscConfig+0x4d0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d118      	bne.n	8004744 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004712:	4b7f      	ldr	r3, [pc, #508]	@ (8004910 <HAL_RCC_OscConfig+0x4d0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a7e      	ldr	r2, [pc, #504]	@ (8004910 <HAL_RCC_OscConfig+0x4d0>)
 8004718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800471c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471e:	f7fd fa93 	bl	8001c48 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004726:	f7fd fa8f 	bl	8001c48 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b64      	cmp	r3, #100	@ 0x64
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e120      	b.n	800497a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004738:	4b75      	ldr	r3, [pc, #468]	@ (8004910 <HAL_RCC_OscConfig+0x4d0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f0      	beq.n	8004726 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d106      	bne.n	800475a <HAL_RCC_OscConfig+0x31a>
 800474c:	4b6f      	ldr	r3, [pc, #444]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 800474e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004750:	4a6e      	ldr	r2, [pc, #440]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	6713      	str	r3, [r2, #112]	@ 0x70
 8004758:	e02d      	b.n	80047b6 <HAL_RCC_OscConfig+0x376>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10c      	bne.n	800477c <HAL_RCC_OscConfig+0x33c>
 8004762:	4b6a      	ldr	r3, [pc, #424]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004766:	4a69      	ldr	r2, [pc, #420]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	6713      	str	r3, [r2, #112]	@ 0x70
 800476e:	4b67      	ldr	r3, [pc, #412]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004772:	4a66      	ldr	r2, [pc, #408]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 8004774:	f023 0304 	bic.w	r3, r3, #4
 8004778:	6713      	str	r3, [r2, #112]	@ 0x70
 800477a:	e01c      	b.n	80047b6 <HAL_RCC_OscConfig+0x376>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b05      	cmp	r3, #5
 8004782:	d10c      	bne.n	800479e <HAL_RCC_OscConfig+0x35e>
 8004784:	4b61      	ldr	r3, [pc, #388]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004788:	4a60      	ldr	r2, [pc, #384]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 800478a:	f043 0304 	orr.w	r3, r3, #4
 800478e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004790:	4b5e      	ldr	r3, [pc, #376]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004794:	4a5d      	ldr	r2, [pc, #372]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	6713      	str	r3, [r2, #112]	@ 0x70
 800479c:	e00b      	b.n	80047b6 <HAL_RCC_OscConfig+0x376>
 800479e:	4b5b      	ldr	r3, [pc, #364]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a2:	4a5a      	ldr	r2, [pc, #360]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047aa:	4b58      	ldr	r3, [pc, #352]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ae:	4a57      	ldr	r2, [pc, #348]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 80047b0:	f023 0304 	bic.w	r3, r3, #4
 80047b4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d015      	beq.n	80047ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047be:	f7fd fa43 	bl	8001c48 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c4:	e00a      	b.n	80047dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c6:	f7fd fa3f 	bl	8001c48 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e0ce      	b.n	800497a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047dc:	4b4b      	ldr	r3, [pc, #300]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 80047de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0ee      	beq.n	80047c6 <HAL_RCC_OscConfig+0x386>
 80047e8:	e014      	b.n	8004814 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ea:	f7fd fa2d 	bl	8001c48 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f0:	e00a      	b.n	8004808 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f2:	f7fd fa29 	bl	8001c48 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004800:	4293      	cmp	r3, r2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e0b8      	b.n	800497a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004808:	4b40      	ldr	r3, [pc, #256]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 800480a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1ee      	bne.n	80047f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004814:	7dfb      	ldrb	r3, [r7, #23]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d105      	bne.n	8004826 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800481a:	4b3c      	ldr	r3, [pc, #240]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481e:	4a3b      	ldr	r2, [pc, #236]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 8004820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004824:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 80a4 	beq.w	8004978 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004830:	4b36      	ldr	r3, [pc, #216]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 030c 	and.w	r3, r3, #12
 8004838:	2b08      	cmp	r3, #8
 800483a:	d06b      	beq.n	8004914 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d149      	bne.n	80048d8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004844:	4b31      	ldr	r3, [pc, #196]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a30      	ldr	r2, [pc, #192]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 800484a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800484e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fd f9fa 	bl	8001c48 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004858:	f7fd f9f6 	bl	8001c48 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e087      	b.n	800497a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486a:	4b28      	ldr	r3, [pc, #160]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	019b      	lsls	r3, r3, #6
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488c:	085b      	lsrs	r3, r3, #1
 800488e:	3b01      	subs	r3, #1
 8004890:	041b      	lsls	r3, r3, #16
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004898:	061b      	lsls	r3, r3, #24
 800489a:	4313      	orrs	r3, r2
 800489c:	4a1b      	ldr	r2, [pc, #108]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 800489e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048a2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a4:	4b19      	ldr	r3, [pc, #100]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a18      	ldr	r2, [pc, #96]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 80048aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b0:	f7fd f9ca 	bl	8001c48 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b8:	f7fd f9c6 	bl	8001c48 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e057      	b.n	800497a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ca:	4b10      	ldr	r3, [pc, #64]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0x478>
 80048d6:	e04f      	b.n	8004978 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d8:	4b0c      	ldr	r3, [pc, #48]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0b      	ldr	r2, [pc, #44]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 80048de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fd f9b0 	bl	8001c48 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ec:	f7fd f9ac 	bl	8001c48 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e03d      	b.n	800497a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fe:	4b03      	ldr	r3, [pc, #12]	@ (800490c <HAL_RCC_OscConfig+0x4cc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x4ac>
 800490a:	e035      	b.n	8004978 <HAL_RCC_OscConfig+0x538>
 800490c:	40023800 	.word	0x40023800
 8004910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004914:	4b1b      	ldr	r3, [pc, #108]	@ (8004984 <HAL_RCC_OscConfig+0x544>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d028      	beq.n	8004974 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d121      	bne.n	8004974 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493a:	429a      	cmp	r2, r3
 800493c:	d11a      	bne.n	8004974 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004944:	4013      	ands	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800494a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800494c:	4293      	cmp	r3, r2
 800494e:	d111      	bne.n	8004974 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495a:	085b      	lsrs	r3, r3, #1
 800495c:	3b01      	subs	r3, #1
 800495e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d107      	bne.n	8004974 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40023800 	.word	0x40023800

08004988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0d0      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049a0:	4b6a      	ldr	r3, [pc, #424]	@ (8004b4c <HAL_RCC_ClockConfig+0x1c4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d910      	bls.n	80049d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ae:	4b67      	ldr	r3, [pc, #412]	@ (8004b4c <HAL_RCC_ClockConfig+0x1c4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 020f 	bic.w	r2, r3, #15
 80049b6:	4965      	ldr	r1, [pc, #404]	@ (8004b4c <HAL_RCC_ClockConfig+0x1c4>)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b63      	ldr	r3, [pc, #396]	@ (8004b4c <HAL_RCC_ClockConfig+0x1c4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0b8      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d020      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e8:	4b59      	ldr	r3, [pc, #356]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4a58      	ldr	r2, [pc, #352]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 80049ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a00:	4b53      	ldr	r3, [pc, #332]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	4a52      	ldr	r2, [pc, #328]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004a06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a0c:	4b50      	ldr	r3, [pc, #320]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	494d      	ldr	r1, [pc, #308]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d040      	beq.n	8004aac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a32:	4b47      	ldr	r3, [pc, #284]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d115      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e07f      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d107      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4a:	4b41      	ldr	r3, [pc, #260]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e073      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e06b      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a6a:	4b39      	ldr	r3, [pc, #228]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f023 0203 	bic.w	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	4936      	ldr	r1, [pc, #216]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a7c:	f7fd f8e4 	bl	8001c48 <HAL_GetTick>
 8004a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a82:	e00a      	b.n	8004a9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a84:	f7fd f8e0 	bl	8001c48 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e053      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 020c 	and.w	r2, r3, #12
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d1eb      	bne.n	8004a84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aac:	4b27      	ldr	r3, [pc, #156]	@ (8004b4c <HAL_RCC_ClockConfig+0x1c4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d210      	bcs.n	8004adc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aba:	4b24      	ldr	r3, [pc, #144]	@ (8004b4c <HAL_RCC_ClockConfig+0x1c4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f023 020f 	bic.w	r2, r3, #15
 8004ac2:	4922      	ldr	r1, [pc, #136]	@ (8004b4c <HAL_RCC_ClockConfig+0x1c4>)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b20      	ldr	r3, [pc, #128]	@ (8004b4c <HAL_RCC_ClockConfig+0x1c4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e032      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae8:	4b19      	ldr	r3, [pc, #100]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4916      	ldr	r1, [pc, #88]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b06:	4b12      	ldr	r3, [pc, #72]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	490e      	ldr	r1, [pc, #56]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b1a:	f000 f821 	bl	8004b60 <HAL_RCC_GetSysClockFreq>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	4b0b      	ldr	r3, [pc, #44]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	490a      	ldr	r1, [pc, #40]	@ (8004b54 <HAL_RCC_ClockConfig+0x1cc>)
 8004b2c:	5ccb      	ldrb	r3, [r1, r3]
 8004b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b32:	4a09      	ldr	r2, [pc, #36]	@ (8004b58 <HAL_RCC_ClockConfig+0x1d0>)
 8004b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b36:	4b09      	ldr	r3, [pc, #36]	@ (8004b5c <HAL_RCC_ClockConfig+0x1d4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fc fd36 	bl	80015ac <HAL_InitTick>

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023c00 	.word	0x40023c00
 8004b50:	40023800 	.word	0x40023800
 8004b54:	0801b31c 	.word	0x0801b31c
 8004b58:	20000000 	.word	0x20000000
 8004b5c:	20000004 	.word	0x20000004

08004b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b64:	b094      	sub	sp, #80	@ 0x50
 8004b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b70:	2300      	movs	r3, #0
 8004b72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b78:	4b79      	ldr	r3, [pc, #484]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 030c 	and.w	r3, r3, #12
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d00d      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	f200 80e1 	bhi.w	8004d4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0x34>
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d003      	beq.n	8004b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b92:	e0db      	b.n	8004d4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b94:	4b73      	ldr	r3, [pc, #460]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b98:	e0db      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b9a:	4b73      	ldr	r3, [pc, #460]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b9e:	e0d8      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ba8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004baa:	4b6d      	ldr	r3, [pc, #436]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d063      	beq.n	8004c7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	099b      	lsrs	r3, r3, #6
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bca:	2300      	movs	r3, #0
 8004bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bd2:	4622      	mov	r2, r4
 8004bd4:	462b      	mov	r3, r5
 8004bd6:	f04f 0000 	mov.w	r0, #0
 8004bda:	f04f 0100 	mov.w	r1, #0
 8004bde:	0159      	lsls	r1, r3, #5
 8004be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be4:	0150      	lsls	r0, r2, #5
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4621      	mov	r1, r4
 8004bec:	1a51      	subs	r1, r2, r1
 8004bee:	6139      	str	r1, [r7, #16]
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c04:	4659      	mov	r1, fp
 8004c06:	018b      	lsls	r3, r1, #6
 8004c08:	4651      	mov	r1, sl
 8004c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c0e:	4651      	mov	r1, sl
 8004c10:	018a      	lsls	r2, r1, #6
 8004c12:	4651      	mov	r1, sl
 8004c14:	ebb2 0801 	subs.w	r8, r2, r1
 8004c18:	4659      	mov	r1, fp
 8004c1a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c32:	4690      	mov	r8, r2
 8004c34:	4699      	mov	r9, r3
 8004c36:	4623      	mov	r3, r4
 8004c38:	eb18 0303 	adds.w	r3, r8, r3
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	462b      	mov	r3, r5
 8004c40:	eb49 0303 	adc.w	r3, r9, r3
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c52:	4629      	mov	r1, r5
 8004c54:	024b      	lsls	r3, r1, #9
 8004c56:	4621      	mov	r1, r4
 8004c58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	024a      	lsls	r2, r1, #9
 8004c60:	4610      	mov	r0, r2
 8004c62:	4619      	mov	r1, r3
 8004c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c66:	2200      	movs	r2, #0
 8004c68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c70:	f7fb fb1e 	bl	80002b0 <__aeabi_uldivmod>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4613      	mov	r3, r2
 8004c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c7c:	e058      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c7e:	4b38      	ldr	r3, [pc, #224]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	099b      	lsrs	r3, r3, #6
 8004c84:	2200      	movs	r2, #0
 8004c86:	4618      	mov	r0, r3
 8004c88:	4611      	mov	r1, r2
 8004c8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c8e:	623b      	str	r3, [r7, #32]
 8004c90:	2300      	movs	r3, #0
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c98:	4642      	mov	r2, r8
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	f04f 0000 	mov.w	r0, #0
 8004ca0:	f04f 0100 	mov.w	r1, #0
 8004ca4:	0159      	lsls	r1, r3, #5
 8004ca6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004caa:	0150      	lsls	r0, r2, #5
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4641      	mov	r1, r8
 8004cb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ccc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cd0:	ebb2 040a 	subs.w	r4, r2, sl
 8004cd4:	eb63 050b 	sbc.w	r5, r3, fp
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	00eb      	lsls	r3, r5, #3
 8004ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ce6:	00e2      	lsls	r2, r4, #3
 8004ce8:	4614      	mov	r4, r2
 8004cea:	461d      	mov	r5, r3
 8004cec:	4643      	mov	r3, r8
 8004cee:	18e3      	adds	r3, r4, r3
 8004cf0:	603b      	str	r3, [r7, #0]
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	eb45 0303 	adc.w	r3, r5, r3
 8004cf8:	607b      	str	r3, [r7, #4]
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d06:	4629      	mov	r1, r5
 8004d08:	028b      	lsls	r3, r1, #10
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d10:	4621      	mov	r1, r4
 8004d12:	028a      	lsls	r2, r1, #10
 8004d14:	4610      	mov	r0, r2
 8004d16:	4619      	mov	r1, r3
 8004d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	61fa      	str	r2, [r7, #28]
 8004d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d24:	f7fb fac4 	bl	80002b0 <__aeabi_uldivmod>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d30:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	0c1b      	lsrs	r3, r3, #16
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d4a:	e002      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d4c:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3750      	adds	r7, #80	@ 0x50
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d5e:	bf00      	nop
 8004d60:	40023800 	.word	0x40023800
 8004d64:	00f42400 	.word	0x00f42400
 8004d68:	007a1200 	.word	0x007a1200

08004d6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d70:	4b03      	ldr	r3, [pc, #12]	@ (8004d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d72:	681b      	ldr	r3, [r3, #0]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	20000000 	.word	0x20000000

08004d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d88:	f7ff fff0 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	4b05      	ldr	r3, [pc, #20]	@ (8004da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	0a9b      	lsrs	r3, r3, #10
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	4903      	ldr	r1, [pc, #12]	@ (8004da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d9a:	5ccb      	ldrb	r3, [r1, r3]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40023800 	.word	0x40023800
 8004da8:	0801b32c 	.word	0x0801b32c

08004dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004db0:	f7ff ffdc 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b05      	ldr	r3, [pc, #20]	@ (8004dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	0b5b      	lsrs	r3, r3, #13
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	4903      	ldr	r1, [pc, #12]	@ (8004dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dc2:	5ccb      	ldrb	r3, [r1, r3]
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	0801b32c 	.word	0x0801b32c

08004dd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	220f      	movs	r2, #15
 8004de2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004de4:	4b12      	ldr	r3, [pc, #72]	@ (8004e30 <HAL_RCC_GetClockConfig+0x5c>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 0203 	and.w	r2, r3, #3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004df0:	4b0f      	ldr	r3, [pc, #60]	@ (8004e30 <HAL_RCC_GetClockConfig+0x5c>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8004e30 <HAL_RCC_GetClockConfig+0x5c>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004e08:	4b09      	ldr	r3, [pc, #36]	@ (8004e30 <HAL_RCC_GetClockConfig+0x5c>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	08db      	lsrs	r3, r3, #3
 8004e0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e16:	4b07      	ldr	r3, [pc, #28]	@ (8004e34 <HAL_RCC_GetClockConfig+0x60>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 020f 	and.w	r2, r3, #15
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	601a      	str	r2, [r3, #0]
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800
 8004e34:	40023c00 	.word	0x40023c00

08004e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d012      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e60:	4b69      	ldr	r3, [pc, #420]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	4a68      	ldr	r2, [pc, #416]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e66:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004e6a:	6093      	str	r3, [r2, #8]
 8004e6c:	4b66      	ldr	r3, [pc, #408]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e74:	4964      	ldr	r1, [pc, #400]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e82:	2301      	movs	r3, #1
 8004e84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d017      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e92:	4b5d      	ldr	r3, [pc, #372]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e98:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea0:	4959      	ldr	r1, [pc, #356]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004eb0:	d101      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d017      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ece:	4b4e      	ldr	r3, [pc, #312]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ed4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004edc:	494a      	ldr	r1, [pc, #296]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eec:	d101      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004efa:	2301      	movs	r3, #1
 8004efc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 808b 	beq.w	8005032 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f1c:	4b3a      	ldr	r3, [pc, #232]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f20:	4a39      	ldr	r2, [pc, #228]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f28:	4b37      	ldr	r3, [pc, #220]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f30:	60bb      	str	r3, [r7, #8]
 8004f32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f34:	4b35      	ldr	r3, [pc, #212]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a34      	ldr	r2, [pc, #208]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f40:	f7fc fe82 	bl	8001c48 <HAL_GetTick>
 8004f44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f48:	f7fc fe7e 	bl	8001c48 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	@ 0x64
 8004f54:	d901      	bls.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e357      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f66:	4b28      	ldr	r3, [pc, #160]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d035      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d02e      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f84:	4b20      	ldr	r3, [pc, #128]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f92:	4a1d      	ldr	r2, [pc, #116]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f98:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fa4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004fa6:	4a18      	ldr	r2, [pc, #96]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fac:	4b16      	ldr	r3, [pc, #88]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d114      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fc fe46 	bl	8001c48 <HAL_GetTick>
 8004fbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fc fe42 	bl	8001c48 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e319      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ee      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fee:	d111      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ff0:	4b05      	ldr	r3, [pc, #20]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ffc:	4b04      	ldr	r3, [pc, #16]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ffe:	400b      	ands	r3, r1
 8005000:	4901      	ldr	r1, [pc, #4]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005002:	4313      	orrs	r3, r2
 8005004:	608b      	str	r3, [r1, #8]
 8005006:	e00b      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005008:	40023800 	.word	0x40023800
 800500c:	40007000 	.word	0x40007000
 8005010:	0ffffcff 	.word	0x0ffffcff
 8005014:	4baa      	ldr	r3, [pc, #680]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4aa9      	ldr	r2, [pc, #676]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800501a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800501e:	6093      	str	r3, [r2, #8]
 8005020:	4ba7      	ldr	r3, [pc, #668]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005022:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502c:	49a4      	ldr	r1, [pc, #656]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800502e:	4313      	orrs	r3, r2
 8005030:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2b00      	cmp	r3, #0
 800503c:	d010      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800503e:	4ba0      	ldr	r3, [pc, #640]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005044:	4a9e      	ldr	r2, [pc, #632]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800504a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800504e:	4b9c      	ldr	r3, [pc, #624]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005050:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005058:	4999      	ldr	r1, [pc, #612]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800506c:	4b94      	ldr	r3, [pc, #592]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005072:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800507a:	4991      	ldr	r1, [pc, #580]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800508e:	4b8c      	ldr	r3, [pc, #560]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005094:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800509c:	4988      	ldr	r1, [pc, #544]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050b0:	4b83      	ldr	r3, [pc, #524]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050be:	4980      	ldr	r1, [pc, #512]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050d2:	4b7b      	ldr	r3, [pc, #492]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e0:	4977      	ldr	r1, [pc, #476]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050f4:	4b72      	ldr	r3, [pc, #456]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fa:	f023 0203 	bic.w	r2, r3, #3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005102:	496f      	ldr	r1, [pc, #444]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005116:	4b6a      	ldr	r3, [pc, #424]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511c:	f023 020c 	bic.w	r2, r3, #12
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005124:	4966      	ldr	r1, [pc, #408]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005138:	4b61      	ldr	r3, [pc, #388]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800513e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005146:	495e      	ldr	r1, [pc, #376]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800515a:	4b59      	ldr	r3, [pc, #356]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005160:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005168:	4955      	ldr	r1, [pc, #340]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800517c:	4b50      	ldr	r3, [pc, #320]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005182:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518a:	494d      	ldr	r1, [pc, #308]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800519e:	4b48      	ldr	r3, [pc, #288]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ac:	4944      	ldr	r1, [pc, #272]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80051c0:	4b3f      	ldr	r3, [pc, #252]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ce:	493c      	ldr	r1, [pc, #240]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80051e2:	4b37      	ldr	r3, [pc, #220]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051f0:	4933      	ldr	r1, [pc, #204]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00a      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005204:	4b2e      	ldr	r3, [pc, #184]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005212:	492b      	ldr	r1, [pc, #172]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d011      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005226:	4b26      	ldr	r3, [pc, #152]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800522c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005234:	4922      	ldr	r1, [pc, #136]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005240:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005244:	d101      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005246:	2301      	movs	r3, #1
 8005248:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005256:	2301      	movs	r3, #1
 8005258:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005266:	4b16      	ldr	r3, [pc, #88]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005274:	4912      	ldr	r1, [pc, #72]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00b      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005288:	4b0d      	ldr	r3, [pc, #52]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800528a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800528e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005298:	4909      	ldr	r1, [pc, #36]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d006      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 80d9 	beq.w	8005466 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052b4:	4b02      	ldr	r3, [pc, #8]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a01      	ldr	r2, [pc, #4]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052be:	e001      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80052c0:	40023800 	.word	0x40023800
 80052c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c6:	f7fc fcbf 	bl	8001c48 <HAL_GetTick>
 80052ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052cc:	e008      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052ce:	f7fc fcbb 	bl	8001c48 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b64      	cmp	r3, #100	@ 0x64
 80052da:	d901      	bls.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e194      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1f0      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d021      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d11d      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005300:	4b64      	ldr	r3, [pc, #400]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005302:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005306:	0c1b      	lsrs	r3, r3, #16
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800530e:	4b61      	ldr	r3, [pc, #388]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005310:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005314:	0e1b      	lsrs	r3, r3, #24
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	019a      	lsls	r2, r3, #6
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	041b      	lsls	r3, r3, #16
 8005326:	431a      	orrs	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	061b      	lsls	r3, r3, #24
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	071b      	lsls	r3, r3, #28
 8005334:	4957      	ldr	r1, [pc, #348]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d004      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005350:	d00a      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800535a:	2b00      	cmp	r3, #0
 800535c:	d02e      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005362:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005366:	d129      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005368:	4b4a      	ldr	r3, [pc, #296]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800536a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800536e:	0c1b      	lsrs	r3, r3, #16
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005376:	4b47      	ldr	r3, [pc, #284]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800537c:	0f1b      	lsrs	r3, r3, #28
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	019a      	lsls	r2, r3, #6
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	041b      	lsls	r3, r3, #16
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	061b      	lsls	r3, r3, #24
 8005396:	431a      	orrs	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	071b      	lsls	r3, r3, #28
 800539c:	493d      	ldr	r1, [pc, #244]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053a4:	4b3b      	ldr	r3, [pc, #236]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053aa:	f023 021f 	bic.w	r2, r3, #31
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b2:	3b01      	subs	r3, #1
 80053b4:	4937      	ldr	r1, [pc, #220]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01d      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053c8:	4b32      	ldr	r3, [pc, #200]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ce:	0e1b      	lsrs	r3, r3, #24
 80053d0:	f003 030f 	and.w	r3, r3, #15
 80053d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053dc:	0f1b      	lsrs	r3, r3, #28
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	019a      	lsls	r2, r3, #6
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	041b      	lsls	r3, r3, #16
 80053f0:	431a      	orrs	r2, r3
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	061b      	lsls	r3, r3, #24
 80053f6:	431a      	orrs	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	071b      	lsls	r3, r3, #28
 80053fc:	4925      	ldr	r1, [pc, #148]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d011      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	019a      	lsls	r2, r3, #6
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	061b      	lsls	r3, r3, #24
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	071b      	lsls	r3, r3, #28
 800542c:	4919      	ldr	r1, [pc, #100]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005434:	4b17      	ldr	r3, [pc, #92]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a16      	ldr	r2, [pc, #88]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800543a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800543e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005440:	f7fc fc02 	bl	8001c48 <HAL_GetTick>
 8005444:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005446:	e008      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005448:	f7fc fbfe 	bl	8001c48 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	@ 0x64
 8005454:	d901      	bls.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0d7      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800545a:	4b0e      	ldr	r3, [pc, #56]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0f0      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b01      	cmp	r3, #1
 800546a:	f040 80cd 	bne.w	8005608 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800546e:	4b09      	ldr	r3, [pc, #36]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a08      	ldr	r2, [pc, #32]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800547a:	f7fc fbe5 	bl	8001c48 <HAL_GetTick>
 800547e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005480:	e00a      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005482:	f7fc fbe1 	bl	8001c48 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b64      	cmp	r3, #100	@ 0x64
 800548e:	d903      	bls.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e0ba      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005494:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005498:	4b5e      	ldr	r3, [pc, #376]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054a4:	d0ed      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x682>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d009      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d02e      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d12a      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054ce:	4b51      	ldr	r3, [pc, #324]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d4:	0c1b      	lsrs	r3, r3, #16
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054dc:	4b4d      	ldr	r3, [pc, #308]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e2:	0f1b      	lsrs	r3, r3, #28
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	019a      	lsls	r2, r3, #6
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	041b      	lsls	r3, r3, #16
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	061b      	lsls	r3, r3, #24
 80054fc:	431a      	orrs	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	071b      	lsls	r3, r3, #28
 8005502:	4944      	ldr	r1, [pc, #272]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800550a:	4b42      	ldr	r3, [pc, #264]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800550c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005510:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005518:	3b01      	subs	r3, #1
 800551a:	021b      	lsls	r3, r3, #8
 800551c:	493d      	ldr	r1, [pc, #244]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800551e:	4313      	orrs	r3, r2
 8005520:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d022      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005534:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005538:	d11d      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800553a:	4b36      	ldr	r3, [pc, #216]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005540:	0e1b      	lsrs	r3, r3, #24
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005548:	4b32      	ldr	r3, [pc, #200]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554e:	0f1b      	lsrs	r3, r3, #28
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	019a      	lsls	r2, r3, #6
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	041b      	lsls	r3, r3, #16
 8005562:	431a      	orrs	r2, r3
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	061b      	lsls	r3, r3, #24
 8005568:	431a      	orrs	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	071b      	lsls	r3, r3, #28
 800556e:	4929      	ldr	r1, [pc, #164]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d028      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005582:	4b24      	ldr	r3, [pc, #144]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005588:	0e1b      	lsrs	r3, r3, #24
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005590:	4b20      	ldr	r3, [pc, #128]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005596:	0c1b      	lsrs	r3, r3, #16
 8005598:	f003 0303 	and.w	r3, r3, #3
 800559c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	019a      	lsls	r2, r3, #6
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	431a      	orrs	r2, r3
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	061b      	lsls	r3, r3, #24
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	071b      	lsls	r3, r3, #28
 80055b6:	4917      	ldr	r1, [pc, #92]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055be:	4b15      	ldr	r3, [pc, #84]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	4911      	ldr	r1, [pc, #68]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e0:	f7fc fb32 	bl	8001c48 <HAL_GetTick>
 80055e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055e6:	e008      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055e8:	f7fc fb2e 	bl	8001c48 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b64      	cmp	r3, #100	@ 0x64
 80055f4:	d901      	bls.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e007      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055fa:	4b06      	ldr	r3, [pc, #24]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005606:	d1ef      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40023800 	.word	0x40023800

08005618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e049      	b.n	80056be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f841 	bl	80056c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3304      	adds	r3, #4
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f000 f9e8 	bl	8005a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d001      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e054      	b.n	800579e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a26      	ldr	r2, [pc, #152]	@ (80057ac <HAL_TIM_Base_Start_IT+0xd0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d022      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x80>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800571e:	d01d      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x80>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a22      	ldr	r2, [pc, #136]	@ (80057b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d018      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x80>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a21      	ldr	r2, [pc, #132]	@ (80057b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x80>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1f      	ldr	r2, [pc, #124]	@ (80057b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00e      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x80>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1e      	ldr	r2, [pc, #120]	@ (80057bc <HAL_TIM_Base_Start_IT+0xe0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x80>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a1c      	ldr	r2, [pc, #112]	@ (80057c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x80>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1b      	ldr	r2, [pc, #108]	@ (80057c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d115      	bne.n	8005788 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	4b19      	ldr	r3, [pc, #100]	@ (80057c8 <HAL_TIM_Base_Start_IT+0xec>)
 8005764:	4013      	ands	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b06      	cmp	r3, #6
 800576c:	d015      	beq.n	800579a <HAL_TIM_Base_Start_IT+0xbe>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005774:	d011      	beq.n	800579a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0201 	orr.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005786:	e008      	b.n	800579a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0201 	orr.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	e000      	b.n	800579c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40010000 	.word	0x40010000
 80057b0:	40000400 	.word	0x40000400
 80057b4:	40000800 	.word	0x40000800
 80057b8:	40000c00 	.word	0x40000c00
 80057bc:	40010400 	.word	0x40010400
 80057c0:	40014000 	.word	0x40014000
 80057c4:	40001800 	.word	0x40001800
 80057c8:	00010007 	.word	0x00010007

080057cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d020      	beq.n	8005830 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01b      	beq.n	8005830 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0202 	mvn.w	r2, #2
 8005800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f8e9 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 800581c:	e005      	b.n	800582a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f8db 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f8ec 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	d020      	beq.n	800587c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01b      	beq.n	800587c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0204 	mvn.w	r2, #4
 800584c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2202      	movs	r2, #2
 8005852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f8c3 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 8005868:	e005      	b.n	8005876 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f8b5 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f8c6 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b00      	cmp	r3, #0
 8005884:	d020      	beq.n	80058c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01b      	beq.n	80058c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0208 	mvn.w	r2, #8
 8005898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2204      	movs	r2, #4
 800589e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f89d 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 80058b4:	e005      	b.n	80058c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f88f 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f8a0 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 0310 	and.w	r3, r3, #16
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d020      	beq.n	8005914 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01b      	beq.n	8005914 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0210 	mvn.w	r2, #16
 80058e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2208      	movs	r2, #8
 80058ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f877 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 8005900:	e005      	b.n	800590e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f869 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f87a 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00c      	beq.n	8005938 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d007      	beq.n	8005938 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0201 	mvn.w	r2, #1
 8005930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fb fada 	bl	8000eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800593e:	2b00      	cmp	r3, #0
 8005940:	d104      	bne.n	800594c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00c      	beq.n	8005966 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005952:	2b00      	cmp	r3, #0
 8005954:	d007      	beq.n	8005966 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800595e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f913 	bl	8005b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00c      	beq.n	800598a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005976:	2b00      	cmp	r3, #0
 8005978:	d007      	beq.n	800598a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f90b 	bl	8005ba0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00c      	beq.n	80059ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d007      	beq.n	80059ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f834 	bl	8005a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00c      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f06f 0220 	mvn.w	r2, #32
 80059ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f8d3 	bl	8005b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059d2:	bf00      	nop
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a43      	ldr	r2, [pc, #268]	@ (8005b4c <TIM_Base_SetConfig+0x120>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d013      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a4a:	d00f      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a40      	ldr	r2, [pc, #256]	@ (8005b50 <TIM_Base_SetConfig+0x124>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00b      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a3f      	ldr	r2, [pc, #252]	@ (8005b54 <TIM_Base_SetConfig+0x128>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d007      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a3e      	ldr	r2, [pc, #248]	@ (8005b58 <TIM_Base_SetConfig+0x12c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d003      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a3d      	ldr	r2, [pc, #244]	@ (8005b5c <TIM_Base_SetConfig+0x130>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d108      	bne.n	8005a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a32      	ldr	r2, [pc, #200]	@ (8005b4c <TIM_Base_SetConfig+0x120>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d02b      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a8c:	d027      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a2f      	ldr	r2, [pc, #188]	@ (8005b50 <TIM_Base_SetConfig+0x124>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d023      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a2e      	ldr	r2, [pc, #184]	@ (8005b54 <TIM_Base_SetConfig+0x128>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d01f      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b58 <TIM_Base_SetConfig+0x12c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d01b      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a2c      	ldr	r2, [pc, #176]	@ (8005b5c <TIM_Base_SetConfig+0x130>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d017      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a2b      	ldr	r2, [pc, #172]	@ (8005b60 <TIM_Base_SetConfig+0x134>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a2a      	ldr	r2, [pc, #168]	@ (8005b64 <TIM_Base_SetConfig+0x138>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00f      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a29      	ldr	r2, [pc, #164]	@ (8005b68 <TIM_Base_SetConfig+0x13c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00b      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a28      	ldr	r2, [pc, #160]	@ (8005b6c <TIM_Base_SetConfig+0x140>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d007      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a27      	ldr	r2, [pc, #156]	@ (8005b70 <TIM_Base_SetConfig+0x144>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d003      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a26      	ldr	r2, [pc, #152]	@ (8005b74 <TIM_Base_SetConfig+0x148>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d108      	bne.n	8005af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a0e      	ldr	r2, [pc, #56]	@ (8005b4c <TIM_Base_SetConfig+0x120>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d003      	beq.n	8005b1e <TIM_Base_SetConfig+0xf2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a10      	ldr	r2, [pc, #64]	@ (8005b5c <TIM_Base_SetConfig+0x130>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d103      	bne.n	8005b26 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	691a      	ldr	r2, [r3, #16]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f043 0204 	orr.w	r2, r3, #4
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	601a      	str	r2, [r3, #0]
}
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	40010000 	.word	0x40010000
 8005b50:	40000400 	.word	0x40000400
 8005b54:	40000800 	.word	0x40000800
 8005b58:	40000c00 	.word	0x40000c00
 8005b5c:	40010400 	.word	0x40010400
 8005b60:	40014000 	.word	0x40014000
 8005b64:	40014400 	.word	0x40014400
 8005b68:	40014800 	.word	0x40014800
 8005b6c:	40001800 	.word	0x40001800
 8005b70:	40001c00 	.word	0x40001c00
 8005b74:	40002000 	.word	0x40002000

08005b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e040      	b.n	8005c48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fb fa28 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2224      	movs	r2, #36	@ 0x24
 8005be0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 ff7e 	bl	8006afc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fd17 	bl	8006634 <UART_SetConfig>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e01b      	b.n	8005c48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0201 	orr.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fffd 	bl	8006c40 <UART_CheckIdleState>
 8005c46:	4603      	mov	r3, r0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08a      	sub	sp, #40	@ 0x28
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d177      	bne.n	8005d58 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <HAL_UART_Transmit+0x24>
 8005c6e:	88fb      	ldrh	r3, [r7, #6]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e070      	b.n	8005d5a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2221      	movs	r2, #33	@ 0x21
 8005c84:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c86:	f7fb ffdf 	bl	8001c48 <HAL_GetTick>
 8005c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	88fa      	ldrh	r2, [r7, #6]
 8005c90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	88fa      	ldrh	r2, [r7, #6]
 8005c98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ca4:	d108      	bne.n	8005cb8 <HAL_UART_Transmit+0x68>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d104      	bne.n	8005cb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	e003      	b.n	8005cc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005cc0:	e02f      	b.n	8005d22 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2180      	movs	r1, #128	@ 0x80
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f001 f80e 	bl	8006cee <UART_WaitOnFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d004      	beq.n	8005ce2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e03b      	b.n	8005d5a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10b      	bne.n	8005d00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cf6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	3302      	adds	r3, #2
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	e007      	b.n	8005d10 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	781a      	ldrb	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1c9      	bne.n	8005cc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2200      	movs	r2, #0
 8005d36:	2140      	movs	r1, #64	@ 0x40
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 ffd8 	bl	8006cee <UART_WaitOnFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d004      	beq.n	8005d4e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2220      	movs	r2, #32
 8005d48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e005      	b.n	8005d5a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2220      	movs	r2, #32
 8005d52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e000      	b.n	8005d5a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005d58:	2302      	movs	r3, #2
  }
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08a      	sub	sp, #40	@ 0x28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d165      	bne.n	8005e46 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <HAL_UART_Transmit_DMA+0x22>
 8005d80:	88fb      	ldrh	r3, [r7, #6]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e05e      	b.n	8005e48 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	88fa      	ldrh	r2, [r7, #6]
 8005d94:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	88fa      	ldrh	r2, [r7, #6]
 8005d9c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2221      	movs	r2, #33	@ 0x21
 8005dac:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d027      	beq.n	8005e06 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dba:	4a25      	ldr	r2, [pc, #148]	@ (8005e50 <HAL_UART_Transmit_DMA+0xec>)
 8005dbc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc2:	4a24      	ldr	r2, [pc, #144]	@ (8005e54 <HAL_UART_Transmit_DMA+0xf0>)
 8005dc4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dca:	4a23      	ldr	r2, [pc, #140]	@ (8005e58 <HAL_UART_Transmit_DMA+0xf4>)
 8005dcc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dde:	4619      	mov	r1, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3328      	adds	r3, #40	@ 0x28
 8005de6:	461a      	mov	r2, r3
 8005de8:	88fb      	ldrh	r3, [r7, #6]
 8005dea:	f7fc f8ed 	bl	8001fc8 <HAL_DMA_Start_IT>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d008      	beq.n	8005e06 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2210      	movs	r2, #16
 8005df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e020      	b.n	8005e48 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2240      	movs	r2, #64	@ 0x40
 8005e0c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3308      	adds	r3, #8
 8005e14:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3308      	adds	r3, #8
 8005e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e2e:	623a      	str	r2, [r7, #32]
 8005e30:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	69f9      	ldr	r1, [r7, #28]
 8005e34:	6a3a      	ldr	r2, [r7, #32]
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e5      	bne.n	8005e0e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	e000      	b.n	8005e48 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005e46:	2302      	movs	r3, #2
  }
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3728      	adds	r7, #40	@ 0x28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	0800701d 	.word	0x0800701d
 8005e54:	080070b3 	.word	0x080070b3
 8005e58:	0800729f 	.word	0x0800729f

08005e5c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08a      	sub	sp, #40	@ 0x28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	4613      	mov	r3, r2
 8005e68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e70:	2b20      	cmp	r3, #32
 8005e72:	d132      	bne.n	8005eda <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <HAL_UART_Receive_DMA+0x24>
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e02b      	b.n	8005edc <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d018      	beq.n	8005eca <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	623b      	str	r3, [r7, #32]
 8005eb8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	69f9      	ldr	r1, [r7, #28]
 8005ebc:	6a3a      	ldr	r2, [r7, #32]
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e6      	bne.n	8005e98 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005eca:	88fb      	ldrh	r3, [r7, #6]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	68b9      	ldr	r1, [r7, #8]
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 ff79 	bl	8006dc8 <UART_Start_Receive_DMA>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	e000      	b.n	8005edc <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005eda:	2302      	movs	r3, #2
  }
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3728      	adds	r7, #40	@ 0x28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b090      	sub	sp, #64	@ 0x40
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ef8:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f04:	2b80      	cmp	r3, #128	@ 0x80
 8005f06:	d139      	bne.n	8005f7c <HAL_UART_DMAStop+0x98>
 8005f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f0a:	2b21      	cmp	r3, #33	@ 0x21
 8005f0c:	d136      	bne.n	8005f7c <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3308      	adds	r3, #8
 8005f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e5      	bne.n	8005f0e <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d015      	beq.n	8005f76 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fc f89a 	bl	8002088 <HAL_DMA_Abort>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00d      	beq.n	8005f76 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fc faae 	bl	80024c0 <HAL_DMA_GetError>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	d105      	bne.n	8005f76 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2210      	movs	r2, #16
 8005f6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e044      	b.n	8006000 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 ffc6 	bl	8006f08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f86:	2b40      	cmp	r3, #64	@ 0x40
 8005f88:	d139      	bne.n	8005ffe <HAL_UART_DMAStop+0x11a>
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8c:	2b22      	cmp	r3, #34	@ 0x22
 8005f8e:	d136      	bne.n	8005ffe <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3308      	adds	r3, #8
 8005f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3308      	adds	r3, #8
 8005fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb0:	61ba      	str	r2, [r7, #24]
 8005fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6979      	ldr	r1, [r7, #20]
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e5      	bne.n	8005f90 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d015      	beq.n	8005ff8 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fc f859 	bl	8002088 <HAL_DMA_Abort>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00d      	beq.n	8005ff8 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fc fa6d 	bl	80024c0 <HAL_DMA_GetError>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d105      	bne.n	8005ff8 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2210      	movs	r2, #16
 8005ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e003      	b.n	8006000 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 ffab 	bl	8006f54 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3740      	adds	r7, #64	@ 0x40
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b0ba      	sub	sp, #232	@ 0xe8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800602e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006032:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006036:	4013      	ands	r3, r2
 8006038:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800603c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006040:	2b00      	cmp	r3, #0
 8006042:	d115      	bne.n	8006070 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00f      	beq.n	8006070 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006054:	f003 0320 	and.w	r3, r3, #32
 8006058:	2b00      	cmp	r3, #0
 800605a:	d009      	beq.n	8006070 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 82b1 	beq.w	80065c8 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	4798      	blx	r3
      }
      return;
 800606e:	e2ab      	b.n	80065c8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 8117 	beq.w	80062a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800607a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d106      	bne.n	8006094 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006086:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800608a:	4b85      	ldr	r3, [pc, #532]	@ (80062a0 <HAL_UART_IRQHandler+0x298>)
 800608c:	4013      	ands	r3, r2
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 810a 	beq.w	80062a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d011      	beq.n	80060c4 <HAL_UART_IRQHandler+0xbc>
 80060a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00b      	beq.n	80060c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2201      	movs	r2, #1
 80060b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060ba:	f043 0201 	orr.w	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d011      	beq.n	80060f4 <HAL_UART_IRQHandler+0xec>
 80060d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00b      	beq.n	80060f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2202      	movs	r2, #2
 80060e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060ea:	f043 0204 	orr.w	r2, r3, #4
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d011      	beq.n	8006124 <HAL_UART_IRQHandler+0x11c>
 8006100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00b      	beq.n	8006124 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2204      	movs	r2, #4
 8006112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800611a:	f043 0202 	orr.w	r2, r3, #2
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006128:	f003 0308 	and.w	r3, r3, #8
 800612c:	2b00      	cmp	r3, #0
 800612e:	d017      	beq.n	8006160 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b00      	cmp	r3, #0
 800613a:	d105      	bne.n	8006148 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800613c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006140:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00b      	beq.n	8006160 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2208      	movs	r2, #8
 800614e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006156:	f043 0208 	orr.w	r2, r3, #8
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006168:	2b00      	cmp	r3, #0
 800616a:	d012      	beq.n	8006192 <HAL_UART_IRQHandler+0x18a>
 800616c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006170:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00c      	beq.n	8006192 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006180:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006188:	f043 0220 	orr.w	r2, r3, #32
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 8217 	beq.w	80065cc <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800619e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00d      	beq.n	80061c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d007      	beq.n	80061c6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061da:	2b40      	cmp	r3, #64	@ 0x40
 80061dc:	d005      	beq.n	80061ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d04f      	beq.n	800628a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 feb2 	bl	8006f54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fa:	2b40      	cmp	r3, #64	@ 0x40
 80061fc:	d141      	bne.n	8006282 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3308      	adds	r3, #8
 8006204:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006214:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800621c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3308      	adds	r3, #8
 8006226:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800622a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800622e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006236:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800623a:	e841 2300 	strex	r3, r2, [r1]
 800623e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1d9      	bne.n	80061fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800624e:	2b00      	cmp	r3, #0
 8006250:	d013      	beq.n	800627a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006256:	4a13      	ldr	r2, [pc, #76]	@ (80062a4 <HAL_UART_IRQHandler+0x29c>)
 8006258:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800625e:	4618      	mov	r0, r3
 8006260:	f7fb ff82 	bl	8002168 <HAL_DMA_Abort_IT>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d017      	beq.n	800629a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800626e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006274:	4610      	mov	r0, r2
 8006276:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006278:	e00f      	b.n	800629a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f9c4 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	e00b      	b.n	800629a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f9c0 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006288:	e007      	b.n	800629a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f9bc 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006298:	e198      	b.n	80065cc <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629a:	bf00      	nop
    return;
 800629c:	e196      	b.n	80065cc <HAL_UART_IRQHandler+0x5c4>
 800629e:	bf00      	nop
 80062a0:	04000120 	.word	0x04000120
 80062a4:	0800731d 	.word	0x0800731d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	f040 8166 	bne.w	800657e <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b6:	f003 0310 	and.w	r3, r3, #16
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 815f 	beq.w	800657e <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 8158 	beq.w	800657e <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2210      	movs	r2, #16
 80062d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e0:	2b40      	cmp	r3, #64	@ 0x40
 80062e2:	f040 80d0 	bne.w	8006486 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 80ab 	beq.w	8006452 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006306:	429a      	cmp	r2, r3
 8006308:	f080 80a3 	bcs.w	8006452 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006312:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006320:	f000 8086 	beq.w	8006430 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006338:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800633c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006340:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800634e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006352:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800635a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006366:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1da      	bne.n	8006324 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3308      	adds	r3, #8
 8006374:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800637e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3308      	adds	r3, #8
 800638e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006392:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006396:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800639a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800639e:	e841 2300 	strex	r3, r2, [r1]
 80063a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80063a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1e1      	bne.n	800636e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3308      	adds	r3, #8
 80063b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80063ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3308      	adds	r3, #8
 80063ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80063d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063d6:	e841 2300 	strex	r3, r2, [r1]
 80063da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80063dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1e3      	bne.n	80063aa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006400:	f023 0310 	bic.w	r3, r3, #16
 8006404:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006412:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006414:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006418:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e4      	bne.n	80063f0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800642a:	4618      	mov	r0, r3
 800642c:	f7fb fe2c 	bl	8002088 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006442:	b29b      	uxth	r3, r3
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	b29b      	uxth	r3, r3
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f8e6 	bl	800661c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006450:	e0be      	b.n	80065d0 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006458:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800645c:	429a      	cmp	r2, r3
 800645e:	f040 80b7 	bne.w	80065d0 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800646c:	f040 80b0 	bne.w	80065d0 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f8cc 	bl	800661c <HAL_UARTEx_RxEventCallback>
      return;
 8006484:	e0a4      	b.n	80065d0 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006492:	b29b      	uxth	r3, r3
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 8096 	beq.w	80065d4 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 80064a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8091 	beq.w	80065d4 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e4      	bne.n	80064b2 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3308      	adds	r3, #8
 80064ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	623b      	str	r3, [r7, #32]
   return(result);
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	f023 0301 	bic.w	r3, r3, #1
 80064fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3308      	adds	r3, #8
 8006508:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800650c:	633a      	str	r2, [r7, #48]	@ 0x30
 800650e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800651a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e3      	bne.n	80064e8 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	60fb      	str	r3, [r7, #12]
   return(result);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f023 0310 	bic.w	r3, r3, #16
 8006548:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006556:	61fb      	str	r3, [r7, #28]
 8006558:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	69b9      	ldr	r1, [r7, #24]
 800655c:	69fa      	ldr	r2, [r7, #28]
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	617b      	str	r3, [r7, #20]
   return(result);
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e4      	bne.n	8006534 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2202      	movs	r2, #2
 800656e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f850 	bl	800661c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800657c:	e02a      	b.n	80065d4 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800657e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00e      	beq.n	80065a8 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800658a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800658e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006592:	2b00      	cmp	r3, #0
 8006594:	d008      	beq.n	80065a8 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d01c      	beq.n	80065d8 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	4798      	blx	r3
    }
    return;
 80065a6:	e017      	b.n	80065d8 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d012      	beq.n	80065da <HAL_UART_IRQHandler+0x5d2>
 80065b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00c      	beq.n	80065da <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 febd 	bl	8007340 <UART_EndTransmit_IT>
    return;
 80065c6:	e008      	b.n	80065da <HAL_UART_IRQHandler+0x5d2>
      return;
 80065c8:	bf00      	nop
 80065ca:	e006      	b.n	80065da <HAL_UART_IRQHandler+0x5d2>
    return;
 80065cc:	bf00      	nop
 80065ce:	e004      	b.n	80065da <HAL_UART_IRQHandler+0x5d2>
      return;
 80065d0:	bf00      	nop
 80065d2:	e002      	b.n	80065da <HAL_UART_IRQHandler+0x5d2>
      return;
 80065d4:	bf00      	nop
 80065d6:	e000      	b.n	80065da <HAL_UART_IRQHandler+0x5d2>
    return;
 80065d8:	bf00      	nop
  }

}
 80065da:	37e8      	adds	r7, #232	@ 0xe8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b088      	sub	sp, #32
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	431a      	orrs	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	4ba6      	ldr	r3, [pc, #664]	@ (80068f8 <UART_SetConfig+0x2c4>)
 8006660:	4013      	ands	r3, r2
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	6979      	ldr	r1, [r7, #20]
 8006668:	430b      	orrs	r3, r1
 800666a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a94      	ldr	r2, [pc, #592]	@ (80068fc <UART_SetConfig+0x2c8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d120      	bne.n	80066f2 <UART_SetConfig+0xbe>
 80066b0:	4b93      	ldr	r3, [pc, #588]	@ (8006900 <UART_SetConfig+0x2cc>)
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d816      	bhi.n	80066ec <UART_SetConfig+0xb8>
 80066be:	a201      	add	r2, pc, #4	@ (adr r2, 80066c4 <UART_SetConfig+0x90>)
 80066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c4:	080066d5 	.word	0x080066d5
 80066c8:	080066e1 	.word	0x080066e1
 80066cc:	080066db 	.word	0x080066db
 80066d0:	080066e7 	.word	0x080066e7
 80066d4:	2301      	movs	r3, #1
 80066d6:	77fb      	strb	r3, [r7, #31]
 80066d8:	e150      	b.n	800697c <UART_SetConfig+0x348>
 80066da:	2302      	movs	r3, #2
 80066dc:	77fb      	strb	r3, [r7, #31]
 80066de:	e14d      	b.n	800697c <UART_SetConfig+0x348>
 80066e0:	2304      	movs	r3, #4
 80066e2:	77fb      	strb	r3, [r7, #31]
 80066e4:	e14a      	b.n	800697c <UART_SetConfig+0x348>
 80066e6:	2308      	movs	r3, #8
 80066e8:	77fb      	strb	r3, [r7, #31]
 80066ea:	e147      	b.n	800697c <UART_SetConfig+0x348>
 80066ec:	2310      	movs	r3, #16
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e144      	b.n	800697c <UART_SetConfig+0x348>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a83      	ldr	r2, [pc, #524]	@ (8006904 <UART_SetConfig+0x2d0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d132      	bne.n	8006762 <UART_SetConfig+0x12e>
 80066fc:	4b80      	ldr	r3, [pc, #512]	@ (8006900 <UART_SetConfig+0x2cc>)
 80066fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006702:	f003 030c 	and.w	r3, r3, #12
 8006706:	2b0c      	cmp	r3, #12
 8006708:	d828      	bhi.n	800675c <UART_SetConfig+0x128>
 800670a:	a201      	add	r2, pc, #4	@ (adr r2, 8006710 <UART_SetConfig+0xdc>)
 800670c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006710:	08006745 	.word	0x08006745
 8006714:	0800675d 	.word	0x0800675d
 8006718:	0800675d 	.word	0x0800675d
 800671c:	0800675d 	.word	0x0800675d
 8006720:	08006751 	.word	0x08006751
 8006724:	0800675d 	.word	0x0800675d
 8006728:	0800675d 	.word	0x0800675d
 800672c:	0800675d 	.word	0x0800675d
 8006730:	0800674b 	.word	0x0800674b
 8006734:	0800675d 	.word	0x0800675d
 8006738:	0800675d 	.word	0x0800675d
 800673c:	0800675d 	.word	0x0800675d
 8006740:	08006757 	.word	0x08006757
 8006744:	2300      	movs	r3, #0
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e118      	b.n	800697c <UART_SetConfig+0x348>
 800674a:	2302      	movs	r3, #2
 800674c:	77fb      	strb	r3, [r7, #31]
 800674e:	e115      	b.n	800697c <UART_SetConfig+0x348>
 8006750:	2304      	movs	r3, #4
 8006752:	77fb      	strb	r3, [r7, #31]
 8006754:	e112      	b.n	800697c <UART_SetConfig+0x348>
 8006756:	2308      	movs	r3, #8
 8006758:	77fb      	strb	r3, [r7, #31]
 800675a:	e10f      	b.n	800697c <UART_SetConfig+0x348>
 800675c:	2310      	movs	r3, #16
 800675e:	77fb      	strb	r3, [r7, #31]
 8006760:	e10c      	b.n	800697c <UART_SetConfig+0x348>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a68      	ldr	r2, [pc, #416]	@ (8006908 <UART_SetConfig+0x2d4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d120      	bne.n	80067ae <UART_SetConfig+0x17a>
 800676c:	4b64      	ldr	r3, [pc, #400]	@ (8006900 <UART_SetConfig+0x2cc>)
 800676e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006772:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006776:	2b30      	cmp	r3, #48	@ 0x30
 8006778:	d013      	beq.n	80067a2 <UART_SetConfig+0x16e>
 800677a:	2b30      	cmp	r3, #48	@ 0x30
 800677c:	d814      	bhi.n	80067a8 <UART_SetConfig+0x174>
 800677e:	2b20      	cmp	r3, #32
 8006780:	d009      	beq.n	8006796 <UART_SetConfig+0x162>
 8006782:	2b20      	cmp	r3, #32
 8006784:	d810      	bhi.n	80067a8 <UART_SetConfig+0x174>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <UART_SetConfig+0x15c>
 800678a:	2b10      	cmp	r3, #16
 800678c:	d006      	beq.n	800679c <UART_SetConfig+0x168>
 800678e:	e00b      	b.n	80067a8 <UART_SetConfig+0x174>
 8006790:	2300      	movs	r3, #0
 8006792:	77fb      	strb	r3, [r7, #31]
 8006794:	e0f2      	b.n	800697c <UART_SetConfig+0x348>
 8006796:	2302      	movs	r3, #2
 8006798:	77fb      	strb	r3, [r7, #31]
 800679a:	e0ef      	b.n	800697c <UART_SetConfig+0x348>
 800679c:	2304      	movs	r3, #4
 800679e:	77fb      	strb	r3, [r7, #31]
 80067a0:	e0ec      	b.n	800697c <UART_SetConfig+0x348>
 80067a2:	2308      	movs	r3, #8
 80067a4:	77fb      	strb	r3, [r7, #31]
 80067a6:	e0e9      	b.n	800697c <UART_SetConfig+0x348>
 80067a8:	2310      	movs	r3, #16
 80067aa:	77fb      	strb	r3, [r7, #31]
 80067ac:	e0e6      	b.n	800697c <UART_SetConfig+0x348>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a56      	ldr	r2, [pc, #344]	@ (800690c <UART_SetConfig+0x2d8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d120      	bne.n	80067fa <UART_SetConfig+0x1c6>
 80067b8:	4b51      	ldr	r3, [pc, #324]	@ (8006900 <UART_SetConfig+0x2cc>)
 80067ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80067c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80067c4:	d013      	beq.n	80067ee <UART_SetConfig+0x1ba>
 80067c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80067c8:	d814      	bhi.n	80067f4 <UART_SetConfig+0x1c0>
 80067ca:	2b80      	cmp	r3, #128	@ 0x80
 80067cc:	d009      	beq.n	80067e2 <UART_SetConfig+0x1ae>
 80067ce:	2b80      	cmp	r3, #128	@ 0x80
 80067d0:	d810      	bhi.n	80067f4 <UART_SetConfig+0x1c0>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <UART_SetConfig+0x1a8>
 80067d6:	2b40      	cmp	r3, #64	@ 0x40
 80067d8:	d006      	beq.n	80067e8 <UART_SetConfig+0x1b4>
 80067da:	e00b      	b.n	80067f4 <UART_SetConfig+0x1c0>
 80067dc:	2300      	movs	r3, #0
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e0cc      	b.n	800697c <UART_SetConfig+0x348>
 80067e2:	2302      	movs	r3, #2
 80067e4:	77fb      	strb	r3, [r7, #31]
 80067e6:	e0c9      	b.n	800697c <UART_SetConfig+0x348>
 80067e8:	2304      	movs	r3, #4
 80067ea:	77fb      	strb	r3, [r7, #31]
 80067ec:	e0c6      	b.n	800697c <UART_SetConfig+0x348>
 80067ee:	2308      	movs	r3, #8
 80067f0:	77fb      	strb	r3, [r7, #31]
 80067f2:	e0c3      	b.n	800697c <UART_SetConfig+0x348>
 80067f4:	2310      	movs	r3, #16
 80067f6:	77fb      	strb	r3, [r7, #31]
 80067f8:	e0c0      	b.n	800697c <UART_SetConfig+0x348>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a44      	ldr	r2, [pc, #272]	@ (8006910 <UART_SetConfig+0x2dc>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d125      	bne.n	8006850 <UART_SetConfig+0x21c>
 8006804:	4b3e      	ldr	r3, [pc, #248]	@ (8006900 <UART_SetConfig+0x2cc>)
 8006806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800680a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800680e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006812:	d017      	beq.n	8006844 <UART_SetConfig+0x210>
 8006814:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006818:	d817      	bhi.n	800684a <UART_SetConfig+0x216>
 800681a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800681e:	d00b      	beq.n	8006838 <UART_SetConfig+0x204>
 8006820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006824:	d811      	bhi.n	800684a <UART_SetConfig+0x216>
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <UART_SetConfig+0x1fe>
 800682a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800682e:	d006      	beq.n	800683e <UART_SetConfig+0x20a>
 8006830:	e00b      	b.n	800684a <UART_SetConfig+0x216>
 8006832:	2300      	movs	r3, #0
 8006834:	77fb      	strb	r3, [r7, #31]
 8006836:	e0a1      	b.n	800697c <UART_SetConfig+0x348>
 8006838:	2302      	movs	r3, #2
 800683a:	77fb      	strb	r3, [r7, #31]
 800683c:	e09e      	b.n	800697c <UART_SetConfig+0x348>
 800683e:	2304      	movs	r3, #4
 8006840:	77fb      	strb	r3, [r7, #31]
 8006842:	e09b      	b.n	800697c <UART_SetConfig+0x348>
 8006844:	2308      	movs	r3, #8
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e098      	b.n	800697c <UART_SetConfig+0x348>
 800684a:	2310      	movs	r3, #16
 800684c:	77fb      	strb	r3, [r7, #31]
 800684e:	e095      	b.n	800697c <UART_SetConfig+0x348>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a2f      	ldr	r2, [pc, #188]	@ (8006914 <UART_SetConfig+0x2e0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d125      	bne.n	80068a6 <UART_SetConfig+0x272>
 800685a:	4b29      	ldr	r3, [pc, #164]	@ (8006900 <UART_SetConfig+0x2cc>)
 800685c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006860:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006864:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006868:	d017      	beq.n	800689a <UART_SetConfig+0x266>
 800686a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800686e:	d817      	bhi.n	80068a0 <UART_SetConfig+0x26c>
 8006870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006874:	d00b      	beq.n	800688e <UART_SetConfig+0x25a>
 8006876:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800687a:	d811      	bhi.n	80068a0 <UART_SetConfig+0x26c>
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <UART_SetConfig+0x254>
 8006880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006884:	d006      	beq.n	8006894 <UART_SetConfig+0x260>
 8006886:	e00b      	b.n	80068a0 <UART_SetConfig+0x26c>
 8006888:	2301      	movs	r3, #1
 800688a:	77fb      	strb	r3, [r7, #31]
 800688c:	e076      	b.n	800697c <UART_SetConfig+0x348>
 800688e:	2302      	movs	r3, #2
 8006890:	77fb      	strb	r3, [r7, #31]
 8006892:	e073      	b.n	800697c <UART_SetConfig+0x348>
 8006894:	2304      	movs	r3, #4
 8006896:	77fb      	strb	r3, [r7, #31]
 8006898:	e070      	b.n	800697c <UART_SetConfig+0x348>
 800689a:	2308      	movs	r3, #8
 800689c:	77fb      	strb	r3, [r7, #31]
 800689e:	e06d      	b.n	800697c <UART_SetConfig+0x348>
 80068a0:	2310      	movs	r3, #16
 80068a2:	77fb      	strb	r3, [r7, #31]
 80068a4:	e06a      	b.n	800697c <UART_SetConfig+0x348>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006918 <UART_SetConfig+0x2e4>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d138      	bne.n	8006922 <UART_SetConfig+0x2ee>
 80068b0:	4b13      	ldr	r3, [pc, #76]	@ (8006900 <UART_SetConfig+0x2cc>)
 80068b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80068ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068be:	d017      	beq.n	80068f0 <UART_SetConfig+0x2bc>
 80068c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068c4:	d82a      	bhi.n	800691c <UART_SetConfig+0x2e8>
 80068c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068ca:	d00b      	beq.n	80068e4 <UART_SetConfig+0x2b0>
 80068cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068d0:	d824      	bhi.n	800691c <UART_SetConfig+0x2e8>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <UART_SetConfig+0x2aa>
 80068d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068da:	d006      	beq.n	80068ea <UART_SetConfig+0x2b6>
 80068dc:	e01e      	b.n	800691c <UART_SetConfig+0x2e8>
 80068de:	2300      	movs	r3, #0
 80068e0:	77fb      	strb	r3, [r7, #31]
 80068e2:	e04b      	b.n	800697c <UART_SetConfig+0x348>
 80068e4:	2302      	movs	r3, #2
 80068e6:	77fb      	strb	r3, [r7, #31]
 80068e8:	e048      	b.n	800697c <UART_SetConfig+0x348>
 80068ea:	2304      	movs	r3, #4
 80068ec:	77fb      	strb	r3, [r7, #31]
 80068ee:	e045      	b.n	800697c <UART_SetConfig+0x348>
 80068f0:	2308      	movs	r3, #8
 80068f2:	77fb      	strb	r3, [r7, #31]
 80068f4:	e042      	b.n	800697c <UART_SetConfig+0x348>
 80068f6:	bf00      	nop
 80068f8:	efff69f3 	.word	0xefff69f3
 80068fc:	40011000 	.word	0x40011000
 8006900:	40023800 	.word	0x40023800
 8006904:	40004400 	.word	0x40004400
 8006908:	40004800 	.word	0x40004800
 800690c:	40004c00 	.word	0x40004c00
 8006910:	40005000 	.word	0x40005000
 8006914:	40011400 	.word	0x40011400
 8006918:	40007800 	.word	0x40007800
 800691c:	2310      	movs	r3, #16
 800691e:	77fb      	strb	r3, [r7, #31]
 8006920:	e02c      	b.n	800697c <UART_SetConfig+0x348>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a72      	ldr	r2, [pc, #456]	@ (8006af0 <UART_SetConfig+0x4bc>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d125      	bne.n	8006978 <UART_SetConfig+0x344>
 800692c:	4b71      	ldr	r3, [pc, #452]	@ (8006af4 <UART_SetConfig+0x4c0>)
 800692e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006932:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006936:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800693a:	d017      	beq.n	800696c <UART_SetConfig+0x338>
 800693c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006940:	d817      	bhi.n	8006972 <UART_SetConfig+0x33e>
 8006942:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006946:	d00b      	beq.n	8006960 <UART_SetConfig+0x32c>
 8006948:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800694c:	d811      	bhi.n	8006972 <UART_SetConfig+0x33e>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <UART_SetConfig+0x326>
 8006952:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006956:	d006      	beq.n	8006966 <UART_SetConfig+0x332>
 8006958:	e00b      	b.n	8006972 <UART_SetConfig+0x33e>
 800695a:	2300      	movs	r3, #0
 800695c:	77fb      	strb	r3, [r7, #31]
 800695e:	e00d      	b.n	800697c <UART_SetConfig+0x348>
 8006960:	2302      	movs	r3, #2
 8006962:	77fb      	strb	r3, [r7, #31]
 8006964:	e00a      	b.n	800697c <UART_SetConfig+0x348>
 8006966:	2304      	movs	r3, #4
 8006968:	77fb      	strb	r3, [r7, #31]
 800696a:	e007      	b.n	800697c <UART_SetConfig+0x348>
 800696c:	2308      	movs	r3, #8
 800696e:	77fb      	strb	r3, [r7, #31]
 8006970:	e004      	b.n	800697c <UART_SetConfig+0x348>
 8006972:	2310      	movs	r3, #16
 8006974:	77fb      	strb	r3, [r7, #31]
 8006976:	e001      	b.n	800697c <UART_SetConfig+0x348>
 8006978:	2310      	movs	r3, #16
 800697a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006984:	d15b      	bne.n	8006a3e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006986:	7ffb      	ldrb	r3, [r7, #31]
 8006988:	2b08      	cmp	r3, #8
 800698a:	d828      	bhi.n	80069de <UART_SetConfig+0x3aa>
 800698c:	a201      	add	r2, pc, #4	@ (adr r2, 8006994 <UART_SetConfig+0x360>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069b9 	.word	0x080069b9
 8006998:	080069c1 	.word	0x080069c1
 800699c:	080069c9 	.word	0x080069c9
 80069a0:	080069df 	.word	0x080069df
 80069a4:	080069cf 	.word	0x080069cf
 80069a8:	080069df 	.word	0x080069df
 80069ac:	080069df 	.word	0x080069df
 80069b0:	080069df 	.word	0x080069df
 80069b4:	080069d7 	.word	0x080069d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b8:	f7fe f9e4 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 80069bc:	61b8      	str	r0, [r7, #24]
        break;
 80069be:	e013      	b.n	80069e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069c0:	f7fe f9f4 	bl	8004dac <HAL_RCC_GetPCLK2Freq>
 80069c4:	61b8      	str	r0, [r7, #24]
        break;
 80069c6:	e00f      	b.n	80069e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c8:	4b4b      	ldr	r3, [pc, #300]	@ (8006af8 <UART_SetConfig+0x4c4>)
 80069ca:	61bb      	str	r3, [r7, #24]
        break;
 80069cc:	e00c      	b.n	80069e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ce:	f7fe f8c7 	bl	8004b60 <HAL_RCC_GetSysClockFreq>
 80069d2:	61b8      	str	r0, [r7, #24]
        break;
 80069d4:	e008      	b.n	80069e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069da:	61bb      	str	r3, [r7, #24]
        break;
 80069dc:	e004      	b.n	80069e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	77bb      	strb	r3, [r7, #30]
        break;
 80069e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d074      	beq.n	8006ad8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	005a      	lsls	r2, r3, #1
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	085b      	lsrs	r3, r3, #1
 80069f8:	441a      	add	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2b0f      	cmp	r3, #15
 8006a08:	d916      	bls.n	8006a38 <UART_SetConfig+0x404>
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a10:	d212      	bcs.n	8006a38 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	f023 030f 	bic.w	r3, r3, #15
 8006a1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	085b      	lsrs	r3, r3, #1
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	89fb      	ldrh	r3, [r7, #14]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	89fa      	ldrh	r2, [r7, #14]
 8006a34:	60da      	str	r2, [r3, #12]
 8006a36:	e04f      	b.n	8006ad8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	77bb      	strb	r3, [r7, #30]
 8006a3c:	e04c      	b.n	8006ad8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a3e:	7ffb      	ldrb	r3, [r7, #31]
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d828      	bhi.n	8006a96 <UART_SetConfig+0x462>
 8006a44:	a201      	add	r2, pc, #4	@ (adr r2, 8006a4c <UART_SetConfig+0x418>)
 8006a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4a:	bf00      	nop
 8006a4c:	08006a71 	.word	0x08006a71
 8006a50:	08006a79 	.word	0x08006a79
 8006a54:	08006a81 	.word	0x08006a81
 8006a58:	08006a97 	.word	0x08006a97
 8006a5c:	08006a87 	.word	0x08006a87
 8006a60:	08006a97 	.word	0x08006a97
 8006a64:	08006a97 	.word	0x08006a97
 8006a68:	08006a97 	.word	0x08006a97
 8006a6c:	08006a8f 	.word	0x08006a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a70:	f7fe f988 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 8006a74:	61b8      	str	r0, [r7, #24]
        break;
 8006a76:	e013      	b.n	8006aa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a78:	f7fe f998 	bl	8004dac <HAL_RCC_GetPCLK2Freq>
 8006a7c:	61b8      	str	r0, [r7, #24]
        break;
 8006a7e:	e00f      	b.n	8006aa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a80:	4b1d      	ldr	r3, [pc, #116]	@ (8006af8 <UART_SetConfig+0x4c4>)
 8006a82:	61bb      	str	r3, [r7, #24]
        break;
 8006a84:	e00c      	b.n	8006aa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a86:	f7fe f86b 	bl	8004b60 <HAL_RCC_GetSysClockFreq>
 8006a8a:	61b8      	str	r0, [r7, #24]
        break;
 8006a8c:	e008      	b.n	8006aa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a92:	61bb      	str	r3, [r7, #24]
        break;
 8006a94:	e004      	b.n	8006aa0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	77bb      	strb	r3, [r7, #30]
        break;
 8006a9e:	bf00      	nop
    }

    if (pclk != 0U)
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d018      	beq.n	8006ad8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	085a      	lsrs	r2, r3, #1
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	441a      	add	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b0f      	cmp	r3, #15
 8006abe:	d909      	bls.n	8006ad4 <UART_SetConfig+0x4a0>
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ac6:	d205      	bcs.n	8006ad4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	60da      	str	r2, [r3, #12]
 8006ad2:	e001      	b.n	8006ad8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006ae4:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3720      	adds	r7, #32
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	40007c00 	.word	0x40007c00
 8006af4:	40023800 	.word	0x40023800
 8006af8:	00f42400 	.word	0x00f42400

08006afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00a      	beq.n	8006b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00a      	beq.n	8006b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00a      	beq.n	8006b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00a      	beq.n	8006b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00a      	beq.n	8006bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00a      	beq.n	8006bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01a      	beq.n	8006c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bfa:	d10a      	bne.n	8006c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	605a      	str	r2, [r3, #4]
  }
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08c      	sub	sp, #48	@ 0x30
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c50:	f7fa fffa 	bl	8001c48 <HAL_GetTick>
 8006c54:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d12e      	bne.n	8006cc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f83b 	bl	8006cee <UART_WaitOnFlagUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d021      	beq.n	8006cc2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c92:	623b      	str	r3, [r7, #32]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	69b9      	ldr	r1, [r7, #24]
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e6      	bne.n	8006c7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e011      	b.n	8006ce6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3728      	adds	r7, #40	@ 0x28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	603b      	str	r3, [r7, #0]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfe:	e04f      	b.n	8006da0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d06:	d04b      	beq.n	8006da0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d08:	f7fa ff9e 	bl	8001c48 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d302      	bcc.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x30>
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e04e      	b.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d037      	beq.n	8006da0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2b80      	cmp	r3, #128	@ 0x80
 8006d34:	d034      	beq.n	8006da0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b40      	cmp	r3, #64	@ 0x40
 8006d3a:	d031      	beq.n	8006da0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	f003 0308 	and.w	r3, r3, #8
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d110      	bne.n	8006d6c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2208      	movs	r2, #8
 8006d50:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 f8fe 	bl	8006f54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2208      	movs	r2, #8
 8006d5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e029      	b.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d7a:	d111      	bne.n	8006da0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d84:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 f8e4 	bl	8006f54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e00f      	b.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	69da      	ldr	r2, [r3, #28]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	4013      	ands	r3, r2
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	bf0c      	ite	eq
 8006db0:	2301      	moveq	r3, #1
 8006db2:	2300      	movne	r3, #0
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	461a      	mov	r2, r3
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d0a0      	beq.n	8006d00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b096      	sub	sp, #88	@ 0x58
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	88fa      	ldrh	r2, [r7, #6]
 8006de0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2222      	movs	r2, #34	@ 0x22
 8006df0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d028      	beq.n	8006e4e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e00:	4a3e      	ldr	r2, [pc, #248]	@ (8006efc <UART_Start_Receive_DMA+0x134>)
 8006e02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e08:	4a3d      	ldr	r2, [pc, #244]	@ (8006f00 <UART_Start_Receive_DMA+0x138>)
 8006e0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e10:	4a3c      	ldr	r2, [pc, #240]	@ (8006f04 <UART_Start_Receive_DMA+0x13c>)
 8006e12:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e18:	2200      	movs	r2, #0
 8006e1a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3324      	adds	r3, #36	@ 0x24
 8006e26:	4619      	mov	r1, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	88fb      	ldrh	r3, [r7, #6]
 8006e30:	f7fb f8ca 	bl	8001fc8 <HAL_DMA_Start_IT>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d009      	beq.n	8006e4e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2210      	movs	r2, #16
 8006e3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2220      	movs	r2, #32
 8006e46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e051      	b.n	8006ef2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d018      	beq.n	8006e88 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e5e:	e853 3f00 	ldrex	r3, [r3]
 8006e62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e76:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e7c:	e841 2300 	strex	r3, r2, [r1]
 8006e80:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e6      	bne.n	8006e56 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9a:	f043 0301 	orr.w	r3, r3, #1
 8006e9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ea8:	637a      	str	r2, [r7, #52]	@ 0x34
 8006eaa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006eae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e5      	bne.n	8006e88 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	613b      	str	r3, [r7, #16]
   return(result);
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3308      	adds	r3, #8
 8006eda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006edc:	623a      	str	r2, [r7, #32]
 8006ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	69f9      	ldr	r1, [r7, #28]
 8006ee2:	6a3a      	ldr	r2, [r7, #32]
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e5      	bne.n	8006ebc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3758      	adds	r7, #88	@ 0x58
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	080070cf 	.word	0x080070cf
 8006f00:	0800722d 	.word	0x0800722d
 8006f04:	0800729f 	.word	0x0800729f

08006f08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b089      	sub	sp, #36	@ 0x24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006f24:	61fb      	str	r3, [r7, #28]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	61bb      	str	r3, [r7, #24]
 8006f30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	6979      	ldr	r1, [r7, #20]
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e6      	bne.n	8006f10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2220      	movs	r2, #32
 8006f46:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006f48:	bf00      	nop
 8006f4a:	3724      	adds	r7, #36	@ 0x24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b095      	sub	sp, #84	@ 0x54
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1e6      	bne.n	8006f5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3308      	adds	r3, #8
 8006f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	f023 0301 	bic.w	r3, r3, #1
 8006fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3308      	adds	r3, #8
 8006fac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e5      	bne.n	8006f8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d118      	bne.n	8006ffc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f023 0310 	bic.w	r3, r3, #16
 8006fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	6979      	ldr	r1, [r7, #20]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e6      	bne.n	8006fca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007010:	bf00      	nop
 8007012:	3754      	adds	r7, #84	@ 0x54
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b090      	sub	sp, #64	@ 0x40
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007028:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007032:	d037      	beq.n	80070a4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8007034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007036:	2200      	movs	r2, #0
 8007038:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800703c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3308      	adds	r3, #8
 8007042:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	623b      	str	r3, [r7, #32]
   return(result);
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007052:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3308      	adds	r3, #8
 800705a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800705c:	633a      	str	r2, [r7, #48]	@ 0x30
 800705e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800706a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e5      	bne.n	800703c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	60fb      	str	r3, [r7, #12]
   return(result);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007084:	637b      	str	r3, [r7, #52]	@ 0x34
 8007086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708e:	61fb      	str	r3, [r7, #28]
 8007090:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	69b9      	ldr	r1, [r7, #24]
 8007094:	69fa      	ldr	r2, [r7, #28]
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	617b      	str	r3, [r7, #20]
   return(result);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e6      	bne.n	8007070 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070a2:	e002      	b.n	80070aa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80070a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80070a6:	f00f ffa9 	bl	8016ffc <HAL_UART_TxCpltCallback>
}
 80070aa:	bf00      	nop
 80070ac:	3740      	adds	r7, #64	@ 0x40
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070be:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f7ff fa8d 	bl	80065e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b09c      	sub	sp, #112	@ 0x70
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070da:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070e4:	d071      	beq.n	80071ca <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80070e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070e8:	2200      	movs	r2, #0
 80070ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070f6:	e853 3f00 	ldrex	r3, [r3]
 80070fa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80070fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007102:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	461a      	mov	r2, r3
 800710a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800710c:	657b      	str	r3, [r7, #84]	@ 0x54
 800710e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007112:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800711a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e6      	bne.n	80070ee <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007132:	f023 0301 	bic.w	r3, r3, #1
 8007136:	667b      	str	r3, [r7, #100]	@ 0x64
 8007138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007140:	643a      	str	r2, [r7, #64]	@ 0x40
 8007142:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007146:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800714e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e5      	bne.n	8007120 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	e853 3f00 	ldrex	r3, [r3]
 8007162:	61fb      	str	r3, [r7, #28]
   return(result);
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800716a:	663b      	str	r3, [r7, #96]	@ 0x60
 800716c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3308      	adds	r3, #8
 8007172:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007174:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007176:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800717a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e5      	bne.n	8007154 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007188:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800718a:	2220      	movs	r2, #32
 800718c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007194:	2b01      	cmp	r3, #1
 8007196:	d118      	bne.n	80071ca <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f023 0310 	bic.w	r3, r3, #16
 80071ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071b6:	61bb      	str	r3, [r7, #24]
 80071b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	6979      	ldr	r1, [r7, #20]
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	613b      	str	r3, [r7, #16]
   return(result);
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e6      	bne.n	8007198 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071cc:	2200      	movs	r2, #0
 80071ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d122      	bne.n	800721e <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 80071d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071da:	2200      	movs	r2, #0
 80071dc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 80071ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80071f0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d204      	bcs.n	8007202 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80071f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071fa:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80071fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007202:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007204:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800720a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800720e:	b29b      	uxth	r3, r3
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	b29b      	uxth	r3, r3
 8007214:	4619      	mov	r1, r3
 8007216:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007218:	f7ff fa00 	bl	800661c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800721c:	e002      	b.n	8007224 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800721e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007220:	f00f ff1a 	bl	8017058 <HAL_UART_RxCpltCallback>
}
 8007224:	bf00      	nop
 8007226:	3770      	adds	r7, #112	@ 0x70
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007238:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007244:	2b01      	cmp	r3, #1
 8007246:	d123      	bne.n	8007290 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800724e:	085b      	lsrs	r3, r3, #1
 8007250:	b29a      	uxth	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007266:	897a      	ldrh	r2, [r7, #10]
 8007268:	429a      	cmp	r2, r3
 800726a:	d803      	bhi.n	8007274 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	897a      	ldrh	r2, [r7, #10]
 8007270:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007280:	b29b      	uxth	r3, r3
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	b29b      	uxth	r3, r3
 8007286:	4619      	mov	r1, r3
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f7ff f9c7 	bl	800661c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800728e:	e002      	b.n	8007296 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f7ff f9af 	bl	80065f4 <HAL_UART_RxHalfCpltCallback>
}
 8007296:	bf00      	nop
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b086      	sub	sp, #24
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072aa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072b0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072b8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c4:	2b80      	cmp	r3, #128	@ 0x80
 80072c6:	d109      	bne.n	80072dc <UART_DMAError+0x3e>
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	2b21      	cmp	r3, #33	@ 0x21
 80072cc:	d106      	bne.n	80072dc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80072d6:	6978      	ldr	r0, [r7, #20]
 80072d8:	f7ff fe16 	bl	8006f08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e6:	2b40      	cmp	r3, #64	@ 0x40
 80072e8:	d109      	bne.n	80072fe <UART_DMAError+0x60>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b22      	cmp	r3, #34	@ 0x22
 80072ee:	d106      	bne.n	80072fe <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80072f8:	6978      	ldr	r0, [r7, #20]
 80072fa:	f7ff fe2b 	bl	8006f54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007304:	f043 0210 	orr.w	r2, r3, #16
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800730e:	6978      	ldr	r0, [r7, #20]
 8007310:	f7ff f97a 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007314:	bf00      	nop
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007328:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f7ff f968 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007338:	bf00      	nop
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	60bb      	str	r3, [r7, #8]
   return(result);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	61bb      	str	r3, [r7, #24]
 8007368:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6979      	ldr	r1, [r7, #20]
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	613b      	str	r3, [r7, #16]
   return(result);
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e6      	bne.n	8007348 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2220      	movs	r2, #32
 800737e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f00f fe38 	bl	8016ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800738c:	bf00      	nop
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007394:	b084      	sub	sp, #16
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	f107 001c 	add.w	r0, r7, #28
 80073a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d121      	bne.n	80073f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	4b21      	ldr	r3, [pc, #132]	@ (8007444 <USB_CoreInit+0xb0>)
 80073c0:	4013      	ands	r3, r2
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d105      	bne.n	80073e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fa92 	bl	8007910 <USB_CoreReset>
 80073ec:	4603      	mov	r3, r0
 80073ee:	73fb      	strb	r3, [r7, #15]
 80073f0:	e010      	b.n	8007414 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fa86 	bl	8007910 <USB_CoreReset>
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007414:	7fbb      	ldrb	r3, [r7, #30]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d10b      	bne.n	8007432 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f043 0206 	orr.w	r2, r3, #6
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f043 0220 	orr.w	r2, r3, #32
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007432:	7bfb      	ldrb	r3, [r7, #15]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800743e:	b004      	add	sp, #16
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	ffbdffbf 	.word	0xffbdffbf

08007448 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f023 0201 	bic.w	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	460b      	mov	r3, r1
 8007474:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d115      	bne.n	80074b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007498:	200a      	movs	r0, #10
 800749a:	f7fa fbe1 	bl	8001c60 <HAL_Delay>
      ms += 10U;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	330a      	adds	r3, #10
 80074a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fa25 	bl	80078f4 <USB_GetMode>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d01e      	beq.n	80074ee <USB_SetCurrentMode+0x84>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80074b4:	d9f0      	bls.n	8007498 <USB_SetCurrentMode+0x2e>
 80074b6:	e01a      	b.n	80074ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d115      	bne.n	80074ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074ca:	200a      	movs	r0, #10
 80074cc:	f7fa fbc8 	bl	8001c60 <HAL_Delay>
      ms += 10U;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	330a      	adds	r3, #10
 80074d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fa0c 	bl	80078f4 <USB_GetMode>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d005      	beq.n	80074ee <USB_SetCurrentMode+0x84>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80074e6:	d9f0      	bls.n	80074ca <USB_SetCurrentMode+0x60>
 80074e8:	e001      	b.n	80074ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e005      	b.n	80074fa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2bc8      	cmp	r3, #200	@ 0xc8
 80074f2:	d101      	bne.n	80074f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007504:	b084      	sub	sp, #16
 8007506:	b580      	push	{r7, lr}
 8007508:	b086      	sub	sp, #24
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800751e:	2300      	movs	r3, #0
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	e009      	b.n	8007538 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	3340      	adds	r3, #64	@ 0x40
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	2200      	movs	r2, #0
 8007530:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	3301      	adds	r3, #1
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2b0e      	cmp	r3, #14
 800753c:	d9f2      	bls.n	8007524 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800753e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007542:	2b00      	cmp	r3, #0
 8007544:	d11c      	bne.n	8007580 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007554:	f043 0302 	orr.w	r3, r3, #2
 8007558:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	e005      	b.n	800758c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007584:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007592:	461a      	mov	r2, r3
 8007594:	2300      	movs	r3, #0
 8007596:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007598:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800759c:	2b01      	cmp	r3, #1
 800759e:	d10d      	bne.n	80075bc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075a8:	2100      	movs	r1, #0
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f968 	bl	8007880 <USB_SetDevSpeed>
 80075b0:	e008      	b.n	80075c4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075b2:	2101      	movs	r1, #1
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f963 	bl	8007880 <USB_SetDevSpeed>
 80075ba:	e003      	b.n	80075c4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075bc:	2103      	movs	r1, #3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f95e 	bl	8007880 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075c4:	2110      	movs	r1, #16
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f8fa 	bl	80077c0 <USB_FlushTxFifo>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f924 	bl	8007824 <USB_FlushRxFifo>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ec:	461a      	mov	r2, r3
 80075ee:	2300      	movs	r3, #0
 80075f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075f8:	461a      	mov	r2, r3
 80075fa:	2300      	movs	r3, #0
 80075fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007604:	461a      	mov	r2, r3
 8007606:	2300      	movs	r3, #0
 8007608:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800760a:	2300      	movs	r3, #0
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	e043      	b.n	8007698 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007622:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007626:	d118      	bne.n	800765a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10a      	bne.n	8007644 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800763a:	461a      	mov	r2, r3
 800763c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	e013      	b.n	800766c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007650:	461a      	mov	r2, r3
 8007652:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	e008      	b.n	800766c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007666:	461a      	mov	r2, r3
 8007668:	2300      	movs	r3, #0
 800766a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007678:	461a      	mov	r2, r3
 800767a:	2300      	movs	r3, #0
 800767c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800768a:	461a      	mov	r2, r3
 800768c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007690:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	3301      	adds	r3, #1
 8007696:	613b      	str	r3, [r7, #16]
 8007698:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800769c:	461a      	mov	r2, r3
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d3b5      	bcc.n	8007610 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a4:	2300      	movs	r3, #0
 80076a6:	613b      	str	r3, [r7, #16]
 80076a8:	e043      	b.n	8007732 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076c0:	d118      	bne.n	80076f4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d4:	461a      	mov	r2, r3
 80076d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80076da:	6013      	str	r3, [r2, #0]
 80076dc:	e013      	b.n	8007706 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ea:	461a      	mov	r2, r3
 80076ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80076f0:	6013      	str	r3, [r2, #0]
 80076f2:	e008      	b.n	8007706 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007700:	461a      	mov	r2, r3
 8007702:	2300      	movs	r3, #0
 8007704:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007712:	461a      	mov	r2, r3
 8007714:	2300      	movs	r3, #0
 8007716:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007724:	461a      	mov	r2, r3
 8007726:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800772a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	3301      	adds	r3, #1
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007736:	461a      	mov	r2, r3
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	4293      	cmp	r3, r2
 800773c:	d3b5      	bcc.n	80076aa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800774c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007750:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800775e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007760:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007764:	2b00      	cmp	r3, #0
 8007766:	d105      	bne.n	8007774 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	f043 0210 	orr.w	r2, r3, #16
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	699a      	ldr	r2, [r3, #24]
 8007778:	4b0f      	ldr	r3, [pc, #60]	@ (80077b8 <USB_DevInit+0x2b4>)
 800777a:	4313      	orrs	r3, r2
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007780:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007784:	2b00      	cmp	r3, #0
 8007786:	d005      	beq.n	8007794 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	f043 0208 	orr.w	r2, r3, #8
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007794:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007798:	2b01      	cmp	r3, #1
 800779a:	d105      	bne.n	80077a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	699a      	ldr	r2, [r3, #24]
 80077a0:	4b06      	ldr	r3, [pc, #24]	@ (80077bc <USB_DevInit+0x2b8>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077b4:	b004      	add	sp, #16
 80077b6:	4770      	bx	lr
 80077b8:	803c3800 	.word	0x803c3800
 80077bc:	40000004 	.word	0x40000004

080077c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077da:	d901      	bls.n	80077e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e01b      	b.n	8007818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	daf2      	bge.n	80077ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	019b      	lsls	r3, r3, #6
 80077f0:	f043 0220 	orr.w	r2, r3, #32
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	3301      	adds	r3, #1
 80077fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007804:	d901      	bls.n	800780a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e006      	b.n	8007818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b20      	cmp	r3, #32
 8007814:	d0f0      	beq.n	80077f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3301      	adds	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800783c:	d901      	bls.n	8007842 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e018      	b.n	8007874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	daf2      	bge.n	8007830 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2210      	movs	r2, #16
 8007852:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3301      	adds	r3, #1
 8007858:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007860:	d901      	bls.n	8007866 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e006      	b.n	8007874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f003 0310 	and.w	r3, r3, #16
 800786e:	2b10      	cmp	r3, #16
 8007870:	d0f0      	beq.n	8007854 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	68f9      	ldr	r1, [r7, #12]
 800789c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078a0:	4313      	orrs	r3, r2
 80078a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b085      	sub	sp, #20
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80078cc:	f023 0303 	bic.w	r3, r3, #3
 80078d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078e0:	f043 0302 	orr.w	r3, r3, #2
 80078e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	f003 0301 	and.w	r3, r3, #1
}
 8007904:	4618      	mov	r0, r3
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3301      	adds	r3, #1
 8007920:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007928:	d901      	bls.n	800792e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e022      	b.n	8007974 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	daf2      	bge.n	800791c <USB_CoreReset+0xc>

  count = 10U;
 8007936:	230a      	movs	r3, #10
 8007938:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800793a:	e002      	b.n	8007942 <USB_CoreReset+0x32>
  {
    count--;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3b01      	subs	r3, #1
 8007940:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1f9      	bne.n	800793c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f043 0201 	orr.w	r2, r3, #1
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	3301      	adds	r3, #1
 8007958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007960:	d901      	bls.n	8007966 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e006      	b.n	8007974 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b01      	cmp	r3, #1
 8007970:	d0f0      	beq.n	8007954 <USB_CoreReset+0x44>

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007986:	4b96      	ldr	r3, [pc, #600]	@ (8007be0 <MX_LWIP_Init+0x260>)
 8007988:	22c0      	movs	r2, #192	@ 0xc0
 800798a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800798c:	4b94      	ldr	r3, [pc, #592]	@ (8007be0 <MX_LWIP_Init+0x260>)
 800798e:	22a8      	movs	r2, #168	@ 0xa8
 8007990:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8007992:	4b93      	ldr	r3, [pc, #588]	@ (8007be0 <MX_LWIP_Init+0x260>)
 8007994:	2201      	movs	r2, #1
 8007996:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 168;
 8007998:	4b91      	ldr	r3, [pc, #580]	@ (8007be0 <MX_LWIP_Init+0x260>)
 800799a:	22a8      	movs	r2, #168	@ 0xa8
 800799c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800799e:	4b91      	ldr	r3, [pc, #580]	@ (8007be4 <MX_LWIP_Init+0x264>)
 80079a0:	22ff      	movs	r2, #255	@ 0xff
 80079a2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80079a4:	4b8f      	ldr	r3, [pc, #572]	@ (8007be4 <MX_LWIP_Init+0x264>)
 80079a6:	22ff      	movs	r2, #255	@ 0xff
 80079a8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80079aa:	4b8e      	ldr	r3, [pc, #568]	@ (8007be4 <MX_LWIP_Init+0x264>)
 80079ac:	22ff      	movs	r2, #255	@ 0xff
 80079ae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80079b0:	4b8c      	ldr	r3, [pc, #560]	@ (8007be4 <MX_LWIP_Init+0x264>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80079b6:	4b8c      	ldr	r3, [pc, #560]	@ (8007be8 <MX_LWIP_Init+0x268>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80079bc:	4b8a      	ldr	r3, [pc, #552]	@ (8007be8 <MX_LWIP_Init+0x268>)
 80079be:	2200      	movs	r2, #0
 80079c0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80079c2:	4b89      	ldr	r3, [pc, #548]	@ (8007be8 <MX_LWIP_Init+0x268>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80079c8:	4b87      	ldr	r3, [pc, #540]	@ (8007be8 <MX_LWIP_Init+0x268>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80079ce:	2100      	movs	r1, #0
 80079d0:	2000      	movs	r0, #0
 80079d2:	f005 f873 	bl	800cabc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80079d6:	4b82      	ldr	r3, [pc, #520]	@ (8007be0 <MX_LWIP_Init+0x260>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	061a      	lsls	r2, r3, #24
 80079dc:	4b80      	ldr	r3, [pc, #512]	@ (8007be0 <MX_LWIP_Init+0x260>)
 80079de:	785b      	ldrb	r3, [r3, #1]
 80079e0:	041b      	lsls	r3, r3, #16
 80079e2:	431a      	orrs	r2, r3
 80079e4:	4b7e      	ldr	r3, [pc, #504]	@ (8007be0 <MX_LWIP_Init+0x260>)
 80079e6:	789b      	ldrb	r3, [r3, #2]
 80079e8:	021b      	lsls	r3, r3, #8
 80079ea:	4313      	orrs	r3, r2
 80079ec:	4a7c      	ldr	r2, [pc, #496]	@ (8007be0 <MX_LWIP_Init+0x260>)
 80079ee:	78d2      	ldrb	r2, [r2, #3]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	061a      	lsls	r2, r3, #24
 80079f4:	4b7a      	ldr	r3, [pc, #488]	@ (8007be0 <MX_LWIP_Init+0x260>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	0619      	lsls	r1, r3, #24
 80079fa:	4b79      	ldr	r3, [pc, #484]	@ (8007be0 <MX_LWIP_Init+0x260>)
 80079fc:	785b      	ldrb	r3, [r3, #1]
 80079fe:	041b      	lsls	r3, r3, #16
 8007a00:	4319      	orrs	r1, r3
 8007a02:	4b77      	ldr	r3, [pc, #476]	@ (8007be0 <MX_LWIP_Init+0x260>)
 8007a04:	789b      	ldrb	r3, [r3, #2]
 8007a06:	021b      	lsls	r3, r3, #8
 8007a08:	430b      	orrs	r3, r1
 8007a0a:	4975      	ldr	r1, [pc, #468]	@ (8007be0 <MX_LWIP_Init+0x260>)
 8007a0c:	78c9      	ldrb	r1, [r1, #3]
 8007a0e:	430b      	orrs	r3, r1
 8007a10:	021b      	lsls	r3, r3, #8
 8007a12:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a16:	431a      	orrs	r2, r3
 8007a18:	4b71      	ldr	r3, [pc, #452]	@ (8007be0 <MX_LWIP_Init+0x260>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	0619      	lsls	r1, r3, #24
 8007a1e:	4b70      	ldr	r3, [pc, #448]	@ (8007be0 <MX_LWIP_Init+0x260>)
 8007a20:	785b      	ldrb	r3, [r3, #1]
 8007a22:	041b      	lsls	r3, r3, #16
 8007a24:	4319      	orrs	r1, r3
 8007a26:	4b6e      	ldr	r3, [pc, #440]	@ (8007be0 <MX_LWIP_Init+0x260>)
 8007a28:	789b      	ldrb	r3, [r3, #2]
 8007a2a:	021b      	lsls	r3, r3, #8
 8007a2c:	430b      	orrs	r3, r1
 8007a2e:	496c      	ldr	r1, [pc, #432]	@ (8007be0 <MX_LWIP_Init+0x260>)
 8007a30:	78c9      	ldrb	r1, [r1, #3]
 8007a32:	430b      	orrs	r3, r1
 8007a34:	0a1b      	lsrs	r3, r3, #8
 8007a36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	4b68      	ldr	r3, [pc, #416]	@ (8007be0 <MX_LWIP_Init+0x260>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	0619      	lsls	r1, r3, #24
 8007a42:	4b67      	ldr	r3, [pc, #412]	@ (8007be0 <MX_LWIP_Init+0x260>)
 8007a44:	785b      	ldrb	r3, [r3, #1]
 8007a46:	041b      	lsls	r3, r3, #16
 8007a48:	4319      	orrs	r1, r3
 8007a4a:	4b65      	ldr	r3, [pc, #404]	@ (8007be0 <MX_LWIP_Init+0x260>)
 8007a4c:	789b      	ldrb	r3, [r3, #2]
 8007a4e:	021b      	lsls	r3, r3, #8
 8007a50:	430b      	orrs	r3, r1
 8007a52:	4963      	ldr	r1, [pc, #396]	@ (8007be0 <MX_LWIP_Init+0x260>)
 8007a54:	78c9      	ldrb	r1, [r1, #3]
 8007a56:	430b      	orrs	r3, r1
 8007a58:	0e1b      	lsrs	r3, r3, #24
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	4a63      	ldr	r2, [pc, #396]	@ (8007bec <MX_LWIP_Init+0x26c>)
 8007a5e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007a60:	4b60      	ldr	r3, [pc, #384]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	061a      	lsls	r2, r3, #24
 8007a66:	4b5f      	ldr	r3, [pc, #380]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007a68:	785b      	ldrb	r3, [r3, #1]
 8007a6a:	041b      	lsls	r3, r3, #16
 8007a6c:	431a      	orrs	r2, r3
 8007a6e:	4b5d      	ldr	r3, [pc, #372]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007a70:	789b      	ldrb	r3, [r3, #2]
 8007a72:	021b      	lsls	r3, r3, #8
 8007a74:	4313      	orrs	r3, r2
 8007a76:	4a5b      	ldr	r2, [pc, #364]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007a78:	78d2      	ldrb	r2, [r2, #3]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	061a      	lsls	r2, r3, #24
 8007a7e:	4b59      	ldr	r3, [pc, #356]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	0619      	lsls	r1, r3, #24
 8007a84:	4b57      	ldr	r3, [pc, #348]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007a86:	785b      	ldrb	r3, [r3, #1]
 8007a88:	041b      	lsls	r3, r3, #16
 8007a8a:	4319      	orrs	r1, r3
 8007a8c:	4b55      	ldr	r3, [pc, #340]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007a8e:	789b      	ldrb	r3, [r3, #2]
 8007a90:	021b      	lsls	r3, r3, #8
 8007a92:	430b      	orrs	r3, r1
 8007a94:	4953      	ldr	r1, [pc, #332]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007a96:	78c9      	ldrb	r1, [r1, #3]
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	021b      	lsls	r3, r3, #8
 8007a9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	4b50      	ldr	r3, [pc, #320]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	0619      	lsls	r1, r3, #24
 8007aa8:	4b4e      	ldr	r3, [pc, #312]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007aaa:	785b      	ldrb	r3, [r3, #1]
 8007aac:	041b      	lsls	r3, r3, #16
 8007aae:	4319      	orrs	r1, r3
 8007ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007ab2:	789b      	ldrb	r3, [r3, #2]
 8007ab4:	021b      	lsls	r3, r3, #8
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	494a      	ldr	r1, [pc, #296]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007aba:	78c9      	ldrb	r1, [r1, #3]
 8007abc:	430b      	orrs	r3, r1
 8007abe:	0a1b      	lsrs	r3, r3, #8
 8007ac0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	4b47      	ldr	r3, [pc, #284]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	0619      	lsls	r1, r3, #24
 8007acc:	4b45      	ldr	r3, [pc, #276]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007ace:	785b      	ldrb	r3, [r3, #1]
 8007ad0:	041b      	lsls	r3, r3, #16
 8007ad2:	4319      	orrs	r1, r3
 8007ad4:	4b43      	ldr	r3, [pc, #268]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007ad6:	789b      	ldrb	r3, [r3, #2]
 8007ad8:	021b      	lsls	r3, r3, #8
 8007ada:	430b      	orrs	r3, r1
 8007adc:	4941      	ldr	r1, [pc, #260]	@ (8007be4 <MX_LWIP_Init+0x264>)
 8007ade:	78c9      	ldrb	r1, [r1, #3]
 8007ae0:	430b      	orrs	r3, r1
 8007ae2:	0e1b      	lsrs	r3, r3, #24
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	4a42      	ldr	r2, [pc, #264]	@ (8007bf0 <MX_LWIP_Init+0x270>)
 8007ae8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007aea:	4b3f      	ldr	r3, [pc, #252]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	061a      	lsls	r2, r3, #24
 8007af0:	4b3d      	ldr	r3, [pc, #244]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007af2:	785b      	ldrb	r3, [r3, #1]
 8007af4:	041b      	lsls	r3, r3, #16
 8007af6:	431a      	orrs	r2, r3
 8007af8:	4b3b      	ldr	r3, [pc, #236]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007afa:	789b      	ldrb	r3, [r3, #2]
 8007afc:	021b      	lsls	r3, r3, #8
 8007afe:	4313      	orrs	r3, r2
 8007b00:	4a39      	ldr	r2, [pc, #228]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007b02:	78d2      	ldrb	r2, [r2, #3]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	061a      	lsls	r2, r3, #24
 8007b08:	4b37      	ldr	r3, [pc, #220]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	0619      	lsls	r1, r3, #24
 8007b0e:	4b36      	ldr	r3, [pc, #216]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007b10:	785b      	ldrb	r3, [r3, #1]
 8007b12:	041b      	lsls	r3, r3, #16
 8007b14:	4319      	orrs	r1, r3
 8007b16:	4b34      	ldr	r3, [pc, #208]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007b18:	789b      	ldrb	r3, [r3, #2]
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	4932      	ldr	r1, [pc, #200]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007b20:	78c9      	ldrb	r1, [r1, #3]
 8007b22:	430b      	orrs	r3, r1
 8007b24:	021b      	lsls	r3, r3, #8
 8007b26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	0619      	lsls	r1, r3, #24
 8007b32:	4b2d      	ldr	r3, [pc, #180]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007b34:	785b      	ldrb	r3, [r3, #1]
 8007b36:	041b      	lsls	r3, r3, #16
 8007b38:	4319      	orrs	r1, r3
 8007b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007b3c:	789b      	ldrb	r3, [r3, #2]
 8007b3e:	021b      	lsls	r3, r3, #8
 8007b40:	430b      	orrs	r3, r1
 8007b42:	4929      	ldr	r1, [pc, #164]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007b44:	78c9      	ldrb	r1, [r1, #3]
 8007b46:	430b      	orrs	r3, r1
 8007b48:	0a1b      	lsrs	r3, r3, #8
 8007b4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	4b25      	ldr	r3, [pc, #148]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	0619      	lsls	r1, r3, #24
 8007b56:	4b24      	ldr	r3, [pc, #144]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	041b      	lsls	r3, r3, #16
 8007b5c:	4319      	orrs	r1, r3
 8007b5e:	4b22      	ldr	r3, [pc, #136]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007b60:	789b      	ldrb	r3, [r3, #2]
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	430b      	orrs	r3, r1
 8007b66:	4920      	ldr	r1, [pc, #128]	@ (8007be8 <MX_LWIP_Init+0x268>)
 8007b68:	78c9      	ldrb	r1, [r1, #3]
 8007b6a:	430b      	orrs	r3, r1
 8007b6c:	0e1b      	lsrs	r3, r3, #24
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	4a20      	ldr	r2, [pc, #128]	@ (8007bf4 <MX_LWIP_Init+0x274>)
 8007b72:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007b74:	4b20      	ldr	r3, [pc, #128]	@ (8007bf8 <MX_LWIP_Init+0x278>)
 8007b76:	9302      	str	r3, [sp, #8]
 8007b78:	4b20      	ldr	r3, [pc, #128]	@ (8007bfc <MX_LWIP_Init+0x27c>)
 8007b7a:	9301      	str	r3, [sp, #4]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	4b1c      	ldr	r3, [pc, #112]	@ (8007bf4 <MX_LWIP_Init+0x274>)
 8007b82:	4a1b      	ldr	r2, [pc, #108]	@ (8007bf0 <MX_LWIP_Init+0x270>)
 8007b84:	4919      	ldr	r1, [pc, #100]	@ (8007bec <MX_LWIP_Init+0x26c>)
 8007b86:	481e      	ldr	r0, [pc, #120]	@ (8007c00 <MX_LWIP_Init+0x280>)
 8007b88:	f005 fd5e 	bl	800d648 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007b8c:	481c      	ldr	r0, [pc, #112]	@ (8007c00 <MX_LWIP_Init+0x280>)
 8007b8e:	f005 ff0d 	bl	800d9ac <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007b92:	481b      	ldr	r0, [pc, #108]	@ (8007c00 <MX_LWIP_Init+0x280>)
 8007b94:	f005 ff1a 	bl	800d9cc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007b98:	491a      	ldr	r1, [pc, #104]	@ (8007c04 <MX_LWIP_Init+0x284>)
 8007b9a:	4819      	ldr	r0, [pc, #100]	@ (8007c00 <MX_LWIP_Init+0x280>)
 8007b9c:	f006 f818 	bl	800dbd0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007ba0:	2224      	movs	r2, #36	@ 0x24
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	4818      	ldr	r0, [pc, #96]	@ (8007c08 <MX_LWIP_Init+0x288>)
 8007ba6:	f00f fcdd 	bl	8017564 <memset>
  attributes.name = "EthLink";
 8007baa:	4b17      	ldr	r3, [pc, #92]	@ (8007c08 <MX_LWIP_Init+0x288>)
 8007bac:	4a17      	ldr	r2, [pc, #92]	@ (8007c0c <MX_LWIP_Init+0x28c>)
 8007bae:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007bb0:	4b15      	ldr	r3, [pc, #84]	@ (8007c08 <MX_LWIP_Init+0x288>)
 8007bb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007bb6:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8007bb8:	4b13      	ldr	r3, [pc, #76]	@ (8007c08 <MX_LWIP_Init+0x288>)
 8007bba:	2210      	movs	r2, #16
 8007bbc:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8007bbe:	4a12      	ldr	r2, [pc, #72]	@ (8007c08 <MX_LWIP_Init+0x288>)
 8007bc0:	490f      	ldr	r1, [pc, #60]	@ (8007c00 <MX_LWIP_Init+0x280>)
 8007bc2:	4813      	ldr	r0, [pc, #76]	@ (8007c10 <MX_LWIP_Init+0x290>)
 8007bc4:	f000 fdda 	bl	800877c <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  printf("IP: %s\n", ipaddr_ntoa(&gnetif.ip_addr));
 8007bc8:	4812      	ldr	r0, [pc, #72]	@ (8007c14 <MX_LWIP_Init+0x294>)
 8007bca:	f00d ff7f 	bl	8015acc <ip4addr_ntoa>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4811      	ldr	r0, [pc, #68]	@ (8007c18 <MX_LWIP_Init+0x298>)
 8007bd4:	f00f fb6e 	bl	80172b4 <iprintf>
/* USER CODE END 3 */
}
 8007bd8:	bf00      	nop
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	20000b10 	.word	0x20000b10
 8007be4:	20000b14 	.word	0x20000b14
 8007be8:	20000b18 	.word	0x20000b18
 8007bec:	20000b04 	.word	0x20000b04
 8007bf0:	20000b08 	.word	0x20000b08
 8007bf4:	20000b0c 	.word	0x20000b0c
 8007bf8:	0800c9f9 	.word	0x0800c9f9
 8007bfc:	0800815d 	.word	0x0800815d
 8007c00:	20000ad0 	.word	0x20000ad0
 8007c04:	08007c1d 	.word	0x08007c1d
 8007c08:	20000b1c 	.word	0x20000b1c
 8007c0c:	080185d0 	.word	0x080185d0
 8007c10:	08008435 	.word	0x08008435
 8007c14:	20000ad4 	.word	0x20000ad4
 8007c18:	080185d8 	.word	0x080185d8

08007c1c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007c42:	2320      	movs	r3, #32
 8007c44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007c46:	f3bf 8f4f 	dsb	sy
}
 8007c4a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8007c4c:	e00b      	b.n	8007c66 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8007c84 <SCB_InvalidateDCache_by_Addr+0x54>)
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	dcf0      	bgt.n	8007c4e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007c6c:	f3bf 8f4f 	dsb	sy
}
 8007c70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007c72:	f3bf 8f6f 	isb	sy
}
 8007c76:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8007c78:	bf00      	nop
 8007c7a:	371c      	adds	r7, #28
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	e000ed00 	.word	0xe000ed00

08007c88 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007c90:	4b04      	ldr	r3, [pc, #16]	@ (8007ca4 <HAL_ETH_RxCpltCallback+0x1c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f001 f88f 	bl	8008db8 <osSemaphoreRelease>
}
 8007c9a:	bf00      	nop
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20009e4c 	.word	0x20009e4c

08007ca8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007cb0:	4b04      	ldr	r3, [pc, #16]	@ (8007cc4 <HAL_ETH_TxCpltCallback+0x1c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f001 f87f 	bl	8008db8 <osSemaphoreRelease>
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20009e50 	.word	0x20009e50

08007cc8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7fb fb2a 	bl	800332a <HAL_ETH_GetDMAError>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cdc:	2b80      	cmp	r3, #128	@ 0x80
 8007cde:	d104      	bne.n	8007cea <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007ce0:	4b04      	ldr	r3, [pc, #16]	@ (8007cf4 <HAL_ETH_ErrorCallback+0x2c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f001 f867 	bl	8008db8 <osSemaphoreRelease>
  }
}
 8007cea:	bf00      	nop
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20009e4c 	.word	0x20009e4c

08007cf8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b0aa      	sub	sp, #168	@ 0xa8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8007d06:	2300      	movs	r3, #0
 8007d08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8007d12:	f107 0310 	add.w	r3, r7, #16
 8007d16:	2264      	movs	r2, #100	@ 0x64
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f00f fc22 	bl	8017564 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007d20:	4b89      	ldr	r3, [pc, #548]	@ (8007f48 <low_level_init+0x250>)
 8007d22:	4a8a      	ldr	r2, [pc, #552]	@ (8007f4c <low_level_init+0x254>)
 8007d24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007d26:	2300      	movs	r3, #0
 8007d28:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007d2a:	2380      	movs	r3, #128	@ 0x80
 8007d2c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007d2e:	23e1      	movs	r3, #225	@ 0xe1
 8007d30:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007d32:	2300      	movs	r3, #0
 8007d34:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007d36:	2300      	movs	r3, #0
 8007d38:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007d3e:	4a82      	ldr	r2, [pc, #520]	@ (8007f48 <low_level_init+0x250>)
 8007d40:	f107 0308 	add.w	r3, r7, #8
 8007d44:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007d46:	4b80      	ldr	r3, [pc, #512]	@ (8007f48 <low_level_init+0x250>)
 8007d48:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007d4c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007d4e:	4b7e      	ldr	r3, [pc, #504]	@ (8007f48 <low_level_init+0x250>)
 8007d50:	4a7f      	ldr	r2, [pc, #508]	@ (8007f50 <low_level_init+0x258>)
 8007d52:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007d54:	4b7c      	ldr	r3, [pc, #496]	@ (8007f48 <low_level_init+0x250>)
 8007d56:	4a7f      	ldr	r2, [pc, #508]	@ (8007f54 <low_level_init+0x25c>)
 8007d58:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8007f48 <low_level_init+0x250>)
 8007d5c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007d60:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007d62:	4879      	ldr	r0, [pc, #484]	@ (8007f48 <low_level_init+0x250>)
 8007d64:	f7fa fc98 	bl	8002698 <HAL_ETH_Init>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007d6e:	2238      	movs	r2, #56	@ 0x38
 8007d70:	2100      	movs	r1, #0
 8007d72:	4879      	ldr	r0, [pc, #484]	@ (8007f58 <low_level_init+0x260>)
 8007d74:	f00f fbf6 	bl	8017564 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007d78:	4b77      	ldr	r3, [pc, #476]	@ (8007f58 <low_level_init+0x260>)
 8007d7a:	2221      	movs	r2, #33	@ 0x21
 8007d7c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007d7e:	4b76      	ldr	r3, [pc, #472]	@ (8007f58 <low_level_init+0x260>)
 8007d80:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8007d84:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007d86:	4b74      	ldr	r3, [pc, #464]	@ (8007f58 <low_level_init+0x260>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007d8c:	4873      	ldr	r0, [pc, #460]	@ (8007f5c <low_level_init+0x264>)
 8007d8e:	f005 fb15 	bl	800d3bc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2206      	movs	r2, #6
 8007d96:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007d9a:	4b6b      	ldr	r3, [pc, #428]	@ (8007f48 <low_level_init+0x250>)
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	781a      	ldrb	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007da6:	4b68      	ldr	r3, [pc, #416]	@ (8007f48 <low_level_init+0x250>)
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	785a      	ldrb	r2, [r3, #1]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007db2:	4b65      	ldr	r3, [pc, #404]	@ (8007f48 <low_level_init+0x250>)
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	789a      	ldrb	r2, [r3, #2]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007dbe:	4b62      	ldr	r3, [pc, #392]	@ (8007f48 <low_level_init+0x250>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	78da      	ldrb	r2, [r3, #3]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007dca:	4b5f      	ldr	r3, [pc, #380]	@ (8007f48 <low_level_init+0x250>)
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	791a      	ldrb	r2, [r3, #4]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007dd6:	4b5c      	ldr	r3, [pc, #368]	@ (8007f48 <low_level_init+0x250>)
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	795a      	ldrb	r2, [r3, #5]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8007de8:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007df0:	f043 030a 	orr.w	r3, r3, #10
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2100      	movs	r1, #0
 8007e00:	2001      	movs	r0, #1
 8007e02:	f000 fed7 	bl	8008bb4 <osSemaphoreNew>
 8007e06:	4603      	mov	r3, r0
 8007e08:	4a55      	ldr	r2, [pc, #340]	@ (8007f60 <low_level_init+0x268>)
 8007e0a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2100      	movs	r1, #0
 8007e10:	2001      	movs	r0, #1
 8007e12:	f000 fecf 	bl	8008bb4 <osSemaphoreNew>
 8007e16:	4603      	mov	r3, r0
 8007e18:	4a52      	ldr	r2, [pc, #328]	@ (8007f64 <low_level_init+0x26c>)
 8007e1a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007e1c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007e20:	2224      	movs	r2, #36	@ 0x24
 8007e22:	2100      	movs	r1, #0
 8007e24:	4618      	mov	r0, r3
 8007e26:	f00f fb9d 	bl	8017564 <memset>
  attributes.name = "EthIf";
 8007e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8007f68 <low_level_init+0x270>)
 8007e2c:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007e2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8007e36:	2330      	movs	r3, #48	@ 0x30
 8007e38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8007e3c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007e40:	461a      	mov	r2, r3
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	4849      	ldr	r0, [pc, #292]	@ (8007f6c <low_level_init+0x274>)
 8007e46:	f000 fc99 	bl	800877c <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007e4a:	4949      	ldr	r1, [pc, #292]	@ (8007f70 <low_level_init+0x278>)
 8007e4c:	4849      	ldr	r0, [pc, #292]	@ (8007f74 <low_level_init+0x27c>)
 8007e4e:	f7f9 fdd4 	bl	80019fa <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8007e52:	4848      	ldr	r0, [pc, #288]	@ (8007f74 <low_level_init+0x27c>)
 8007e54:	f7f9 fe03 	bl	8001a5e <LAN8742_Init>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d006      	beq.n	8007e6c <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f005 fe86 	bl	800db70 <netif_set_link_down>
    netif_set_down(netif);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f005 fe1d 	bl	800daa4 <netif_set_down>
 8007e6a:	e06a      	b.n	8007f42 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8007e6c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d164      	bne.n	8007f3e <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007e74:	483f      	ldr	r0, [pc, #252]	@ (8007f74 <low_level_init+0x27c>)
 8007e76:	f7f9 fe3f 	bl	8001af8 <LAN8742_GetLinkState>
 8007e7a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8007e7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	dc06      	bgt.n	8007e94 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f005 fe72 	bl	800db70 <netif_set_link_down>
      netif_set_down(netif);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f005 fe09 	bl	800daa4 <netif_set_down>
 8007e92:	e056      	b.n	8007f42 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8007e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e98:	3b02      	subs	r3, #2
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d82a      	bhi.n	8007ef4 <low_level_init+0x1fc>
 8007e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea4 <low_level_init+0x1ac>)
 8007ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea4:	08007eb5 	.word	0x08007eb5
 8007ea8:	08007ec7 	.word	0x08007ec7
 8007eac:	08007ed7 	.word	0x08007ed7
 8007eb0:	08007ee7 	.word	0x08007ee7
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8007eb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007ebc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007ec0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007ec4:	e01f      	b.n	8007f06 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007ecc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007ed0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007ed4:	e017      	b.n	8007f06 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8007ed6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007eda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007ee4:	e00f      	b.n	8007f06 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8007eec:	2300      	movs	r3, #0
 8007eee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007ef2:	e008      	b.n	8007f06 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8007ef4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007efc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007f00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007f04:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007f06:	f107 0310 	add.w	r3, r7, #16
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	480e      	ldr	r0, [pc, #56]	@ (8007f48 <low_level_init+0x250>)
 8007f0e:	f7fb f8ab 	bl	8003068 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8007f12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007f16:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8007f18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007f1e:	f107 0310 	add.w	r3, r7, #16
 8007f22:	4619      	mov	r1, r3
 8007f24:	4808      	ldr	r0, [pc, #32]	@ (8007f48 <low_level_init+0x250>)
 8007f26:	f7fb f996 	bl	8003256 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8007f2a:	4807      	ldr	r0, [pc, #28]	@ (8007f48 <low_level_init+0x250>)
 8007f2c:	f7fa fc4e 	bl	80027cc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f005 fd4b 	bl	800d9cc <netif_set_up>
    netif_set_link_up(netif);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f005 fde6 	bl	800db08 <netif_set_link_up>
 8007f3c:	e001      	b.n	8007f42 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8007f3e:	f7f8 ffe7 	bl	8000f10 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8007f42:	37a8      	adds	r7, #168	@ 0xa8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	20009e54 	.word	0x20009e54
 8007f4c:	40028000 	.word	0x40028000
 8007f50:	2000012c 	.word	0x2000012c
 8007f54:	2000008c 	.word	0x2000008c
 8007f58:	20009f04 	.word	0x20009f04
 8007f5c:	0801b33c 	.word	0x0801b33c
 8007f60:	20009e4c 	.word	0x20009e4c
 8007f64:	20009e50 	.word	0x20009e50
 8007f68:	080185e0 	.word	0x080185e0
 8007f6c:	08008109 	.word	0x08008109
 8007f70:	2000000c 	.word	0x2000000c
 8007f74:	20009f3c 	.word	0x20009f3c

08007f78 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b092      	sub	sp, #72	@ 0x48
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007f90:	f107 030c 	add.w	r3, r7, #12
 8007f94:	2230      	movs	r2, #48	@ 0x30
 8007f96:	2100      	movs	r1, #0
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f00f fae3 	bl	8017564 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007f9e:	f107 030c 	add.w	r3, r7, #12
 8007fa2:	2230      	movs	r2, #48	@ 0x30
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f00f fadc 	bl	8017564 <memset>

  for(q = p; q != NULL; q = q->next)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fb0:	e045      	b.n	800803e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	d902      	bls.n	8007fbe <low_level_output+0x46>
      return ERR_IF;
 8007fb8:	f06f 030b 	mvn.w	r3, #11
 8007fbc:	e07f      	b.n	80080be <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8007fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fc0:	6859      	ldr	r1, [r3, #4]
 8007fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	4413      	add	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	3348      	adds	r3, #72	@ 0x48
 8007fce:	443b      	add	r3, r7
 8007fd0:	3b3c      	subs	r3, #60	@ 0x3c
 8007fd2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fd6:	895b      	ldrh	r3, [r3, #10]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fdc:	4613      	mov	r3, r2
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	4413      	add	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	3348      	adds	r3, #72	@ 0x48
 8007fe6:	443b      	add	r3, r7
 8007fe8:	3b38      	subs	r3, #56	@ 0x38
 8007fea:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d011      	beq.n	8008016 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007ff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ff4:	1e5a      	subs	r2, r3, #1
 8007ff6:	f107 000c 	add.w	r0, r7, #12
 8007ffa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	440b      	add	r3, r1
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	18c1      	adds	r1, r0, r3
 8008006:	4613      	mov	r3, r2
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	4413      	add	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	3348      	adds	r3, #72	@ 0x48
 8008010:	443b      	add	r3, r7
 8008012:	3b34      	subs	r3, #52	@ 0x34
 8008014:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008016:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d109      	bne.n	8008032 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800801e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008020:	4613      	mov	r3, r2
 8008022:	005b      	lsls	r3, r3, #1
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	3348      	adds	r3, #72	@ 0x48
 800802a:	443b      	add	r3, r7
 800802c:	3b34      	subs	r3, #52	@ 0x34
 800802e:	2200      	movs	r2, #0
 8008030:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008034:	3301      	adds	r3, #1
 8008036:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8008038:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	643b      	str	r3, [r7, #64]	@ 0x40
 800803e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1b6      	bne.n	8007fb2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	891b      	ldrh	r3, [r3, #8]
 8008048:	461a      	mov	r2, r3
 800804a:	4b1f      	ldr	r3, [pc, #124]	@ (80080c8 <low_level_output+0x150>)
 800804c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800804e:	4a1e      	ldr	r2, [pc, #120]	@ (80080c8 <low_level_output+0x150>)
 8008050:	f107 030c 	add.w	r3, r7, #12
 8008054:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008056:	4a1c      	ldr	r2, [pc, #112]	@ (80080c8 <low_level_output+0x150>)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800805c:	6838      	ldr	r0, [r7, #0]
 800805e:	f006 fa0b 	bl	800e478 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8008062:	4919      	ldr	r1, [pc, #100]	@ (80080c8 <low_level_output+0x150>)
 8008064:	4819      	ldr	r0, [pc, #100]	@ (80080cc <low_level_output+0x154>)
 8008066:	f7fa fca1 	bl	80029ac <HAL_ETH_Transmit_IT>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d103      	bne.n	8008078 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008076:	e01b      	b.n	80080b0 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8008078:	4814      	ldr	r0, [pc, #80]	@ (80080cc <low_level_output+0x154>)
 800807a:	f7fb f949 	bl	8003310 <HAL_ETH_GetError>
 800807e:	4603      	mov	r3, r0
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00d      	beq.n	80080a4 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8008088:	4b11      	ldr	r3, [pc, #68]	@ (80080d0 <low_level_output+0x158>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8008090:	4618      	mov	r0, r3
 8008092:	f000 fe2b 	bl	8008cec <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8008096:	480d      	ldr	r0, [pc, #52]	@ (80080cc <low_level_output+0x154>)
 8008098:	f7fa fe28 	bl	8002cec <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800809c:	23fe      	movs	r3, #254	@ 0xfe
 800809e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80080a2:	e005      	b.n	80080b0 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 80080a4:	6838      	ldr	r0, [r7, #0]
 80080a6:	f006 f941 	bl	800e32c <pbuf_free>
        errval =  ERR_IF;
 80080aa:	23f4      	movs	r3, #244	@ 0xf4
 80080ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 80080b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80080b4:	f113 0f02 	cmn.w	r3, #2
 80080b8:	d0d3      	beq.n	8008062 <low_level_output+0xea>

  return errval;
 80080ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3748      	adds	r7, #72	@ 0x48
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20009f04 	.word	0x20009f04
 80080cc:	20009e54 	.word	0x20009e54
 80080d0:	20009e50 	.word	0x20009e50

080080d4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80080e0:	4b07      	ldr	r3, [pc, #28]	@ (8008100 <low_level_input+0x2c>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d105      	bne.n	80080f4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80080e8:	f107 030c 	add.w	r3, r7, #12
 80080ec:	4619      	mov	r1, r3
 80080ee:	4805      	ldr	r0, [pc, #20]	@ (8008104 <low_level_input+0x30>)
 80080f0:	f7fa fcb8 	bl	8002a64 <HAL_ETH_ReadData>
  }

  return p;
 80080f4:	68fb      	ldr	r3, [r7, #12]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20009e48 	.word	0x20009e48
 8008104:	20009e54 	.word	0x20009e54

08008108 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008110:	2300      	movs	r3, #0
 8008112:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008118:	4b0f      	ldr	r3, [pc, #60]	@ (8008158 <ethernetif_input+0x50>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f04f 31ff 	mov.w	r1, #4294967295
 8008120:	4618      	mov	r0, r3
 8008122:	f000 fde3 	bl	8008cec <osSemaphoreAcquire>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1f5      	bne.n	8008118 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800812c:	68b8      	ldr	r0, [r7, #8]
 800812e:	f7ff ffd1 	bl	80080d4 <low_level_input>
 8008132:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	68b9      	ldr	r1, [r7, #8]
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	4798      	blx	r3
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f006 f8ee 	bl	800e32c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1ea      	bne.n	800812c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008156:	e7df      	b.n	8008118 <ethernetif_input+0x10>
 8008158:	20009e4c 	.word	0x20009e4c

0800815c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d106      	bne.n	8008178 <ethernetif_init+0x1c>
 800816a:	4b0e      	ldr	r3, [pc, #56]	@ (80081a4 <ethernetif_init+0x48>)
 800816c:	f240 220d 	movw	r2, #525	@ 0x20d
 8008170:	490d      	ldr	r1, [pc, #52]	@ (80081a8 <ethernetif_init+0x4c>)
 8008172:	480e      	ldr	r0, [pc, #56]	@ (80081ac <ethernetif_init+0x50>)
 8008174:	f00f f89e 	bl	80172b4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2273      	movs	r2, #115	@ 0x73
 800817c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2274      	movs	r2, #116	@ 0x74
 8008184:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a09      	ldr	r2, [pc, #36]	@ (80081b0 <ethernetif_init+0x54>)
 800818c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a08      	ldr	r2, [pc, #32]	@ (80081b4 <ethernetif_init+0x58>)
 8008192:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7ff fdaf 	bl	8007cf8 <low_level_init>

  return ERR_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	080185e8 	.word	0x080185e8
 80081a8:	08018604 	.word	0x08018604
 80081ac:	08018614 	.word	0x08018614
 80081b0:	08014c01 	.word	0x08014c01
 80081b4:	08007f79 	.word	0x08007f79

080081b8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80081c4:	68f9      	ldr	r1, [r7, #12]
 80081c6:	4809      	ldr	r0, [pc, #36]	@ (80081ec <pbuf_free_custom+0x34>)
 80081c8:	f005 f9e8 	bl	800d59c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80081cc:	4b08      	ldr	r3, [pc, #32]	@ (80081f0 <pbuf_free_custom+0x38>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d107      	bne.n	80081e4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80081d4:	4b06      	ldr	r3, [pc, #24]	@ (80081f0 <pbuf_free_custom+0x38>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80081da:	4b06      	ldr	r3, [pc, #24]	@ (80081f4 <pbuf_free_custom+0x3c>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 fdea 	bl	8008db8 <osSemaphoreRelease>
  }
}
 80081e4:	bf00      	nop
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	0801b33c 	.word	0x0801b33c
 80081f0:	20009e48 	.word	0x20009e48
 80081f4:	20009e4c 	.word	0x20009e4c

080081f8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80081fc:	f7f9 fd24 	bl	8001c48 <HAL_GetTick>
 8008200:	4603      	mov	r3, r0
}
 8008202:	4618      	mov	r0, r3
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08e      	sub	sp, #56	@ 0x38
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008210:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008214:	2200      	movs	r2, #0
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	605a      	str	r2, [r3, #4]
 800821a:	609a      	str	r2, [r3, #8]
 800821c:	60da      	str	r2, [r3, #12]
 800821e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a56      	ldr	r2, [pc, #344]	@ (8008380 <HAL_ETH_MspInit+0x178>)
 8008226:	4293      	cmp	r3, r2
 8008228:	f040 80a6 	bne.w	8008378 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800822c:	4b55      	ldr	r3, [pc, #340]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 800822e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008230:	4a54      	ldr	r2, [pc, #336]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 8008232:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008236:	6313      	str	r3, [r2, #48]	@ 0x30
 8008238:	4b52      	ldr	r3, [pc, #328]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 800823a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008240:	623b      	str	r3, [r7, #32]
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	4b4f      	ldr	r3, [pc, #316]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 8008246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008248:	4a4e      	ldr	r2, [pc, #312]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 800824a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800824e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008250:	4b4c      	ldr	r3, [pc, #304]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 8008252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008254:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008258:	61fb      	str	r3, [r7, #28]
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	4b49      	ldr	r3, [pc, #292]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 800825e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008260:	4a48      	ldr	r2, [pc, #288]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 8008262:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008266:	6313      	str	r3, [r2, #48]	@ 0x30
 8008268:	4b46      	ldr	r3, [pc, #280]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 800826a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800826c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008270:	61bb      	str	r3, [r7, #24]
 8008272:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008274:	4b43      	ldr	r3, [pc, #268]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 8008276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008278:	4a42      	ldr	r2, [pc, #264]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 800827a:	f043 0304 	orr.w	r3, r3, #4
 800827e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008280:	4b40      	ldr	r3, [pc, #256]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 8008282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	617b      	str	r3, [r7, #20]
 800828a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800828c:	4b3d      	ldr	r3, [pc, #244]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 800828e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008290:	4a3c      	ldr	r2, [pc, #240]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 8008292:	f043 0301 	orr.w	r3, r3, #1
 8008296:	6313      	str	r3, [r2, #48]	@ 0x30
 8008298:	4b3a      	ldr	r3, [pc, #232]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 800829a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	613b      	str	r3, [r7, #16]
 80082a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082a4:	4b37      	ldr	r3, [pc, #220]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 80082a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a8:	4a36      	ldr	r2, [pc, #216]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 80082aa:	f043 0302 	orr.w	r3, r3, #2
 80082ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80082b0:	4b34      	ldr	r3, [pc, #208]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 80082b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	60fb      	str	r3, [r7, #12]
 80082ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80082bc:	4b31      	ldr	r3, [pc, #196]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 80082be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c0:	4a30      	ldr	r2, [pc, #192]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 80082c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80082c8:	4b2e      	ldr	r3, [pc, #184]	@ (8008384 <HAL_ETH_MspInit+0x17c>)
 80082ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d0:	60bb      	str	r3, [r7, #8]
 80082d2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80082d4:	2332      	movs	r3, #50	@ 0x32
 80082d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082d8:	2302      	movs	r3, #2
 80082da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082dc:	2300      	movs	r3, #0
 80082de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082e0:	2303      	movs	r3, #3
 80082e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80082e4:	230b      	movs	r3, #11
 80082e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082ec:	4619      	mov	r1, r3
 80082ee:	4826      	ldr	r0, [pc, #152]	@ (8008388 <HAL_ETH_MspInit+0x180>)
 80082f0:	f7fb fc48 	bl	8003b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80082f4:	2386      	movs	r3, #134	@ 0x86
 80082f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082f8:	2302      	movs	r3, #2
 80082fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082fc:	2300      	movs	r3, #0
 80082fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008300:	2303      	movs	r3, #3
 8008302:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008304:	230b      	movs	r3, #11
 8008306:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008308:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800830c:	4619      	mov	r1, r3
 800830e:	481f      	ldr	r0, [pc, #124]	@ (800838c <HAL_ETH_MspInit+0x184>)
 8008310:	f7fb fc38 	bl	8003b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008314:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008318:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800831a:	2302      	movs	r3, #2
 800831c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800831e:	2300      	movs	r3, #0
 8008320:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008322:	2303      	movs	r3, #3
 8008324:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008326:	230b      	movs	r3, #11
 8008328:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800832a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800832e:	4619      	mov	r1, r3
 8008330:	4817      	ldr	r0, [pc, #92]	@ (8008390 <HAL_ETH_MspInit+0x188>)
 8008332:	f7fb fc27 	bl	8003b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008336:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800833a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800833c:	2302      	movs	r3, #2
 800833e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008340:	2300      	movs	r3, #0
 8008342:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008344:	2303      	movs	r3, #3
 8008346:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008348:	230b      	movs	r3, #11
 800834a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800834c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008350:	4619      	mov	r1, r3
 8008352:	4810      	ldr	r0, [pc, #64]	@ (8008394 <HAL_ETH_MspInit+0x18c>)
 8008354:	f7fb fc16 	bl	8003b84 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008358:	2200      	movs	r2, #0
 800835a:	2105      	movs	r1, #5
 800835c:	203d      	movs	r0, #61	@ 0x3d
 800835e:	f7f9 fd5b 	bl	8001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008362:	203d      	movs	r0, #61	@ 0x3d
 8008364:	f7f9 fd74 	bl	8001e50 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8008368:	2200      	movs	r2, #0
 800836a:	2105      	movs	r1, #5
 800836c:	203e      	movs	r0, #62	@ 0x3e
 800836e:	f7f9 fd53 	bl	8001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8008372:	203e      	movs	r0, #62	@ 0x3e
 8008374:	f7f9 fd6c 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008378:	bf00      	nop
 800837a:	3738      	adds	r7, #56	@ 0x38
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	40028000 	.word	0x40028000
 8008384:	40023800 	.word	0x40023800
 8008388:	40020800 	.word	0x40020800
 800838c:	40020000 	.word	0x40020000
 8008390:	40020400 	.word	0x40020400
 8008394:	40021800 	.word	0x40021800

08008398 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800839c:	4802      	ldr	r0, [pc, #8]	@ (80083a8 <ETH_PHY_IO_Init+0x10>)
 800839e:	f7fa ff75 	bl	800328c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	20009e54 	.word	0x20009e54

080083ac <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
  return 0;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	68f9      	ldr	r1, [r7, #12]
 80083ce:	4807      	ldr	r0, [pc, #28]	@ (80083ec <ETH_PHY_IO_ReadReg+0x30>)
 80083d0:	f7fa fdb6 	bl	8002f40 <HAL_ETH_ReadPHYRegister>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80083da:	f04f 33ff 	mov.w	r3, #4294967295
 80083de:	e000      	b.n	80083e2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20009e54 	.word	0x20009e54

080083f0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	68f9      	ldr	r1, [r7, #12]
 8008402:	4807      	ldr	r0, [pc, #28]	@ (8008420 <ETH_PHY_IO_WriteReg+0x30>)
 8008404:	f7fa fde7 	bl	8002fd6 <HAL_ETH_WritePHYRegister>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d002      	beq.n	8008414 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800840e:	f04f 33ff 	mov.w	r3, #4294967295
 8008412:	e000      	b.n	8008416 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20009e54 	.word	0x20009e54

08008424 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008428:	f7f9 fc0e 	bl	8001c48 <HAL_GetTick>
 800842c:	4603      	mov	r3, r0
}
 800842e:	4618      	mov	r0, r3
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b0a0      	sub	sp, #128	@ 0x80
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800843c:	f107 0308 	add.w	r3, r7, #8
 8008440:	2264      	movs	r2, #100	@ 0x64
 8008442:	2100      	movs	r1, #0
 8008444:	4618      	mov	r0, r3
 8008446:	f00f f88d 	bl	8017564 <memset>
  int32_t PHYLinkState = 0;
 800844a:	2300      	movs	r3, #0
 800844c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008452:	2300      	movs	r3, #0
 8008454:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008456:	2300      	movs	r3, #0
 8008458:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800845e:	483a      	ldr	r0, [pc, #232]	@ (8008548 <ethernet_link_thread+0x114>)
 8008460:	f7f9 fb4a 	bl	8001af8 <LAN8742_GetLinkState>
 8008464:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008468:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800846c:	089b      	lsrs	r3, r3, #2
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00c      	beq.n	8008492 <ethernet_link_thread+0x5e>
 8008478:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800847a:	2b01      	cmp	r3, #1
 800847c:	dc09      	bgt.n	8008492 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800847e:	4833      	ldr	r0, [pc, #204]	@ (800854c <ethernet_link_thread+0x118>)
 8008480:	f7fa fa14 	bl	80028ac <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008484:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008486:	f005 fb0d 	bl	800daa4 <netif_set_down>
    netif_set_link_down(netif);
 800848a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800848c:	f005 fb70 	bl	800db70 <netif_set_link_down>
 8008490:	e055      	b.n	800853e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008494:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d14e      	bne.n	800853e <ethernet_link_thread+0x10a>
 80084a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	dd4b      	ble.n	800853e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80084a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084a8:	3b02      	subs	r3, #2
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d82a      	bhi.n	8008504 <ethernet_link_thread+0xd0>
 80084ae:	a201      	add	r2, pc, #4	@ (adr r2, 80084b4 <ethernet_link_thread+0x80>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	080084c5 	.word	0x080084c5
 80084b8:	080084d7 	.word	0x080084d7
 80084bc:	080084e7 	.word	0x080084e7
 80084c0:	080084f7 	.word	0x080084f7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80084c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80084c8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80084ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80084ce:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80084d0:	2301      	movs	r3, #1
 80084d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80084d4:	e017      	b.n	8008506 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80084d6:	2300      	movs	r3, #0
 80084d8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80084da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80084de:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80084e0:	2301      	movs	r3, #1
 80084e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80084e4:	e00f      	b.n	8008506 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80084e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80084ea:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80084ec:	2300      	movs	r3, #0
 80084ee:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80084f0:	2301      	movs	r3, #1
 80084f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80084f4:	e007      	b.n	8008506 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80084fa:	2300      	movs	r3, #0
 80084fc:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80084fe:	2301      	movs	r3, #1
 8008500:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008502:	e000      	b.n	8008506 <ethernet_link_thread+0xd2>
    default:
      break;
 8008504:	bf00      	nop
    }

    if(linkchanged)
 8008506:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008508:	2b00      	cmp	r3, #0
 800850a:	d018      	beq.n	800853e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800850c:	f107 0308 	add.w	r3, r7, #8
 8008510:	4619      	mov	r1, r3
 8008512:	480e      	ldr	r0, [pc, #56]	@ (800854c <ethernet_link_thread+0x118>)
 8008514:	f7fa fda8 	bl	8003068 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008518:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800851a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800851c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800851e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008520:	f107 0308 	add.w	r3, r7, #8
 8008524:	4619      	mov	r1, r3
 8008526:	4809      	ldr	r0, [pc, #36]	@ (800854c <ethernet_link_thread+0x118>)
 8008528:	f7fa fe95 	bl	8003256 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800852c:	4807      	ldr	r0, [pc, #28]	@ (800854c <ethernet_link_thread+0x118>)
 800852e:	f7fa f94d 	bl	80027cc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008532:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008534:	f005 fa4a 	bl	800d9cc <netif_set_up>
      netif_set_link_up(netif);
 8008538:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800853a:	f005 fae5 	bl	800db08 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800853e:	2064      	movs	r0, #100	@ 0x64
 8008540:	f000 f9c2 	bl	80088c8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008544:	e78b      	b.n	800845e <ethernet_link_thread+0x2a>
 8008546:	bf00      	nop
 8008548:	20009f3c 	.word	0x20009f3c
 800854c:	20009e54 	.word	0x20009e54

08008550 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af02      	add	r7, sp, #8
 8008556:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008558:	4812      	ldr	r0, [pc, #72]	@ (80085a4 <HAL_ETH_RxAllocateCallback+0x54>)
 800855a:	f004 ffab 	bl	800d4b4 <memp_malloc_pool>
 800855e:	60f8      	str	r0, [r7, #12]
  if (p)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d014      	beq.n	8008590 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f103 0220 	add.w	r2, r3, #32
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4a0d      	ldr	r2, [pc, #52]	@ (80085a8 <HAL_ETH_RxAllocateCallback+0x58>)
 8008574:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800857e:	9201      	str	r2, [sp, #4]
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2241      	movs	r2, #65	@ 0x41
 8008586:	2100      	movs	r1, #0
 8008588:	2000      	movs	r0, #0
 800858a:	f005 fd15 	bl	800dfb8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800858e:	e005      	b.n	800859c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008590:	4b06      	ldr	r3, [pc, #24]	@ (80085ac <HAL_ETH_RxAllocateCallback+0x5c>)
 8008592:	2201      	movs	r2, #1
 8008594:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
}
 800859c:	bf00      	nop
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	0801b33c 	.word	0x0801b33c
 80085a8:	080081b9 	.word	0x080081b9
 80085ac:	20009e48 	.word	0x20009e48

080085b0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80085c6:	2300      	movs	r3, #0
 80085c8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3b20      	subs	r3, #32
 80085ce:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	2200      	movs	r2, #0
 80085d4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	2200      	movs	r2, #0
 80085da:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	887a      	ldrh	r2, [r7, #2]
 80085e0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d103      	bne.n	80085f2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	69fa      	ldr	r2, [r7, #28]
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	e003      	b.n	80085fa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69fa      	ldr	r2, [r7, #28]
 80085f8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	69fa      	ldr	r2, [r7, #28]
 80085fe:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	61fb      	str	r3, [r7, #28]
 8008606:	e009      	b.n	800861c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	891a      	ldrh	r2, [r3, #8]
 800860c:	887b      	ldrh	r3, [r7, #2]
 800860e:	4413      	add	r3, r2
 8008610:	b29a      	uxth	r2, r3
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	61fb      	str	r3, [r7, #28]
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1f2      	bne.n	8008608 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8008622:	887b      	ldrh	r3, [r7, #2]
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7ff fb02 	bl	8007c30 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800862c:	bf00      	nop
 800862e:	3720      	adds	r7, #32
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f005 fe75 	bl	800e32c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8008642:	bf00      	nop
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800864a:	b480      	push	{r7}
 800864c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800864e:	bf00      	nop
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800865e:	f3ef 8305 	mrs	r3, IPSR
 8008662:	60bb      	str	r3, [r7, #8]
  return(result);
 8008664:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10f      	bne.n	800868a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800866a:	f3ef 8310 	mrs	r3, PRIMASK
 800866e:	607b      	str	r3, [r7, #4]
  return(result);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d105      	bne.n	8008682 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008676:	f3ef 8311 	mrs	r3, BASEPRI
 800867a:	603b      	str	r3, [r7, #0]
  return(result);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d007      	beq.n	8008692 <osKernelInitialize+0x3a>
 8008682:	4b0e      	ldr	r3, [pc, #56]	@ (80086bc <osKernelInitialize+0x64>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b02      	cmp	r3, #2
 8008688:	d103      	bne.n	8008692 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800868a:	f06f 0305 	mvn.w	r3, #5
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	e00c      	b.n	80086ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008692:	4b0a      	ldr	r3, [pc, #40]	@ (80086bc <osKernelInitialize+0x64>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d105      	bne.n	80086a6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800869a:	4b08      	ldr	r3, [pc, #32]	@ (80086bc <osKernelInitialize+0x64>)
 800869c:	2201      	movs	r2, #1
 800869e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	e002      	b.n	80086ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80086a6:	f04f 33ff 	mov.w	r3, #4294967295
 80086aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80086ac:	68fb      	ldr	r3, [r7, #12]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	20009f5c 	.word	0x20009f5c

080086c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086c6:	f3ef 8305 	mrs	r3, IPSR
 80086ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80086cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10f      	bne.n	80086f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086d2:	f3ef 8310 	mrs	r3, PRIMASK
 80086d6:	607b      	str	r3, [r7, #4]
  return(result);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d105      	bne.n	80086ea <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086de:	f3ef 8311 	mrs	r3, BASEPRI
 80086e2:	603b      	str	r3, [r7, #0]
  return(result);
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d007      	beq.n	80086fa <osKernelStart+0x3a>
 80086ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008728 <osKernelStart+0x68>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d103      	bne.n	80086fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80086f2:	f06f 0305 	mvn.w	r3, #5
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	e010      	b.n	800871c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80086fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008728 <osKernelStart+0x68>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d109      	bne.n	8008716 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008702:	f7ff ffa2 	bl	800864a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008706:	4b08      	ldr	r3, [pc, #32]	@ (8008728 <osKernelStart+0x68>)
 8008708:	2202      	movs	r2, #2
 800870a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800870c:	f002 f92e 	bl	800a96c <vTaskStartScheduler>
      stat = osOK;
 8008710:	2300      	movs	r3, #0
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	e002      	b.n	800871c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008716:	f04f 33ff 	mov.w	r3, #4294967295
 800871a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800871c:	68fb      	ldr	r3, [r7, #12]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20009f5c 	.word	0x20009f5c

0800872c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008732:	f3ef 8305 	mrs	r3, IPSR
 8008736:	60bb      	str	r3, [r7, #8]
  return(result);
 8008738:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10f      	bne.n	800875e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800873e:	f3ef 8310 	mrs	r3, PRIMASK
 8008742:	607b      	str	r3, [r7, #4]
  return(result);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d105      	bne.n	8008756 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800874a:	f3ef 8311 	mrs	r3, BASEPRI
 800874e:	603b      	str	r3, [r7, #0]
  return(result);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d007      	beq.n	8008766 <osKernelGetTickCount+0x3a>
 8008756:	4b08      	ldr	r3, [pc, #32]	@ (8008778 <osKernelGetTickCount+0x4c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b02      	cmp	r3, #2
 800875c:	d103      	bne.n	8008766 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800875e:	f002 fa37 	bl	800abd0 <xTaskGetTickCountFromISR>
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	e002      	b.n	800876c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8008766:	f002 fa23 	bl	800abb0 <xTaskGetTickCount>
 800876a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800876c:	68fb      	ldr	r3, [r7, #12]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20009f5c 	.word	0x20009f5c

0800877c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800877c:	b580      	push	{r7, lr}
 800877e:	b090      	sub	sp, #64	@ 0x40
 8008780:	af04      	add	r7, sp, #16
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008788:	2300      	movs	r3, #0
 800878a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800878c:	f3ef 8305 	mrs	r3, IPSR
 8008790:	61fb      	str	r3, [r7, #28]
  return(result);
 8008792:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008794:	2b00      	cmp	r3, #0
 8008796:	f040 8090 	bne.w	80088ba <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800879a:	f3ef 8310 	mrs	r3, PRIMASK
 800879e:	61bb      	str	r3, [r7, #24]
  return(result);
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d105      	bne.n	80087b2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087a6:	f3ef 8311 	mrs	r3, BASEPRI
 80087aa:	617b      	str	r3, [r7, #20]
  return(result);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <osThreadNew+0x3e>
 80087b2:	4b44      	ldr	r3, [pc, #272]	@ (80088c4 <osThreadNew+0x148>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d07f      	beq.n	80088ba <osThreadNew+0x13e>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d07c      	beq.n	80088ba <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 80087c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80087c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80087c6:	2318      	movs	r3, #24
 80087c8:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80087ca:	2300      	movs	r3, #0
 80087cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80087ce:	f04f 33ff 	mov.w	r3, #4294967295
 80087d2:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d045      	beq.n	8008866 <osThreadNew+0xea>
      if (attr->name != NULL) {
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d002      	beq.n	80087e8 <osThreadNew+0x6c>
        name = attr->name;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80087f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d008      	beq.n	800880e <osThreadNew+0x92>
 80087fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fe:	2b38      	cmp	r3, #56	@ 0x38
 8008800:	d805      	bhi.n	800880e <osThreadNew+0x92>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <osThreadNew+0x96>
        return (NULL);
 800880e:	2300      	movs	r3, #0
 8008810:	e054      	b.n	80088bc <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d003      	beq.n	8008822 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	089b      	lsrs	r3, r3, #2
 8008820:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00e      	beq.n	8008848 <osThreadNew+0xcc>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	2ba7      	cmp	r3, #167	@ 0xa7
 8008830:	d90a      	bls.n	8008848 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008836:	2b00      	cmp	r3, #0
 8008838:	d006      	beq.n	8008848 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d002      	beq.n	8008848 <osThreadNew+0xcc>
        mem = 1;
 8008842:	2301      	movs	r3, #1
 8008844:	623b      	str	r3, [r7, #32]
 8008846:	e010      	b.n	800886a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10c      	bne.n	800886a <osThreadNew+0xee>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d108      	bne.n	800886a <osThreadNew+0xee>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d104      	bne.n	800886a <osThreadNew+0xee>
          mem = 0;
 8008860:	2300      	movs	r3, #0
 8008862:	623b      	str	r3, [r7, #32]
 8008864:	e001      	b.n	800886a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8008866:	2300      	movs	r3, #0
 8008868:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d110      	bne.n	8008892 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008878:	9202      	str	r2, [sp, #8]
 800887a:	9301      	str	r3, [sp, #4]
 800887c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008884:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f001 fe72 	bl	800a570 <xTaskCreateStatic>
 800888c:	4603      	mov	r3, r0
 800888e:	613b      	str	r3, [r7, #16]
 8008890:	e013      	b.n	80088ba <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d110      	bne.n	80088ba <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889a:	b29a      	uxth	r2, r3
 800889c:	f107 0310 	add.w	r3, r7, #16
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f001 fec6 	bl	800a63c <xTaskCreate>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d001      	beq.n	80088ba <osThreadNew+0x13e>
          hTask = NULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80088ba:	693b      	ldr	r3, [r7, #16]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3730      	adds	r7, #48	@ 0x30
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	20009f5c 	.word	0x20009f5c

080088c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088d0:	f3ef 8305 	mrs	r3, IPSR
 80088d4:	613b      	str	r3, [r7, #16]
  return(result);
 80088d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10f      	bne.n	80088fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088dc:	f3ef 8310 	mrs	r3, PRIMASK
 80088e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d105      	bne.n	80088f4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088e8:	f3ef 8311 	mrs	r3, BASEPRI
 80088ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d007      	beq.n	8008904 <osDelay+0x3c>
 80088f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008920 <osDelay+0x58>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d103      	bne.n	8008904 <osDelay+0x3c>
    stat = osErrorISR;
 80088fc:	f06f 0305 	mvn.w	r3, #5
 8008900:	617b      	str	r3, [r7, #20]
 8008902:	e007      	b.n	8008914 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008904:	2300      	movs	r3, #0
 8008906:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d002      	beq.n	8008914 <osDelay+0x4c>
      vTaskDelay(ticks);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 fff4 	bl	800a8fc <vTaskDelay>
    }
  }

  return (stat);
 8008914:	697b      	ldr	r3, [r7, #20]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20009f5c 	.word	0x20009f5c

08008924 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008924:	b580      	push	{r7, lr}
 8008926:	b08a      	sub	sp, #40	@ 0x28
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800892c:	2300      	movs	r3, #0
 800892e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008930:	f3ef 8305 	mrs	r3, IPSR
 8008934:	613b      	str	r3, [r7, #16]
  return(result);
 8008936:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008938:	2b00      	cmp	r3, #0
 800893a:	f040 8085 	bne.w	8008a48 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800893e:	f3ef 8310 	mrs	r3, PRIMASK
 8008942:	60fb      	str	r3, [r7, #12]
  return(result);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d105      	bne.n	8008956 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800894a:	f3ef 8311 	mrs	r3, BASEPRI
 800894e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <osMutexNew+0x3a>
 8008956:	4b3f      	ldr	r3, [pc, #252]	@ (8008a54 <osMutexNew+0x130>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b02      	cmp	r3, #2
 800895c:	d074      	beq.n	8008a48 <osMutexNew+0x124>
    if (attr != NULL) {
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d003      	beq.n	800896c <osMutexNew+0x48>
      type = attr->attr_bits;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	623b      	str	r3, [r7, #32]
 800896a:	e001      	b.n	8008970 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800896c:	2300      	movs	r3, #0
 800896e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008970:	6a3b      	ldr	r3, [r7, #32]
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	d002      	beq.n	8008980 <osMutexNew+0x5c>
      rmtx = 1U;
 800897a:	2301      	movs	r3, #1
 800897c:	61fb      	str	r3, [r7, #28]
 800897e:	e001      	b.n	8008984 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	f003 0308 	and.w	r3, r3, #8
 800898a:	2b00      	cmp	r3, #0
 800898c:	d15c      	bne.n	8008a48 <osMutexNew+0x124>
      mem = -1;
 800898e:	f04f 33ff 	mov.w	r3, #4294967295
 8008992:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d015      	beq.n	80089c6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d006      	beq.n	80089b0 <osMutexNew+0x8c>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	2b4f      	cmp	r3, #79	@ 0x4f
 80089a8:	d902      	bls.n	80089b0 <osMutexNew+0x8c>
          mem = 1;
 80089aa:	2301      	movs	r3, #1
 80089ac:	61bb      	str	r3, [r7, #24]
 80089ae:	e00c      	b.n	80089ca <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d108      	bne.n	80089ca <osMutexNew+0xa6>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d104      	bne.n	80089ca <osMutexNew+0xa6>
            mem = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	61bb      	str	r3, [r7, #24]
 80089c4:	e001      	b.n	80089ca <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d112      	bne.n	80089f6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d007      	beq.n	80089e6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	4619      	mov	r1, r3
 80089dc:	2004      	movs	r0, #4
 80089de:	f000 fe22 	bl	8009626 <xQueueCreateMutexStatic>
 80089e2:	6278      	str	r0, [r7, #36]	@ 0x24
 80089e4:	e016      	b.n	8008a14 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	4619      	mov	r1, r3
 80089ec:	2001      	movs	r0, #1
 80089ee:	f000 fe1a 	bl	8009626 <xQueueCreateMutexStatic>
 80089f2:	6278      	str	r0, [r7, #36]	@ 0x24
 80089f4:	e00e      	b.n	8008a14 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10b      	bne.n	8008a14 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d004      	beq.n	8008a0c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008a02:	2004      	movs	r0, #4
 8008a04:	f000 fdf7 	bl	80095f6 <xQueueCreateMutex>
 8008a08:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a0a:	e003      	b.n	8008a14 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008a0c:	2001      	movs	r0, #1
 8008a0e:	f000 fdf2 	bl	80095f6 <xQueueCreateMutex>
 8008a12:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00c      	beq.n	8008a34 <osMutexNew+0x110>
        if (attr != NULL) {
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d003      	beq.n	8008a28 <osMutexNew+0x104>
          name = attr->name;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	617b      	str	r3, [r7, #20]
 8008a26:	e001      	b.n	8008a2c <osMutexNew+0x108>
        } else {
          name = NULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008a2c:	6979      	ldr	r1, [r7, #20]
 8008a2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a30:	f001 fd16 	bl	800a460 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d006      	beq.n	8008a48 <osMutexNew+0x124>
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a42:	f043 0301 	orr.w	r3, r3, #1
 8008a46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3728      	adds	r7, #40	@ 0x28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20009f5c 	.word	0x20009f5c

08008a58 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f023 0301 	bic.w	r3, r3, #1
 8008a68:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f003 0301 	and.w	r3, r3, #1
 8008a70:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a76:	f3ef 8305 	mrs	r3, IPSR
 8008a7a:	613b      	str	r3, [r7, #16]
  return(result);
 8008a7c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10f      	bne.n	8008aa2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a82:	f3ef 8310 	mrs	r3, PRIMASK
 8008a86:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d105      	bne.n	8008a9a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8008a92:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d007      	beq.n	8008aaa <osMutexAcquire+0x52>
 8008a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8008b10 <osMutexAcquire+0xb8>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d103      	bne.n	8008aaa <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008aa2:	f06f 0305 	mvn.w	r3, #5
 8008aa6:	61fb      	str	r3, [r7, #28]
 8008aa8:	e02c      	b.n	8008b04 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d103      	bne.n	8008ab8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008ab0:	f06f 0303 	mvn.w	r3, #3
 8008ab4:	61fb      	str	r3, [r7, #28]
 8008ab6:	e025      	b.n	8008b04 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d011      	beq.n	8008ae2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	69b8      	ldr	r0, [r7, #24]
 8008ac2:	f000 fe02 	bl	80096ca <xQueueTakeMutexRecursive>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d01b      	beq.n	8008b04 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008ad2:	f06f 0301 	mvn.w	r3, #1
 8008ad6:	61fb      	str	r3, [r7, #28]
 8008ad8:	e014      	b.n	8008b04 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008ada:	f06f 0302 	mvn.w	r3, #2
 8008ade:	61fb      	str	r3, [r7, #28]
 8008ae0:	e010      	b.n	8008b04 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	69b8      	ldr	r0, [r7, #24]
 8008ae6:	f001 f9cd 	bl	8009e84 <xQueueSemaphoreTake>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d009      	beq.n	8008b04 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8008af6:	f06f 0301 	mvn.w	r3, #1
 8008afa:	61fb      	str	r3, [r7, #28]
 8008afc:	e002      	b.n	8008b04 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008afe:	f06f 0302 	mvn.w	r3, #2
 8008b02:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008b04:	69fb      	ldr	r3, [r7, #28]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3720      	adds	r7, #32
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20009f5c 	.word	0x20009f5c

08008b14 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f023 0301 	bic.w	r3, r3, #1
 8008b22:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b30:	f3ef 8305 	mrs	r3, IPSR
 8008b34:	613b      	str	r3, [r7, #16]
  return(result);
 8008b36:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10f      	bne.n	8008b5c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b40:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d105      	bne.n	8008b54 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b48:	f3ef 8311 	mrs	r3, BASEPRI
 8008b4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d007      	beq.n	8008b64 <osMutexRelease+0x50>
 8008b54:	4b16      	ldr	r3, [pc, #88]	@ (8008bb0 <osMutexRelease+0x9c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d103      	bne.n	8008b64 <osMutexRelease+0x50>
    stat = osErrorISR;
 8008b5c:	f06f 0305 	mvn.w	r3, #5
 8008b60:	61fb      	str	r3, [r7, #28]
 8008b62:	e01f      	b.n	8008ba4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d103      	bne.n	8008b72 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8008b6a:	f06f 0303 	mvn.w	r3, #3
 8008b6e:	61fb      	str	r3, [r7, #28]
 8008b70:	e018      	b.n	8008ba4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d009      	beq.n	8008b8c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008b78:	69b8      	ldr	r0, [r7, #24]
 8008b7a:	f000 fd6f 	bl	800965c <xQueueGiveMutexRecursive>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d00f      	beq.n	8008ba4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008b84:	f06f 0302 	mvn.w	r3, #2
 8008b88:	61fb      	str	r3, [r7, #28]
 8008b8a:	e00b      	b.n	8008ba4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2100      	movs	r1, #0
 8008b92:	69b8      	ldr	r0, [r7, #24]
 8008b94:	f000 fe48 	bl	8009828 <xQueueGenericSend>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d002      	beq.n	8008ba4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008b9e:	f06f 0302 	mvn.w	r3, #2
 8008ba2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008ba4:	69fb      	ldr	r3, [r7, #28]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3720      	adds	r7, #32
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20009f5c 	.word	0x20009f5c

08008bb4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08c      	sub	sp, #48	@ 0x30
 8008bb8:	af02      	add	r7, sp, #8
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bc4:	f3ef 8305 	mrs	r3, IPSR
 8008bc8:	61bb      	str	r3, [r7, #24]
  return(result);
 8008bca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f040 8086 	bne.w	8008cde <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8008bd6:	617b      	str	r3, [r7, #20]
  return(result);
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d105      	bne.n	8008bea <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008bde:	f3ef 8311 	mrs	r3, BASEPRI
 8008be2:	613b      	str	r3, [r7, #16]
  return(result);
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <osSemaphoreNew+0x3e>
 8008bea:	4b3f      	ldr	r3, [pc, #252]	@ (8008ce8 <osSemaphoreNew+0x134>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d075      	beq.n	8008cde <osSemaphoreNew+0x12a>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d072      	beq.n	8008cde <osSemaphoreNew+0x12a>
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d86e      	bhi.n	8008cde <osSemaphoreNew+0x12a>
    mem = -1;
 8008c00:	f04f 33ff 	mov.w	r3, #4294967295
 8008c04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d015      	beq.n	8008c38 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d006      	beq.n	8008c22 <osSemaphoreNew+0x6e>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	2b4f      	cmp	r3, #79	@ 0x4f
 8008c1a:	d902      	bls.n	8008c22 <osSemaphoreNew+0x6e>
        mem = 1;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	623b      	str	r3, [r7, #32]
 8008c20:	e00c      	b.n	8008c3c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d108      	bne.n	8008c3c <osSemaphoreNew+0x88>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d104      	bne.n	8008c3c <osSemaphoreNew+0x88>
          mem = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	623b      	str	r3, [r7, #32]
 8008c36:	e001      	b.n	8008c3c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8008c3c:	6a3b      	ldr	r3, [r7, #32]
 8008c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c42:	d04c      	beq.n	8008cde <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d128      	bne.n	8008c9c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d10a      	bne.n	8008c66 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	2203      	movs	r2, #3
 8008c56:	9200      	str	r2, [sp, #0]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	2001      	movs	r0, #1
 8008c5e:	f000 fbc3 	bl	80093e8 <xQueueGenericCreateStatic>
 8008c62:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c64:	e005      	b.n	8008c72 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008c66:	2203      	movs	r2, #3
 8008c68:	2100      	movs	r1, #0
 8008c6a:	2001      	movs	r0, #1
 8008c6c:	f000 fc43 	bl	80094f6 <xQueueGenericCreate>
 8008c70:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d022      	beq.n	8008cbe <osSemaphoreNew+0x10a>
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d01f      	beq.n	8008cbe <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008c7e:	2300      	movs	r3, #0
 8008c80:	2200      	movs	r2, #0
 8008c82:	2100      	movs	r1, #0
 8008c84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c86:	f000 fdcf 	bl	8009828 <xQueueGenericSend>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d016      	beq.n	8008cbe <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008c90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c92:	f001 fa97 	bl	800a1c4 <vQueueDelete>
            hSemaphore = NULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c9a:	e010      	b.n	8008cbe <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d108      	bne.n	8008cb4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	68b9      	ldr	r1, [r7, #8]
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 fd46 	bl	800973c <xQueueCreateCountingSemaphoreStatic>
 8008cb0:	6278      	str	r0, [r7, #36]	@ 0x24
 8008cb2:	e004      	b.n	8008cbe <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008cb4:	68b9      	ldr	r1, [r7, #8]
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f000 fd7d 	bl	80097b6 <xQueueCreateCountingSemaphore>
 8008cbc:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00c      	beq.n	8008cde <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <osSemaphoreNew+0x11e>
          name = attr->name;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	61fb      	str	r3, [r7, #28]
 8008cd0:	e001      	b.n	8008cd6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008cd6:	69f9      	ldr	r1, [r7, #28]
 8008cd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008cda:	f001 fbc1 	bl	800a460 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3728      	adds	r7, #40	@ 0x28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	20009f5c 	.word	0x20009f5c

08008cec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b088      	sub	sp, #32
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d103      	bne.n	8008d0c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008d04:	f06f 0303 	mvn.w	r3, #3
 8008d08:	61fb      	str	r3, [r7, #28]
 8008d0a:	e04b      	b.n	8008da4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d0c:	f3ef 8305 	mrs	r3, IPSR
 8008d10:	617b      	str	r3, [r7, #20]
  return(result);
 8008d12:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10f      	bne.n	8008d38 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d18:	f3ef 8310 	mrs	r3, PRIMASK
 8008d1c:	613b      	str	r3, [r7, #16]
  return(result);
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d105      	bne.n	8008d30 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d24:	f3ef 8311 	mrs	r3, BASEPRI
 8008d28:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d026      	beq.n	8008d7e <osSemaphoreAcquire+0x92>
 8008d30:	4b1f      	ldr	r3, [pc, #124]	@ (8008db0 <osSemaphoreAcquire+0xc4>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d122      	bne.n	8008d7e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8008d3e:	f06f 0303 	mvn.w	r3, #3
 8008d42:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008d44:	e02d      	b.n	8008da2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008d4a:	f107 0308 	add.w	r3, r7, #8
 8008d4e:	461a      	mov	r2, r3
 8008d50:	2100      	movs	r1, #0
 8008d52:	69b8      	ldr	r0, [r7, #24]
 8008d54:	f001 f9ae 	bl	800a0b4 <xQueueReceiveFromISR>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d003      	beq.n	8008d66 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008d5e:	f06f 0302 	mvn.w	r3, #2
 8008d62:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008d64:	e01d      	b.n	8008da2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01a      	beq.n	8008da2 <osSemaphoreAcquire+0xb6>
 8008d6c:	4b11      	ldr	r3, [pc, #68]	@ (8008db4 <osSemaphoreAcquire+0xc8>)
 8008d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008d7c:	e011      	b.n	8008da2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	69b8      	ldr	r0, [r7, #24]
 8008d82:	f001 f87f 	bl	8009e84 <xQueueSemaphoreTake>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d00b      	beq.n	8008da4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d003      	beq.n	8008d9a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008d92:	f06f 0301 	mvn.w	r3, #1
 8008d96:	61fb      	str	r3, [r7, #28]
 8008d98:	e004      	b.n	8008da4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008d9a:	f06f 0302 	mvn.w	r3, #2
 8008d9e:	61fb      	str	r3, [r7, #28]
 8008da0:	e000      	b.n	8008da4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008da2:	bf00      	nop
      }
    }
  }

  return (stat);
 8008da4:	69fb      	ldr	r3, [r7, #28]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3720      	adds	r7, #32
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20009f5c 	.word	0x20009f5c
 8008db4:	e000ed04 	.word	0xe000ed04

08008db8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b088      	sub	sp, #32
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d103      	bne.n	8008dd6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008dce:	f06f 0303 	mvn.w	r3, #3
 8008dd2:	61fb      	str	r3, [r7, #28]
 8008dd4:	e03e      	b.n	8008e54 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dd6:	f3ef 8305 	mrs	r3, IPSR
 8008dda:	617b      	str	r3, [r7, #20]
  return(result);
 8008ddc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10f      	bne.n	8008e02 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008de2:	f3ef 8310 	mrs	r3, PRIMASK
 8008de6:	613b      	str	r3, [r7, #16]
  return(result);
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d105      	bne.n	8008dfa <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dee:	f3ef 8311 	mrs	r3, BASEPRI
 8008df2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d01e      	beq.n	8008e38 <osSemaphoreRelease+0x80>
 8008dfa:	4b19      	ldr	r3, [pc, #100]	@ (8008e60 <osSemaphoreRelease+0xa8>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d11a      	bne.n	8008e38 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008e06:	f107 0308 	add.w	r3, r7, #8
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	69b8      	ldr	r0, [r7, #24]
 8008e0e:	f000 feb8 	bl	8009b82 <xQueueGiveFromISR>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d003      	beq.n	8008e20 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008e18:	f06f 0302 	mvn.w	r3, #2
 8008e1c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008e1e:	e018      	b.n	8008e52 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d015      	beq.n	8008e52 <osSemaphoreRelease+0x9a>
 8008e26:	4b0f      	ldr	r3, [pc, #60]	@ (8008e64 <osSemaphoreRelease+0xac>)
 8008e28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008e36:	e00c      	b.n	8008e52 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008e38:	2300      	movs	r3, #0
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	69b8      	ldr	r0, [r7, #24]
 8008e40:	f000 fcf2 	bl	8009828 <xQueueGenericSend>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d004      	beq.n	8008e54 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008e4a:	f06f 0302 	mvn.w	r3, #2
 8008e4e:	61fb      	str	r3, [r7, #28]
 8008e50:	e000      	b.n	8008e54 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008e52:	bf00      	nop
    }
  }

  return (stat);
 8008e54:	69fb      	ldr	r3, [r7, #28]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3720      	adds	r7, #32
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20009f5c 	.word	0x20009f5c
 8008e64:	e000ed04 	.word	0xe000ed04

08008e68 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b08c      	sub	sp, #48	@ 0x30
 8008e6c:	af02      	add	r7, sp, #8
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008e74:	2300      	movs	r3, #0
 8008e76:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e78:	f3ef 8305 	mrs	r3, IPSR
 8008e7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e7e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d16f      	bne.n	8008f64 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e84:	f3ef 8310 	mrs	r3, PRIMASK
 8008e88:	617b      	str	r3, [r7, #20]
  return(result);
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d105      	bne.n	8008e9c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e90:	f3ef 8311 	mrs	r3, BASEPRI
 8008e94:	613b      	str	r3, [r7, #16]
  return(result);
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <osMessageQueueNew+0x3c>
 8008e9c:	4b34      	ldr	r3, [pc, #208]	@ (8008f70 <osMessageQueueNew+0x108>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d05f      	beq.n	8008f64 <osMessageQueueNew+0xfc>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d05c      	beq.n	8008f64 <osMessageQueueNew+0xfc>
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d059      	beq.n	8008f64 <osMessageQueueNew+0xfc>
    mem = -1;
 8008eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8008eb4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d029      	beq.n	8008f10 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d012      	beq.n	8008eea <osMessageQueueNew+0x82>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	2b4f      	cmp	r3, #79	@ 0x4f
 8008eca:	d90e      	bls.n	8008eea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	695a      	ldr	r2, [r3, #20]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	68b9      	ldr	r1, [r7, #8]
 8008edc:	fb01 f303 	mul.w	r3, r1, r3
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d302      	bcc.n	8008eea <osMessageQueueNew+0x82>
        mem = 1;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	623b      	str	r3, [r7, #32]
 8008ee8:	e014      	b.n	8008f14 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d110      	bne.n	8008f14 <osMessageQueueNew+0xac>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10c      	bne.n	8008f14 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d108      	bne.n	8008f14 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d104      	bne.n	8008f14 <osMessageQueueNew+0xac>
          mem = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	623b      	str	r3, [r7, #32]
 8008f0e:	e001      	b.n	8008f14 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d10b      	bne.n	8008f32 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691a      	ldr	r2, [r3, #16]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	2100      	movs	r1, #0
 8008f24:	9100      	str	r1, [sp, #0]
 8008f26:	68b9      	ldr	r1, [r7, #8]
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f000 fa5d 	bl	80093e8 <xQueueGenericCreateStatic>
 8008f2e:	6278      	str	r0, [r7, #36]	@ 0x24
 8008f30:	e008      	b.n	8008f44 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d105      	bne.n	8008f44 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008f38:	2200      	movs	r2, #0
 8008f3a:	68b9      	ldr	r1, [r7, #8]
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f000 fada 	bl	80094f6 <xQueueGenericCreate>
 8008f42:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00c      	beq.n	8008f64 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <osMessageQueueNew+0xf0>
        name = attr->name;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	61fb      	str	r3, [r7, #28]
 8008f56:	e001      	b.n	8008f5c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008f5c:	69f9      	ldr	r1, [r7, #28]
 8008f5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f60:	f001 fa7e 	bl	800a460 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3728      	adds	r7, #40	@ 0x28
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20009f5c 	.word	0x20009f5c

08008f74 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08a      	sub	sp, #40	@ 0x28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	603b      	str	r3, [r7, #0]
 8008f80:	4613      	mov	r3, r2
 8008f82:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f8c:	f3ef 8305 	mrs	r3, IPSR
 8008f90:	61fb      	str	r3, [r7, #28]
  return(result);
 8008f92:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10f      	bne.n	8008fb8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f98:	f3ef 8310 	mrs	r3, PRIMASK
 8008f9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d105      	bne.n	8008fb0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8008fa8:	617b      	str	r3, [r7, #20]
  return(result);
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d02c      	beq.n	800900a <osMessageQueuePut+0x96>
 8008fb0:	4b28      	ldr	r3, [pc, #160]	@ (8009054 <osMessageQueuePut+0xe0>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d128      	bne.n	800900a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d005      	beq.n	8008fca <osMessageQueuePut+0x56>
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <osMessageQueuePut+0x56>
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008fca:	f06f 0303 	mvn.w	r3, #3
 8008fce:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008fd0:	e039      	b.n	8009046 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008fd6:	f107 0210 	add.w	r2, r7, #16
 8008fda:	2300      	movs	r3, #0
 8008fdc:	68b9      	ldr	r1, [r7, #8]
 8008fde:	6a38      	ldr	r0, [r7, #32]
 8008fe0:	f000 fd2c 	bl	8009a3c <xQueueGenericSendFromISR>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d003      	beq.n	8008ff2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008fea:	f06f 0302 	mvn.w	r3, #2
 8008fee:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ff0:	e029      	b.n	8009046 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d026      	beq.n	8009046 <osMessageQueuePut+0xd2>
 8008ff8:	4b17      	ldr	r3, [pc, #92]	@ (8009058 <osMessageQueuePut+0xe4>)
 8008ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	f3bf 8f4f 	dsb	sy
 8009004:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009008:	e01d      	b.n	8009046 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <osMessageQueuePut+0xa2>
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d103      	bne.n	800901e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009016:	f06f 0303 	mvn.w	r3, #3
 800901a:	627b      	str	r3, [r7, #36]	@ 0x24
 800901c:	e014      	b.n	8009048 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800901e:	2300      	movs	r3, #0
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	68b9      	ldr	r1, [r7, #8]
 8009024:	6a38      	ldr	r0, [r7, #32]
 8009026:	f000 fbff 	bl	8009828 <xQueueGenericSend>
 800902a:	4603      	mov	r3, r0
 800902c:	2b01      	cmp	r3, #1
 800902e:	d00b      	beq.n	8009048 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009036:	f06f 0301 	mvn.w	r3, #1
 800903a:	627b      	str	r3, [r7, #36]	@ 0x24
 800903c:	e004      	b.n	8009048 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800903e:	f06f 0302 	mvn.w	r3, #2
 8009042:	627b      	str	r3, [r7, #36]	@ 0x24
 8009044:	e000      	b.n	8009048 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009046:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800904a:	4618      	mov	r0, r3
 800904c:	3728      	adds	r7, #40	@ 0x28
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20009f5c 	.word	0x20009f5c
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800905c:	b580      	push	{r7, lr}
 800905e:	b08a      	sub	sp, #40	@ 0x28
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
 8009068:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800906e:	2300      	movs	r3, #0
 8009070:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009072:	f3ef 8305 	mrs	r3, IPSR
 8009076:	61fb      	str	r3, [r7, #28]
  return(result);
 8009078:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10f      	bne.n	800909e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800907e:	f3ef 8310 	mrs	r3, PRIMASK
 8009082:	61bb      	str	r3, [r7, #24]
  return(result);
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d105      	bne.n	8009096 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800908a:	f3ef 8311 	mrs	r3, BASEPRI
 800908e:	617b      	str	r3, [r7, #20]
  return(result);
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d02c      	beq.n	80090f0 <osMessageQueueGet+0x94>
 8009096:	4b28      	ldr	r3, [pc, #160]	@ (8009138 <osMessageQueueGet+0xdc>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b02      	cmp	r3, #2
 800909c:	d128      	bne.n	80090f0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800909e:	6a3b      	ldr	r3, [r7, #32]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <osMessageQueueGet+0x54>
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d002      	beq.n	80090b0 <osMessageQueueGet+0x54>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d003      	beq.n	80090b8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80090b0:	f06f 0303 	mvn.w	r3, #3
 80090b4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80090b6:	e038      	b.n	800912a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80090b8:	2300      	movs	r3, #0
 80090ba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80090bc:	f107 0310 	add.w	r3, r7, #16
 80090c0:	461a      	mov	r2, r3
 80090c2:	68b9      	ldr	r1, [r7, #8]
 80090c4:	6a38      	ldr	r0, [r7, #32]
 80090c6:	f000 fff5 	bl	800a0b4 <xQueueReceiveFromISR>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d003      	beq.n	80090d8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80090d0:	f06f 0302 	mvn.w	r3, #2
 80090d4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80090d6:	e028      	b.n	800912a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d025      	beq.n	800912a <osMessageQueueGet+0xce>
 80090de:	4b17      	ldr	r3, [pc, #92]	@ (800913c <osMessageQueueGet+0xe0>)
 80090e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80090ee:	e01c      	b.n	800912a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d002      	beq.n	80090fc <osMessageQueueGet+0xa0>
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d103      	bne.n	8009104 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80090fc:	f06f 0303 	mvn.w	r3, #3
 8009100:	627b      	str	r3, [r7, #36]	@ 0x24
 8009102:	e013      	b.n	800912c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	68b9      	ldr	r1, [r7, #8]
 8009108:	6a38      	ldr	r0, [r7, #32]
 800910a:	f000 fdd3 	bl	8009cb4 <xQueueReceive>
 800910e:	4603      	mov	r3, r0
 8009110:	2b01      	cmp	r3, #1
 8009112:	d00b      	beq.n	800912c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800911a:	f06f 0301 	mvn.w	r3, #1
 800911e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009120:	e004      	b.n	800912c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009122:	f06f 0302 	mvn.w	r3, #2
 8009126:	627b      	str	r3, [r7, #36]	@ 0x24
 8009128:	e000      	b.n	800912c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800912a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800912c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800912e:	4618      	mov	r0, r3
 8009130:	3728      	adds	r7, #40	@ 0x28
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20009f5c 	.word	0x20009f5c
 800913c:	e000ed04 	.word	0xe000ed04

08009140 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4a07      	ldr	r2, [pc, #28]	@ (800916c <vApplicationGetIdleTaskMemory+0x2c>)
 8009150:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	4a06      	ldr	r2, [pc, #24]	@ (8009170 <vApplicationGetIdleTaskMemory+0x30>)
 8009156:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800915e:	601a      	str	r2, [r3, #0]
}
 8009160:	bf00      	nop
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	20009f60 	.word	0x20009f60
 8009170:	2000a008 	.word	0x2000a008

08009174 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4a07      	ldr	r2, [pc, #28]	@ (80091a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009184:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	4a06      	ldr	r2, [pc, #24]	@ (80091a4 <vApplicationGetTimerTaskMemory+0x30>)
 800918a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009192:	601a      	str	r2, [r3, #0]
}
 8009194:	bf00      	nop
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	2000a408 	.word	0x2000a408
 80091a4:	2000a4b0 	.word	0x2000a4b0

080091a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f103 0208 	add.w	r2, r3, #8
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f04f 32ff 	mov.w	r2, #4294967295
 80091c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f103 0208 	add.w	r2, r3, #8
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f103 0208 	add.w	r2, r3, #8
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091f6:	bf00      	nop
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009202:	b480      	push	{r7}
 8009204:	b085      	sub	sp, #20
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	689a      	ldr	r2, [r3, #8]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	601a      	str	r2, [r3, #0]
}
 800923e:	bf00      	nop
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800924a:	b480      	push	{r7}
 800924c:	b085      	sub	sp, #20
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
 8009252:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009260:	d103      	bne.n	800926a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	e00c      	b.n	8009284 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	3308      	adds	r3, #8
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	e002      	b.n	8009278 <vListInsert+0x2e>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	429a      	cmp	r2, r3
 8009282:	d2f6      	bcs.n	8009272 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	1c5a      	adds	r2, r3, #1
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	601a      	str	r2, [r3, #0]
}
 80092b0:	bf00      	nop
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	6892      	ldr	r2, [r2, #8]
 80092d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	6852      	ldr	r2, [r2, #4]
 80092dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d103      	bne.n	80092f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	689a      	ldr	r2, [r3, #8]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	1e5a      	subs	r2, r3, #1
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10d      	bne.n	8009340 <xQueueGenericReset+0x30>
	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009328:	b672      	cpsid	i
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	b662      	cpsie	i
 8009338:	60bb      	str	r3, [r7, #8]
}
 800933a:	bf00      	nop
 800933c:	bf00      	nop
 800933e:	e7fd      	b.n	800933c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009340:	f002 ff4c 	bl	800c1dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800934c:	68f9      	ldr	r1, [r7, #12]
 800934e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009350:	fb01 f303 	mul.w	r3, r1, r3
 8009354:	441a      	add	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009370:	3b01      	subs	r3, #1
 8009372:	68f9      	ldr	r1, [r7, #12]
 8009374:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009376:	fb01 f303 	mul.w	r3, r1, r3
 800937a:	441a      	add	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	22ff      	movs	r2, #255	@ 0xff
 8009384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	22ff      	movs	r2, #255	@ 0xff
 800938c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d114      	bne.n	80093c0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d01a      	beq.n	80093d4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3310      	adds	r3, #16
 80093a2:	4618      	mov	r0, r3
 80093a4:	f001 fdc4 	bl	800af30 <xTaskRemoveFromEventList>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d012      	beq.n	80093d4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80093ae:	4b0d      	ldr	r3, [pc, #52]	@ (80093e4 <xQueueGenericReset+0xd4>)
 80093b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	e009      	b.n	80093d4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	3310      	adds	r3, #16
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7ff feef 	bl	80091a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	3324      	adds	r3, #36	@ 0x24
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7ff feea 	bl	80091a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80093d4:	f002 ff38 	bl	800c248 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80093d8:	2301      	movs	r3, #1
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	e000ed04 	.word	0xe000ed04

080093e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08e      	sub	sp, #56	@ 0x38
 80093ec:	af02      	add	r7, sp, #8
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10d      	bne.n	8009418 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009400:	b672      	cpsid	i
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	b662      	cpsie	i
 8009410:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009412:	bf00      	nop
 8009414:	bf00      	nop
 8009416:	e7fd      	b.n	8009414 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10d      	bne.n	800943a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009422:	b672      	cpsid	i
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	b662      	cpsie	i
 8009432:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	e7fd      	b.n	8009436 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d002      	beq.n	8009446 <xQueueGenericCreateStatic+0x5e>
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <xQueueGenericCreateStatic+0x62>
 8009446:	2301      	movs	r3, #1
 8009448:	e000      	b.n	800944c <xQueueGenericCreateStatic+0x64>
 800944a:	2300      	movs	r3, #0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10d      	bne.n	800946c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009454:	b672      	cpsid	i
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	b662      	cpsie	i
 8009464:	623b      	str	r3, [r7, #32]
}
 8009466:	bf00      	nop
 8009468:	bf00      	nop
 800946a:	e7fd      	b.n	8009468 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d102      	bne.n	8009478 <xQueueGenericCreateStatic+0x90>
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <xQueueGenericCreateStatic+0x94>
 8009478:	2301      	movs	r3, #1
 800947a:	e000      	b.n	800947e <xQueueGenericCreateStatic+0x96>
 800947c:	2300      	movs	r3, #0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10d      	bne.n	800949e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009486:	b672      	cpsid	i
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	b662      	cpsie	i
 8009496:	61fb      	str	r3, [r7, #28]
}
 8009498:	bf00      	nop
 800949a:	bf00      	nop
 800949c:	e7fd      	b.n	800949a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800949e:	2350      	movs	r3, #80	@ 0x50
 80094a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	2b50      	cmp	r3, #80	@ 0x50
 80094a6:	d00d      	beq.n	80094c4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80094a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ac:	b672      	cpsid	i
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	b662      	cpsie	i
 80094bc:	61bb      	str	r3, [r7, #24]
}
 80094be:	bf00      	nop
 80094c0:	bf00      	nop
 80094c2:	e7fd      	b.n	80094c0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80094c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80094ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00d      	beq.n	80094ec <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80094d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80094d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80094dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	4613      	mov	r3, r2
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	68b9      	ldr	r1, [r7, #8]
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 f848 	bl	800957c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3730      	adds	r7, #48	@ 0x30
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b08a      	sub	sp, #40	@ 0x28
 80094fa:	af02      	add	r7, sp, #8
 80094fc:	60f8      	str	r0, [r7, #12]
 80094fe:	60b9      	str	r1, [r7, #8]
 8009500:	4613      	mov	r3, r2
 8009502:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10d      	bne.n	8009526 <xQueueGenericCreate+0x30>
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950e:	b672      	cpsid	i
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	b662      	cpsie	i
 800951e:	613b      	str	r3, [r7, #16]
}
 8009520:	bf00      	nop
 8009522:	bf00      	nop
 8009524:	e7fd      	b.n	8009522 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d102      	bne.n	8009532 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800952c:	2300      	movs	r3, #0
 800952e:	61fb      	str	r3, [r7, #28]
 8009530:	e004      	b.n	800953c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	fb02 f303 	mul.w	r3, r2, r3
 800953a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	3350      	adds	r3, #80	@ 0x50
 8009540:	4618      	mov	r0, r3
 8009542:	f002 ff79 	bl	800c438 <pvPortMalloc>
 8009546:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d011      	beq.n	8009572 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	3350      	adds	r3, #80	@ 0x50
 8009556:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009560:	79fa      	ldrb	r2, [r7, #7]
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	4613      	mov	r3, r2
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	68b9      	ldr	r1, [r7, #8]
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f000 f805 	bl	800957c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009572:	69bb      	ldr	r3, [r7, #24]
	}
 8009574:	4618      	mov	r0, r3
 8009576:	3720      	adds	r7, #32
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d103      	bne.n	8009598 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	69ba      	ldr	r2, [r7, #24]
 8009594:	601a      	str	r2, [r3, #0]
 8009596:	e002      	b.n	800959e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80095aa:	2101      	movs	r1, #1
 80095ac:	69b8      	ldr	r0, [r7, #24]
 80095ae:	f7ff feaf 	bl	8009310 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	78fa      	ldrb	r2, [r7, #3]
 80095b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80095ba:	bf00      	nop
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b082      	sub	sp, #8
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00e      	beq.n	80095ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80095e2:	2300      	movs	r3, #0
 80095e4:	2200      	movs	r2, #0
 80095e6:	2100      	movs	r1, #0
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f91d 	bl	8009828 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80095ee:	bf00      	nop
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b086      	sub	sp, #24
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	4603      	mov	r3, r0
 80095fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009600:	2301      	movs	r3, #1
 8009602:	617b      	str	r3, [r7, #20]
 8009604:	2300      	movs	r3, #0
 8009606:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009608:	79fb      	ldrb	r3, [r7, #7]
 800960a:	461a      	mov	r2, r3
 800960c:	6939      	ldr	r1, [r7, #16]
 800960e:	6978      	ldr	r0, [r7, #20]
 8009610:	f7ff ff71 	bl	80094f6 <xQueueGenericCreate>
 8009614:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f7ff ffd3 	bl	80095c2 <prvInitialiseMutex>

		return xNewQueue;
 800961c:	68fb      	ldr	r3, [r7, #12]
	}
 800961e:	4618      	mov	r0, r3
 8009620:	3718      	adds	r7, #24
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009626:	b580      	push	{r7, lr}
 8009628:	b088      	sub	sp, #32
 800962a:	af02      	add	r7, sp, #8
 800962c:	4603      	mov	r3, r0
 800962e:	6039      	str	r1, [r7, #0]
 8009630:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009632:	2301      	movs	r3, #1
 8009634:	617b      	str	r3, [r7, #20]
 8009636:	2300      	movs	r3, #0
 8009638:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800963a:	79fb      	ldrb	r3, [r7, #7]
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	2200      	movs	r2, #0
 8009642:	6939      	ldr	r1, [r7, #16]
 8009644:	6978      	ldr	r0, [r7, #20]
 8009646:	f7ff fecf 	bl	80093e8 <xQueueGenericCreateStatic>
 800964a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f7ff ffb8 	bl	80095c2 <prvInitialiseMutex>

		return xNewQueue;
 8009652:	68fb      	ldr	r3, [r7, #12]
	}
 8009654:	4618      	mov	r0, r3
 8009656:	3718      	adds	r7, #24
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800965c:	b590      	push	{r4, r7, lr}
 800965e:	b087      	sub	sp, #28
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10d      	bne.n	800968a <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009672:	b672      	cpsid	i
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	b662      	cpsie	i
 8009682:	60fb      	str	r3, [r7, #12]
}
 8009684:	bf00      	nop
 8009686:	bf00      	nop
 8009688:	e7fd      	b.n	8009686 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	689c      	ldr	r4, [r3, #8]
 800968e:	f001 fe1d 	bl	800b2cc <xTaskGetCurrentTaskHandle>
 8009692:	4603      	mov	r3, r0
 8009694:	429c      	cmp	r4, r3
 8009696:	d111      	bne.n	80096bc <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	1e5a      	subs	r2, r3, #1
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d105      	bne.n	80096b6 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80096aa:	2300      	movs	r3, #0
 80096ac:	2200      	movs	r2, #0
 80096ae:	2100      	movs	r1, #0
 80096b0:	6938      	ldr	r0, [r7, #16]
 80096b2:	f000 f8b9 	bl	8009828 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80096b6:	2301      	movs	r3, #1
 80096b8:	617b      	str	r3, [r7, #20]
 80096ba:	e001      	b.n	80096c0 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80096bc:	2300      	movs	r3, #0
 80096be:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80096c0:	697b      	ldr	r3, [r7, #20]
	}
 80096c2:	4618      	mov	r0, r3
 80096c4:	371c      	adds	r7, #28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd90      	pop	{r4, r7, pc}

080096ca <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80096ca:	b590      	push	{r4, r7, lr}
 80096cc:	b087      	sub	sp, #28
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10d      	bne.n	80096fa <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e2:	b672      	cpsid	i
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	b662      	cpsie	i
 80096f2:	60fb      	str	r3, [r7, #12]
}
 80096f4:	bf00      	nop
 80096f6:	bf00      	nop
 80096f8:	e7fd      	b.n	80096f6 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	689c      	ldr	r4, [r3, #8]
 80096fe:	f001 fde5 	bl	800b2cc <xTaskGetCurrentTaskHandle>
 8009702:	4603      	mov	r3, r0
 8009704:	429c      	cmp	r4, r3
 8009706:	d107      	bne.n	8009718 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	1c5a      	adds	r2, r3, #1
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009712:	2301      	movs	r3, #1
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	e00c      	b.n	8009732 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	6938      	ldr	r0, [r7, #16]
 800971c:	f000 fbb2 	bl	8009e84 <xQueueSemaphoreTake>
 8009720:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d004      	beq.n	8009732 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	1c5a      	adds	r2, r3, #1
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009732:	697b      	ldr	r3, [r7, #20]
	}
 8009734:	4618      	mov	r0, r3
 8009736:	371c      	adds	r7, #28
 8009738:	46bd      	mov	sp, r7
 800973a:	bd90      	pop	{r4, r7, pc}

0800973c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08a      	sub	sp, #40	@ 0x28
 8009740:	af02      	add	r7, sp, #8
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10d      	bne.n	800976a <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009752:	b672      	cpsid	i
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	b662      	cpsie	i
 8009762:	61bb      	str	r3, [r7, #24]
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop
 8009768:	e7fd      	b.n	8009766 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	429a      	cmp	r2, r3
 8009770:	d90d      	bls.n	800978e <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009776:	b672      	cpsid	i
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	b662      	cpsie	i
 8009786:	617b      	str	r3, [r7, #20]
}
 8009788:	bf00      	nop
 800978a:	bf00      	nop
 800978c:	e7fd      	b.n	800978a <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800978e:	2302      	movs	r3, #2
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	2100      	movs	r1, #0
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7ff fe25 	bl	80093e8 <xQueueGenericCreateStatic>
 800979e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d002      	beq.n	80097ac <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80097ac:	69fb      	ldr	r3, [r7, #28]
	}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3720      	adds	r7, #32
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b086      	sub	sp, #24
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10d      	bne.n	80097e2 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80097c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ca:	b672      	cpsid	i
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	b662      	cpsie	i
 80097da:	613b      	str	r3, [r7, #16]
}
 80097dc:	bf00      	nop
 80097de:	bf00      	nop
 80097e0:	e7fd      	b.n	80097de <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d90d      	bls.n	8009806 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 80097ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ee:	b672      	cpsid	i
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	b662      	cpsie	i
 80097fe:	60fb      	str	r3, [r7, #12]
}
 8009800:	bf00      	nop
 8009802:	bf00      	nop
 8009804:	e7fd      	b.n	8009802 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009806:	2202      	movs	r2, #2
 8009808:	2100      	movs	r1, #0
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7ff fe73 	bl	80094f6 <xQueueGenericCreate>
 8009810:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d002      	beq.n	800981e <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800981e:	697b      	ldr	r3, [r7, #20]
	}
 8009820:	4618      	mov	r0, r3
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b08e      	sub	sp, #56	@ 0x38
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
 8009834:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009836:	2300      	movs	r3, #0
 8009838:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800983e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10d      	bne.n	8009860 <xQueueGenericSend+0x38>
	__asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009848:	b672      	cpsid	i
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	b662      	cpsie	i
 8009858:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800985a:	bf00      	nop
 800985c:	bf00      	nop
 800985e:	e7fd      	b.n	800985c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d103      	bne.n	800986e <xQueueGenericSend+0x46>
 8009866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <xQueueGenericSend+0x4a>
 800986e:	2301      	movs	r3, #1
 8009870:	e000      	b.n	8009874 <xQueueGenericSend+0x4c>
 8009872:	2300      	movs	r3, #0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10d      	bne.n	8009894 <xQueueGenericSend+0x6c>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987c:	b672      	cpsid	i
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	b662      	cpsie	i
 800988c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800988e:	bf00      	nop
 8009890:	bf00      	nop
 8009892:	e7fd      	b.n	8009890 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	2b02      	cmp	r3, #2
 8009898:	d103      	bne.n	80098a2 <xQueueGenericSend+0x7a>
 800989a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d101      	bne.n	80098a6 <xQueueGenericSend+0x7e>
 80098a2:	2301      	movs	r3, #1
 80098a4:	e000      	b.n	80098a8 <xQueueGenericSend+0x80>
 80098a6:	2300      	movs	r3, #0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10d      	bne.n	80098c8 <xQueueGenericSend+0xa0>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b0:	b672      	cpsid	i
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	b662      	cpsie	i
 80098c0:	623b      	str	r3, [r7, #32]
}
 80098c2:	bf00      	nop
 80098c4:	bf00      	nop
 80098c6:	e7fd      	b.n	80098c4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098c8:	f001 fd10 	bl	800b2ec <xTaskGetSchedulerState>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d102      	bne.n	80098d8 <xQueueGenericSend+0xb0>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d101      	bne.n	80098dc <xQueueGenericSend+0xb4>
 80098d8:	2301      	movs	r3, #1
 80098da:	e000      	b.n	80098de <xQueueGenericSend+0xb6>
 80098dc:	2300      	movs	r3, #0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10d      	bne.n	80098fe <xQueueGenericSend+0xd6>
	__asm volatile
 80098e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e6:	b672      	cpsid	i
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	b662      	cpsie	i
 80098f6:	61fb      	str	r3, [r7, #28]
}
 80098f8:	bf00      	nop
 80098fa:	bf00      	nop
 80098fc:	e7fd      	b.n	80098fa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098fe:	f002 fc6d 	bl	800c1dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800990a:	429a      	cmp	r2, r3
 800990c:	d302      	bcc.n	8009914 <xQueueGenericSend+0xec>
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2b02      	cmp	r3, #2
 8009912:	d129      	bne.n	8009968 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009914:	683a      	ldr	r2, [r7, #0]
 8009916:	68b9      	ldr	r1, [r7, #8]
 8009918:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800991a:	f000 fc91 	bl	800a240 <prvCopyDataToQueue>
 800991e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009924:	2b00      	cmp	r3, #0
 8009926:	d010      	beq.n	800994a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992a:	3324      	adds	r3, #36	@ 0x24
 800992c:	4618      	mov	r0, r3
 800992e:	f001 faff 	bl	800af30 <xTaskRemoveFromEventList>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d013      	beq.n	8009960 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009938:	4b3f      	ldr	r3, [pc, #252]	@ (8009a38 <xQueueGenericSend+0x210>)
 800993a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	e00a      	b.n	8009960 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800994a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800994c:	2b00      	cmp	r3, #0
 800994e:	d007      	beq.n	8009960 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009950:	4b39      	ldr	r3, [pc, #228]	@ (8009a38 <xQueueGenericSend+0x210>)
 8009952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009960:	f002 fc72 	bl	800c248 <vPortExitCritical>
				return pdPASS;
 8009964:	2301      	movs	r3, #1
 8009966:	e063      	b.n	8009a30 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d103      	bne.n	8009976 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800996e:	f002 fc6b 	bl	800c248 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009972:	2300      	movs	r3, #0
 8009974:	e05c      	b.n	8009a30 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009978:	2b00      	cmp	r3, #0
 800997a:	d106      	bne.n	800998a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800997c:	f107 0314 	add.w	r3, r7, #20
 8009980:	4618      	mov	r0, r3
 8009982:	f001 fb3b 	bl	800affc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009986:	2301      	movs	r3, #1
 8009988:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800998a:	f002 fc5d 	bl	800c248 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800998e:	f001 f861 	bl	800aa54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009992:	f002 fc23 	bl	800c1dc <vPortEnterCritical>
 8009996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009998:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800999c:	b25b      	sxtb	r3, r3
 800999e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a2:	d103      	bne.n	80099ac <xQueueGenericSend+0x184>
 80099a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099b2:	b25b      	sxtb	r3, r3
 80099b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b8:	d103      	bne.n	80099c2 <xQueueGenericSend+0x19a>
 80099ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099c2:	f002 fc41 	bl	800c248 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099c6:	1d3a      	adds	r2, r7, #4
 80099c8:	f107 0314 	add.w	r3, r7, #20
 80099cc:	4611      	mov	r1, r2
 80099ce:	4618      	mov	r0, r3
 80099d0:	f001 fb2a 	bl	800b028 <xTaskCheckForTimeOut>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d124      	bne.n	8009a24 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80099da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80099dc:	f000 fd28 	bl	800a430 <prvIsQueueFull>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d018      	beq.n	8009a18 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80099e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e8:	3310      	adds	r3, #16
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	4611      	mov	r1, r2
 80099ee:	4618      	mov	r0, r3
 80099f0:	f001 fa48 	bl	800ae84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80099f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80099f6:	f000 fcb3 	bl	800a360 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80099fa:	f001 f839 	bl	800aa70 <xTaskResumeAll>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f47f af7c 	bne.w	80098fe <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8009a06:	4b0c      	ldr	r3, [pc, #48]	@ (8009a38 <xQueueGenericSend+0x210>)
 8009a08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	e772      	b.n	80098fe <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009a18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a1a:	f000 fca1 	bl	800a360 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a1e:	f001 f827 	bl	800aa70 <xTaskResumeAll>
 8009a22:	e76c      	b.n	80098fe <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009a24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a26:	f000 fc9b 	bl	800a360 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a2a:	f001 f821 	bl	800aa70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009a2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3738      	adds	r7, #56	@ 0x38
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	e000ed04 	.word	0xe000ed04

08009a3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b08e      	sub	sp, #56	@ 0x38
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10d      	bne.n	8009a70 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a58:	b672      	cpsid	i
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	b662      	cpsie	i
 8009a68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009a6a:	bf00      	nop
 8009a6c:	bf00      	nop
 8009a6e:	e7fd      	b.n	8009a6c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d103      	bne.n	8009a7e <xQueueGenericSendFromISR+0x42>
 8009a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <xQueueGenericSendFromISR+0x46>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e000      	b.n	8009a84 <xQueueGenericSendFromISR+0x48>
 8009a82:	2300      	movs	r3, #0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10d      	bne.n	8009aa4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8009a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a8c:	b672      	cpsid	i
 8009a8e:	f383 8811 	msr	BASEPRI, r3
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	b662      	cpsie	i
 8009a9c:	623b      	str	r3, [r7, #32]
}
 8009a9e:	bf00      	nop
 8009aa0:	bf00      	nop
 8009aa2:	e7fd      	b.n	8009aa0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d103      	bne.n	8009ab2 <xQueueGenericSendFromISR+0x76>
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d101      	bne.n	8009ab6 <xQueueGenericSendFromISR+0x7a>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e000      	b.n	8009ab8 <xQueueGenericSendFromISR+0x7c>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10d      	bne.n	8009ad8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac0:	b672      	cpsid	i
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	b662      	cpsie	i
 8009ad0:	61fb      	str	r3, [r7, #28]
}
 8009ad2:	bf00      	nop
 8009ad4:	bf00      	nop
 8009ad6:	e7fd      	b.n	8009ad4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ad8:	f002 fc68 	bl	800c3ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009adc:	f3ef 8211 	mrs	r2, BASEPRI
 8009ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae4:	b672      	cpsid	i
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	b662      	cpsie	i
 8009af4:	61ba      	str	r2, [r7, #24]
 8009af6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009af8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d302      	bcc.n	8009b0e <xQueueGenericSendFromISR+0xd2>
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d12c      	bne.n	8009b68 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	68b9      	ldr	r1, [r7, #8]
 8009b1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b1e:	f000 fb8f 	bl	800a240 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b22:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8009b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2a:	d112      	bne.n	8009b52 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d016      	beq.n	8009b62 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b36:	3324      	adds	r3, #36	@ 0x24
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f001 f9f9 	bl	800af30 <xTaskRemoveFromEventList>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00e      	beq.n	8009b62 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00b      	beq.n	8009b62 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	e007      	b.n	8009b62 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b56:	3301      	adds	r3, #1
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	b25a      	sxtb	r2, r3
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009b62:	2301      	movs	r3, #1
 8009b64:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8009b66:	e001      	b.n	8009b6c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b6e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3738      	adds	r7, #56	@ 0x38
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b08e      	sub	sp, #56	@ 0x38
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10d      	bne.n	8009bb2 <xQueueGiveFromISR+0x30>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9a:	b672      	cpsid	i
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	b662      	cpsie	i
 8009baa:	623b      	str	r3, [r7, #32]
}
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
 8009bb0:	e7fd      	b.n	8009bae <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00d      	beq.n	8009bd6 <xQueueGiveFromISR+0x54>
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bbe:	b672      	cpsid	i
 8009bc0:	f383 8811 	msr	BASEPRI, r3
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	b662      	cpsie	i
 8009bce:	61fb      	str	r3, [r7, #28]
}
 8009bd0:	bf00      	nop
 8009bd2:	bf00      	nop
 8009bd4:	e7fd      	b.n	8009bd2 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d103      	bne.n	8009be6 <xQueueGiveFromISR+0x64>
 8009bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <xQueueGiveFromISR+0x68>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e000      	b.n	8009bec <xQueueGiveFromISR+0x6a>
 8009bea:	2300      	movs	r3, #0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10d      	bne.n	8009c0c <xQueueGiveFromISR+0x8a>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf4:	b672      	cpsid	i
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	b662      	cpsie	i
 8009c04:	61bb      	str	r3, [r7, #24]
}
 8009c06:	bf00      	nop
 8009c08:	bf00      	nop
 8009c0a:	e7fd      	b.n	8009c08 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c0c:	f002 fbce 	bl	800c3ac <vPortValidateInterruptPriority>
	__asm volatile
 8009c10:	f3ef 8211 	mrs	r2, BASEPRI
 8009c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c18:	b672      	cpsid	i
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	b662      	cpsie	i
 8009c28:	617a      	str	r2, [r7, #20]
 8009c2a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009c2c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c34:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d22b      	bcs.n	8009c98 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4c:	1c5a      	adds	r2, r3, #1
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c50:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c52:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5a:	d112      	bne.n	8009c82 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d016      	beq.n	8009c92 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c66:	3324      	adds	r3, #36	@ 0x24
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f001 f961 	bl	800af30 <xTaskRemoveFromEventList>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00e      	beq.n	8009c92 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00b      	beq.n	8009c92 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	601a      	str	r2, [r3, #0]
 8009c80:	e007      	b.n	8009c92 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009c82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c86:	3301      	adds	r3, #1
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	b25a      	sxtb	r2, r3
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009c92:	2301      	movs	r3, #1
 8009c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c96:	e001      	b.n	8009c9c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f383 8811 	msr	BASEPRI, r3
}
 8009ca6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3738      	adds	r7, #56	@ 0x38
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b08c      	sub	sp, #48	@ 0x30
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10d      	bne.n	8009cea <xQueueReceive+0x36>
	__asm volatile
 8009cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd2:	b672      	cpsid	i
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	b662      	cpsie	i
 8009ce2:	623b      	str	r3, [r7, #32]
}
 8009ce4:	bf00      	nop
 8009ce6:	bf00      	nop
 8009ce8:	e7fd      	b.n	8009ce6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d103      	bne.n	8009cf8 <xQueueReceive+0x44>
 8009cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d101      	bne.n	8009cfc <xQueueReceive+0x48>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e000      	b.n	8009cfe <xQueueReceive+0x4a>
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10d      	bne.n	8009d1e <xQueueReceive+0x6a>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d06:	b672      	cpsid	i
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	b662      	cpsie	i
 8009d16:	61fb      	str	r3, [r7, #28]
}
 8009d18:	bf00      	nop
 8009d1a:	bf00      	nop
 8009d1c:	e7fd      	b.n	8009d1a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d1e:	f001 fae5 	bl	800b2ec <xTaskGetSchedulerState>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d102      	bne.n	8009d2e <xQueueReceive+0x7a>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <xQueueReceive+0x7e>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e000      	b.n	8009d34 <xQueueReceive+0x80>
 8009d32:	2300      	movs	r3, #0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10d      	bne.n	8009d54 <xQueueReceive+0xa0>
	__asm volatile
 8009d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d3c:	b672      	cpsid	i
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	b662      	cpsie	i
 8009d4c:	61bb      	str	r3, [r7, #24]
}
 8009d4e:	bf00      	nop
 8009d50:	bf00      	nop
 8009d52:	e7fd      	b.n	8009d50 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d54:	f002 fa42 	bl	800c1dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d01f      	beq.n	8009da4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d64:	68b9      	ldr	r1, [r7, #8]
 8009d66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d68:	f000 fad4 	bl	800a314 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6e:	1e5a      	subs	r2, r3, #1
 8009d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d72:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00f      	beq.n	8009d9c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7e:	3310      	adds	r3, #16
 8009d80:	4618      	mov	r0, r3
 8009d82:	f001 f8d5 	bl	800af30 <xTaskRemoveFromEventList>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d007      	beq.n	8009d9c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8009e80 <xQueueReceive+0x1cc>)
 8009d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d9c:	f002 fa54 	bl	800c248 <vPortExitCritical>
				return pdPASS;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e069      	b.n	8009e78 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d103      	bne.n	8009db2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009daa:	f002 fa4d 	bl	800c248 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009dae:	2300      	movs	r3, #0
 8009db0:	e062      	b.n	8009e78 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d106      	bne.n	8009dc6 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009db8:	f107 0310 	add.w	r3, r7, #16
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f001 f91d 	bl	800affc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dc6:	f002 fa3f 	bl	800c248 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009dca:	f000 fe43 	bl	800aa54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dce:	f002 fa05 	bl	800c1dc <vPortEnterCritical>
 8009dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009dd8:	b25b      	sxtb	r3, r3
 8009dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dde:	d103      	bne.n	8009de8 <xQueueReceive+0x134>
 8009de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dee:	b25b      	sxtb	r3, r3
 8009df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df4:	d103      	bne.n	8009dfe <xQueueReceive+0x14a>
 8009df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009dfe:	f002 fa23 	bl	800c248 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e02:	1d3a      	adds	r2, r7, #4
 8009e04:	f107 0310 	add.w	r3, r7, #16
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f001 f90c 	bl	800b028 <xTaskCheckForTimeOut>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d123      	bne.n	8009e5e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e18:	f000 faf4 	bl	800a404 <prvIsQueueEmpty>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d017      	beq.n	8009e52 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e24:	3324      	adds	r3, #36	@ 0x24
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	4611      	mov	r1, r2
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f001 f82a 	bl	800ae84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e32:	f000 fa95 	bl	800a360 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e36:	f000 fe1b 	bl	800aa70 <xTaskResumeAll>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d189      	bne.n	8009d54 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8009e40:	4b0f      	ldr	r3, [pc, #60]	@ (8009e80 <xQueueReceive+0x1cc>)
 8009e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e46:	601a      	str	r2, [r3, #0]
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	e780      	b.n	8009d54 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009e52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e54:	f000 fa84 	bl	800a360 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e58:	f000 fe0a 	bl	800aa70 <xTaskResumeAll>
 8009e5c:	e77a      	b.n	8009d54 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e60:	f000 fa7e 	bl	800a360 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e64:	f000 fe04 	bl	800aa70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e6a:	f000 facb 	bl	800a404 <prvIsQueueEmpty>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f43f af6f 	beq.w	8009d54 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3730      	adds	r7, #48	@ 0x30
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	e000ed04 	.word	0xe000ed04

08009e84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b08e      	sub	sp, #56	@ 0x38
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009e96:	2300      	movs	r3, #0
 8009e98:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10d      	bne.n	8009ebc <xQueueSemaphoreTake+0x38>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea4:	b672      	cpsid	i
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	b662      	cpsie	i
 8009eb4:	623b      	str	r3, [r7, #32]
}
 8009eb6:	bf00      	nop
 8009eb8:	bf00      	nop
 8009eba:	e7fd      	b.n	8009eb8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00d      	beq.n	8009ee0 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec8:	b672      	cpsid	i
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	b662      	cpsie	i
 8009ed8:	61fb      	str	r3, [r7, #28]
}
 8009eda:	bf00      	nop
 8009edc:	bf00      	nop
 8009ede:	e7fd      	b.n	8009edc <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ee0:	f001 fa04 	bl	800b2ec <xTaskGetSchedulerState>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d102      	bne.n	8009ef0 <xQueueSemaphoreTake+0x6c>
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <xQueueSemaphoreTake+0x70>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e000      	b.n	8009ef6 <xQueueSemaphoreTake+0x72>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10d      	bne.n	8009f16 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efe:	b672      	cpsid	i
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	b662      	cpsie	i
 8009f0e:	61bb      	str	r3, [r7, #24]
}
 8009f10:	bf00      	nop
 8009f12:	bf00      	nop
 8009f14:	e7fd      	b.n	8009f12 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f16:	f002 f961 	bl	800c1dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f1e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d024      	beq.n	8009f70 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f28:	1e5a      	subs	r2, r3, #1
 8009f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f2c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d104      	bne.n	8009f40 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009f36:	f001 fb5b 	bl	800b5f0 <pvTaskIncrementMutexHeldCount>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f3e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00f      	beq.n	8009f68 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f4a:	3310      	adds	r3, #16
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 ffef 	bl	800af30 <xTaskRemoveFromEventList>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d007      	beq.n	8009f68 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f58:	4b55      	ldr	r3, [pc, #340]	@ (800a0b0 <xQueueSemaphoreTake+0x22c>)
 8009f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f68:	f002 f96e 	bl	800c248 <vPortExitCritical>
				return pdPASS;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e09a      	b.n	800a0a6 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d114      	bne.n	8009fa0 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00d      	beq.n	8009f98 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f80:	b672      	cpsid	i
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	b662      	cpsie	i
 8009f90:	617b      	str	r3, [r7, #20]
}
 8009f92:	bf00      	nop
 8009f94:	bf00      	nop
 8009f96:	e7fd      	b.n	8009f94 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009f98:	f002 f956 	bl	800c248 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	e082      	b.n	800a0a6 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d106      	bne.n	8009fb4 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fa6:	f107 030c 	add.w	r3, r7, #12
 8009faa:	4618      	mov	r0, r3
 8009fac:	f001 f826 	bl	800affc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009fb4:	f002 f948 	bl	800c248 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009fb8:	f000 fd4c 	bl	800aa54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fbc:	f002 f90e 	bl	800c1dc <vPortEnterCritical>
 8009fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009fc6:	b25b      	sxtb	r3, r3
 8009fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fcc:	d103      	bne.n	8009fd6 <xQueueSemaphoreTake+0x152>
 8009fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fdc:	b25b      	sxtb	r3, r3
 8009fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe2:	d103      	bne.n	8009fec <xQueueSemaphoreTake+0x168>
 8009fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009fec:	f002 f92c 	bl	800c248 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ff0:	463a      	mov	r2, r7
 8009ff2:	f107 030c 	add.w	r3, r7, #12
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f001 f815 	bl	800b028 <xTaskCheckForTimeOut>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d132      	bne.n	800a06a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a004:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a006:	f000 f9fd 	bl	800a404 <prvIsQueueEmpty>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d026      	beq.n	800a05e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d109      	bne.n	800a02c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800a018:	f002 f8e0 	bl	800c1dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	4618      	mov	r0, r3
 800a022:	f001 f981 	bl	800b328 <xTaskPriorityInherit>
 800a026:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a028:	f002 f90e 	bl	800c248 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a02e:	3324      	adds	r3, #36	@ 0x24
 800a030:	683a      	ldr	r2, [r7, #0]
 800a032:	4611      	mov	r1, r2
 800a034:	4618      	mov	r0, r3
 800a036:	f000 ff25 	bl	800ae84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a03a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a03c:	f000 f990 	bl	800a360 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a040:	f000 fd16 	bl	800aa70 <xTaskResumeAll>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	f47f af65 	bne.w	8009f16 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800a04c:	4b18      	ldr	r3, [pc, #96]	@ (800a0b0 <xQueueSemaphoreTake+0x22c>)
 800a04e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	e75b      	b.n	8009f16 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a05e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a060:	f000 f97e 	bl	800a360 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a064:	f000 fd04 	bl	800aa70 <xTaskResumeAll>
 800a068:	e755      	b.n	8009f16 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a06a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a06c:	f000 f978 	bl	800a360 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a070:	f000 fcfe 	bl	800aa70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a074:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a076:	f000 f9c5 	bl	800a404 <prvIsQueueEmpty>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f43f af4a 	beq.w	8009f16 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00d      	beq.n	800a0a4 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800a088:	f002 f8a8 	bl	800c1dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a08c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a08e:	f000 f8bf 	bl	800a210 <prvGetDisinheritPriorityAfterTimeout>
 800a092:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a09a:	4618      	mov	r0, r3
 800a09c:	f001 fa20 	bl	800b4e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a0a0:	f002 f8d2 	bl	800c248 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a0a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3738      	adds	r7, #56	@ 0x38
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	e000ed04 	.word	0xe000ed04

0800a0b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b08e      	sub	sp, #56	@ 0x38
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10d      	bne.n	800a0e6 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ce:	b672      	cpsid	i
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	b662      	cpsie	i
 800a0de:	623b      	str	r3, [r7, #32]
}
 800a0e0:	bf00      	nop
 800a0e2:	bf00      	nop
 800a0e4:	e7fd      	b.n	800a0e2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d103      	bne.n	800a0f4 <xQueueReceiveFromISR+0x40>
 800a0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d101      	bne.n	800a0f8 <xQueueReceiveFromISR+0x44>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e000      	b.n	800a0fa <xQueueReceiveFromISR+0x46>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10d      	bne.n	800a11a <xQueueReceiveFromISR+0x66>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a102:	b672      	cpsid	i
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	b662      	cpsie	i
 800a112:	61fb      	str	r3, [r7, #28]
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop
 800a118:	e7fd      	b.n	800a116 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a11a:	f002 f947 	bl	800c3ac <vPortValidateInterruptPriority>
	__asm volatile
 800a11e:	f3ef 8211 	mrs	r2, BASEPRI
 800a122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a126:	b672      	cpsid	i
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	b662      	cpsie	i
 800a136:	61ba      	str	r2, [r7, #24]
 800a138:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a13a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a13c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a142:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a146:	2b00      	cmp	r3, #0
 800a148:	d02f      	beq.n	800a1aa <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a154:	68b9      	ldr	r1, [r7, #8]
 800a156:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a158:	f000 f8dc 	bl	800a314 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15e:	1e5a      	subs	r2, r3, #1
 800a160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a162:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a164:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16c:	d112      	bne.n	800a194 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d016      	beq.n	800a1a4 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a178:	3310      	adds	r3, #16
 800a17a:	4618      	mov	r0, r3
 800a17c:	f000 fed8 	bl	800af30 <xTaskRemoveFromEventList>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00e      	beq.n	800a1a4 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00b      	beq.n	800a1a4 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	e007      	b.n	800a1a4 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a198:	3301      	adds	r3, #1
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	b25a      	sxtb	r2, r3
 800a19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1a8:	e001      	b.n	800a1ae <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f383 8811 	msr	BASEPRI, r3
}
 800a1b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3738      	adds	r7, #56	@ 0x38
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10d      	bne.n	800a1f2 <vQueueDelete+0x2e>
	__asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1da:	b672      	cpsid	i
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	b662      	cpsie	i
 800a1ea:	60bb      	str	r3, [r7, #8]
}
 800a1ec:	bf00      	nop
 800a1ee:	bf00      	nop
 800a1f0:	e7fd      	b.n	800a1ee <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f000 f95e 	bl	800a4b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d102      	bne.n	800a208 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f002 f9e6 	bl	800c5d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a208:	bf00      	nop
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d006      	beq.n	800a22e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a22a:	60fb      	str	r3, [r7, #12]
 800a22c:	e001      	b.n	800a232 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a22e:	2300      	movs	r3, #0
 800a230:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a232:	68fb      	ldr	r3, [r7, #12]
	}
 800a234:	4618      	mov	r0, r3
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a24c:	2300      	movs	r3, #0
 800a24e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a254:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10d      	bne.n	800a27a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d14d      	bne.n	800a302 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f001 f8c4 	bl	800b3f8 <xTaskPriorityDisinherit>
 800a270:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2200      	movs	r2, #0
 800a276:	609a      	str	r2, [r3, #8]
 800a278:	e043      	b.n	800a302 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d119      	bne.n	800a2b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6858      	ldr	r0, [r3, #4]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a288:	461a      	mov	r2, r3
 800a28a:	68b9      	ldr	r1, [r7, #8]
 800a28c:	f00d fa3d 	bl	801770a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	685a      	ldr	r2, [r3, #4]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a298:	441a      	add	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	685a      	ldr	r2, [r3, #4]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d32b      	bcc.n	800a302 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	605a      	str	r2, [r3, #4]
 800a2b2:	e026      	b.n	800a302 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	68d8      	ldr	r0, [r3, #12]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2bc:	461a      	mov	r2, r3
 800a2be:	68b9      	ldr	r1, [r7, #8]
 800a2c0:	f00d fa23 	bl	801770a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	68da      	ldr	r2, [r3, #12]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2cc:	425b      	negs	r3, r3
 800a2ce:	441a      	add	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	68da      	ldr	r2, [r3, #12]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d207      	bcs.n	800a2f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	689a      	ldr	r2, [r3, #8]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e8:	425b      	negs	r3, r3
 800a2ea:	441a      	add	r2, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d105      	bne.n	800a302 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	3b01      	subs	r3, #1
 800a300:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	1c5a      	adds	r2, r3, #1
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a30a:	697b      	ldr	r3, [r7, #20]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3718      	adds	r7, #24
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a322:	2b00      	cmp	r3, #0
 800a324:	d018      	beq.n	800a358 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68da      	ldr	r2, [r3, #12]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a32e:	441a      	add	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	68da      	ldr	r2, [r3, #12]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d303      	bcc.n	800a348 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	68d9      	ldr	r1, [r3, #12]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a350:	461a      	mov	r2, r3
 800a352:	6838      	ldr	r0, [r7, #0]
 800a354:	f00d f9d9 	bl	801770a <memcpy>
	}
}
 800a358:	bf00      	nop
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a368:	f001 ff38 	bl	800c1dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a372:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a374:	e011      	b.n	800a39a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d012      	beq.n	800a3a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	3324      	adds	r3, #36	@ 0x24
 800a382:	4618      	mov	r0, r3
 800a384:	f000 fdd4 	bl	800af30 <xTaskRemoveFromEventList>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a38e:	f000 feb3 	bl	800b0f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a392:	7bfb      	ldrb	r3, [r7, #15]
 800a394:	3b01      	subs	r3, #1
 800a396:	b2db      	uxtb	r3, r3
 800a398:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a39a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	dce9      	bgt.n	800a376 <prvUnlockQueue+0x16>
 800a3a2:	e000      	b.n	800a3a6 <prvUnlockQueue+0x46>
					break;
 800a3a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	22ff      	movs	r2, #255	@ 0xff
 800a3aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a3ae:	f001 ff4b 	bl	800c248 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a3b2:	f001 ff13 	bl	800c1dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3be:	e011      	b.n	800a3e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d012      	beq.n	800a3ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	3310      	adds	r3, #16
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 fdaf 	bl	800af30 <xTaskRemoveFromEventList>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d001      	beq.n	800a3dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a3d8:	f000 fe8e 	bl	800b0f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a3dc:	7bbb      	ldrb	r3, [r7, #14]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	dce9      	bgt.n	800a3c0 <prvUnlockQueue+0x60>
 800a3ec:	e000      	b.n	800a3f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a3ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	22ff      	movs	r2, #255	@ 0xff
 800a3f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a3f8:	f001 ff26 	bl	800c248 <vPortExitCritical>
}
 800a3fc:	bf00      	nop
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a40c:	f001 fee6 	bl	800c1dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a418:	2301      	movs	r3, #1
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	e001      	b.n	800a422 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a41e:	2300      	movs	r3, #0
 800a420:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a422:	f001 ff11 	bl	800c248 <vPortExitCritical>

	return xReturn;
 800a426:	68fb      	ldr	r3, [r7, #12]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a438:	f001 fed0 	bl	800c1dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a444:	429a      	cmp	r2, r3
 800a446:	d102      	bne.n	800a44e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a448:	2301      	movs	r3, #1
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	e001      	b.n	800a452 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a44e:	2300      	movs	r3, #0
 800a450:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a452:	f001 fef9 	bl	800c248 <vPortExitCritical>

	return xReturn;
 800a456:	68fb      	ldr	r3, [r7, #12]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a46a:	2300      	movs	r3, #0
 800a46c:	60fb      	str	r3, [r7, #12]
 800a46e:	e014      	b.n	800a49a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a470:	4a0f      	ldr	r2, [pc, #60]	@ (800a4b0 <vQueueAddToRegistry+0x50>)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10b      	bne.n	800a494 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a47c:	490c      	ldr	r1, [pc, #48]	@ (800a4b0 <vQueueAddToRegistry+0x50>)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a486:	4a0a      	ldr	r2, [pc, #40]	@ (800a4b0 <vQueueAddToRegistry+0x50>)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	00db      	lsls	r3, r3, #3
 800a48c:	4413      	add	r3, r2
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a492:	e006      	b.n	800a4a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	3301      	adds	r3, #1
 800a498:	60fb      	str	r3, [r7, #12]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2b07      	cmp	r3, #7
 800a49e:	d9e7      	bls.n	800a470 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a4a0:	bf00      	nop
 800a4a2:	bf00      	nop
 800a4a4:	3714      	adds	r7, #20
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	2000acb0 	.word	0x2000acb0

0800a4b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4bc:	2300      	movs	r3, #0
 800a4be:	60fb      	str	r3, [r7, #12]
 800a4c0:	e016      	b.n	800a4f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a4c2:	4a10      	ldr	r2, [pc, #64]	@ (800a504 <vQueueUnregisterQueue+0x50>)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	00db      	lsls	r3, r3, #3
 800a4c8:	4413      	add	r3, r2
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d10b      	bne.n	800a4ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a4d2:	4a0c      	ldr	r2, [pc, #48]	@ (800a504 <vQueueUnregisterQueue+0x50>)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a4dc:	4a09      	ldr	r2, [pc, #36]	@ (800a504 <vQueueUnregisterQueue+0x50>)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	00db      	lsls	r3, r3, #3
 800a4e2:	4413      	add	r3, r2
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	605a      	str	r2, [r3, #4]
				break;
 800a4e8:	e006      	b.n	800a4f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	60fb      	str	r3, [r7, #12]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b07      	cmp	r3, #7
 800a4f4:	d9e5      	bls.n	800a4c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a4f6:	bf00      	nop
 800a4f8:	bf00      	nop
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	2000acb0 	.word	0x2000acb0

0800a508 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a518:	f001 fe60 	bl	800c1dc <vPortEnterCritical>
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a522:	b25b      	sxtb	r3, r3
 800a524:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a528:	d103      	bne.n	800a532 <vQueueWaitForMessageRestricted+0x2a>
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a538:	b25b      	sxtb	r3, r3
 800a53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53e:	d103      	bne.n	800a548 <vQueueWaitForMessageRestricted+0x40>
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a548:	f001 fe7e 	bl	800c248 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a550:	2b00      	cmp	r3, #0
 800a552:	d106      	bne.n	800a562 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	3324      	adds	r3, #36	@ 0x24
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	68b9      	ldr	r1, [r7, #8]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 fcb9 	bl	800aed4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a562:	6978      	ldr	r0, [r7, #20]
 800a564:	f7ff fefc 	bl	800a360 <prvUnlockQueue>
	}
 800a568:	bf00      	nop
 800a56a:	3718      	adds	r7, #24
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a570:	b580      	push	{r7, lr}
 800a572:	b08e      	sub	sp, #56	@ 0x38
 800a574:	af04      	add	r7, sp, #16
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
 800a57c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a57e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10d      	bne.n	800a5a0 <xTaskCreateStatic+0x30>
	__asm volatile
 800a584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a588:	b672      	cpsid	i
 800a58a:	f383 8811 	msr	BASEPRI, r3
 800a58e:	f3bf 8f6f 	isb	sy
 800a592:	f3bf 8f4f 	dsb	sy
 800a596:	b662      	cpsie	i
 800a598:	623b      	str	r3, [r7, #32]
}
 800a59a:	bf00      	nop
 800a59c:	bf00      	nop
 800a59e:	e7fd      	b.n	800a59c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10d      	bne.n	800a5c2 <xTaskCreateStatic+0x52>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5aa:	b672      	cpsid	i
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	b662      	cpsie	i
 800a5ba:	61fb      	str	r3, [r7, #28]
}
 800a5bc:	bf00      	nop
 800a5be:	bf00      	nop
 800a5c0:	e7fd      	b.n	800a5be <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5c2:	23a8      	movs	r3, #168	@ 0xa8
 800a5c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	2ba8      	cmp	r3, #168	@ 0xa8
 800a5ca:	d00d      	beq.n	800a5e8 <xTaskCreateStatic+0x78>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d0:	b672      	cpsid	i
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	b662      	cpsie	i
 800a5e0:	61bb      	str	r3, [r7, #24]
}
 800a5e2:	bf00      	nop
 800a5e4:	bf00      	nop
 800a5e6:	e7fd      	b.n	800a5e4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a5e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d01e      	beq.n	800a62e <xTaskCreateStatic+0xbe>
 800a5f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d01b      	beq.n	800a62e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a602:	2202      	movs	r2, #2
 800a604:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a608:	2300      	movs	r3, #0
 800a60a:	9303      	str	r3, [sp, #12]
 800a60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60e:	9302      	str	r3, [sp, #8]
 800a610:	f107 0314 	add.w	r3, r7, #20
 800a614:	9301      	str	r3, [sp, #4]
 800a616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	68b9      	ldr	r1, [r7, #8]
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f000 f851 	bl	800a6c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a626:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a628:	f000 f8f8 	bl	800a81c <prvAddNewTaskToReadyList>
 800a62c:	e001      	b.n	800a632 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800a62e:	2300      	movs	r3, #0
 800a630:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a632:	697b      	ldr	r3, [r7, #20]
	}
 800a634:	4618      	mov	r0, r3
 800a636:	3728      	adds	r7, #40	@ 0x28
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08c      	sub	sp, #48	@ 0x30
 800a640:	af04      	add	r7, sp, #16
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	4613      	mov	r3, r2
 800a64a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a64c:	88fb      	ldrh	r3, [r7, #6]
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4618      	mov	r0, r3
 800a652:	f001 fef1 	bl	800c438 <pvPortMalloc>
 800a656:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00e      	beq.n	800a67c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a65e:	20a8      	movs	r0, #168	@ 0xa8
 800a660:	f001 feea 	bl	800c438 <pvPortMalloc>
 800a664:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d003      	beq.n	800a674 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	697a      	ldr	r2, [r7, #20]
 800a670:	631a      	str	r2, [r3, #48]	@ 0x30
 800a672:	e005      	b.n	800a680 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a674:	6978      	ldr	r0, [r7, #20]
 800a676:	f001 ffad 	bl	800c5d4 <vPortFree>
 800a67a:	e001      	b.n	800a680 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a67c:	2300      	movs	r3, #0
 800a67e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d017      	beq.n	800a6b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a68e:	88fa      	ldrh	r2, [r7, #6]
 800a690:	2300      	movs	r3, #0
 800a692:	9303      	str	r3, [sp, #12]
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	9302      	str	r3, [sp, #8]
 800a698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a69a:	9301      	str	r3, [sp, #4]
 800a69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	68b9      	ldr	r1, [r7, #8]
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f80f 	bl	800a6c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6aa:	69f8      	ldr	r0, [r7, #28]
 800a6ac:	f000 f8b6 	bl	800a81c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	61bb      	str	r3, [r7, #24]
 800a6b4:	e002      	b.n	800a6bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a6bc:	69bb      	ldr	r3, [r7, #24]
	}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3720      	adds	r7, #32
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
	...

0800a6c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b088      	sub	sp, #32
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
 800a6d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	461a      	mov	r2, r3
 800a6e0:	21a5      	movs	r1, #165	@ 0xa5
 800a6e2:	f00c ff3f 	bl	8017564 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800a6f0:	440b      	add	r3, r1
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	4413      	add	r3, r2
 800a6f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	f023 0307 	bic.w	r3, r3, #7
 800a6fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	f003 0307 	and.w	r3, r3, #7
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00d      	beq.n	800a726 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70e:	b672      	cpsid	i
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	b662      	cpsie	i
 800a71e:	617b      	str	r3, [r7, #20]
}
 800a720:	bf00      	nop
 800a722:	bf00      	nop
 800a724:	e7fd      	b.n	800a722 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d01f      	beq.n	800a76c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a72c:	2300      	movs	r3, #0
 800a72e:	61fb      	str	r3, [r7, #28]
 800a730:	e012      	b.n	800a758 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	4413      	add	r3, r2
 800a738:	7819      	ldrb	r1, [r3, #0]
 800a73a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	4413      	add	r3, r2
 800a740:	3334      	adds	r3, #52	@ 0x34
 800a742:	460a      	mov	r2, r1
 800a744:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	4413      	add	r3, r2
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d006      	beq.n	800a760 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	3301      	adds	r3, #1
 800a756:	61fb      	str	r3, [r7, #28]
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	2b0f      	cmp	r3, #15
 800a75c:	d9e9      	bls.n	800a732 <prvInitialiseNewTask+0x6a>
 800a75e:	e000      	b.n	800a762 <prvInitialiseNewTask+0x9a>
			{
				break;
 800a760:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a764:	2200      	movs	r2, #0
 800a766:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a76a:	e003      	b.n	800a774 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a776:	2b37      	cmp	r3, #55	@ 0x37
 800a778:	d901      	bls.n	800a77e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a77a:	2337      	movs	r3, #55	@ 0x37
 800a77c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a780:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a782:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a788:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78c:	2200      	movs	r2, #0
 800a78e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a792:	3304      	adds	r3, #4
 800a794:	4618      	mov	r0, r3
 800a796:	f7fe fd27 	bl	80091e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79c:	3318      	adds	r3, #24
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe fd22 	bl	80091e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7b8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7cc:	3354      	adds	r3, #84	@ 0x54
 800a7ce:	224c      	movs	r2, #76	@ 0x4c
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f00c fec6 	bl	8017564 <memset>
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7da:	4a0d      	ldr	r2, [pc, #52]	@ (800a810 <prvInitialiseNewTask+0x148>)
 800a7dc:	659a      	str	r2, [r3, #88]	@ 0x58
 800a7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e0:	4a0c      	ldr	r2, [pc, #48]	@ (800a814 <prvInitialiseNewTask+0x14c>)
 800a7e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e6:	4a0c      	ldr	r2, [pc, #48]	@ (800a818 <prvInitialiseNewTask+0x150>)
 800a7e8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	68f9      	ldr	r1, [r7, #12]
 800a7ee:	69b8      	ldr	r0, [r7, #24]
 800a7f0:	f001 fbe2 	bl	800bfb8 <pxPortInitialiseStack>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d002      	beq.n	800a806 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a806:	bf00      	nop
 800a808:	3720      	adds	r7, #32
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	200275bc 	.word	0x200275bc
 800a814:	20027624 	.word	0x20027624
 800a818:	2002768c 	.word	0x2002768c

0800a81c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a824:	f001 fcda 	bl	800c1dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a828:	4b2d      	ldr	r3, [pc, #180]	@ (800a8e0 <prvAddNewTaskToReadyList+0xc4>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3301      	adds	r3, #1
 800a82e:	4a2c      	ldr	r2, [pc, #176]	@ (800a8e0 <prvAddNewTaskToReadyList+0xc4>)
 800a830:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a832:	4b2c      	ldr	r3, [pc, #176]	@ (800a8e4 <prvAddNewTaskToReadyList+0xc8>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d109      	bne.n	800a84e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a83a:	4a2a      	ldr	r2, [pc, #168]	@ (800a8e4 <prvAddNewTaskToReadyList+0xc8>)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a840:	4b27      	ldr	r3, [pc, #156]	@ (800a8e0 <prvAddNewTaskToReadyList+0xc4>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d110      	bne.n	800a86a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a848:	f000 fc7a 	bl	800b140 <prvInitialiseTaskLists>
 800a84c:	e00d      	b.n	800a86a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a84e:	4b26      	ldr	r3, [pc, #152]	@ (800a8e8 <prvAddNewTaskToReadyList+0xcc>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d109      	bne.n	800a86a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a856:	4b23      	ldr	r3, [pc, #140]	@ (800a8e4 <prvAddNewTaskToReadyList+0xc8>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a860:	429a      	cmp	r2, r3
 800a862:	d802      	bhi.n	800a86a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a864:	4a1f      	ldr	r2, [pc, #124]	@ (800a8e4 <prvAddNewTaskToReadyList+0xc8>)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a86a:	4b20      	ldr	r3, [pc, #128]	@ (800a8ec <prvAddNewTaskToReadyList+0xd0>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3301      	adds	r3, #1
 800a870:	4a1e      	ldr	r2, [pc, #120]	@ (800a8ec <prvAddNewTaskToReadyList+0xd0>)
 800a872:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a874:	4b1d      	ldr	r3, [pc, #116]	@ (800a8ec <prvAddNewTaskToReadyList+0xd0>)
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a880:	4b1b      	ldr	r3, [pc, #108]	@ (800a8f0 <prvAddNewTaskToReadyList+0xd4>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	429a      	cmp	r2, r3
 800a886:	d903      	bls.n	800a890 <prvAddNewTaskToReadyList+0x74>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a88c:	4a18      	ldr	r2, [pc, #96]	@ (800a8f0 <prvAddNewTaskToReadyList+0xd4>)
 800a88e:	6013      	str	r3, [r2, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a894:	4613      	mov	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4a15      	ldr	r2, [pc, #84]	@ (800a8f4 <prvAddNewTaskToReadyList+0xd8>)
 800a89e:	441a      	add	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	3304      	adds	r3, #4
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	4610      	mov	r0, r2
 800a8a8:	f7fe fcab 	bl	8009202 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a8ac:	f001 fccc 	bl	800c248 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a8b0:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e8 <prvAddNewTaskToReadyList+0xcc>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00e      	beq.n	800a8d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a8e4 <prvAddNewTaskToReadyList+0xc8>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d207      	bcs.n	800a8d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a8c6:	4b0c      	ldr	r3, [pc, #48]	@ (800a8f8 <prvAddNewTaskToReadyList+0xdc>)
 800a8c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8d6:	bf00      	nop
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	2000b1c4 	.word	0x2000b1c4
 800a8e4:	2000acf0 	.word	0x2000acf0
 800a8e8:	2000b1d0 	.word	0x2000b1d0
 800a8ec:	2000b1e0 	.word	0x2000b1e0
 800a8f0:	2000b1cc 	.word	0x2000b1cc
 800a8f4:	2000acf4 	.word	0x2000acf4
 800a8f8:	e000ed04 	.word	0xe000ed04

0800a8fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a904:	2300      	movs	r3, #0
 800a906:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d01a      	beq.n	800a944 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a90e:	4b15      	ldr	r3, [pc, #84]	@ (800a964 <vTaskDelay+0x68>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00d      	beq.n	800a932 <vTaskDelay+0x36>
	__asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a91a:	b672      	cpsid	i
 800a91c:	f383 8811 	msr	BASEPRI, r3
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	f3bf 8f4f 	dsb	sy
 800a928:	b662      	cpsie	i
 800a92a:	60bb      	str	r3, [r7, #8]
}
 800a92c:	bf00      	nop
 800a92e:	bf00      	nop
 800a930:	e7fd      	b.n	800a92e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a932:	f000 f88f 	bl	800aa54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a936:	2100      	movs	r1, #0
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 ff81 	bl	800b840 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a93e:	f000 f897 	bl	800aa70 <xTaskResumeAll>
 800a942:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d107      	bne.n	800a95a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800a94a:	4b07      	ldr	r3, [pc, #28]	@ (800a968 <vTaskDelay+0x6c>)
 800a94c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a95a:	bf00      	nop
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	2000b1ec 	.word	0x2000b1ec
 800a968:	e000ed04 	.word	0xe000ed04

0800a96c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b08a      	sub	sp, #40	@ 0x28
 800a970:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a972:	2300      	movs	r3, #0
 800a974:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a976:	2300      	movs	r3, #0
 800a978:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a97a:	463a      	mov	r2, r7
 800a97c:	1d39      	adds	r1, r7, #4
 800a97e:	f107 0308 	add.w	r3, r7, #8
 800a982:	4618      	mov	r0, r3
 800a984:	f7fe fbdc 	bl	8009140 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	9202      	str	r2, [sp, #8]
 800a990:	9301      	str	r3, [sp, #4]
 800a992:	2300      	movs	r3, #0
 800a994:	9300      	str	r3, [sp, #0]
 800a996:	2300      	movs	r3, #0
 800a998:	460a      	mov	r2, r1
 800a99a:	4926      	ldr	r1, [pc, #152]	@ (800aa34 <vTaskStartScheduler+0xc8>)
 800a99c:	4826      	ldr	r0, [pc, #152]	@ (800aa38 <vTaskStartScheduler+0xcc>)
 800a99e:	f7ff fde7 	bl	800a570 <xTaskCreateStatic>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	4a25      	ldr	r2, [pc, #148]	@ (800aa3c <vTaskStartScheduler+0xd0>)
 800a9a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9a8:	4b24      	ldr	r3, [pc, #144]	@ (800aa3c <vTaskStartScheduler+0xd0>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d002      	beq.n	800a9b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	617b      	str	r3, [r7, #20]
 800a9b4:	e001      	b.n	800a9ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d102      	bne.n	800a9c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a9c0:	f000 ff92 	bl	800b8e8 <xTimerCreateTimerTask>
 800a9c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d11d      	bne.n	800aa08 <vTaskStartScheduler+0x9c>
	__asm volatile
 800a9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d0:	b672      	cpsid	i
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	b662      	cpsie	i
 800a9e0:	613b      	str	r3, [r7, #16]
}
 800a9e2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9e4:	4b16      	ldr	r3, [pc, #88]	@ (800aa40 <vTaskStartScheduler+0xd4>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3354      	adds	r3, #84	@ 0x54
 800a9ea:	4a16      	ldr	r2, [pc, #88]	@ (800aa44 <vTaskStartScheduler+0xd8>)
 800a9ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a9ee:	4b16      	ldr	r3, [pc, #88]	@ (800aa48 <vTaskStartScheduler+0xdc>)
 800a9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a9f6:	4b15      	ldr	r3, [pc, #84]	@ (800aa4c <vTaskStartScheduler+0xe0>)
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a9fc:	4b14      	ldr	r3, [pc, #80]	@ (800aa50 <vTaskStartScheduler+0xe4>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa02:	f001 fb6d 	bl	800c0e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa06:	e011      	b.n	800aa2c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0e:	d10d      	bne.n	800aa2c <vTaskStartScheduler+0xc0>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa14:	b672      	cpsid	i
 800aa16:	f383 8811 	msr	BASEPRI, r3
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	b662      	cpsie	i
 800aa24:	60fb      	str	r3, [r7, #12]
}
 800aa26:	bf00      	nop
 800aa28:	bf00      	nop
 800aa2a:	e7fd      	b.n	800aa28 <vTaskStartScheduler+0xbc>
}
 800aa2c:	bf00      	nop
 800aa2e:	3718      	adds	r7, #24
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	0801863c 	.word	0x0801863c
 800aa38:	0800b111 	.word	0x0800b111
 800aa3c:	2000b1e8 	.word	0x2000b1e8
 800aa40:	2000acf0 	.word	0x2000acf0
 800aa44:	2000003c 	.word	0x2000003c
 800aa48:	2000b1e4 	.word	0x2000b1e4
 800aa4c:	2000b1d0 	.word	0x2000b1d0
 800aa50:	2000b1c8 	.word	0x2000b1c8

0800aa54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa54:	b480      	push	{r7}
 800aa56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800aa58:	4b04      	ldr	r3, [pc, #16]	@ (800aa6c <vTaskSuspendAll+0x18>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	4a03      	ldr	r2, [pc, #12]	@ (800aa6c <vTaskSuspendAll+0x18>)
 800aa60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800aa62:	bf00      	nop
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	2000b1ec 	.word	0x2000b1ec

0800aa70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa76:	2300      	movs	r3, #0
 800aa78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa7e:	4b43      	ldr	r3, [pc, #268]	@ (800ab8c <xTaskResumeAll+0x11c>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10d      	bne.n	800aaa2 <xTaskResumeAll+0x32>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8a:	b672      	cpsid	i
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	b662      	cpsie	i
 800aa9a:	603b      	str	r3, [r7, #0]
}
 800aa9c:	bf00      	nop
 800aa9e:	bf00      	nop
 800aaa0:	e7fd      	b.n	800aa9e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aaa2:	f001 fb9b 	bl	800c1dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aaa6:	4b39      	ldr	r3, [pc, #228]	@ (800ab8c <xTaskResumeAll+0x11c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	4a37      	ldr	r2, [pc, #220]	@ (800ab8c <xTaskResumeAll+0x11c>)
 800aaae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aab0:	4b36      	ldr	r3, [pc, #216]	@ (800ab8c <xTaskResumeAll+0x11c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d162      	bne.n	800ab7e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aab8:	4b35      	ldr	r3, [pc, #212]	@ (800ab90 <xTaskResumeAll+0x120>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d05e      	beq.n	800ab7e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aac0:	e02f      	b.n	800ab22 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aac2:	4b34      	ldr	r3, [pc, #208]	@ (800ab94 <xTaskResumeAll+0x124>)
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	3318      	adds	r3, #24
 800aace:	4618      	mov	r0, r3
 800aad0:	f7fe fbf4 	bl	80092bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3304      	adds	r3, #4
 800aad8:	4618      	mov	r0, r3
 800aada:	f7fe fbef 	bl	80092bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae2:	4b2d      	ldr	r3, [pc, #180]	@ (800ab98 <xTaskResumeAll+0x128>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d903      	bls.n	800aaf2 <xTaskResumeAll+0x82>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaee:	4a2a      	ldr	r2, [pc, #168]	@ (800ab98 <xTaskResumeAll+0x128>)
 800aaf0:	6013      	str	r3, [r2, #0]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4a27      	ldr	r2, [pc, #156]	@ (800ab9c <xTaskResumeAll+0x12c>)
 800ab00:	441a      	add	r2, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3304      	adds	r3, #4
 800ab06:	4619      	mov	r1, r3
 800ab08:	4610      	mov	r0, r2
 800ab0a:	f7fe fb7a 	bl	8009202 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab12:	4b23      	ldr	r3, [pc, #140]	@ (800aba0 <xTaskResumeAll+0x130>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d302      	bcc.n	800ab22 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800ab1c:	4b21      	ldr	r3, [pc, #132]	@ (800aba4 <xTaskResumeAll+0x134>)
 800ab1e:	2201      	movs	r2, #1
 800ab20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab22:	4b1c      	ldr	r3, [pc, #112]	@ (800ab94 <xTaskResumeAll+0x124>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1cb      	bne.n	800aac2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab30:	f000 fbac 	bl	800b28c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ab34:	4b1c      	ldr	r3, [pc, #112]	@ (800aba8 <xTaskResumeAll+0x138>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d010      	beq.n	800ab62 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab40:	f000 f858 	bl	800abf4 <xTaskIncrementTick>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d002      	beq.n	800ab50 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800ab4a:	4b16      	ldr	r3, [pc, #88]	@ (800aba4 <xTaskResumeAll+0x134>)
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	3b01      	subs	r3, #1
 800ab54:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1f1      	bne.n	800ab40 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800ab5c:	4b12      	ldr	r3, [pc, #72]	@ (800aba8 <xTaskResumeAll+0x138>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab62:	4b10      	ldr	r3, [pc, #64]	@ (800aba4 <xTaskResumeAll+0x134>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d009      	beq.n	800ab7e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab6e:	4b0f      	ldr	r3, [pc, #60]	@ (800abac <xTaskResumeAll+0x13c>)
 800ab70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab7e:	f001 fb63 	bl	800c248 <vPortExitCritical>

	return xAlreadyYielded;
 800ab82:	68bb      	ldr	r3, [r7, #8]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	2000b1ec 	.word	0x2000b1ec
 800ab90:	2000b1c4 	.word	0x2000b1c4
 800ab94:	2000b184 	.word	0x2000b184
 800ab98:	2000b1cc 	.word	0x2000b1cc
 800ab9c:	2000acf4 	.word	0x2000acf4
 800aba0:	2000acf0 	.word	0x2000acf0
 800aba4:	2000b1d8 	.word	0x2000b1d8
 800aba8:	2000b1d4 	.word	0x2000b1d4
 800abac:	e000ed04 	.word	0xe000ed04

0800abb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800abb6:	4b05      	ldr	r3, [pc, #20]	@ (800abcc <xTaskGetTickCount+0x1c>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800abbc:	687b      	ldr	r3, [r7, #4]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	2000b1c8 	.word	0x2000b1c8

0800abd0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abd6:	f001 fbe9 	bl	800c3ac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800abda:	2300      	movs	r3, #0
 800abdc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800abde:	4b04      	ldr	r3, [pc, #16]	@ (800abf0 <xTaskGetTickCountFromISR+0x20>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abe4:	683b      	ldr	r3, [r7, #0]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	2000b1c8 	.word	0x2000b1c8

0800abf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b086      	sub	sp, #24
 800abf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800abfa:	2300      	movs	r3, #0
 800abfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abfe:	4b50      	ldr	r3, [pc, #320]	@ (800ad40 <xTaskIncrementTick+0x14c>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f040 808c 	bne.w	800ad20 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac08:	4b4e      	ldr	r3, [pc, #312]	@ (800ad44 <xTaskIncrementTick+0x150>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac10:	4a4c      	ldr	r2, [pc, #304]	@ (800ad44 <xTaskIncrementTick+0x150>)
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d123      	bne.n	800ac64 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac1c:	4b4a      	ldr	r3, [pc, #296]	@ (800ad48 <xTaskIncrementTick+0x154>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00d      	beq.n	800ac42 <xTaskIncrementTick+0x4e>
	__asm volatile
 800ac26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac2a:	b672      	cpsid	i
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	b662      	cpsie	i
 800ac3a:	603b      	str	r3, [r7, #0]
}
 800ac3c:	bf00      	nop
 800ac3e:	bf00      	nop
 800ac40:	e7fd      	b.n	800ac3e <xTaskIncrementTick+0x4a>
 800ac42:	4b41      	ldr	r3, [pc, #260]	@ (800ad48 <xTaskIncrementTick+0x154>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	60fb      	str	r3, [r7, #12]
 800ac48:	4b40      	ldr	r3, [pc, #256]	@ (800ad4c <xTaskIncrementTick+0x158>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a3e      	ldr	r2, [pc, #248]	@ (800ad48 <xTaskIncrementTick+0x154>)
 800ac4e:	6013      	str	r3, [r2, #0]
 800ac50:	4a3e      	ldr	r2, [pc, #248]	@ (800ad4c <xTaskIncrementTick+0x158>)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6013      	str	r3, [r2, #0]
 800ac56:	4b3e      	ldr	r3, [pc, #248]	@ (800ad50 <xTaskIncrementTick+0x15c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	4a3c      	ldr	r2, [pc, #240]	@ (800ad50 <xTaskIncrementTick+0x15c>)
 800ac5e:	6013      	str	r3, [r2, #0]
 800ac60:	f000 fb14 	bl	800b28c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac64:	4b3b      	ldr	r3, [pc, #236]	@ (800ad54 <xTaskIncrementTick+0x160>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d349      	bcc.n	800ad02 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac6e:	4b36      	ldr	r3, [pc, #216]	@ (800ad48 <xTaskIncrementTick+0x154>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d104      	bne.n	800ac82 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac78:	4b36      	ldr	r3, [pc, #216]	@ (800ad54 <xTaskIncrementTick+0x160>)
 800ac7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac7e:	601a      	str	r2, [r3, #0]
					break;
 800ac80:	e03f      	b.n	800ad02 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac82:	4b31      	ldr	r3, [pc, #196]	@ (800ad48 <xTaskIncrementTick+0x154>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac92:	693a      	ldr	r2, [r7, #16]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d203      	bcs.n	800aca2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac9a:	4a2e      	ldr	r2, [pc, #184]	@ (800ad54 <xTaskIncrementTick+0x160>)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aca0:	e02f      	b.n	800ad02 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	3304      	adds	r3, #4
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fe fb08 	bl	80092bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d004      	beq.n	800acbe <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	3318      	adds	r3, #24
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fe faff 	bl	80092bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acc2:	4b25      	ldr	r3, [pc, #148]	@ (800ad58 <xTaskIncrementTick+0x164>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d903      	bls.n	800acd2 <xTaskIncrementTick+0xde>
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acce:	4a22      	ldr	r2, [pc, #136]	@ (800ad58 <xTaskIncrementTick+0x164>)
 800acd0:	6013      	str	r3, [r2, #0]
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acd6:	4613      	mov	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4413      	add	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4a1f      	ldr	r2, [pc, #124]	@ (800ad5c <xTaskIncrementTick+0x168>)
 800ace0:	441a      	add	r2, r3
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	3304      	adds	r3, #4
 800ace6:	4619      	mov	r1, r3
 800ace8:	4610      	mov	r0, r2
 800acea:	f7fe fa8a 	bl	8009202 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acf2:	4b1b      	ldr	r3, [pc, #108]	@ (800ad60 <xTaskIncrementTick+0x16c>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d3b8      	bcc.n	800ac6e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800acfc:	2301      	movs	r3, #1
 800acfe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad00:	e7b5      	b.n	800ac6e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad02:	4b17      	ldr	r3, [pc, #92]	@ (800ad60 <xTaskIncrementTick+0x16c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad08:	4914      	ldr	r1, [pc, #80]	@ (800ad5c <xTaskIncrementTick+0x168>)
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	4413      	add	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	440b      	add	r3, r1
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d907      	bls.n	800ad2a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	617b      	str	r3, [r7, #20]
 800ad1e:	e004      	b.n	800ad2a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ad20:	4b10      	ldr	r3, [pc, #64]	@ (800ad64 <xTaskIncrementTick+0x170>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3301      	adds	r3, #1
 800ad26:	4a0f      	ldr	r2, [pc, #60]	@ (800ad64 <xTaskIncrementTick+0x170>)
 800ad28:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ad2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ad68 <xTaskIncrementTick+0x174>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d001      	beq.n	800ad36 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800ad32:	2301      	movs	r3, #1
 800ad34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ad36:	697b      	ldr	r3, [r7, #20]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3718      	adds	r7, #24
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	2000b1ec 	.word	0x2000b1ec
 800ad44:	2000b1c8 	.word	0x2000b1c8
 800ad48:	2000b17c 	.word	0x2000b17c
 800ad4c:	2000b180 	.word	0x2000b180
 800ad50:	2000b1dc 	.word	0x2000b1dc
 800ad54:	2000b1e4 	.word	0x2000b1e4
 800ad58:	2000b1cc 	.word	0x2000b1cc
 800ad5c:	2000acf4 	.word	0x2000acf4
 800ad60:	2000acf0 	.word	0x2000acf0
 800ad64:	2000b1d4 	.word	0x2000b1d4
 800ad68:	2000b1d8 	.word	0x2000b1d8

0800ad6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad72:	4b3e      	ldr	r3, [pc, #248]	@ (800ae6c <vTaskSwitchContext+0x100>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d003      	beq.n	800ad82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad7a:	4b3d      	ldr	r3, [pc, #244]	@ (800ae70 <vTaskSwitchContext+0x104>)
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad80:	e070      	b.n	800ae64 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800ad82:	4b3b      	ldr	r3, [pc, #236]	@ (800ae70 <vTaskSwitchContext+0x104>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ad88:	4b3a      	ldr	r3, [pc, #232]	@ (800ae74 <vTaskSwitchContext+0x108>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad8e:	613b      	str	r3, [r7, #16]
 800ad90:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800ad94:	60fb      	str	r3, [r7, #12]
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d111      	bne.n	800adc4 <vTaskSwitchContext+0x58>
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	3304      	adds	r3, #4
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d10b      	bne.n	800adc4 <vTaskSwitchContext+0x58>
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	3308      	adds	r3, #8
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d105      	bne.n	800adc4 <vTaskSwitchContext+0x58>
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	330c      	adds	r3, #12
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d008      	beq.n	800add6 <vTaskSwitchContext+0x6a>
 800adc4:	4b2b      	ldr	r3, [pc, #172]	@ (800ae74 <vTaskSwitchContext+0x108>)
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	4b2a      	ldr	r3, [pc, #168]	@ (800ae74 <vTaskSwitchContext+0x108>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	3334      	adds	r3, #52	@ 0x34
 800adce:	4619      	mov	r1, r3
 800add0:	4610      	mov	r0, r2
 800add2:	f7f5 fefb 	bl	8000bcc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800add6:	4b28      	ldr	r3, [pc, #160]	@ (800ae78 <vTaskSwitchContext+0x10c>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	617b      	str	r3, [r7, #20]
 800addc:	e013      	b.n	800ae06 <vTaskSwitchContext+0x9a>
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10d      	bne.n	800ae00 <vTaskSwitchContext+0x94>
	__asm volatile
 800ade4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade8:	b672      	cpsid	i
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	b662      	cpsie	i
 800adf8:	607b      	str	r3, [r7, #4]
}
 800adfa:	bf00      	nop
 800adfc:	bf00      	nop
 800adfe:	e7fd      	b.n	800adfc <vTaskSwitchContext+0x90>
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	3b01      	subs	r3, #1
 800ae04:	617b      	str	r3, [r7, #20]
 800ae06:	491d      	ldr	r1, [pc, #116]	@ (800ae7c <vTaskSwitchContext+0x110>)
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	440b      	add	r3, r1
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d0e1      	beq.n	800adde <vTaskSwitchContext+0x72>
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4a15      	ldr	r2, [pc, #84]	@ (800ae7c <vTaskSwitchContext+0x110>)
 800ae26:	4413      	add	r3, r2
 800ae28:	60bb      	str	r3, [r7, #8]
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	685a      	ldr	r2, [r3, #4]
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	605a      	str	r2, [r3, #4]
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	685a      	ldr	r2, [r3, #4]
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	3308      	adds	r3, #8
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d104      	bne.n	800ae4a <vTaskSwitchContext+0xde>
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	685a      	ldr	r2, [r3, #4]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	605a      	str	r2, [r3, #4]
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	4a08      	ldr	r2, [pc, #32]	@ (800ae74 <vTaskSwitchContext+0x108>)
 800ae52:	6013      	str	r3, [r2, #0]
 800ae54:	4a08      	ldr	r2, [pc, #32]	@ (800ae78 <vTaskSwitchContext+0x10c>)
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae5a:	4b06      	ldr	r3, [pc, #24]	@ (800ae74 <vTaskSwitchContext+0x108>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	3354      	adds	r3, #84	@ 0x54
 800ae60:	4a07      	ldr	r2, [pc, #28]	@ (800ae80 <vTaskSwitchContext+0x114>)
 800ae62:	6013      	str	r3, [r2, #0]
}
 800ae64:	bf00      	nop
 800ae66:	3718      	adds	r7, #24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	2000b1ec 	.word	0x2000b1ec
 800ae70:	2000b1d8 	.word	0x2000b1d8
 800ae74:	2000acf0 	.word	0x2000acf0
 800ae78:	2000b1cc 	.word	0x2000b1cc
 800ae7c:	2000acf4 	.word	0x2000acf4
 800ae80:	2000003c 	.word	0x2000003c

0800ae84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10d      	bne.n	800aeb0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae98:	b672      	cpsid	i
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	b662      	cpsie	i
 800aea8:	60fb      	str	r3, [r7, #12]
}
 800aeaa:	bf00      	nop
 800aeac:	bf00      	nop
 800aeae:	e7fd      	b.n	800aeac <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aeb0:	4b07      	ldr	r3, [pc, #28]	@ (800aed0 <vTaskPlaceOnEventList+0x4c>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3318      	adds	r3, #24
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f7fe f9c6 	bl	800924a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aebe:	2101      	movs	r1, #1
 800aec0:	6838      	ldr	r0, [r7, #0]
 800aec2:	f000 fcbd 	bl	800b840 <prvAddCurrentTaskToDelayedList>
}
 800aec6:	bf00      	nop
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	2000acf0 	.word	0x2000acf0

0800aed4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10d      	bne.n	800af02 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeea:	b672      	cpsid	i
 800aeec:	f383 8811 	msr	BASEPRI, r3
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	b662      	cpsie	i
 800aefa:	617b      	str	r3, [r7, #20]
}
 800aefc:	bf00      	nop
 800aefe:	bf00      	nop
 800af00:	e7fd      	b.n	800aefe <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af02:	4b0a      	ldr	r3, [pc, #40]	@ (800af2c <vTaskPlaceOnEventListRestricted+0x58>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	3318      	adds	r3, #24
 800af08:	4619      	mov	r1, r3
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f7fe f979 	bl	8009202 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d002      	beq.n	800af1c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800af16:	f04f 33ff 	mov.w	r3, #4294967295
 800af1a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800af1c:	6879      	ldr	r1, [r7, #4]
 800af1e:	68b8      	ldr	r0, [r7, #8]
 800af20:	f000 fc8e 	bl	800b840 <prvAddCurrentTaskToDelayedList>
	}
 800af24:	bf00      	nop
 800af26:	3718      	adds	r7, #24
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	2000acf0 	.word	0x2000acf0

0800af30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d10d      	bne.n	800af62 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800af46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4a:	b672      	cpsid	i
 800af4c:	f383 8811 	msr	BASEPRI, r3
 800af50:	f3bf 8f6f 	isb	sy
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	b662      	cpsie	i
 800af5a:	60fb      	str	r3, [r7, #12]
}
 800af5c:	bf00      	nop
 800af5e:	bf00      	nop
 800af60:	e7fd      	b.n	800af5e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	3318      	adds	r3, #24
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe f9a8 	bl	80092bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af6c:	4b1d      	ldr	r3, [pc, #116]	@ (800afe4 <xTaskRemoveFromEventList+0xb4>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d11d      	bne.n	800afb0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	3304      	adds	r3, #4
 800af78:	4618      	mov	r0, r3
 800af7a:	f7fe f99f 	bl	80092bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af82:	4b19      	ldr	r3, [pc, #100]	@ (800afe8 <xTaskRemoveFromEventList+0xb8>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	429a      	cmp	r2, r3
 800af88:	d903      	bls.n	800af92 <xTaskRemoveFromEventList+0x62>
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af8e:	4a16      	ldr	r2, [pc, #88]	@ (800afe8 <xTaskRemoveFromEventList+0xb8>)
 800af90:	6013      	str	r3, [r2, #0]
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af96:	4613      	mov	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	4413      	add	r3, r2
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4a13      	ldr	r2, [pc, #76]	@ (800afec <xTaskRemoveFromEventList+0xbc>)
 800afa0:	441a      	add	r2, r3
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	3304      	adds	r3, #4
 800afa6:	4619      	mov	r1, r3
 800afa8:	4610      	mov	r0, r2
 800afaa:	f7fe f92a 	bl	8009202 <vListInsertEnd>
 800afae:	e005      	b.n	800afbc <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	3318      	adds	r3, #24
 800afb4:	4619      	mov	r1, r3
 800afb6:	480e      	ldr	r0, [pc, #56]	@ (800aff0 <xTaskRemoveFromEventList+0xc0>)
 800afb8:	f7fe f923 	bl	8009202 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afc0:	4b0c      	ldr	r3, [pc, #48]	@ (800aff4 <xTaskRemoveFromEventList+0xc4>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d905      	bls.n	800afd6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800afca:	2301      	movs	r3, #1
 800afcc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800afce:	4b0a      	ldr	r3, [pc, #40]	@ (800aff8 <xTaskRemoveFromEventList+0xc8>)
 800afd0:	2201      	movs	r2, #1
 800afd2:	601a      	str	r2, [r3, #0]
 800afd4:	e001      	b.n	800afda <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800afd6:	2300      	movs	r3, #0
 800afd8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800afda:	697b      	ldr	r3, [r7, #20]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	2000b1ec 	.word	0x2000b1ec
 800afe8:	2000b1cc 	.word	0x2000b1cc
 800afec:	2000acf4 	.word	0x2000acf4
 800aff0:	2000b184 	.word	0x2000b184
 800aff4:	2000acf0 	.word	0x2000acf0
 800aff8:	2000b1d8 	.word	0x2000b1d8

0800affc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b004:	4b06      	ldr	r3, [pc, #24]	@ (800b020 <vTaskInternalSetTimeOutState+0x24>)
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b00c:	4b05      	ldr	r3, [pc, #20]	@ (800b024 <vTaskInternalSetTimeOutState+0x28>)
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	605a      	str	r2, [r3, #4]
}
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr
 800b020:	2000b1dc 	.word	0x2000b1dc
 800b024:	2000b1c8 	.word	0x2000b1c8

0800b028 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b088      	sub	sp, #32
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10d      	bne.n	800b054 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b03c:	b672      	cpsid	i
 800b03e:	f383 8811 	msr	BASEPRI, r3
 800b042:	f3bf 8f6f 	isb	sy
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	b662      	cpsie	i
 800b04c:	613b      	str	r3, [r7, #16]
}
 800b04e:	bf00      	nop
 800b050:	bf00      	nop
 800b052:	e7fd      	b.n	800b050 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10d      	bne.n	800b076 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05e:	b672      	cpsid	i
 800b060:	f383 8811 	msr	BASEPRI, r3
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	b662      	cpsie	i
 800b06e:	60fb      	str	r3, [r7, #12]
}
 800b070:	bf00      	nop
 800b072:	bf00      	nop
 800b074:	e7fd      	b.n	800b072 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800b076:	f001 f8b1 	bl	800c1dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b07a:	4b1d      	ldr	r3, [pc, #116]	@ (800b0f0 <xTaskCheckForTimeOut+0xc8>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	69ba      	ldr	r2, [r7, #24]
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b092:	d102      	bne.n	800b09a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b094:	2300      	movs	r3, #0
 800b096:	61fb      	str	r3, [r7, #28]
 800b098:	e023      	b.n	800b0e2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	4b15      	ldr	r3, [pc, #84]	@ (800b0f4 <xTaskCheckForTimeOut+0xcc>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d007      	beq.n	800b0b6 <xTaskCheckForTimeOut+0x8e>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	69ba      	ldr	r2, [r7, #24]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d302      	bcc.n	800b0b6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	61fb      	str	r3, [r7, #28]
 800b0b4:	e015      	b.n	800b0e2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d20b      	bcs.n	800b0d8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	1ad2      	subs	r2, r2, r3
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7ff ff95 	bl	800affc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	61fb      	str	r3, [r7, #28]
 800b0d6:	e004      	b.n	800b0e2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b0e2:	f001 f8b1 	bl	800c248 <vPortExitCritical>

	return xReturn;
 800b0e6:	69fb      	ldr	r3, [r7, #28]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3720      	adds	r7, #32
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	2000b1c8 	.word	0x2000b1c8
 800b0f4:	2000b1dc 	.word	0x2000b1dc

0800b0f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b0fc:	4b03      	ldr	r3, [pc, #12]	@ (800b10c <vTaskMissedYield+0x14>)
 800b0fe:	2201      	movs	r2, #1
 800b100:	601a      	str	r2, [r3, #0]
}
 800b102:	bf00      	nop
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	2000b1d8 	.word	0x2000b1d8

0800b110 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b118:	f000 f852 	bl	800b1c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b11c:	4b06      	ldr	r3, [pc, #24]	@ (800b138 <prvIdleTask+0x28>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d9f9      	bls.n	800b118 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b124:	4b05      	ldr	r3, [pc, #20]	@ (800b13c <prvIdleTask+0x2c>)
 800b126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b12a:	601a      	str	r2, [r3, #0]
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b134:	e7f0      	b.n	800b118 <prvIdleTask+0x8>
 800b136:	bf00      	nop
 800b138:	2000acf4 	.word	0x2000acf4
 800b13c:	e000ed04 	.word	0xe000ed04

0800b140 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b146:	2300      	movs	r3, #0
 800b148:	607b      	str	r3, [r7, #4]
 800b14a:	e00c      	b.n	800b166 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	4613      	mov	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	4413      	add	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4a12      	ldr	r2, [pc, #72]	@ (800b1a0 <prvInitialiseTaskLists+0x60>)
 800b158:	4413      	add	r3, r2
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fe f824 	bl	80091a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	3301      	adds	r3, #1
 800b164:	607b      	str	r3, [r7, #4]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b37      	cmp	r3, #55	@ 0x37
 800b16a:	d9ef      	bls.n	800b14c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b16c:	480d      	ldr	r0, [pc, #52]	@ (800b1a4 <prvInitialiseTaskLists+0x64>)
 800b16e:	f7fe f81b 	bl	80091a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b172:	480d      	ldr	r0, [pc, #52]	@ (800b1a8 <prvInitialiseTaskLists+0x68>)
 800b174:	f7fe f818 	bl	80091a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b178:	480c      	ldr	r0, [pc, #48]	@ (800b1ac <prvInitialiseTaskLists+0x6c>)
 800b17a:	f7fe f815 	bl	80091a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b17e:	480c      	ldr	r0, [pc, #48]	@ (800b1b0 <prvInitialiseTaskLists+0x70>)
 800b180:	f7fe f812 	bl	80091a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b184:	480b      	ldr	r0, [pc, #44]	@ (800b1b4 <prvInitialiseTaskLists+0x74>)
 800b186:	f7fe f80f 	bl	80091a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b18a:	4b0b      	ldr	r3, [pc, #44]	@ (800b1b8 <prvInitialiseTaskLists+0x78>)
 800b18c:	4a05      	ldr	r2, [pc, #20]	@ (800b1a4 <prvInitialiseTaskLists+0x64>)
 800b18e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b190:	4b0a      	ldr	r3, [pc, #40]	@ (800b1bc <prvInitialiseTaskLists+0x7c>)
 800b192:	4a05      	ldr	r2, [pc, #20]	@ (800b1a8 <prvInitialiseTaskLists+0x68>)
 800b194:	601a      	str	r2, [r3, #0]
}
 800b196:	bf00      	nop
 800b198:	3708      	adds	r7, #8
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	2000acf4 	.word	0x2000acf4
 800b1a4:	2000b154 	.word	0x2000b154
 800b1a8:	2000b168 	.word	0x2000b168
 800b1ac:	2000b184 	.word	0x2000b184
 800b1b0:	2000b198 	.word	0x2000b198
 800b1b4:	2000b1b0 	.word	0x2000b1b0
 800b1b8:	2000b17c 	.word	0x2000b17c
 800b1bc:	2000b180 	.word	0x2000b180

0800b1c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1c6:	e019      	b.n	800b1fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b1c8:	f001 f808 	bl	800c1dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1cc:	4b10      	ldr	r3, [pc, #64]	@ (800b210 <prvCheckTasksWaitingTermination+0x50>)
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3304      	adds	r3, #4
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fe f86f 	bl	80092bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b1de:	4b0d      	ldr	r3, [pc, #52]	@ (800b214 <prvCheckTasksWaitingTermination+0x54>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	4a0b      	ldr	r2, [pc, #44]	@ (800b214 <prvCheckTasksWaitingTermination+0x54>)
 800b1e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b1e8:	4b0b      	ldr	r3, [pc, #44]	@ (800b218 <prvCheckTasksWaitingTermination+0x58>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	4a0a      	ldr	r2, [pc, #40]	@ (800b218 <prvCheckTasksWaitingTermination+0x58>)
 800b1f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b1f2:	f001 f829 	bl	800c248 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f810 	bl	800b21c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1fc:	4b06      	ldr	r3, [pc, #24]	@ (800b218 <prvCheckTasksWaitingTermination+0x58>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1e1      	bne.n	800b1c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b204:	bf00      	nop
 800b206:	bf00      	nop
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	2000b198 	.word	0x2000b198
 800b214:	2000b1c4 	.word	0x2000b1c4
 800b218:	2000b1ac 	.word	0x2000b1ac

0800b21c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	3354      	adds	r3, #84	@ 0x54
 800b228:	4618      	mov	r0, r3
 800b22a:	f00c f9b3 	bl	8017594 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b234:	2b00      	cmp	r3, #0
 800b236:	d108      	bne.n	800b24a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b23c:	4618      	mov	r0, r3
 800b23e:	f001 f9c9 	bl	800c5d4 <vPortFree>
				vPortFree( pxTCB );
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f001 f9c6 	bl	800c5d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b248:	e01b      	b.n	800b282 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b250:	2b01      	cmp	r3, #1
 800b252:	d103      	bne.n	800b25c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f001 f9bd 	bl	800c5d4 <vPortFree>
	}
 800b25a:	e012      	b.n	800b282 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b262:	2b02      	cmp	r3, #2
 800b264:	d00d      	beq.n	800b282 <prvDeleteTCB+0x66>
	__asm volatile
 800b266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b26a:	b672      	cpsid	i
 800b26c:	f383 8811 	msr	BASEPRI, r3
 800b270:	f3bf 8f6f 	isb	sy
 800b274:	f3bf 8f4f 	dsb	sy
 800b278:	b662      	cpsie	i
 800b27a:	60fb      	str	r3, [r7, #12]
}
 800b27c:	bf00      	nop
 800b27e:	bf00      	nop
 800b280:	e7fd      	b.n	800b27e <prvDeleteTCB+0x62>
	}
 800b282:	bf00      	nop
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
	...

0800b28c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b292:	4b0c      	ldr	r3, [pc, #48]	@ (800b2c4 <prvResetNextTaskUnblockTime+0x38>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d104      	bne.n	800b2a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b29c:	4b0a      	ldr	r3, [pc, #40]	@ (800b2c8 <prvResetNextTaskUnblockTime+0x3c>)
 800b29e:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b2a4:	e008      	b.n	800b2b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2a6:	4b07      	ldr	r3, [pc, #28]	@ (800b2c4 <prvResetNextTaskUnblockTime+0x38>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	4a04      	ldr	r2, [pc, #16]	@ (800b2c8 <prvResetNextTaskUnblockTime+0x3c>)
 800b2b6:	6013      	str	r3, [r2, #0]
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr
 800b2c4:	2000b17c 	.word	0x2000b17c
 800b2c8:	2000b1e4 	.word	0x2000b1e4

0800b2cc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b2d2:	4b05      	ldr	r3, [pc, #20]	@ (800b2e8 <xTaskGetCurrentTaskHandle+0x1c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b2d8:	687b      	ldr	r3, [r7, #4]
	}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	370c      	adds	r7, #12
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	2000acf0 	.word	0x2000acf0

0800b2ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b2f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b320 <xTaskGetSchedulerState+0x34>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d102      	bne.n	800b300 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	607b      	str	r3, [r7, #4]
 800b2fe:	e008      	b.n	800b312 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b300:	4b08      	ldr	r3, [pc, #32]	@ (800b324 <xTaskGetSchedulerState+0x38>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d102      	bne.n	800b30e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b308:	2302      	movs	r3, #2
 800b30a:	607b      	str	r3, [r7, #4]
 800b30c:	e001      	b.n	800b312 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b30e:	2300      	movs	r3, #0
 800b310:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b312:	687b      	ldr	r3, [r7, #4]
	}
 800b314:	4618      	mov	r0, r3
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr
 800b320:	2000b1d0 	.word	0x2000b1d0
 800b324:	2000b1ec 	.word	0x2000b1ec

0800b328 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b334:	2300      	movs	r3, #0
 800b336:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d051      	beq.n	800b3e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b342:	4b2a      	ldr	r3, [pc, #168]	@ (800b3ec <xTaskPriorityInherit+0xc4>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b348:	429a      	cmp	r2, r3
 800b34a:	d241      	bcs.n	800b3d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	699b      	ldr	r3, [r3, #24]
 800b350:	2b00      	cmp	r3, #0
 800b352:	db06      	blt.n	800b362 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b354:	4b25      	ldr	r3, [pc, #148]	@ (800b3ec <xTaskPriorityInherit+0xc4>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b35a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	6959      	ldr	r1, [r3, #20]
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b36a:	4613      	mov	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	4413      	add	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	4a1f      	ldr	r2, [pc, #124]	@ (800b3f0 <xTaskPriorityInherit+0xc8>)
 800b374:	4413      	add	r3, r2
 800b376:	4299      	cmp	r1, r3
 800b378:	d122      	bne.n	800b3c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	3304      	adds	r3, #4
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fd ff9c 	bl	80092bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b384:	4b19      	ldr	r3, [pc, #100]	@ (800b3ec <xTaskPriorityInherit+0xc4>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b392:	4b18      	ldr	r3, [pc, #96]	@ (800b3f4 <xTaskPriorityInherit+0xcc>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	429a      	cmp	r2, r3
 800b398:	d903      	bls.n	800b3a2 <xTaskPriorityInherit+0x7a>
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39e:	4a15      	ldr	r2, [pc, #84]	@ (800b3f4 <xTaskPriorityInherit+0xcc>)
 800b3a0:	6013      	str	r3, [r2, #0]
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	4a10      	ldr	r2, [pc, #64]	@ (800b3f0 <xTaskPriorityInherit+0xc8>)
 800b3b0:	441a      	add	r2, r3
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	3304      	adds	r3, #4
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	4610      	mov	r0, r2
 800b3ba:	f7fd ff22 	bl	8009202 <vListInsertEnd>
 800b3be:	e004      	b.n	800b3ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b3c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b3ec <xTaskPriorityInherit+0xc4>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	60fb      	str	r3, [r7, #12]
 800b3ce:	e008      	b.n	800b3e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3d4:	4b05      	ldr	r3, [pc, #20]	@ (800b3ec <xTaskPriorityInherit+0xc4>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d201      	bcs.n	800b3e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
	}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	2000acf0 	.word	0x2000acf0
 800b3f0:	2000acf4 	.word	0x2000acf4
 800b3f4:	2000b1cc 	.word	0x2000b1cc

0800b3f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b404:	2300      	movs	r3, #0
 800b406:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d05c      	beq.n	800b4c8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b40e:	4b31      	ldr	r3, [pc, #196]	@ (800b4d4 <xTaskPriorityDisinherit+0xdc>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	429a      	cmp	r2, r3
 800b416:	d00d      	beq.n	800b434 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800b418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b41c:	b672      	cpsid	i
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	b662      	cpsie	i
 800b42c:	60fb      	str	r3, [r7, #12]
}
 800b42e:	bf00      	nop
 800b430:	bf00      	nop
 800b432:	e7fd      	b.n	800b430 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10d      	bne.n	800b458 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800b43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b440:	b672      	cpsid	i
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	b662      	cpsie	i
 800b450:	60bb      	str	r3, [r7, #8]
}
 800b452:	bf00      	nop
 800b454:	bf00      	nop
 800b456:	e7fd      	b.n	800b454 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b45c:	1e5a      	subs	r2, r3, #1
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d02c      	beq.n	800b4c8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b472:	2b00      	cmp	r3, #0
 800b474:	d128      	bne.n	800b4c8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	3304      	adds	r3, #4
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fd ff1e 	bl	80092bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b48c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b498:	4b0f      	ldr	r3, [pc, #60]	@ (800b4d8 <xTaskPriorityDisinherit+0xe0>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d903      	bls.n	800b4a8 <xTaskPriorityDisinherit+0xb0>
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a4:	4a0c      	ldr	r2, [pc, #48]	@ (800b4d8 <xTaskPriorityDisinherit+0xe0>)
 800b4a6:	6013      	str	r3, [r2, #0]
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4a09      	ldr	r2, [pc, #36]	@ (800b4dc <xTaskPriorityDisinherit+0xe4>)
 800b4b6:	441a      	add	r2, r3
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	4619      	mov	r1, r3
 800b4be:	4610      	mov	r0, r2
 800b4c0:	f7fd fe9f 	bl	8009202 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b4c8:	697b      	ldr	r3, [r7, #20]
	}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3718      	adds	r7, #24
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	2000acf0 	.word	0x2000acf0
 800b4d8:	2000b1cc 	.word	0x2000b1cc
 800b4dc:	2000acf4 	.word	0x2000acf4

0800b4e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b088      	sub	sp, #32
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d070      	beq.n	800b5da <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10d      	bne.n	800b51c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b504:	b672      	cpsid	i
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	b662      	cpsie	i
 800b514:	60fb      	str	r3, [r7, #12]
}
 800b516:	bf00      	nop
 800b518:	bf00      	nop
 800b51a:	e7fd      	b.n	800b518 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b520:	683a      	ldr	r2, [r7, #0]
 800b522:	429a      	cmp	r2, r3
 800b524:	d902      	bls.n	800b52c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	61fb      	str	r3, [r7, #28]
 800b52a:	e002      	b.n	800b532 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b530:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b536:	69fa      	ldr	r2, [r7, #28]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d04e      	beq.n	800b5da <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b540:	697a      	ldr	r2, [r7, #20]
 800b542:	429a      	cmp	r2, r3
 800b544:	d149      	bne.n	800b5da <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b546:	4b27      	ldr	r3, [pc, #156]	@ (800b5e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	69ba      	ldr	r2, [r7, #24]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d10d      	bne.n	800b56c <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800b550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b554:	b672      	cpsid	i
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	b662      	cpsie	i
 800b564:	60bb      	str	r3, [r7, #8]
}
 800b566:	bf00      	nop
 800b568:	bf00      	nop
 800b56a:	e7fd      	b.n	800b568 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b570:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b572:	69bb      	ldr	r3, [r7, #24]
 800b574:	69fa      	ldr	r2, [r7, #28]
 800b576:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	db04      	blt.n	800b58a <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	6959      	ldr	r1, [r3, #20]
 800b58e:	693a      	ldr	r2, [r7, #16]
 800b590:	4613      	mov	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	4413      	add	r3, r2
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	4a13      	ldr	r2, [pc, #76]	@ (800b5e8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b59a:	4413      	add	r3, r2
 800b59c:	4299      	cmp	r1, r3
 800b59e:	d11c      	bne.n	800b5da <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	3304      	adds	r3, #4
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fd fe89 	bl	80092bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5ae:	4b0f      	ldr	r3, [pc, #60]	@ (800b5ec <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d903      	bls.n	800b5be <vTaskPriorityDisinheritAfterTimeout+0xde>
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ba:	4a0c      	ldr	r2, [pc, #48]	@ (800b5ec <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b5bc:	6013      	str	r3, [r2, #0]
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	4413      	add	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4a07      	ldr	r2, [pc, #28]	@ (800b5e8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b5cc:	441a      	add	r2, r3
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	3304      	adds	r3, #4
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	f7fd fe14 	bl	8009202 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5da:	bf00      	nop
 800b5dc:	3720      	adds	r7, #32
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	2000acf0 	.word	0x2000acf0
 800b5e8:	2000acf4 	.word	0x2000acf4
 800b5ec:	2000b1cc 	.word	0x2000b1cc

0800b5f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b5f0:	b480      	push	{r7}
 800b5f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b5f4:	4b07      	ldr	r3, [pc, #28]	@ (800b614 <pvTaskIncrementMutexHeldCount+0x24>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d004      	beq.n	800b606 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b5fc:	4b05      	ldr	r3, [pc, #20]	@ (800b614 <pvTaskIncrementMutexHeldCount+0x24>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b602:	3201      	adds	r2, #1
 800b604:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b606:	4b03      	ldr	r3, [pc, #12]	@ (800b614 <pvTaskIncrementMutexHeldCount+0x24>)
 800b608:	681b      	ldr	r3, [r3, #0]
	}
 800b60a:	4618      	mov	r0, r3
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr
 800b614:	2000acf0 	.word	0x2000acf0

0800b618 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b622:	f000 fddb 	bl	800c1dc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b626:	4b20      	ldr	r3, [pc, #128]	@ (800b6a8 <ulTaskNotifyTake+0x90>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d113      	bne.n	800b65a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b632:	4b1d      	ldr	r3, [pc, #116]	@ (800b6a8 <ulTaskNotifyTake+0x90>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2201      	movs	r2, #1
 800b638:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00b      	beq.n	800b65a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b642:	2101      	movs	r1, #1
 800b644:	6838      	ldr	r0, [r7, #0]
 800b646:	f000 f8fb 	bl	800b840 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b64a:	4b18      	ldr	r3, [pc, #96]	@ (800b6ac <ulTaskNotifyTake+0x94>)
 800b64c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b650:	601a      	str	r2, [r3, #0]
 800b652:	f3bf 8f4f 	dsb	sy
 800b656:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b65a:	f000 fdf5 	bl	800c248 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b65e:	f000 fdbd 	bl	800c1dc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b662:	4b11      	ldr	r3, [pc, #68]	@ (800b6a8 <ulTaskNotifyTake+0x90>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b66a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00e      	beq.n	800b690 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d005      	beq.n	800b684 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800b678:	4b0b      	ldr	r3, [pc, #44]	@ (800b6a8 <ulTaskNotifyTake+0x90>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800b682:	e005      	b.n	800b690 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800b684:	4b08      	ldr	r3, [pc, #32]	@ (800b6a8 <ulTaskNotifyTake+0x90>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	3a01      	subs	r2, #1
 800b68c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b690:	4b05      	ldr	r3, [pc, #20]	@ (800b6a8 <ulTaskNotifyTake+0x90>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2200      	movs	r2, #0
 800b696:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800b69a:	f000 fdd5 	bl	800c248 <vPortExitCritical>

		return ulReturn;
 800b69e:	68fb      	ldr	r3, [r7, #12]
	}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3710      	adds	r7, #16
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	2000acf0 	.word	0x2000acf0
 800b6ac:	e000ed04 	.word	0xe000ed04

0800b6b0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b08a      	sub	sp, #40	@ 0x28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	603b      	str	r3, [r7, #0]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10d      	bne.n	800b6e6 <xTaskGenericNotify+0x36>
	__asm volatile
 800b6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ce:	b672      	cpsid	i
 800b6d0:	f383 8811 	msr	BASEPRI, r3
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	b662      	cpsie	i
 800b6de:	61bb      	str	r3, [r7, #24]
}
 800b6e0:	bf00      	nop
 800b6e2:	bf00      	nop
 800b6e4:	e7fd      	b.n	800b6e2 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b6ea:	f000 fd77 	bl	800c1dc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d004      	beq.n	800b6fe <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b6fe:	6a3b      	ldr	r3, [r7, #32]
 800b700:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b704:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b706:	6a3b      	ldr	r3, [r7, #32]
 800b708:	2202      	movs	r2, #2
 800b70a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800b70e:	79fb      	ldrb	r3, [r7, #7]
 800b710:	2b04      	cmp	r3, #4
 800b712:	d82e      	bhi.n	800b772 <xTaskGenericNotify+0xc2>
 800b714:	a201      	add	r2, pc, #4	@ (adr r2, 800b71c <xTaskGenericNotify+0x6c>)
 800b716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71a:	bf00      	nop
 800b71c:	0800b79b 	.word	0x0800b79b
 800b720:	0800b731 	.word	0x0800b731
 800b724:	0800b743 	.word	0x0800b743
 800b728:	0800b753 	.word	0x0800b753
 800b72c:	0800b75d 	.word	0x0800b75d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b730:	6a3b      	ldr	r3, [r7, #32]
 800b732:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	431a      	orrs	r2, r3
 800b73a:	6a3b      	ldr	r3, [r7, #32]
 800b73c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b740:	e02e      	b.n	800b7a0 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b742:	6a3b      	ldr	r3, [r7, #32]
 800b744:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b748:	1c5a      	adds	r2, r3, #1
 800b74a:	6a3b      	ldr	r3, [r7, #32]
 800b74c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b750:	e026      	b.n	800b7a0 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	68ba      	ldr	r2, [r7, #8]
 800b756:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b75a:	e021      	b.n	800b7a0 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b75c:	7ffb      	ldrb	r3, [r7, #31]
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d004      	beq.n	800b76c <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b762:	6a3b      	ldr	r3, [r7, #32]
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b76a:	e019      	b.n	800b7a0 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 800b76c:	2300      	movs	r3, #0
 800b76e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800b770:	e016      	b.n	800b7a0 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b772:	6a3b      	ldr	r3, [r7, #32]
 800b774:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b77c:	d00f      	beq.n	800b79e <xTaskGenericNotify+0xee>
	__asm volatile
 800b77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b782:	b672      	cpsid	i
 800b784:	f383 8811 	msr	BASEPRI, r3
 800b788:	f3bf 8f6f 	isb	sy
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	b662      	cpsie	i
 800b792:	617b      	str	r3, [r7, #20]
}
 800b794:	bf00      	nop
 800b796:	bf00      	nop
 800b798:	e7fd      	b.n	800b796 <xTaskGenericNotify+0xe6>
					break;
 800b79a:	bf00      	nop
 800b79c:	e000      	b.n	800b7a0 <xTaskGenericNotify+0xf0>

					break;
 800b79e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b7a0:	7ffb      	ldrb	r3, [r7, #31]
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d13d      	bne.n	800b822 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7a6:	6a3b      	ldr	r3, [r7, #32]
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7fd fd86 	bl	80092bc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b7b0:	6a3b      	ldr	r3, [r7, #32]
 800b7b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7b4:	4b1e      	ldr	r3, [pc, #120]	@ (800b830 <xTaskGenericNotify+0x180>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d903      	bls.n	800b7c4 <xTaskGenericNotify+0x114>
 800b7bc:	6a3b      	ldr	r3, [r7, #32]
 800b7be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7c0:	4a1b      	ldr	r2, [pc, #108]	@ (800b830 <xTaskGenericNotify+0x180>)
 800b7c2:	6013      	str	r3, [r2, #0]
 800b7c4:	6a3b      	ldr	r3, [r7, #32]
 800b7c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	4413      	add	r3, r2
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	4a18      	ldr	r2, [pc, #96]	@ (800b834 <xTaskGenericNotify+0x184>)
 800b7d2:	441a      	add	r2, r3
 800b7d4:	6a3b      	ldr	r3, [r7, #32]
 800b7d6:	3304      	adds	r3, #4
 800b7d8:	4619      	mov	r1, r3
 800b7da:	4610      	mov	r0, r2
 800b7dc:	f7fd fd11 	bl	8009202 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b7e0:	6a3b      	ldr	r3, [r7, #32]
 800b7e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00d      	beq.n	800b804 <xTaskGenericNotify+0x154>
	__asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ec:	b672      	cpsid	i
 800b7ee:	f383 8811 	msr	BASEPRI, r3
 800b7f2:	f3bf 8f6f 	isb	sy
 800b7f6:	f3bf 8f4f 	dsb	sy
 800b7fa:	b662      	cpsie	i
 800b7fc:	613b      	str	r3, [r7, #16]
}
 800b7fe:	bf00      	nop
 800b800:	bf00      	nop
 800b802:	e7fd      	b.n	800b800 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b804:	6a3b      	ldr	r3, [r7, #32]
 800b806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b808:	4b0b      	ldr	r3, [pc, #44]	@ (800b838 <xTaskGenericNotify+0x188>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b80e:	429a      	cmp	r2, r3
 800b810:	d907      	bls.n	800b822 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b812:	4b0a      	ldr	r3, [pc, #40]	@ (800b83c <xTaskGenericNotify+0x18c>)
 800b814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b818:	601a      	str	r2, [r3, #0]
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b822:	f000 fd11 	bl	800c248 <vPortExitCritical>

		return xReturn;
 800b826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b828:	4618      	mov	r0, r3
 800b82a:	3728      	adds	r7, #40	@ 0x28
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	2000b1cc 	.word	0x2000b1cc
 800b834:	2000acf4 	.word	0x2000acf4
 800b838:	2000acf0 	.word	0x2000acf0
 800b83c:	e000ed04 	.word	0xe000ed04

0800b840 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b84a:	4b21      	ldr	r3, [pc, #132]	@ (800b8d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b850:	4b20      	ldr	r3, [pc, #128]	@ (800b8d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	3304      	adds	r3, #4
 800b856:	4618      	mov	r0, r3
 800b858:	f7fd fd30 	bl	80092bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b862:	d10a      	bne.n	800b87a <prvAddCurrentTaskToDelayedList+0x3a>
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d007      	beq.n	800b87a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b86a:	4b1a      	ldr	r3, [pc, #104]	@ (800b8d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	3304      	adds	r3, #4
 800b870:	4619      	mov	r1, r3
 800b872:	4819      	ldr	r0, [pc, #100]	@ (800b8d8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b874:	f7fd fcc5 	bl	8009202 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b878:	e026      	b.n	800b8c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	4413      	add	r3, r2
 800b880:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b882:	4b14      	ldr	r3, [pc, #80]	@ (800b8d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d209      	bcs.n	800b8a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b892:	4b12      	ldr	r3, [pc, #72]	@ (800b8dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	4b0f      	ldr	r3, [pc, #60]	@ (800b8d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	3304      	adds	r3, #4
 800b89c:	4619      	mov	r1, r3
 800b89e:	4610      	mov	r0, r2
 800b8a0:	f7fd fcd3 	bl	800924a <vListInsert>
}
 800b8a4:	e010      	b.n	800b8c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8a6:	4b0e      	ldr	r3, [pc, #56]	@ (800b8e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b8d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3304      	adds	r3, #4
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	4610      	mov	r0, r2
 800b8b4:	f7fd fcc9 	bl	800924a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b8e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d202      	bcs.n	800b8c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b8c2:	4a08      	ldr	r2, [pc, #32]	@ (800b8e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	6013      	str	r3, [r2, #0]
}
 800b8c8:	bf00      	nop
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	2000b1c8 	.word	0x2000b1c8
 800b8d4:	2000acf0 	.word	0x2000acf0
 800b8d8:	2000b1b0 	.word	0x2000b1b0
 800b8dc:	2000b180 	.word	0x2000b180
 800b8e0:	2000b17c 	.word	0x2000b17c
 800b8e4:	2000b1e4 	.word	0x2000b1e4

0800b8e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b08a      	sub	sp, #40	@ 0x28
 800b8ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b8f2:	f000 fb21 	bl	800bf38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b8f6:	4b1e      	ldr	r3, [pc, #120]	@ (800b970 <xTimerCreateTimerTask+0x88>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d021      	beq.n	800b942 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b8fe:	2300      	movs	r3, #0
 800b900:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b902:	2300      	movs	r3, #0
 800b904:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b906:	1d3a      	adds	r2, r7, #4
 800b908:	f107 0108 	add.w	r1, r7, #8
 800b90c:	f107 030c 	add.w	r3, r7, #12
 800b910:	4618      	mov	r0, r3
 800b912:	f7fd fc2f 	bl	8009174 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b916:	6879      	ldr	r1, [r7, #4]
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	9202      	str	r2, [sp, #8]
 800b91e:	9301      	str	r3, [sp, #4]
 800b920:	2302      	movs	r3, #2
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	2300      	movs	r3, #0
 800b926:	460a      	mov	r2, r1
 800b928:	4912      	ldr	r1, [pc, #72]	@ (800b974 <xTimerCreateTimerTask+0x8c>)
 800b92a:	4813      	ldr	r0, [pc, #76]	@ (800b978 <xTimerCreateTimerTask+0x90>)
 800b92c:	f7fe fe20 	bl	800a570 <xTaskCreateStatic>
 800b930:	4603      	mov	r3, r0
 800b932:	4a12      	ldr	r2, [pc, #72]	@ (800b97c <xTimerCreateTimerTask+0x94>)
 800b934:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b936:	4b11      	ldr	r3, [pc, #68]	@ (800b97c <xTimerCreateTimerTask+0x94>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b93e:	2301      	movs	r3, #1
 800b940:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10d      	bne.n	800b964 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b94c:	b672      	cpsid	i
 800b94e:	f383 8811 	msr	BASEPRI, r3
 800b952:	f3bf 8f6f 	isb	sy
 800b956:	f3bf 8f4f 	dsb	sy
 800b95a:	b662      	cpsie	i
 800b95c:	613b      	str	r3, [r7, #16]
}
 800b95e:	bf00      	nop
 800b960:	bf00      	nop
 800b962:	e7fd      	b.n	800b960 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b964:	697b      	ldr	r3, [r7, #20]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3718      	adds	r7, #24
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	2000b220 	.word	0x2000b220
 800b974:	08018644 	.word	0x08018644
 800b978:	0800bac1 	.word	0x0800bac1
 800b97c:	2000b224 	.word	0x2000b224

0800b980 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b08a      	sub	sp, #40	@ 0x28
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
 800b98c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b98e:	2300      	movs	r3, #0
 800b990:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10d      	bne.n	800b9b4 <xTimerGenericCommand+0x34>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99c:	b672      	cpsid	i
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	b662      	cpsie	i
 800b9ac:	623b      	str	r3, [r7, #32]
}
 800b9ae:	bf00      	nop
 800b9b0:	bf00      	nop
 800b9b2:	e7fd      	b.n	800b9b0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b9b4:	4b19      	ldr	r3, [pc, #100]	@ (800ba1c <xTimerGenericCommand+0x9c>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d02a      	beq.n	800ba12 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	2b05      	cmp	r3, #5
 800b9cc:	dc18      	bgt.n	800ba00 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b9ce:	f7ff fc8d 	bl	800b2ec <xTaskGetSchedulerState>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d109      	bne.n	800b9ec <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b9d8:	4b10      	ldr	r3, [pc, #64]	@ (800ba1c <xTimerGenericCommand+0x9c>)
 800b9da:	6818      	ldr	r0, [r3, #0]
 800b9dc:	f107 0110 	add.w	r1, r7, #16
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9e4:	f7fd ff20 	bl	8009828 <xQueueGenericSend>
 800b9e8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b9ea:	e012      	b.n	800ba12 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b9ec:	4b0b      	ldr	r3, [pc, #44]	@ (800ba1c <xTimerGenericCommand+0x9c>)
 800b9ee:	6818      	ldr	r0, [r3, #0]
 800b9f0:	f107 0110 	add.w	r1, r7, #16
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f7fd ff16 	bl	8009828 <xQueueGenericSend>
 800b9fc:	6278      	str	r0, [r7, #36]	@ 0x24
 800b9fe:	e008      	b.n	800ba12 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba00:	4b06      	ldr	r3, [pc, #24]	@ (800ba1c <xTimerGenericCommand+0x9c>)
 800ba02:	6818      	ldr	r0, [r3, #0]
 800ba04:	f107 0110 	add.w	r1, r7, #16
 800ba08:	2300      	movs	r3, #0
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	f7fe f816 	bl	8009a3c <xQueueGenericSendFromISR>
 800ba10:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3728      	adds	r7, #40	@ 0x28
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	2000b220 	.word	0x2000b220

0800ba20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b088      	sub	sp, #32
 800ba24:	af02      	add	r7, sp, #8
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba2a:	4b24      	ldr	r3, [pc, #144]	@ (800babc <prvProcessExpiredTimer+0x9c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	3304      	adds	r3, #4
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7fd fc3f 	bl	80092bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba44:	f003 0304 	and.w	r3, r3, #4
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d025      	beq.n	800ba98 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	699a      	ldr	r2, [r3, #24]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	18d1      	adds	r1, r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	683a      	ldr	r2, [r7, #0]
 800ba58:	6978      	ldr	r0, [r7, #20]
 800ba5a:	f000 f8d7 	bl	800bc0c <prvInsertTimerInActiveList>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d022      	beq.n	800baaa <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba64:	2300      	movs	r3, #0
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	2300      	movs	r3, #0
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	6978      	ldr	r0, [r7, #20]
 800ba70:	f7ff ff86 	bl	800b980 <xTimerGenericCommand>
 800ba74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d116      	bne.n	800baaa <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba80:	b672      	cpsid	i
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	b662      	cpsie	i
 800ba90:	60fb      	str	r3, [r7, #12]
}
 800ba92:	bf00      	nop
 800ba94:	bf00      	nop
 800ba96:	e7fd      	b.n	800ba94 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba9e:	f023 0301 	bic.w	r3, r3, #1
 800baa2:	b2da      	uxtb	r2, r3
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	6a1b      	ldr	r3, [r3, #32]
 800baae:	6978      	ldr	r0, [r7, #20]
 800bab0:	4798      	blx	r3
}
 800bab2:	bf00      	nop
 800bab4:	3718      	adds	r7, #24
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	2000b218 	.word	0x2000b218

0800bac0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bac8:	f107 0308 	add.w	r3, r7, #8
 800bacc:	4618      	mov	r0, r3
 800bace:	f000 f859 	bl	800bb84 <prvGetNextExpireTime>
 800bad2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	4619      	mov	r1, r3
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f000 f805 	bl	800bae8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bade:	f000 f8d7 	bl	800bc90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bae2:	bf00      	nop
 800bae4:	e7f0      	b.n	800bac8 <prvTimerTask+0x8>
	...

0800bae8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800baf2:	f7fe ffaf 	bl	800aa54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800baf6:	f107 0308 	add.w	r3, r7, #8
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 f866 	bl	800bbcc <prvSampleTimeNow>
 800bb00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d130      	bne.n	800bb6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d10a      	bne.n	800bb24 <prvProcessTimerOrBlockTask+0x3c>
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d806      	bhi.n	800bb24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb16:	f7fe ffab 	bl	800aa70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb1a:	68f9      	ldr	r1, [r7, #12]
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff ff7f 	bl	800ba20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb22:	e024      	b.n	800bb6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d008      	beq.n	800bb3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb2a:	4b13      	ldr	r3, [pc, #76]	@ (800bb78 <prvProcessTimerOrBlockTask+0x90>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d101      	bne.n	800bb38 <prvProcessTimerOrBlockTask+0x50>
 800bb34:	2301      	movs	r3, #1
 800bb36:	e000      	b.n	800bb3a <prvProcessTimerOrBlockTask+0x52>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb3c:	4b0f      	ldr	r3, [pc, #60]	@ (800bb7c <prvProcessTimerOrBlockTask+0x94>)
 800bb3e:	6818      	ldr	r0, [r3, #0]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	1ad3      	subs	r3, r2, r3
 800bb46:	683a      	ldr	r2, [r7, #0]
 800bb48:	4619      	mov	r1, r3
 800bb4a:	f7fe fcdd 	bl	800a508 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb4e:	f7fe ff8f 	bl	800aa70 <xTaskResumeAll>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10a      	bne.n	800bb6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb58:	4b09      	ldr	r3, [pc, #36]	@ (800bb80 <prvProcessTimerOrBlockTask+0x98>)
 800bb5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb5e:	601a      	str	r2, [r3, #0]
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	f3bf 8f6f 	isb	sy
}
 800bb68:	e001      	b.n	800bb6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb6a:	f7fe ff81 	bl	800aa70 <xTaskResumeAll>
}
 800bb6e:	bf00      	nop
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	2000b21c 	.word	0x2000b21c
 800bb7c:	2000b220 	.word	0x2000b220
 800bb80:	e000ed04 	.word	0xe000ed04

0800bb84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb8c:	4b0e      	ldr	r3, [pc, #56]	@ (800bbc8 <prvGetNextExpireTime+0x44>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d101      	bne.n	800bb9a <prvGetNextExpireTime+0x16>
 800bb96:	2201      	movs	r2, #1
 800bb98:	e000      	b.n	800bb9c <prvGetNextExpireTime+0x18>
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d105      	bne.n	800bbb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bba8:	4b07      	ldr	r3, [pc, #28]	@ (800bbc8 <prvGetNextExpireTime+0x44>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	60fb      	str	r3, [r7, #12]
 800bbb2:	e001      	b.n	800bbb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3714      	adds	r7, #20
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	2000b218 	.word	0x2000b218

0800bbcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bbd4:	f7fe ffec 	bl	800abb0 <xTaskGetTickCount>
 800bbd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bbda:	4b0b      	ldr	r3, [pc, #44]	@ (800bc08 <prvSampleTimeNow+0x3c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d205      	bcs.n	800bbf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bbe4:	f000 f940 	bl	800be68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	601a      	str	r2, [r3, #0]
 800bbee:	e002      	b.n	800bbf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bbf6:	4a04      	ldr	r2, [pc, #16]	@ (800bc08 <prvSampleTimeNow+0x3c>)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	2000b228 	.word	0x2000b228

0800bc0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b086      	sub	sp, #24
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
 800bc18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d812      	bhi.n	800bc58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	1ad2      	subs	r2, r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	699b      	ldr	r3, [r3, #24]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d302      	bcc.n	800bc46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc40:	2301      	movs	r3, #1
 800bc42:	617b      	str	r3, [r7, #20]
 800bc44:	e01b      	b.n	800bc7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc46:	4b10      	ldr	r3, [pc, #64]	@ (800bc88 <prvInsertTimerInActiveList+0x7c>)
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	4619      	mov	r1, r3
 800bc50:	4610      	mov	r0, r2
 800bc52:	f7fd fafa 	bl	800924a <vListInsert>
 800bc56:	e012      	b.n	800bc7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d206      	bcs.n	800bc6e <prvInsertTimerInActiveList+0x62>
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d302      	bcc.n	800bc6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	617b      	str	r3, [r7, #20]
 800bc6c:	e007      	b.n	800bc7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc6e:	4b07      	ldr	r3, [pc, #28]	@ (800bc8c <prvInsertTimerInActiveList+0x80>)
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	3304      	adds	r3, #4
 800bc76:	4619      	mov	r1, r3
 800bc78:	4610      	mov	r0, r2
 800bc7a:	f7fd fae6 	bl	800924a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bc7e:	697b      	ldr	r3, [r7, #20]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3718      	adds	r7, #24
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	2000b21c 	.word	0x2000b21c
 800bc8c:	2000b218 	.word	0x2000b218

0800bc90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b08e      	sub	sp, #56	@ 0x38
 800bc94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc96:	e0d4      	b.n	800be42 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	da1b      	bge.n	800bcd6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc9e:	1d3b      	adds	r3, r7, #4
 800bca0:	3304      	adds	r3, #4
 800bca2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10d      	bne.n	800bcc6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800bcaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcae:	b672      	cpsid	i
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	b662      	cpsie	i
 800bcbe:	61fb      	str	r3, [r7, #28]
}
 800bcc0:	bf00      	nop
 800bcc2:	bf00      	nop
 800bcc4:	e7fd      	b.n	800bcc2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bccc:	6850      	ldr	r0, [r2, #4]
 800bcce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcd0:	6892      	ldr	r2, [r2, #8]
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f2c0 80b2 	blt.w	800be42 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce4:	695b      	ldr	r3, [r3, #20]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d004      	beq.n	800bcf4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcec:	3304      	adds	r3, #4
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7fd fae4 	bl	80092bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcf4:	463b      	mov	r3, r7
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff ff68 	bl	800bbcc <prvSampleTimeNow>
 800bcfc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b09      	cmp	r3, #9
 800bd02:	f200 809b 	bhi.w	800be3c <prvProcessReceivedCommands+0x1ac>
 800bd06:	a201      	add	r2, pc, #4	@ (adr r2, 800bd0c <prvProcessReceivedCommands+0x7c>)
 800bd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd0c:	0800bd35 	.word	0x0800bd35
 800bd10:	0800bd35 	.word	0x0800bd35
 800bd14:	0800bd35 	.word	0x0800bd35
 800bd18:	0800bdaf 	.word	0x0800bdaf
 800bd1c:	0800bdc3 	.word	0x0800bdc3
 800bd20:	0800be13 	.word	0x0800be13
 800bd24:	0800bd35 	.word	0x0800bd35
 800bd28:	0800bd35 	.word	0x0800bd35
 800bd2c:	0800bdaf 	.word	0x0800bdaf
 800bd30:	0800bdc3 	.word	0x0800bdc3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd3a:	f043 0301 	orr.w	r3, r3, #1
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd4a:	699b      	ldr	r3, [r3, #24]
 800bd4c:	18d1      	adds	r1, r2, r3
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd54:	f7ff ff5a 	bl	800bc0c <prvInsertTimerInActiveList>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d070      	beq.n	800be40 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd60:	6a1b      	ldr	r3, [r3, #32]
 800bd62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd6c:	f003 0304 	and.w	r3, r3, #4
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d065      	beq.n	800be40 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd78:	699b      	ldr	r3, [r3, #24]
 800bd7a:	441a      	add	r2, r3
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	2300      	movs	r3, #0
 800bd82:	2100      	movs	r1, #0
 800bd84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd86:	f7ff fdfb 	bl	800b980 <xTimerGenericCommand>
 800bd8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bd8c:	6a3b      	ldr	r3, [r7, #32]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d156      	bne.n	800be40 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800bd92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd96:	b672      	cpsid	i
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	b662      	cpsie	i
 800bda6:	61bb      	str	r3, [r7, #24]
}
 800bda8:	bf00      	nop
 800bdaa:	bf00      	nop
 800bdac:	e7fd      	b.n	800bdaa <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdb4:	f023 0301 	bic.w	r3, r3, #1
 800bdb8:	b2da      	uxtb	r2, r3
 800bdba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bdc0:	e03f      	b.n	800be42 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bdc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdc8:	f043 0301 	orr.w	r3, r3, #1
 800bdcc:	b2da      	uxtb	r2, r3
 800bdce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdd8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bdda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bddc:	699b      	ldr	r3, [r3, #24]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10d      	bne.n	800bdfe <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde6:	b672      	cpsid	i
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	b662      	cpsie	i
 800bdf6:	617b      	str	r3, [r7, #20]
}
 800bdf8:	bf00      	nop
 800bdfa:	bf00      	nop
 800bdfc:	e7fd      	b.n	800bdfa <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bdfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be00:	699a      	ldr	r2, [r3, #24]
 800be02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be04:	18d1      	adds	r1, r2, r3
 800be06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be0c:	f7ff fefe 	bl	800bc0c <prvInsertTimerInActiveList>
					break;
 800be10:	e017      	b.n	800be42 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800be12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be18:	f003 0302 	and.w	r3, r3, #2
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d103      	bne.n	800be28 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800be20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be22:	f000 fbd7 	bl	800c5d4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be26:	e00c      	b.n	800be42 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be2e:	f023 0301 	bic.w	r3, r3, #1
 800be32:	b2da      	uxtb	r2, r3
 800be34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800be3a:	e002      	b.n	800be42 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800be3c:	bf00      	nop
 800be3e:	e000      	b.n	800be42 <prvProcessReceivedCommands+0x1b2>
					break;
 800be40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be42:	4b08      	ldr	r3, [pc, #32]	@ (800be64 <prvProcessReceivedCommands+0x1d4>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	1d39      	adds	r1, r7, #4
 800be48:	2200      	movs	r2, #0
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7fd ff32 	bl	8009cb4 <xQueueReceive>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	f47f af20 	bne.w	800bc98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800be58:	bf00      	nop
 800be5a:	bf00      	nop
 800be5c:	3730      	adds	r7, #48	@ 0x30
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	2000b220 	.word	0x2000b220

0800be68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b088      	sub	sp, #32
 800be6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be6e:	e04b      	b.n	800bf08 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be70:	4b2f      	ldr	r3, [pc, #188]	@ (800bf30 <prvSwitchTimerLists+0xc8>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be7a:	4b2d      	ldr	r3, [pc, #180]	@ (800bf30 <prvSwitchTimerLists+0xc8>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	3304      	adds	r3, #4
 800be88:	4618      	mov	r0, r3
 800be8a:	f7fd fa17 	bl	80092bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6a1b      	ldr	r3, [r3, #32]
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be9c:	f003 0304 	and.w	r3, r3, #4
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d031      	beq.n	800bf08 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	699b      	ldr	r3, [r3, #24]
 800bea8:	693a      	ldr	r2, [r7, #16]
 800beaa:	4413      	add	r3, r2
 800beac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d90e      	bls.n	800bed4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	68ba      	ldr	r2, [r7, #8]
 800beba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bec2:	4b1b      	ldr	r3, [pc, #108]	@ (800bf30 <prvSwitchTimerLists+0xc8>)
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	3304      	adds	r3, #4
 800beca:	4619      	mov	r1, r3
 800becc:	4610      	mov	r0, r2
 800bece:	f7fd f9bc 	bl	800924a <vListInsert>
 800bed2:	e019      	b.n	800bf08 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bed4:	2300      	movs	r3, #0
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	2300      	movs	r3, #0
 800beda:	693a      	ldr	r2, [r7, #16]
 800bedc:	2100      	movs	r1, #0
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f7ff fd4e 	bl	800b980 <xTimerGenericCommand>
 800bee4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d10d      	bne.n	800bf08 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800beec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef0:	b672      	cpsid	i
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	b662      	cpsie	i
 800bf00:	603b      	str	r3, [r7, #0]
}
 800bf02:	bf00      	nop
 800bf04:	bf00      	nop
 800bf06:	e7fd      	b.n	800bf04 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf08:	4b09      	ldr	r3, [pc, #36]	@ (800bf30 <prvSwitchTimerLists+0xc8>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d1ae      	bne.n	800be70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bf12:	4b07      	ldr	r3, [pc, #28]	@ (800bf30 <prvSwitchTimerLists+0xc8>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bf18:	4b06      	ldr	r3, [pc, #24]	@ (800bf34 <prvSwitchTimerLists+0xcc>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a04      	ldr	r2, [pc, #16]	@ (800bf30 <prvSwitchTimerLists+0xc8>)
 800bf1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bf20:	4a04      	ldr	r2, [pc, #16]	@ (800bf34 <prvSwitchTimerLists+0xcc>)
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	6013      	str	r3, [r2, #0]
}
 800bf26:	bf00      	nop
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	2000b218 	.word	0x2000b218
 800bf34:	2000b21c 	.word	0x2000b21c

0800bf38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf3e:	f000 f94d 	bl	800c1dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf42:	4b15      	ldr	r3, [pc, #84]	@ (800bf98 <prvCheckForValidListAndQueue+0x60>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d120      	bne.n	800bf8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf4a:	4814      	ldr	r0, [pc, #80]	@ (800bf9c <prvCheckForValidListAndQueue+0x64>)
 800bf4c:	f7fd f92c 	bl	80091a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf50:	4813      	ldr	r0, [pc, #76]	@ (800bfa0 <prvCheckForValidListAndQueue+0x68>)
 800bf52:	f7fd f929 	bl	80091a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf56:	4b13      	ldr	r3, [pc, #76]	@ (800bfa4 <prvCheckForValidListAndQueue+0x6c>)
 800bf58:	4a10      	ldr	r2, [pc, #64]	@ (800bf9c <prvCheckForValidListAndQueue+0x64>)
 800bf5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf5c:	4b12      	ldr	r3, [pc, #72]	@ (800bfa8 <prvCheckForValidListAndQueue+0x70>)
 800bf5e:	4a10      	ldr	r2, [pc, #64]	@ (800bfa0 <prvCheckForValidListAndQueue+0x68>)
 800bf60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf62:	2300      	movs	r3, #0
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	4b11      	ldr	r3, [pc, #68]	@ (800bfac <prvCheckForValidListAndQueue+0x74>)
 800bf68:	4a11      	ldr	r2, [pc, #68]	@ (800bfb0 <prvCheckForValidListAndQueue+0x78>)
 800bf6a:	2110      	movs	r1, #16
 800bf6c:	200a      	movs	r0, #10
 800bf6e:	f7fd fa3b 	bl	80093e8 <xQueueGenericCreateStatic>
 800bf72:	4603      	mov	r3, r0
 800bf74:	4a08      	ldr	r2, [pc, #32]	@ (800bf98 <prvCheckForValidListAndQueue+0x60>)
 800bf76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf78:	4b07      	ldr	r3, [pc, #28]	@ (800bf98 <prvCheckForValidListAndQueue+0x60>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d005      	beq.n	800bf8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf80:	4b05      	ldr	r3, [pc, #20]	@ (800bf98 <prvCheckForValidListAndQueue+0x60>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	490b      	ldr	r1, [pc, #44]	@ (800bfb4 <prvCheckForValidListAndQueue+0x7c>)
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7fe fa6a 	bl	800a460 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf8c:	f000 f95c 	bl	800c248 <vPortExitCritical>
}
 800bf90:	bf00      	nop
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	2000b220 	.word	0x2000b220
 800bf9c:	2000b1f0 	.word	0x2000b1f0
 800bfa0:	2000b204 	.word	0x2000b204
 800bfa4:	2000b218 	.word	0x2000b218
 800bfa8:	2000b21c 	.word	0x2000b21c
 800bfac:	2000b2cc 	.word	0x2000b2cc
 800bfb0:	2000b22c 	.word	0x2000b22c
 800bfb4:	0801864c 	.word	0x0801864c

0800bfb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	3b04      	subs	r3, #4
 800bfc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bfd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	3b04      	subs	r3, #4
 800bfd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	f023 0201 	bic.w	r2, r3, #1
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	3b04      	subs	r3, #4
 800bfe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bfe8:	4a0c      	ldr	r2, [pc, #48]	@ (800c01c <pxPortInitialiseStack+0x64>)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	3b14      	subs	r3, #20
 800bff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3b04      	subs	r3, #4
 800bffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f06f 0202 	mvn.w	r2, #2
 800c006:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	3b20      	subs	r3, #32
 800c00c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c00e:	68fb      	ldr	r3, [r7, #12]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3714      	adds	r7, #20
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr
 800c01c:	0800c021 	.word	0x0800c021

0800c020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c026:	2300      	movs	r3, #0
 800c028:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c02a:	4b15      	ldr	r3, [pc, #84]	@ (800c080 <prvTaskExitError+0x60>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c032:	d00d      	beq.n	800c050 <prvTaskExitError+0x30>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c038:	b672      	cpsid	i
 800c03a:	f383 8811 	msr	BASEPRI, r3
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f3bf 8f4f 	dsb	sy
 800c046:	b662      	cpsie	i
 800c048:	60fb      	str	r3, [r7, #12]
}
 800c04a:	bf00      	nop
 800c04c:	bf00      	nop
 800c04e:	e7fd      	b.n	800c04c <prvTaskExitError+0x2c>
	__asm volatile
 800c050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c054:	b672      	cpsid	i
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	b662      	cpsie	i
 800c064:	60bb      	str	r3, [r7, #8]
}
 800c066:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c068:	bf00      	nop
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d0fc      	beq.n	800c06a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c070:	bf00      	nop
 800c072:	bf00      	nop
 800c074:	3714      	adds	r7, #20
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	20000020 	.word	0x20000020
	...

0800c090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c090:	4b07      	ldr	r3, [pc, #28]	@ (800c0b0 <pxCurrentTCBConst2>)
 800c092:	6819      	ldr	r1, [r3, #0]
 800c094:	6808      	ldr	r0, [r1, #0]
 800c096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09a:	f380 8809 	msr	PSP, r0
 800c09e:	f3bf 8f6f 	isb	sy
 800c0a2:	f04f 0000 	mov.w	r0, #0
 800c0a6:	f380 8811 	msr	BASEPRI, r0
 800c0aa:	4770      	bx	lr
 800c0ac:	f3af 8000 	nop.w

0800c0b0 <pxCurrentTCBConst2>:
 800c0b0:	2000acf0 	.word	0x2000acf0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c0b4:	bf00      	nop
 800c0b6:	bf00      	nop

0800c0b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c0b8:	4808      	ldr	r0, [pc, #32]	@ (800c0dc <prvPortStartFirstTask+0x24>)
 800c0ba:	6800      	ldr	r0, [r0, #0]
 800c0bc:	6800      	ldr	r0, [r0, #0]
 800c0be:	f380 8808 	msr	MSP, r0
 800c0c2:	f04f 0000 	mov.w	r0, #0
 800c0c6:	f380 8814 	msr	CONTROL, r0
 800c0ca:	b662      	cpsie	i
 800c0cc:	b661      	cpsie	f
 800c0ce:	f3bf 8f4f 	dsb	sy
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	df00      	svc	0
 800c0d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c0da:	bf00      	nop
 800c0dc:	e000ed08 	.word	0xe000ed08

0800c0e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c0e6:	4b37      	ldr	r3, [pc, #220]	@ (800c1c4 <xPortStartScheduler+0xe4>)
 800c0e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	22ff      	movs	r2, #255	@ 0xff
 800c0f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c100:	78fb      	ldrb	r3, [r7, #3]
 800c102:	b2db      	uxtb	r3, r3
 800c104:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c108:	b2da      	uxtb	r2, r3
 800c10a:	4b2f      	ldr	r3, [pc, #188]	@ (800c1c8 <xPortStartScheduler+0xe8>)
 800c10c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c10e:	4b2f      	ldr	r3, [pc, #188]	@ (800c1cc <xPortStartScheduler+0xec>)
 800c110:	2207      	movs	r2, #7
 800c112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c114:	e009      	b.n	800c12a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c116:	4b2d      	ldr	r3, [pc, #180]	@ (800c1cc <xPortStartScheduler+0xec>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	3b01      	subs	r3, #1
 800c11c:	4a2b      	ldr	r2, [pc, #172]	@ (800c1cc <xPortStartScheduler+0xec>)
 800c11e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c120:	78fb      	ldrb	r3, [r7, #3]
 800c122:	b2db      	uxtb	r3, r3
 800c124:	005b      	lsls	r3, r3, #1
 800c126:	b2db      	uxtb	r3, r3
 800c128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c12a:	78fb      	ldrb	r3, [r7, #3]
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c132:	2b80      	cmp	r3, #128	@ 0x80
 800c134:	d0ef      	beq.n	800c116 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c136:	4b25      	ldr	r3, [pc, #148]	@ (800c1cc <xPortStartScheduler+0xec>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f1c3 0307 	rsb	r3, r3, #7
 800c13e:	2b04      	cmp	r3, #4
 800c140:	d00d      	beq.n	800c15e <xPortStartScheduler+0x7e>
	__asm volatile
 800c142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c146:	b672      	cpsid	i
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	b662      	cpsie	i
 800c156:	60bb      	str	r3, [r7, #8]
}
 800c158:	bf00      	nop
 800c15a:	bf00      	nop
 800c15c:	e7fd      	b.n	800c15a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c15e:	4b1b      	ldr	r3, [pc, #108]	@ (800c1cc <xPortStartScheduler+0xec>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	021b      	lsls	r3, r3, #8
 800c164:	4a19      	ldr	r2, [pc, #100]	@ (800c1cc <xPortStartScheduler+0xec>)
 800c166:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c168:	4b18      	ldr	r3, [pc, #96]	@ (800c1cc <xPortStartScheduler+0xec>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c170:	4a16      	ldr	r2, [pc, #88]	@ (800c1cc <xPortStartScheduler+0xec>)
 800c172:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	b2da      	uxtb	r2, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c17c:	4b14      	ldr	r3, [pc, #80]	@ (800c1d0 <xPortStartScheduler+0xf0>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a13      	ldr	r2, [pc, #76]	@ (800c1d0 <xPortStartScheduler+0xf0>)
 800c182:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c186:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c188:	4b11      	ldr	r3, [pc, #68]	@ (800c1d0 <xPortStartScheduler+0xf0>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a10      	ldr	r2, [pc, #64]	@ (800c1d0 <xPortStartScheduler+0xf0>)
 800c18e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c192:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c194:	f000 f8dc 	bl	800c350 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c198:	4b0e      	ldr	r3, [pc, #56]	@ (800c1d4 <xPortStartScheduler+0xf4>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c19e:	f000 f8fb 	bl	800c398 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c1d8 <xPortStartScheduler+0xf8>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a0c      	ldr	r2, [pc, #48]	@ (800c1d8 <xPortStartScheduler+0xf8>)
 800c1a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c1ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c1ae:	f7ff ff83 	bl	800c0b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c1b2:	f7fe fddb 	bl	800ad6c <vTaskSwitchContext>
	prvTaskExitError();
 800c1b6:	f7ff ff33 	bl	800c020 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c1ba:	2300      	movs	r3, #0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	e000e400 	.word	0xe000e400
 800c1c8:	2000b31c 	.word	0x2000b31c
 800c1cc:	2000b320 	.word	0x2000b320
 800c1d0:	e000ed20 	.word	0xe000ed20
 800c1d4:	20000020 	.word	0x20000020
 800c1d8:	e000ef34 	.word	0xe000ef34

0800c1dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
	__asm volatile
 800c1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e6:	b672      	cpsid	i
 800c1e8:	f383 8811 	msr	BASEPRI, r3
 800c1ec:	f3bf 8f6f 	isb	sy
 800c1f0:	f3bf 8f4f 	dsb	sy
 800c1f4:	b662      	cpsie	i
 800c1f6:	607b      	str	r3, [r7, #4]
}
 800c1f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c1fa:	4b11      	ldr	r3, [pc, #68]	@ (800c240 <vPortEnterCritical+0x64>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	3301      	adds	r3, #1
 800c200:	4a0f      	ldr	r2, [pc, #60]	@ (800c240 <vPortEnterCritical+0x64>)
 800c202:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c204:	4b0e      	ldr	r3, [pc, #56]	@ (800c240 <vPortEnterCritical+0x64>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d112      	bne.n	800c232 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c20c:	4b0d      	ldr	r3, [pc, #52]	@ (800c244 <vPortEnterCritical+0x68>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	b2db      	uxtb	r3, r3
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00d      	beq.n	800c232 <vPortEnterCritical+0x56>
	__asm volatile
 800c216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21a:	b672      	cpsid	i
 800c21c:	f383 8811 	msr	BASEPRI, r3
 800c220:	f3bf 8f6f 	isb	sy
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	b662      	cpsie	i
 800c22a:	603b      	str	r3, [r7, #0]
}
 800c22c:	bf00      	nop
 800c22e:	bf00      	nop
 800c230:	e7fd      	b.n	800c22e <vPortEnterCritical+0x52>
	}
}
 800c232:	bf00      	nop
 800c234:	370c      	adds	r7, #12
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	20000020 	.word	0x20000020
 800c244:	e000ed04 	.word	0xe000ed04

0800c248 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c24e:	4b13      	ldr	r3, [pc, #76]	@ (800c29c <vPortExitCritical+0x54>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d10d      	bne.n	800c272 <vPortExitCritical+0x2a>
	__asm volatile
 800c256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c25a:	b672      	cpsid	i
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	b662      	cpsie	i
 800c26a:	607b      	str	r3, [r7, #4]
}
 800c26c:	bf00      	nop
 800c26e:	bf00      	nop
 800c270:	e7fd      	b.n	800c26e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c272:	4b0a      	ldr	r3, [pc, #40]	@ (800c29c <vPortExitCritical+0x54>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3b01      	subs	r3, #1
 800c278:	4a08      	ldr	r2, [pc, #32]	@ (800c29c <vPortExitCritical+0x54>)
 800c27a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c27c:	4b07      	ldr	r3, [pc, #28]	@ (800c29c <vPortExitCritical+0x54>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d105      	bne.n	800c290 <vPortExitCritical+0x48>
 800c284:	2300      	movs	r3, #0
 800c286:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	f383 8811 	msr	BASEPRI, r3
}
 800c28e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	20000020 	.word	0x20000020

0800c2a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c2a0:	f3ef 8009 	mrs	r0, PSP
 800c2a4:	f3bf 8f6f 	isb	sy
 800c2a8:	4b15      	ldr	r3, [pc, #84]	@ (800c300 <pxCurrentTCBConst>)
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	f01e 0f10 	tst.w	lr, #16
 800c2b0:	bf08      	it	eq
 800c2b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c2b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ba:	6010      	str	r0, [r2, #0]
 800c2bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c2c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c2c4:	b672      	cpsid	i
 800c2c6:	f380 8811 	msr	BASEPRI, r0
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	b662      	cpsie	i
 800c2d4:	f7fe fd4a 	bl	800ad6c <vTaskSwitchContext>
 800c2d8:	f04f 0000 	mov.w	r0, #0
 800c2dc:	f380 8811 	msr	BASEPRI, r0
 800c2e0:	bc09      	pop	{r0, r3}
 800c2e2:	6819      	ldr	r1, [r3, #0]
 800c2e4:	6808      	ldr	r0, [r1, #0]
 800c2e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ea:	f01e 0f10 	tst.w	lr, #16
 800c2ee:	bf08      	it	eq
 800c2f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c2f4:	f380 8809 	msr	PSP, r0
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop

0800c300 <pxCurrentTCBConst>:
 800c300:	2000acf0 	.word	0x2000acf0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c304:	bf00      	nop
 800c306:	bf00      	nop

0800c308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
	__asm volatile
 800c30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c312:	b672      	cpsid	i
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	b662      	cpsie	i
 800c322:	607b      	str	r3, [r7, #4]
}
 800c324:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c326:	f7fe fc65 	bl	800abf4 <xTaskIncrementTick>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d003      	beq.n	800c338 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c330:	4b06      	ldr	r3, [pc, #24]	@ (800c34c <SysTick_Handler+0x44>)
 800c332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c336:	601a      	str	r2, [r3, #0]
 800c338:	2300      	movs	r3, #0
 800c33a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	f383 8811 	msr	BASEPRI, r3
}
 800c342:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c344:	bf00      	nop
 800c346:	3708      	adds	r7, #8
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	e000ed04 	.word	0xe000ed04

0800c350 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c350:	b480      	push	{r7}
 800c352:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c354:	4b0b      	ldr	r3, [pc, #44]	@ (800c384 <vPortSetupTimerInterrupt+0x34>)
 800c356:	2200      	movs	r2, #0
 800c358:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c35a:	4b0b      	ldr	r3, [pc, #44]	@ (800c388 <vPortSetupTimerInterrupt+0x38>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c360:	4b0a      	ldr	r3, [pc, #40]	@ (800c38c <vPortSetupTimerInterrupt+0x3c>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a0a      	ldr	r2, [pc, #40]	@ (800c390 <vPortSetupTimerInterrupt+0x40>)
 800c366:	fba2 2303 	umull	r2, r3, r2, r3
 800c36a:	099b      	lsrs	r3, r3, #6
 800c36c:	4a09      	ldr	r2, [pc, #36]	@ (800c394 <vPortSetupTimerInterrupt+0x44>)
 800c36e:	3b01      	subs	r3, #1
 800c370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c372:	4b04      	ldr	r3, [pc, #16]	@ (800c384 <vPortSetupTimerInterrupt+0x34>)
 800c374:	2207      	movs	r2, #7
 800c376:	601a      	str	r2, [r3, #0]
}
 800c378:	bf00      	nop
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	e000e010 	.word	0xe000e010
 800c388:	e000e018 	.word	0xe000e018
 800c38c:	20000000 	.word	0x20000000
 800c390:	10624dd3 	.word	0x10624dd3
 800c394:	e000e014 	.word	0xe000e014

0800c398 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c398:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c3a8 <vPortEnableVFP+0x10>
 800c39c:	6801      	ldr	r1, [r0, #0]
 800c39e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c3a2:	6001      	str	r1, [r0, #0]
 800c3a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c3a6:	bf00      	nop
 800c3a8:	e000ed88 	.word	0xe000ed88

0800c3ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c3b2:	f3ef 8305 	mrs	r3, IPSR
 800c3b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2b0f      	cmp	r3, #15
 800c3bc:	d917      	bls.n	800c3ee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c3be:	4a1a      	ldr	r2, [pc, #104]	@ (800c428 <vPortValidateInterruptPriority+0x7c>)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c3c8:	4b18      	ldr	r3, [pc, #96]	@ (800c42c <vPortValidateInterruptPriority+0x80>)
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	7afa      	ldrb	r2, [r7, #11]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d20d      	bcs.n	800c3ee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800c3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d6:	b672      	cpsid	i
 800c3d8:	f383 8811 	msr	BASEPRI, r3
 800c3dc:	f3bf 8f6f 	isb	sy
 800c3e0:	f3bf 8f4f 	dsb	sy
 800c3e4:	b662      	cpsie	i
 800c3e6:	607b      	str	r3, [r7, #4]
}
 800c3e8:	bf00      	nop
 800c3ea:	bf00      	nop
 800c3ec:	e7fd      	b.n	800c3ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c3ee:	4b10      	ldr	r3, [pc, #64]	@ (800c430 <vPortValidateInterruptPriority+0x84>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c3f6:	4b0f      	ldr	r3, [pc, #60]	@ (800c434 <vPortValidateInterruptPriority+0x88>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d90d      	bls.n	800c41a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c402:	b672      	cpsid	i
 800c404:	f383 8811 	msr	BASEPRI, r3
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	f3bf 8f4f 	dsb	sy
 800c410:	b662      	cpsie	i
 800c412:	603b      	str	r3, [r7, #0]
}
 800c414:	bf00      	nop
 800c416:	bf00      	nop
 800c418:	e7fd      	b.n	800c416 <vPortValidateInterruptPriority+0x6a>
	}
 800c41a:	bf00      	nop
 800c41c:	3714      	adds	r7, #20
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	e000e3f0 	.word	0xe000e3f0
 800c42c:	2000b31c 	.word	0x2000b31c
 800c430:	e000ed0c 	.word	0xe000ed0c
 800c434:	2000b320 	.word	0x2000b320

0800c438 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b08a      	sub	sp, #40	@ 0x28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c440:	2300      	movs	r3, #0
 800c442:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c444:	f7fe fb06 	bl	800aa54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c448:	4b5d      	ldr	r3, [pc, #372]	@ (800c5c0 <pvPortMalloc+0x188>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d101      	bne.n	800c454 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c450:	f000 f920 	bl	800c694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c454:	4b5b      	ldr	r3, [pc, #364]	@ (800c5c4 <pvPortMalloc+0x18c>)
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4013      	ands	r3, r2
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f040 8094 	bne.w	800c58a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d020      	beq.n	800c4aa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800c468:	2208      	movs	r2, #8
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4413      	add	r3, r2
 800c46e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f003 0307 	and.w	r3, r3, #7
 800c476:	2b00      	cmp	r3, #0
 800c478:	d017      	beq.n	800c4aa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f023 0307 	bic.w	r3, r3, #7
 800c480:	3308      	adds	r3, #8
 800c482:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f003 0307 	and.w	r3, r3, #7
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00d      	beq.n	800c4aa <pvPortMalloc+0x72>
	__asm volatile
 800c48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c492:	b672      	cpsid	i
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	b662      	cpsie	i
 800c4a2:	617b      	str	r3, [r7, #20]
}
 800c4a4:	bf00      	nop
 800c4a6:	bf00      	nop
 800c4a8:	e7fd      	b.n	800c4a6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d06c      	beq.n	800c58a <pvPortMalloc+0x152>
 800c4b0:	4b45      	ldr	r3, [pc, #276]	@ (800c5c8 <pvPortMalloc+0x190>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d867      	bhi.n	800c58a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c4ba:	4b44      	ldr	r3, [pc, #272]	@ (800c5cc <pvPortMalloc+0x194>)
 800c4bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c4be:	4b43      	ldr	r3, [pc, #268]	@ (800c5cc <pvPortMalloc+0x194>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4c4:	e004      	b.n	800c4d0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d903      	bls.n	800c4e2 <pvPortMalloc+0xaa>
 800c4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1f1      	bne.n	800c4c6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c4e2:	4b37      	ldr	r3, [pc, #220]	@ (800c5c0 <pvPortMalloc+0x188>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d04e      	beq.n	800c58a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c4ec:	6a3b      	ldr	r3, [r7, #32]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2208      	movs	r2, #8
 800c4f2:	4413      	add	r3, r2
 800c4f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	6a3b      	ldr	r3, [r7, #32]
 800c4fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	1ad2      	subs	r2, r2, r3
 800c506:	2308      	movs	r3, #8
 800c508:	005b      	lsls	r3, r3, #1
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d922      	bls.n	800c554 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c50e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4413      	add	r3, r2
 800c514:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	f003 0307 	and.w	r3, r3, #7
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00d      	beq.n	800c53c <pvPortMalloc+0x104>
	__asm volatile
 800c520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c524:	b672      	cpsid	i
 800c526:	f383 8811 	msr	BASEPRI, r3
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	b662      	cpsie	i
 800c534:	613b      	str	r3, [r7, #16]
}
 800c536:	bf00      	nop
 800c538:	bf00      	nop
 800c53a:	e7fd      	b.n	800c538 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	1ad2      	subs	r2, r2, r3
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c54e:	69b8      	ldr	r0, [r7, #24]
 800c550:	f000 f902 	bl	800c758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c554:	4b1c      	ldr	r3, [pc, #112]	@ (800c5c8 <pvPortMalloc+0x190>)
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	1ad3      	subs	r3, r2, r3
 800c55e:	4a1a      	ldr	r2, [pc, #104]	@ (800c5c8 <pvPortMalloc+0x190>)
 800c560:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c562:	4b19      	ldr	r3, [pc, #100]	@ (800c5c8 <pvPortMalloc+0x190>)
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	4b1a      	ldr	r3, [pc, #104]	@ (800c5d0 <pvPortMalloc+0x198>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d203      	bcs.n	800c576 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c56e:	4b16      	ldr	r3, [pc, #88]	@ (800c5c8 <pvPortMalloc+0x190>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a17      	ldr	r2, [pc, #92]	@ (800c5d0 <pvPortMalloc+0x198>)
 800c574:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c578:	685a      	ldr	r2, [r3, #4]
 800c57a:	4b12      	ldr	r3, [pc, #72]	@ (800c5c4 <pvPortMalloc+0x18c>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	431a      	orrs	r2, r3
 800c580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c582:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c586:	2200      	movs	r2, #0
 800c588:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c58a:	f7fe fa71 	bl	800aa70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	f003 0307 	and.w	r3, r3, #7
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00d      	beq.n	800c5b4 <pvPortMalloc+0x17c>
	__asm volatile
 800c598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c59c:	b672      	cpsid	i
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	b662      	cpsie	i
 800c5ac:	60fb      	str	r3, [r7, #12]
}
 800c5ae:	bf00      	nop
 800c5b0:	bf00      	nop
 800c5b2:	e7fd      	b.n	800c5b0 <pvPortMalloc+0x178>
	return pvReturn;
 800c5b4:	69fb      	ldr	r3, [r7, #28]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3728      	adds	r7, #40	@ 0x28
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	2002432c 	.word	0x2002432c
 800c5c4:	20024338 	.word	0x20024338
 800c5c8:	20024330 	.word	0x20024330
 800c5cc:	20024324 	.word	0x20024324
 800c5d0:	20024334 	.word	0x20024334

0800c5d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d04e      	beq.n	800c684 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c5e6:	2308      	movs	r3, #8
 800c5e8:	425b      	negs	r3, r3
 800c5ea:	697a      	ldr	r2, [r7, #20]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	685a      	ldr	r2, [r3, #4]
 800c5f8:	4b24      	ldr	r3, [pc, #144]	@ (800c68c <vPortFree+0xb8>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4013      	ands	r3, r2
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10d      	bne.n	800c61e <vPortFree+0x4a>
	__asm volatile
 800c602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c606:	b672      	cpsid	i
 800c608:	f383 8811 	msr	BASEPRI, r3
 800c60c:	f3bf 8f6f 	isb	sy
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	b662      	cpsie	i
 800c616:	60fb      	str	r3, [r7, #12]
}
 800c618:	bf00      	nop
 800c61a:	bf00      	nop
 800c61c:	e7fd      	b.n	800c61a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00d      	beq.n	800c642 <vPortFree+0x6e>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c62a:	b672      	cpsid	i
 800c62c:	f383 8811 	msr	BASEPRI, r3
 800c630:	f3bf 8f6f 	isb	sy
 800c634:	f3bf 8f4f 	dsb	sy
 800c638:	b662      	cpsie	i
 800c63a:	60bb      	str	r3, [r7, #8]
}
 800c63c:	bf00      	nop
 800c63e:	bf00      	nop
 800c640:	e7fd      	b.n	800c63e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	685a      	ldr	r2, [r3, #4]
 800c646:	4b11      	ldr	r3, [pc, #68]	@ (800c68c <vPortFree+0xb8>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4013      	ands	r3, r2
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d019      	beq.n	800c684 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d115      	bne.n	800c684 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	4b0b      	ldr	r3, [pc, #44]	@ (800c68c <vPortFree+0xb8>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	43db      	mvns	r3, r3
 800c662:	401a      	ands	r2, r3
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c668:	f7fe f9f4 	bl	800aa54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	685a      	ldr	r2, [r3, #4]
 800c670:	4b07      	ldr	r3, [pc, #28]	@ (800c690 <vPortFree+0xbc>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4413      	add	r3, r2
 800c676:	4a06      	ldr	r2, [pc, #24]	@ (800c690 <vPortFree+0xbc>)
 800c678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c67a:	6938      	ldr	r0, [r7, #16]
 800c67c:	f000 f86c 	bl	800c758 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c680:	f7fe f9f6 	bl	800aa70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c684:	bf00      	nop
 800c686:	3718      	adds	r7, #24
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	20024338 	.word	0x20024338
 800c690:	20024330 	.word	0x20024330

0800c694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c69a:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 800c69e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c6a0:	4b27      	ldr	r3, [pc, #156]	@ (800c740 <prvHeapInit+0xac>)
 800c6a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f003 0307 	and.w	r3, r3, #7
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00c      	beq.n	800c6c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3307      	adds	r3, #7
 800c6b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f023 0307 	bic.w	r3, r3, #7
 800c6ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c6bc:	68ba      	ldr	r2, [r7, #8]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	4a1f      	ldr	r2, [pc, #124]	@ (800c740 <prvHeapInit+0xac>)
 800c6c4:	4413      	add	r3, r2
 800c6c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c6cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c744 <prvHeapInit+0xb0>)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c6d2:	4b1c      	ldr	r3, [pc, #112]	@ (800c744 <prvHeapInit+0xb0>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	68ba      	ldr	r2, [r7, #8]
 800c6dc:	4413      	add	r3, r2
 800c6de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c6e0:	2208      	movs	r2, #8
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	1a9b      	subs	r3, r3, r2
 800c6e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f023 0307 	bic.w	r3, r3, #7
 800c6ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	4a15      	ldr	r2, [pc, #84]	@ (800c748 <prvHeapInit+0xb4>)
 800c6f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c6f6:	4b14      	ldr	r3, [pc, #80]	@ (800c748 <prvHeapInit+0xb4>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c6fe:	4b12      	ldr	r3, [pc, #72]	@ (800c748 <prvHeapInit+0xb4>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2200      	movs	r2, #0
 800c704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	1ad2      	subs	r2, r2, r3
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c714:	4b0c      	ldr	r3, [pc, #48]	@ (800c748 <prvHeapInit+0xb4>)
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	4a0a      	ldr	r2, [pc, #40]	@ (800c74c <prvHeapInit+0xb8>)
 800c722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	4a09      	ldr	r2, [pc, #36]	@ (800c750 <prvHeapInit+0xbc>)
 800c72a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c72c:	4b09      	ldr	r3, [pc, #36]	@ (800c754 <prvHeapInit+0xc0>)
 800c72e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c732:	601a      	str	r2, [r3, #0]
}
 800c734:	bf00      	nop
 800c736:	3714      	adds	r7, #20
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr
 800c740:	2000b324 	.word	0x2000b324
 800c744:	20024324 	.word	0x20024324
 800c748:	2002432c 	.word	0x2002432c
 800c74c:	20024334 	.word	0x20024334
 800c750:	20024330 	.word	0x20024330
 800c754:	20024338 	.word	0x20024338

0800c758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c760:	4b28      	ldr	r3, [pc, #160]	@ (800c804 <prvInsertBlockIntoFreeList+0xac>)
 800c762:	60fb      	str	r3, [r7, #12]
 800c764:	e002      	b.n	800c76c <prvInsertBlockIntoFreeList+0x14>
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	60fb      	str	r3, [r7, #12]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	429a      	cmp	r2, r3
 800c774:	d8f7      	bhi.n	800c766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	68ba      	ldr	r2, [r7, #8]
 800c780:	4413      	add	r3, r2
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	429a      	cmp	r2, r3
 800c786:	d108      	bne.n	800c79a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	685a      	ldr	r2, [r3, #4]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	441a      	add	r2, r3
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	441a      	add	r2, r3
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d118      	bne.n	800c7e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	4b15      	ldr	r3, [pc, #84]	@ (800c808 <prvInsertBlockIntoFreeList+0xb0>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d00d      	beq.n	800c7d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	685a      	ldr	r2, [r3, #4]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	441a      	add	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	601a      	str	r2, [r3, #0]
 800c7d4:	e008      	b.n	800c7e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c7d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c808 <prvInsertBlockIntoFreeList+0xb0>)
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	601a      	str	r2, [r3, #0]
 800c7de:	e003      	b.n	800c7e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d002      	beq.n	800c7f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7f6:	bf00      	nop
 800c7f8:	3714      	adds	r7, #20
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	20024324 	.word	0x20024324
 800c808:	2002432c 	.word	0x2002432c

0800c80c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c816:	f007 fabd 	bl	8013d94 <sys_timeouts_sleeptime>
 800c81a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c822:	d10b      	bne.n	800c83c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c824:	4813      	ldr	r0, [pc, #76]	@ (800c874 <tcpip_timeouts_mbox_fetch+0x68>)
 800c826:	f00a f99c 	bl	8016b62 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c82a:	2200      	movs	r2, #0
 800c82c:	6839      	ldr	r1, [r7, #0]
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f00a f924 	bl	8016a7c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c834:	480f      	ldr	r0, [pc, #60]	@ (800c874 <tcpip_timeouts_mbox_fetch+0x68>)
 800c836:	f00a f985 	bl	8016b44 <sys_mutex_lock>
    return;
 800c83a:	e018      	b.n	800c86e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d102      	bne.n	800c848 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c842:	f007 fa6d 	bl	8013d20 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c846:	e7e6      	b.n	800c816 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c848:	480a      	ldr	r0, [pc, #40]	@ (800c874 <tcpip_timeouts_mbox_fetch+0x68>)
 800c84a:	f00a f98a 	bl	8016b62 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c84e:	68fa      	ldr	r2, [r7, #12]
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f00a f912 	bl	8016a7c <sys_arch_mbox_fetch>
 800c858:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c85a:	4806      	ldr	r0, [pc, #24]	@ (800c874 <tcpip_timeouts_mbox_fetch+0x68>)
 800c85c:	f00a f972 	bl	8016b44 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c866:	d102      	bne.n	800c86e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c868:	f007 fa5a 	bl	8013d20 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c86c:	e7d3      	b.n	800c816 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c86e:	3710      	adds	r7, #16
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	20024348 	.word	0x20024348

0800c878 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c880:	4810      	ldr	r0, [pc, #64]	@ (800c8c4 <tcpip_thread+0x4c>)
 800c882:	f00a f95f 	bl	8016b44 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c886:	4b10      	ldr	r3, [pc, #64]	@ (800c8c8 <tcpip_thread+0x50>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d005      	beq.n	800c89a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c88e:	4b0e      	ldr	r3, [pc, #56]	@ (800c8c8 <tcpip_thread+0x50>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a0e      	ldr	r2, [pc, #56]	@ (800c8cc <tcpip_thread+0x54>)
 800c894:	6812      	ldr	r2, [r2, #0]
 800c896:	4610      	mov	r0, r2
 800c898:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c89a:	f107 030c 	add.w	r3, r7, #12
 800c89e:	4619      	mov	r1, r3
 800c8a0:	480b      	ldr	r0, [pc, #44]	@ (800c8d0 <tcpip_thread+0x58>)
 800c8a2:	f7ff ffb3 	bl	800c80c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d106      	bne.n	800c8ba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c8ac:	4b09      	ldr	r3, [pc, #36]	@ (800c8d4 <tcpip_thread+0x5c>)
 800c8ae:	2291      	movs	r2, #145	@ 0x91
 800c8b0:	4909      	ldr	r1, [pc, #36]	@ (800c8d8 <tcpip_thread+0x60>)
 800c8b2:	480a      	ldr	r0, [pc, #40]	@ (800c8dc <tcpip_thread+0x64>)
 800c8b4:	f00a fcfe 	bl	80172b4 <iprintf>
      continue;
 800c8b8:	e003      	b.n	800c8c2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f000 f80f 	bl	800c8e0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c8c2:	e7ea      	b.n	800c89a <tcpip_thread+0x22>
 800c8c4:	20024348 	.word	0x20024348
 800c8c8:	2002433c 	.word	0x2002433c
 800c8cc:	20024340 	.word	0x20024340
 800c8d0:	20024344 	.word	0x20024344
 800c8d4:	08018654 	.word	0x08018654
 800c8d8:	08018684 	.word	0x08018684
 800c8dc:	080186a4 	.word	0x080186a4

0800c8e0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	2b02      	cmp	r3, #2
 800c8ee:	d026      	beq.n	800c93e <tcpip_thread_handle_msg+0x5e>
 800c8f0:	2b02      	cmp	r3, #2
 800c8f2:	dc2b      	bgt.n	800c94c <tcpip_thread_handle_msg+0x6c>
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d002      	beq.n	800c8fe <tcpip_thread_handle_msg+0x1e>
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d015      	beq.n	800c928 <tcpip_thread_handle_msg+0x48>
 800c8fc:	e026      	b.n	800c94c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	6850      	ldr	r0, [r2, #4]
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	6892      	ldr	r2, [r2, #8]
 800c90a:	4611      	mov	r1, r2
 800c90c:	4798      	blx	r3
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d004      	beq.n	800c91e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	4618      	mov	r0, r3
 800c91a:	f001 fd07 	bl	800e32c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c91e:	6879      	ldr	r1, [r7, #4]
 800c920:	2009      	movs	r0, #9
 800c922:	f000 fe5f 	bl	800d5e4 <memp_free>
      break;
 800c926:	e018      	b.n	800c95a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	6892      	ldr	r2, [r2, #8]
 800c930:	4610      	mov	r0, r2
 800c932:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c934:	6879      	ldr	r1, [r7, #4]
 800c936:	2008      	movs	r0, #8
 800c938:	f000 fe54 	bl	800d5e4 <memp_free>
      break;
 800c93c:	e00d      	b.n	800c95a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	6892      	ldr	r2, [r2, #8]
 800c946:	4610      	mov	r0, r2
 800c948:	4798      	blx	r3
      break;
 800c94a:	e006      	b.n	800c95a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c94c:	4b05      	ldr	r3, [pc, #20]	@ (800c964 <tcpip_thread_handle_msg+0x84>)
 800c94e:	22cf      	movs	r2, #207	@ 0xcf
 800c950:	4905      	ldr	r1, [pc, #20]	@ (800c968 <tcpip_thread_handle_msg+0x88>)
 800c952:	4806      	ldr	r0, [pc, #24]	@ (800c96c <tcpip_thread_handle_msg+0x8c>)
 800c954:	f00a fcae 	bl	80172b4 <iprintf>
      break;
 800c958:	bf00      	nop
  }
}
 800c95a:	bf00      	nop
 800c95c:	3708      	adds	r7, #8
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	08018654 	.word	0x08018654
 800c968:	08018684 	.word	0x08018684
 800c96c:	080186a4 	.word	0x080186a4

0800c970 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b086      	sub	sp, #24
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c97c:	481a      	ldr	r0, [pc, #104]	@ (800c9e8 <tcpip_inpkt+0x78>)
 800c97e:	f00a f8ae 	bl	8016ade <sys_mbox_valid>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d105      	bne.n	800c994 <tcpip_inpkt+0x24>
 800c988:	4b18      	ldr	r3, [pc, #96]	@ (800c9ec <tcpip_inpkt+0x7c>)
 800c98a:	22fc      	movs	r2, #252	@ 0xfc
 800c98c:	4918      	ldr	r1, [pc, #96]	@ (800c9f0 <tcpip_inpkt+0x80>)
 800c98e:	4819      	ldr	r0, [pc, #100]	@ (800c9f4 <tcpip_inpkt+0x84>)
 800c990:	f00a fc90 	bl	80172b4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c994:	2009      	movs	r0, #9
 800c996:	f000 fdaf 	bl	800d4f8 <memp_malloc>
 800c99a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d102      	bne.n	800c9a8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a6:	e01a      	b.n	800c9de <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	68ba      	ldr	r2, [r7, #8]
 800c9b8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c9c0:	6979      	ldr	r1, [r7, #20]
 800c9c2:	4809      	ldr	r0, [pc, #36]	@ (800c9e8 <tcpip_inpkt+0x78>)
 800c9c4:	f00a f840 	bl	8016a48 <sys_mbox_trypost>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d006      	beq.n	800c9dc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c9ce:	6979      	ldr	r1, [r7, #20]
 800c9d0:	2009      	movs	r0, #9
 800c9d2:	f000 fe07 	bl	800d5e4 <memp_free>
    return ERR_MEM;
 800c9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c9da:	e000      	b.n	800c9de <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c9dc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3718      	adds	r7, #24
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	20024344 	.word	0x20024344
 800c9ec:	08018654 	.word	0x08018654
 800c9f0:	080186cc 	.word	0x080186cc
 800c9f4:	080186a4 	.word	0x080186a4

0800c9f8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ca08:	f003 0318 	and.w	r3, r3, #24
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d006      	beq.n	800ca1e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ca10:	4a08      	ldr	r2, [pc, #32]	@ (800ca34 <tcpip_input+0x3c>)
 800ca12:	6839      	ldr	r1, [r7, #0]
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f7ff ffab 	bl	800c970 <tcpip_inpkt>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	e005      	b.n	800ca2a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ca1e:	4a06      	ldr	r2, [pc, #24]	@ (800ca38 <tcpip_input+0x40>)
 800ca20:	6839      	ldr	r1, [r7, #0]
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7ff ffa4 	bl	800c970 <tcpip_inpkt>
 800ca28:	4603      	mov	r3, r0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3708      	adds	r7, #8
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	08016869 	.word	0x08016869
 800ca38:	08015651 	.word	0x08015651

0800ca3c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ca46:	4819      	ldr	r0, [pc, #100]	@ (800caac <tcpip_try_callback+0x70>)
 800ca48:	f00a f849 	bl	8016ade <sys_mbox_valid>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d106      	bne.n	800ca60 <tcpip_try_callback+0x24>
 800ca52:	4b17      	ldr	r3, [pc, #92]	@ (800cab0 <tcpip_try_callback+0x74>)
 800ca54:	f240 125d 	movw	r2, #349	@ 0x15d
 800ca58:	4916      	ldr	r1, [pc, #88]	@ (800cab4 <tcpip_try_callback+0x78>)
 800ca5a:	4817      	ldr	r0, [pc, #92]	@ (800cab8 <tcpip_try_callback+0x7c>)
 800ca5c:	f00a fc2a 	bl	80172b4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ca60:	2008      	movs	r0, #8
 800ca62:	f000 fd49 	bl	800d4f8 <memp_malloc>
 800ca66:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d102      	bne.n	800ca74 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ca6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca72:	e017      	b.n	800caa4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2201      	movs	r2, #1
 800ca78:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	683a      	ldr	r2, [r7, #0]
 800ca84:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ca86:	68f9      	ldr	r1, [r7, #12]
 800ca88:	4808      	ldr	r0, [pc, #32]	@ (800caac <tcpip_try_callback+0x70>)
 800ca8a:	f009 ffdd 	bl	8016a48 <sys_mbox_trypost>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d006      	beq.n	800caa2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ca94:	68f9      	ldr	r1, [r7, #12]
 800ca96:	2008      	movs	r0, #8
 800ca98:	f000 fda4 	bl	800d5e4 <memp_free>
    return ERR_MEM;
 800ca9c:	f04f 33ff 	mov.w	r3, #4294967295
 800caa0:	e000      	b.n	800caa4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	20024344 	.word	0x20024344
 800cab0:	08018654 	.word	0x08018654
 800cab4:	080186cc 	.word	0x080186cc
 800cab8:	080186a4 	.word	0x080186a4

0800cabc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af02      	add	r7, sp, #8
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800cac6:	f000 f872 	bl	800cbae <lwip_init>

  tcpip_init_done = initfunc;
 800caca:	4a17      	ldr	r2, [pc, #92]	@ (800cb28 <tcpip_init+0x6c>)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800cad0:	4a16      	ldr	r2, [pc, #88]	@ (800cb2c <tcpip_init+0x70>)
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800cad6:	2106      	movs	r1, #6
 800cad8:	4815      	ldr	r0, [pc, #84]	@ (800cb30 <tcpip_init+0x74>)
 800cada:	f009 ff9b 	bl	8016a14 <sys_mbox_new>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d006      	beq.n	800caf2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800cae4:	4b13      	ldr	r3, [pc, #76]	@ (800cb34 <tcpip_init+0x78>)
 800cae6:	f240 2261 	movw	r2, #609	@ 0x261
 800caea:	4913      	ldr	r1, [pc, #76]	@ (800cb38 <tcpip_init+0x7c>)
 800caec:	4813      	ldr	r0, [pc, #76]	@ (800cb3c <tcpip_init+0x80>)
 800caee:	f00a fbe1 	bl	80172b4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800caf2:	4813      	ldr	r0, [pc, #76]	@ (800cb40 <tcpip_init+0x84>)
 800caf4:	f00a f810 	bl	8016b18 <sys_mutex_new>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d006      	beq.n	800cb0c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800cafe:	4b0d      	ldr	r3, [pc, #52]	@ (800cb34 <tcpip_init+0x78>)
 800cb00:	f240 2265 	movw	r2, #613	@ 0x265
 800cb04:	490f      	ldr	r1, [pc, #60]	@ (800cb44 <tcpip_init+0x88>)
 800cb06:	480d      	ldr	r0, [pc, #52]	@ (800cb3c <tcpip_init+0x80>)
 800cb08:	f00a fbd4 	bl	80172b4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800cb0c:	2318      	movs	r3, #24
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb14:	2200      	movs	r2, #0
 800cb16:	490c      	ldr	r1, [pc, #48]	@ (800cb48 <tcpip_init+0x8c>)
 800cb18:	480c      	ldr	r0, [pc, #48]	@ (800cb4c <tcpip_init+0x90>)
 800cb1a:	f00a f82f 	bl	8016b7c <sys_thread_new>
}
 800cb1e:	bf00      	nop
 800cb20:	3708      	adds	r7, #8
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	2002433c 	.word	0x2002433c
 800cb2c:	20024340 	.word	0x20024340
 800cb30:	20024344 	.word	0x20024344
 800cb34:	08018654 	.word	0x08018654
 800cb38:	080186dc 	.word	0x080186dc
 800cb3c:	080186a4 	.word	0x080186a4
 800cb40:	20024348 	.word	0x20024348
 800cb44:	08018700 	.word	0x08018700
 800cb48:	0800c879 	.word	0x0800c879
 800cb4c:	08018724 	.word	0x08018724

0800cb50 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	4603      	mov	r3, r0
 800cb58:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800cb5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb5e:	021b      	lsls	r3, r3, #8
 800cb60:	b21a      	sxth	r2, r3
 800cb62:	88fb      	ldrh	r3, [r7, #6]
 800cb64:	0a1b      	lsrs	r3, r3, #8
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	b21b      	sxth	r3, r3
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	b21b      	sxth	r3, r3
 800cb6e:	b29b      	uxth	r3, r3
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	061a      	lsls	r2, r3, #24
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	021b      	lsls	r3, r3, #8
 800cb8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cb90:	431a      	orrs	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	0a1b      	lsrs	r3, r3, #8
 800cb96:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cb9a:	431a      	orrs	r2, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	0e1b      	lsrs	r3, r3, #24
 800cba0:	4313      	orrs	r3, r2
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	370c      	adds	r7, #12
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr

0800cbae <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b082      	sub	sp, #8
 800cbb2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800cbb8:	f009 ffa2 	bl	8016b00 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800cbbc:	f000 f8d4 	bl	800cd68 <mem_init>
  memp_init();
 800cbc0:	f000 fc2c 	bl	800d41c <memp_init>
  pbuf_init();
  netif_init();
 800cbc4:	f000 fd38 	bl	800d638 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800cbc8:	f007 f91c 	bl	8013e04 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cbcc:	f001 fe48 	bl	800e860 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800cbd0:	f007 f85e 	bl	8013c90 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cbd4:	bf00      	nop
 800cbd6:	3708      	adds	r7, #8
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cbe6:	4b05      	ldr	r3, [pc, #20]	@ (800cbfc <ptr_to_mem+0x20>)
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	88fb      	ldrh	r3, [r7, #6]
 800cbec:	4413      	add	r3, r2
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	370c      	adds	r7, #12
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	20024364 	.word	0x20024364

0800cc00 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800cc08:	4b05      	ldr	r3, [pc, #20]	@ (800cc20 <mem_to_ptr+0x20>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	1ad3      	subs	r3, r2, r3
 800cc10:	b29b      	uxth	r3, r3
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	370c      	adds	r7, #12
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	20024364 	.word	0x20024364

0800cc24 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800cc24:	b590      	push	{r4, r7, lr}
 800cc26:	b085      	sub	sp, #20
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800cc2c:	4b45      	ldr	r3, [pc, #276]	@ (800cd44 <plug_holes+0x120>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d206      	bcs.n	800cc44 <plug_holes+0x20>
 800cc36:	4b44      	ldr	r3, [pc, #272]	@ (800cd48 <plug_holes+0x124>)
 800cc38:	f240 12df 	movw	r2, #479	@ 0x1df
 800cc3c:	4943      	ldr	r1, [pc, #268]	@ (800cd4c <plug_holes+0x128>)
 800cc3e:	4844      	ldr	r0, [pc, #272]	@ (800cd50 <plug_holes+0x12c>)
 800cc40:	f00a fb38 	bl	80172b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cc44:	4b43      	ldr	r3, [pc, #268]	@ (800cd54 <plug_holes+0x130>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d306      	bcc.n	800cc5c <plug_holes+0x38>
 800cc4e:	4b3e      	ldr	r3, [pc, #248]	@ (800cd48 <plug_holes+0x124>)
 800cc50:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800cc54:	4940      	ldr	r1, [pc, #256]	@ (800cd58 <plug_holes+0x134>)
 800cc56:	483e      	ldr	r0, [pc, #248]	@ (800cd50 <plug_holes+0x12c>)
 800cc58:	f00a fb2c 	bl	80172b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	791b      	ldrb	r3, [r3, #4]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d006      	beq.n	800cc72 <plug_holes+0x4e>
 800cc64:	4b38      	ldr	r3, [pc, #224]	@ (800cd48 <plug_holes+0x124>)
 800cc66:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800cc6a:	493c      	ldr	r1, [pc, #240]	@ (800cd5c <plug_holes+0x138>)
 800cc6c:	4838      	ldr	r0, [pc, #224]	@ (800cd50 <plug_holes+0x12c>)
 800cc6e:	f00a fb21 	bl	80172b4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	881b      	ldrh	r3, [r3, #0]
 800cc76:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cc7a:	d906      	bls.n	800cc8a <plug_holes+0x66>
 800cc7c:	4b32      	ldr	r3, [pc, #200]	@ (800cd48 <plug_holes+0x124>)
 800cc7e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800cc82:	4937      	ldr	r1, [pc, #220]	@ (800cd60 <plug_holes+0x13c>)
 800cc84:	4832      	ldr	r0, [pc, #200]	@ (800cd50 <plug_holes+0x12c>)
 800cc86:	f00a fb15 	bl	80172b4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	881b      	ldrh	r3, [r3, #0]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7ff ffa4 	bl	800cbdc <ptr_to_mem>
 800cc94:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d024      	beq.n	800cce8 <plug_holes+0xc4>
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	791b      	ldrb	r3, [r3, #4]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d120      	bne.n	800cce8 <plug_holes+0xc4>
 800cca6:	4b2b      	ldr	r3, [pc, #172]	@ (800cd54 <plug_holes+0x130>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	68fa      	ldr	r2, [r7, #12]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d01b      	beq.n	800cce8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ccb0:	4b2c      	ldr	r3, [pc, #176]	@ (800cd64 <plug_holes+0x140>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d102      	bne.n	800ccc0 <plug_holes+0x9c>
      lfree = mem;
 800ccba:	4a2a      	ldr	r2, [pc, #168]	@ (800cd64 <plug_holes+0x140>)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	881a      	ldrh	r2, [r3, #0]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	881b      	ldrh	r3, [r3, #0]
 800cccc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ccd0:	d00a      	beq.n	800cce8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	881b      	ldrh	r3, [r3, #0]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7ff ff80 	bl	800cbdc <ptr_to_mem>
 800ccdc:	4604      	mov	r4, r0
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f7ff ff8e 	bl	800cc00 <mem_to_ptr>
 800cce4:	4603      	mov	r3, r0
 800cce6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	885b      	ldrh	r3, [r3, #2]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff ff75 	bl	800cbdc <ptr_to_mem>
 800ccf2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ccf4:	68ba      	ldr	r2, [r7, #8]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d01f      	beq.n	800cd3c <plug_holes+0x118>
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	791b      	ldrb	r3, [r3, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d11b      	bne.n	800cd3c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cd04:	4b17      	ldr	r3, [pc, #92]	@ (800cd64 <plug_holes+0x140>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d102      	bne.n	800cd14 <plug_holes+0xf0>
      lfree = pmem;
 800cd0e:	4a15      	ldr	r2, [pc, #84]	@ (800cd64 <plug_holes+0x140>)
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	881a      	ldrh	r2, [r3, #0]
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	881b      	ldrh	r3, [r3, #0]
 800cd20:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cd24:	d00a      	beq.n	800cd3c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	881b      	ldrh	r3, [r3, #0]
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7ff ff56 	bl	800cbdc <ptr_to_mem>
 800cd30:	4604      	mov	r4, r0
 800cd32:	68b8      	ldr	r0, [r7, #8]
 800cd34:	f7ff ff64 	bl	800cc00 <mem_to_ptr>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cd3c:	bf00      	nop
 800cd3e:	3714      	adds	r7, #20
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd90      	pop	{r4, r7, pc}
 800cd44:	20024364 	.word	0x20024364
 800cd48:	08018734 	.word	0x08018734
 800cd4c:	08018764 	.word	0x08018764
 800cd50:	0801877c 	.word	0x0801877c
 800cd54:	20024368 	.word	0x20024368
 800cd58:	080187a4 	.word	0x080187a4
 800cd5c:	080187c0 	.word	0x080187c0
 800cd60:	080187dc 	.word	0x080187dc
 800cd64:	20024370 	.word	0x20024370

0800cd68 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cd6e:	4b1d      	ldr	r3, [pc, #116]	@ (800cde4 <mem_init+0x7c>)
 800cd70:	4a1d      	ldr	r2, [pc, #116]	@ (800cde8 <mem_init+0x80>)
 800cd72:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cd74:	4b1b      	ldr	r3, [pc, #108]	@ (800cde4 <mem_init+0x7c>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800cd80:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cd8e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800cd92:	f7ff ff23 	bl	800cbdc <ptr_to_mem>
 800cd96:	4603      	mov	r3, r0
 800cd98:	4a14      	ldr	r2, [pc, #80]	@ (800cdec <mem_init+0x84>)
 800cd9a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cd9c:	4b13      	ldr	r3, [pc, #76]	@ (800cdec <mem_init+0x84>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2201      	movs	r2, #1
 800cda2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cda4:	4b11      	ldr	r3, [pc, #68]	@ (800cdec <mem_init+0x84>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800cdac:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cdae:	4b0f      	ldr	r3, [pc, #60]	@ (800cdec <mem_init+0x84>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800cdb6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cdb8:	4b0a      	ldr	r3, [pc, #40]	@ (800cde4 <mem_init+0x7c>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a0c      	ldr	r2, [pc, #48]	@ (800cdf0 <mem_init+0x88>)
 800cdbe:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800cdc0:	480c      	ldr	r0, [pc, #48]	@ (800cdf4 <mem_init+0x8c>)
 800cdc2:	f009 fea9 	bl	8016b18 <sys_mutex_new>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d006      	beq.n	800cdda <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800cdcc:	4b0a      	ldr	r3, [pc, #40]	@ (800cdf8 <mem_init+0x90>)
 800cdce:	f240 221f 	movw	r2, #543	@ 0x21f
 800cdd2:	490a      	ldr	r1, [pc, #40]	@ (800cdfc <mem_init+0x94>)
 800cdd4:	480a      	ldr	r0, [pc, #40]	@ (800ce00 <mem_init+0x98>)
 800cdd6:	f00a fa6d 	bl	80172b4 <iprintf>
  }
}
 800cdda:	bf00      	nop
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	20024364 	.word	0x20024364
 800cde8:	20048000 	.word	0x20048000
 800cdec:	20024368 	.word	0x20024368
 800cdf0:	20024370 	.word	0x20024370
 800cdf4:	2002436c 	.word	0x2002436c
 800cdf8:	08018734 	.word	0x08018734
 800cdfc:	08018808 	.word	0x08018808
 800ce00:	0801877c 	.word	0x0801877c

0800ce04 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f7ff fef7 	bl	800cc00 <mem_to_ptr>
 800ce12:	4603      	mov	r3, r0
 800ce14:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	881b      	ldrh	r3, [r3, #0]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff fede 	bl	800cbdc <ptr_to_mem>
 800ce20:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	885b      	ldrh	r3, [r3, #2]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7ff fed8 	bl	800cbdc <ptr_to_mem>
 800ce2c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	881b      	ldrh	r3, [r3, #0]
 800ce32:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ce36:	d818      	bhi.n	800ce6a <mem_link_valid+0x66>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	885b      	ldrh	r3, [r3, #2]
 800ce3c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ce40:	d813      	bhi.n	800ce6a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ce46:	8afa      	ldrh	r2, [r7, #22]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d004      	beq.n	800ce56 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	881b      	ldrh	r3, [r3, #0]
 800ce50:	8afa      	ldrh	r2, [r7, #22]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d109      	bne.n	800ce6a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ce56:	4b08      	ldr	r3, [pc, #32]	@ (800ce78 <mem_link_valid+0x74>)
 800ce58:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ce5a:	693a      	ldr	r2, [r7, #16]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d006      	beq.n	800ce6e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	885b      	ldrh	r3, [r3, #2]
 800ce64:	8afa      	ldrh	r2, [r7, #22]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d001      	beq.n	800ce6e <mem_link_valid+0x6a>
    return 0;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	e000      	b.n	800ce70 <mem_link_valid+0x6c>
  }
  return 1;
 800ce6e:	2301      	movs	r3, #1
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3718      	adds	r7, #24
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	20024368 	.word	0x20024368

0800ce7c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b088      	sub	sp, #32
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d070      	beq.n	800cf6c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f003 0303 	and.w	r3, r3, #3
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d00d      	beq.n	800ceb0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ce94:	4b37      	ldr	r3, [pc, #220]	@ (800cf74 <mem_free+0xf8>)
 800ce96:	f240 2273 	movw	r2, #627	@ 0x273
 800ce9a:	4937      	ldr	r1, [pc, #220]	@ (800cf78 <mem_free+0xfc>)
 800ce9c:	4837      	ldr	r0, [pc, #220]	@ (800cf7c <mem_free+0x100>)
 800ce9e:	f00a fa09 	bl	80172b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cea2:	f009 fe8b 	bl	8016bbc <sys_arch_protect>
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f009 fe95 	bl	8016bd8 <sys_arch_unprotect>
    return;
 800ceae:	e05e      	b.n	800cf6e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	3b08      	subs	r3, #8
 800ceb4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ceb6:	4b32      	ldr	r3, [pc, #200]	@ (800cf80 <mem_free+0x104>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	69fa      	ldr	r2, [r7, #28]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d306      	bcc.n	800cece <mem_free+0x52>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f103 020c 	add.w	r2, r3, #12
 800cec6:	4b2f      	ldr	r3, [pc, #188]	@ (800cf84 <mem_free+0x108>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d90d      	bls.n	800ceea <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cece:	4b29      	ldr	r3, [pc, #164]	@ (800cf74 <mem_free+0xf8>)
 800ced0:	f240 227f 	movw	r2, #639	@ 0x27f
 800ced4:	492c      	ldr	r1, [pc, #176]	@ (800cf88 <mem_free+0x10c>)
 800ced6:	4829      	ldr	r0, [pc, #164]	@ (800cf7c <mem_free+0x100>)
 800ced8:	f00a f9ec 	bl	80172b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cedc:	f009 fe6e 	bl	8016bbc <sys_arch_protect>
 800cee0:	6138      	str	r0, [r7, #16]
 800cee2:	6938      	ldr	r0, [r7, #16]
 800cee4:	f009 fe78 	bl	8016bd8 <sys_arch_unprotect>
    return;
 800cee8:	e041      	b.n	800cf6e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ceea:	4828      	ldr	r0, [pc, #160]	@ (800cf8c <mem_free+0x110>)
 800ceec:	f009 fe2a 	bl	8016b44 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	791b      	ldrb	r3, [r3, #4]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d110      	bne.n	800cf1a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cef8:	4b1e      	ldr	r3, [pc, #120]	@ (800cf74 <mem_free+0xf8>)
 800cefa:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800cefe:	4924      	ldr	r1, [pc, #144]	@ (800cf90 <mem_free+0x114>)
 800cf00:	481e      	ldr	r0, [pc, #120]	@ (800cf7c <mem_free+0x100>)
 800cf02:	f00a f9d7 	bl	80172b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cf06:	4821      	ldr	r0, [pc, #132]	@ (800cf8c <mem_free+0x110>)
 800cf08:	f009 fe2b 	bl	8016b62 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cf0c:	f009 fe56 	bl	8016bbc <sys_arch_protect>
 800cf10:	6178      	str	r0, [r7, #20]
 800cf12:	6978      	ldr	r0, [r7, #20]
 800cf14:	f009 fe60 	bl	8016bd8 <sys_arch_unprotect>
    return;
 800cf18:	e029      	b.n	800cf6e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800cf1a:	69f8      	ldr	r0, [r7, #28]
 800cf1c:	f7ff ff72 	bl	800ce04 <mem_link_valid>
 800cf20:	4603      	mov	r3, r0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d110      	bne.n	800cf48 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cf26:	4b13      	ldr	r3, [pc, #76]	@ (800cf74 <mem_free+0xf8>)
 800cf28:	f240 2295 	movw	r2, #661	@ 0x295
 800cf2c:	4919      	ldr	r1, [pc, #100]	@ (800cf94 <mem_free+0x118>)
 800cf2e:	4813      	ldr	r0, [pc, #76]	@ (800cf7c <mem_free+0x100>)
 800cf30:	f00a f9c0 	bl	80172b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cf34:	4815      	ldr	r0, [pc, #84]	@ (800cf8c <mem_free+0x110>)
 800cf36:	f009 fe14 	bl	8016b62 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cf3a:	f009 fe3f 	bl	8016bbc <sys_arch_protect>
 800cf3e:	61b8      	str	r0, [r7, #24]
 800cf40:	69b8      	ldr	r0, [r7, #24]
 800cf42:	f009 fe49 	bl	8016bd8 <sys_arch_unprotect>
    return;
 800cf46:	e012      	b.n	800cf6e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cf48:	69fb      	ldr	r3, [r7, #28]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cf4e:	4b12      	ldr	r3, [pc, #72]	@ (800cf98 <mem_free+0x11c>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	69fa      	ldr	r2, [r7, #28]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d202      	bcs.n	800cf5e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cf58:	4a0f      	ldr	r2, [pc, #60]	@ (800cf98 <mem_free+0x11c>)
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cf5e:	69f8      	ldr	r0, [r7, #28]
 800cf60:	f7ff fe60 	bl	800cc24 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cf64:	4809      	ldr	r0, [pc, #36]	@ (800cf8c <mem_free+0x110>)
 800cf66:	f009 fdfc 	bl	8016b62 <sys_mutex_unlock>
 800cf6a:	e000      	b.n	800cf6e <mem_free+0xf2>
    return;
 800cf6c:	bf00      	nop
}
 800cf6e:	3720      	adds	r7, #32
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	08018734 	.word	0x08018734
 800cf78:	08018824 	.word	0x08018824
 800cf7c:	0801877c 	.word	0x0801877c
 800cf80:	20024364 	.word	0x20024364
 800cf84:	20024368 	.word	0x20024368
 800cf88:	08018848 	.word	0x08018848
 800cf8c:	2002436c 	.word	0x2002436c
 800cf90:	08018864 	.word	0x08018864
 800cf94:	0801888c 	.word	0x0801888c
 800cf98:	20024370 	.word	0x20024370

0800cf9c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b088      	sub	sp, #32
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cfa8:	887b      	ldrh	r3, [r7, #2]
 800cfaa:	3303      	adds	r3, #3
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	f023 0303 	bic.w	r3, r3, #3
 800cfb2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cfb4:	8bfb      	ldrh	r3, [r7, #30]
 800cfb6:	2b0b      	cmp	r3, #11
 800cfb8:	d801      	bhi.n	800cfbe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cfba:	230c      	movs	r3, #12
 800cfbc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cfbe:	8bfb      	ldrh	r3, [r7, #30]
 800cfc0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cfc4:	d803      	bhi.n	800cfce <mem_trim+0x32>
 800cfc6:	8bfa      	ldrh	r2, [r7, #30]
 800cfc8:	887b      	ldrh	r3, [r7, #2]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d201      	bcs.n	800cfd2 <mem_trim+0x36>
    return NULL;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	e0d8      	b.n	800d184 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cfd2:	4b6e      	ldr	r3, [pc, #440]	@ (800d18c <mem_trim+0x1f0>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d304      	bcc.n	800cfe6 <mem_trim+0x4a>
 800cfdc:	4b6c      	ldr	r3, [pc, #432]	@ (800d190 <mem_trim+0x1f4>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d306      	bcc.n	800cff4 <mem_trim+0x58>
 800cfe6:	4b6b      	ldr	r3, [pc, #428]	@ (800d194 <mem_trim+0x1f8>)
 800cfe8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800cfec:	496a      	ldr	r1, [pc, #424]	@ (800d198 <mem_trim+0x1fc>)
 800cfee:	486b      	ldr	r0, [pc, #428]	@ (800d19c <mem_trim+0x200>)
 800cff0:	f00a f960 	bl	80172b4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cff4:	4b65      	ldr	r3, [pc, #404]	@ (800d18c <mem_trim+0x1f0>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d304      	bcc.n	800d008 <mem_trim+0x6c>
 800cffe:	4b64      	ldr	r3, [pc, #400]	@ (800d190 <mem_trim+0x1f4>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	429a      	cmp	r2, r3
 800d006:	d307      	bcc.n	800d018 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d008:	f009 fdd8 	bl	8016bbc <sys_arch_protect>
 800d00c:	60b8      	str	r0, [r7, #8]
 800d00e:	68b8      	ldr	r0, [r7, #8]
 800d010:	f009 fde2 	bl	8016bd8 <sys_arch_unprotect>
    return rmem;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	e0b5      	b.n	800d184 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	3b08      	subs	r3, #8
 800d01c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d01e:	69b8      	ldr	r0, [r7, #24]
 800d020:	f7ff fdee 	bl	800cc00 <mem_to_ptr>
 800d024:	4603      	mov	r3, r0
 800d026:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d028:	69bb      	ldr	r3, [r7, #24]
 800d02a:	881a      	ldrh	r2, [r3, #0]
 800d02c:	8afb      	ldrh	r3, [r7, #22]
 800d02e:	1ad3      	subs	r3, r2, r3
 800d030:	b29b      	uxth	r3, r3
 800d032:	3b08      	subs	r3, #8
 800d034:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d036:	8bfa      	ldrh	r2, [r7, #30]
 800d038:	8abb      	ldrh	r3, [r7, #20]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d906      	bls.n	800d04c <mem_trim+0xb0>
 800d03e:	4b55      	ldr	r3, [pc, #340]	@ (800d194 <mem_trim+0x1f8>)
 800d040:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800d044:	4956      	ldr	r1, [pc, #344]	@ (800d1a0 <mem_trim+0x204>)
 800d046:	4855      	ldr	r0, [pc, #340]	@ (800d19c <mem_trim+0x200>)
 800d048:	f00a f934 	bl	80172b4 <iprintf>
  if (newsize > size) {
 800d04c:	8bfa      	ldrh	r2, [r7, #30]
 800d04e:	8abb      	ldrh	r3, [r7, #20]
 800d050:	429a      	cmp	r2, r3
 800d052:	d901      	bls.n	800d058 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d054:	2300      	movs	r3, #0
 800d056:	e095      	b.n	800d184 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d058:	8bfa      	ldrh	r2, [r7, #30]
 800d05a:	8abb      	ldrh	r3, [r7, #20]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d101      	bne.n	800d064 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	e08f      	b.n	800d184 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d064:	484f      	ldr	r0, [pc, #316]	@ (800d1a4 <mem_trim+0x208>)
 800d066:	f009 fd6d 	bl	8016b44 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	881b      	ldrh	r3, [r3, #0]
 800d06e:	4618      	mov	r0, r3
 800d070:	f7ff fdb4 	bl	800cbdc <ptr_to_mem>
 800d074:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	791b      	ldrb	r3, [r3, #4]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d13f      	bne.n	800d0fe <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	881b      	ldrh	r3, [r3, #0]
 800d082:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d086:	d106      	bne.n	800d096 <mem_trim+0xfa>
 800d088:	4b42      	ldr	r3, [pc, #264]	@ (800d194 <mem_trim+0x1f8>)
 800d08a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800d08e:	4946      	ldr	r1, [pc, #280]	@ (800d1a8 <mem_trim+0x20c>)
 800d090:	4842      	ldr	r0, [pc, #264]	@ (800d19c <mem_trim+0x200>)
 800d092:	f00a f90f 	bl	80172b4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	881b      	ldrh	r3, [r3, #0]
 800d09a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d09c:	8afa      	ldrh	r2, [r7, #22]
 800d09e:	8bfb      	ldrh	r3, [r7, #30]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	3308      	adds	r3, #8
 800d0a6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d0a8:	4b40      	ldr	r3, [pc, #256]	@ (800d1ac <mem_trim+0x210>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	693a      	ldr	r2, [r7, #16]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d106      	bne.n	800d0c0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d0b2:	89fb      	ldrh	r3, [r7, #14]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7ff fd91 	bl	800cbdc <ptr_to_mem>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	4a3b      	ldr	r2, [pc, #236]	@ (800d1ac <mem_trim+0x210>)
 800d0be:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d0c0:	89fb      	ldrh	r3, [r7, #14]
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7ff fd8a 	bl	800cbdc <ptr_to_mem>
 800d0c8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	89ba      	ldrh	r2, [r7, #12]
 800d0d4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	8afa      	ldrh	r2, [r7, #22]
 800d0da:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	89fa      	ldrh	r2, [r7, #14]
 800d0e0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	881b      	ldrh	r3, [r3, #0]
 800d0e6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d0ea:	d047      	beq.n	800d17c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	881b      	ldrh	r3, [r3, #0]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7ff fd73 	bl	800cbdc <ptr_to_mem>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	89fb      	ldrh	r3, [r7, #14]
 800d0fa:	8053      	strh	r3, [r2, #2]
 800d0fc:	e03e      	b.n	800d17c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d0fe:	8bfb      	ldrh	r3, [r7, #30]
 800d100:	f103 0214 	add.w	r2, r3, #20
 800d104:	8abb      	ldrh	r3, [r7, #20]
 800d106:	429a      	cmp	r2, r3
 800d108:	d838      	bhi.n	800d17c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d10a:	8afa      	ldrh	r2, [r7, #22]
 800d10c:	8bfb      	ldrh	r3, [r7, #30]
 800d10e:	4413      	add	r3, r2
 800d110:	b29b      	uxth	r3, r3
 800d112:	3308      	adds	r3, #8
 800d114:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	881b      	ldrh	r3, [r3, #0]
 800d11a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d11e:	d106      	bne.n	800d12e <mem_trim+0x192>
 800d120:	4b1c      	ldr	r3, [pc, #112]	@ (800d194 <mem_trim+0x1f8>)
 800d122:	f240 3216 	movw	r2, #790	@ 0x316
 800d126:	4920      	ldr	r1, [pc, #128]	@ (800d1a8 <mem_trim+0x20c>)
 800d128:	481c      	ldr	r0, [pc, #112]	@ (800d19c <mem_trim+0x200>)
 800d12a:	f00a f8c3 	bl	80172b4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d12e:	89fb      	ldrh	r3, [r7, #14]
 800d130:	4618      	mov	r0, r3
 800d132:	f7ff fd53 	bl	800cbdc <ptr_to_mem>
 800d136:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d138:	4b1c      	ldr	r3, [pc, #112]	@ (800d1ac <mem_trim+0x210>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	693a      	ldr	r2, [r7, #16]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d202      	bcs.n	800d148 <mem_trim+0x1ac>
      lfree = mem2;
 800d142:	4a1a      	ldr	r2, [pc, #104]	@ (800d1ac <mem_trim+0x210>)
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	2200      	movs	r2, #0
 800d14c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	881a      	ldrh	r2, [r3, #0]
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	8afa      	ldrh	r2, [r7, #22]
 800d15a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d15c:	69bb      	ldr	r3, [r7, #24]
 800d15e:	89fa      	ldrh	r2, [r7, #14]
 800d160:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	881b      	ldrh	r3, [r3, #0]
 800d166:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d16a:	d007      	beq.n	800d17c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	881b      	ldrh	r3, [r3, #0]
 800d170:	4618      	mov	r0, r3
 800d172:	f7ff fd33 	bl	800cbdc <ptr_to_mem>
 800d176:	4602      	mov	r2, r0
 800d178:	89fb      	ldrh	r3, [r7, #14]
 800d17a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d17c:	4809      	ldr	r0, [pc, #36]	@ (800d1a4 <mem_trim+0x208>)
 800d17e:	f009 fcf0 	bl	8016b62 <sys_mutex_unlock>
  return rmem;
 800d182:	687b      	ldr	r3, [r7, #4]
}
 800d184:	4618      	mov	r0, r3
 800d186:	3720      	adds	r7, #32
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	20024364 	.word	0x20024364
 800d190:	20024368 	.word	0x20024368
 800d194:	08018734 	.word	0x08018734
 800d198:	080188c0 	.word	0x080188c0
 800d19c:	0801877c 	.word	0x0801877c
 800d1a0:	080188d8 	.word	0x080188d8
 800d1a4:	2002436c 	.word	0x2002436c
 800d1a8:	080188f8 	.word	0x080188f8
 800d1ac:	20024370 	.word	0x20024370

0800d1b0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b088      	sub	sp, #32
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d1ba:	88fb      	ldrh	r3, [r7, #6]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d101      	bne.n	800d1c4 <mem_malloc+0x14>
    return NULL;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	e0e2      	b.n	800d38a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d1c4:	88fb      	ldrh	r3, [r7, #6]
 800d1c6:	3303      	adds	r3, #3
 800d1c8:	b29b      	uxth	r3, r3
 800d1ca:	f023 0303 	bic.w	r3, r3, #3
 800d1ce:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d1d0:	8bbb      	ldrh	r3, [r7, #28]
 800d1d2:	2b0b      	cmp	r3, #11
 800d1d4:	d801      	bhi.n	800d1da <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d1d6:	230c      	movs	r3, #12
 800d1d8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d1da:	8bbb      	ldrh	r3, [r7, #28]
 800d1dc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d1e0:	d803      	bhi.n	800d1ea <mem_malloc+0x3a>
 800d1e2:	8bba      	ldrh	r2, [r7, #28]
 800d1e4:	88fb      	ldrh	r3, [r7, #6]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d201      	bcs.n	800d1ee <mem_malloc+0x3e>
    return NULL;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	e0cd      	b.n	800d38a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d1ee:	4869      	ldr	r0, [pc, #420]	@ (800d394 <mem_malloc+0x1e4>)
 800d1f0:	f009 fca8 	bl	8016b44 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d1f4:	4b68      	ldr	r3, [pc, #416]	@ (800d398 <mem_malloc+0x1e8>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7ff fd01 	bl	800cc00 <mem_to_ptr>
 800d1fe:	4603      	mov	r3, r0
 800d200:	83fb      	strh	r3, [r7, #30]
 800d202:	e0b7      	b.n	800d374 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d204:	8bfb      	ldrh	r3, [r7, #30]
 800d206:	4618      	mov	r0, r3
 800d208:	f7ff fce8 	bl	800cbdc <ptr_to_mem>
 800d20c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	791b      	ldrb	r3, [r3, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	f040 80a7 	bne.w	800d366 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	881b      	ldrh	r3, [r3, #0]
 800d21c:	461a      	mov	r2, r3
 800d21e:	8bfb      	ldrh	r3, [r7, #30]
 800d220:	1ad3      	subs	r3, r2, r3
 800d222:	f1a3 0208 	sub.w	r2, r3, #8
 800d226:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d228:	429a      	cmp	r2, r3
 800d22a:	f0c0 809c 	bcc.w	800d366 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	881b      	ldrh	r3, [r3, #0]
 800d232:	461a      	mov	r2, r3
 800d234:	8bfb      	ldrh	r3, [r7, #30]
 800d236:	1ad3      	subs	r3, r2, r3
 800d238:	f1a3 0208 	sub.w	r2, r3, #8
 800d23c:	8bbb      	ldrh	r3, [r7, #28]
 800d23e:	3314      	adds	r3, #20
 800d240:	429a      	cmp	r2, r3
 800d242:	d333      	bcc.n	800d2ac <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d244:	8bfa      	ldrh	r2, [r7, #30]
 800d246:	8bbb      	ldrh	r3, [r7, #28]
 800d248:	4413      	add	r3, r2
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	3308      	adds	r3, #8
 800d24e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d250:	8a7b      	ldrh	r3, [r7, #18]
 800d252:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d256:	d106      	bne.n	800d266 <mem_malloc+0xb6>
 800d258:	4b50      	ldr	r3, [pc, #320]	@ (800d39c <mem_malloc+0x1ec>)
 800d25a:	f240 3287 	movw	r2, #903	@ 0x387
 800d25e:	4950      	ldr	r1, [pc, #320]	@ (800d3a0 <mem_malloc+0x1f0>)
 800d260:	4850      	ldr	r0, [pc, #320]	@ (800d3a4 <mem_malloc+0x1f4>)
 800d262:	f00a f827 	bl	80172b4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d266:	8a7b      	ldrh	r3, [r7, #18]
 800d268:	4618      	mov	r0, r3
 800d26a:	f7ff fcb7 	bl	800cbdc <ptr_to_mem>
 800d26e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2200      	movs	r2, #0
 800d274:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	881a      	ldrh	r2, [r3, #0]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	8bfa      	ldrh	r2, [r7, #30]
 800d282:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	8a7a      	ldrh	r2, [r7, #18]
 800d288:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	2201      	movs	r2, #1
 800d28e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	881b      	ldrh	r3, [r3, #0]
 800d294:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d298:	d00b      	beq.n	800d2b2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	881b      	ldrh	r3, [r3, #0]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7ff fc9c 	bl	800cbdc <ptr_to_mem>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	8a7b      	ldrh	r3, [r7, #18]
 800d2a8:	8053      	strh	r3, [r2, #2]
 800d2aa:	e002      	b.n	800d2b2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d2b2:	4b39      	ldr	r3, [pc, #228]	@ (800d398 <mem_malloc+0x1e8>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	697a      	ldr	r2, [r7, #20]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d127      	bne.n	800d30c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d2bc:	4b36      	ldr	r3, [pc, #216]	@ (800d398 <mem_malloc+0x1e8>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d2c2:	e005      	b.n	800d2d0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	881b      	ldrh	r3, [r3, #0]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7ff fc87 	bl	800cbdc <ptr_to_mem>
 800d2ce:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	791b      	ldrb	r3, [r3, #4]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d004      	beq.n	800d2e2 <mem_malloc+0x132>
 800d2d8:	4b33      	ldr	r3, [pc, #204]	@ (800d3a8 <mem_malloc+0x1f8>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	69ba      	ldr	r2, [r7, #24]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d1f0      	bne.n	800d2c4 <mem_malloc+0x114>
          }
          lfree = cur;
 800d2e2:	4a2d      	ldr	r2, [pc, #180]	@ (800d398 <mem_malloc+0x1e8>)
 800d2e4:	69bb      	ldr	r3, [r7, #24]
 800d2e6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d2e8:	4b2b      	ldr	r3, [pc, #172]	@ (800d398 <mem_malloc+0x1e8>)
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	4b2e      	ldr	r3, [pc, #184]	@ (800d3a8 <mem_malloc+0x1f8>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d00b      	beq.n	800d30c <mem_malloc+0x15c>
 800d2f4:	4b28      	ldr	r3, [pc, #160]	@ (800d398 <mem_malloc+0x1e8>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	791b      	ldrb	r3, [r3, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d006      	beq.n	800d30c <mem_malloc+0x15c>
 800d2fe:	4b27      	ldr	r3, [pc, #156]	@ (800d39c <mem_malloc+0x1ec>)
 800d300:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800d304:	4929      	ldr	r1, [pc, #164]	@ (800d3ac <mem_malloc+0x1fc>)
 800d306:	4827      	ldr	r0, [pc, #156]	@ (800d3a4 <mem_malloc+0x1f4>)
 800d308:	f009 ffd4 	bl	80172b4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d30c:	4821      	ldr	r0, [pc, #132]	@ (800d394 <mem_malloc+0x1e4>)
 800d30e:	f009 fc28 	bl	8016b62 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d312:	8bba      	ldrh	r2, [r7, #28]
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	4413      	add	r3, r2
 800d318:	3308      	adds	r3, #8
 800d31a:	4a23      	ldr	r2, [pc, #140]	@ (800d3a8 <mem_malloc+0x1f8>)
 800d31c:	6812      	ldr	r2, [r2, #0]
 800d31e:	4293      	cmp	r3, r2
 800d320:	d906      	bls.n	800d330 <mem_malloc+0x180>
 800d322:	4b1e      	ldr	r3, [pc, #120]	@ (800d39c <mem_malloc+0x1ec>)
 800d324:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800d328:	4921      	ldr	r1, [pc, #132]	@ (800d3b0 <mem_malloc+0x200>)
 800d32a:	481e      	ldr	r0, [pc, #120]	@ (800d3a4 <mem_malloc+0x1f4>)
 800d32c:	f009 ffc2 	bl	80172b4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	f003 0303 	and.w	r3, r3, #3
 800d336:	2b00      	cmp	r3, #0
 800d338:	d006      	beq.n	800d348 <mem_malloc+0x198>
 800d33a:	4b18      	ldr	r3, [pc, #96]	@ (800d39c <mem_malloc+0x1ec>)
 800d33c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800d340:	491c      	ldr	r1, [pc, #112]	@ (800d3b4 <mem_malloc+0x204>)
 800d342:	4818      	ldr	r0, [pc, #96]	@ (800d3a4 <mem_malloc+0x1f4>)
 800d344:	f009 ffb6 	bl	80172b4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	f003 0303 	and.w	r3, r3, #3
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d006      	beq.n	800d360 <mem_malloc+0x1b0>
 800d352:	4b12      	ldr	r3, [pc, #72]	@ (800d39c <mem_malloc+0x1ec>)
 800d354:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800d358:	4917      	ldr	r1, [pc, #92]	@ (800d3b8 <mem_malloc+0x208>)
 800d35a:	4812      	ldr	r0, [pc, #72]	@ (800d3a4 <mem_malloc+0x1f4>)
 800d35c:	f009 ffaa 	bl	80172b4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	3308      	adds	r3, #8
 800d364:	e011      	b.n	800d38a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d366:	8bfb      	ldrh	r3, [r7, #30]
 800d368:	4618      	mov	r0, r3
 800d36a:	f7ff fc37 	bl	800cbdc <ptr_to_mem>
 800d36e:	4603      	mov	r3, r0
 800d370:	881b      	ldrh	r3, [r3, #0]
 800d372:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d374:	8bfa      	ldrh	r2, [r7, #30]
 800d376:	8bbb      	ldrh	r3, [r7, #28]
 800d378:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800d37c:	429a      	cmp	r2, r3
 800d37e:	f4ff af41 	bcc.w	800d204 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d382:	4804      	ldr	r0, [pc, #16]	@ (800d394 <mem_malloc+0x1e4>)
 800d384:	f009 fbed 	bl	8016b62 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d388:	2300      	movs	r3, #0
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3720      	adds	r7, #32
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	2002436c 	.word	0x2002436c
 800d398:	20024370 	.word	0x20024370
 800d39c:	08018734 	.word	0x08018734
 800d3a0:	080188f8 	.word	0x080188f8
 800d3a4:	0801877c 	.word	0x0801877c
 800d3a8:	20024368 	.word	0x20024368
 800d3ac:	0801890c 	.word	0x0801890c
 800d3b0:	08018928 	.word	0x08018928
 800d3b4:	08018958 	.word	0x08018958
 800d3b8:	08018988 	.word	0x08018988

0800d3bc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b085      	sub	sp, #20
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	689b      	ldr	r3, [r3, #8]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	3303      	adds	r3, #3
 800d3d2:	f023 0303 	bic.w	r3, r3, #3
 800d3d6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d3d8:	2300      	movs	r3, #0
 800d3da:	60fb      	str	r3, [r7, #12]
 800d3dc:	e011      	b.n	800d402 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	68ba      	ldr	r2, [r7, #8]
 800d3ee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	881b      	ldrh	r3, [r3, #0]
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	3301      	adds	r3, #1
 800d400:	60fb      	str	r3, [r7, #12]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	885b      	ldrh	r3, [r3, #2]
 800d406:	461a      	mov	r2, r3
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	4293      	cmp	r3, r2
 800d40c:	dbe7      	blt.n	800d3de <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d40e:	bf00      	nop
 800d410:	bf00      	nop
 800d412:	3714      	adds	r7, #20
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d422:	2300      	movs	r3, #0
 800d424:	80fb      	strh	r3, [r7, #6]
 800d426:	e009      	b.n	800d43c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d428:	88fb      	ldrh	r3, [r7, #6]
 800d42a:	4a08      	ldr	r2, [pc, #32]	@ (800d44c <memp_init+0x30>)
 800d42c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d430:	4618      	mov	r0, r3
 800d432:	f7ff ffc3 	bl	800d3bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d436:	88fb      	ldrh	r3, [r7, #6]
 800d438:	3301      	adds	r3, #1
 800d43a:	80fb      	strh	r3, [r7, #6]
 800d43c:	88fb      	ldrh	r3, [r7, #6]
 800d43e:	2b0c      	cmp	r3, #12
 800d440:	d9f2      	bls.n	800d428 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d442:	bf00      	nop
 800d444:	bf00      	nop
 800d446:	3708      	adds	r7, #8
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	0801b3e4 	.word	0x0801b3e4

0800d450 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d458:	f009 fbb0 	bl	8016bbc <sys_arch_protect>
 800d45c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d015      	beq.n	800d498 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	689b      	ldr	r3, [r3, #8]
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	6812      	ldr	r2, [r2, #0]
 800d474:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	f003 0303 	and.w	r3, r3, #3
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d006      	beq.n	800d48e <do_memp_malloc_pool+0x3e>
 800d480:	4b09      	ldr	r3, [pc, #36]	@ (800d4a8 <do_memp_malloc_pool+0x58>)
 800d482:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800d486:	4909      	ldr	r1, [pc, #36]	@ (800d4ac <do_memp_malloc_pool+0x5c>)
 800d488:	4809      	ldr	r0, [pc, #36]	@ (800d4b0 <do_memp_malloc_pool+0x60>)
 800d48a:	f009 ff13 	bl	80172b4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d48e:	68f8      	ldr	r0, [r7, #12]
 800d490:	f009 fba2 	bl	8016bd8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	e003      	b.n	800d4a0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d498:	68f8      	ldr	r0, [r7, #12]
 800d49a:	f009 fb9d 	bl	8016bd8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d49e:	2300      	movs	r3, #0
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3710      	adds	r7, #16
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	080189ac 	.word	0x080189ac
 800d4ac:	080189dc 	.word	0x080189dc
 800d4b0:	08018a00 	.word	0x08018a00

0800d4b4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d106      	bne.n	800d4d0 <memp_malloc_pool+0x1c>
 800d4c2:	4b0a      	ldr	r3, [pc, #40]	@ (800d4ec <memp_malloc_pool+0x38>)
 800d4c4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800d4c8:	4909      	ldr	r1, [pc, #36]	@ (800d4f0 <memp_malloc_pool+0x3c>)
 800d4ca:	480a      	ldr	r0, [pc, #40]	@ (800d4f4 <memp_malloc_pool+0x40>)
 800d4cc:	f009 fef2 	bl	80172b4 <iprintf>
  if (desc == NULL) {
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d101      	bne.n	800d4da <memp_malloc_pool+0x26>
    return NULL;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	e003      	b.n	800d4e2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7ff ffb8 	bl	800d450 <do_memp_malloc_pool>
 800d4e0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3708      	adds	r7, #8
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	080189ac 	.word	0x080189ac
 800d4f0:	08018a28 	.word	0x08018a28
 800d4f4:	08018a00 	.word	0x08018a00

0800d4f8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	4603      	mov	r3, r0
 800d500:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d502:	79fb      	ldrb	r3, [r7, #7]
 800d504:	2b0c      	cmp	r3, #12
 800d506:	d908      	bls.n	800d51a <memp_malloc+0x22>
 800d508:	4b0a      	ldr	r3, [pc, #40]	@ (800d534 <memp_malloc+0x3c>)
 800d50a:	f240 1257 	movw	r2, #343	@ 0x157
 800d50e:	490a      	ldr	r1, [pc, #40]	@ (800d538 <memp_malloc+0x40>)
 800d510:	480a      	ldr	r0, [pc, #40]	@ (800d53c <memp_malloc+0x44>)
 800d512:	f009 fecf 	bl	80172b4 <iprintf>
 800d516:	2300      	movs	r3, #0
 800d518:	e008      	b.n	800d52c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d51a:	79fb      	ldrb	r3, [r7, #7]
 800d51c:	4a08      	ldr	r2, [pc, #32]	@ (800d540 <memp_malloc+0x48>)
 800d51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d522:	4618      	mov	r0, r3
 800d524:	f7ff ff94 	bl	800d450 <do_memp_malloc_pool>
 800d528:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d52a:	68fb      	ldr	r3, [r7, #12]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3710      	adds	r7, #16
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	080189ac 	.word	0x080189ac
 800d538:	08018a3c 	.word	0x08018a3c
 800d53c:	08018a00 	.word	0x08018a00
 800d540:	0801b3e4 	.word	0x0801b3e4

0800d544 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	f003 0303 	and.w	r3, r3, #3
 800d554:	2b00      	cmp	r3, #0
 800d556:	d006      	beq.n	800d566 <do_memp_free_pool+0x22>
 800d558:	4b0d      	ldr	r3, [pc, #52]	@ (800d590 <do_memp_free_pool+0x4c>)
 800d55a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d55e:	490d      	ldr	r1, [pc, #52]	@ (800d594 <do_memp_free_pool+0x50>)
 800d560:	480d      	ldr	r0, [pc, #52]	@ (800d598 <do_memp_free_pool+0x54>)
 800d562:	f009 fea7 	bl	80172b4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d56a:	f009 fb27 	bl	8016bbc <sys_arch_protect>
 800d56e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	689b      	ldr	r3, [r3, #8]
 800d57e:	68fa      	ldr	r2, [r7, #12]
 800d580:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d582:	68b8      	ldr	r0, [r7, #8]
 800d584:	f009 fb28 	bl	8016bd8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d588:	bf00      	nop
 800d58a:	3710      	adds	r7, #16
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	080189ac 	.word	0x080189ac
 800d594:	08018a5c 	.word	0x08018a5c
 800d598:	08018a00 	.word	0x08018a00

0800d59c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d106      	bne.n	800d5ba <memp_free_pool+0x1e>
 800d5ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d5d8 <memp_free_pool+0x3c>)
 800d5ae:	f240 1295 	movw	r2, #405	@ 0x195
 800d5b2:	490a      	ldr	r1, [pc, #40]	@ (800d5dc <memp_free_pool+0x40>)
 800d5b4:	480a      	ldr	r0, [pc, #40]	@ (800d5e0 <memp_free_pool+0x44>)
 800d5b6:	f009 fe7d 	bl	80172b4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d007      	beq.n	800d5d0 <memp_free_pool+0x34>
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d004      	beq.n	800d5d0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7ff ffbb 	bl	800d544 <do_memp_free_pool>
 800d5ce:	e000      	b.n	800d5d2 <memp_free_pool+0x36>
    return;
 800d5d0:	bf00      	nop
}
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	080189ac 	.word	0x080189ac
 800d5dc:	08018a28 	.word	0x08018a28
 800d5e0:	08018a00 	.word	0x08018a00

0800d5e4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	6039      	str	r1, [r7, #0]
 800d5ee:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d5f0:	79fb      	ldrb	r3, [r7, #7]
 800d5f2:	2b0c      	cmp	r3, #12
 800d5f4:	d907      	bls.n	800d606 <memp_free+0x22>
 800d5f6:	4b0c      	ldr	r3, [pc, #48]	@ (800d628 <memp_free+0x44>)
 800d5f8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800d5fc:	490b      	ldr	r1, [pc, #44]	@ (800d62c <memp_free+0x48>)
 800d5fe:	480c      	ldr	r0, [pc, #48]	@ (800d630 <memp_free+0x4c>)
 800d600:	f009 fe58 	bl	80172b4 <iprintf>
 800d604:	e00c      	b.n	800d620 <memp_free+0x3c>

  if (mem == NULL) {
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d008      	beq.n	800d61e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d60c:	79fb      	ldrb	r3, [r7, #7]
 800d60e:	4a09      	ldr	r2, [pc, #36]	@ (800d634 <memp_free+0x50>)
 800d610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d614:	6839      	ldr	r1, [r7, #0]
 800d616:	4618      	mov	r0, r3
 800d618:	f7ff ff94 	bl	800d544 <do_memp_free_pool>
 800d61c:	e000      	b.n	800d620 <memp_free+0x3c>
    return;
 800d61e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	080189ac 	.word	0x080189ac
 800d62c:	08018a7c 	.word	0x08018a7c
 800d630:	08018a00 	.word	0x08018a00
 800d634:	0801b3e4 	.word	0x0801b3e4

0800d638 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d638:	b480      	push	{r7}
 800d63a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d63c:	bf00      	nop
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr
	...

0800d648 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b086      	sub	sp, #24
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
 800d654:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d108      	bne.n	800d66e <netif_add+0x26>
 800d65c:	4b57      	ldr	r3, [pc, #348]	@ (800d7bc <netif_add+0x174>)
 800d65e:	f240 1227 	movw	r2, #295	@ 0x127
 800d662:	4957      	ldr	r1, [pc, #348]	@ (800d7c0 <netif_add+0x178>)
 800d664:	4857      	ldr	r0, [pc, #348]	@ (800d7c4 <netif_add+0x17c>)
 800d666:	f009 fe25 	bl	80172b4 <iprintf>
 800d66a:	2300      	movs	r3, #0
 800d66c:	e0a2      	b.n	800d7b4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d670:	2b00      	cmp	r3, #0
 800d672:	d108      	bne.n	800d686 <netif_add+0x3e>
 800d674:	4b51      	ldr	r3, [pc, #324]	@ (800d7bc <netif_add+0x174>)
 800d676:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d67a:	4953      	ldr	r1, [pc, #332]	@ (800d7c8 <netif_add+0x180>)
 800d67c:	4851      	ldr	r0, [pc, #324]	@ (800d7c4 <netif_add+0x17c>)
 800d67e:	f009 fe19 	bl	80172b4 <iprintf>
 800d682:	2300      	movs	r3, #0
 800d684:	e096      	b.n	800d7b4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d101      	bne.n	800d690 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d68c:	4b4f      	ldr	r3, [pc, #316]	@ (800d7cc <netif_add+0x184>)
 800d68e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d101      	bne.n	800d69a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d696:	4b4d      	ldr	r3, [pc, #308]	@ (800d7cc <netif_add+0x184>)
 800d698:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d101      	bne.n	800d6a4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d6a0:	4b4a      	ldr	r3, [pc, #296]	@ (800d7cc <netif_add+0x184>)
 800d6a2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	4a45      	ldr	r2, [pc, #276]	@ (800d7d0 <netif_add+0x188>)
 800d6ba:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6a3a      	ldr	r2, [r7, #32]
 800d6d4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d6d6:	4b3f      	ldr	r3, [pc, #252]	@ (800d7d4 <netif_add+0x18c>)
 800d6d8:	781a      	ldrb	r2, [r3, #0]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6e4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	68b9      	ldr	r1, [r7, #8]
 800d6ec:	68f8      	ldr	r0, [r7, #12]
 800d6ee:	f000 f913 	bl	800d918 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	4798      	blx	r3
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d001      	beq.n	800d702 <netif_add+0xba>
    return NULL;
 800d6fe:	2300      	movs	r3, #0
 800d700:	e058      	b.n	800d7b4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d708:	2bff      	cmp	r3, #255	@ 0xff
 800d70a:	d103      	bne.n	800d714 <netif_add+0xcc>
        netif->num = 0;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2200      	movs	r2, #0
 800d710:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800d714:	2300      	movs	r3, #0
 800d716:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d718:	4b2f      	ldr	r3, [pc, #188]	@ (800d7d8 <netif_add+0x190>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	617b      	str	r3, [r7, #20]
 800d71e:	e02b      	b.n	800d778 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d720:	697a      	ldr	r2, [r7, #20]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	429a      	cmp	r2, r3
 800d726:	d106      	bne.n	800d736 <netif_add+0xee>
 800d728:	4b24      	ldr	r3, [pc, #144]	@ (800d7bc <netif_add+0x174>)
 800d72a:	f240 128b 	movw	r2, #395	@ 0x18b
 800d72e:	492b      	ldr	r1, [pc, #172]	@ (800d7dc <netif_add+0x194>)
 800d730:	4824      	ldr	r0, [pc, #144]	@ (800d7c4 <netif_add+0x17c>)
 800d732:	f009 fdbf 	bl	80172b4 <iprintf>
        num_netifs++;
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	3301      	adds	r3, #1
 800d73a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	2bff      	cmp	r3, #255	@ 0xff
 800d740:	dd06      	ble.n	800d750 <netif_add+0x108>
 800d742:	4b1e      	ldr	r3, [pc, #120]	@ (800d7bc <netif_add+0x174>)
 800d744:	f240 128d 	movw	r2, #397	@ 0x18d
 800d748:	4925      	ldr	r1, [pc, #148]	@ (800d7e0 <netif_add+0x198>)
 800d74a:	481e      	ldr	r0, [pc, #120]	@ (800d7c4 <netif_add+0x17c>)
 800d74c:	f009 fdb2 	bl	80172b4 <iprintf>
        if (netif2->num == netif->num) {
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d108      	bne.n	800d772 <netif_add+0x12a>
          netif->num++;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d766:	3301      	adds	r3, #1
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800d770:	e005      	b.n	800d77e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	617b      	str	r3, [r7, #20]
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d1d0      	bne.n	800d720 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d1be      	bne.n	800d702 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d78a:	2bfe      	cmp	r3, #254	@ 0xfe
 800d78c:	d103      	bne.n	800d796 <netif_add+0x14e>
    netif_num = 0;
 800d78e:	4b11      	ldr	r3, [pc, #68]	@ (800d7d4 <netif_add+0x18c>)
 800d790:	2200      	movs	r2, #0
 800d792:	701a      	strb	r2, [r3, #0]
 800d794:	e006      	b.n	800d7a4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d79c:	3301      	adds	r3, #1
 800d79e:	b2da      	uxtb	r2, r3
 800d7a0:	4b0c      	ldr	r3, [pc, #48]	@ (800d7d4 <netif_add+0x18c>)
 800d7a2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d7a4:	4b0c      	ldr	r3, [pc, #48]	@ (800d7d8 <netif_add+0x190>)
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d7ac:	4a0a      	ldr	r2, [pc, #40]	@ (800d7d8 <netif_add+0x190>)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3718      	adds	r7, #24
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	08018a98 	.word	0x08018a98
 800d7c0:	08018b2c 	.word	0x08018b2c
 800d7c4:	08018ae8 	.word	0x08018ae8
 800d7c8:	08018b48 	.word	0x08018b48
 800d7cc:	0801b458 	.word	0x0801b458
 800d7d0:	0800dbf3 	.word	0x0800dbf3
 800d7d4:	20027448 	.word	0x20027448
 800d7d8:	20027440 	.word	0x20027440
 800d7dc:	08018b6c 	.word	0x08018b6c
 800d7e0:	08018b80 	.word	0x08018b80

0800d7e4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d7ee:	6839      	ldr	r1, [r7, #0]
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f002 fb7f 	bl	800fef4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d7f6:	6839      	ldr	r1, [r7, #0]
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f006 fd85 	bl	8014308 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d7fe:	bf00      	nop
 800d800:	3708      	adds	r7, #8
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
	...

0800d808 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b086      	sub	sp, #24
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d106      	bne.n	800d828 <netif_do_set_ipaddr+0x20>
 800d81a:	4b1d      	ldr	r3, [pc, #116]	@ (800d890 <netif_do_set_ipaddr+0x88>)
 800d81c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800d820:	491c      	ldr	r1, [pc, #112]	@ (800d894 <netif_do_set_ipaddr+0x8c>)
 800d822:	481d      	ldr	r0, [pc, #116]	@ (800d898 <netif_do_set_ipaddr+0x90>)
 800d824:	f009 fd46 	bl	80172b4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d106      	bne.n	800d83c <netif_do_set_ipaddr+0x34>
 800d82e:	4b18      	ldr	r3, [pc, #96]	@ (800d890 <netif_do_set_ipaddr+0x88>)
 800d830:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800d834:	4917      	ldr	r1, [pc, #92]	@ (800d894 <netif_do_set_ipaddr+0x8c>)
 800d836:	4818      	ldr	r0, [pc, #96]	@ (800d898 <netif_do_set_ipaddr+0x90>)
 800d838:	f009 fd3c 	bl	80172b4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	3304      	adds	r3, #4
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	429a      	cmp	r2, r3
 800d848:	d01c      	beq.n	800d884 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	3304      	adds	r3, #4
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d85a:	f107 0314 	add.w	r3, r7, #20
 800d85e:	4619      	mov	r1, r3
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f7ff ffbf 	bl	800d7e4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d002      	beq.n	800d872 <netif_do_set_ipaddr+0x6a>
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	e000      	b.n	800d874 <netif_do_set_ipaddr+0x6c>
 800d872:	2300      	movs	r3, #0
 800d874:	68fa      	ldr	r2, [r7, #12]
 800d876:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d878:	2101      	movs	r1, #1
 800d87a:	68f8      	ldr	r0, [r7, #12]
 800d87c:	f000 f8d2 	bl	800da24 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d880:	2301      	movs	r3, #1
 800d882:	e000      	b.n	800d886 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d884:	2300      	movs	r3, #0
}
 800d886:	4618      	mov	r0, r3
 800d888:	3718      	adds	r7, #24
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	08018a98 	.word	0x08018a98
 800d894:	08018bb0 	.word	0x08018bb0
 800d898:	08018ae8 	.word	0x08018ae8

0800d89c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b085      	sub	sp, #20
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	3308      	adds	r3, #8
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d00a      	beq.n	800d8cc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d002      	beq.n	800d8c2 <netif_do_set_netmask+0x26>
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	e000      	b.n	800d8c4 <netif_do_set_netmask+0x28>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	e000      	b.n	800d8ce <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3714      	adds	r7, #20
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr

0800d8da <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d8da:	b480      	push	{r7}
 800d8dc:	b085      	sub	sp, #20
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	60f8      	str	r0, [r7, #12]
 800d8e2:	60b9      	str	r1, [r7, #8]
 800d8e4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	330c      	adds	r3, #12
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d00a      	beq.n	800d90a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d002      	beq.n	800d900 <netif_do_set_gw+0x26>
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	e000      	b.n	800d902 <netif_do_set_gw+0x28>
 800d900:	2300      	movs	r3, #0
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d906:	2301      	movs	r3, #1
 800d908:	e000      	b.n	800d90c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d90a:	2300      	movs	r3, #0
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3714      	adds	r7, #20
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b088      	sub	sp, #32
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
 800d924:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d926:	2300      	movs	r3, #0
 800d928:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d92a:	2300      	movs	r3, #0
 800d92c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d101      	bne.n	800d938 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d934:	4b1c      	ldr	r3, [pc, #112]	@ (800d9a8 <netif_set_addr+0x90>)
 800d936:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d101      	bne.n	800d942 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d93e:	4b1a      	ldr	r3, [pc, #104]	@ (800d9a8 <netif_set_addr+0x90>)
 800d940:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d101      	bne.n	800d94c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d948:	4b17      	ldr	r3, [pc, #92]	@ (800d9a8 <netif_set_addr+0x90>)
 800d94a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d003      	beq.n	800d95a <netif_set_addr+0x42>
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d101      	bne.n	800d95e <netif_set_addr+0x46>
 800d95a:	2301      	movs	r3, #1
 800d95c:	e000      	b.n	800d960 <netif_set_addr+0x48>
 800d95e:	2300      	movs	r3, #0
 800d960:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d006      	beq.n	800d976 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d968:	f107 0310 	add.w	r3, r7, #16
 800d96c:	461a      	mov	r2, r3
 800d96e:	68b9      	ldr	r1, [r7, #8]
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f7ff ff49 	bl	800d808 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d976:	69fa      	ldr	r2, [r7, #28]
 800d978:	6879      	ldr	r1, [r7, #4]
 800d97a:	68f8      	ldr	r0, [r7, #12]
 800d97c:	f7ff ff8e 	bl	800d89c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d980:	69ba      	ldr	r2, [r7, #24]
 800d982:	6839      	ldr	r1, [r7, #0]
 800d984:	68f8      	ldr	r0, [r7, #12]
 800d986:	f7ff ffa8 	bl	800d8da <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d106      	bne.n	800d99e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d990:	f107 0310 	add.w	r3, r7, #16
 800d994:	461a      	mov	r2, r3
 800d996:	68b9      	ldr	r1, [r7, #8]
 800d998:	68f8      	ldr	r0, [r7, #12]
 800d99a:	f7ff ff35 	bl	800d808 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d99e:	bf00      	nop
 800d9a0:	3720      	adds	r7, #32
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	0801b458 	.word	0x0801b458

0800d9ac <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d9b4:	4a04      	ldr	r2, [pc, #16]	@ (800d9c8 <netif_set_default+0x1c>)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d9ba:	bf00      	nop
 800d9bc:	370c      	adds	r7, #12
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop
 800d9c8:	20027444 	.word	0x20027444

0800d9cc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d107      	bne.n	800d9ea <netif_set_up+0x1e>
 800d9da:	4b0f      	ldr	r3, [pc, #60]	@ (800da18 <netif_set_up+0x4c>)
 800d9dc:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800d9e0:	490e      	ldr	r1, [pc, #56]	@ (800da1c <netif_set_up+0x50>)
 800d9e2:	480f      	ldr	r0, [pc, #60]	@ (800da20 <netif_set_up+0x54>)
 800d9e4:	f009 fc66 	bl	80172b4 <iprintf>
 800d9e8:	e013      	b.n	800da12 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d9f0:	f003 0301 	and.w	r3, r3, #1
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d10c      	bne.n	800da12 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d9fe:	f043 0301 	orr.w	r3, r3, #1
 800da02:	b2da      	uxtb	r2, r3
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800da0a:	2103      	movs	r1, #3
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 f809 	bl	800da24 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	08018a98 	.word	0x08018a98
 800da1c:	08018c20 	.word	0x08018c20
 800da20:	08018ae8 	.word	0x08018ae8

0800da24 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	460b      	mov	r3, r1
 800da2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d106      	bne.n	800da44 <netif_issue_reports+0x20>
 800da36:	4b18      	ldr	r3, [pc, #96]	@ (800da98 <netif_issue_reports+0x74>)
 800da38:	f240 326d 	movw	r2, #877	@ 0x36d
 800da3c:	4917      	ldr	r1, [pc, #92]	@ (800da9c <netif_issue_reports+0x78>)
 800da3e:	4818      	ldr	r0, [pc, #96]	@ (800daa0 <netif_issue_reports+0x7c>)
 800da40:	f009 fc38 	bl	80172b4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800da4a:	f003 0304 	and.w	r3, r3, #4
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d01e      	beq.n	800da90 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800da58:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d017      	beq.n	800da90 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800da60:	78fb      	ldrb	r3, [r7, #3]
 800da62:	f003 0301 	and.w	r3, r3, #1
 800da66:	2b00      	cmp	r3, #0
 800da68:	d013      	beq.n	800da92 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	3304      	adds	r3, #4
 800da6e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00e      	beq.n	800da92 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800da7a:	f003 0308 	and.w	r3, r3, #8
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d007      	beq.n	800da92 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	3304      	adds	r3, #4
 800da86:	4619      	mov	r1, r3
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f007 fba7 	bl	80151dc <etharp_request>
 800da8e:	e000      	b.n	800da92 <netif_issue_reports+0x6e>
    return;
 800da90:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800da92:	3708      	adds	r7, #8
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	08018a98 	.word	0x08018a98
 800da9c:	08018c3c 	.word	0x08018c3c
 800daa0:	08018ae8 	.word	0x08018ae8

0800daa4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d107      	bne.n	800dac2 <netif_set_down+0x1e>
 800dab2:	4b12      	ldr	r3, [pc, #72]	@ (800dafc <netif_set_down+0x58>)
 800dab4:	f240 329b 	movw	r2, #923	@ 0x39b
 800dab8:	4911      	ldr	r1, [pc, #68]	@ (800db00 <netif_set_down+0x5c>)
 800daba:	4812      	ldr	r0, [pc, #72]	@ (800db04 <netif_set_down+0x60>)
 800dabc:	f009 fbfa 	bl	80172b4 <iprintf>
 800dac0:	e019      	b.n	800daf6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dac8:	f003 0301 	and.w	r3, r3, #1
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d012      	beq.n	800daf6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dad6:	f023 0301 	bic.w	r3, r3, #1
 800dada:	b2da      	uxtb	r2, r3
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dae8:	f003 0308 	and.w	r3, r3, #8
 800daec:	2b00      	cmp	r3, #0
 800daee:	d002      	beq.n	800daf6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f006 ff31 	bl	8014958 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	08018a98 	.word	0x08018a98
 800db00:	08018c60 	.word	0x08018c60
 800db04:	08018ae8 	.word	0x08018ae8

0800db08 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d107      	bne.n	800db26 <netif_set_link_up+0x1e>
 800db16:	4b13      	ldr	r3, [pc, #76]	@ (800db64 <netif_set_link_up+0x5c>)
 800db18:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800db1c:	4912      	ldr	r1, [pc, #72]	@ (800db68 <netif_set_link_up+0x60>)
 800db1e:	4813      	ldr	r0, [pc, #76]	@ (800db6c <netif_set_link_up+0x64>)
 800db20:	f009 fbc8 	bl	80172b4 <iprintf>
 800db24:	e01b      	b.n	800db5e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db2c:	f003 0304 	and.w	r3, r3, #4
 800db30:	2b00      	cmp	r3, #0
 800db32:	d114      	bne.n	800db5e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db3a:	f043 0304 	orr.w	r3, r3, #4
 800db3e:	b2da      	uxtb	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800db46:	2103      	movs	r1, #3
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7ff ff6b 	bl	800da24 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	69db      	ldr	r3, [r3, #28]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d003      	beq.n	800db5e <netif_set_link_up+0x56>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	69db      	ldr	r3, [r3, #28]
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	08018a98 	.word	0x08018a98
 800db68:	08018c80 	.word	0x08018c80
 800db6c:	08018ae8 	.word	0x08018ae8

0800db70 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d107      	bne.n	800db8e <netif_set_link_down+0x1e>
 800db7e:	4b11      	ldr	r3, [pc, #68]	@ (800dbc4 <netif_set_link_down+0x54>)
 800db80:	f240 4206 	movw	r2, #1030	@ 0x406
 800db84:	4910      	ldr	r1, [pc, #64]	@ (800dbc8 <netif_set_link_down+0x58>)
 800db86:	4811      	ldr	r0, [pc, #68]	@ (800dbcc <netif_set_link_down+0x5c>)
 800db88:	f009 fb94 	bl	80172b4 <iprintf>
 800db8c:	e017      	b.n	800dbbe <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db94:	f003 0304 	and.w	r3, r3, #4
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d010      	beq.n	800dbbe <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dba2:	f023 0304 	bic.w	r3, r3, #4
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	69db      	ldr	r3, [r3, #28]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d003      	beq.n	800dbbe <netif_set_link_down+0x4e>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	69db      	ldr	r3, [r3, #28]
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	08018a98 	.word	0x08018a98
 800dbc8:	08018ca4 	.word	0x08018ca4
 800dbcc:	08018ae8 	.word	0x08018ae8

0800dbd0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d002      	beq.n	800dbe6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	683a      	ldr	r2, [r7, #0]
 800dbe4:	61da      	str	r2, [r3, #28]
  }
}
 800dbe6:	bf00      	nop
 800dbe8:	370c      	adds	r7, #12
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr

0800dbf2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800dbf2:	b480      	push	{r7}
 800dbf4:	b085      	sub	sp, #20
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	60f8      	str	r0, [r7, #12]
 800dbfa:	60b9      	str	r1, [r7, #8]
 800dbfc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800dbfe:	f06f 030b 	mvn.w	r3, #11
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3714      	adds	r7, #20
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr
	...

0800dc10 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b085      	sub	sp, #20
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	4603      	mov	r3, r0
 800dc18:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800dc1a:	79fb      	ldrb	r3, [r7, #7]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d013      	beq.n	800dc48 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800dc20:	4b0d      	ldr	r3, [pc, #52]	@ (800dc58 <netif_get_by_index+0x48>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	60fb      	str	r3, [r7, #12]
 800dc26:	e00c      	b.n	800dc42 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dc2e:	3301      	adds	r3, #1
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	79fa      	ldrb	r2, [r7, #7]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d101      	bne.n	800dc3c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	e006      	b.n	800dc4a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	60fb      	str	r3, [r7, #12]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d1ef      	bne.n	800dc28 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800dc48:	2300      	movs	r3, #0
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3714      	adds	r7, #20
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr
 800dc56:	bf00      	nop
 800dc58:	20027440 	.word	0x20027440

0800dc5c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800dc62:	f008 ffab 	bl	8016bbc <sys_arch_protect>
 800dc66:	6038      	str	r0, [r7, #0]
 800dc68:	4b0d      	ldr	r3, [pc, #52]	@ (800dca0 <pbuf_free_ooseq+0x44>)
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	701a      	strb	r2, [r3, #0]
 800dc6e:	6838      	ldr	r0, [r7, #0]
 800dc70:	f008 ffb2 	bl	8016bd8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dc74:	4b0b      	ldr	r3, [pc, #44]	@ (800dca4 <pbuf_free_ooseq+0x48>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	607b      	str	r3, [r7, #4]
 800dc7a:	e00a      	b.n	800dc92 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d003      	beq.n	800dc8c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f002 f973 	bl	800ff70 <tcp_free_ooseq>
      return;
 800dc8a:	e005      	b.n	800dc98 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	607b      	str	r3, [r7, #4]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d1f1      	bne.n	800dc7c <pbuf_free_ooseq+0x20>
    }
  }
}
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	20027449 	.word	0x20027449
 800dca4:	20027458 	.word	0x20027458

0800dca8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800dcb0:	f7ff ffd4 	bl	800dc5c <pbuf_free_ooseq>
}
 800dcb4:	bf00      	nop
 800dcb6:	3708      	adds	r7, #8
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800dcc2:	f008 ff7b 	bl	8016bbc <sys_arch_protect>
 800dcc6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800dcc8:	4b0f      	ldr	r3, [pc, #60]	@ (800dd08 <pbuf_pool_is_empty+0x4c>)
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800dcce:	4b0e      	ldr	r3, [pc, #56]	@ (800dd08 <pbuf_pool_is_empty+0x4c>)
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f008 ff7f 	bl	8016bd8 <sys_arch_unprotect>

  if (!queued) {
 800dcda:	78fb      	ldrb	r3, [r7, #3]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d10f      	bne.n	800dd00 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800dce0:	2100      	movs	r1, #0
 800dce2:	480a      	ldr	r0, [pc, #40]	@ (800dd0c <pbuf_pool_is_empty+0x50>)
 800dce4:	f7fe feaa 	bl	800ca3c <tcpip_try_callback>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d008      	beq.n	800dd00 <pbuf_pool_is_empty+0x44>
 800dcee:	f008 ff65 	bl	8016bbc <sys_arch_protect>
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	4b04      	ldr	r3, [pc, #16]	@ (800dd08 <pbuf_pool_is_empty+0x4c>)
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	701a      	strb	r2, [r3, #0]
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f008 ff6c 	bl	8016bd8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800dd00:	bf00      	nop
 800dd02:	3708      	adds	r7, #8
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	20027449 	.word	0x20027449
 800dd0c:	0800dca9 	.word	0x0800dca9

0800dd10 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b085      	sub	sp, #20
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	4611      	mov	r1, r2
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	460b      	mov	r3, r1
 800dd20:	80fb      	strh	r3, [r7, #6]
 800dd22:	4613      	mov	r3, r2
 800dd24:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	68ba      	ldr	r2, [r7, #8]
 800dd30:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	88fa      	ldrh	r2, [r7, #6]
 800dd36:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	88ba      	ldrh	r2, [r7, #4]
 800dd3c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800dd3e:	8b3b      	ldrh	r3, [r7, #24]
 800dd40:	b2da      	uxtb	r2, r3
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	7f3a      	ldrb	r2, [r7, #28]
 800dd4a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2201      	movs	r2, #1
 800dd50:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2200      	movs	r2, #0
 800dd56:	73da      	strb	r2, [r3, #15]
}
 800dd58:	bf00      	nop
 800dd5a:	3714      	adds	r7, #20
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr

0800dd64 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b08c      	sub	sp, #48	@ 0x30
 800dd68:	af02      	add	r7, sp, #8
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	71fb      	strb	r3, [r7, #7]
 800dd6e:	460b      	mov	r3, r1
 800dd70:	80bb      	strh	r3, [r7, #4]
 800dd72:	4613      	mov	r3, r2
 800dd74:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800dd76:	79fb      	ldrb	r3, [r7, #7]
 800dd78:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800dd7a:	887b      	ldrh	r3, [r7, #2]
 800dd7c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800dd80:	d07f      	beq.n	800de82 <pbuf_alloc+0x11e>
 800dd82:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800dd86:	f300 80c8 	bgt.w	800df1a <pbuf_alloc+0x1b6>
 800dd8a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800dd8e:	d010      	beq.n	800ddb2 <pbuf_alloc+0x4e>
 800dd90:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800dd94:	f300 80c1 	bgt.w	800df1a <pbuf_alloc+0x1b6>
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d002      	beq.n	800dda2 <pbuf_alloc+0x3e>
 800dd9c:	2b41      	cmp	r3, #65	@ 0x41
 800dd9e:	f040 80bc 	bne.w	800df1a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800dda2:	887a      	ldrh	r2, [r7, #2]
 800dda4:	88bb      	ldrh	r3, [r7, #4]
 800dda6:	4619      	mov	r1, r3
 800dda8:	2000      	movs	r0, #0
 800ddaa:	f000 f8d1 	bl	800df50 <pbuf_alloc_reference>
 800ddae:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800ddb0:	e0bd      	b.n	800df2e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ddba:	88bb      	ldrh	r3, [r7, #4]
 800ddbc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ddbe:	200c      	movs	r0, #12
 800ddc0:	f7ff fb9a 	bl	800d4f8 <memp_malloc>
 800ddc4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d109      	bne.n	800dde0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ddcc:	f7ff ff76 	bl	800dcbc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d002      	beq.n	800dddc <pbuf_alloc+0x78>
            pbuf_free(p);
 800ddd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ddd8:	f000 faa8 	bl	800e32c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800dddc:	2300      	movs	r3, #0
 800ddde:	e0a7      	b.n	800df30 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dde0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dde2:	3303      	adds	r3, #3
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	f023 0303 	bic.w	r3, r3, #3
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	8b7a      	ldrh	r2, [r7, #26]
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	bf28      	it	cs
 800ddf8:	4613      	movcs	r3, r2
 800ddfa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ddfc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ddfe:	3310      	adds	r3, #16
 800de00:	693a      	ldr	r2, [r7, #16]
 800de02:	4413      	add	r3, r2
 800de04:	3303      	adds	r3, #3
 800de06:	f023 0303 	bic.w	r3, r3, #3
 800de0a:	4618      	mov	r0, r3
 800de0c:	89f9      	ldrh	r1, [r7, #14]
 800de0e:	8b7a      	ldrh	r2, [r7, #26]
 800de10:	2300      	movs	r3, #0
 800de12:	9301      	str	r3, [sp, #4]
 800de14:	887b      	ldrh	r3, [r7, #2]
 800de16:	9300      	str	r3, [sp, #0]
 800de18:	460b      	mov	r3, r1
 800de1a:	4601      	mov	r1, r0
 800de1c:	6938      	ldr	r0, [r7, #16]
 800de1e:	f7ff ff77 	bl	800dd10 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	f003 0303 	and.w	r3, r3, #3
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d006      	beq.n	800de3c <pbuf_alloc+0xd8>
 800de2e:	4b42      	ldr	r3, [pc, #264]	@ (800df38 <pbuf_alloc+0x1d4>)
 800de30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800de34:	4941      	ldr	r1, [pc, #260]	@ (800df3c <pbuf_alloc+0x1d8>)
 800de36:	4842      	ldr	r0, [pc, #264]	@ (800df40 <pbuf_alloc+0x1dc>)
 800de38:	f009 fa3c 	bl	80172b4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800de3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800de3e:	3303      	adds	r3, #3
 800de40:	f023 0303 	bic.w	r3, r3, #3
 800de44:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800de48:	d106      	bne.n	800de58 <pbuf_alloc+0xf4>
 800de4a:	4b3b      	ldr	r3, [pc, #236]	@ (800df38 <pbuf_alloc+0x1d4>)
 800de4c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800de50:	493c      	ldr	r1, [pc, #240]	@ (800df44 <pbuf_alloc+0x1e0>)
 800de52:	483b      	ldr	r0, [pc, #236]	@ (800df40 <pbuf_alloc+0x1dc>)
 800de54:	f009 fa2e 	bl	80172b4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800de58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d102      	bne.n	800de64 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	627b      	str	r3, [r7, #36]	@ 0x24
 800de62:	e002      	b.n	800de6a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	693a      	ldr	r2, [r7, #16]
 800de68:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800de6e:	8b7a      	ldrh	r2, [r7, #26]
 800de70:	89fb      	ldrh	r3, [r7, #14]
 800de72:	1ad3      	subs	r3, r2, r3
 800de74:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800de76:	2300      	movs	r3, #0
 800de78:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800de7a:	8b7b      	ldrh	r3, [r7, #26]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d19e      	bne.n	800ddbe <pbuf_alloc+0x5a>
      break;
 800de80:	e055      	b.n	800df2e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800de82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800de84:	3303      	adds	r3, #3
 800de86:	b29b      	uxth	r3, r3
 800de88:	f023 0303 	bic.w	r3, r3, #3
 800de8c:	b29a      	uxth	r2, r3
 800de8e:	88bb      	ldrh	r3, [r7, #4]
 800de90:	3303      	adds	r3, #3
 800de92:	b29b      	uxth	r3, r3
 800de94:	f023 0303 	bic.w	r3, r3, #3
 800de98:	b29b      	uxth	r3, r3
 800de9a:	4413      	add	r3, r2
 800de9c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800de9e:	8b3b      	ldrh	r3, [r7, #24]
 800dea0:	3310      	adds	r3, #16
 800dea2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dea4:	8b3a      	ldrh	r2, [r7, #24]
 800dea6:	88bb      	ldrh	r3, [r7, #4]
 800dea8:	3303      	adds	r3, #3
 800deaa:	f023 0303 	bic.w	r3, r3, #3
 800deae:	429a      	cmp	r2, r3
 800deb0:	d306      	bcc.n	800dec0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800deb2:	8afa      	ldrh	r2, [r7, #22]
 800deb4:	88bb      	ldrh	r3, [r7, #4]
 800deb6:	3303      	adds	r3, #3
 800deb8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800debc:	429a      	cmp	r2, r3
 800debe:	d201      	bcs.n	800dec4 <pbuf_alloc+0x160>
        return NULL;
 800dec0:	2300      	movs	r3, #0
 800dec2:	e035      	b.n	800df30 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800dec4:	8afb      	ldrh	r3, [r7, #22]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7ff f972 	bl	800d1b0 <mem_malloc>
 800decc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800dece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d101      	bne.n	800ded8 <pbuf_alloc+0x174>
        return NULL;
 800ded4:	2300      	movs	r3, #0
 800ded6:	e02b      	b.n	800df30 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ded8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800deda:	3310      	adds	r3, #16
 800dedc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dede:	4413      	add	r3, r2
 800dee0:	3303      	adds	r3, #3
 800dee2:	f023 0303 	bic.w	r3, r3, #3
 800dee6:	4618      	mov	r0, r3
 800dee8:	88b9      	ldrh	r1, [r7, #4]
 800deea:	88ba      	ldrh	r2, [r7, #4]
 800deec:	2300      	movs	r3, #0
 800deee:	9301      	str	r3, [sp, #4]
 800def0:	887b      	ldrh	r3, [r7, #2]
 800def2:	9300      	str	r3, [sp, #0]
 800def4:	460b      	mov	r3, r1
 800def6:	4601      	mov	r1, r0
 800def8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800defa:	f7ff ff09 	bl	800dd10 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800defe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	f003 0303 	and.w	r3, r3, #3
 800df06:	2b00      	cmp	r3, #0
 800df08:	d010      	beq.n	800df2c <pbuf_alloc+0x1c8>
 800df0a:	4b0b      	ldr	r3, [pc, #44]	@ (800df38 <pbuf_alloc+0x1d4>)
 800df0c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800df10:	490d      	ldr	r1, [pc, #52]	@ (800df48 <pbuf_alloc+0x1e4>)
 800df12:	480b      	ldr	r0, [pc, #44]	@ (800df40 <pbuf_alloc+0x1dc>)
 800df14:	f009 f9ce 	bl	80172b4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800df18:	e008      	b.n	800df2c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800df1a:	4b07      	ldr	r3, [pc, #28]	@ (800df38 <pbuf_alloc+0x1d4>)
 800df1c:	f240 1227 	movw	r2, #295	@ 0x127
 800df20:	490a      	ldr	r1, [pc, #40]	@ (800df4c <pbuf_alloc+0x1e8>)
 800df22:	4807      	ldr	r0, [pc, #28]	@ (800df40 <pbuf_alloc+0x1dc>)
 800df24:	f009 f9c6 	bl	80172b4 <iprintf>
      return NULL;
 800df28:	2300      	movs	r3, #0
 800df2a:	e001      	b.n	800df30 <pbuf_alloc+0x1cc>
      break;
 800df2c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800df2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800df30:	4618      	mov	r0, r3
 800df32:	3728      	adds	r7, #40	@ 0x28
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}
 800df38:	08018cc8 	.word	0x08018cc8
 800df3c:	08018cf8 	.word	0x08018cf8
 800df40:	08018d28 	.word	0x08018d28
 800df44:	08018d50 	.word	0x08018d50
 800df48:	08018d84 	.word	0x08018d84
 800df4c:	08018db0 	.word	0x08018db0

0800df50 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b086      	sub	sp, #24
 800df54:	af02      	add	r7, sp, #8
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	460b      	mov	r3, r1
 800df5a:	807b      	strh	r3, [r7, #2]
 800df5c:	4613      	mov	r3, r2
 800df5e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800df60:	883b      	ldrh	r3, [r7, #0]
 800df62:	2b41      	cmp	r3, #65	@ 0x41
 800df64:	d009      	beq.n	800df7a <pbuf_alloc_reference+0x2a>
 800df66:	883b      	ldrh	r3, [r7, #0]
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d006      	beq.n	800df7a <pbuf_alloc_reference+0x2a>
 800df6c:	4b0f      	ldr	r3, [pc, #60]	@ (800dfac <pbuf_alloc_reference+0x5c>)
 800df6e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800df72:	490f      	ldr	r1, [pc, #60]	@ (800dfb0 <pbuf_alloc_reference+0x60>)
 800df74:	480f      	ldr	r0, [pc, #60]	@ (800dfb4 <pbuf_alloc_reference+0x64>)
 800df76:	f009 f99d 	bl	80172b4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800df7a:	200b      	movs	r0, #11
 800df7c:	f7ff fabc 	bl	800d4f8 <memp_malloc>
 800df80:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d101      	bne.n	800df8c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800df88:	2300      	movs	r3, #0
 800df8a:	e00b      	b.n	800dfa4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800df8c:	8879      	ldrh	r1, [r7, #2]
 800df8e:	887a      	ldrh	r2, [r7, #2]
 800df90:	2300      	movs	r3, #0
 800df92:	9301      	str	r3, [sp, #4]
 800df94:	883b      	ldrh	r3, [r7, #0]
 800df96:	9300      	str	r3, [sp, #0]
 800df98:	460b      	mov	r3, r1
 800df9a:	6879      	ldr	r1, [r7, #4]
 800df9c:	68f8      	ldr	r0, [r7, #12]
 800df9e:	f7ff feb7 	bl	800dd10 <pbuf_init_alloced_pbuf>
  return p;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3710      	adds	r7, #16
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	08018cc8 	.word	0x08018cc8
 800dfb0:	08018dcc 	.word	0x08018dcc
 800dfb4:	08018d28 	.word	0x08018d28

0800dfb8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b088      	sub	sp, #32
 800dfbc:	af02      	add	r7, sp, #8
 800dfbe:	607b      	str	r3, [r7, #4]
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	73fb      	strb	r3, [r7, #15]
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	81bb      	strh	r3, [r7, #12]
 800dfc8:	4613      	mov	r3, r2
 800dfca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800dfcc:	7bfb      	ldrb	r3, [r7, #15]
 800dfce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dfd0:	8a7b      	ldrh	r3, [r7, #18]
 800dfd2:	3303      	adds	r3, #3
 800dfd4:	f023 0203 	bic.w	r2, r3, #3
 800dfd8:	89bb      	ldrh	r3, [r7, #12]
 800dfda:	441a      	add	r2, r3
 800dfdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d901      	bls.n	800dfe6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	e018      	b.n	800e018 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800dfe6:	6a3b      	ldr	r3, [r7, #32]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d007      	beq.n	800dffc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dfec:	8a7b      	ldrh	r3, [r7, #18]
 800dfee:	3303      	adds	r3, #3
 800dff0:	f023 0303 	bic.w	r3, r3, #3
 800dff4:	6a3a      	ldr	r2, [r7, #32]
 800dff6:	4413      	add	r3, r2
 800dff8:	617b      	str	r3, [r7, #20]
 800dffa:	e001      	b.n	800e000 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800dffc:	2300      	movs	r3, #0
 800dffe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	89b9      	ldrh	r1, [r7, #12]
 800e004:	89ba      	ldrh	r2, [r7, #12]
 800e006:	2302      	movs	r3, #2
 800e008:	9301      	str	r3, [sp, #4]
 800e00a:	897b      	ldrh	r3, [r7, #10]
 800e00c:	9300      	str	r3, [sp, #0]
 800e00e:	460b      	mov	r3, r1
 800e010:	6979      	ldr	r1, [r7, #20]
 800e012:	f7ff fe7d 	bl	800dd10 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e016:	687b      	ldr	r3, [r7, #4]
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3718      	adds	r7, #24
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	460b      	mov	r3, r1
 800e02a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d106      	bne.n	800e040 <pbuf_realloc+0x20>
 800e032:	4b3a      	ldr	r3, [pc, #232]	@ (800e11c <pbuf_realloc+0xfc>)
 800e034:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800e038:	4939      	ldr	r1, [pc, #228]	@ (800e120 <pbuf_realloc+0x100>)
 800e03a:	483a      	ldr	r0, [pc, #232]	@ (800e124 <pbuf_realloc+0x104>)
 800e03c:	f009 f93a 	bl	80172b4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	891b      	ldrh	r3, [r3, #8]
 800e044:	887a      	ldrh	r2, [r7, #2]
 800e046:	429a      	cmp	r2, r3
 800e048:	d263      	bcs.n	800e112 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	891a      	ldrh	r2, [r3, #8]
 800e04e:	887b      	ldrh	r3, [r7, #2]
 800e050:	1ad3      	subs	r3, r2, r3
 800e052:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e054:	887b      	ldrh	r3, [r7, #2]
 800e056:	817b      	strh	r3, [r7, #10]
  q = p;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e05c:	e018      	b.n	800e090 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	895b      	ldrh	r3, [r3, #10]
 800e062:	897a      	ldrh	r2, [r7, #10]
 800e064:	1ad3      	subs	r3, r2, r3
 800e066:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	891a      	ldrh	r2, [r3, #8]
 800e06c:	893b      	ldrh	r3, [r7, #8]
 800e06e:	1ad3      	subs	r3, r2, r3
 800e070:	b29a      	uxth	r2, r3
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d106      	bne.n	800e090 <pbuf_realloc+0x70>
 800e082:	4b26      	ldr	r3, [pc, #152]	@ (800e11c <pbuf_realloc+0xfc>)
 800e084:	f240 12af 	movw	r2, #431	@ 0x1af
 800e088:	4927      	ldr	r1, [pc, #156]	@ (800e128 <pbuf_realloc+0x108>)
 800e08a:	4826      	ldr	r0, [pc, #152]	@ (800e124 <pbuf_realloc+0x104>)
 800e08c:	f009 f912 	bl	80172b4 <iprintf>
  while (rem_len > q->len) {
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	895b      	ldrh	r3, [r3, #10]
 800e094:	897a      	ldrh	r2, [r7, #10]
 800e096:	429a      	cmp	r2, r3
 800e098:	d8e1      	bhi.n	800e05e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	7b1b      	ldrb	r3, [r3, #12]
 800e09e:	f003 030f 	and.w	r3, r3, #15
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d121      	bne.n	800e0ea <pbuf_realloc+0xca>
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	895b      	ldrh	r3, [r3, #10]
 800e0aa:	897a      	ldrh	r2, [r7, #10]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d01c      	beq.n	800e0ea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	7b5b      	ldrb	r3, [r3, #13]
 800e0b4:	f003 0302 	and.w	r3, r3, #2
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d116      	bne.n	800e0ea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	685a      	ldr	r2, [r3, #4]
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	1ad3      	subs	r3, r2, r3
 800e0c4:	b29a      	uxth	r2, r3
 800e0c6:	897b      	ldrh	r3, [r7, #10]
 800e0c8:	4413      	add	r3, r2
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f7fe ff64 	bl	800cf9c <mem_trim>
 800e0d4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d106      	bne.n	800e0ea <pbuf_realloc+0xca>
 800e0dc:	4b0f      	ldr	r3, [pc, #60]	@ (800e11c <pbuf_realloc+0xfc>)
 800e0de:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800e0e2:	4912      	ldr	r1, [pc, #72]	@ (800e12c <pbuf_realloc+0x10c>)
 800e0e4:	480f      	ldr	r0, [pc, #60]	@ (800e124 <pbuf_realloc+0x104>)
 800e0e6:	f009 f8e5 	bl	80172b4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	897a      	ldrh	r2, [r7, #10]
 800e0ee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	895a      	ldrh	r2, [r3, #10]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d004      	beq.n	800e10a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4618      	mov	r0, r3
 800e106:	f000 f911 	bl	800e32c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2200      	movs	r2, #0
 800e10e:	601a      	str	r2, [r3, #0]
 800e110:	e000      	b.n	800e114 <pbuf_realloc+0xf4>
    return;
 800e112:	bf00      	nop

}
 800e114:	3710      	adds	r7, #16
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	08018cc8 	.word	0x08018cc8
 800e120:	08018de0 	.word	0x08018de0
 800e124:	08018d28 	.word	0x08018d28
 800e128:	08018df8 	.word	0x08018df8
 800e12c:	08018e10 	.word	0x08018e10

0800e130 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b086      	sub	sp, #24
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	4613      	mov	r3, r2
 800e13c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d106      	bne.n	800e152 <pbuf_add_header_impl+0x22>
 800e144:	4b2b      	ldr	r3, [pc, #172]	@ (800e1f4 <pbuf_add_header_impl+0xc4>)
 800e146:	f240 12df 	movw	r2, #479	@ 0x1df
 800e14a:	492b      	ldr	r1, [pc, #172]	@ (800e1f8 <pbuf_add_header_impl+0xc8>)
 800e14c:	482b      	ldr	r0, [pc, #172]	@ (800e1fc <pbuf_add_header_impl+0xcc>)
 800e14e:	f009 f8b1 	bl	80172b4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d003      	beq.n	800e160 <pbuf_add_header_impl+0x30>
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e15e:	d301      	bcc.n	800e164 <pbuf_add_header_impl+0x34>
    return 1;
 800e160:	2301      	movs	r3, #1
 800e162:	e043      	b.n	800e1ec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d101      	bne.n	800e16e <pbuf_add_header_impl+0x3e>
    return 0;
 800e16a:	2300      	movs	r3, #0
 800e16c:	e03e      	b.n	800e1ec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	891a      	ldrh	r2, [r3, #8]
 800e176:	8a7b      	ldrh	r3, [r7, #18]
 800e178:	4413      	add	r3, r2
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	8a7a      	ldrh	r2, [r7, #18]
 800e17e:	429a      	cmp	r2, r3
 800e180:	d901      	bls.n	800e186 <pbuf_add_header_impl+0x56>
    return 1;
 800e182:	2301      	movs	r3, #1
 800e184:	e032      	b.n	800e1ec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	7b1b      	ldrb	r3, [r3, #12]
 800e18a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e18c:	8a3b      	ldrh	r3, [r7, #16]
 800e18e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00c      	beq.n	800e1b0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	685a      	ldr	r2, [r3, #4]
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	425b      	negs	r3, r3
 800e19e:	4413      	add	r3, r2
 800e1a0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	3310      	adds	r3, #16
 800e1a6:	697a      	ldr	r2, [r7, #20]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d20d      	bcs.n	800e1c8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	e01d      	b.n	800e1ec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e1b0:	79fb      	ldrb	r3, [r7, #7]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d006      	beq.n	800e1c4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	685a      	ldr	r2, [r3, #4]
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	425b      	negs	r3, r3
 800e1be:	4413      	add	r3, r2
 800e1c0:	617b      	str	r3, [r7, #20]
 800e1c2:	e001      	b.n	800e1c8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	e011      	b.n	800e1ec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	697a      	ldr	r2, [r7, #20]
 800e1cc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	895a      	ldrh	r2, [r3, #10]
 800e1d2:	8a7b      	ldrh	r3, [r7, #18]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	b29a      	uxth	r2, r3
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	891a      	ldrh	r2, [r3, #8]
 800e1e0:	8a7b      	ldrh	r3, [r7, #18]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	b29a      	uxth	r2, r3
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	811a      	strh	r2, [r3, #8]


  return 0;
 800e1ea:	2300      	movs	r3, #0
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3718      	adds	r7, #24
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	08018cc8 	.word	0x08018cc8
 800e1f8:	08018e2c 	.word	0x08018e2c
 800e1fc:	08018d28 	.word	0x08018d28

0800e200 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e20a:	2200      	movs	r2, #0
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7ff ff8e 	bl	800e130 <pbuf_add_header_impl>
 800e214:	4603      	mov	r3, r0
}
 800e216:	4618      	mov	r0, r3
 800e218:	3708      	adds	r7, #8
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
	...

0800e220 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d106      	bne.n	800e23e <pbuf_remove_header+0x1e>
 800e230:	4b20      	ldr	r3, [pc, #128]	@ (800e2b4 <pbuf_remove_header+0x94>)
 800e232:	f240 224b 	movw	r2, #587	@ 0x24b
 800e236:	4920      	ldr	r1, [pc, #128]	@ (800e2b8 <pbuf_remove_header+0x98>)
 800e238:	4820      	ldr	r0, [pc, #128]	@ (800e2bc <pbuf_remove_header+0x9c>)
 800e23a:	f009 f83b 	bl	80172b4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d003      	beq.n	800e24c <pbuf_remove_header+0x2c>
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e24a:	d301      	bcc.n	800e250 <pbuf_remove_header+0x30>
    return 1;
 800e24c:	2301      	movs	r3, #1
 800e24e:	e02c      	b.n	800e2aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d101      	bne.n	800e25a <pbuf_remove_header+0x3a>
    return 0;
 800e256:	2300      	movs	r3, #0
 800e258:	e027      	b.n	800e2aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	895b      	ldrh	r3, [r3, #10]
 800e262:	89fa      	ldrh	r2, [r7, #14]
 800e264:	429a      	cmp	r2, r3
 800e266:	d908      	bls.n	800e27a <pbuf_remove_header+0x5a>
 800e268:	4b12      	ldr	r3, [pc, #72]	@ (800e2b4 <pbuf_remove_header+0x94>)
 800e26a:	f240 2255 	movw	r2, #597	@ 0x255
 800e26e:	4914      	ldr	r1, [pc, #80]	@ (800e2c0 <pbuf_remove_header+0xa0>)
 800e270:	4812      	ldr	r0, [pc, #72]	@ (800e2bc <pbuf_remove_header+0x9c>)
 800e272:	f009 f81f 	bl	80172b4 <iprintf>
 800e276:	2301      	movs	r3, #1
 800e278:	e017      	b.n	800e2aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	685a      	ldr	r2, [r3, #4]
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	441a      	add	r2, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	895a      	ldrh	r2, [r3, #10]
 800e290:	89fb      	ldrh	r3, [r7, #14]
 800e292:	1ad3      	subs	r3, r2, r3
 800e294:	b29a      	uxth	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	891a      	ldrh	r2, [r3, #8]
 800e29e:	89fb      	ldrh	r3, [r7, #14]
 800e2a0:	1ad3      	subs	r3, r2, r3
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e2a8:	2300      	movs	r3, #0
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3710      	adds	r7, #16
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	08018cc8 	.word	0x08018cc8
 800e2b8:	08018e2c 	.word	0x08018e2c
 800e2bc:	08018d28 	.word	0x08018d28
 800e2c0:	08018e38 	.word	0x08018e38

0800e2c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	807b      	strh	r3, [r7, #2]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e2d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	da08      	bge.n	800e2ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e2dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e2e0:	425b      	negs	r3, r3
 800e2e2:	4619      	mov	r1, r3
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f7ff ff9b 	bl	800e220 <pbuf_remove_header>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	e007      	b.n	800e2fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e2ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e2f2:	787a      	ldrb	r2, [r7, #1]
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7ff ff1a 	bl	800e130 <pbuf_add_header_impl>
 800e2fc:	4603      	mov	r3, r0
  }
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3708      	adds	r7, #8
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e306:	b580      	push	{r7, lr}
 800e308:	b082      	sub	sp, #8
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]
 800e30e:	460b      	mov	r3, r1
 800e310:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e312:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e316:	2201      	movs	r2, #1
 800e318:	4619      	mov	r1, r3
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7ff ffd2 	bl	800e2c4 <pbuf_header_impl>
 800e320:	4603      	mov	r3, r0
}
 800e322:	4618      	mov	r0, r3
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
	...

0800e32c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b088      	sub	sp, #32
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d10b      	bne.n	800e352 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d106      	bne.n	800e34e <pbuf_free+0x22>
 800e340:	4b3b      	ldr	r3, [pc, #236]	@ (800e430 <pbuf_free+0x104>)
 800e342:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800e346:	493b      	ldr	r1, [pc, #236]	@ (800e434 <pbuf_free+0x108>)
 800e348:	483b      	ldr	r0, [pc, #236]	@ (800e438 <pbuf_free+0x10c>)
 800e34a:	f008 ffb3 	bl	80172b4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e34e:	2300      	movs	r3, #0
 800e350:	e069      	b.n	800e426 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e352:	2300      	movs	r3, #0
 800e354:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e356:	e062      	b.n	800e41e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e358:	f008 fc30 	bl	8016bbc <sys_arch_protect>
 800e35c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	7b9b      	ldrb	r3, [r3, #14]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d106      	bne.n	800e374 <pbuf_free+0x48>
 800e366:	4b32      	ldr	r3, [pc, #200]	@ (800e430 <pbuf_free+0x104>)
 800e368:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800e36c:	4933      	ldr	r1, [pc, #204]	@ (800e43c <pbuf_free+0x110>)
 800e36e:	4832      	ldr	r0, [pc, #200]	@ (800e438 <pbuf_free+0x10c>)
 800e370:	f008 ffa0 	bl	80172b4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	7b9b      	ldrb	r3, [r3, #14]
 800e378:	3b01      	subs	r3, #1
 800e37a:	b2da      	uxtb	r2, r3
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	739a      	strb	r2, [r3, #14]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	7b9b      	ldrb	r3, [r3, #14]
 800e384:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e386:	69b8      	ldr	r0, [r7, #24]
 800e388:	f008 fc26 	bl	8016bd8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e38c:	7dfb      	ldrb	r3, [r7, #23]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d143      	bne.n	800e41a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	7b1b      	ldrb	r3, [r3, #12]
 800e39c:	f003 030f 	and.w	r3, r3, #15
 800e3a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	7b5b      	ldrb	r3, [r3, #13]
 800e3a6:	f003 0302 	and.w	r3, r3, #2
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d011      	beq.n	800e3d2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	691b      	ldr	r3, [r3, #16]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d106      	bne.n	800e3c8 <pbuf_free+0x9c>
 800e3ba:	4b1d      	ldr	r3, [pc, #116]	@ (800e430 <pbuf_free+0x104>)
 800e3bc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800e3c0:	491f      	ldr	r1, [pc, #124]	@ (800e440 <pbuf_free+0x114>)
 800e3c2:	481d      	ldr	r0, [pc, #116]	@ (800e438 <pbuf_free+0x10c>)
 800e3c4:	f008 ff76 	bl	80172b4 <iprintf>
        pc->custom_free_function(p);
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	691b      	ldr	r3, [r3, #16]
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	4798      	blx	r3
 800e3d0:	e01d      	b.n	800e40e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e3d2:	7bfb      	ldrb	r3, [r7, #15]
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	d104      	bne.n	800e3e2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e3d8:	6879      	ldr	r1, [r7, #4]
 800e3da:	200c      	movs	r0, #12
 800e3dc:	f7ff f902 	bl	800d5e4 <memp_free>
 800e3e0:	e015      	b.n	800e40e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e3e2:	7bfb      	ldrb	r3, [r7, #15]
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d104      	bne.n	800e3f2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e3e8:	6879      	ldr	r1, [r7, #4]
 800e3ea:	200b      	movs	r0, #11
 800e3ec:	f7ff f8fa 	bl	800d5e4 <memp_free>
 800e3f0:	e00d      	b.n	800e40e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e3f2:	7bfb      	ldrb	r3, [r7, #15]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d103      	bne.n	800e400 <pbuf_free+0xd4>
          mem_free(p);
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f7fe fd3f 	bl	800ce7c <mem_free>
 800e3fe:	e006      	b.n	800e40e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e400:	4b0b      	ldr	r3, [pc, #44]	@ (800e430 <pbuf_free+0x104>)
 800e402:	f240 320f 	movw	r2, #783	@ 0x30f
 800e406:	490f      	ldr	r1, [pc, #60]	@ (800e444 <pbuf_free+0x118>)
 800e408:	480b      	ldr	r0, [pc, #44]	@ (800e438 <pbuf_free+0x10c>)
 800e40a:	f008 ff53 	bl	80172b4 <iprintf>
        }
      }
      count++;
 800e40e:	7ffb      	ldrb	r3, [r7, #31]
 800e410:	3301      	adds	r3, #1
 800e412:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	607b      	str	r3, [r7, #4]
 800e418:	e001      	b.n	800e41e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e41a:	2300      	movs	r3, #0
 800e41c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d199      	bne.n	800e358 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e424:	7ffb      	ldrb	r3, [r7, #31]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3720      	adds	r7, #32
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	08018cc8 	.word	0x08018cc8
 800e434:	08018e2c 	.word	0x08018e2c
 800e438:	08018d28 	.word	0x08018d28
 800e43c:	08018e58 	.word	0x08018e58
 800e440:	08018e70 	.word	0x08018e70
 800e444:	08018e94 	.word	0x08018e94

0800e448 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e448:	b480      	push	{r7}
 800e44a:	b085      	sub	sp, #20
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e450:	2300      	movs	r3, #0
 800e452:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e454:	e005      	b.n	800e462 <pbuf_clen+0x1a>
    ++len;
 800e456:	89fb      	ldrh	r3, [r7, #14]
 800e458:	3301      	adds	r3, #1
 800e45a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d1f6      	bne.n	800e456 <pbuf_clen+0xe>
  }
  return len;
 800e468:	89fb      	ldrh	r3, [r7, #14]
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3714      	adds	r7, #20
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
	...

0800e478 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d016      	beq.n	800e4b4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e486:	f008 fb99 	bl	8016bbc <sys_arch_protect>
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	7b9b      	ldrb	r3, [r3, #14]
 800e490:	3301      	adds	r3, #1
 800e492:	b2da      	uxtb	r2, r3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	739a      	strb	r2, [r3, #14]
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f008 fb9d 	bl	8016bd8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	7b9b      	ldrb	r3, [r3, #14]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d106      	bne.n	800e4b4 <pbuf_ref+0x3c>
 800e4a6:	4b05      	ldr	r3, [pc, #20]	@ (800e4bc <pbuf_ref+0x44>)
 800e4a8:	f240 3242 	movw	r2, #834	@ 0x342
 800e4ac:	4904      	ldr	r1, [pc, #16]	@ (800e4c0 <pbuf_ref+0x48>)
 800e4ae:	4805      	ldr	r0, [pc, #20]	@ (800e4c4 <pbuf_ref+0x4c>)
 800e4b0:	f008 ff00 	bl	80172b4 <iprintf>
  }
}
 800e4b4:	bf00      	nop
 800e4b6:	3710      	adds	r7, #16
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	08018cc8 	.word	0x08018cc8
 800e4c0:	08018ea8 	.word	0x08018ea8
 800e4c4:	08018d28 	.word	0x08018d28

0800e4c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d002      	beq.n	800e4de <pbuf_cat+0x16>
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d107      	bne.n	800e4ee <pbuf_cat+0x26>
 800e4de:	4b20      	ldr	r3, [pc, #128]	@ (800e560 <pbuf_cat+0x98>)
 800e4e0:	f240 3259 	movw	r2, #857	@ 0x359
 800e4e4:	491f      	ldr	r1, [pc, #124]	@ (800e564 <pbuf_cat+0x9c>)
 800e4e6:	4820      	ldr	r0, [pc, #128]	@ (800e568 <pbuf_cat+0xa0>)
 800e4e8:	f008 fee4 	bl	80172b4 <iprintf>
 800e4ec:	e034      	b.n	800e558 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	60fb      	str	r3, [r7, #12]
 800e4f2:	e00a      	b.n	800e50a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	891a      	ldrh	r2, [r3, #8]
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	891b      	ldrh	r3, [r3, #8]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	b29a      	uxth	r2, r3
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	60fb      	str	r3, [r7, #12]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1f0      	bne.n	800e4f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	891a      	ldrh	r2, [r3, #8]
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	895b      	ldrh	r3, [r3, #10]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d006      	beq.n	800e52c <pbuf_cat+0x64>
 800e51e:	4b10      	ldr	r3, [pc, #64]	@ (800e560 <pbuf_cat+0x98>)
 800e520:	f240 3262 	movw	r2, #866	@ 0x362
 800e524:	4911      	ldr	r1, [pc, #68]	@ (800e56c <pbuf_cat+0xa4>)
 800e526:	4810      	ldr	r0, [pc, #64]	@ (800e568 <pbuf_cat+0xa0>)
 800e528:	f008 fec4 	bl	80172b4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d006      	beq.n	800e542 <pbuf_cat+0x7a>
 800e534:	4b0a      	ldr	r3, [pc, #40]	@ (800e560 <pbuf_cat+0x98>)
 800e536:	f240 3263 	movw	r2, #867	@ 0x363
 800e53a:	490d      	ldr	r1, [pc, #52]	@ (800e570 <pbuf_cat+0xa8>)
 800e53c:	480a      	ldr	r0, [pc, #40]	@ (800e568 <pbuf_cat+0xa0>)
 800e53e:	f008 feb9 	bl	80172b4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	891a      	ldrh	r2, [r3, #8]
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	891b      	ldrh	r3, [r3, #8]
 800e54a:	4413      	add	r3, r2
 800e54c:	b29a      	uxth	r2, r3
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	683a      	ldr	r2, [r7, #0]
 800e556:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e558:	3710      	adds	r7, #16
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	08018cc8 	.word	0x08018cc8
 800e564:	08018ebc 	.word	0x08018ebc
 800e568:	08018d28 	.word	0x08018d28
 800e56c:	08018ef4 	.word	0x08018ef4
 800e570:	08018f24 	.word	0x08018f24

0800e574 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e57e:	2300      	movs	r3, #0
 800e580:	617b      	str	r3, [r7, #20]
 800e582:	2300      	movs	r3, #0
 800e584:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d008      	beq.n	800e59e <pbuf_copy+0x2a>
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d005      	beq.n	800e59e <pbuf_copy+0x2a>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	891a      	ldrh	r2, [r3, #8]
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	891b      	ldrh	r3, [r3, #8]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d209      	bcs.n	800e5b2 <pbuf_copy+0x3e>
 800e59e:	4b57      	ldr	r3, [pc, #348]	@ (800e6fc <pbuf_copy+0x188>)
 800e5a0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800e5a4:	4956      	ldr	r1, [pc, #344]	@ (800e700 <pbuf_copy+0x18c>)
 800e5a6:	4857      	ldr	r0, [pc, #348]	@ (800e704 <pbuf_copy+0x190>)
 800e5a8:	f008 fe84 	bl	80172b4 <iprintf>
 800e5ac:	f06f 030f 	mvn.w	r3, #15
 800e5b0:	e09f      	b.n	800e6f2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	895b      	ldrh	r3, [r3, #10]
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	1ad2      	subs	r2, r2, r3
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	895b      	ldrh	r3, [r3, #10]
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	1acb      	subs	r3, r1, r3
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d306      	bcc.n	800e5d8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	895b      	ldrh	r3, [r3, #10]
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	1ad3      	subs	r3, r2, r3
 800e5d4:	60fb      	str	r3, [r7, #12]
 800e5d6:	e005      	b.n	800e5e4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	895b      	ldrh	r3, [r3, #10]
 800e5dc:	461a      	mov	r2, r3
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	685a      	ldr	r2, [r3, #4]
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	18d0      	adds	r0, r2, r3
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	685a      	ldr	r2, [r3, #4]
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	4413      	add	r3, r2
 800e5f4:	68fa      	ldr	r2, [r7, #12]
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	f009 f887 	bl	801770a <memcpy>
    offset_to += len;
 800e5fc:	697a      	ldr	r2, [r7, #20]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	4413      	add	r3, r2
 800e602:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e604:	693a      	ldr	r2, [r7, #16]
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	4413      	add	r3, r2
 800e60a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	895b      	ldrh	r3, [r3, #10]
 800e610:	461a      	mov	r2, r3
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	4293      	cmp	r3, r2
 800e616:	d906      	bls.n	800e626 <pbuf_copy+0xb2>
 800e618:	4b38      	ldr	r3, [pc, #224]	@ (800e6fc <pbuf_copy+0x188>)
 800e61a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800e61e:	493a      	ldr	r1, [pc, #232]	@ (800e708 <pbuf_copy+0x194>)
 800e620:	4838      	ldr	r0, [pc, #224]	@ (800e704 <pbuf_copy+0x190>)
 800e622:	f008 fe47 	bl	80172b4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	895b      	ldrh	r3, [r3, #10]
 800e62a:	461a      	mov	r2, r3
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	4293      	cmp	r3, r2
 800e630:	d906      	bls.n	800e640 <pbuf_copy+0xcc>
 800e632:	4b32      	ldr	r3, [pc, #200]	@ (800e6fc <pbuf_copy+0x188>)
 800e634:	f240 32da 	movw	r2, #986	@ 0x3da
 800e638:	4934      	ldr	r1, [pc, #208]	@ (800e70c <pbuf_copy+0x198>)
 800e63a:	4832      	ldr	r0, [pc, #200]	@ (800e704 <pbuf_copy+0x190>)
 800e63c:	f008 fe3a 	bl	80172b4 <iprintf>
    if (offset_from >= p_from->len) {
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	895b      	ldrh	r3, [r3, #10]
 800e644:	461a      	mov	r2, r3
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	4293      	cmp	r3, r2
 800e64a:	d304      	bcc.n	800e656 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e64c:	2300      	movs	r3, #0
 800e64e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	895b      	ldrh	r3, [r3, #10]
 800e65a:	461a      	mov	r2, r3
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	4293      	cmp	r3, r2
 800e660:	d114      	bne.n	800e68c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e662:	2300      	movs	r3, #0
 800e664:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d10c      	bne.n	800e68c <pbuf_copy+0x118>
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d009      	beq.n	800e68c <pbuf_copy+0x118>
 800e678:	4b20      	ldr	r3, [pc, #128]	@ (800e6fc <pbuf_copy+0x188>)
 800e67a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800e67e:	4924      	ldr	r1, [pc, #144]	@ (800e710 <pbuf_copy+0x19c>)
 800e680:	4820      	ldr	r0, [pc, #128]	@ (800e704 <pbuf_copy+0x190>)
 800e682:	f008 fe17 	bl	80172b4 <iprintf>
 800e686:	f06f 030f 	mvn.w	r3, #15
 800e68a:	e032      	b.n	800e6f2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d013      	beq.n	800e6ba <pbuf_copy+0x146>
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	895a      	ldrh	r2, [r3, #10]
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	891b      	ldrh	r3, [r3, #8]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d10d      	bne.n	800e6ba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d009      	beq.n	800e6ba <pbuf_copy+0x146>
 800e6a6:	4b15      	ldr	r3, [pc, #84]	@ (800e6fc <pbuf_copy+0x188>)
 800e6a8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800e6ac:	4919      	ldr	r1, [pc, #100]	@ (800e714 <pbuf_copy+0x1a0>)
 800e6ae:	4815      	ldr	r0, [pc, #84]	@ (800e704 <pbuf_copy+0x190>)
 800e6b0:	f008 fe00 	bl	80172b4 <iprintf>
 800e6b4:	f06f 0305 	mvn.w	r3, #5
 800e6b8:	e01b      	b.n	800e6f2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d013      	beq.n	800e6e8 <pbuf_copy+0x174>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	895a      	ldrh	r2, [r3, #10]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	891b      	ldrh	r3, [r3, #8]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d10d      	bne.n	800e6e8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d009      	beq.n	800e6e8 <pbuf_copy+0x174>
 800e6d4:	4b09      	ldr	r3, [pc, #36]	@ (800e6fc <pbuf_copy+0x188>)
 800e6d6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e6da:	490e      	ldr	r1, [pc, #56]	@ (800e714 <pbuf_copy+0x1a0>)
 800e6dc:	4809      	ldr	r0, [pc, #36]	@ (800e704 <pbuf_copy+0x190>)
 800e6de:	f008 fde9 	bl	80172b4 <iprintf>
 800e6e2:	f06f 0305 	mvn.w	r3, #5
 800e6e6:	e004      	b.n	800e6f2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	f47f af61 	bne.w	800e5b2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e6f0:	2300      	movs	r3, #0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3718      	adds	r7, #24
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	08018cc8 	.word	0x08018cc8
 800e700:	08018f70 	.word	0x08018f70
 800e704:	08018d28 	.word	0x08018d28
 800e708:	08018fa0 	.word	0x08018fa0
 800e70c:	08018fb8 	.word	0x08018fb8
 800e710:	08018fd4 	.word	0x08018fd4
 800e714:	08018fe4 	.word	0x08018fe4

0800e718 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b088      	sub	sp, #32
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	4611      	mov	r1, r2
 800e724:	461a      	mov	r2, r3
 800e726:	460b      	mov	r3, r1
 800e728:	80fb      	strh	r3, [r7, #6]
 800e72a:	4613      	mov	r3, r2
 800e72c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e72e:	2300      	movs	r3, #0
 800e730:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e732:	2300      	movs	r3, #0
 800e734:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d108      	bne.n	800e74e <pbuf_copy_partial+0x36>
 800e73c:	4b2b      	ldr	r3, [pc, #172]	@ (800e7ec <pbuf_copy_partial+0xd4>)
 800e73e:	f240 420a 	movw	r2, #1034	@ 0x40a
 800e742:	492b      	ldr	r1, [pc, #172]	@ (800e7f0 <pbuf_copy_partial+0xd8>)
 800e744:	482b      	ldr	r0, [pc, #172]	@ (800e7f4 <pbuf_copy_partial+0xdc>)
 800e746:	f008 fdb5 	bl	80172b4 <iprintf>
 800e74a:	2300      	movs	r3, #0
 800e74c:	e04a      	b.n	800e7e4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d108      	bne.n	800e766 <pbuf_copy_partial+0x4e>
 800e754:	4b25      	ldr	r3, [pc, #148]	@ (800e7ec <pbuf_copy_partial+0xd4>)
 800e756:	f240 420b 	movw	r2, #1035	@ 0x40b
 800e75a:	4927      	ldr	r1, [pc, #156]	@ (800e7f8 <pbuf_copy_partial+0xe0>)
 800e75c:	4825      	ldr	r0, [pc, #148]	@ (800e7f4 <pbuf_copy_partial+0xdc>)
 800e75e:	f008 fda9 	bl	80172b4 <iprintf>
 800e762:	2300      	movs	r3, #0
 800e764:	e03e      	b.n	800e7e4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	61fb      	str	r3, [r7, #28]
 800e76a:	e034      	b.n	800e7d6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e76c:	88bb      	ldrh	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d00a      	beq.n	800e788 <pbuf_copy_partial+0x70>
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	895b      	ldrh	r3, [r3, #10]
 800e776:	88ba      	ldrh	r2, [r7, #4]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d305      	bcc.n	800e788 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	895b      	ldrh	r3, [r3, #10]
 800e780:	88ba      	ldrh	r2, [r7, #4]
 800e782:	1ad3      	subs	r3, r2, r3
 800e784:	80bb      	strh	r3, [r7, #4]
 800e786:	e023      	b.n	800e7d0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e788:	69fb      	ldr	r3, [r7, #28]
 800e78a:	895a      	ldrh	r2, [r3, #10]
 800e78c:	88bb      	ldrh	r3, [r7, #4]
 800e78e:	1ad3      	subs	r3, r2, r3
 800e790:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e792:	8b3a      	ldrh	r2, [r7, #24]
 800e794:	88fb      	ldrh	r3, [r7, #6]
 800e796:	429a      	cmp	r2, r3
 800e798:	d901      	bls.n	800e79e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e79a:	88fb      	ldrh	r3, [r7, #6]
 800e79c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e79e:	8b7b      	ldrh	r3, [r7, #26]
 800e7a0:	68ba      	ldr	r2, [r7, #8]
 800e7a2:	18d0      	adds	r0, r2, r3
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	685a      	ldr	r2, [r3, #4]
 800e7a8:	88bb      	ldrh	r3, [r7, #4]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	8b3a      	ldrh	r2, [r7, #24]
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	f008 ffab 	bl	801770a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e7b4:	8afa      	ldrh	r2, [r7, #22]
 800e7b6:	8b3b      	ldrh	r3, [r7, #24]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e7bc:	8b7a      	ldrh	r2, [r7, #26]
 800e7be:	8b3b      	ldrh	r3, [r7, #24]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e7c4:	88fa      	ldrh	r2, [r7, #6]
 800e7c6:	8b3b      	ldrh	r3, [r7, #24]
 800e7c8:	1ad3      	subs	r3, r2, r3
 800e7ca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e7d0:	69fb      	ldr	r3, [r7, #28]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	61fb      	str	r3, [r7, #28]
 800e7d6:	88fb      	ldrh	r3, [r7, #6]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d002      	beq.n	800e7e2 <pbuf_copy_partial+0xca>
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d1c4      	bne.n	800e76c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e7e2:	8afb      	ldrh	r3, [r7, #22]
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3720      	adds	r7, #32
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}
 800e7ec:	08018cc8 	.word	0x08018cc8
 800e7f0:	08019010 	.word	0x08019010
 800e7f4:	08018d28 	.word	0x08018d28
 800e7f8:	08019030 	.word	0x08019030

0800e7fc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	4603      	mov	r3, r0
 800e804:	603a      	str	r2, [r7, #0]
 800e806:	71fb      	strb	r3, [r7, #7]
 800e808:	460b      	mov	r3, r1
 800e80a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	8919      	ldrh	r1, [r3, #8]
 800e810:	88ba      	ldrh	r2, [r7, #4]
 800e812:	79fb      	ldrb	r3, [r7, #7]
 800e814:	4618      	mov	r0, r3
 800e816:	f7ff faa5 	bl	800dd64 <pbuf_alloc>
 800e81a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d101      	bne.n	800e826 <pbuf_clone+0x2a>
    return NULL;
 800e822:	2300      	movs	r3, #0
 800e824:	e011      	b.n	800e84a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e826:	6839      	ldr	r1, [r7, #0]
 800e828:	68f8      	ldr	r0, [r7, #12]
 800e82a:	f7ff fea3 	bl	800e574 <pbuf_copy>
 800e82e:	4603      	mov	r3, r0
 800e830:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e832:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d006      	beq.n	800e848 <pbuf_clone+0x4c>
 800e83a:	4b06      	ldr	r3, [pc, #24]	@ (800e854 <pbuf_clone+0x58>)
 800e83c:	f240 5224 	movw	r2, #1316	@ 0x524
 800e840:	4905      	ldr	r1, [pc, #20]	@ (800e858 <pbuf_clone+0x5c>)
 800e842:	4806      	ldr	r0, [pc, #24]	@ (800e85c <pbuf_clone+0x60>)
 800e844:	f008 fd36 	bl	80172b4 <iprintf>
  return q;
 800e848:	68fb      	ldr	r3, [r7, #12]
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3710      	adds	r7, #16
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	08018cc8 	.word	0x08018cc8
 800e858:	0801913c 	.word	0x0801913c
 800e85c:	08018d28 	.word	0x08018d28

0800e860 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e864:	f008 fc26 	bl	80170b4 <rand>
 800e868:	4603      	mov	r3, r0
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e870:	b29b      	uxth	r3, r3
 800e872:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e876:	b29a      	uxth	r2, r3
 800e878:	4b01      	ldr	r3, [pc, #4]	@ (800e880 <tcp_init+0x20>)
 800e87a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e87c:	bf00      	nop
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	20000024 	.word	0x20000024

0800e884 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	7d1b      	ldrb	r3, [r3, #20]
 800e890:	2b01      	cmp	r3, #1
 800e892:	d105      	bne.n	800e8a0 <tcp_free+0x1c>
 800e894:	4b06      	ldr	r3, [pc, #24]	@ (800e8b0 <tcp_free+0x2c>)
 800e896:	22d4      	movs	r2, #212	@ 0xd4
 800e898:	4906      	ldr	r1, [pc, #24]	@ (800e8b4 <tcp_free+0x30>)
 800e89a:	4807      	ldr	r0, [pc, #28]	@ (800e8b8 <tcp_free+0x34>)
 800e89c:	f008 fd0a 	bl	80172b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e8a0:	6879      	ldr	r1, [r7, #4]
 800e8a2:	2001      	movs	r0, #1
 800e8a4:	f7fe fe9e 	bl	800d5e4 <memp_free>
}
 800e8a8:	bf00      	nop
 800e8aa:	3708      	adds	r7, #8
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	080191c8 	.word	0x080191c8
 800e8b4:	080191f8 	.word	0x080191f8
 800e8b8:	0801920c 	.word	0x0801920c

0800e8bc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b082      	sub	sp, #8
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	7d1b      	ldrb	r3, [r3, #20]
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	d105      	bne.n	800e8d8 <tcp_free_listen+0x1c>
 800e8cc:	4b06      	ldr	r3, [pc, #24]	@ (800e8e8 <tcp_free_listen+0x2c>)
 800e8ce:	22df      	movs	r2, #223	@ 0xdf
 800e8d0:	4906      	ldr	r1, [pc, #24]	@ (800e8ec <tcp_free_listen+0x30>)
 800e8d2:	4807      	ldr	r0, [pc, #28]	@ (800e8f0 <tcp_free_listen+0x34>)
 800e8d4:	f008 fcee 	bl	80172b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e8d8:	6879      	ldr	r1, [r7, #4]
 800e8da:	2002      	movs	r0, #2
 800e8dc:	f7fe fe82 	bl	800d5e4 <memp_free>
}
 800e8e0:	bf00      	nop
 800e8e2:	3708      	adds	r7, #8
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	080191c8 	.word	0x080191c8
 800e8ec:	08019234 	.word	0x08019234
 800e8f0:	0801920c 	.word	0x0801920c

0800e8f4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e8f8:	f000 fea4 	bl	800f644 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e8fc:	4b07      	ldr	r3, [pc, #28]	@ (800e91c <tcp_tmr+0x28>)
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	3301      	adds	r3, #1
 800e902:	b2da      	uxtb	r2, r3
 800e904:	4b05      	ldr	r3, [pc, #20]	@ (800e91c <tcp_tmr+0x28>)
 800e906:	701a      	strb	r2, [r3, #0]
 800e908:	4b04      	ldr	r3, [pc, #16]	@ (800e91c <tcp_tmr+0x28>)
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	f003 0301 	and.w	r3, r3, #1
 800e910:	2b00      	cmp	r3, #0
 800e912:	d001      	beq.n	800e918 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e914:	f000 fb54 	bl	800efc0 <tcp_slowtmr>
  }
}
 800e918:	bf00      	nop
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	20027461 	.word	0x20027461

0800e920 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d105      	bne.n	800e93c <tcp_remove_listener+0x1c>
 800e930:	4b0d      	ldr	r3, [pc, #52]	@ (800e968 <tcp_remove_listener+0x48>)
 800e932:	22ff      	movs	r2, #255	@ 0xff
 800e934:	490d      	ldr	r1, [pc, #52]	@ (800e96c <tcp_remove_listener+0x4c>)
 800e936:	480e      	ldr	r0, [pc, #56]	@ (800e970 <tcp_remove_listener+0x50>)
 800e938:	f008 fcbc 	bl	80172b4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	60fb      	str	r3, [r7, #12]
 800e940:	e00a      	b.n	800e958 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e946:	683a      	ldr	r2, [r7, #0]
 800e948:	429a      	cmp	r2, r3
 800e94a:	d102      	bne.n	800e952 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2200      	movs	r2, #0
 800e950:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	60fb      	str	r3, [r7, #12]
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d1f1      	bne.n	800e942 <tcp_remove_listener+0x22>
    }
  }
}
 800e95e:	bf00      	nop
 800e960:	bf00      	nop
 800e962:	3710      	adds	r7, #16
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	080191c8 	.word	0x080191c8
 800e96c:	08019250 	.word	0x08019250
 800e970:	0801920c 	.word	0x0801920c

0800e974 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d106      	bne.n	800e990 <tcp_listen_closed+0x1c>
 800e982:	4b14      	ldr	r3, [pc, #80]	@ (800e9d4 <tcp_listen_closed+0x60>)
 800e984:	f240 1211 	movw	r2, #273	@ 0x111
 800e988:	4913      	ldr	r1, [pc, #76]	@ (800e9d8 <tcp_listen_closed+0x64>)
 800e98a:	4814      	ldr	r0, [pc, #80]	@ (800e9dc <tcp_listen_closed+0x68>)
 800e98c:	f008 fc92 	bl	80172b4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	7d1b      	ldrb	r3, [r3, #20]
 800e994:	2b01      	cmp	r3, #1
 800e996:	d006      	beq.n	800e9a6 <tcp_listen_closed+0x32>
 800e998:	4b0e      	ldr	r3, [pc, #56]	@ (800e9d4 <tcp_listen_closed+0x60>)
 800e99a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800e99e:	4910      	ldr	r1, [pc, #64]	@ (800e9e0 <tcp_listen_closed+0x6c>)
 800e9a0:	480e      	ldr	r0, [pc, #56]	@ (800e9dc <tcp_listen_closed+0x68>)
 800e9a2:	f008 fc87 	bl	80172b4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	60fb      	str	r3, [r7, #12]
 800e9aa:	e00b      	b.n	800e9c4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e9ac:	4a0d      	ldr	r2, [pc, #52]	@ (800e9e4 <tcp_listen_closed+0x70>)
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	6879      	ldr	r1, [r7, #4]
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7ff ffb1 	bl	800e920 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	60fb      	str	r3, [r7, #12]
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	2b03      	cmp	r3, #3
 800e9c8:	d9f0      	bls.n	800e9ac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e9ca:	bf00      	nop
 800e9cc:	bf00      	nop
 800e9ce:	3710      	adds	r7, #16
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	080191c8 	.word	0x080191c8
 800e9d8:	08019278 	.word	0x08019278
 800e9dc:	0801920c 	.word	0x0801920c
 800e9e0:	08019284 	.word	0x08019284
 800e9e4:	0801b430 	.word	0x0801b430

0800e9e8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e9e8:	b5b0      	push	{r4, r5, r7, lr}
 800e9ea:	b088      	sub	sp, #32
 800e9ec:	af04      	add	r7, sp, #16
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d106      	bne.n	800ea08 <tcp_close_shutdown+0x20>
 800e9fa:	4b63      	ldr	r3, [pc, #396]	@ (800eb88 <tcp_close_shutdown+0x1a0>)
 800e9fc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800ea00:	4962      	ldr	r1, [pc, #392]	@ (800eb8c <tcp_close_shutdown+0x1a4>)
 800ea02:	4863      	ldr	r0, [pc, #396]	@ (800eb90 <tcp_close_shutdown+0x1a8>)
 800ea04:	f008 fc56 	bl	80172b4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ea08:	78fb      	ldrb	r3, [r7, #3]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d066      	beq.n	800eadc <tcp_close_shutdown+0xf4>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	7d1b      	ldrb	r3, [r3, #20]
 800ea12:	2b04      	cmp	r3, #4
 800ea14:	d003      	beq.n	800ea1e <tcp_close_shutdown+0x36>
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	7d1b      	ldrb	r3, [r3, #20]
 800ea1a:	2b07      	cmp	r3, #7
 800ea1c:	d15e      	bne.n	800eadc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d104      	bne.n	800ea30 <tcp_close_shutdown+0x48>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea2a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ea2e:	d055      	beq.n	800eadc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	8b5b      	ldrh	r3, [r3, #26]
 800ea34:	f003 0310 	and.w	r3, r3, #16
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d106      	bne.n	800ea4a <tcp_close_shutdown+0x62>
 800ea3c:	4b52      	ldr	r3, [pc, #328]	@ (800eb88 <tcp_close_shutdown+0x1a0>)
 800ea3e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800ea42:	4954      	ldr	r1, [pc, #336]	@ (800eb94 <tcp_close_shutdown+0x1ac>)
 800ea44:	4852      	ldr	r0, [pc, #328]	@ (800eb90 <tcp_close_shutdown+0x1a8>)
 800ea46:	f008 fc35 	bl	80172b4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ea52:	687d      	ldr	r5, [r7, #4]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	3304      	adds	r3, #4
 800ea58:	687a      	ldr	r2, [r7, #4]
 800ea5a:	8ad2      	ldrh	r2, [r2, #22]
 800ea5c:	6879      	ldr	r1, [r7, #4]
 800ea5e:	8b09      	ldrh	r1, [r1, #24]
 800ea60:	9102      	str	r1, [sp, #8]
 800ea62:	9201      	str	r2, [sp, #4]
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	462b      	mov	r3, r5
 800ea68:	4622      	mov	r2, r4
 800ea6a:	4601      	mov	r1, r0
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f004 fe8d 	bl	801378c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f001 f8c8 	bl	800fc08 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ea78:	4b47      	ldr	r3, [pc, #284]	@ (800eb98 <tcp_close_shutdown+0x1b0>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	687a      	ldr	r2, [r7, #4]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d105      	bne.n	800ea8e <tcp_close_shutdown+0xa6>
 800ea82:	4b45      	ldr	r3, [pc, #276]	@ (800eb98 <tcp_close_shutdown+0x1b0>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	68db      	ldr	r3, [r3, #12]
 800ea88:	4a43      	ldr	r2, [pc, #268]	@ (800eb98 <tcp_close_shutdown+0x1b0>)
 800ea8a:	6013      	str	r3, [r2, #0]
 800ea8c:	e013      	b.n	800eab6 <tcp_close_shutdown+0xce>
 800ea8e:	4b42      	ldr	r3, [pc, #264]	@ (800eb98 <tcp_close_shutdown+0x1b0>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	60fb      	str	r3, [r7, #12]
 800ea94:	e00c      	b.n	800eab0 <tcp_close_shutdown+0xc8>
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	68db      	ldr	r3, [r3, #12]
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d104      	bne.n	800eaaa <tcp_close_shutdown+0xc2>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	68da      	ldr	r2, [r3, #12]
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	60da      	str	r2, [r3, #12]
 800eaa8:	e005      	b.n	800eab6 <tcp_close_shutdown+0xce>
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	68db      	ldr	r3, [r3, #12]
 800eaae:	60fb      	str	r3, [r7, #12]
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d1ef      	bne.n	800ea96 <tcp_close_shutdown+0xae>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2200      	movs	r2, #0
 800eaba:	60da      	str	r2, [r3, #12]
 800eabc:	4b37      	ldr	r3, [pc, #220]	@ (800eb9c <tcp_close_shutdown+0x1b4>)
 800eabe:	2201      	movs	r2, #1
 800eac0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800eac2:	4b37      	ldr	r3, [pc, #220]	@ (800eba0 <tcp_close_shutdown+0x1b8>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d102      	bne.n	800ead2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800eacc:	f003 fd5c 	bl	8012588 <tcp_trigger_input_pcb_close>
 800ead0:	e002      	b.n	800ead8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f7ff fed6 	bl	800e884 <tcp_free>
      }
      return ERR_OK;
 800ead8:	2300      	movs	r3, #0
 800eada:	e050      	b.n	800eb7e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	7d1b      	ldrb	r3, [r3, #20]
 800eae0:	2b02      	cmp	r3, #2
 800eae2:	d03b      	beq.n	800eb5c <tcp_close_shutdown+0x174>
 800eae4:	2b02      	cmp	r3, #2
 800eae6:	dc44      	bgt.n	800eb72 <tcp_close_shutdown+0x18a>
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d002      	beq.n	800eaf2 <tcp_close_shutdown+0x10a>
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d02a      	beq.n	800eb46 <tcp_close_shutdown+0x15e>
 800eaf0:	e03f      	b.n	800eb72 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	8adb      	ldrh	r3, [r3, #22]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d021      	beq.n	800eb3e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eafa:	4b2a      	ldr	r3, [pc, #168]	@ (800eba4 <tcp_close_shutdown+0x1bc>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	687a      	ldr	r2, [r7, #4]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d105      	bne.n	800eb10 <tcp_close_shutdown+0x128>
 800eb04:	4b27      	ldr	r3, [pc, #156]	@ (800eba4 <tcp_close_shutdown+0x1bc>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	68db      	ldr	r3, [r3, #12]
 800eb0a:	4a26      	ldr	r2, [pc, #152]	@ (800eba4 <tcp_close_shutdown+0x1bc>)
 800eb0c:	6013      	str	r3, [r2, #0]
 800eb0e:	e013      	b.n	800eb38 <tcp_close_shutdown+0x150>
 800eb10:	4b24      	ldr	r3, [pc, #144]	@ (800eba4 <tcp_close_shutdown+0x1bc>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	60bb      	str	r3, [r7, #8]
 800eb16:	e00c      	b.n	800eb32 <tcp_close_shutdown+0x14a>
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	68db      	ldr	r3, [r3, #12]
 800eb1c:	687a      	ldr	r2, [r7, #4]
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d104      	bne.n	800eb2c <tcp_close_shutdown+0x144>
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	68da      	ldr	r2, [r3, #12]
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	60da      	str	r2, [r3, #12]
 800eb2a:	e005      	b.n	800eb38 <tcp_close_shutdown+0x150>
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	60bb      	str	r3, [r7, #8]
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d1ef      	bne.n	800eb18 <tcp_close_shutdown+0x130>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f7ff fea0 	bl	800e884 <tcp_free>
      break;
 800eb44:	e01a      	b.n	800eb7c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f7ff ff14 	bl	800e974 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800eb4c:	6879      	ldr	r1, [r7, #4]
 800eb4e:	4816      	ldr	r0, [pc, #88]	@ (800eba8 <tcp_close_shutdown+0x1c0>)
 800eb50:	f001 f8aa 	bl	800fca8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7ff feb1 	bl	800e8bc <tcp_free_listen>
      break;
 800eb5a:	e00f      	b.n	800eb7c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800eb5c:	6879      	ldr	r1, [r7, #4]
 800eb5e:	480e      	ldr	r0, [pc, #56]	@ (800eb98 <tcp_close_shutdown+0x1b0>)
 800eb60:	f001 f8a2 	bl	800fca8 <tcp_pcb_remove>
 800eb64:	4b0d      	ldr	r3, [pc, #52]	@ (800eb9c <tcp_close_shutdown+0x1b4>)
 800eb66:	2201      	movs	r2, #1
 800eb68:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f7ff fe8a 	bl	800e884 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800eb70:	e004      	b.n	800eb7c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 f81a 	bl	800ebac <tcp_close_shutdown_fin>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	e000      	b.n	800eb7e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bdb0      	pop	{r4, r5, r7, pc}
 800eb86:	bf00      	nop
 800eb88:	080191c8 	.word	0x080191c8
 800eb8c:	0801929c 	.word	0x0801929c
 800eb90:	0801920c 	.word	0x0801920c
 800eb94:	080192bc 	.word	0x080192bc
 800eb98:	20027458 	.word	0x20027458
 800eb9c:	20027460 	.word	0x20027460
 800eba0:	20027498 	.word	0x20027498
 800eba4:	20027450 	.word	0x20027450
 800eba8:	20027454 	.word	0x20027454

0800ebac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d106      	bne.n	800ebc8 <tcp_close_shutdown_fin+0x1c>
 800ebba:	4b2e      	ldr	r3, [pc, #184]	@ (800ec74 <tcp_close_shutdown_fin+0xc8>)
 800ebbc:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800ebc0:	492d      	ldr	r1, [pc, #180]	@ (800ec78 <tcp_close_shutdown_fin+0xcc>)
 800ebc2:	482e      	ldr	r0, [pc, #184]	@ (800ec7c <tcp_close_shutdown_fin+0xd0>)
 800ebc4:	f008 fb76 	bl	80172b4 <iprintf>

  switch (pcb->state) {
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	7d1b      	ldrb	r3, [r3, #20]
 800ebcc:	2b07      	cmp	r3, #7
 800ebce:	d020      	beq.n	800ec12 <tcp_close_shutdown_fin+0x66>
 800ebd0:	2b07      	cmp	r3, #7
 800ebd2:	dc2b      	bgt.n	800ec2c <tcp_close_shutdown_fin+0x80>
 800ebd4:	2b03      	cmp	r3, #3
 800ebd6:	d002      	beq.n	800ebde <tcp_close_shutdown_fin+0x32>
 800ebd8:	2b04      	cmp	r3, #4
 800ebda:	d00d      	beq.n	800ebf8 <tcp_close_shutdown_fin+0x4c>
 800ebdc:	e026      	b.n	800ec2c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f003 fee2 	bl	80129a8 <tcp_send_fin>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ebe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d11f      	bne.n	800ec30 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2205      	movs	r2, #5
 800ebf4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ebf6:	e01b      	b.n	800ec30 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f003 fed5 	bl	80129a8 <tcp_send_fin>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ec02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d114      	bne.n	800ec34 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2205      	movs	r2, #5
 800ec0e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ec10:	e010      	b.n	800ec34 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f003 fec8 	bl	80129a8 <tcp_send_fin>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ec1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d109      	bne.n	800ec38 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2209      	movs	r2, #9
 800ec28:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ec2a:	e005      	b.n	800ec38 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	e01c      	b.n	800ec6a <tcp_close_shutdown_fin+0xbe>
      break;
 800ec30:	bf00      	nop
 800ec32:	e002      	b.n	800ec3a <tcp_close_shutdown_fin+0x8e>
      break;
 800ec34:	bf00      	nop
 800ec36:	e000      	b.n	800ec3a <tcp_close_shutdown_fin+0x8e>
      break;
 800ec38:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ec3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d103      	bne.n	800ec4a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f003 ffee 	bl	8012c24 <tcp_output>
 800ec48:	e00d      	b.n	800ec66 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ec4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec52:	d108      	bne.n	800ec66 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	8b5b      	ldrh	r3, [r3, #26]
 800ec58:	f043 0308 	orr.w	r3, r3, #8
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ec62:	2300      	movs	r3, #0
 800ec64:	e001      	b.n	800ec6a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ec66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3710      	adds	r7, #16
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	080191c8 	.word	0x080191c8
 800ec78:	08019278 	.word	0x08019278
 800ec7c:	0801920c 	.word	0x0801920c

0800ec80 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d109      	bne.n	800eca2 <tcp_close+0x22>
 800ec8e:	4b0f      	ldr	r3, [pc, #60]	@ (800eccc <tcp_close+0x4c>)
 800ec90:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ec94:	490e      	ldr	r1, [pc, #56]	@ (800ecd0 <tcp_close+0x50>)
 800ec96:	480f      	ldr	r0, [pc, #60]	@ (800ecd4 <tcp_close+0x54>)
 800ec98:	f008 fb0c 	bl	80172b4 <iprintf>
 800ec9c:	f06f 030f 	mvn.w	r3, #15
 800eca0:	e00f      	b.n	800ecc2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	7d1b      	ldrb	r3, [r3, #20]
 800eca6:	2b01      	cmp	r3, #1
 800eca8:	d006      	beq.n	800ecb8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	8b5b      	ldrh	r3, [r3, #26]
 800ecae:	f043 0310 	orr.w	r3, r3, #16
 800ecb2:	b29a      	uxth	r2, r3
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ecb8:	2101      	movs	r1, #1
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f7ff fe94 	bl	800e9e8 <tcp_close_shutdown>
 800ecc0:	4603      	mov	r3, r0
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3708      	adds	r7, #8
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	080191c8 	.word	0x080191c8
 800ecd0:	080192d8 	.word	0x080192d8
 800ecd4:	0801920c 	.word	0x0801920c

0800ecd8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b08e      	sub	sp, #56	@ 0x38
 800ecdc:	af04      	add	r7, sp, #16
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d107      	bne.n	800ecf8 <tcp_abandon+0x20>
 800ece8:	4b52      	ldr	r3, [pc, #328]	@ (800ee34 <tcp_abandon+0x15c>)
 800ecea:	f240 223d 	movw	r2, #573	@ 0x23d
 800ecee:	4952      	ldr	r1, [pc, #328]	@ (800ee38 <tcp_abandon+0x160>)
 800ecf0:	4852      	ldr	r0, [pc, #328]	@ (800ee3c <tcp_abandon+0x164>)
 800ecf2:	f008 fadf 	bl	80172b4 <iprintf>
 800ecf6:	e099      	b.n	800ee2c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	7d1b      	ldrb	r3, [r3, #20]
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d106      	bne.n	800ed0e <tcp_abandon+0x36>
 800ed00:	4b4c      	ldr	r3, [pc, #304]	@ (800ee34 <tcp_abandon+0x15c>)
 800ed02:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800ed06:	494e      	ldr	r1, [pc, #312]	@ (800ee40 <tcp_abandon+0x168>)
 800ed08:	484c      	ldr	r0, [pc, #304]	@ (800ee3c <tcp_abandon+0x164>)
 800ed0a:	f008 fad3 	bl	80172b4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	7d1b      	ldrb	r3, [r3, #20]
 800ed12:	2b0a      	cmp	r3, #10
 800ed14:	d107      	bne.n	800ed26 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ed16:	6879      	ldr	r1, [r7, #4]
 800ed18:	484a      	ldr	r0, [pc, #296]	@ (800ee44 <tcp_abandon+0x16c>)
 800ed1a:	f000 ffc5 	bl	800fca8 <tcp_pcb_remove>
    tcp_free(pcb);
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f7ff fdb0 	bl	800e884 <tcp_free>
 800ed24:	e082      	b.n	800ee2c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ed26:	2300      	movs	r3, #0
 800ed28:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed32:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed38:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed40:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	691b      	ldr	r3, [r3, #16]
 800ed46:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	7d1b      	ldrb	r3, [r3, #20]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d126      	bne.n	800ed9e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	8adb      	ldrh	r3, [r3, #22]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d02e      	beq.n	800edb6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ed58:	4b3b      	ldr	r3, [pc, #236]	@ (800ee48 <tcp_abandon+0x170>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d105      	bne.n	800ed6e <tcp_abandon+0x96>
 800ed62:	4b39      	ldr	r3, [pc, #228]	@ (800ee48 <tcp_abandon+0x170>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	4a37      	ldr	r2, [pc, #220]	@ (800ee48 <tcp_abandon+0x170>)
 800ed6a:	6013      	str	r3, [r2, #0]
 800ed6c:	e013      	b.n	800ed96 <tcp_abandon+0xbe>
 800ed6e:	4b36      	ldr	r3, [pc, #216]	@ (800ee48 <tcp_abandon+0x170>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	61fb      	str	r3, [r7, #28]
 800ed74:	e00c      	b.n	800ed90 <tcp_abandon+0xb8>
 800ed76:	69fb      	ldr	r3, [r7, #28]
 800ed78:	68db      	ldr	r3, [r3, #12]
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d104      	bne.n	800ed8a <tcp_abandon+0xb2>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	68da      	ldr	r2, [r3, #12]
 800ed84:	69fb      	ldr	r3, [r7, #28]
 800ed86:	60da      	str	r2, [r3, #12]
 800ed88:	e005      	b.n	800ed96 <tcp_abandon+0xbe>
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	68db      	ldr	r3, [r3, #12]
 800ed8e:	61fb      	str	r3, [r7, #28]
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d1ef      	bne.n	800ed76 <tcp_abandon+0x9e>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	60da      	str	r2, [r3, #12]
 800ed9c:	e00b      	b.n	800edb6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	8adb      	ldrh	r3, [r3, #22]
 800eda6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800eda8:	6879      	ldr	r1, [r7, #4]
 800edaa:	4828      	ldr	r0, [pc, #160]	@ (800ee4c <tcp_abandon+0x174>)
 800edac:	f000 ff7c 	bl	800fca8 <tcp_pcb_remove>
 800edb0:	4b27      	ldr	r3, [pc, #156]	@ (800ee50 <tcp_abandon+0x178>)
 800edb2:	2201      	movs	r2, #1
 800edb4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d004      	beq.n	800edc8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800edc2:	4618      	mov	r0, r3
 800edc4:	f000 fd1e 	bl	800f804 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d004      	beq.n	800edda <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edd4:	4618      	mov	r0, r3
 800edd6:	f000 fd15 	bl	800f804 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d004      	beq.n	800edec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ede6:	4618      	mov	r0, r3
 800ede8:	f000 fd0c 	bl	800f804 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800edec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d00e      	beq.n	800ee10 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800edf2:	6879      	ldr	r1, [r7, #4]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	3304      	adds	r3, #4
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	8b12      	ldrh	r2, [r2, #24]
 800edfc:	9202      	str	r2, [sp, #8]
 800edfe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ee00:	9201      	str	r2, [sp, #4]
 800ee02:	9300      	str	r3, [sp, #0]
 800ee04:	460b      	mov	r3, r1
 800ee06:	697a      	ldr	r2, [r7, #20]
 800ee08:	69b9      	ldr	r1, [r7, #24]
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f004 fcbe 	bl	801378c <tcp_rst>
    }
    last_state = pcb->state;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	7d1b      	ldrb	r3, [r3, #20]
 800ee14:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f7ff fd34 	bl	800e884 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d004      	beq.n	800ee2c <tcp_abandon+0x154>
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	f06f 010c 	mvn.w	r1, #12
 800ee28:	68f8      	ldr	r0, [r7, #12]
 800ee2a:	4798      	blx	r3
  }
}
 800ee2c:	3728      	adds	r7, #40	@ 0x28
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	080191c8 	.word	0x080191c8
 800ee38:	0801930c 	.word	0x0801930c
 800ee3c:	0801920c 	.word	0x0801920c
 800ee40:	08019328 	.word	0x08019328
 800ee44:	2002745c 	.word	0x2002745c
 800ee48:	20027450 	.word	0x20027450
 800ee4c:	20027458 	.word	0x20027458
 800ee50:	20027460 	.word	0x20027460

0800ee54 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ee5c:	2101      	movs	r1, #1
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7ff ff3a 	bl	800ecd8 <tcp_abandon>
}
 800ee64:	bf00      	nop
 800ee66:	3708      	adds	r7, #8
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}

0800ee6c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b084      	sub	sp, #16
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d106      	bne.n	800ee88 <tcp_update_rcv_ann_wnd+0x1c>
 800ee7a:	4b25      	ldr	r3, [pc, #148]	@ (800ef10 <tcp_update_rcv_ann_wnd+0xa4>)
 800ee7c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800ee80:	4924      	ldr	r1, [pc, #144]	@ (800ef14 <tcp_update_rcv_ann_wnd+0xa8>)
 800ee82:	4825      	ldr	r0, [pc, #148]	@ (800ef18 <tcp_update_rcv_ann_wnd+0xac>)
 800ee84:	f008 fa16 	bl	80172b4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ee90:	4413      	add	r3, r2
 800ee92:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800ee9c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800eea0:	bf28      	it	cs
 800eea2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800eea6:	b292      	uxth	r2, r2
 800eea8:	4413      	add	r3, r2
 800eeaa:	68fa      	ldr	r2, [r7, #12]
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	db08      	blt.n	800eec4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eebe:	68fa      	ldr	r2, [r7, #12]
 800eec0:	1ad3      	subs	r3, r2, r3
 800eec2:	e020      	b.n	800ef06 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eecc:	1ad3      	subs	r3, r2, r3
 800eece:	2b00      	cmp	r3, #0
 800eed0:	dd03      	ble.n	800eeda <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2200      	movs	r2, #0
 800eed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800eed8:	e014      	b.n	800ef04 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eee2:	1ad3      	subs	r3, r2, r3
 800eee4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eeec:	d306      	bcc.n	800eefc <tcp_update_rcv_ann_wnd+0x90>
 800eeee:	4b08      	ldr	r3, [pc, #32]	@ (800ef10 <tcp_update_rcv_ann_wnd+0xa4>)
 800eef0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800eef4:	4909      	ldr	r1, [pc, #36]	@ (800ef1c <tcp_update_rcv_ann_wnd+0xb0>)
 800eef6:	4808      	ldr	r0, [pc, #32]	@ (800ef18 <tcp_update_rcv_ann_wnd+0xac>)
 800eef8:	f008 f9dc 	bl	80172b4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800ef04:	2300      	movs	r3, #0
  }
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	080191c8 	.word	0x080191c8
 800ef14:	08019424 	.word	0x08019424
 800ef18:	0801920c 	.word	0x0801920c
 800ef1c:	08019448 	.word	0x08019448

0800ef20 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	460b      	mov	r3, r1
 800ef2a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d107      	bne.n	800ef42 <tcp_recved+0x22>
 800ef32:	4b1f      	ldr	r3, [pc, #124]	@ (800efb0 <tcp_recved+0x90>)
 800ef34:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800ef38:	491e      	ldr	r1, [pc, #120]	@ (800efb4 <tcp_recved+0x94>)
 800ef3a:	481f      	ldr	r0, [pc, #124]	@ (800efb8 <tcp_recved+0x98>)
 800ef3c:	f008 f9ba 	bl	80172b4 <iprintf>
 800ef40:	e032      	b.n	800efa8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	7d1b      	ldrb	r3, [r3, #20]
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d106      	bne.n	800ef58 <tcp_recved+0x38>
 800ef4a:	4b19      	ldr	r3, [pc, #100]	@ (800efb0 <tcp_recved+0x90>)
 800ef4c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800ef50:	491a      	ldr	r1, [pc, #104]	@ (800efbc <tcp_recved+0x9c>)
 800ef52:	4819      	ldr	r0, [pc, #100]	@ (800efb8 <tcp_recved+0x98>)
 800ef54:	f008 f9ae 	bl	80172b4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ef5c:	887b      	ldrh	r3, [r7, #2]
 800ef5e:	4413      	add	r3, r2
 800ef60:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ef62:	89fb      	ldrh	r3, [r7, #14]
 800ef64:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ef68:	d804      	bhi.n	800ef74 <tcp_recved+0x54>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef6e:	89fa      	ldrh	r2, [r7, #14]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d204      	bcs.n	800ef7e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ef7a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ef7c:	e002      	b.n	800ef84 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	89fa      	ldrh	r2, [r7, #14]
 800ef82:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f7ff ff71 	bl	800ee6c <tcp_update_rcv_ann_wnd>
 800ef8a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ef92:	d309      	bcc.n	800efa8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	8b5b      	ldrh	r3, [r3, #26]
 800ef98:	f043 0302 	orr.w	r3, r3, #2
 800ef9c:	b29a      	uxth	r2, r3
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f003 fe3e 	bl	8012c24 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800efa8:	3710      	adds	r7, #16
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
 800efae:	bf00      	nop
 800efb0:	080191c8 	.word	0x080191c8
 800efb4:	08019464 	.word	0x08019464
 800efb8:	0801920c 	.word	0x0801920c
 800efbc:	0801947c 	.word	0x0801947c

0800efc0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800efc0:	b5b0      	push	{r4, r5, r7, lr}
 800efc2:	b090      	sub	sp, #64	@ 0x40
 800efc4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800efc6:	2300      	movs	r3, #0
 800efc8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800efcc:	4b95      	ldr	r3, [pc, #596]	@ (800f224 <tcp_slowtmr+0x264>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	3301      	adds	r3, #1
 800efd2:	4a94      	ldr	r2, [pc, #592]	@ (800f224 <tcp_slowtmr+0x264>)
 800efd4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800efd6:	4b94      	ldr	r3, [pc, #592]	@ (800f228 <tcp_slowtmr+0x268>)
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	3301      	adds	r3, #1
 800efdc:	b2da      	uxtb	r2, r3
 800efde:	4b92      	ldr	r3, [pc, #584]	@ (800f228 <tcp_slowtmr+0x268>)
 800efe0:	701a      	strb	r2, [r3, #0]
 800efe2:	e000      	b.n	800efe6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800efe4:	bf00      	nop
  prev = NULL;
 800efe6:	2300      	movs	r3, #0
 800efe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800efea:	4b90      	ldr	r3, [pc, #576]	@ (800f22c <tcp_slowtmr+0x26c>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800eff0:	e29d      	b.n	800f52e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800eff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eff4:	7d1b      	ldrb	r3, [r3, #20]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d106      	bne.n	800f008 <tcp_slowtmr+0x48>
 800effa:	4b8d      	ldr	r3, [pc, #564]	@ (800f230 <tcp_slowtmr+0x270>)
 800effc:	f240 42be 	movw	r2, #1214	@ 0x4be
 800f000:	498c      	ldr	r1, [pc, #560]	@ (800f234 <tcp_slowtmr+0x274>)
 800f002:	488d      	ldr	r0, [pc, #564]	@ (800f238 <tcp_slowtmr+0x278>)
 800f004:	f008 f956 	bl	80172b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f00a:	7d1b      	ldrb	r3, [r3, #20]
 800f00c:	2b01      	cmp	r3, #1
 800f00e:	d106      	bne.n	800f01e <tcp_slowtmr+0x5e>
 800f010:	4b87      	ldr	r3, [pc, #540]	@ (800f230 <tcp_slowtmr+0x270>)
 800f012:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800f016:	4989      	ldr	r1, [pc, #548]	@ (800f23c <tcp_slowtmr+0x27c>)
 800f018:	4887      	ldr	r0, [pc, #540]	@ (800f238 <tcp_slowtmr+0x278>)
 800f01a:	f008 f94b 	bl	80172b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f020:	7d1b      	ldrb	r3, [r3, #20]
 800f022:	2b0a      	cmp	r3, #10
 800f024:	d106      	bne.n	800f034 <tcp_slowtmr+0x74>
 800f026:	4b82      	ldr	r3, [pc, #520]	@ (800f230 <tcp_slowtmr+0x270>)
 800f028:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800f02c:	4984      	ldr	r1, [pc, #528]	@ (800f240 <tcp_slowtmr+0x280>)
 800f02e:	4882      	ldr	r0, [pc, #520]	@ (800f238 <tcp_slowtmr+0x278>)
 800f030:	f008 f940 	bl	80172b4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f036:	7f9a      	ldrb	r2, [r3, #30]
 800f038:	4b7b      	ldr	r3, [pc, #492]	@ (800f228 <tcp_slowtmr+0x268>)
 800f03a:	781b      	ldrb	r3, [r3, #0]
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d105      	bne.n	800f04c <tcp_slowtmr+0x8c>
      prev = pcb;
 800f040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f042:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800f04a:	e270      	b.n	800f52e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800f04c:	4b76      	ldr	r3, [pc, #472]	@ (800f228 <tcp_slowtmr+0x268>)
 800f04e:	781a      	ldrb	r2, [r3, #0]
 800f050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f052:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800f054:	2300      	movs	r3, #0
 800f056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800f05a:	2300      	movs	r3, #0
 800f05c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f062:	7d1b      	ldrb	r3, [r3, #20]
 800f064:	2b02      	cmp	r3, #2
 800f066:	d10a      	bne.n	800f07e <tcp_slowtmr+0xbe>
 800f068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f06a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f06e:	2b05      	cmp	r3, #5
 800f070:	d905      	bls.n	800f07e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800f072:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f076:	3301      	adds	r3, #1
 800f078:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f07c:	e11e      	b.n	800f2bc <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f080:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f084:	2b0b      	cmp	r3, #11
 800f086:	d905      	bls.n	800f094 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800f088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f08c:	3301      	adds	r3, #1
 800f08e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f092:	e113      	b.n	800f2bc <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800f094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f096:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d075      	beq.n	800f18a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d006      	beq.n	800f0b4 <tcp_slowtmr+0xf4>
 800f0a6:	4b62      	ldr	r3, [pc, #392]	@ (800f230 <tcp_slowtmr+0x270>)
 800f0a8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800f0ac:	4965      	ldr	r1, [pc, #404]	@ (800f244 <tcp_slowtmr+0x284>)
 800f0ae:	4862      	ldr	r0, [pc, #392]	@ (800f238 <tcp_slowtmr+0x278>)
 800f0b0:	f008 f900 	bl	80172b4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d106      	bne.n	800f0ca <tcp_slowtmr+0x10a>
 800f0bc:	4b5c      	ldr	r3, [pc, #368]	@ (800f230 <tcp_slowtmr+0x270>)
 800f0be:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800f0c2:	4961      	ldr	r1, [pc, #388]	@ (800f248 <tcp_slowtmr+0x288>)
 800f0c4:	485c      	ldr	r0, [pc, #368]	@ (800f238 <tcp_slowtmr+0x278>)
 800f0c6:	f008 f8f5 	bl	80172b4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0cc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f0d0:	2b0b      	cmp	r3, #11
 800f0d2:	d905      	bls.n	800f0e0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800f0d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0d8:	3301      	adds	r3, #1
 800f0da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f0de:	e0ed      	b.n	800f2bc <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f0e6:	3b01      	subs	r3, #1
 800f0e8:	4a58      	ldr	r2, [pc, #352]	@ (800f24c <tcp_slowtmr+0x28c>)
 800f0ea:	5cd3      	ldrb	r3, [r2, r3]
 800f0ec:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0f0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f0f4:	7c7a      	ldrb	r2, [r7, #17]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d907      	bls.n	800f10a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800f0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0fc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f100:	3301      	adds	r3, #1
 800f102:	b2da      	uxtb	r2, r3
 800f104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f106:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800f10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f10c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f110:	7c7a      	ldrb	r2, [r7, #17]
 800f112:	429a      	cmp	r2, r3
 800f114:	f200 80d2 	bhi.w	800f2bc <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800f118:	2301      	movs	r3, #1
 800f11a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800f11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f11e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f122:	2b00      	cmp	r3, #0
 800f124:	d108      	bne.n	800f138 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f126:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f128:	f004 fc24 	bl	8013974 <tcp_zero_window_probe>
 800f12c:	4603      	mov	r3, r0
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d014      	beq.n	800f15c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800f132:	2300      	movs	r3, #0
 800f134:	623b      	str	r3, [r7, #32]
 800f136:	e011      	b.n	800f15c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f13a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f13e:	4619      	mov	r1, r3
 800f140:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f142:	f003 fae9 	bl	8012718 <tcp_split_unsent_seg>
 800f146:	4603      	mov	r3, r0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d107      	bne.n	800f15c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800f14c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f14e:	f003 fd69 	bl	8012c24 <tcp_output>
 800f152:	4603      	mov	r3, r0
 800f154:	2b00      	cmp	r3, #0
 800f156:	d101      	bne.n	800f15c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800f158:	2300      	movs	r3, #0
 800f15a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800f15c:	6a3b      	ldr	r3, [r7, #32]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	f000 80ac 	beq.w	800f2bc <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800f164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f166:	2200      	movs	r2, #0
 800f168:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f16e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f172:	2b06      	cmp	r3, #6
 800f174:	f200 80a2 	bhi.w	800f2bc <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800f178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f17a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f17e:	3301      	adds	r3, #1
 800f180:	b2da      	uxtb	r2, r3
 800f182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f184:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800f188:	e098      	b.n	800f2bc <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f18c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f190:	2b00      	cmp	r3, #0
 800f192:	db0f      	blt.n	800f1b4 <tcp_slowtmr+0x1f4>
 800f194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f196:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f19a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d008      	beq.n	800f1b4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800f1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	b21a      	sxth	r2, r3
 800f1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1b2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800f1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1b6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800f1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1bc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	db7b      	blt.n	800f2bc <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f1c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1c6:	f004 f821 	bl	801320c <tcp_rexmit_rto_prepare>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d007      	beq.n	800f1e0 <tcp_slowtmr+0x220>
 800f1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d171      	bne.n	800f2bc <tcp_slowtmr+0x2fc>
 800f1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d06d      	beq.n	800f2bc <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800f1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1e2:	7d1b      	ldrb	r3, [r3, #20]
 800f1e4:	2b02      	cmp	r3, #2
 800f1e6:	d03a      	beq.n	800f25e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f1ee:	2b0c      	cmp	r3, #12
 800f1f0:	bf28      	it	cs
 800f1f2:	230c      	movcs	r3, #12
 800f1f4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f1fc:	10db      	asrs	r3, r3, #3
 800f1fe:	b21b      	sxth	r3, r3
 800f200:	461a      	mov	r2, r3
 800f202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f204:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f208:	4413      	add	r3, r2
 800f20a:	7efa      	ldrb	r2, [r7, #27]
 800f20c:	4910      	ldr	r1, [pc, #64]	@ (800f250 <tcp_slowtmr+0x290>)
 800f20e:	5c8a      	ldrb	r2, [r1, r2]
 800f210:	4093      	lsls	r3, r2
 800f212:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f21a:	4293      	cmp	r3, r2
 800f21c:	dc1a      	bgt.n	800f254 <tcp_slowtmr+0x294>
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	b21a      	sxth	r2, r3
 800f222:	e019      	b.n	800f258 <tcp_slowtmr+0x298>
 800f224:	2002744c 	.word	0x2002744c
 800f228:	20027462 	.word	0x20027462
 800f22c:	20027458 	.word	0x20027458
 800f230:	080191c8 	.word	0x080191c8
 800f234:	0801950c 	.word	0x0801950c
 800f238:	0801920c 	.word	0x0801920c
 800f23c:	08019538 	.word	0x08019538
 800f240:	08019564 	.word	0x08019564
 800f244:	08019594 	.word	0x08019594
 800f248:	080195c8 	.word	0x080195c8
 800f24c:	0801b428 	.word	0x0801b428
 800f250:	0801b418 	.word	0x0801b418
 800f254:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f25a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800f25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f260:	2200      	movs	r2, #0
 800f262:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f266:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f26c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f270:	4293      	cmp	r3, r2
 800f272:	bf28      	it	cs
 800f274:	4613      	movcs	r3, r2
 800f276:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f278:	8a7b      	ldrh	r3, [r7, #18]
 800f27a:	085b      	lsrs	r3, r3, #1
 800f27c:	b29a      	uxth	r2, r3
 800f27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f280:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f286:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f28c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f28e:	005b      	lsls	r3, r3, #1
 800f290:	b29b      	uxth	r3, r3
 800f292:	429a      	cmp	r2, r3
 800f294:	d206      	bcs.n	800f2a4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f298:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f29a:	005b      	lsls	r3, r3, #1
 800f29c:	b29a      	uxth	r2, r3
 800f29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2a0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800f2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2a6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800f2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800f2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800f2b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f2b8:	f004 f818 	bl	80132ec <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800f2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2be:	7d1b      	ldrb	r3, [r3, #20]
 800f2c0:	2b06      	cmp	r3, #6
 800f2c2:	d111      	bne.n	800f2e8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800f2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2c6:	8b5b      	ldrh	r3, [r3, #26]
 800f2c8:	f003 0310 	and.w	r3, r3, #16
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d00b      	beq.n	800f2e8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f2d0:	4b9c      	ldr	r3, [pc, #624]	@ (800f544 <tcp_slowtmr+0x584>)
 800f2d2:	681a      	ldr	r2, [r3, #0]
 800f2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2d6:	6a1b      	ldr	r3, [r3, #32]
 800f2d8:	1ad3      	subs	r3, r2, r3
 800f2da:	2b28      	cmp	r3, #40	@ 0x28
 800f2dc:	d904      	bls.n	800f2e8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800f2de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2ea:	7a5b      	ldrb	r3, [r3, #9]
 800f2ec:	f003 0308 	and.w	r3, r3, #8
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d04a      	beq.n	800f38a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2f6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f2f8:	2b04      	cmp	r3, #4
 800f2fa:	d003      	beq.n	800f304 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800f2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2fe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f300:	2b07      	cmp	r3, #7
 800f302:	d142      	bne.n	800f38a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f304:	4b8f      	ldr	r3, [pc, #572]	@ (800f544 <tcp_slowtmr+0x584>)
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f30a:	6a1b      	ldr	r3, [r3, #32]
 800f30c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f310:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f314:	4b8c      	ldr	r3, [pc, #560]	@ (800f548 <tcp_slowtmr+0x588>)
 800f316:	440b      	add	r3, r1
 800f318:	498c      	ldr	r1, [pc, #560]	@ (800f54c <tcp_slowtmr+0x58c>)
 800f31a:	fba1 1303 	umull	r1, r3, r1, r3
 800f31e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f320:	429a      	cmp	r2, r3
 800f322:	d90a      	bls.n	800f33a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800f324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f328:	3301      	adds	r3, #1
 800f32a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800f32e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f332:	3301      	adds	r3, #1
 800f334:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f338:	e027      	b.n	800f38a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f33a:	4b82      	ldr	r3, [pc, #520]	@ (800f544 <tcp_slowtmr+0x584>)
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f340:	6a1b      	ldr	r3, [r3, #32]
 800f342:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f346:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f34c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f350:	4618      	mov	r0, r3
 800f352:	4b7f      	ldr	r3, [pc, #508]	@ (800f550 <tcp_slowtmr+0x590>)
 800f354:	fb00 f303 	mul.w	r3, r0, r3
 800f358:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f35a:	497c      	ldr	r1, [pc, #496]	@ (800f54c <tcp_slowtmr+0x58c>)
 800f35c:	fba1 1303 	umull	r1, r3, r1, r3
 800f360:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f362:	429a      	cmp	r2, r3
 800f364:	d911      	bls.n	800f38a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f366:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f368:	f004 fac4 	bl	80138f4 <tcp_keepalive>
 800f36c:	4603      	mov	r3, r0
 800f36e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800f372:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f376:	2b00      	cmp	r3, #0
 800f378:	d107      	bne.n	800f38a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f37c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f380:	3301      	adds	r3, #1
 800f382:	b2da      	uxtb	r2, r3
 800f384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f386:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800f38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f38c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d011      	beq.n	800f3b6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f392:	4b6c      	ldr	r3, [pc, #432]	@ (800f544 <tcp_slowtmr+0x584>)
 800f394:	681a      	ldr	r2, [r3, #0]
 800f396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f398:	6a1b      	ldr	r3, [r3, #32]
 800f39a:	1ad2      	subs	r2, r2, r3
 800f39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f39e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	005b      	lsls	r3, r3, #1
 800f3a8:	440b      	add	r3, r1
 800f3aa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d302      	bcc.n	800f3b6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800f3b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f3b2:	f000 fddd 	bl	800ff70 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800f3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3b8:	7d1b      	ldrb	r3, [r3, #20]
 800f3ba:	2b03      	cmp	r3, #3
 800f3bc:	d10b      	bne.n	800f3d6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f3be:	4b61      	ldr	r3, [pc, #388]	@ (800f544 <tcp_slowtmr+0x584>)
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3c4:	6a1b      	ldr	r3, [r3, #32]
 800f3c6:	1ad3      	subs	r3, r2, r3
 800f3c8:	2b28      	cmp	r3, #40	@ 0x28
 800f3ca:	d904      	bls.n	800f3d6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800f3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800f3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3d8:	7d1b      	ldrb	r3, [r3, #20]
 800f3da:	2b09      	cmp	r3, #9
 800f3dc:	d10b      	bne.n	800f3f6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f3de:	4b59      	ldr	r3, [pc, #356]	@ (800f544 <tcp_slowtmr+0x584>)
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3e4:	6a1b      	ldr	r3, [r3, #32]
 800f3e6:	1ad3      	subs	r3, r2, r3
 800f3e8:	2bf0      	cmp	r3, #240	@ 0xf0
 800f3ea:	d904      	bls.n	800f3f6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800f3f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d060      	beq.n	800f4c0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800f3fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f404:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800f406:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f408:	f000 fbfe 	bl	800fc08 <tcp_pcb_purge>
      if (prev != NULL) {
 800f40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d010      	beq.n	800f434 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f412:	4b50      	ldr	r3, [pc, #320]	@ (800f554 <tcp_slowtmr+0x594>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f418:	429a      	cmp	r2, r3
 800f41a:	d106      	bne.n	800f42a <tcp_slowtmr+0x46a>
 800f41c:	4b4e      	ldr	r3, [pc, #312]	@ (800f558 <tcp_slowtmr+0x598>)
 800f41e:	f240 526d 	movw	r2, #1389	@ 0x56d
 800f422:	494e      	ldr	r1, [pc, #312]	@ (800f55c <tcp_slowtmr+0x59c>)
 800f424:	484e      	ldr	r0, [pc, #312]	@ (800f560 <tcp_slowtmr+0x5a0>)
 800f426:	f007 ff45 	bl	80172b4 <iprintf>
        prev->next = pcb->next;
 800f42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f42c:	68da      	ldr	r2, [r3, #12]
 800f42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f430:	60da      	str	r2, [r3, #12]
 800f432:	e00f      	b.n	800f454 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f434:	4b47      	ldr	r3, [pc, #284]	@ (800f554 <tcp_slowtmr+0x594>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d006      	beq.n	800f44c <tcp_slowtmr+0x48c>
 800f43e:	4b46      	ldr	r3, [pc, #280]	@ (800f558 <tcp_slowtmr+0x598>)
 800f440:	f240 5271 	movw	r2, #1393	@ 0x571
 800f444:	4947      	ldr	r1, [pc, #284]	@ (800f564 <tcp_slowtmr+0x5a4>)
 800f446:	4846      	ldr	r0, [pc, #280]	@ (800f560 <tcp_slowtmr+0x5a0>)
 800f448:	f007 ff34 	bl	80172b4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f44e:	68db      	ldr	r3, [r3, #12]
 800f450:	4a40      	ldr	r2, [pc, #256]	@ (800f554 <tcp_slowtmr+0x594>)
 800f452:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800f454:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d013      	beq.n	800f484 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f45e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800f460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f462:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f464:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800f466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f468:	3304      	adds	r3, #4
 800f46a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f46c:	8ad2      	ldrh	r2, [r2, #22]
 800f46e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f470:	8b09      	ldrh	r1, [r1, #24]
 800f472:	9102      	str	r1, [sp, #8]
 800f474:	9201      	str	r2, [sp, #4]
 800f476:	9300      	str	r3, [sp, #0]
 800f478:	462b      	mov	r3, r5
 800f47a:	4622      	mov	r2, r4
 800f47c:	4601      	mov	r1, r0
 800f47e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f480:	f004 f984 	bl	801378c <tcp_rst>
      err_arg = pcb->callback_arg;
 800f484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f486:	691b      	ldr	r3, [r3, #16]
 800f488:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f48c:	7d1b      	ldrb	r3, [r3, #20]
 800f48e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f492:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f496:	68db      	ldr	r3, [r3, #12]
 800f498:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f49a:	6838      	ldr	r0, [r7, #0]
 800f49c:	f7ff f9f2 	bl	800e884 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800f4a0:	4b31      	ldr	r3, [pc, #196]	@ (800f568 <tcp_slowtmr+0x5a8>)
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d004      	beq.n	800f4b6 <tcp_slowtmr+0x4f6>
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f06f 010c 	mvn.w	r1, #12
 800f4b2:	68b8      	ldr	r0, [r7, #8]
 800f4b4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f4b6:	4b2c      	ldr	r3, [pc, #176]	@ (800f568 <tcp_slowtmr+0x5a8>)
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d037      	beq.n	800f52e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f4be:	e592      	b.n	800efe6 <tcp_slowtmr+0x26>
      prev = pcb;
 800f4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4c6:	68db      	ldr	r3, [r3, #12]
 800f4c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800f4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4cc:	7f1b      	ldrb	r3, [r3, #28]
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	b2da      	uxtb	r2, r3
 800f4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4d4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4d8:	7f1a      	ldrb	r2, [r3, #28]
 800f4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4dc:	7f5b      	ldrb	r3, [r3, #29]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d325      	bcc.n	800f52e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800f4e8:	4b1f      	ldr	r3, [pc, #124]	@ (800f568 <tcp_slowtmr+0x5a8>)
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d00b      	beq.n	800f510 <tcp_slowtmr+0x550>
 800f4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f4fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f500:	6912      	ldr	r2, [r2, #16]
 800f502:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f504:	4610      	mov	r0, r2
 800f506:	4798      	blx	r3
 800f508:	4603      	mov	r3, r0
 800f50a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800f50e:	e002      	b.n	800f516 <tcp_slowtmr+0x556>
 800f510:	2300      	movs	r3, #0
 800f512:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800f516:	4b14      	ldr	r3, [pc, #80]	@ (800f568 <tcp_slowtmr+0x5a8>)
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	f47f ad62 	bne.w	800efe4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f520:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f524:	2b00      	cmp	r3, #0
 800f526:	d102      	bne.n	800f52e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f528:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f52a:	f003 fb7b 	bl	8012c24 <tcp_output>
  while (pcb != NULL) {
 800f52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f530:	2b00      	cmp	r3, #0
 800f532:	f47f ad5e 	bne.w	800eff2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f536:	2300      	movs	r3, #0
 800f538:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800f53a:	4b0c      	ldr	r3, [pc, #48]	@ (800f56c <tcp_slowtmr+0x5ac>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f540:	e069      	b.n	800f616 <tcp_slowtmr+0x656>
 800f542:	bf00      	nop
 800f544:	2002744c 	.word	0x2002744c
 800f548:	000a4cb8 	.word	0x000a4cb8
 800f54c:	10624dd3 	.word	0x10624dd3
 800f550:	000124f8 	.word	0x000124f8
 800f554:	20027458 	.word	0x20027458
 800f558:	080191c8 	.word	0x080191c8
 800f55c:	08019600 	.word	0x08019600
 800f560:	0801920c 	.word	0x0801920c
 800f564:	0801962c 	.word	0x0801962c
 800f568:	20027460 	.word	0x20027460
 800f56c:	2002745c 	.word	0x2002745c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f572:	7d1b      	ldrb	r3, [r3, #20]
 800f574:	2b0a      	cmp	r3, #10
 800f576:	d006      	beq.n	800f586 <tcp_slowtmr+0x5c6>
 800f578:	4b2b      	ldr	r3, [pc, #172]	@ (800f628 <tcp_slowtmr+0x668>)
 800f57a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800f57e:	492b      	ldr	r1, [pc, #172]	@ (800f62c <tcp_slowtmr+0x66c>)
 800f580:	482b      	ldr	r0, [pc, #172]	@ (800f630 <tcp_slowtmr+0x670>)
 800f582:	f007 fe97 	bl	80172b4 <iprintf>
    pcb_remove = 0;
 800f586:	2300      	movs	r3, #0
 800f588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f58c:	4b29      	ldr	r3, [pc, #164]	@ (800f634 <tcp_slowtmr+0x674>)
 800f58e:	681a      	ldr	r2, [r3, #0]
 800f590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f592:	6a1b      	ldr	r3, [r3, #32]
 800f594:	1ad3      	subs	r3, r2, r3
 800f596:	2bf0      	cmp	r3, #240	@ 0xf0
 800f598:	d904      	bls.n	800f5a4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800f59a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f59e:	3301      	adds	r3, #1
 800f5a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d02f      	beq.n	800f60c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f5ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5ae:	f000 fb2b 	bl	800fc08 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d010      	beq.n	800f5da <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f5b8:	4b1f      	ldr	r3, [pc, #124]	@ (800f638 <tcp_slowtmr+0x678>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d106      	bne.n	800f5d0 <tcp_slowtmr+0x610>
 800f5c2:	4b19      	ldr	r3, [pc, #100]	@ (800f628 <tcp_slowtmr+0x668>)
 800f5c4:	f240 52af 	movw	r2, #1455	@ 0x5af
 800f5c8:	491c      	ldr	r1, [pc, #112]	@ (800f63c <tcp_slowtmr+0x67c>)
 800f5ca:	4819      	ldr	r0, [pc, #100]	@ (800f630 <tcp_slowtmr+0x670>)
 800f5cc:	f007 fe72 	bl	80172b4 <iprintf>
        prev->next = pcb->next;
 800f5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5d2:	68da      	ldr	r2, [r3, #12]
 800f5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5d6:	60da      	str	r2, [r3, #12]
 800f5d8:	e00f      	b.n	800f5fa <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f5da:	4b17      	ldr	r3, [pc, #92]	@ (800f638 <tcp_slowtmr+0x678>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d006      	beq.n	800f5f2 <tcp_slowtmr+0x632>
 800f5e4:	4b10      	ldr	r3, [pc, #64]	@ (800f628 <tcp_slowtmr+0x668>)
 800f5e6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800f5ea:	4915      	ldr	r1, [pc, #84]	@ (800f640 <tcp_slowtmr+0x680>)
 800f5ec:	4810      	ldr	r0, [pc, #64]	@ (800f630 <tcp_slowtmr+0x670>)
 800f5ee:	f007 fe61 	bl	80172b4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	4a10      	ldr	r2, [pc, #64]	@ (800f638 <tcp_slowtmr+0x678>)
 800f5f8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5fc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f604:	69f8      	ldr	r0, [r7, #28]
 800f606:	f7ff f93d 	bl	800e884 <tcp_free>
 800f60a:	e004      	b.n	800f616 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800f60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f60e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d1a9      	bne.n	800f570 <tcp_slowtmr+0x5b0>
    }
  }
}
 800f61c:	bf00      	nop
 800f61e:	bf00      	nop
 800f620:	3730      	adds	r7, #48	@ 0x30
 800f622:	46bd      	mov	sp, r7
 800f624:	bdb0      	pop	{r4, r5, r7, pc}
 800f626:	bf00      	nop
 800f628:	080191c8 	.word	0x080191c8
 800f62c:	08019658 	.word	0x08019658
 800f630:	0801920c 	.word	0x0801920c
 800f634:	2002744c 	.word	0x2002744c
 800f638:	2002745c 	.word	0x2002745c
 800f63c:	08019688 	.word	0x08019688
 800f640:	080196b0 	.word	0x080196b0

0800f644 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f64a:	4b2d      	ldr	r3, [pc, #180]	@ (800f700 <tcp_fasttmr+0xbc>)
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	3301      	adds	r3, #1
 800f650:	b2da      	uxtb	r2, r3
 800f652:	4b2b      	ldr	r3, [pc, #172]	@ (800f700 <tcp_fasttmr+0xbc>)
 800f654:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f656:	4b2b      	ldr	r3, [pc, #172]	@ (800f704 <tcp_fasttmr+0xc0>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f65c:	e048      	b.n	800f6f0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	7f9a      	ldrb	r2, [r3, #30]
 800f662:	4b27      	ldr	r3, [pc, #156]	@ (800f700 <tcp_fasttmr+0xbc>)
 800f664:	781b      	ldrb	r3, [r3, #0]
 800f666:	429a      	cmp	r2, r3
 800f668:	d03f      	beq.n	800f6ea <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f66a:	4b25      	ldr	r3, [pc, #148]	@ (800f700 <tcp_fasttmr+0xbc>)
 800f66c:	781a      	ldrb	r2, [r3, #0]
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	8b5b      	ldrh	r3, [r3, #26]
 800f676:	f003 0301 	and.w	r3, r3, #1
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d010      	beq.n	800f6a0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	8b5b      	ldrh	r3, [r3, #26]
 800f682:	f043 0302 	orr.w	r3, r3, #2
 800f686:	b29a      	uxth	r2, r3
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f003 fac9 	bl	8012c24 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	8b5b      	ldrh	r3, [r3, #26]
 800f696:	f023 0303 	bic.w	r3, r3, #3
 800f69a:	b29a      	uxth	r2, r3
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	8b5b      	ldrh	r3, [r3, #26]
 800f6a4:	f003 0308 	and.w	r3, r3, #8
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d009      	beq.n	800f6c0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	8b5b      	ldrh	r3, [r3, #26]
 800f6b0:	f023 0308 	bic.w	r3, r3, #8
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f7ff fa76 	bl	800ebac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d00a      	beq.n	800f6e4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f6ce:	4b0e      	ldr	r3, [pc, #56]	@ (800f708 <tcp_fasttmr+0xc4>)
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f000 f819 	bl	800f70c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f6da:	4b0b      	ldr	r3, [pc, #44]	@ (800f708 <tcp_fasttmr+0xc4>)
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d000      	beq.n	800f6e4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f6e2:	e7b8      	b.n	800f656 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	607b      	str	r3, [r7, #4]
 800f6e8:	e002      	b.n	800f6f0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1b3      	bne.n	800f65e <tcp_fasttmr+0x1a>
    }
  }
}
 800f6f6:	bf00      	nop
 800f6f8:	bf00      	nop
 800f6fa:	3708      	adds	r7, #8
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	20027462 	.word	0x20027462
 800f704:	20027458 	.word	0x20027458
 800f708:	20027460 	.word	0x20027460

0800f70c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f70c:	b590      	push	{r4, r7, lr}
 800f70e:	b085      	sub	sp, #20
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d109      	bne.n	800f72e <tcp_process_refused_data+0x22>
 800f71a:	4b37      	ldr	r3, [pc, #220]	@ (800f7f8 <tcp_process_refused_data+0xec>)
 800f71c:	f240 6209 	movw	r2, #1545	@ 0x609
 800f720:	4936      	ldr	r1, [pc, #216]	@ (800f7fc <tcp_process_refused_data+0xf0>)
 800f722:	4837      	ldr	r0, [pc, #220]	@ (800f800 <tcp_process_refused_data+0xf4>)
 800f724:	f007 fdc6 	bl	80172b4 <iprintf>
 800f728:	f06f 030f 	mvn.w	r3, #15
 800f72c:	e060      	b.n	800f7f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f732:	7b5b      	ldrb	r3, [r3, #13]
 800f734:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f73a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2200      	movs	r2, #0
 800f740:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d00b      	beq.n	800f764 <tcp_process_refused_data+0x58>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6918      	ldr	r0, [r3, #16]
 800f756:	2300      	movs	r3, #0
 800f758:	68ba      	ldr	r2, [r7, #8]
 800f75a:	6879      	ldr	r1, [r7, #4]
 800f75c:	47a0      	blx	r4
 800f75e:	4603      	mov	r3, r0
 800f760:	73fb      	strb	r3, [r7, #15]
 800f762:	e007      	b.n	800f774 <tcp_process_refused_data+0x68>
 800f764:	2300      	movs	r3, #0
 800f766:	68ba      	ldr	r2, [r7, #8]
 800f768:	6879      	ldr	r1, [r7, #4]
 800f76a:	2000      	movs	r0, #0
 800f76c:	f000 f8a4 	bl	800f8b8 <tcp_recv_null>
 800f770:	4603      	mov	r3, r0
 800f772:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d12a      	bne.n	800f7d2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f77c:	7bbb      	ldrb	r3, [r7, #14]
 800f77e:	f003 0320 	and.w	r3, r3, #32
 800f782:	2b00      	cmp	r3, #0
 800f784:	d033      	beq.n	800f7ee <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f78a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f78e:	d005      	beq.n	800f79c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f794:	3301      	adds	r3, #1
 800f796:	b29a      	uxth	r2, r3
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00b      	beq.n	800f7be <tcp_process_refused_data+0xb2>
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6918      	ldr	r0, [r3, #16]
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	6879      	ldr	r1, [r7, #4]
 800f7b6:	47a0      	blx	r4
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	73fb      	strb	r3, [r7, #15]
 800f7bc:	e001      	b.n	800f7c2 <tcp_process_refused_data+0xb6>
 800f7be:	2300      	movs	r3, #0
 800f7c0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f7c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7c6:	f113 0f0d 	cmn.w	r3, #13
 800f7ca:	d110      	bne.n	800f7ee <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f7cc:	f06f 030c 	mvn.w	r3, #12
 800f7d0:	e00e      	b.n	800f7f0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f7d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7d6:	f113 0f0d 	cmn.w	r3, #13
 800f7da:	d102      	bne.n	800f7e2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f7dc:	f06f 030c 	mvn.w	r3, #12
 800f7e0:	e006      	b.n	800f7f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	68ba      	ldr	r2, [r7, #8]
 800f7e6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800f7e8:	f06f 0304 	mvn.w	r3, #4
 800f7ec:	e000      	b.n	800f7f0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f7ee:	2300      	movs	r3, #0
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3714      	adds	r7, #20
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd90      	pop	{r4, r7, pc}
 800f7f8:	080191c8 	.word	0x080191c8
 800f7fc:	080196d8 	.word	0x080196d8
 800f800:	0801920c 	.word	0x0801920c

0800f804 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f80c:	e007      	b.n	800f81e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f000 f80a 	bl	800f82e <tcp_seg_free>
    seg = next;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d1f4      	bne.n	800f80e <tcp_segs_free+0xa>
  }
}
 800f824:	bf00      	nop
 800f826:	bf00      	nop
 800f828:	3710      	adds	r7, #16
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}

0800f82e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f82e:	b580      	push	{r7, lr}
 800f830:	b082      	sub	sp, #8
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d00c      	beq.n	800f856 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d004      	beq.n	800f84e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	4618      	mov	r0, r3
 800f84a:	f7fe fd6f 	bl	800e32c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f84e:	6879      	ldr	r1, [r7, #4]
 800f850:	2003      	movs	r0, #3
 800f852:	f7fd fec7 	bl	800d5e4 <memp_free>
  }
}
 800f856:	bf00      	nop
 800f858:	3708      	adds	r7, #8
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
	...

0800f860 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b084      	sub	sp, #16
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d106      	bne.n	800f87c <tcp_seg_copy+0x1c>
 800f86e:	4b0f      	ldr	r3, [pc, #60]	@ (800f8ac <tcp_seg_copy+0x4c>)
 800f870:	f240 6282 	movw	r2, #1666	@ 0x682
 800f874:	490e      	ldr	r1, [pc, #56]	@ (800f8b0 <tcp_seg_copy+0x50>)
 800f876:	480f      	ldr	r0, [pc, #60]	@ (800f8b4 <tcp_seg_copy+0x54>)
 800f878:	f007 fd1c 	bl	80172b4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f87c:	2003      	movs	r0, #3
 800f87e:	f7fd fe3b 	bl	800d4f8 <memp_malloc>
 800f882:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d101      	bne.n	800f88e <tcp_seg_copy+0x2e>
    return NULL;
 800f88a:	2300      	movs	r3, #0
 800f88c:	e00a      	b.n	800f8a4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f88e:	2210      	movs	r2, #16
 800f890:	6879      	ldr	r1, [r7, #4]
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	f007 ff39 	bl	801770a <memcpy>
  pbuf_ref(cseg->p);
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	4618      	mov	r0, r3
 800f89e:	f7fe fdeb 	bl	800e478 <pbuf_ref>
  return cseg;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3710      	adds	r7, #16
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}
 800f8ac:	080191c8 	.word	0x080191c8
 800f8b0:	0801971c 	.word	0x0801971c
 800f8b4:	0801920c 	.word	0x0801920c

0800f8b8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b084      	sub	sp, #16
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	607a      	str	r2, [r7, #4]
 800f8c4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d109      	bne.n	800f8e0 <tcp_recv_null+0x28>
 800f8cc:	4b12      	ldr	r3, [pc, #72]	@ (800f918 <tcp_recv_null+0x60>)
 800f8ce:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800f8d2:	4912      	ldr	r1, [pc, #72]	@ (800f91c <tcp_recv_null+0x64>)
 800f8d4:	4812      	ldr	r0, [pc, #72]	@ (800f920 <tcp_recv_null+0x68>)
 800f8d6:	f007 fced 	bl	80172b4 <iprintf>
 800f8da:	f06f 030f 	mvn.w	r3, #15
 800f8de:	e016      	b.n	800f90e <tcp_recv_null+0x56>

  if (p != NULL) {
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d009      	beq.n	800f8fa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	891b      	ldrh	r3, [r3, #8]
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	68b8      	ldr	r0, [r7, #8]
 800f8ee:	f7ff fb17 	bl	800ef20 <tcp_recved>
    pbuf_free(p);
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f7fe fd1a 	bl	800e32c <pbuf_free>
 800f8f8:	e008      	b.n	800f90c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f8fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d104      	bne.n	800f90c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f902:	68b8      	ldr	r0, [r7, #8]
 800f904:	f7ff f9bc 	bl	800ec80 <tcp_close>
 800f908:	4603      	mov	r3, r0
 800f90a:	e000      	b.n	800f90e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f90c:	2300      	movs	r3, #0
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3710      	adds	r7, #16
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	080191c8 	.word	0x080191c8
 800f91c:	08019738 	.word	0x08019738
 800f920:	0801920c 	.word	0x0801920c

0800f924 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b086      	sub	sp, #24
 800f928:	af00      	add	r7, sp, #0
 800f92a:	4603      	mov	r3, r0
 800f92c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f92e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f932:	2b00      	cmp	r3, #0
 800f934:	db01      	blt.n	800f93a <tcp_kill_prio+0x16>
 800f936:	79fb      	ldrb	r3, [r7, #7]
 800f938:	e000      	b.n	800f93c <tcp_kill_prio+0x18>
 800f93a:	237f      	movs	r3, #127	@ 0x7f
 800f93c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f93e:	7afb      	ldrb	r3, [r7, #11]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d034      	beq.n	800f9ae <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f944:	7afb      	ldrb	r3, [r7, #11]
 800f946:	3b01      	subs	r3, #1
 800f948:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f94a:	2300      	movs	r3, #0
 800f94c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f94e:	2300      	movs	r3, #0
 800f950:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f952:	4b19      	ldr	r3, [pc, #100]	@ (800f9b8 <tcp_kill_prio+0x94>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	617b      	str	r3, [r7, #20]
 800f958:	e01f      	b.n	800f99a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	7d5b      	ldrb	r3, [r3, #21]
 800f95e:	7afa      	ldrb	r2, [r7, #11]
 800f960:	429a      	cmp	r2, r3
 800f962:	d80c      	bhi.n	800f97e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f968:	7afa      	ldrb	r2, [r7, #11]
 800f96a:	429a      	cmp	r2, r3
 800f96c:	d112      	bne.n	800f994 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f96e:	4b13      	ldr	r3, [pc, #76]	@ (800f9bc <tcp_kill_prio+0x98>)
 800f970:	681a      	ldr	r2, [r3, #0]
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	6a1b      	ldr	r3, [r3, #32]
 800f976:	1ad3      	subs	r3, r2, r3
 800f978:	68fa      	ldr	r2, [r7, #12]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d80a      	bhi.n	800f994 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f97e:	4b0f      	ldr	r3, [pc, #60]	@ (800f9bc <tcp_kill_prio+0x98>)
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	6a1b      	ldr	r3, [r3, #32]
 800f986:	1ad3      	subs	r3, r2, r3
 800f988:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	7d5b      	ldrb	r3, [r3, #21]
 800f992:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	68db      	ldr	r3, [r3, #12]
 800f998:	617b      	str	r3, [r7, #20]
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d1dc      	bne.n	800f95a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d004      	beq.n	800f9b0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f9a6:	6938      	ldr	r0, [r7, #16]
 800f9a8:	f7ff fa54 	bl	800ee54 <tcp_abort>
 800f9ac:	e000      	b.n	800f9b0 <tcp_kill_prio+0x8c>
    return;
 800f9ae:	bf00      	nop
  }
}
 800f9b0:	3718      	adds	r7, #24
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	20027458 	.word	0x20027458
 800f9bc:	2002744c 	.word	0x2002744c

0800f9c0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b086      	sub	sp, #24
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f9ca:	79fb      	ldrb	r3, [r7, #7]
 800f9cc:	2b08      	cmp	r3, #8
 800f9ce:	d009      	beq.n	800f9e4 <tcp_kill_state+0x24>
 800f9d0:	79fb      	ldrb	r3, [r7, #7]
 800f9d2:	2b09      	cmp	r3, #9
 800f9d4:	d006      	beq.n	800f9e4 <tcp_kill_state+0x24>
 800f9d6:	4b1a      	ldr	r3, [pc, #104]	@ (800fa40 <tcp_kill_state+0x80>)
 800f9d8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800f9dc:	4919      	ldr	r1, [pc, #100]	@ (800fa44 <tcp_kill_state+0x84>)
 800f9de:	481a      	ldr	r0, [pc, #104]	@ (800fa48 <tcp_kill_state+0x88>)
 800f9e0:	f007 fc68 	bl	80172b4 <iprintf>

  inactivity = 0;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9ec:	4b17      	ldr	r3, [pc, #92]	@ (800fa4c <tcp_kill_state+0x8c>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	617b      	str	r3, [r7, #20]
 800f9f2:	e017      	b.n	800fa24 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	7d1b      	ldrb	r3, [r3, #20]
 800f9f8:	79fa      	ldrb	r2, [r7, #7]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d10f      	bne.n	800fa1e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f9fe:	4b14      	ldr	r3, [pc, #80]	@ (800fa50 <tcp_kill_state+0x90>)
 800fa00:	681a      	ldr	r2, [r3, #0]
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	6a1b      	ldr	r3, [r3, #32]
 800fa06:	1ad3      	subs	r3, r2, r3
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d807      	bhi.n	800fa1e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800fa0e:	4b10      	ldr	r3, [pc, #64]	@ (800fa50 <tcp_kill_state+0x90>)
 800fa10:	681a      	ldr	r2, [r3, #0]
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	6a1b      	ldr	r3, [r3, #32]
 800fa16:	1ad3      	subs	r3, r2, r3
 800fa18:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	617b      	str	r3, [r7, #20]
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d1e4      	bne.n	800f9f4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d003      	beq.n	800fa38 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800fa30:	2100      	movs	r1, #0
 800fa32:	6938      	ldr	r0, [r7, #16]
 800fa34:	f7ff f950 	bl	800ecd8 <tcp_abandon>
  }
}
 800fa38:	bf00      	nop
 800fa3a:	3718      	adds	r7, #24
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}
 800fa40:	080191c8 	.word	0x080191c8
 800fa44:	08019754 	.word	0x08019754
 800fa48:	0801920c 	.word	0x0801920c
 800fa4c:	20027458 	.word	0x20027458
 800fa50:	2002744c 	.word	0x2002744c

0800fa54 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b084      	sub	sp, #16
 800fa58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa62:	4b12      	ldr	r3, [pc, #72]	@ (800faac <tcp_kill_timewait+0x58>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	60fb      	str	r3, [r7, #12]
 800fa68:	e012      	b.n	800fa90 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fa6a:	4b11      	ldr	r3, [pc, #68]	@ (800fab0 <tcp_kill_timewait+0x5c>)
 800fa6c:	681a      	ldr	r2, [r3, #0]
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	6a1b      	ldr	r3, [r3, #32]
 800fa72:	1ad3      	subs	r3, r2, r3
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d807      	bhi.n	800fa8a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fa7a:	4b0d      	ldr	r3, [pc, #52]	@ (800fab0 <tcp_kill_timewait+0x5c>)
 800fa7c:	681a      	ldr	r2, [r3, #0]
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	6a1b      	ldr	r3, [r3, #32]
 800fa82:	1ad3      	subs	r3, r2, r3
 800fa84:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	68db      	ldr	r3, [r3, #12]
 800fa8e:	60fb      	str	r3, [r7, #12]
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d1e9      	bne.n	800fa6a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d002      	beq.n	800faa2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fa9c:	68b8      	ldr	r0, [r7, #8]
 800fa9e:	f7ff f9d9 	bl	800ee54 <tcp_abort>
  }
}
 800faa2:	bf00      	nop
 800faa4:	3710      	adds	r7, #16
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}
 800faaa:	bf00      	nop
 800faac:	2002745c 	.word	0x2002745c
 800fab0:	2002744c 	.word	0x2002744c

0800fab4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800faba:	4b10      	ldr	r3, [pc, #64]	@ (800fafc <tcp_handle_closepend+0x48>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fac0:	e014      	b.n	800faec <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	68db      	ldr	r3, [r3, #12]
 800fac6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	8b5b      	ldrh	r3, [r3, #26]
 800facc:	f003 0308 	and.w	r3, r3, #8
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d009      	beq.n	800fae8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	8b5b      	ldrh	r3, [r3, #26]
 800fad8:	f023 0308 	bic.w	r3, r3, #8
 800fadc:	b29a      	uxth	r2, r3
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f7ff f862 	bl	800ebac <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d1e7      	bne.n	800fac2 <tcp_handle_closepend+0xe>
  }
}
 800faf2:	bf00      	nop
 800faf4:	bf00      	nop
 800faf6:	3708      	adds	r7, #8
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	20027458 	.word	0x20027458

0800fb00 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	4603      	mov	r3, r0
 800fb08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb0a:	2001      	movs	r0, #1
 800fb0c:	f7fd fcf4 	bl	800d4f8 <memp_malloc>
 800fb10:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d126      	bne.n	800fb66 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fb18:	f7ff ffcc 	bl	800fab4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fb1c:	f7ff ff9a 	bl	800fa54 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb20:	2001      	movs	r0, #1
 800fb22:	f7fd fce9 	bl	800d4f8 <memp_malloc>
 800fb26:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d11b      	bne.n	800fb66 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fb2e:	2009      	movs	r0, #9
 800fb30:	f7ff ff46 	bl	800f9c0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb34:	2001      	movs	r0, #1
 800fb36:	f7fd fcdf 	bl	800d4f8 <memp_malloc>
 800fb3a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d111      	bne.n	800fb66 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fb42:	2008      	movs	r0, #8
 800fb44:	f7ff ff3c 	bl	800f9c0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb48:	2001      	movs	r0, #1
 800fb4a:	f7fd fcd5 	bl	800d4f8 <memp_malloc>
 800fb4e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d107      	bne.n	800fb66 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fb56:	79fb      	ldrb	r3, [r7, #7]
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7ff fee3 	bl	800f924 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb5e:	2001      	movs	r0, #1
 800fb60:	f7fd fcca 	bl	800d4f8 <memp_malloc>
 800fb64:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d03f      	beq.n	800fbec <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fb6c:	229c      	movs	r2, #156	@ 0x9c
 800fb6e:	2100      	movs	r1, #0
 800fb70:	68f8      	ldr	r0, [r7, #12]
 800fb72:	f007 fcf7 	bl	8017564 <memset>
    pcb->prio = prio;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	79fa      	ldrb	r2, [r7, #7]
 800fb7a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800fb82:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800fb8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	22ff      	movs	r2, #255	@ 0xff
 800fb9a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fba2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2206      	movs	r2, #6
 800fba8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2206      	movs	r2, #6
 800fbb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fbb8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800fbc2:	4b0d      	ldr	r3, [pc, #52]	@ (800fbf8 <tcp_alloc+0xf8>)
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fbca:	4b0c      	ldr	r3, [pc, #48]	@ (800fbfc <tcp_alloc+0xfc>)
 800fbcc:	781a      	ldrb	r2, [r3, #0]
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800fbd8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	4a08      	ldr	r2, [pc, #32]	@ (800fc00 <tcp_alloc+0x100>)
 800fbe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	4a07      	ldr	r2, [pc, #28]	@ (800fc04 <tcp_alloc+0x104>)
 800fbe8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fbec:	68fb      	ldr	r3, [r7, #12]
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	2002744c 	.word	0x2002744c
 800fbfc:	20027462 	.word	0x20027462
 800fc00:	0800f8b9 	.word	0x0800f8b9
 800fc04:	006ddd00 	.word	0x006ddd00

0800fc08 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d107      	bne.n	800fc26 <tcp_pcb_purge+0x1e>
 800fc16:	4b21      	ldr	r3, [pc, #132]	@ (800fc9c <tcp_pcb_purge+0x94>)
 800fc18:	f640 0251 	movw	r2, #2129	@ 0x851
 800fc1c:	4920      	ldr	r1, [pc, #128]	@ (800fca0 <tcp_pcb_purge+0x98>)
 800fc1e:	4821      	ldr	r0, [pc, #132]	@ (800fca4 <tcp_pcb_purge+0x9c>)
 800fc20:	f007 fb48 	bl	80172b4 <iprintf>
 800fc24:	e037      	b.n	800fc96 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	7d1b      	ldrb	r3, [r3, #20]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d033      	beq.n	800fc96 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fc32:	2b0a      	cmp	r3, #10
 800fc34:	d02f      	beq.n	800fc96 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d02b      	beq.n	800fc96 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d007      	beq.n	800fc56 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7fe fb6e 	bl	800e32c <pbuf_free>
      pcb->refused_data = NULL;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2200      	movs	r2, #0
 800fc54:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d002      	beq.n	800fc64 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 f986 	bl	800ff70 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc6a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7ff fdc7 	bl	800f804 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7ff fdc2 	bl	800f804 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2200      	movs	r2, #0
 800fc84:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	080191c8 	.word	0x080191c8
 800fca0:	08019814 	.word	0x08019814
 800fca4:	0801920c 	.word	0x0801920c

0800fca8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d106      	bne.n	800fcc6 <tcp_pcb_remove+0x1e>
 800fcb8:	4b3e      	ldr	r3, [pc, #248]	@ (800fdb4 <tcp_pcb_remove+0x10c>)
 800fcba:	f640 0283 	movw	r2, #2179	@ 0x883
 800fcbe:	493e      	ldr	r1, [pc, #248]	@ (800fdb8 <tcp_pcb_remove+0x110>)
 800fcc0:	483e      	ldr	r0, [pc, #248]	@ (800fdbc <tcp_pcb_remove+0x114>)
 800fcc2:	f007 faf7 	bl	80172b4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d106      	bne.n	800fcda <tcp_pcb_remove+0x32>
 800fccc:	4b39      	ldr	r3, [pc, #228]	@ (800fdb4 <tcp_pcb_remove+0x10c>)
 800fcce:	f640 0284 	movw	r2, #2180	@ 0x884
 800fcd2:	493b      	ldr	r1, [pc, #236]	@ (800fdc0 <tcp_pcb_remove+0x118>)
 800fcd4:	4839      	ldr	r0, [pc, #228]	@ (800fdbc <tcp_pcb_remove+0x114>)
 800fcd6:	f007 faed 	bl	80172b4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	683a      	ldr	r2, [r7, #0]
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d105      	bne.n	800fcf0 <tcp_pcb_remove+0x48>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	68da      	ldr	r2, [r3, #12]
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	601a      	str	r2, [r3, #0]
 800fcee:	e013      	b.n	800fd18 <tcp_pcb_remove+0x70>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	60fb      	str	r3, [r7, #12]
 800fcf6:	e00c      	b.n	800fd12 <tcp_pcb_remove+0x6a>
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	683a      	ldr	r2, [r7, #0]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d104      	bne.n	800fd0c <tcp_pcb_remove+0x64>
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	68da      	ldr	r2, [r3, #12]
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	60da      	str	r2, [r3, #12]
 800fd0a:	e005      	b.n	800fd18 <tcp_pcb_remove+0x70>
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	68db      	ldr	r3, [r3, #12]
 800fd10:	60fb      	str	r3, [r7, #12]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d1ef      	bne.n	800fcf8 <tcp_pcb_remove+0x50>
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fd1e:	6838      	ldr	r0, [r7, #0]
 800fd20:	f7ff ff72 	bl	800fc08 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	7d1b      	ldrb	r3, [r3, #20]
 800fd28:	2b0a      	cmp	r3, #10
 800fd2a:	d013      	beq.n	800fd54 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	d00f      	beq.n	800fd54 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	8b5b      	ldrh	r3, [r3, #26]
 800fd38:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d009      	beq.n	800fd54 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	8b5b      	ldrh	r3, [r3, #26]
 800fd44:	f043 0302 	orr.w	r3, r3, #2
 800fd48:	b29a      	uxth	r2, r3
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fd4e:	6838      	ldr	r0, [r7, #0]
 800fd50:	f002 ff68 	bl	8012c24 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	7d1b      	ldrb	r3, [r3, #20]
 800fd58:	2b01      	cmp	r3, #1
 800fd5a:	d020      	beq.n	800fd9e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d006      	beq.n	800fd72 <tcp_pcb_remove+0xca>
 800fd64:	4b13      	ldr	r3, [pc, #76]	@ (800fdb4 <tcp_pcb_remove+0x10c>)
 800fd66:	f640 0293 	movw	r2, #2195	@ 0x893
 800fd6a:	4916      	ldr	r1, [pc, #88]	@ (800fdc4 <tcp_pcb_remove+0x11c>)
 800fd6c:	4813      	ldr	r0, [pc, #76]	@ (800fdbc <tcp_pcb_remove+0x114>)
 800fd6e:	f007 faa1 	bl	80172b4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d006      	beq.n	800fd88 <tcp_pcb_remove+0xe0>
 800fd7a:	4b0e      	ldr	r3, [pc, #56]	@ (800fdb4 <tcp_pcb_remove+0x10c>)
 800fd7c:	f640 0294 	movw	r2, #2196	@ 0x894
 800fd80:	4911      	ldr	r1, [pc, #68]	@ (800fdc8 <tcp_pcb_remove+0x120>)
 800fd82:	480e      	ldr	r0, [pc, #56]	@ (800fdbc <tcp_pcb_remove+0x114>)
 800fd84:	f007 fa96 	bl	80172b4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d006      	beq.n	800fd9e <tcp_pcb_remove+0xf6>
 800fd90:	4b08      	ldr	r3, [pc, #32]	@ (800fdb4 <tcp_pcb_remove+0x10c>)
 800fd92:	f640 0296 	movw	r2, #2198	@ 0x896
 800fd96:	490d      	ldr	r1, [pc, #52]	@ (800fdcc <tcp_pcb_remove+0x124>)
 800fd98:	4808      	ldr	r0, [pc, #32]	@ (800fdbc <tcp_pcb_remove+0x114>)
 800fd9a:	f007 fa8b 	bl	80172b4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	2200      	movs	r2, #0
 800fda2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	2200      	movs	r2, #0
 800fda8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fdaa:	bf00      	nop
 800fdac:	3710      	adds	r7, #16
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
 800fdb2:	bf00      	nop
 800fdb4:	080191c8 	.word	0x080191c8
 800fdb8:	08019830 	.word	0x08019830
 800fdbc:	0801920c 	.word	0x0801920c
 800fdc0:	0801984c 	.word	0x0801984c
 800fdc4:	0801986c 	.word	0x0801986c
 800fdc8:	08019884 	.word	0x08019884
 800fdcc:	080198a0 	.word	0x080198a0

0800fdd0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d106      	bne.n	800fdec <tcp_next_iss+0x1c>
 800fdde:	4b0a      	ldr	r3, [pc, #40]	@ (800fe08 <tcp_next_iss+0x38>)
 800fde0:	f640 02af 	movw	r2, #2223	@ 0x8af
 800fde4:	4909      	ldr	r1, [pc, #36]	@ (800fe0c <tcp_next_iss+0x3c>)
 800fde6:	480a      	ldr	r0, [pc, #40]	@ (800fe10 <tcp_next_iss+0x40>)
 800fde8:	f007 fa64 	bl	80172b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fdec:	4b09      	ldr	r3, [pc, #36]	@ (800fe14 <tcp_next_iss+0x44>)
 800fdee:	681a      	ldr	r2, [r3, #0]
 800fdf0:	4b09      	ldr	r3, [pc, #36]	@ (800fe18 <tcp_next_iss+0x48>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	4413      	add	r3, r2
 800fdf6:	4a07      	ldr	r2, [pc, #28]	@ (800fe14 <tcp_next_iss+0x44>)
 800fdf8:	6013      	str	r3, [r2, #0]
  return iss;
 800fdfa:	4b06      	ldr	r3, [pc, #24]	@ (800fe14 <tcp_next_iss+0x44>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3708      	adds	r7, #8
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	080191c8 	.word	0x080191c8
 800fe0c:	080198b8 	.word	0x080198b8
 800fe10:	0801920c 	.word	0x0801920c
 800fe14:	20000028 	.word	0x20000028
 800fe18:	2002744c 	.word	0x2002744c

0800fe1c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b086      	sub	sp, #24
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	4603      	mov	r3, r0
 800fe24:	60b9      	str	r1, [r7, #8]
 800fe26:	607a      	str	r2, [r7, #4]
 800fe28:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d106      	bne.n	800fe3e <tcp_eff_send_mss_netif+0x22>
 800fe30:	4b14      	ldr	r3, [pc, #80]	@ (800fe84 <tcp_eff_send_mss_netif+0x68>)
 800fe32:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800fe36:	4914      	ldr	r1, [pc, #80]	@ (800fe88 <tcp_eff_send_mss_netif+0x6c>)
 800fe38:	4814      	ldr	r0, [pc, #80]	@ (800fe8c <tcp_eff_send_mss_netif+0x70>)
 800fe3a:	f007 fa3b 	bl	80172b4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d101      	bne.n	800fe48 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fe44:	89fb      	ldrh	r3, [r7, #14]
 800fe46:	e019      	b.n	800fe7c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fe4c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fe4e:	8afb      	ldrh	r3, [r7, #22]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d012      	beq.n	800fe7a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fe54:	2328      	movs	r3, #40	@ 0x28
 800fe56:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fe58:	8afa      	ldrh	r2, [r7, #22]
 800fe5a:	8abb      	ldrh	r3, [r7, #20]
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d904      	bls.n	800fe6a <tcp_eff_send_mss_netif+0x4e>
 800fe60:	8afa      	ldrh	r2, [r7, #22]
 800fe62:	8abb      	ldrh	r3, [r7, #20]
 800fe64:	1ad3      	subs	r3, r2, r3
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	e000      	b.n	800fe6c <tcp_eff_send_mss_netif+0x50>
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fe6e:	8a7a      	ldrh	r2, [r7, #18]
 800fe70:	89fb      	ldrh	r3, [r7, #14]
 800fe72:	4293      	cmp	r3, r2
 800fe74:	bf28      	it	cs
 800fe76:	4613      	movcs	r3, r2
 800fe78:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fe7a:	89fb      	ldrh	r3, [r7, #14]
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3718      	adds	r7, #24
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	080191c8 	.word	0x080191c8
 800fe88:	080198d4 	.word	0x080198d4
 800fe8c:	0801920c 	.word	0x0801920c

0800fe90 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d119      	bne.n	800fed8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fea4:	4b10      	ldr	r3, [pc, #64]	@ (800fee8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fea6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800feaa:	4910      	ldr	r1, [pc, #64]	@ (800feec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800feac:	4810      	ldr	r0, [pc, #64]	@ (800fef0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800feae:	f007 fa01 	bl	80172b4 <iprintf>

  while (pcb != NULL) {
 800feb2:	e011      	b.n	800fed8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681a      	ldr	r2, [r3, #0]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	429a      	cmp	r2, r3
 800febe:	d108      	bne.n	800fed2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	68db      	ldr	r3, [r3, #12]
 800fec4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fec6:	68f8      	ldr	r0, [r7, #12]
 800fec8:	f7fe ffc4 	bl	800ee54 <tcp_abort>
      pcb = next;
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	60fb      	str	r3, [r7, #12]
 800fed0:	e002      	b.n	800fed8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	68db      	ldr	r3, [r3, #12]
 800fed6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d1ea      	bne.n	800feb4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fede:	bf00      	nop
 800fee0:	bf00      	nop
 800fee2:	3710      	adds	r7, #16
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	080191c8 	.word	0x080191c8
 800feec:	080198fc 	.word	0x080198fc
 800fef0:	0801920c 	.word	0x0801920c

0800fef4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b084      	sub	sp, #16
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d02a      	beq.n	800ff5a <tcp_netif_ip_addr_changed+0x66>
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d026      	beq.n	800ff5a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ff0c:	4b15      	ldr	r3, [pc, #84]	@ (800ff64 <tcp_netif_ip_addr_changed+0x70>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	4619      	mov	r1, r3
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f7ff ffbc 	bl	800fe90 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ff18:	4b13      	ldr	r3, [pc, #76]	@ (800ff68 <tcp_netif_ip_addr_changed+0x74>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f7ff ffb6 	bl	800fe90 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d017      	beq.n	800ff5a <tcp_netif_ip_addr_changed+0x66>
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d013      	beq.n	800ff5a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ff32:	4b0e      	ldr	r3, [pc, #56]	@ (800ff6c <tcp_netif_ip_addr_changed+0x78>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	60fb      	str	r3, [r7, #12]
 800ff38:	e00c      	b.n	800ff54 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d103      	bne.n	800ff4e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	681a      	ldr	r2, [r3, #0]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	60fb      	str	r3, [r7, #12]
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d1ef      	bne.n	800ff3a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ff5a:	bf00      	nop
 800ff5c:	3710      	adds	r7, #16
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
 800ff62:	bf00      	nop
 800ff64:	20027458 	.word	0x20027458
 800ff68:	20027450 	.word	0x20027450
 800ff6c:	20027454 	.word	0x20027454

0800ff70 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d007      	beq.n	800ff90 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7ff fc3d 	bl	800f804 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ff90:	bf00      	nop
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ff98:	b590      	push	{r4, r7, lr}
 800ff9a:	b08d      	sub	sp, #52	@ 0x34
 800ff9c:	af04      	add	r7, sp, #16
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d105      	bne.n	800ffb4 <tcp_input+0x1c>
 800ffa8:	4b9b      	ldr	r3, [pc, #620]	@ (8010218 <tcp_input+0x280>)
 800ffaa:	2283      	movs	r2, #131	@ 0x83
 800ffac:	499b      	ldr	r1, [pc, #620]	@ (801021c <tcp_input+0x284>)
 800ffae:	489c      	ldr	r0, [pc, #624]	@ (8010220 <tcp_input+0x288>)
 800ffb0:	f007 f980 	bl	80172b4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	4a9a      	ldr	r2, [pc, #616]	@ (8010224 <tcp_input+0x28c>)
 800ffba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	895b      	ldrh	r3, [r3, #10]
 800ffc0:	2b13      	cmp	r3, #19
 800ffc2:	f240 83d1 	bls.w	8010768 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ffc6:	4b98      	ldr	r3, [pc, #608]	@ (8010228 <tcp_input+0x290>)
 800ffc8:	695b      	ldr	r3, [r3, #20]
 800ffca:	4a97      	ldr	r2, [pc, #604]	@ (8010228 <tcp_input+0x290>)
 800ffcc:	6812      	ldr	r2, [r2, #0]
 800ffce:	4611      	mov	r1, r2
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f005 fd39 	bl	8015a48 <ip4_addr_isbroadcast_u32>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	f040 83c7 	bne.w	801076c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ffde:	4b92      	ldr	r3, [pc, #584]	@ (8010228 <tcp_input+0x290>)
 800ffe0:	695b      	ldr	r3, [r3, #20]
 800ffe2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ffe6:	2be0      	cmp	r3, #224	@ 0xe0
 800ffe8:	f000 83c0 	beq.w	801076c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ffec:	4b8d      	ldr	r3, [pc, #564]	@ (8010224 <tcp_input+0x28c>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	899b      	ldrh	r3, [r3, #12]
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7fc fdab 	bl	800cb50 <lwip_htons>
 800fffa:	4603      	mov	r3, r0
 800fffc:	0b1b      	lsrs	r3, r3, #12
 800fffe:	b29b      	uxth	r3, r3
 8010000:	b2db      	uxtb	r3, r3
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010006:	7cbb      	ldrb	r3, [r7, #18]
 8010008:	2b13      	cmp	r3, #19
 801000a:	f240 83b1 	bls.w	8010770 <tcp_input+0x7d8>
 801000e:	7cbb      	ldrb	r3, [r7, #18]
 8010010:	b29a      	uxth	r2, r3
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	891b      	ldrh	r3, [r3, #8]
 8010016:	429a      	cmp	r2, r3
 8010018:	f200 83aa 	bhi.w	8010770 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801001c:	7cbb      	ldrb	r3, [r7, #18]
 801001e:	b29b      	uxth	r3, r3
 8010020:	3b14      	subs	r3, #20
 8010022:	b29a      	uxth	r2, r3
 8010024:	4b81      	ldr	r3, [pc, #516]	@ (801022c <tcp_input+0x294>)
 8010026:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010028:	4b81      	ldr	r3, [pc, #516]	@ (8010230 <tcp_input+0x298>)
 801002a:	2200      	movs	r2, #0
 801002c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	895a      	ldrh	r2, [r3, #10]
 8010032:	7cbb      	ldrb	r3, [r7, #18]
 8010034:	b29b      	uxth	r3, r3
 8010036:	429a      	cmp	r2, r3
 8010038:	d309      	bcc.n	801004e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801003a:	4b7c      	ldr	r3, [pc, #496]	@ (801022c <tcp_input+0x294>)
 801003c:	881a      	ldrh	r2, [r3, #0]
 801003e:	4b7d      	ldr	r3, [pc, #500]	@ (8010234 <tcp_input+0x29c>)
 8010040:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010042:	7cbb      	ldrb	r3, [r7, #18]
 8010044:	4619      	mov	r1, r3
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f7fe f8ea 	bl	800e220 <pbuf_remove_header>
 801004c:	e04e      	b.n	80100ec <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d105      	bne.n	8010062 <tcp_input+0xca>
 8010056:	4b70      	ldr	r3, [pc, #448]	@ (8010218 <tcp_input+0x280>)
 8010058:	22c2      	movs	r2, #194	@ 0xc2
 801005a:	4977      	ldr	r1, [pc, #476]	@ (8010238 <tcp_input+0x2a0>)
 801005c:	4870      	ldr	r0, [pc, #448]	@ (8010220 <tcp_input+0x288>)
 801005e:	f007 f929 	bl	80172b4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010062:	2114      	movs	r1, #20
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f7fe f8db 	bl	800e220 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	895a      	ldrh	r2, [r3, #10]
 801006e:	4b71      	ldr	r3, [pc, #452]	@ (8010234 <tcp_input+0x29c>)
 8010070:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010072:	4b6e      	ldr	r3, [pc, #440]	@ (801022c <tcp_input+0x294>)
 8010074:	881a      	ldrh	r2, [r3, #0]
 8010076:	4b6f      	ldr	r3, [pc, #444]	@ (8010234 <tcp_input+0x29c>)
 8010078:	881b      	ldrh	r3, [r3, #0]
 801007a:	1ad3      	subs	r3, r2, r3
 801007c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801007e:	4b6d      	ldr	r3, [pc, #436]	@ (8010234 <tcp_input+0x29c>)
 8010080:	881b      	ldrh	r3, [r3, #0]
 8010082:	4619      	mov	r1, r3
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f7fe f8cb 	bl	800e220 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	895b      	ldrh	r3, [r3, #10]
 8010090:	8a3a      	ldrh	r2, [r7, #16]
 8010092:	429a      	cmp	r2, r3
 8010094:	f200 836e 	bhi.w	8010774 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	4a64      	ldr	r2, [pc, #400]	@ (8010230 <tcp_input+0x298>)
 80100a0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	8a3a      	ldrh	r2, [r7, #16]
 80100a8:	4611      	mov	r1, r2
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7fe f8b8 	bl	800e220 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	891a      	ldrh	r2, [r3, #8]
 80100b4:	8a3b      	ldrh	r3, [r7, #16]
 80100b6:	1ad3      	subs	r3, r2, r3
 80100b8:	b29a      	uxth	r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	895b      	ldrh	r3, [r3, #10]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d005      	beq.n	80100d2 <tcp_input+0x13a>
 80100c6:	4b54      	ldr	r3, [pc, #336]	@ (8010218 <tcp_input+0x280>)
 80100c8:	22df      	movs	r2, #223	@ 0xdf
 80100ca:	495c      	ldr	r1, [pc, #368]	@ (801023c <tcp_input+0x2a4>)
 80100cc:	4854      	ldr	r0, [pc, #336]	@ (8010220 <tcp_input+0x288>)
 80100ce:	f007 f8f1 	bl	80172b4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	891a      	ldrh	r2, [r3, #8]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	891b      	ldrh	r3, [r3, #8]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d005      	beq.n	80100ec <tcp_input+0x154>
 80100e0:	4b4d      	ldr	r3, [pc, #308]	@ (8010218 <tcp_input+0x280>)
 80100e2:	22e0      	movs	r2, #224	@ 0xe0
 80100e4:	4956      	ldr	r1, [pc, #344]	@ (8010240 <tcp_input+0x2a8>)
 80100e6:	484e      	ldr	r0, [pc, #312]	@ (8010220 <tcp_input+0x288>)
 80100e8:	f007 f8e4 	bl	80172b4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80100ec:	4b4d      	ldr	r3, [pc, #308]	@ (8010224 <tcp_input+0x28c>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	881b      	ldrh	r3, [r3, #0]
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	4a4b      	ldr	r2, [pc, #300]	@ (8010224 <tcp_input+0x28c>)
 80100f6:	6814      	ldr	r4, [r2, #0]
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7fc fd29 	bl	800cb50 <lwip_htons>
 80100fe:	4603      	mov	r3, r0
 8010100:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010102:	4b48      	ldr	r3, [pc, #288]	@ (8010224 <tcp_input+0x28c>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	885b      	ldrh	r3, [r3, #2]
 8010108:	b29b      	uxth	r3, r3
 801010a:	4a46      	ldr	r2, [pc, #280]	@ (8010224 <tcp_input+0x28c>)
 801010c:	6814      	ldr	r4, [r2, #0]
 801010e:	4618      	mov	r0, r3
 8010110:	f7fc fd1e 	bl	800cb50 <lwip_htons>
 8010114:	4603      	mov	r3, r0
 8010116:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010118:	4b42      	ldr	r3, [pc, #264]	@ (8010224 <tcp_input+0x28c>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	685b      	ldr	r3, [r3, #4]
 801011e:	4a41      	ldr	r2, [pc, #260]	@ (8010224 <tcp_input+0x28c>)
 8010120:	6814      	ldr	r4, [r2, #0]
 8010122:	4618      	mov	r0, r3
 8010124:	f7fc fd2a 	bl	800cb7c <lwip_htonl>
 8010128:	4603      	mov	r3, r0
 801012a:	6063      	str	r3, [r4, #4]
 801012c:	6863      	ldr	r3, [r4, #4]
 801012e:	4a45      	ldr	r2, [pc, #276]	@ (8010244 <tcp_input+0x2ac>)
 8010130:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010132:	4b3c      	ldr	r3, [pc, #240]	@ (8010224 <tcp_input+0x28c>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	689b      	ldr	r3, [r3, #8]
 8010138:	4a3a      	ldr	r2, [pc, #232]	@ (8010224 <tcp_input+0x28c>)
 801013a:	6814      	ldr	r4, [r2, #0]
 801013c:	4618      	mov	r0, r3
 801013e:	f7fc fd1d 	bl	800cb7c <lwip_htonl>
 8010142:	4603      	mov	r3, r0
 8010144:	60a3      	str	r3, [r4, #8]
 8010146:	68a3      	ldr	r3, [r4, #8]
 8010148:	4a3f      	ldr	r2, [pc, #252]	@ (8010248 <tcp_input+0x2b0>)
 801014a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801014c:	4b35      	ldr	r3, [pc, #212]	@ (8010224 <tcp_input+0x28c>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	89db      	ldrh	r3, [r3, #14]
 8010152:	b29b      	uxth	r3, r3
 8010154:	4a33      	ldr	r2, [pc, #204]	@ (8010224 <tcp_input+0x28c>)
 8010156:	6814      	ldr	r4, [r2, #0]
 8010158:	4618      	mov	r0, r3
 801015a:	f7fc fcf9 	bl	800cb50 <lwip_htons>
 801015e:	4603      	mov	r3, r0
 8010160:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010162:	4b30      	ldr	r3, [pc, #192]	@ (8010224 <tcp_input+0x28c>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	899b      	ldrh	r3, [r3, #12]
 8010168:	b29b      	uxth	r3, r3
 801016a:	4618      	mov	r0, r3
 801016c:	f7fc fcf0 	bl	800cb50 <lwip_htons>
 8010170:	4603      	mov	r3, r0
 8010172:	b2db      	uxtb	r3, r3
 8010174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010178:	b2da      	uxtb	r2, r3
 801017a:	4b34      	ldr	r3, [pc, #208]	@ (801024c <tcp_input+0x2b4>)
 801017c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	891a      	ldrh	r2, [r3, #8]
 8010182:	4b33      	ldr	r3, [pc, #204]	@ (8010250 <tcp_input+0x2b8>)
 8010184:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010186:	4b31      	ldr	r3, [pc, #196]	@ (801024c <tcp_input+0x2b4>)
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	f003 0303 	and.w	r3, r3, #3
 801018e:	2b00      	cmp	r3, #0
 8010190:	d00c      	beq.n	80101ac <tcp_input+0x214>
    tcplen++;
 8010192:	4b2f      	ldr	r3, [pc, #188]	@ (8010250 <tcp_input+0x2b8>)
 8010194:	881b      	ldrh	r3, [r3, #0]
 8010196:	3301      	adds	r3, #1
 8010198:	b29a      	uxth	r2, r3
 801019a:	4b2d      	ldr	r3, [pc, #180]	@ (8010250 <tcp_input+0x2b8>)
 801019c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	891a      	ldrh	r2, [r3, #8]
 80101a2:	4b2b      	ldr	r3, [pc, #172]	@ (8010250 <tcp_input+0x2b8>)
 80101a4:	881b      	ldrh	r3, [r3, #0]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	f200 82e6 	bhi.w	8010778 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80101ac:	2300      	movs	r3, #0
 80101ae:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80101b0:	4b28      	ldr	r3, [pc, #160]	@ (8010254 <tcp_input+0x2bc>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	61fb      	str	r3, [r7, #28]
 80101b6:	e09d      	b.n	80102f4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	7d1b      	ldrb	r3, [r3, #20]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d105      	bne.n	80101cc <tcp_input+0x234>
 80101c0:	4b15      	ldr	r3, [pc, #84]	@ (8010218 <tcp_input+0x280>)
 80101c2:	22fb      	movs	r2, #251	@ 0xfb
 80101c4:	4924      	ldr	r1, [pc, #144]	@ (8010258 <tcp_input+0x2c0>)
 80101c6:	4816      	ldr	r0, [pc, #88]	@ (8010220 <tcp_input+0x288>)
 80101c8:	f007 f874 	bl	80172b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	7d1b      	ldrb	r3, [r3, #20]
 80101d0:	2b0a      	cmp	r3, #10
 80101d2:	d105      	bne.n	80101e0 <tcp_input+0x248>
 80101d4:	4b10      	ldr	r3, [pc, #64]	@ (8010218 <tcp_input+0x280>)
 80101d6:	22fc      	movs	r2, #252	@ 0xfc
 80101d8:	4920      	ldr	r1, [pc, #128]	@ (801025c <tcp_input+0x2c4>)
 80101da:	4811      	ldr	r0, [pc, #68]	@ (8010220 <tcp_input+0x288>)
 80101dc:	f007 f86a 	bl	80172b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80101e0:	69fb      	ldr	r3, [r7, #28]
 80101e2:	7d1b      	ldrb	r3, [r3, #20]
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d105      	bne.n	80101f4 <tcp_input+0x25c>
 80101e8:	4b0b      	ldr	r3, [pc, #44]	@ (8010218 <tcp_input+0x280>)
 80101ea:	22fd      	movs	r2, #253	@ 0xfd
 80101ec:	491c      	ldr	r1, [pc, #112]	@ (8010260 <tcp_input+0x2c8>)
 80101ee:	480c      	ldr	r0, [pc, #48]	@ (8010220 <tcp_input+0x288>)
 80101f0:	f007 f860 	bl	80172b4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80101f4:	69fb      	ldr	r3, [r7, #28]
 80101f6:	7a1b      	ldrb	r3, [r3, #8]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d033      	beq.n	8010264 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80101fc:	69fb      	ldr	r3, [r7, #28]
 80101fe:	7a1a      	ldrb	r2, [r3, #8]
 8010200:	4b09      	ldr	r3, [pc, #36]	@ (8010228 <tcp_input+0x290>)
 8010202:	685b      	ldr	r3, [r3, #4]
 8010204:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010208:	3301      	adds	r3, #1
 801020a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801020c:	429a      	cmp	r2, r3
 801020e:	d029      	beq.n	8010264 <tcp_input+0x2cc>
      prev = pcb;
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	61bb      	str	r3, [r7, #24]
      continue;
 8010214:	e06b      	b.n	80102ee <tcp_input+0x356>
 8010216:	bf00      	nop
 8010218:	08019930 	.word	0x08019930
 801021c:	08019964 	.word	0x08019964
 8010220:	0801997c 	.word	0x0801997c
 8010224:	20027474 	.word	0x20027474
 8010228:	2002434c 	.word	0x2002434c
 801022c:	20027478 	.word	0x20027478
 8010230:	2002747c 	.word	0x2002747c
 8010234:	2002747a 	.word	0x2002747a
 8010238:	080199a4 	.word	0x080199a4
 801023c:	080199b4 	.word	0x080199b4
 8010240:	080199c0 	.word	0x080199c0
 8010244:	20027484 	.word	0x20027484
 8010248:	20027488 	.word	0x20027488
 801024c:	20027490 	.word	0x20027490
 8010250:	2002748e 	.word	0x2002748e
 8010254:	20027458 	.word	0x20027458
 8010258:	080199e0 	.word	0x080199e0
 801025c:	08019a08 	.word	0x08019a08
 8010260:	08019a34 	.word	0x08019a34
    }

    if (pcb->remote_port == tcphdr->src &&
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	8b1a      	ldrh	r2, [r3, #24]
 8010268:	4b72      	ldr	r3, [pc, #456]	@ (8010434 <tcp_input+0x49c>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	881b      	ldrh	r3, [r3, #0]
 801026e:	b29b      	uxth	r3, r3
 8010270:	429a      	cmp	r2, r3
 8010272:	d13a      	bne.n	80102ea <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010274:	69fb      	ldr	r3, [r7, #28]
 8010276:	8ada      	ldrh	r2, [r3, #22]
 8010278:	4b6e      	ldr	r3, [pc, #440]	@ (8010434 <tcp_input+0x49c>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	885b      	ldrh	r3, [r3, #2]
 801027e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010280:	429a      	cmp	r2, r3
 8010282:	d132      	bne.n	80102ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010284:	69fb      	ldr	r3, [r7, #28]
 8010286:	685a      	ldr	r2, [r3, #4]
 8010288:	4b6b      	ldr	r3, [pc, #428]	@ (8010438 <tcp_input+0x4a0>)
 801028a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801028c:	429a      	cmp	r2, r3
 801028e:	d12c      	bne.n	80102ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	681a      	ldr	r2, [r3, #0]
 8010294:	4b68      	ldr	r3, [pc, #416]	@ (8010438 <tcp_input+0x4a0>)
 8010296:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010298:	429a      	cmp	r2, r3
 801029a:	d126      	bne.n	80102ea <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801029c:	69fb      	ldr	r3, [r7, #28]
 801029e:	68db      	ldr	r3, [r3, #12]
 80102a0:	69fa      	ldr	r2, [r7, #28]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d106      	bne.n	80102b4 <tcp_input+0x31c>
 80102a6:	4b65      	ldr	r3, [pc, #404]	@ (801043c <tcp_input+0x4a4>)
 80102a8:	f240 120d 	movw	r2, #269	@ 0x10d
 80102ac:	4964      	ldr	r1, [pc, #400]	@ (8010440 <tcp_input+0x4a8>)
 80102ae:	4865      	ldr	r0, [pc, #404]	@ (8010444 <tcp_input+0x4ac>)
 80102b0:	f007 f800 	bl	80172b4 <iprintf>
      if (prev != NULL) {
 80102b4:	69bb      	ldr	r3, [r7, #24]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d00a      	beq.n	80102d0 <tcp_input+0x338>
        prev->next = pcb->next;
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	68da      	ldr	r2, [r3, #12]
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80102c2:	4b61      	ldr	r3, [pc, #388]	@ (8010448 <tcp_input+0x4b0>)
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	69fb      	ldr	r3, [r7, #28]
 80102c8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80102ca:	4a5f      	ldr	r2, [pc, #380]	@ (8010448 <tcp_input+0x4b0>)
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	68db      	ldr	r3, [r3, #12]
 80102d4:	69fa      	ldr	r2, [r7, #28]
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d111      	bne.n	80102fe <tcp_input+0x366>
 80102da:	4b58      	ldr	r3, [pc, #352]	@ (801043c <tcp_input+0x4a4>)
 80102dc:	f240 1215 	movw	r2, #277	@ 0x115
 80102e0:	495a      	ldr	r1, [pc, #360]	@ (801044c <tcp_input+0x4b4>)
 80102e2:	4858      	ldr	r0, [pc, #352]	@ (8010444 <tcp_input+0x4ac>)
 80102e4:	f006 ffe6 	bl	80172b4 <iprintf>
      break;
 80102e8:	e009      	b.n	80102fe <tcp_input+0x366>
    }
    prev = pcb;
 80102ea:	69fb      	ldr	r3, [r7, #28]
 80102ec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102ee:	69fb      	ldr	r3, [r7, #28]
 80102f0:	68db      	ldr	r3, [r3, #12]
 80102f2:	61fb      	str	r3, [r7, #28]
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	f47f af5e 	bne.w	80101b8 <tcp_input+0x220>
 80102fc:	e000      	b.n	8010300 <tcp_input+0x368>
      break;
 80102fe:	bf00      	nop
  }

  if (pcb == NULL) {
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	2b00      	cmp	r3, #0
 8010304:	f040 80aa 	bne.w	801045c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010308:	4b51      	ldr	r3, [pc, #324]	@ (8010450 <tcp_input+0x4b8>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	61fb      	str	r3, [r7, #28]
 801030e:	e03f      	b.n	8010390 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010310:	69fb      	ldr	r3, [r7, #28]
 8010312:	7d1b      	ldrb	r3, [r3, #20]
 8010314:	2b0a      	cmp	r3, #10
 8010316:	d006      	beq.n	8010326 <tcp_input+0x38e>
 8010318:	4b48      	ldr	r3, [pc, #288]	@ (801043c <tcp_input+0x4a4>)
 801031a:	f240 121f 	movw	r2, #287	@ 0x11f
 801031e:	494d      	ldr	r1, [pc, #308]	@ (8010454 <tcp_input+0x4bc>)
 8010320:	4848      	ldr	r0, [pc, #288]	@ (8010444 <tcp_input+0x4ac>)
 8010322:	f006 ffc7 	bl	80172b4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010326:	69fb      	ldr	r3, [r7, #28]
 8010328:	7a1b      	ldrb	r3, [r3, #8]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d009      	beq.n	8010342 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	7a1a      	ldrb	r2, [r3, #8]
 8010332:	4b41      	ldr	r3, [pc, #260]	@ (8010438 <tcp_input+0x4a0>)
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801033a:	3301      	adds	r3, #1
 801033c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801033e:	429a      	cmp	r2, r3
 8010340:	d122      	bne.n	8010388 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010342:	69fb      	ldr	r3, [r7, #28]
 8010344:	8b1a      	ldrh	r2, [r3, #24]
 8010346:	4b3b      	ldr	r3, [pc, #236]	@ (8010434 <tcp_input+0x49c>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	881b      	ldrh	r3, [r3, #0]
 801034c:	b29b      	uxth	r3, r3
 801034e:	429a      	cmp	r2, r3
 8010350:	d11b      	bne.n	801038a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010352:	69fb      	ldr	r3, [r7, #28]
 8010354:	8ada      	ldrh	r2, [r3, #22]
 8010356:	4b37      	ldr	r3, [pc, #220]	@ (8010434 <tcp_input+0x49c>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	885b      	ldrh	r3, [r3, #2]
 801035c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801035e:	429a      	cmp	r2, r3
 8010360:	d113      	bne.n	801038a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010362:	69fb      	ldr	r3, [r7, #28]
 8010364:	685a      	ldr	r2, [r3, #4]
 8010366:	4b34      	ldr	r3, [pc, #208]	@ (8010438 <tcp_input+0x4a0>)
 8010368:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801036a:	429a      	cmp	r2, r3
 801036c:	d10d      	bne.n	801038a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801036e:	69fb      	ldr	r3, [r7, #28]
 8010370:	681a      	ldr	r2, [r3, #0]
 8010372:	4b31      	ldr	r3, [pc, #196]	@ (8010438 <tcp_input+0x4a0>)
 8010374:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010376:	429a      	cmp	r2, r3
 8010378:	d107      	bne.n	801038a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801037a:	69f8      	ldr	r0, [r7, #28]
 801037c:	f000 fb56 	bl	8010a2c <tcp_timewait_input>
        }
        pbuf_free(p);
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f7fd ffd3 	bl	800e32c <pbuf_free>
        return;
 8010386:	e1fd      	b.n	8010784 <tcp_input+0x7ec>
        continue;
 8010388:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	68db      	ldr	r3, [r3, #12]
 801038e:	61fb      	str	r3, [r7, #28]
 8010390:	69fb      	ldr	r3, [r7, #28]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d1bc      	bne.n	8010310 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010396:	2300      	movs	r3, #0
 8010398:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801039a:	4b2f      	ldr	r3, [pc, #188]	@ (8010458 <tcp_input+0x4c0>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	617b      	str	r3, [r7, #20]
 80103a0:	e02a      	b.n	80103f8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	7a1b      	ldrb	r3, [r3, #8]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d00c      	beq.n	80103c4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	7a1a      	ldrb	r2, [r3, #8]
 80103ae:	4b22      	ldr	r3, [pc, #136]	@ (8010438 <tcp_input+0x4a0>)
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80103b6:	3301      	adds	r3, #1
 80103b8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d002      	beq.n	80103c4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	61bb      	str	r3, [r7, #24]
        continue;
 80103c2:	e016      	b.n	80103f2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	8ada      	ldrh	r2, [r3, #22]
 80103c8:	4b1a      	ldr	r3, [pc, #104]	@ (8010434 <tcp_input+0x49c>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	885b      	ldrh	r3, [r3, #2]
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d10c      	bne.n	80103ee <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	4b17      	ldr	r3, [pc, #92]	@ (8010438 <tcp_input+0x4a0>)
 80103da:	695b      	ldr	r3, [r3, #20]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d00f      	beq.n	8010400 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d00d      	beq.n	8010402 <tcp_input+0x46a>
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d009      	beq.n	8010402 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	68db      	ldr	r3, [r3, #12]
 80103f6:	617b      	str	r3, [r7, #20]
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d1d1      	bne.n	80103a2 <tcp_input+0x40a>
 80103fe:	e000      	b.n	8010402 <tcp_input+0x46a>
            break;
 8010400:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d029      	beq.n	801045c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d00a      	beq.n	8010424 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	68da      	ldr	r2, [r3, #12]
 8010412:	69bb      	ldr	r3, [r7, #24]
 8010414:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010416:	4b10      	ldr	r3, [pc, #64]	@ (8010458 <tcp_input+0x4c0>)
 8010418:	681a      	ldr	r2, [r3, #0]
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801041e:	4a0e      	ldr	r2, [pc, #56]	@ (8010458 <tcp_input+0x4c0>)
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010424:	6978      	ldr	r0, [r7, #20]
 8010426:	f000 fa03 	bl	8010830 <tcp_listen_input>
      }
      pbuf_free(p);
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f7fd ff7e 	bl	800e32c <pbuf_free>
      return;
 8010430:	e1a8      	b.n	8010784 <tcp_input+0x7ec>
 8010432:	bf00      	nop
 8010434:	20027474 	.word	0x20027474
 8010438:	2002434c 	.word	0x2002434c
 801043c:	08019930 	.word	0x08019930
 8010440:	08019a5c 	.word	0x08019a5c
 8010444:	0801997c 	.word	0x0801997c
 8010448:	20027458 	.word	0x20027458
 801044c:	08019a88 	.word	0x08019a88
 8010450:	2002745c 	.word	0x2002745c
 8010454:	08019ab4 	.word	0x08019ab4
 8010458:	20027454 	.word	0x20027454
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801045c:	69fb      	ldr	r3, [r7, #28]
 801045e:	2b00      	cmp	r3, #0
 8010460:	f000 8158 	beq.w	8010714 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010464:	4b95      	ldr	r3, [pc, #596]	@ (80106bc <tcp_input+0x724>)
 8010466:	2200      	movs	r2, #0
 8010468:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	891a      	ldrh	r2, [r3, #8]
 801046e:	4b93      	ldr	r3, [pc, #588]	@ (80106bc <tcp_input+0x724>)
 8010470:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010472:	4a92      	ldr	r2, [pc, #584]	@ (80106bc <tcp_input+0x724>)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010478:	4b91      	ldr	r3, [pc, #580]	@ (80106c0 <tcp_input+0x728>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4a8f      	ldr	r2, [pc, #572]	@ (80106bc <tcp_input+0x724>)
 801047e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010480:	4b90      	ldr	r3, [pc, #576]	@ (80106c4 <tcp_input+0x72c>)
 8010482:	2200      	movs	r2, #0
 8010484:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010486:	4b90      	ldr	r3, [pc, #576]	@ (80106c8 <tcp_input+0x730>)
 8010488:	2200      	movs	r2, #0
 801048a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801048c:	4b8f      	ldr	r3, [pc, #572]	@ (80106cc <tcp_input+0x734>)
 801048e:	2200      	movs	r2, #0
 8010490:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010492:	4b8f      	ldr	r3, [pc, #572]	@ (80106d0 <tcp_input+0x738>)
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	f003 0308 	and.w	r3, r3, #8
 801049a:	2b00      	cmp	r3, #0
 801049c:	d006      	beq.n	80104ac <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	7b5b      	ldrb	r3, [r3, #13]
 80104a2:	f043 0301 	orr.w	r3, r3, #1
 80104a6:	b2da      	uxtb	r2, r3
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80104ac:	69fb      	ldr	r3, [r7, #28]
 80104ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d017      	beq.n	80104e4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80104b4:	69f8      	ldr	r0, [r7, #28]
 80104b6:	f7ff f929 	bl	800f70c <tcp_process_refused_data>
 80104ba:	4603      	mov	r3, r0
 80104bc:	f113 0f0d 	cmn.w	r3, #13
 80104c0:	d007      	beq.n	80104d2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d00c      	beq.n	80104e4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80104ca:	4b82      	ldr	r3, [pc, #520]	@ (80106d4 <tcp_input+0x73c>)
 80104cc:	881b      	ldrh	r3, [r3, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d008      	beq.n	80104e4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80104d2:	69fb      	ldr	r3, [r7, #28]
 80104d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	f040 80e3 	bne.w	80106a2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80104dc:	69f8      	ldr	r0, [r7, #28]
 80104de:	f003 f9a7 	bl	8013830 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80104e2:	e0de      	b.n	80106a2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80104e4:	4a7c      	ldr	r2, [pc, #496]	@ (80106d8 <tcp_input+0x740>)
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80104ea:	69f8      	ldr	r0, [r7, #28]
 80104ec:	f000 fb18 	bl	8010b20 <tcp_process>
 80104f0:	4603      	mov	r3, r0
 80104f2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80104f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80104f8:	f113 0f0d 	cmn.w	r3, #13
 80104fc:	f000 80d3 	beq.w	80106a6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010500:	4b71      	ldr	r3, [pc, #452]	@ (80106c8 <tcp_input+0x730>)
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	f003 0308 	and.w	r3, r3, #8
 8010508:	2b00      	cmp	r3, #0
 801050a:	d015      	beq.n	8010538 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010512:	2b00      	cmp	r3, #0
 8010514:	d008      	beq.n	8010528 <tcp_input+0x590>
 8010516:	69fb      	ldr	r3, [r7, #28]
 8010518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801051c:	69fa      	ldr	r2, [r7, #28]
 801051e:	6912      	ldr	r2, [r2, #16]
 8010520:	f06f 010d 	mvn.w	r1, #13
 8010524:	4610      	mov	r0, r2
 8010526:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010528:	69f9      	ldr	r1, [r7, #28]
 801052a:	486c      	ldr	r0, [pc, #432]	@ (80106dc <tcp_input+0x744>)
 801052c:	f7ff fbbc 	bl	800fca8 <tcp_pcb_remove>
        tcp_free(pcb);
 8010530:	69f8      	ldr	r0, [r7, #28]
 8010532:	f7fe f9a7 	bl	800e884 <tcp_free>
 8010536:	e0da      	b.n	80106ee <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010538:	2300      	movs	r3, #0
 801053a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801053c:	4b63      	ldr	r3, [pc, #396]	@ (80106cc <tcp_input+0x734>)
 801053e:	881b      	ldrh	r3, [r3, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d01d      	beq.n	8010580 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010544:	4b61      	ldr	r3, [pc, #388]	@ (80106cc <tcp_input+0x734>)
 8010546:	881b      	ldrh	r3, [r3, #0]
 8010548:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801054a:	69fb      	ldr	r3, [r7, #28]
 801054c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010550:	2b00      	cmp	r3, #0
 8010552:	d00a      	beq.n	801056a <tcp_input+0x5d2>
 8010554:	69fb      	ldr	r3, [r7, #28]
 8010556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801055a:	69fa      	ldr	r2, [r7, #28]
 801055c:	6910      	ldr	r0, [r2, #16]
 801055e:	89fa      	ldrh	r2, [r7, #14]
 8010560:	69f9      	ldr	r1, [r7, #28]
 8010562:	4798      	blx	r3
 8010564:	4603      	mov	r3, r0
 8010566:	74fb      	strb	r3, [r7, #19]
 8010568:	e001      	b.n	801056e <tcp_input+0x5d6>
 801056a:	2300      	movs	r3, #0
 801056c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801056e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010572:	f113 0f0d 	cmn.w	r3, #13
 8010576:	f000 8098 	beq.w	80106aa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801057a:	4b54      	ldr	r3, [pc, #336]	@ (80106cc <tcp_input+0x734>)
 801057c:	2200      	movs	r2, #0
 801057e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010580:	69f8      	ldr	r0, [r7, #28]
 8010582:	f000 f915 	bl	80107b0 <tcp_input_delayed_close>
 8010586:	4603      	mov	r3, r0
 8010588:	2b00      	cmp	r3, #0
 801058a:	f040 8090 	bne.w	80106ae <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801058e:	4b4d      	ldr	r3, [pc, #308]	@ (80106c4 <tcp_input+0x72c>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d041      	beq.n	801061a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801059a:	2b00      	cmp	r3, #0
 801059c:	d006      	beq.n	80105ac <tcp_input+0x614>
 801059e:	4b50      	ldr	r3, [pc, #320]	@ (80106e0 <tcp_input+0x748>)
 80105a0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80105a4:	494f      	ldr	r1, [pc, #316]	@ (80106e4 <tcp_input+0x74c>)
 80105a6:	4850      	ldr	r0, [pc, #320]	@ (80106e8 <tcp_input+0x750>)
 80105a8:	f006 fe84 	bl	80172b4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80105ac:	69fb      	ldr	r3, [r7, #28]
 80105ae:	8b5b      	ldrh	r3, [r3, #26]
 80105b0:	f003 0310 	and.w	r3, r3, #16
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d008      	beq.n	80105ca <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80105b8:	4b42      	ldr	r3, [pc, #264]	@ (80106c4 <tcp_input+0x72c>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	4618      	mov	r0, r3
 80105be:	f7fd feb5 	bl	800e32c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80105c2:	69f8      	ldr	r0, [r7, #28]
 80105c4:	f7fe fc46 	bl	800ee54 <tcp_abort>
            goto aborted;
 80105c8:	e091      	b.n	80106ee <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80105ca:	69fb      	ldr	r3, [r7, #28]
 80105cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d00c      	beq.n	80105ee <tcp_input+0x656>
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80105da:	69fb      	ldr	r3, [r7, #28]
 80105dc:	6918      	ldr	r0, [r3, #16]
 80105de:	4b39      	ldr	r3, [pc, #228]	@ (80106c4 <tcp_input+0x72c>)
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	2300      	movs	r3, #0
 80105e4:	69f9      	ldr	r1, [r7, #28]
 80105e6:	47a0      	blx	r4
 80105e8:	4603      	mov	r3, r0
 80105ea:	74fb      	strb	r3, [r7, #19]
 80105ec:	e008      	b.n	8010600 <tcp_input+0x668>
 80105ee:	4b35      	ldr	r3, [pc, #212]	@ (80106c4 <tcp_input+0x72c>)
 80105f0:	681a      	ldr	r2, [r3, #0]
 80105f2:	2300      	movs	r3, #0
 80105f4:	69f9      	ldr	r1, [r7, #28]
 80105f6:	2000      	movs	r0, #0
 80105f8:	f7ff f95e 	bl	800f8b8 <tcp_recv_null>
 80105fc:	4603      	mov	r3, r0
 80105fe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010600:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010604:	f113 0f0d 	cmn.w	r3, #13
 8010608:	d053      	beq.n	80106b2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801060a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d003      	beq.n	801061a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010612:	4b2c      	ldr	r3, [pc, #176]	@ (80106c4 <tcp_input+0x72c>)
 8010614:	681a      	ldr	r2, [r3, #0]
 8010616:	69fb      	ldr	r3, [r7, #28]
 8010618:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801061a:	4b2b      	ldr	r3, [pc, #172]	@ (80106c8 <tcp_input+0x730>)
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	f003 0320 	and.w	r3, r3, #32
 8010622:	2b00      	cmp	r3, #0
 8010624:	d030      	beq.n	8010688 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801062a:	2b00      	cmp	r3, #0
 801062c:	d009      	beq.n	8010642 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010632:	7b5a      	ldrb	r2, [r3, #13]
 8010634:	69fb      	ldr	r3, [r7, #28]
 8010636:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010638:	f042 0220 	orr.w	r2, r2, #32
 801063c:	b2d2      	uxtb	r2, r2
 801063e:	735a      	strb	r2, [r3, #13]
 8010640:	e022      	b.n	8010688 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010642:	69fb      	ldr	r3, [r7, #28]
 8010644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010646:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801064a:	d005      	beq.n	8010658 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801064c:	69fb      	ldr	r3, [r7, #28]
 801064e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010650:	3301      	adds	r3, #1
 8010652:	b29a      	uxth	r2, r3
 8010654:	69fb      	ldr	r3, [r7, #28]
 8010656:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010658:	69fb      	ldr	r3, [r7, #28]
 801065a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801065e:	2b00      	cmp	r3, #0
 8010660:	d00b      	beq.n	801067a <tcp_input+0x6e2>
 8010662:	69fb      	ldr	r3, [r7, #28]
 8010664:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	6918      	ldr	r0, [r3, #16]
 801066c:	2300      	movs	r3, #0
 801066e:	2200      	movs	r2, #0
 8010670:	69f9      	ldr	r1, [r7, #28]
 8010672:	47a0      	blx	r4
 8010674:	4603      	mov	r3, r0
 8010676:	74fb      	strb	r3, [r7, #19]
 8010678:	e001      	b.n	801067e <tcp_input+0x6e6>
 801067a:	2300      	movs	r3, #0
 801067c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801067e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010682:	f113 0f0d 	cmn.w	r3, #13
 8010686:	d016      	beq.n	80106b6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010688:	4b13      	ldr	r3, [pc, #76]	@ (80106d8 <tcp_input+0x740>)
 801068a:	2200      	movs	r2, #0
 801068c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801068e:	69f8      	ldr	r0, [r7, #28]
 8010690:	f000 f88e 	bl	80107b0 <tcp_input_delayed_close>
 8010694:	4603      	mov	r3, r0
 8010696:	2b00      	cmp	r3, #0
 8010698:	d128      	bne.n	80106ec <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801069a:	69f8      	ldr	r0, [r7, #28]
 801069c:	f002 fac2 	bl	8012c24 <tcp_output>
 80106a0:	e025      	b.n	80106ee <tcp_input+0x756>
        goto aborted;
 80106a2:	bf00      	nop
 80106a4:	e023      	b.n	80106ee <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80106a6:	bf00      	nop
 80106a8:	e021      	b.n	80106ee <tcp_input+0x756>
              goto aborted;
 80106aa:	bf00      	nop
 80106ac:	e01f      	b.n	80106ee <tcp_input+0x756>
          goto aborted;
 80106ae:	bf00      	nop
 80106b0:	e01d      	b.n	80106ee <tcp_input+0x756>
            goto aborted;
 80106b2:	bf00      	nop
 80106b4:	e01b      	b.n	80106ee <tcp_input+0x756>
              goto aborted;
 80106b6:	bf00      	nop
 80106b8:	e019      	b.n	80106ee <tcp_input+0x756>
 80106ba:	bf00      	nop
 80106bc:	20027464 	.word	0x20027464
 80106c0:	20027474 	.word	0x20027474
 80106c4:	20027494 	.word	0x20027494
 80106c8:	20027491 	.word	0x20027491
 80106cc:	2002748c 	.word	0x2002748c
 80106d0:	20027490 	.word	0x20027490
 80106d4:	2002748e 	.word	0x2002748e
 80106d8:	20027498 	.word	0x20027498
 80106dc:	20027458 	.word	0x20027458
 80106e0:	08019930 	.word	0x08019930
 80106e4:	08019ae4 	.word	0x08019ae4
 80106e8:	0801997c 	.word	0x0801997c
          goto aborted;
 80106ec:	bf00      	nop
    tcp_input_pcb = NULL;
 80106ee:	4b27      	ldr	r3, [pc, #156]	@ (801078c <tcp_input+0x7f4>)
 80106f0:	2200      	movs	r2, #0
 80106f2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80106f4:	4b26      	ldr	r3, [pc, #152]	@ (8010790 <tcp_input+0x7f8>)
 80106f6:	2200      	movs	r2, #0
 80106f8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80106fa:	4b26      	ldr	r3, [pc, #152]	@ (8010794 <tcp_input+0x7fc>)
 80106fc:	685b      	ldr	r3, [r3, #4]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d03f      	beq.n	8010782 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010702:	4b24      	ldr	r3, [pc, #144]	@ (8010794 <tcp_input+0x7fc>)
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	4618      	mov	r0, r3
 8010708:	f7fd fe10 	bl	800e32c <pbuf_free>
      inseg.p = NULL;
 801070c:	4b21      	ldr	r3, [pc, #132]	@ (8010794 <tcp_input+0x7fc>)
 801070e:	2200      	movs	r2, #0
 8010710:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010712:	e036      	b.n	8010782 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010714:	4b20      	ldr	r3, [pc, #128]	@ (8010798 <tcp_input+0x800>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	899b      	ldrh	r3, [r3, #12]
 801071a:	b29b      	uxth	r3, r3
 801071c:	4618      	mov	r0, r3
 801071e:	f7fc fa17 	bl	800cb50 <lwip_htons>
 8010722:	4603      	mov	r3, r0
 8010724:	b2db      	uxtb	r3, r3
 8010726:	f003 0304 	and.w	r3, r3, #4
 801072a:	2b00      	cmp	r3, #0
 801072c:	d118      	bne.n	8010760 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801072e:	4b1b      	ldr	r3, [pc, #108]	@ (801079c <tcp_input+0x804>)
 8010730:	6819      	ldr	r1, [r3, #0]
 8010732:	4b1b      	ldr	r3, [pc, #108]	@ (80107a0 <tcp_input+0x808>)
 8010734:	881b      	ldrh	r3, [r3, #0]
 8010736:	461a      	mov	r2, r3
 8010738:	4b1a      	ldr	r3, [pc, #104]	@ (80107a4 <tcp_input+0x80c>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801073e:	4b16      	ldr	r3, [pc, #88]	@ (8010798 <tcp_input+0x800>)
 8010740:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010742:	885b      	ldrh	r3, [r3, #2]
 8010744:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010746:	4a14      	ldr	r2, [pc, #80]	@ (8010798 <tcp_input+0x800>)
 8010748:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801074a:	8812      	ldrh	r2, [r2, #0]
 801074c:	b292      	uxth	r2, r2
 801074e:	9202      	str	r2, [sp, #8]
 8010750:	9301      	str	r3, [sp, #4]
 8010752:	4b15      	ldr	r3, [pc, #84]	@ (80107a8 <tcp_input+0x810>)
 8010754:	9300      	str	r3, [sp, #0]
 8010756:	4b15      	ldr	r3, [pc, #84]	@ (80107ac <tcp_input+0x814>)
 8010758:	4602      	mov	r2, r0
 801075a:	2000      	movs	r0, #0
 801075c:	f003 f816 	bl	801378c <tcp_rst>
    pbuf_free(p);
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f7fd fde3 	bl	800e32c <pbuf_free>
  return;
 8010766:	e00c      	b.n	8010782 <tcp_input+0x7ea>
    goto dropped;
 8010768:	bf00      	nop
 801076a:	e006      	b.n	801077a <tcp_input+0x7e2>
    goto dropped;
 801076c:	bf00      	nop
 801076e:	e004      	b.n	801077a <tcp_input+0x7e2>
    goto dropped;
 8010770:	bf00      	nop
 8010772:	e002      	b.n	801077a <tcp_input+0x7e2>
      goto dropped;
 8010774:	bf00      	nop
 8010776:	e000      	b.n	801077a <tcp_input+0x7e2>
      goto dropped;
 8010778:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f7fd fdd6 	bl	800e32c <pbuf_free>
 8010780:	e000      	b.n	8010784 <tcp_input+0x7ec>
  return;
 8010782:	bf00      	nop
}
 8010784:	3724      	adds	r7, #36	@ 0x24
 8010786:	46bd      	mov	sp, r7
 8010788:	bd90      	pop	{r4, r7, pc}
 801078a:	bf00      	nop
 801078c:	20027498 	.word	0x20027498
 8010790:	20027494 	.word	0x20027494
 8010794:	20027464 	.word	0x20027464
 8010798:	20027474 	.word	0x20027474
 801079c:	20027488 	.word	0x20027488
 80107a0:	2002748e 	.word	0x2002748e
 80107a4:	20027484 	.word	0x20027484
 80107a8:	2002435c 	.word	0x2002435c
 80107ac:	20024360 	.word	0x20024360

080107b0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d106      	bne.n	80107cc <tcp_input_delayed_close+0x1c>
 80107be:	4b17      	ldr	r3, [pc, #92]	@ (801081c <tcp_input_delayed_close+0x6c>)
 80107c0:	f240 225a 	movw	r2, #602	@ 0x25a
 80107c4:	4916      	ldr	r1, [pc, #88]	@ (8010820 <tcp_input_delayed_close+0x70>)
 80107c6:	4817      	ldr	r0, [pc, #92]	@ (8010824 <tcp_input_delayed_close+0x74>)
 80107c8:	f006 fd74 	bl	80172b4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80107cc:	4b16      	ldr	r3, [pc, #88]	@ (8010828 <tcp_input_delayed_close+0x78>)
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	f003 0310 	and.w	r3, r3, #16
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d01c      	beq.n	8010812 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	8b5b      	ldrh	r3, [r3, #26]
 80107dc:	f003 0310 	and.w	r3, r3, #16
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d10d      	bne.n	8010800 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d008      	beq.n	8010800 <tcp_input_delayed_close+0x50>
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107f4:	687a      	ldr	r2, [r7, #4]
 80107f6:	6912      	ldr	r2, [r2, #16]
 80107f8:	f06f 010e 	mvn.w	r1, #14
 80107fc:	4610      	mov	r0, r2
 80107fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010800:	6879      	ldr	r1, [r7, #4]
 8010802:	480a      	ldr	r0, [pc, #40]	@ (801082c <tcp_input_delayed_close+0x7c>)
 8010804:	f7ff fa50 	bl	800fca8 <tcp_pcb_remove>
    tcp_free(pcb);
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f7fe f83b 	bl	800e884 <tcp_free>
    return 1;
 801080e:	2301      	movs	r3, #1
 8010810:	e000      	b.n	8010814 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010812:	2300      	movs	r3, #0
}
 8010814:	4618      	mov	r0, r3
 8010816:	3708      	adds	r7, #8
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}
 801081c:	08019930 	.word	0x08019930
 8010820:	08019b00 	.word	0x08019b00
 8010824:	0801997c 	.word	0x0801997c
 8010828:	20027491 	.word	0x20027491
 801082c:	20027458 	.word	0x20027458

08010830 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010830:	b590      	push	{r4, r7, lr}
 8010832:	b08b      	sub	sp, #44	@ 0x2c
 8010834:	af04      	add	r7, sp, #16
 8010836:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010838:	4b6f      	ldr	r3, [pc, #444]	@ (80109f8 <tcp_listen_input+0x1c8>)
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	f003 0304 	and.w	r3, r3, #4
 8010840:	2b00      	cmp	r3, #0
 8010842:	f040 80d2 	bne.w	80109ea <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d106      	bne.n	801085a <tcp_listen_input+0x2a>
 801084c:	4b6b      	ldr	r3, [pc, #428]	@ (80109fc <tcp_listen_input+0x1cc>)
 801084e:	f240 2281 	movw	r2, #641	@ 0x281
 8010852:	496b      	ldr	r1, [pc, #428]	@ (8010a00 <tcp_listen_input+0x1d0>)
 8010854:	486b      	ldr	r0, [pc, #428]	@ (8010a04 <tcp_listen_input+0x1d4>)
 8010856:	f006 fd2d 	bl	80172b4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801085a:	4b67      	ldr	r3, [pc, #412]	@ (80109f8 <tcp_listen_input+0x1c8>)
 801085c:	781b      	ldrb	r3, [r3, #0]
 801085e:	f003 0310 	and.w	r3, r3, #16
 8010862:	2b00      	cmp	r3, #0
 8010864:	d019      	beq.n	801089a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010866:	4b68      	ldr	r3, [pc, #416]	@ (8010a08 <tcp_listen_input+0x1d8>)
 8010868:	6819      	ldr	r1, [r3, #0]
 801086a:	4b68      	ldr	r3, [pc, #416]	@ (8010a0c <tcp_listen_input+0x1dc>)
 801086c:	881b      	ldrh	r3, [r3, #0]
 801086e:	461a      	mov	r2, r3
 8010870:	4b67      	ldr	r3, [pc, #412]	@ (8010a10 <tcp_listen_input+0x1e0>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010876:	4b67      	ldr	r3, [pc, #412]	@ (8010a14 <tcp_listen_input+0x1e4>)
 8010878:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801087a:	885b      	ldrh	r3, [r3, #2]
 801087c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801087e:	4a65      	ldr	r2, [pc, #404]	@ (8010a14 <tcp_listen_input+0x1e4>)
 8010880:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010882:	8812      	ldrh	r2, [r2, #0]
 8010884:	b292      	uxth	r2, r2
 8010886:	9202      	str	r2, [sp, #8]
 8010888:	9301      	str	r3, [sp, #4]
 801088a:	4b63      	ldr	r3, [pc, #396]	@ (8010a18 <tcp_listen_input+0x1e8>)
 801088c:	9300      	str	r3, [sp, #0]
 801088e:	4b63      	ldr	r3, [pc, #396]	@ (8010a1c <tcp_listen_input+0x1ec>)
 8010890:	4602      	mov	r2, r0
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f002 ff7a 	bl	801378c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010898:	e0a9      	b.n	80109ee <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801089a:	4b57      	ldr	r3, [pc, #348]	@ (80109f8 <tcp_listen_input+0x1c8>)
 801089c:	781b      	ldrb	r3, [r3, #0]
 801089e:	f003 0302 	and.w	r3, r3, #2
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	f000 80a3 	beq.w	80109ee <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	7d5b      	ldrb	r3, [r3, #21]
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7ff f927 	bl	800fb00 <tcp_alloc>
 80108b2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d111      	bne.n	80108de <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	699b      	ldr	r3, [r3, #24]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d00a      	beq.n	80108d8 <tcp_listen_input+0xa8>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	699b      	ldr	r3, [r3, #24]
 80108c6:	687a      	ldr	r2, [r7, #4]
 80108c8:	6910      	ldr	r0, [r2, #16]
 80108ca:	f04f 32ff 	mov.w	r2, #4294967295
 80108ce:	2100      	movs	r1, #0
 80108d0:	4798      	blx	r3
 80108d2:	4603      	mov	r3, r0
 80108d4:	73bb      	strb	r3, [r7, #14]
      return;
 80108d6:	e08b      	b.n	80109f0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80108d8:	23f0      	movs	r3, #240	@ 0xf0
 80108da:	73bb      	strb	r3, [r7, #14]
      return;
 80108dc:	e088      	b.n	80109f0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80108de:	4b50      	ldr	r3, [pc, #320]	@ (8010a20 <tcp_listen_input+0x1f0>)
 80108e0:	695a      	ldr	r2, [r3, #20]
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80108e6:	4b4e      	ldr	r3, [pc, #312]	@ (8010a20 <tcp_listen_input+0x1f0>)
 80108e8:	691a      	ldr	r2, [r3, #16]
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	8ada      	ldrh	r2, [r3, #22]
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80108f6:	4b47      	ldr	r3, [pc, #284]	@ (8010a14 <tcp_listen_input+0x1e4>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	881b      	ldrh	r3, [r3, #0]
 80108fc:	b29a      	uxth	r2, r3
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	2203      	movs	r2, #3
 8010906:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010908:	4b41      	ldr	r3, [pc, #260]	@ (8010a10 <tcp_listen_input+0x1e0>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	1c5a      	adds	r2, r3, #1
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801091a:	6978      	ldr	r0, [r7, #20]
 801091c:	f7ff fa58 	bl	800fdd0 <tcp_next_iss>
 8010920:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	693a      	ldr	r2, [r7, #16]
 8010926:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	693a      	ldr	r2, [r7, #16]
 801092c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	693a      	ldr	r2, [r7, #16]
 8010932:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	693a      	ldr	r2, [r7, #16]
 8010938:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801093a:	4b35      	ldr	r3, [pc, #212]	@ (8010a10 <tcp_listen_input+0x1e0>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	1e5a      	subs	r2, r3, #1
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	691a      	ldr	r2, [r3, #16]
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	687a      	ldr	r2, [r7, #4]
 8010950:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	7a5b      	ldrb	r3, [r3, #9]
 8010956:	f003 030c 	and.w	r3, r3, #12
 801095a:	b2da      	uxtb	r2, r3
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	7a1a      	ldrb	r2, [r3, #8]
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010968:	4b2e      	ldr	r3, [pc, #184]	@ (8010a24 <tcp_listen_input+0x1f4>)
 801096a:	681a      	ldr	r2, [r3, #0]
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	60da      	str	r2, [r3, #12]
 8010970:	4a2c      	ldr	r2, [pc, #176]	@ (8010a24 <tcp_listen_input+0x1f4>)
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	6013      	str	r3, [r2, #0]
 8010976:	f003 f8cb 	bl	8013b10 <tcp_timer_needed>
 801097a:	4b2b      	ldr	r3, [pc, #172]	@ (8010a28 <tcp_listen_input+0x1f8>)
 801097c:	2201      	movs	r2, #1
 801097e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010980:	6978      	ldr	r0, [r7, #20]
 8010982:	f001 fd8b 	bl	801249c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010986:	4b23      	ldr	r3, [pc, #140]	@ (8010a14 <tcp_listen_input+0x1e4>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	89db      	ldrh	r3, [r3, #14]
 801098c:	b29a      	uxth	r2, r3
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	3304      	adds	r3, #4
 80109a8:	4618      	mov	r0, r3
 80109aa:	f004 fdb7 	bl	801551c <ip4_route>
 80109ae:	4601      	mov	r1, r0
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	3304      	adds	r3, #4
 80109b4:	461a      	mov	r2, r3
 80109b6:	4620      	mov	r0, r4
 80109b8:	f7ff fa30 	bl	800fe1c <tcp_eff_send_mss_netif>
 80109bc:	4603      	mov	r3, r0
 80109be:	461a      	mov	r2, r3
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80109c4:	2112      	movs	r1, #18
 80109c6:	6978      	ldr	r0, [r7, #20]
 80109c8:	f002 f83e 	bl	8012a48 <tcp_enqueue_flags>
 80109cc:	4603      	mov	r3, r0
 80109ce:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80109d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d004      	beq.n	80109e2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80109d8:	2100      	movs	r1, #0
 80109da:	6978      	ldr	r0, [r7, #20]
 80109dc:	f7fe f97c 	bl	800ecd8 <tcp_abandon>
      return;
 80109e0:	e006      	b.n	80109f0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80109e2:	6978      	ldr	r0, [r7, #20]
 80109e4:	f002 f91e 	bl	8012c24 <tcp_output>
  return;
 80109e8:	e001      	b.n	80109ee <tcp_listen_input+0x1be>
    return;
 80109ea:	bf00      	nop
 80109ec:	e000      	b.n	80109f0 <tcp_listen_input+0x1c0>
  return;
 80109ee:	bf00      	nop
}
 80109f0:	371c      	adds	r7, #28
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd90      	pop	{r4, r7, pc}
 80109f6:	bf00      	nop
 80109f8:	20027490 	.word	0x20027490
 80109fc:	08019930 	.word	0x08019930
 8010a00:	08019b28 	.word	0x08019b28
 8010a04:	0801997c 	.word	0x0801997c
 8010a08:	20027488 	.word	0x20027488
 8010a0c:	2002748e 	.word	0x2002748e
 8010a10:	20027484 	.word	0x20027484
 8010a14:	20027474 	.word	0x20027474
 8010a18:	2002435c 	.word	0x2002435c
 8010a1c:	20024360 	.word	0x20024360
 8010a20:	2002434c 	.word	0x2002434c
 8010a24:	20027458 	.word	0x20027458
 8010a28:	20027460 	.word	0x20027460

08010a2c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b086      	sub	sp, #24
 8010a30:	af04      	add	r7, sp, #16
 8010a32:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010a34:	4b2f      	ldr	r3, [pc, #188]	@ (8010af4 <tcp_timewait_input+0xc8>)
 8010a36:	781b      	ldrb	r3, [r3, #0]
 8010a38:	f003 0304 	and.w	r3, r3, #4
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d153      	bne.n	8010ae8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d106      	bne.n	8010a54 <tcp_timewait_input+0x28>
 8010a46:	4b2c      	ldr	r3, [pc, #176]	@ (8010af8 <tcp_timewait_input+0xcc>)
 8010a48:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8010a4c:	492b      	ldr	r1, [pc, #172]	@ (8010afc <tcp_timewait_input+0xd0>)
 8010a4e:	482c      	ldr	r0, [pc, #176]	@ (8010b00 <tcp_timewait_input+0xd4>)
 8010a50:	f006 fc30 	bl	80172b4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010a54:	4b27      	ldr	r3, [pc, #156]	@ (8010af4 <tcp_timewait_input+0xc8>)
 8010a56:	781b      	ldrb	r3, [r3, #0]
 8010a58:	f003 0302 	and.w	r3, r3, #2
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d02a      	beq.n	8010ab6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010a60:	4b28      	ldr	r3, [pc, #160]	@ (8010b04 <tcp_timewait_input+0xd8>)
 8010a62:	681a      	ldr	r2, [r3, #0]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a68:	1ad3      	subs	r3, r2, r3
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	db2d      	blt.n	8010aca <tcp_timewait_input+0x9e>
 8010a6e:	4b25      	ldr	r3, [pc, #148]	@ (8010b04 <tcp_timewait_input+0xd8>)
 8010a70:	681a      	ldr	r2, [r3, #0]
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a76:	6879      	ldr	r1, [r7, #4]
 8010a78:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010a7a:	440b      	add	r3, r1
 8010a7c:	1ad3      	subs	r3, r2, r3
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	dc23      	bgt.n	8010aca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a82:	4b21      	ldr	r3, [pc, #132]	@ (8010b08 <tcp_timewait_input+0xdc>)
 8010a84:	6819      	ldr	r1, [r3, #0]
 8010a86:	4b21      	ldr	r3, [pc, #132]	@ (8010b0c <tcp_timewait_input+0xe0>)
 8010a88:	881b      	ldrh	r3, [r3, #0]
 8010a8a:	461a      	mov	r2, r3
 8010a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8010b04 <tcp_timewait_input+0xd8>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a92:	4b1f      	ldr	r3, [pc, #124]	@ (8010b10 <tcp_timewait_input+0xe4>)
 8010a94:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a96:	885b      	ldrh	r3, [r3, #2]
 8010a98:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8010b10 <tcp_timewait_input+0xe4>)
 8010a9c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a9e:	8812      	ldrh	r2, [r2, #0]
 8010aa0:	b292      	uxth	r2, r2
 8010aa2:	9202      	str	r2, [sp, #8]
 8010aa4:	9301      	str	r3, [sp, #4]
 8010aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8010b14 <tcp_timewait_input+0xe8>)
 8010aa8:	9300      	str	r3, [sp, #0]
 8010aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8010b18 <tcp_timewait_input+0xec>)
 8010aac:	4602      	mov	r2, r0
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f002 fe6c 	bl	801378c <tcp_rst>
      return;
 8010ab4:	e01b      	b.n	8010aee <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8010af4 <tcp_timewait_input+0xc8>)
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	f003 0301 	and.w	r3, r3, #1
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d003      	beq.n	8010aca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010ac2:	4b16      	ldr	r3, [pc, #88]	@ (8010b1c <tcp_timewait_input+0xf0>)
 8010ac4:	681a      	ldr	r2, [r3, #0]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010aca:	4b10      	ldr	r3, [pc, #64]	@ (8010b0c <tcp_timewait_input+0xe0>)
 8010acc:	881b      	ldrh	r3, [r3, #0]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d00c      	beq.n	8010aec <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	8b5b      	ldrh	r3, [r3, #26]
 8010ad6:	f043 0302 	orr.w	r3, r3, #2
 8010ada:	b29a      	uxth	r2, r3
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f002 f89f 	bl	8012c24 <tcp_output>
  }
  return;
 8010ae6:	e001      	b.n	8010aec <tcp_timewait_input+0xc0>
    return;
 8010ae8:	bf00      	nop
 8010aea:	e000      	b.n	8010aee <tcp_timewait_input+0xc2>
  return;
 8010aec:	bf00      	nop
}
 8010aee:	3708      	adds	r7, #8
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	20027490 	.word	0x20027490
 8010af8:	08019930 	.word	0x08019930
 8010afc:	08019b48 	.word	0x08019b48
 8010b00:	0801997c 	.word	0x0801997c
 8010b04:	20027484 	.word	0x20027484
 8010b08:	20027488 	.word	0x20027488
 8010b0c:	2002748e 	.word	0x2002748e
 8010b10:	20027474 	.word	0x20027474
 8010b14:	2002435c 	.word	0x2002435c
 8010b18:	20024360 	.word	0x20024360
 8010b1c:	2002744c 	.word	0x2002744c

08010b20 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010b20:	b590      	push	{r4, r7, lr}
 8010b22:	b08d      	sub	sp, #52	@ 0x34
 8010b24:	af04      	add	r7, sp, #16
 8010b26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d106      	bne.n	8010b44 <tcp_process+0x24>
 8010b36:	4b9d      	ldr	r3, [pc, #628]	@ (8010dac <tcp_process+0x28c>)
 8010b38:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010b3c:	499c      	ldr	r1, [pc, #624]	@ (8010db0 <tcp_process+0x290>)
 8010b3e:	489d      	ldr	r0, [pc, #628]	@ (8010db4 <tcp_process+0x294>)
 8010b40:	f006 fbb8 	bl	80172b4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010b44:	4b9c      	ldr	r3, [pc, #624]	@ (8010db8 <tcp_process+0x298>)
 8010b46:	781b      	ldrb	r3, [r3, #0]
 8010b48:	f003 0304 	and.w	r3, r3, #4
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d04e      	beq.n	8010bee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	7d1b      	ldrb	r3, [r3, #20]
 8010b54:	2b02      	cmp	r3, #2
 8010b56:	d108      	bne.n	8010b6a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010b5c:	4b97      	ldr	r3, [pc, #604]	@ (8010dbc <tcp_process+0x29c>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d123      	bne.n	8010bac <tcp_process+0x8c>
        acceptable = 1;
 8010b64:	2301      	movs	r3, #1
 8010b66:	76fb      	strb	r3, [r7, #27]
 8010b68:	e020      	b.n	8010bac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b6e:	4b94      	ldr	r3, [pc, #592]	@ (8010dc0 <tcp_process+0x2a0>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d102      	bne.n	8010b7c <tcp_process+0x5c>
        acceptable = 1;
 8010b76:	2301      	movs	r3, #1
 8010b78:	76fb      	strb	r3, [r7, #27]
 8010b7a:	e017      	b.n	8010bac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010b7c:	4b90      	ldr	r3, [pc, #576]	@ (8010dc0 <tcp_process+0x2a0>)
 8010b7e:	681a      	ldr	r2, [r3, #0]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b84:	1ad3      	subs	r3, r2, r3
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	db10      	blt.n	8010bac <tcp_process+0x8c>
 8010b8a:	4b8d      	ldr	r3, [pc, #564]	@ (8010dc0 <tcp_process+0x2a0>)
 8010b8c:	681a      	ldr	r2, [r3, #0]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b92:	6879      	ldr	r1, [r7, #4]
 8010b94:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010b96:	440b      	add	r3, r1
 8010b98:	1ad3      	subs	r3, r2, r3
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	dc06      	bgt.n	8010bac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	8b5b      	ldrh	r3, [r3, #26]
 8010ba2:	f043 0302 	orr.w	r3, r3, #2
 8010ba6:	b29a      	uxth	r2, r3
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010bac:	7efb      	ldrb	r3, [r7, #27]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d01b      	beq.n	8010bea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	7d1b      	ldrb	r3, [r3, #20]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d106      	bne.n	8010bc8 <tcp_process+0xa8>
 8010bba:	4b7c      	ldr	r3, [pc, #496]	@ (8010dac <tcp_process+0x28c>)
 8010bbc:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010bc0:	4980      	ldr	r1, [pc, #512]	@ (8010dc4 <tcp_process+0x2a4>)
 8010bc2:	487c      	ldr	r0, [pc, #496]	@ (8010db4 <tcp_process+0x294>)
 8010bc4:	f006 fb76 	bl	80172b4 <iprintf>
      recv_flags |= TF_RESET;
 8010bc8:	4b7f      	ldr	r3, [pc, #508]	@ (8010dc8 <tcp_process+0x2a8>)
 8010bca:	781b      	ldrb	r3, [r3, #0]
 8010bcc:	f043 0308 	orr.w	r3, r3, #8
 8010bd0:	b2da      	uxtb	r2, r3
 8010bd2:	4b7d      	ldr	r3, [pc, #500]	@ (8010dc8 <tcp_process+0x2a8>)
 8010bd4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	8b5b      	ldrh	r3, [r3, #26]
 8010bda:	f023 0301 	bic.w	r3, r3, #1
 8010bde:	b29a      	uxth	r2, r3
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010be4:	f06f 030d 	mvn.w	r3, #13
 8010be8:	e37a      	b.n	80112e0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010bea:	2300      	movs	r3, #0
 8010bec:	e378      	b.n	80112e0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010bee:	4b72      	ldr	r3, [pc, #456]	@ (8010db8 <tcp_process+0x298>)
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	f003 0302 	and.w	r3, r3, #2
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d010      	beq.n	8010c1c <tcp_process+0xfc>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	7d1b      	ldrb	r3, [r3, #20]
 8010bfe:	2b02      	cmp	r3, #2
 8010c00:	d00c      	beq.n	8010c1c <tcp_process+0xfc>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	7d1b      	ldrb	r3, [r3, #20]
 8010c06:	2b03      	cmp	r3, #3
 8010c08:	d008      	beq.n	8010c1c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	8b5b      	ldrh	r3, [r3, #26]
 8010c0e:	f043 0302 	orr.w	r3, r3, #2
 8010c12:	b29a      	uxth	r2, r3
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	e361      	b.n	80112e0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	8b5b      	ldrh	r3, [r3, #26]
 8010c20:	f003 0310 	and.w	r3, r3, #16
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d103      	bne.n	8010c30 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010c28:	4b68      	ldr	r3, [pc, #416]	@ (8010dcc <tcp_process+0x2ac>)
 8010c2a:	681a      	ldr	r2, [r3, #0]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2200      	movs	r2, #0
 8010c34:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f001 fc2b 	bl	801249c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	7d1b      	ldrb	r3, [r3, #20]
 8010c4a:	3b02      	subs	r3, #2
 8010c4c:	2b07      	cmp	r3, #7
 8010c4e:	f200 8337 	bhi.w	80112c0 <tcp_process+0x7a0>
 8010c52:	a201      	add	r2, pc, #4	@ (adr r2, 8010c58 <tcp_process+0x138>)
 8010c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c58:	08010c79 	.word	0x08010c79
 8010c5c:	08010ea9 	.word	0x08010ea9
 8010c60:	08011021 	.word	0x08011021
 8010c64:	0801104b 	.word	0x0801104b
 8010c68:	0801116f 	.word	0x0801116f
 8010c6c:	08011021 	.word	0x08011021
 8010c70:	080111fb 	.word	0x080111fb
 8010c74:	0801128b 	.word	0x0801128b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010c78:	4b4f      	ldr	r3, [pc, #316]	@ (8010db8 <tcp_process+0x298>)
 8010c7a:	781b      	ldrb	r3, [r3, #0]
 8010c7c:	f003 0310 	and.w	r3, r3, #16
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	f000 80e4 	beq.w	8010e4e <tcp_process+0x32e>
 8010c86:	4b4c      	ldr	r3, [pc, #304]	@ (8010db8 <tcp_process+0x298>)
 8010c88:	781b      	ldrb	r3, [r3, #0]
 8010c8a:	f003 0302 	and.w	r3, r3, #2
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	f000 80dd 	beq.w	8010e4e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c98:	1c5a      	adds	r2, r3, #1
 8010c9a:	4b48      	ldr	r3, [pc, #288]	@ (8010dbc <tcp_process+0x29c>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	f040 80d5 	bne.w	8010e4e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010ca4:	4b46      	ldr	r3, [pc, #280]	@ (8010dc0 <tcp_process+0x2a0>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	1c5a      	adds	r2, r3, #1
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8010cb6:	4b41      	ldr	r3, [pc, #260]	@ (8010dbc <tcp_process+0x29c>)
 8010cb8:	681a      	ldr	r2, [r3, #0]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010cbe:	4b44      	ldr	r3, [pc, #272]	@ (8010dd0 <tcp_process+0x2b0>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	89db      	ldrh	r3, [r3, #14]
 8010cc4:	b29a      	uxth	r2, r3
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010cd8:	4b39      	ldr	r3, [pc, #228]	@ (8010dc0 <tcp_process+0x2a0>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	1e5a      	subs	r2, r3, #1
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2204      	movs	r2, #4
 8010ce6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	3304      	adds	r3, #4
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f004 fc13 	bl	801551c <ip4_route>
 8010cf6:	4601      	mov	r1, r0
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	3304      	adds	r3, #4
 8010cfc:	461a      	mov	r2, r3
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f7ff f88c 	bl	800fe1c <tcp_eff_send_mss_netif>
 8010d04:	4603      	mov	r3, r0
 8010d06:	461a      	mov	r2, r3
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d10:	009a      	lsls	r2, r3, #2
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d16:	005b      	lsls	r3, r3, #1
 8010d18:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010d1c:	428b      	cmp	r3, r1
 8010d1e:	bf38      	it	cc
 8010d20:	460b      	movcc	r3, r1
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d204      	bcs.n	8010d30 <tcp_process+0x210>
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d2a:	009b      	lsls	r3, r3, #2
 8010d2c:	b29b      	uxth	r3, r3
 8010d2e:	e00d      	b.n	8010d4c <tcp_process+0x22c>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d34:	005b      	lsls	r3, r3, #1
 8010d36:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	d904      	bls.n	8010d48 <tcp_process+0x228>
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d42:	005b      	lsls	r3, r3, #1
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	e001      	b.n	8010d4c <tcp_process+0x22c>
 8010d48:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010d4c:	687a      	ldr	r2, [r7, #4]
 8010d4e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d106      	bne.n	8010d6a <tcp_process+0x24a>
 8010d5c:	4b13      	ldr	r3, [pc, #76]	@ (8010dac <tcp_process+0x28c>)
 8010d5e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8010d62:	491c      	ldr	r1, [pc, #112]	@ (8010dd4 <tcp_process+0x2b4>)
 8010d64:	4813      	ldr	r0, [pc, #76]	@ (8010db4 <tcp_process+0x294>)
 8010d66:	f006 faa5 	bl	80172b4 <iprintf>
        --pcb->snd_queuelen;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010d70:	3b01      	subs	r3, #1
 8010d72:	b29a      	uxth	r2, r3
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d7e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010d80:	69fb      	ldr	r3, [r7, #28]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d12a      	bne.n	8010ddc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d8a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010d8c:	69fb      	ldr	r3, [r7, #28]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d106      	bne.n	8010da0 <tcp_process+0x280>
 8010d92:	4b06      	ldr	r3, [pc, #24]	@ (8010dac <tcp_process+0x28c>)
 8010d94:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010d98:	490f      	ldr	r1, [pc, #60]	@ (8010dd8 <tcp_process+0x2b8>)
 8010d9a:	4806      	ldr	r0, [pc, #24]	@ (8010db4 <tcp_process+0x294>)
 8010d9c:	f006 fa8a 	bl	80172b4 <iprintf>
          pcb->unsent = rseg->next;
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010da8:	e01c      	b.n	8010de4 <tcp_process+0x2c4>
 8010daa:	bf00      	nop
 8010dac:	08019930 	.word	0x08019930
 8010db0:	08019b68 	.word	0x08019b68
 8010db4:	0801997c 	.word	0x0801997c
 8010db8:	20027490 	.word	0x20027490
 8010dbc:	20027488 	.word	0x20027488
 8010dc0:	20027484 	.word	0x20027484
 8010dc4:	08019b84 	.word	0x08019b84
 8010dc8:	20027491 	.word	0x20027491
 8010dcc:	2002744c 	.word	0x2002744c
 8010dd0:	20027474 	.word	0x20027474
 8010dd4:	08019ba4 	.word	0x08019ba4
 8010dd8:	08019bbc 	.word	0x08019bbc
        } else {
          pcb->unacked = rseg->next;
 8010ddc:	69fb      	ldr	r3, [r7, #28]
 8010dde:	681a      	ldr	r2, [r3, #0]
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8010de4:	69f8      	ldr	r0, [r7, #28]
 8010de6:	f7fe fd22 	bl	800f82e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d104      	bne.n	8010dfc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010df8:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010dfa:	e006      	b.n	8010e0a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2200      	movs	r2, #0
 8010e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d00a      	beq.n	8010e2a <tcp_process+0x30a>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e1a:	687a      	ldr	r2, [r7, #4]
 8010e1c:	6910      	ldr	r0, [r2, #16]
 8010e1e:	2200      	movs	r2, #0
 8010e20:	6879      	ldr	r1, [r7, #4]
 8010e22:	4798      	blx	r3
 8010e24:	4603      	mov	r3, r0
 8010e26:	76bb      	strb	r3, [r7, #26]
 8010e28:	e001      	b.n	8010e2e <tcp_process+0x30e>
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010e2e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010e32:	f113 0f0d 	cmn.w	r3, #13
 8010e36:	d102      	bne.n	8010e3e <tcp_process+0x31e>
          return ERR_ABRT;
 8010e38:	f06f 030c 	mvn.w	r3, #12
 8010e3c:	e250      	b.n	80112e0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	8b5b      	ldrh	r3, [r3, #26]
 8010e42:	f043 0302 	orr.w	r3, r3, #2
 8010e46:	b29a      	uxth	r2, r3
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010e4c:	e23a      	b.n	80112c4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010e4e:	4b98      	ldr	r3, [pc, #608]	@ (80110b0 <tcp_process+0x590>)
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	f003 0310 	and.w	r3, r3, #16
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	f000 8234 	beq.w	80112c4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e5c:	4b95      	ldr	r3, [pc, #596]	@ (80110b4 <tcp_process+0x594>)
 8010e5e:	6819      	ldr	r1, [r3, #0]
 8010e60:	4b95      	ldr	r3, [pc, #596]	@ (80110b8 <tcp_process+0x598>)
 8010e62:	881b      	ldrh	r3, [r3, #0]
 8010e64:	461a      	mov	r2, r3
 8010e66:	4b95      	ldr	r3, [pc, #596]	@ (80110bc <tcp_process+0x59c>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e6c:	4b94      	ldr	r3, [pc, #592]	@ (80110c0 <tcp_process+0x5a0>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e70:	885b      	ldrh	r3, [r3, #2]
 8010e72:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e74:	4a92      	ldr	r2, [pc, #584]	@ (80110c0 <tcp_process+0x5a0>)
 8010e76:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e78:	8812      	ldrh	r2, [r2, #0]
 8010e7a:	b292      	uxth	r2, r2
 8010e7c:	9202      	str	r2, [sp, #8]
 8010e7e:	9301      	str	r3, [sp, #4]
 8010e80:	4b90      	ldr	r3, [pc, #576]	@ (80110c4 <tcp_process+0x5a4>)
 8010e82:	9300      	str	r3, [sp, #0]
 8010e84:	4b90      	ldr	r3, [pc, #576]	@ (80110c8 <tcp_process+0x5a8>)
 8010e86:	4602      	mov	r2, r0
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f002 fc7f 	bl	801378c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010e94:	2b05      	cmp	r3, #5
 8010e96:	f200 8215 	bhi.w	80112c4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f002 fa4b 	bl	801333c <tcp_rexmit_rto>
      break;
 8010ea6:	e20d      	b.n	80112c4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010ea8:	4b81      	ldr	r3, [pc, #516]	@ (80110b0 <tcp_process+0x590>)
 8010eaa:	781b      	ldrb	r3, [r3, #0]
 8010eac:	f003 0310 	and.w	r3, r3, #16
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f000 80a1 	beq.w	8010ff8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80110b4 <tcp_process+0x594>)
 8010eb8:	681a      	ldr	r2, [r3, #0]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ebe:	1ad3      	subs	r3, r2, r3
 8010ec0:	3b01      	subs	r3, #1
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	db7e      	blt.n	8010fc4 <tcp_process+0x4a4>
 8010ec6:	4b7b      	ldr	r3, [pc, #492]	@ (80110b4 <tcp_process+0x594>)
 8010ec8:	681a      	ldr	r2, [r3, #0]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ece:	1ad3      	subs	r3, r2, r3
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	dc77      	bgt.n	8010fc4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2204      	movs	r2, #4
 8010ed8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d102      	bne.n	8010ee8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010ee2:	23fa      	movs	r3, #250	@ 0xfa
 8010ee4:	76bb      	strb	r3, [r7, #26]
 8010ee6:	e01d      	b.n	8010f24 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010eec:	699b      	ldr	r3, [r3, #24]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d106      	bne.n	8010f00 <tcp_process+0x3e0>
 8010ef2:	4b76      	ldr	r3, [pc, #472]	@ (80110cc <tcp_process+0x5ac>)
 8010ef4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8010ef8:	4975      	ldr	r1, [pc, #468]	@ (80110d0 <tcp_process+0x5b0>)
 8010efa:	4876      	ldr	r0, [pc, #472]	@ (80110d4 <tcp_process+0x5b4>)
 8010efc:	f006 f9da 	bl	80172b4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f04:	699b      	ldr	r3, [r3, #24]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d00a      	beq.n	8010f20 <tcp_process+0x400>
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f0e:	699b      	ldr	r3, [r3, #24]
 8010f10:	687a      	ldr	r2, [r7, #4]
 8010f12:	6910      	ldr	r0, [r2, #16]
 8010f14:	2200      	movs	r2, #0
 8010f16:	6879      	ldr	r1, [r7, #4]
 8010f18:	4798      	blx	r3
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	76bb      	strb	r3, [r7, #26]
 8010f1e:	e001      	b.n	8010f24 <tcp_process+0x404>
 8010f20:	23f0      	movs	r3, #240	@ 0xf0
 8010f22:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010f24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d00a      	beq.n	8010f42 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010f2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f30:	f113 0f0d 	cmn.w	r3, #13
 8010f34:	d002      	beq.n	8010f3c <tcp_process+0x41c>
              tcp_abort(pcb);
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f7fd ff8c 	bl	800ee54 <tcp_abort>
            }
            return ERR_ABRT;
 8010f3c:	f06f 030c 	mvn.w	r3, #12
 8010f40:	e1ce      	b.n	80112e0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010f42:	6878      	ldr	r0, [r7, #4]
 8010f44:	f000 fae0 	bl	8011508 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010f48:	4b63      	ldr	r3, [pc, #396]	@ (80110d8 <tcp_process+0x5b8>)
 8010f4a:	881b      	ldrh	r3, [r3, #0]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d005      	beq.n	8010f5c <tcp_process+0x43c>
            recv_acked--;
 8010f50:	4b61      	ldr	r3, [pc, #388]	@ (80110d8 <tcp_process+0x5b8>)
 8010f52:	881b      	ldrh	r3, [r3, #0]
 8010f54:	3b01      	subs	r3, #1
 8010f56:	b29a      	uxth	r2, r3
 8010f58:	4b5f      	ldr	r3, [pc, #380]	@ (80110d8 <tcp_process+0x5b8>)
 8010f5a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010f60:	009a      	lsls	r2, r3, #2
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010f66:	005b      	lsls	r3, r3, #1
 8010f68:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010f6c:	428b      	cmp	r3, r1
 8010f6e:	bf38      	it	cc
 8010f70:	460b      	movcc	r3, r1
 8010f72:	429a      	cmp	r2, r3
 8010f74:	d204      	bcs.n	8010f80 <tcp_process+0x460>
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010f7a:	009b      	lsls	r3, r3, #2
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	e00d      	b.n	8010f9c <tcp_process+0x47c>
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010f84:	005b      	lsls	r3, r3, #1
 8010f86:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010f8a:	4293      	cmp	r3, r2
 8010f8c:	d904      	bls.n	8010f98 <tcp_process+0x478>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010f92:	005b      	lsls	r3, r3, #1
 8010f94:	b29b      	uxth	r3, r3
 8010f96:	e001      	b.n	8010f9c <tcp_process+0x47c>
 8010f98:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010f9c:	687a      	ldr	r2, [r7, #4]
 8010f9e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010fa2:	4b4e      	ldr	r3, [pc, #312]	@ (80110dc <tcp_process+0x5bc>)
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	f003 0320 	and.w	r3, r3, #32
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d037      	beq.n	801101e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	8b5b      	ldrh	r3, [r3, #26]
 8010fb2:	f043 0302 	orr.w	r3, r3, #2
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2207      	movs	r2, #7
 8010fc0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010fc2:	e02c      	b.n	801101e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80110b4 <tcp_process+0x594>)
 8010fc6:	6819      	ldr	r1, [r3, #0]
 8010fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80110b8 <tcp_process+0x598>)
 8010fca:	881b      	ldrh	r3, [r3, #0]
 8010fcc:	461a      	mov	r2, r3
 8010fce:	4b3b      	ldr	r3, [pc, #236]	@ (80110bc <tcp_process+0x59c>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80110c0 <tcp_process+0x5a0>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fd8:	885b      	ldrh	r3, [r3, #2]
 8010fda:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010fdc:	4a38      	ldr	r2, [pc, #224]	@ (80110c0 <tcp_process+0x5a0>)
 8010fde:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fe0:	8812      	ldrh	r2, [r2, #0]
 8010fe2:	b292      	uxth	r2, r2
 8010fe4:	9202      	str	r2, [sp, #8]
 8010fe6:	9301      	str	r3, [sp, #4]
 8010fe8:	4b36      	ldr	r3, [pc, #216]	@ (80110c4 <tcp_process+0x5a4>)
 8010fea:	9300      	str	r3, [sp, #0]
 8010fec:	4b36      	ldr	r3, [pc, #216]	@ (80110c8 <tcp_process+0x5a8>)
 8010fee:	4602      	mov	r2, r0
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f002 fbcb 	bl	801378c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010ff6:	e167      	b.n	80112c8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80110b0 <tcp_process+0x590>)
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	f003 0302 	and.w	r3, r3, #2
 8011000:	2b00      	cmp	r3, #0
 8011002:	f000 8161 	beq.w	80112c8 <tcp_process+0x7a8>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801100a:	1e5a      	subs	r2, r3, #1
 801100c:	4b2b      	ldr	r3, [pc, #172]	@ (80110bc <tcp_process+0x59c>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	429a      	cmp	r2, r3
 8011012:	f040 8159 	bne.w	80112c8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f002 f9b2 	bl	8013380 <tcp_rexmit>
      break;
 801101c:	e154      	b.n	80112c8 <tcp_process+0x7a8>
 801101e:	e153      	b.n	80112c8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f000 fa71 	bl	8011508 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011026:	4b2d      	ldr	r3, [pc, #180]	@ (80110dc <tcp_process+0x5bc>)
 8011028:	781b      	ldrb	r3, [r3, #0]
 801102a:	f003 0320 	and.w	r3, r3, #32
 801102e:	2b00      	cmp	r3, #0
 8011030:	f000 814c 	beq.w	80112cc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	8b5b      	ldrh	r3, [r3, #26]
 8011038:	f043 0302 	orr.w	r3, r3, #2
 801103c:	b29a      	uxth	r2, r3
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2207      	movs	r2, #7
 8011046:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011048:	e140      	b.n	80112cc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 fa5c 	bl	8011508 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011050:	4b22      	ldr	r3, [pc, #136]	@ (80110dc <tcp_process+0x5bc>)
 8011052:	781b      	ldrb	r3, [r3, #0]
 8011054:	f003 0320 	and.w	r3, r3, #32
 8011058:	2b00      	cmp	r3, #0
 801105a:	d071      	beq.n	8011140 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801105c:	4b14      	ldr	r3, [pc, #80]	@ (80110b0 <tcp_process+0x590>)
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	f003 0310 	and.w	r3, r3, #16
 8011064:	2b00      	cmp	r3, #0
 8011066:	d060      	beq.n	801112a <tcp_process+0x60a>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801106c:	4b11      	ldr	r3, [pc, #68]	@ (80110b4 <tcp_process+0x594>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	429a      	cmp	r2, r3
 8011072:	d15a      	bne.n	801112a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011078:	2b00      	cmp	r3, #0
 801107a:	d156      	bne.n	801112a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	8b5b      	ldrh	r3, [r3, #26]
 8011080:	f043 0302 	orr.w	r3, r3, #2
 8011084:	b29a      	uxth	r2, r3
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f7fe fdbc 	bl	800fc08 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011090:	4b13      	ldr	r3, [pc, #76]	@ (80110e0 <tcp_process+0x5c0>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	429a      	cmp	r2, r3
 8011098:	d105      	bne.n	80110a6 <tcp_process+0x586>
 801109a:	4b11      	ldr	r3, [pc, #68]	@ (80110e0 <tcp_process+0x5c0>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	68db      	ldr	r3, [r3, #12]
 80110a0:	4a0f      	ldr	r2, [pc, #60]	@ (80110e0 <tcp_process+0x5c0>)
 80110a2:	6013      	str	r3, [r2, #0]
 80110a4:	e02e      	b.n	8011104 <tcp_process+0x5e4>
 80110a6:	4b0e      	ldr	r3, [pc, #56]	@ (80110e0 <tcp_process+0x5c0>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	617b      	str	r3, [r7, #20]
 80110ac:	e027      	b.n	80110fe <tcp_process+0x5de>
 80110ae:	bf00      	nop
 80110b0:	20027490 	.word	0x20027490
 80110b4:	20027488 	.word	0x20027488
 80110b8:	2002748e 	.word	0x2002748e
 80110bc:	20027484 	.word	0x20027484
 80110c0:	20027474 	.word	0x20027474
 80110c4:	2002435c 	.word	0x2002435c
 80110c8:	20024360 	.word	0x20024360
 80110cc:	08019930 	.word	0x08019930
 80110d0:	08019bd0 	.word	0x08019bd0
 80110d4:	0801997c 	.word	0x0801997c
 80110d8:	2002748c 	.word	0x2002748c
 80110dc:	20027491 	.word	0x20027491
 80110e0:	20027458 	.word	0x20027458
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	68db      	ldr	r3, [r3, #12]
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d104      	bne.n	80110f8 <tcp_process+0x5d8>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	68da      	ldr	r2, [r3, #12]
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	60da      	str	r2, [r3, #12]
 80110f6:	e005      	b.n	8011104 <tcp_process+0x5e4>
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	617b      	str	r3, [r7, #20]
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d1ef      	bne.n	80110e4 <tcp_process+0x5c4>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2200      	movs	r2, #0
 8011108:	60da      	str	r2, [r3, #12]
 801110a:	4b77      	ldr	r3, [pc, #476]	@ (80112e8 <tcp_process+0x7c8>)
 801110c:	2201      	movs	r2, #1
 801110e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	220a      	movs	r2, #10
 8011114:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011116:	4b75      	ldr	r3, [pc, #468]	@ (80112ec <tcp_process+0x7cc>)
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	60da      	str	r2, [r3, #12]
 801111e:	4a73      	ldr	r2, [pc, #460]	@ (80112ec <tcp_process+0x7cc>)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6013      	str	r3, [r2, #0]
 8011124:	f002 fcf4 	bl	8013b10 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011128:	e0d2      	b.n	80112d0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	8b5b      	ldrh	r3, [r3, #26]
 801112e:	f043 0302 	orr.w	r3, r3, #2
 8011132:	b29a      	uxth	r2, r3
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2208      	movs	r2, #8
 801113c:	751a      	strb	r2, [r3, #20]
      break;
 801113e:	e0c7      	b.n	80112d0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011140:	4b6b      	ldr	r3, [pc, #428]	@ (80112f0 <tcp_process+0x7d0>)
 8011142:	781b      	ldrb	r3, [r3, #0]
 8011144:	f003 0310 	and.w	r3, r3, #16
 8011148:	2b00      	cmp	r3, #0
 801114a:	f000 80c1 	beq.w	80112d0 <tcp_process+0x7b0>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011152:	4b68      	ldr	r3, [pc, #416]	@ (80112f4 <tcp_process+0x7d4>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	429a      	cmp	r2, r3
 8011158:	f040 80ba 	bne.w	80112d0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011160:	2b00      	cmp	r3, #0
 8011162:	f040 80b5 	bne.w	80112d0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	2206      	movs	r2, #6
 801116a:	751a      	strb	r2, [r3, #20]
      break;
 801116c:	e0b0      	b.n	80112d0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	f000 f9ca 	bl	8011508 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011174:	4b60      	ldr	r3, [pc, #384]	@ (80112f8 <tcp_process+0x7d8>)
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	f003 0320 	and.w	r3, r3, #32
 801117c:	2b00      	cmp	r3, #0
 801117e:	f000 80a9 	beq.w	80112d4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	8b5b      	ldrh	r3, [r3, #26]
 8011186:	f043 0302 	orr.w	r3, r3, #2
 801118a:	b29a      	uxth	r2, r3
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f7fe fd39 	bl	800fc08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011196:	4b59      	ldr	r3, [pc, #356]	@ (80112fc <tcp_process+0x7dc>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	687a      	ldr	r2, [r7, #4]
 801119c:	429a      	cmp	r2, r3
 801119e:	d105      	bne.n	80111ac <tcp_process+0x68c>
 80111a0:	4b56      	ldr	r3, [pc, #344]	@ (80112fc <tcp_process+0x7dc>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	68db      	ldr	r3, [r3, #12]
 80111a6:	4a55      	ldr	r2, [pc, #340]	@ (80112fc <tcp_process+0x7dc>)
 80111a8:	6013      	str	r3, [r2, #0]
 80111aa:	e013      	b.n	80111d4 <tcp_process+0x6b4>
 80111ac:	4b53      	ldr	r3, [pc, #332]	@ (80112fc <tcp_process+0x7dc>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	613b      	str	r3, [r7, #16]
 80111b2:	e00c      	b.n	80111ce <tcp_process+0x6ae>
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	68db      	ldr	r3, [r3, #12]
 80111b8:	687a      	ldr	r2, [r7, #4]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d104      	bne.n	80111c8 <tcp_process+0x6a8>
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	68da      	ldr	r2, [r3, #12]
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	60da      	str	r2, [r3, #12]
 80111c6:	e005      	b.n	80111d4 <tcp_process+0x6b4>
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	68db      	ldr	r3, [r3, #12]
 80111cc:	613b      	str	r3, [r7, #16]
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d1ef      	bne.n	80111b4 <tcp_process+0x694>
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2200      	movs	r2, #0
 80111d8:	60da      	str	r2, [r3, #12]
 80111da:	4b43      	ldr	r3, [pc, #268]	@ (80112e8 <tcp_process+0x7c8>)
 80111dc:	2201      	movs	r2, #1
 80111de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	220a      	movs	r2, #10
 80111e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80111e6:	4b41      	ldr	r3, [pc, #260]	@ (80112ec <tcp_process+0x7cc>)
 80111e8:	681a      	ldr	r2, [r3, #0]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	60da      	str	r2, [r3, #12]
 80111ee:	4a3f      	ldr	r2, [pc, #252]	@ (80112ec <tcp_process+0x7cc>)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6013      	str	r3, [r2, #0]
 80111f4:	f002 fc8c 	bl	8013b10 <tcp_timer_needed>
      }
      break;
 80111f8:	e06c      	b.n	80112d4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f000 f984 	bl	8011508 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011200:	4b3b      	ldr	r3, [pc, #236]	@ (80112f0 <tcp_process+0x7d0>)
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	f003 0310 	and.w	r3, r3, #16
 8011208:	2b00      	cmp	r3, #0
 801120a:	d065      	beq.n	80112d8 <tcp_process+0x7b8>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011210:	4b38      	ldr	r3, [pc, #224]	@ (80112f4 <tcp_process+0x7d4>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	429a      	cmp	r2, r3
 8011216:	d15f      	bne.n	80112d8 <tcp_process+0x7b8>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801121c:	2b00      	cmp	r3, #0
 801121e:	d15b      	bne.n	80112d8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f7fe fcf1 	bl	800fc08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011226:	4b35      	ldr	r3, [pc, #212]	@ (80112fc <tcp_process+0x7dc>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	687a      	ldr	r2, [r7, #4]
 801122c:	429a      	cmp	r2, r3
 801122e:	d105      	bne.n	801123c <tcp_process+0x71c>
 8011230:	4b32      	ldr	r3, [pc, #200]	@ (80112fc <tcp_process+0x7dc>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	68db      	ldr	r3, [r3, #12]
 8011236:	4a31      	ldr	r2, [pc, #196]	@ (80112fc <tcp_process+0x7dc>)
 8011238:	6013      	str	r3, [r2, #0]
 801123a:	e013      	b.n	8011264 <tcp_process+0x744>
 801123c:	4b2f      	ldr	r3, [pc, #188]	@ (80112fc <tcp_process+0x7dc>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	60fb      	str	r3, [r7, #12]
 8011242:	e00c      	b.n	801125e <tcp_process+0x73e>
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	68db      	ldr	r3, [r3, #12]
 8011248:	687a      	ldr	r2, [r7, #4]
 801124a:	429a      	cmp	r2, r3
 801124c:	d104      	bne.n	8011258 <tcp_process+0x738>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	68da      	ldr	r2, [r3, #12]
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	60da      	str	r2, [r3, #12]
 8011256:	e005      	b.n	8011264 <tcp_process+0x744>
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	60fb      	str	r3, [r7, #12]
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d1ef      	bne.n	8011244 <tcp_process+0x724>
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2200      	movs	r2, #0
 8011268:	60da      	str	r2, [r3, #12]
 801126a:	4b1f      	ldr	r3, [pc, #124]	@ (80112e8 <tcp_process+0x7c8>)
 801126c:	2201      	movs	r2, #1
 801126e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	220a      	movs	r2, #10
 8011274:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011276:	4b1d      	ldr	r3, [pc, #116]	@ (80112ec <tcp_process+0x7cc>)
 8011278:	681a      	ldr	r2, [r3, #0]
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	60da      	str	r2, [r3, #12]
 801127e:	4a1b      	ldr	r2, [pc, #108]	@ (80112ec <tcp_process+0x7cc>)
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6013      	str	r3, [r2, #0]
 8011284:	f002 fc44 	bl	8013b10 <tcp_timer_needed>
      }
      break;
 8011288:	e026      	b.n	80112d8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f000 f93c 	bl	8011508 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011290:	4b17      	ldr	r3, [pc, #92]	@ (80112f0 <tcp_process+0x7d0>)
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	f003 0310 	and.w	r3, r3, #16
 8011298:	2b00      	cmp	r3, #0
 801129a:	d01f      	beq.n	80112dc <tcp_process+0x7bc>
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80112a0:	4b14      	ldr	r3, [pc, #80]	@ (80112f4 <tcp_process+0x7d4>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d119      	bne.n	80112dc <tcp_process+0x7bc>
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d115      	bne.n	80112dc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80112b0:	4b11      	ldr	r3, [pc, #68]	@ (80112f8 <tcp_process+0x7d8>)
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	f043 0310 	orr.w	r3, r3, #16
 80112b8:	b2da      	uxtb	r2, r3
 80112ba:	4b0f      	ldr	r3, [pc, #60]	@ (80112f8 <tcp_process+0x7d8>)
 80112bc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80112be:	e00d      	b.n	80112dc <tcp_process+0x7bc>
    default:
      break;
 80112c0:	bf00      	nop
 80112c2:	e00c      	b.n	80112de <tcp_process+0x7be>
      break;
 80112c4:	bf00      	nop
 80112c6:	e00a      	b.n	80112de <tcp_process+0x7be>
      break;
 80112c8:	bf00      	nop
 80112ca:	e008      	b.n	80112de <tcp_process+0x7be>
      break;
 80112cc:	bf00      	nop
 80112ce:	e006      	b.n	80112de <tcp_process+0x7be>
      break;
 80112d0:	bf00      	nop
 80112d2:	e004      	b.n	80112de <tcp_process+0x7be>
      break;
 80112d4:	bf00      	nop
 80112d6:	e002      	b.n	80112de <tcp_process+0x7be>
      break;
 80112d8:	bf00      	nop
 80112da:	e000      	b.n	80112de <tcp_process+0x7be>
      break;
 80112dc:	bf00      	nop
  }
  return ERR_OK;
 80112de:	2300      	movs	r3, #0
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3724      	adds	r7, #36	@ 0x24
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd90      	pop	{r4, r7, pc}
 80112e8:	20027460 	.word	0x20027460
 80112ec:	2002745c 	.word	0x2002745c
 80112f0:	20027490 	.word	0x20027490
 80112f4:	20027488 	.word	0x20027488
 80112f8:	20027491 	.word	0x20027491
 80112fc:	20027458 	.word	0x20027458

08011300 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011300:	b590      	push	{r4, r7, lr}
 8011302:	b085      	sub	sp, #20
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
 8011308:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d106      	bne.n	801131e <tcp_oos_insert_segment+0x1e>
 8011310:	4b3b      	ldr	r3, [pc, #236]	@ (8011400 <tcp_oos_insert_segment+0x100>)
 8011312:	f240 421f 	movw	r2, #1055	@ 0x41f
 8011316:	493b      	ldr	r1, [pc, #236]	@ (8011404 <tcp_oos_insert_segment+0x104>)
 8011318:	483b      	ldr	r0, [pc, #236]	@ (8011408 <tcp_oos_insert_segment+0x108>)
 801131a:	f005 ffcb 	bl	80172b4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	68db      	ldr	r3, [r3, #12]
 8011322:	899b      	ldrh	r3, [r3, #12]
 8011324:	b29b      	uxth	r3, r3
 8011326:	4618      	mov	r0, r3
 8011328:	f7fb fc12 	bl	800cb50 <lwip_htons>
 801132c:	4603      	mov	r3, r0
 801132e:	b2db      	uxtb	r3, r3
 8011330:	f003 0301 	and.w	r3, r3, #1
 8011334:	2b00      	cmp	r3, #0
 8011336:	d028      	beq.n	801138a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011338:	6838      	ldr	r0, [r7, #0]
 801133a:	f7fe fa63 	bl	800f804 <tcp_segs_free>
    next = NULL;
 801133e:	2300      	movs	r3, #0
 8011340:	603b      	str	r3, [r7, #0]
 8011342:	e056      	b.n	80113f2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	899b      	ldrh	r3, [r3, #12]
 801134a:	b29b      	uxth	r3, r3
 801134c:	4618      	mov	r0, r3
 801134e:	f7fb fbff 	bl	800cb50 <lwip_htons>
 8011352:	4603      	mov	r3, r0
 8011354:	b2db      	uxtb	r3, r3
 8011356:	f003 0301 	and.w	r3, r3, #1
 801135a:	2b00      	cmp	r3, #0
 801135c:	d00d      	beq.n	801137a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	68db      	ldr	r3, [r3, #12]
 8011362:	899b      	ldrh	r3, [r3, #12]
 8011364:	b29c      	uxth	r4, r3
 8011366:	2001      	movs	r0, #1
 8011368:	f7fb fbf2 	bl	800cb50 <lwip_htons>
 801136c:	4603      	mov	r3, r0
 801136e:	461a      	mov	r2, r3
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	68db      	ldr	r3, [r3, #12]
 8011374:	4322      	orrs	r2, r4
 8011376:	b292      	uxth	r2, r2
 8011378:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011384:	68f8      	ldr	r0, [r7, #12]
 8011386:	f7fe fa52 	bl	800f82e <tcp_seg_free>
    while (next &&
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d00e      	beq.n	80113ae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	891b      	ldrh	r3, [r3, #8]
 8011394:	461a      	mov	r2, r3
 8011396:	4b1d      	ldr	r3, [pc, #116]	@ (801140c <tcp_oos_insert_segment+0x10c>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	441a      	add	r2, r3
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	6839      	ldr	r1, [r7, #0]
 80113a4:	8909      	ldrh	r1, [r1, #8]
 80113a6:	440b      	add	r3, r1
 80113a8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	daca      	bge.n	8011344 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d01e      	beq.n	80113f2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	891b      	ldrh	r3, [r3, #8]
 80113b8:	461a      	mov	r2, r3
 80113ba:	4b14      	ldr	r3, [pc, #80]	@ (801140c <tcp_oos_insert_segment+0x10c>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	441a      	add	r2, r3
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	dd12      	ble.n	80113f2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	b29a      	uxth	r2, r3
 80113d4:	4b0d      	ldr	r3, [pc, #52]	@ (801140c <tcp_oos_insert_segment+0x10c>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	b29b      	uxth	r3, r3
 80113da:	1ad3      	subs	r3, r2, r3
 80113dc:	b29a      	uxth	r2, r3
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	685a      	ldr	r2, [r3, #4]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	891b      	ldrh	r3, [r3, #8]
 80113ea:	4619      	mov	r1, r3
 80113ec:	4610      	mov	r0, r2
 80113ee:	f7fc fe17 	bl	800e020 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	683a      	ldr	r2, [r7, #0]
 80113f6:	601a      	str	r2, [r3, #0]
}
 80113f8:	bf00      	nop
 80113fa:	3714      	adds	r7, #20
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd90      	pop	{r4, r7, pc}
 8011400:	08019930 	.word	0x08019930
 8011404:	08019bf0 	.word	0x08019bf0
 8011408:	0801997c 	.word	0x0801997c
 801140c:	20027484 	.word	0x20027484

08011410 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011410:	b5b0      	push	{r4, r5, r7, lr}
 8011412:	b086      	sub	sp, #24
 8011414:	af00      	add	r7, sp, #0
 8011416:	60f8      	str	r0, [r7, #12]
 8011418:	60b9      	str	r1, [r7, #8]
 801141a:	607a      	str	r2, [r7, #4]
 801141c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801141e:	e03e      	b.n	801149e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	685b      	ldr	r3, [r3, #4]
 801142e:	4618      	mov	r0, r3
 8011430:	f7fd f80a 	bl	800e448 <pbuf_clen>
 8011434:	4603      	mov	r3, r0
 8011436:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801143e:	8a7a      	ldrh	r2, [r7, #18]
 8011440:	429a      	cmp	r2, r3
 8011442:	d906      	bls.n	8011452 <tcp_free_acked_segments+0x42>
 8011444:	4b2a      	ldr	r3, [pc, #168]	@ (80114f0 <tcp_free_acked_segments+0xe0>)
 8011446:	f240 4257 	movw	r2, #1111	@ 0x457
 801144a:	492a      	ldr	r1, [pc, #168]	@ (80114f4 <tcp_free_acked_segments+0xe4>)
 801144c:	482a      	ldr	r0, [pc, #168]	@ (80114f8 <tcp_free_acked_segments+0xe8>)
 801144e:	f005 ff31 	bl	80172b4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8011458:	8a7b      	ldrh	r3, [r7, #18]
 801145a:	1ad3      	subs	r3, r2, r3
 801145c:	b29a      	uxth	r2, r3
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	891a      	ldrh	r2, [r3, #8]
 8011468:	4b24      	ldr	r3, [pc, #144]	@ (80114fc <tcp_free_acked_segments+0xec>)
 801146a:	881b      	ldrh	r3, [r3, #0]
 801146c:	4413      	add	r3, r2
 801146e:	b29a      	uxth	r2, r3
 8011470:	4b22      	ldr	r3, [pc, #136]	@ (80114fc <tcp_free_acked_segments+0xec>)
 8011472:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011474:	6978      	ldr	r0, [r7, #20]
 8011476:	f7fe f9da 	bl	800f82e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011480:	2b00      	cmp	r3, #0
 8011482:	d00c      	beq.n	801149e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d109      	bne.n	801149e <tcp_free_acked_segments+0x8e>
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d106      	bne.n	801149e <tcp_free_acked_segments+0x8e>
 8011490:	4b17      	ldr	r3, [pc, #92]	@ (80114f0 <tcp_free_acked_segments+0xe0>)
 8011492:	f240 4261 	movw	r2, #1121	@ 0x461
 8011496:	491a      	ldr	r1, [pc, #104]	@ (8011500 <tcp_free_acked_segments+0xf0>)
 8011498:	4817      	ldr	r0, [pc, #92]	@ (80114f8 <tcp_free_acked_segments+0xe8>)
 801149a:	f005 ff0b 	bl	80172b4 <iprintf>
  while (seg_list != NULL &&
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d020      	beq.n	80114e6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	685b      	ldr	r3, [r3, #4]
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7fb fb66 	bl	800cb7c <lwip_htonl>
 80114b0:	4604      	mov	r4, r0
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	891b      	ldrh	r3, [r3, #8]
 80114b6:	461d      	mov	r5, r3
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	899b      	ldrh	r3, [r3, #12]
 80114be:	b29b      	uxth	r3, r3
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7fb fb45 	bl	800cb50 <lwip_htons>
 80114c6:	4603      	mov	r3, r0
 80114c8:	b2db      	uxtb	r3, r3
 80114ca:	f003 0303 	and.w	r3, r3, #3
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d001      	beq.n	80114d6 <tcp_free_acked_segments+0xc6>
 80114d2:	2301      	movs	r3, #1
 80114d4:	e000      	b.n	80114d8 <tcp_free_acked_segments+0xc8>
 80114d6:	2300      	movs	r3, #0
 80114d8:	442b      	add	r3, r5
 80114da:	18e2      	adds	r2, r4, r3
 80114dc:	4b09      	ldr	r3, [pc, #36]	@ (8011504 <tcp_free_acked_segments+0xf4>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	dd9c      	ble.n	8011420 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80114e6:	68bb      	ldr	r3, [r7, #8]
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3718      	adds	r7, #24
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bdb0      	pop	{r4, r5, r7, pc}
 80114f0:	08019930 	.word	0x08019930
 80114f4:	08019c18 	.word	0x08019c18
 80114f8:	0801997c 	.word	0x0801997c
 80114fc:	2002748c 	.word	0x2002748c
 8011500:	08019c40 	.word	0x08019c40
 8011504:	20027488 	.word	0x20027488

08011508 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011508:	b5b0      	push	{r4, r5, r7, lr}
 801150a:	b094      	sub	sp, #80	@ 0x50
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011510:	2300      	movs	r3, #0
 8011512:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d106      	bne.n	8011528 <tcp_receive+0x20>
 801151a:	4b91      	ldr	r3, [pc, #580]	@ (8011760 <tcp_receive+0x258>)
 801151c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8011520:	4990      	ldr	r1, [pc, #576]	@ (8011764 <tcp_receive+0x25c>)
 8011522:	4891      	ldr	r0, [pc, #580]	@ (8011768 <tcp_receive+0x260>)
 8011524:	f005 fec6 	bl	80172b4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	7d1b      	ldrb	r3, [r3, #20]
 801152c:	2b03      	cmp	r3, #3
 801152e:	d806      	bhi.n	801153e <tcp_receive+0x36>
 8011530:	4b8b      	ldr	r3, [pc, #556]	@ (8011760 <tcp_receive+0x258>)
 8011532:	f240 427c 	movw	r2, #1148	@ 0x47c
 8011536:	498d      	ldr	r1, [pc, #564]	@ (801176c <tcp_receive+0x264>)
 8011538:	488b      	ldr	r0, [pc, #556]	@ (8011768 <tcp_receive+0x260>)
 801153a:	f005 febb 	bl	80172b4 <iprintf>

  if (flags & TCP_ACK) {
 801153e:	4b8c      	ldr	r3, [pc, #560]	@ (8011770 <tcp_receive+0x268>)
 8011540:	781b      	ldrb	r3, [r3, #0]
 8011542:	f003 0310 	and.w	r3, r3, #16
 8011546:	2b00      	cmp	r3, #0
 8011548:	f000 8264 	beq.w	8011a14 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011552:	461a      	mov	r2, r3
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011558:	4413      	add	r3, r2
 801155a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011560:	4b84      	ldr	r3, [pc, #528]	@ (8011774 <tcp_receive+0x26c>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	1ad3      	subs	r3, r2, r3
 8011566:	2b00      	cmp	r3, #0
 8011568:	db1b      	blt.n	80115a2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801156e:	4b81      	ldr	r3, [pc, #516]	@ (8011774 <tcp_receive+0x26c>)
 8011570:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011572:	429a      	cmp	r2, r3
 8011574:	d106      	bne.n	8011584 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801157a:	4b7f      	ldr	r3, [pc, #508]	@ (8011778 <tcp_receive+0x270>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	1ad3      	subs	r3, r2, r3
 8011580:	2b00      	cmp	r3, #0
 8011582:	db0e      	blt.n	80115a2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011588:	4b7b      	ldr	r3, [pc, #492]	@ (8011778 <tcp_receive+0x270>)
 801158a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801158c:	429a      	cmp	r2, r3
 801158e:	d125      	bne.n	80115dc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011590:	4b7a      	ldr	r3, [pc, #488]	@ (801177c <tcp_receive+0x274>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	89db      	ldrh	r3, [r3, #14]
 8011596:	b29a      	uxth	r2, r3
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801159e:	429a      	cmp	r2, r3
 80115a0:	d91c      	bls.n	80115dc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80115a2:	4b76      	ldr	r3, [pc, #472]	@ (801177c <tcp_receive+0x274>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	89db      	ldrh	r3, [r3, #14]
 80115a8:	b29a      	uxth	r2, r3
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80115bc:	429a      	cmp	r2, r3
 80115be:	d205      	bcs.n	80115cc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80115cc:	4b69      	ldr	r3, [pc, #420]	@ (8011774 <tcp_receive+0x26c>)
 80115ce:	681a      	ldr	r2, [r3, #0]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80115d4:	4b68      	ldr	r3, [pc, #416]	@ (8011778 <tcp_receive+0x270>)
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80115dc:	4b66      	ldr	r3, [pc, #408]	@ (8011778 <tcp_receive+0x270>)
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115e4:	1ad3      	subs	r3, r2, r3
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	dc58      	bgt.n	801169c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80115ea:	4b65      	ldr	r3, [pc, #404]	@ (8011780 <tcp_receive+0x278>)
 80115ec:	881b      	ldrh	r3, [r3, #0]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d14b      	bne.n	801168a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80115fc:	4413      	add	r3, r2
 80115fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011600:	429a      	cmp	r2, r3
 8011602:	d142      	bne.n	801168a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801160a:	2b00      	cmp	r3, #0
 801160c:	db3d      	blt.n	801168a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011612:	4b59      	ldr	r3, [pc, #356]	@ (8011778 <tcp_receive+0x270>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	429a      	cmp	r2, r3
 8011618:	d137      	bne.n	801168a <tcp_receive+0x182>
              found_dupack = 1;
 801161a:	2301      	movs	r3, #1
 801161c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011624:	2bff      	cmp	r3, #255	@ 0xff
 8011626:	d007      	beq.n	8011638 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801162e:	3301      	adds	r3, #1
 8011630:	b2da      	uxtb	r2, r3
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801163e:	2b03      	cmp	r3, #3
 8011640:	d91b      	bls.n	801167a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801164c:	4413      	add	r3, r2
 801164e:	b29a      	uxth	r2, r3
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011656:	429a      	cmp	r2, r3
 8011658:	d30a      	bcc.n	8011670 <tcp_receive+0x168>
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011664:	4413      	add	r3, r2
 8011666:	b29a      	uxth	r2, r3
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801166e:	e004      	b.n	801167a <tcp_receive+0x172>
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011676:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011680:	2b02      	cmp	r3, #2
 8011682:	d902      	bls.n	801168a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f001 fee7 	bl	8013458 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801168a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801168c:	2b00      	cmp	r3, #0
 801168e:	f040 8161 	bne.w	8011954 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2200      	movs	r2, #0
 8011696:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801169a:	e15b      	b.n	8011954 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801169c:	4b36      	ldr	r3, [pc, #216]	@ (8011778 <tcp_receive+0x270>)
 801169e:	681a      	ldr	r2, [r3, #0]
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116a4:	1ad3      	subs	r3, r2, r3
 80116a6:	3b01      	subs	r3, #1
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	f2c0 814e 	blt.w	801194a <tcp_receive+0x442>
 80116ae:	4b32      	ldr	r3, [pc, #200]	@ (8011778 <tcp_receive+0x270>)
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	f300 8146 	bgt.w	801194a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	8b5b      	ldrh	r3, [r3, #26]
 80116c2:	f003 0304 	and.w	r3, r3, #4
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d010      	beq.n	80116ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	8b5b      	ldrh	r3, [r3, #26]
 80116ce:	f023 0304 	bic.w	r3, r3, #4
 80116d2:	b29a      	uxth	r2, r3
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2200      	movs	r2, #0
 80116e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2200      	movs	r2, #0
 80116f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80116fa:	10db      	asrs	r3, r3, #3
 80116fc:	b21b      	sxth	r3, r3
 80116fe:	b29a      	uxth	r2, r3
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011706:	b29b      	uxth	r3, r3
 8011708:	4413      	add	r3, r2
 801170a:	b29b      	uxth	r3, r3
 801170c:	b21a      	sxth	r2, r3
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011714:	4b18      	ldr	r3, [pc, #96]	@ (8011778 <tcp_receive+0x270>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	b29a      	uxth	r2, r3
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801171e:	b29b      	uxth	r3, r3
 8011720:	1ad3      	subs	r3, r2, r3
 8011722:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2200      	movs	r2, #0
 8011728:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801172c:	4b12      	ldr	r3, [pc, #72]	@ (8011778 <tcp_receive+0x270>)
 801172e:	681a      	ldr	r2, [r3, #0]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	7d1b      	ldrb	r3, [r3, #20]
 8011738:	2b03      	cmp	r3, #3
 801173a:	f240 8097 	bls.w	801186c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801174a:	429a      	cmp	r2, r3
 801174c:	d245      	bcs.n	80117da <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	8b5b      	ldrh	r3, [r3, #26]
 8011752:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011756:	2b00      	cmp	r3, #0
 8011758:	d014      	beq.n	8011784 <tcp_receive+0x27c>
 801175a:	2301      	movs	r3, #1
 801175c:	e013      	b.n	8011786 <tcp_receive+0x27e>
 801175e:	bf00      	nop
 8011760:	08019930 	.word	0x08019930
 8011764:	08019c60 	.word	0x08019c60
 8011768:	0801997c 	.word	0x0801997c
 801176c:	08019c7c 	.word	0x08019c7c
 8011770:	20027490 	.word	0x20027490
 8011774:	20027484 	.word	0x20027484
 8011778:	20027488 	.word	0x20027488
 801177c:	20027474 	.word	0x20027474
 8011780:	2002748e 	.word	0x2002748e
 8011784:	2302      	movs	r3, #2
 8011786:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801178a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801178e:	b29a      	uxth	r2, r3
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011794:	fb12 f303 	smulbb	r3, r2, r3
 8011798:	b29b      	uxth	r3, r3
 801179a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801179c:	4293      	cmp	r3, r2
 801179e:	bf28      	it	cs
 80117a0:	4613      	movcs	r3, r2
 80117a2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80117aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80117ac:	4413      	add	r3, r2
 80117ae:	b29a      	uxth	r2, r3
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d309      	bcc.n	80117ce <tcp_receive+0x2c6>
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80117c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80117c2:	4413      	add	r3, r2
 80117c4:	b29a      	uxth	r2, r3
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80117cc:	e04e      	b.n	801186c <tcp_receive+0x364>
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80117d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80117d8:	e048      	b.n	801186c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80117e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80117e2:	4413      	add	r3, r2
 80117e4:	b29a      	uxth	r2, r3
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d309      	bcc.n	8011804 <tcp_receive+0x2fc>
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80117f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80117f8:	4413      	add	r3, r2
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8011802:	e004      	b.n	801180e <tcp_receive+0x306>
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801180a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801181a:	429a      	cmp	r2, r3
 801181c:	d326      	bcc.n	801186c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801182a:	1ad3      	subs	r3, r2, r3
 801182c:	b29a      	uxth	r2, r3
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801183e:	4413      	add	r3, r2
 8011840:	b29a      	uxth	r2, r3
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011848:	429a      	cmp	r2, r3
 801184a:	d30a      	bcc.n	8011862 <tcp_receive+0x35a>
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011856:	4413      	add	r3, r2
 8011858:	b29a      	uxth	r2, r3
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011860:	e004      	b.n	801186c <tcp_receive+0x364>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011868:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011874:	4a98      	ldr	r2, [pc, #608]	@ (8011ad8 <tcp_receive+0x5d0>)
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f7ff fdca 	bl	8011410 <tcp_free_acked_segments>
 801187c:	4602      	mov	r2, r0
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801188a:	4a94      	ldr	r2, [pc, #592]	@ (8011adc <tcp_receive+0x5d4>)
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f7ff fdbf 	bl	8011410 <tcp_free_acked_segments>
 8011892:	4602      	mov	r2, r0
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801189c:	2b00      	cmp	r3, #0
 801189e:	d104      	bne.n	80118aa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80118a6:	861a      	strh	r2, [r3, #48]	@ 0x30
 80118a8:	e002      	b.n	80118b0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2200      	movs	r2, #0
 80118ae:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2200      	movs	r2, #0
 80118b4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d103      	bne.n	80118c6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2200      	movs	r2, #0
 80118c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80118cc:	4b84      	ldr	r3, [pc, #528]	@ (8011ae0 <tcp_receive+0x5d8>)
 80118ce:	881b      	ldrh	r3, [r3, #0]
 80118d0:	4413      	add	r3, r2
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	8b5b      	ldrh	r3, [r3, #26]
 80118de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d035      	beq.n	8011952 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d118      	bne.n	8011920 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d00c      	beq.n	8011910 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118fe:	68db      	ldr	r3, [r3, #12]
 8011900:	685b      	ldr	r3, [r3, #4]
 8011902:	4618      	mov	r0, r3
 8011904:	f7fb f93a 	bl	800cb7c <lwip_htonl>
 8011908:	4603      	mov	r3, r0
 801190a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801190c:	2b00      	cmp	r3, #0
 801190e:	dc20      	bgt.n	8011952 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	8b5b      	ldrh	r3, [r3, #26]
 8011914:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011918:	b29a      	uxth	r2, r3
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801191e:	e018      	b.n	8011952 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011928:	68db      	ldr	r3, [r3, #12]
 801192a:	685b      	ldr	r3, [r3, #4]
 801192c:	4618      	mov	r0, r3
 801192e:	f7fb f925 	bl	800cb7c <lwip_htonl>
 8011932:	4603      	mov	r3, r0
 8011934:	1ae3      	subs	r3, r4, r3
 8011936:	2b00      	cmp	r3, #0
 8011938:	dc0b      	bgt.n	8011952 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	8b5b      	ldrh	r3, [r3, #26]
 801193e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011942:	b29a      	uxth	r2, r3
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011948:	e003      	b.n	8011952 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801194a:	6878      	ldr	r0, [r7, #4]
 801194c:	f001 ff70 	bl	8013830 <tcp_send_empty_ack>
 8011950:	e000      	b.n	8011954 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011952:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011958:	2b00      	cmp	r3, #0
 801195a:	d05b      	beq.n	8011a14 <tcp_receive+0x50c>
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011960:	4b60      	ldr	r3, [pc, #384]	@ (8011ae4 <tcp_receive+0x5dc>)
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	1ad3      	subs	r3, r2, r3
 8011966:	2b00      	cmp	r3, #0
 8011968:	da54      	bge.n	8011a14 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801196a:	4b5f      	ldr	r3, [pc, #380]	@ (8011ae8 <tcp_receive+0x5e0>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	b29a      	uxth	r2, r3
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011974:	b29b      	uxth	r3, r3
 8011976:	1ad3      	subs	r3, r2, r3
 8011978:	b29b      	uxth	r3, r3
 801197a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801197e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011988:	10db      	asrs	r3, r3, #3
 801198a:	b21b      	sxth	r3, r3
 801198c:	b29b      	uxth	r3, r3
 801198e:	1ad3      	subs	r3, r2, r3
 8011990:	b29b      	uxth	r3, r3
 8011992:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801199c:	b29a      	uxth	r2, r3
 801199e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80119a2:	4413      	add	r3, r2
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	b21a      	sxth	r2, r3
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80119ac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	da05      	bge.n	80119c0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80119b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80119b8:	425b      	negs	r3, r3
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80119c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80119ca:	109b      	asrs	r3, r3, #2
 80119cc:	b21b      	sxth	r3, r3
 80119ce:	b29b      	uxth	r3, r3
 80119d0:	1ad3      	subs	r3, r2, r3
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80119de:	b29a      	uxth	r2, r3
 80119e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80119e4:	4413      	add	r3, r2
 80119e6:	b29b      	uxth	r3, r3
 80119e8:	b21a      	sxth	r2, r3
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80119f4:	10db      	asrs	r3, r3, #3
 80119f6:	b21b      	sxth	r3, r3
 80119f8:	b29a      	uxth	r2, r3
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011a00:	b29b      	uxth	r3, r3
 8011a02:	4413      	add	r3, r2
 8011a04:	b29b      	uxth	r3, r3
 8011a06:	b21a      	sxth	r2, r3
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2200      	movs	r2, #0
 8011a12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011a14:	4b35      	ldr	r3, [pc, #212]	@ (8011aec <tcp_receive+0x5e4>)
 8011a16:	881b      	ldrh	r3, [r3, #0]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	f000 84df 	beq.w	80123dc <tcp_receive+0xed4>
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	7d1b      	ldrb	r3, [r3, #20]
 8011a22:	2b06      	cmp	r3, #6
 8011a24:	f200 84da 	bhi.w	80123dc <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011a2c:	4b30      	ldr	r3, [pc, #192]	@ (8011af0 <tcp_receive+0x5e8>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	1ad3      	subs	r3, r2, r3
 8011a32:	3b01      	subs	r3, #1
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	f2c0 808f 	blt.w	8011b58 <tcp_receive+0x650>
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8011aec <tcp_receive+0x5e4>)
 8011a40:	881b      	ldrh	r3, [r3, #0]
 8011a42:	4619      	mov	r1, r3
 8011a44:	4b2a      	ldr	r3, [pc, #168]	@ (8011af0 <tcp_receive+0x5e8>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	440b      	add	r3, r1
 8011a4a:	1ad3      	subs	r3, r2, r3
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f300 8082 	bgt.w	8011b58 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011a54:	4b27      	ldr	r3, [pc, #156]	@ (8011af4 <tcp_receive+0x5ec>)
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011a5e:	4b24      	ldr	r3, [pc, #144]	@ (8011af0 <tcp_receive+0x5e8>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	1ad3      	subs	r3, r2, r3
 8011a64:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011a66:	4b23      	ldr	r3, [pc, #140]	@ (8011af4 <tcp_receive+0x5ec>)
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d106      	bne.n	8011a7c <tcp_receive+0x574>
 8011a6e:	4b22      	ldr	r3, [pc, #136]	@ (8011af8 <tcp_receive+0x5f0>)
 8011a70:	f240 5294 	movw	r2, #1428	@ 0x594
 8011a74:	4921      	ldr	r1, [pc, #132]	@ (8011afc <tcp_receive+0x5f4>)
 8011a76:	4822      	ldr	r0, [pc, #136]	@ (8011b00 <tcp_receive+0x5f8>)
 8011a78:	f005 fc1c 	bl	80172b4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a7e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011a82:	4293      	cmp	r3, r2
 8011a84:	d906      	bls.n	8011a94 <tcp_receive+0x58c>
 8011a86:	4b1c      	ldr	r3, [pc, #112]	@ (8011af8 <tcp_receive+0x5f0>)
 8011a88:	f240 5295 	movw	r2, #1429	@ 0x595
 8011a8c:	491d      	ldr	r1, [pc, #116]	@ (8011b04 <tcp_receive+0x5fc>)
 8011a8e:	481c      	ldr	r0, [pc, #112]	@ (8011b00 <tcp_receive+0x5f8>)
 8011a90:	f005 fc10 	bl	80172b4 <iprintf>
      off = (u16_t)off32;
 8011a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a96:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011a9a:	4b16      	ldr	r3, [pc, #88]	@ (8011af4 <tcp_receive+0x5ec>)
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	891b      	ldrh	r3, [r3, #8]
 8011aa0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d906      	bls.n	8011ab6 <tcp_receive+0x5ae>
 8011aa8:	4b13      	ldr	r3, [pc, #76]	@ (8011af8 <tcp_receive+0x5f0>)
 8011aaa:	f240 5297 	movw	r2, #1431	@ 0x597
 8011aae:	4916      	ldr	r1, [pc, #88]	@ (8011b08 <tcp_receive+0x600>)
 8011ab0:	4813      	ldr	r0, [pc, #76]	@ (8011b00 <tcp_receive+0x5f8>)
 8011ab2:	f005 fbff 	bl	80172b4 <iprintf>
      inseg.len -= off;
 8011ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8011af4 <tcp_receive+0x5ec>)
 8011ab8:	891a      	ldrh	r2, [r3, #8]
 8011aba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011abe:	1ad3      	subs	r3, r2, r3
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8011af4 <tcp_receive+0x5ec>)
 8011ac4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8011af4 <tcp_receive+0x5ec>)
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	891a      	ldrh	r2, [r3, #8]
 8011acc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011ad0:	1ad3      	subs	r3, r2, r3
 8011ad2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8011ad4:	e02a      	b.n	8011b2c <tcp_receive+0x624>
 8011ad6:	bf00      	nop
 8011ad8:	08019c98 	.word	0x08019c98
 8011adc:	08019ca0 	.word	0x08019ca0
 8011ae0:	2002748c 	.word	0x2002748c
 8011ae4:	20027488 	.word	0x20027488
 8011ae8:	2002744c 	.word	0x2002744c
 8011aec:	2002748e 	.word	0x2002748e
 8011af0:	20027484 	.word	0x20027484
 8011af4:	20027464 	.word	0x20027464
 8011af8:	08019930 	.word	0x08019930
 8011afc:	08019ca8 	.word	0x08019ca8
 8011b00:	0801997c 	.word	0x0801997c
 8011b04:	08019cb8 	.word	0x08019cb8
 8011b08:	08019cc8 	.word	0x08019cc8
        off -= p->len;
 8011b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b0e:	895b      	ldrh	r3, [r3, #10]
 8011b10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011b14:	1ad3      	subs	r3, r2, r3
 8011b16:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b1c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011b1e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b22:	2200      	movs	r2, #0
 8011b24:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011b26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8011b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b2e:	895b      	ldrh	r3, [r3, #10]
 8011b30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011b34:	429a      	cmp	r2, r3
 8011b36:	d8e9      	bhi.n	8011b0c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011b38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011b40:	f7fc fb6e 	bl	800e220 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b48:	4a90      	ldr	r2, [pc, #576]	@ (8011d8c <tcp_receive+0x884>)
 8011b4a:	6013      	str	r3, [r2, #0]
 8011b4c:	4b90      	ldr	r3, [pc, #576]	@ (8011d90 <tcp_receive+0x888>)
 8011b4e:	68db      	ldr	r3, [r3, #12]
 8011b50:	4a8e      	ldr	r2, [pc, #568]	@ (8011d8c <tcp_receive+0x884>)
 8011b52:	6812      	ldr	r2, [r2, #0]
 8011b54:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011b56:	e00d      	b.n	8011b74 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011b58:	4b8c      	ldr	r3, [pc, #560]	@ (8011d8c <tcp_receive+0x884>)
 8011b5a:	681a      	ldr	r2, [r3, #0]
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b60:	1ad3      	subs	r3, r2, r3
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	da06      	bge.n	8011b74 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	8b5b      	ldrh	r3, [r3, #26]
 8011b6a:	f043 0302 	orr.w	r3, r3, #2
 8011b6e:	b29a      	uxth	r2, r3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011b74:	4b85      	ldr	r3, [pc, #532]	@ (8011d8c <tcp_receive+0x884>)
 8011b76:	681a      	ldr	r2, [r3, #0]
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b7c:	1ad3      	subs	r3, r2, r3
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	f2c0 8427 	blt.w	80123d2 <tcp_receive+0xeca>
 8011b84:	4b81      	ldr	r3, [pc, #516]	@ (8011d8c <tcp_receive+0x884>)
 8011b86:	681a      	ldr	r2, [r3, #0]
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b8c:	6879      	ldr	r1, [r7, #4]
 8011b8e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011b90:	440b      	add	r3, r1
 8011b92:	1ad3      	subs	r3, r2, r3
 8011b94:	3301      	adds	r3, #1
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	f300 841b 	bgt.w	80123d2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ba0:	4b7a      	ldr	r3, [pc, #488]	@ (8011d8c <tcp_receive+0x884>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	f040 8298 	bne.w	80120da <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011baa:	4b79      	ldr	r3, [pc, #484]	@ (8011d90 <tcp_receive+0x888>)
 8011bac:	891c      	ldrh	r4, [r3, #8]
 8011bae:	4b78      	ldr	r3, [pc, #480]	@ (8011d90 <tcp_receive+0x888>)
 8011bb0:	68db      	ldr	r3, [r3, #12]
 8011bb2:	899b      	ldrh	r3, [r3, #12]
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f7fa ffca 	bl	800cb50 <lwip_htons>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	b2db      	uxtb	r3, r3
 8011bc0:	f003 0303 	and.w	r3, r3, #3
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d001      	beq.n	8011bcc <tcp_receive+0x6c4>
 8011bc8:	2301      	movs	r3, #1
 8011bca:	e000      	b.n	8011bce <tcp_receive+0x6c6>
 8011bcc:	2300      	movs	r3, #0
 8011bce:	4423      	add	r3, r4
 8011bd0:	b29a      	uxth	r2, r3
 8011bd2:	4b70      	ldr	r3, [pc, #448]	@ (8011d94 <tcp_receive+0x88c>)
 8011bd4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011bda:	4b6e      	ldr	r3, [pc, #440]	@ (8011d94 <tcp_receive+0x88c>)
 8011bdc:	881b      	ldrh	r3, [r3, #0]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d274      	bcs.n	8011ccc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011be2:	4b6b      	ldr	r3, [pc, #428]	@ (8011d90 <tcp_receive+0x888>)
 8011be4:	68db      	ldr	r3, [r3, #12]
 8011be6:	899b      	ldrh	r3, [r3, #12]
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7fa ffb0 	bl	800cb50 <lwip_htons>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	b2db      	uxtb	r3, r3
 8011bf4:	f003 0301 	and.w	r3, r3, #1
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d01e      	beq.n	8011c3a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011bfc:	4b64      	ldr	r3, [pc, #400]	@ (8011d90 <tcp_receive+0x888>)
 8011bfe:	68db      	ldr	r3, [r3, #12]
 8011c00:	899b      	ldrh	r3, [r3, #12]
 8011c02:	b29b      	uxth	r3, r3
 8011c04:	b21b      	sxth	r3, r3
 8011c06:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011c0a:	b21c      	sxth	r4, r3
 8011c0c:	4b60      	ldr	r3, [pc, #384]	@ (8011d90 <tcp_receive+0x888>)
 8011c0e:	68db      	ldr	r3, [r3, #12]
 8011c10:	899b      	ldrh	r3, [r3, #12]
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7fa ff9b 	bl	800cb50 <lwip_htons>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	b2db      	uxtb	r3, r3
 8011c1e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7fa ff93 	bl	800cb50 <lwip_htons>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	b21b      	sxth	r3, r3
 8011c2e:	4323      	orrs	r3, r4
 8011c30:	b21a      	sxth	r2, r3
 8011c32:	4b57      	ldr	r3, [pc, #348]	@ (8011d90 <tcp_receive+0x888>)
 8011c34:	68db      	ldr	r3, [r3, #12]
 8011c36:	b292      	uxth	r2, r2
 8011c38:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011c3e:	4b54      	ldr	r3, [pc, #336]	@ (8011d90 <tcp_receive+0x888>)
 8011c40:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011c42:	4b53      	ldr	r3, [pc, #332]	@ (8011d90 <tcp_receive+0x888>)
 8011c44:	68db      	ldr	r3, [r3, #12]
 8011c46:	899b      	ldrh	r3, [r3, #12]
 8011c48:	b29b      	uxth	r3, r3
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f7fa ff80 	bl	800cb50 <lwip_htons>
 8011c50:	4603      	mov	r3, r0
 8011c52:	b2db      	uxtb	r3, r3
 8011c54:	f003 0302 	and.w	r3, r3, #2
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d005      	beq.n	8011c68 <tcp_receive+0x760>
            inseg.len -= 1;
 8011c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8011d90 <tcp_receive+0x888>)
 8011c5e:	891b      	ldrh	r3, [r3, #8]
 8011c60:	3b01      	subs	r3, #1
 8011c62:	b29a      	uxth	r2, r3
 8011c64:	4b4a      	ldr	r3, [pc, #296]	@ (8011d90 <tcp_receive+0x888>)
 8011c66:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011c68:	4b49      	ldr	r3, [pc, #292]	@ (8011d90 <tcp_receive+0x888>)
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	4a48      	ldr	r2, [pc, #288]	@ (8011d90 <tcp_receive+0x888>)
 8011c6e:	8912      	ldrh	r2, [r2, #8]
 8011c70:	4611      	mov	r1, r2
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7fc f9d4 	bl	800e020 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011c78:	4b45      	ldr	r3, [pc, #276]	@ (8011d90 <tcp_receive+0x888>)
 8011c7a:	891c      	ldrh	r4, [r3, #8]
 8011c7c:	4b44      	ldr	r3, [pc, #272]	@ (8011d90 <tcp_receive+0x888>)
 8011c7e:	68db      	ldr	r3, [r3, #12]
 8011c80:	899b      	ldrh	r3, [r3, #12]
 8011c82:	b29b      	uxth	r3, r3
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fa ff63 	bl	800cb50 <lwip_htons>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	b2db      	uxtb	r3, r3
 8011c8e:	f003 0303 	and.w	r3, r3, #3
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d001      	beq.n	8011c9a <tcp_receive+0x792>
 8011c96:	2301      	movs	r3, #1
 8011c98:	e000      	b.n	8011c9c <tcp_receive+0x794>
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	4423      	add	r3, r4
 8011c9e:	b29a      	uxth	r2, r3
 8011ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8011d94 <tcp_receive+0x88c>)
 8011ca2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8011d94 <tcp_receive+0x88c>)
 8011ca6:	881b      	ldrh	r3, [r3, #0]
 8011ca8:	461a      	mov	r2, r3
 8011caa:	4b38      	ldr	r3, [pc, #224]	@ (8011d8c <tcp_receive+0x884>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	441a      	add	r2, r3
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cb4:	6879      	ldr	r1, [r7, #4]
 8011cb6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011cb8:	440b      	add	r3, r1
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d006      	beq.n	8011ccc <tcp_receive+0x7c4>
 8011cbe:	4b36      	ldr	r3, [pc, #216]	@ (8011d98 <tcp_receive+0x890>)
 8011cc0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8011cc4:	4935      	ldr	r1, [pc, #212]	@ (8011d9c <tcp_receive+0x894>)
 8011cc6:	4836      	ldr	r0, [pc, #216]	@ (8011da0 <tcp_receive+0x898>)
 8011cc8:	f005 faf4 	bl	80172b4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	f000 80e6 	beq.w	8011ea2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8011d90 <tcp_receive+0x888>)
 8011cd8:	68db      	ldr	r3, [r3, #12]
 8011cda:	899b      	ldrh	r3, [r3, #12]
 8011cdc:	b29b      	uxth	r3, r3
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7fa ff36 	bl	800cb50 <lwip_htons>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	b2db      	uxtb	r3, r3
 8011ce8:	f003 0301 	and.w	r3, r3, #1
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d010      	beq.n	8011d12 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011cf0:	e00a      	b.n	8011d08 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011cf6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011cfc:	681a      	ldr	r2, [r3, #0]
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8011d02:	68f8      	ldr	r0, [r7, #12]
 8011d04:	f7fd fd93 	bl	800f82e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d1f0      	bne.n	8011cf2 <tcp_receive+0x7ea>
 8011d10:	e0c7      	b.n	8011ea2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011d18:	e051      	b.n	8011dbe <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d1c:	68db      	ldr	r3, [r3, #12]
 8011d1e:	899b      	ldrh	r3, [r3, #12]
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	4618      	mov	r0, r3
 8011d24:	f7fa ff14 	bl	800cb50 <lwip_htons>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	f003 0301 	and.w	r3, r3, #1
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d03c      	beq.n	8011dae <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011d34:	4b16      	ldr	r3, [pc, #88]	@ (8011d90 <tcp_receive+0x888>)
 8011d36:	68db      	ldr	r3, [r3, #12]
 8011d38:	899b      	ldrh	r3, [r3, #12]
 8011d3a:	b29b      	uxth	r3, r3
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7fa ff07 	bl	800cb50 <lwip_htons>
 8011d42:	4603      	mov	r3, r0
 8011d44:	b2db      	uxtb	r3, r3
 8011d46:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d12f      	bne.n	8011dae <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011d4e:	4b10      	ldr	r3, [pc, #64]	@ (8011d90 <tcp_receive+0x888>)
 8011d50:	68db      	ldr	r3, [r3, #12]
 8011d52:	899b      	ldrh	r3, [r3, #12]
 8011d54:	b29c      	uxth	r4, r3
 8011d56:	2001      	movs	r0, #1
 8011d58:	f7fa fefa 	bl	800cb50 <lwip_htons>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	461a      	mov	r2, r3
 8011d60:	4b0b      	ldr	r3, [pc, #44]	@ (8011d90 <tcp_receive+0x888>)
 8011d62:	68db      	ldr	r3, [r3, #12]
 8011d64:	4322      	orrs	r2, r4
 8011d66:	b292      	uxth	r2, r2
 8011d68:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011d6a:	4b09      	ldr	r3, [pc, #36]	@ (8011d90 <tcp_receive+0x888>)
 8011d6c:	891c      	ldrh	r4, [r3, #8]
 8011d6e:	4b08      	ldr	r3, [pc, #32]	@ (8011d90 <tcp_receive+0x888>)
 8011d70:	68db      	ldr	r3, [r3, #12]
 8011d72:	899b      	ldrh	r3, [r3, #12]
 8011d74:	b29b      	uxth	r3, r3
 8011d76:	4618      	mov	r0, r3
 8011d78:	f7fa feea 	bl	800cb50 <lwip_htons>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	b2db      	uxtb	r3, r3
 8011d80:	f003 0303 	and.w	r3, r3, #3
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d00d      	beq.n	8011da4 <tcp_receive+0x89c>
 8011d88:	2301      	movs	r3, #1
 8011d8a:	e00c      	b.n	8011da6 <tcp_receive+0x89e>
 8011d8c:	20027484 	.word	0x20027484
 8011d90:	20027464 	.word	0x20027464
 8011d94:	2002748e 	.word	0x2002748e
 8011d98:	08019930 	.word	0x08019930
 8011d9c:	08019cd8 	.word	0x08019cd8
 8011da0:	0801997c 	.word	0x0801997c
 8011da4:	2300      	movs	r3, #0
 8011da6:	4423      	add	r3, r4
 8011da8:	b29a      	uxth	r2, r3
 8011daa:	4b98      	ldr	r3, [pc, #608]	@ (801200c <tcp_receive+0xb04>)
 8011dac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011db0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011db8:	6938      	ldr	r0, [r7, #16]
 8011dba:	f7fd fd38 	bl	800f82e <tcp_seg_free>
            while (next &&
 8011dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d00e      	beq.n	8011de2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011dc4:	4b91      	ldr	r3, [pc, #580]	@ (801200c <tcp_receive+0xb04>)
 8011dc6:	881b      	ldrh	r3, [r3, #0]
 8011dc8:	461a      	mov	r2, r3
 8011dca:	4b91      	ldr	r3, [pc, #580]	@ (8012010 <tcp_receive+0xb08>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	441a      	add	r2, r3
 8011dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011dd2:	68db      	ldr	r3, [r3, #12]
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011dd8:	8909      	ldrh	r1, [r1, #8]
 8011dda:	440b      	add	r3, r1
 8011ddc:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	da9b      	bge.n	8011d1a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d059      	beq.n	8011e9c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011de8:	4b88      	ldr	r3, [pc, #544]	@ (801200c <tcp_receive+0xb04>)
 8011dea:	881b      	ldrh	r3, [r3, #0]
 8011dec:	461a      	mov	r2, r3
 8011dee:	4b88      	ldr	r3, [pc, #544]	@ (8012010 <tcp_receive+0xb08>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	441a      	add	r2, r3
 8011df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011df6:	68db      	ldr	r3, [r3, #12]
 8011df8:	685b      	ldr	r3, [r3, #4]
 8011dfa:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	dd4d      	ble.n	8011e9c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e02:	68db      	ldr	r3, [r3, #12]
 8011e04:	685b      	ldr	r3, [r3, #4]
 8011e06:	b29a      	uxth	r2, r3
 8011e08:	4b81      	ldr	r3, [pc, #516]	@ (8012010 <tcp_receive+0xb08>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	b29b      	uxth	r3, r3
 8011e0e:	1ad3      	subs	r3, r2, r3
 8011e10:	b29a      	uxth	r2, r3
 8011e12:	4b80      	ldr	r3, [pc, #512]	@ (8012014 <tcp_receive+0xb0c>)
 8011e14:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011e16:	4b7f      	ldr	r3, [pc, #508]	@ (8012014 <tcp_receive+0xb0c>)
 8011e18:	68db      	ldr	r3, [r3, #12]
 8011e1a:	899b      	ldrh	r3, [r3, #12]
 8011e1c:	b29b      	uxth	r3, r3
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f7fa fe96 	bl	800cb50 <lwip_htons>
 8011e24:	4603      	mov	r3, r0
 8011e26:	b2db      	uxtb	r3, r3
 8011e28:	f003 0302 	and.w	r3, r3, #2
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d005      	beq.n	8011e3c <tcp_receive+0x934>
                inseg.len -= 1;
 8011e30:	4b78      	ldr	r3, [pc, #480]	@ (8012014 <tcp_receive+0xb0c>)
 8011e32:	891b      	ldrh	r3, [r3, #8]
 8011e34:	3b01      	subs	r3, #1
 8011e36:	b29a      	uxth	r2, r3
 8011e38:	4b76      	ldr	r3, [pc, #472]	@ (8012014 <tcp_receive+0xb0c>)
 8011e3a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011e3c:	4b75      	ldr	r3, [pc, #468]	@ (8012014 <tcp_receive+0xb0c>)
 8011e3e:	685b      	ldr	r3, [r3, #4]
 8011e40:	4a74      	ldr	r2, [pc, #464]	@ (8012014 <tcp_receive+0xb0c>)
 8011e42:	8912      	ldrh	r2, [r2, #8]
 8011e44:	4611      	mov	r1, r2
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fc f8ea 	bl	800e020 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011e4c:	4b71      	ldr	r3, [pc, #452]	@ (8012014 <tcp_receive+0xb0c>)
 8011e4e:	891c      	ldrh	r4, [r3, #8]
 8011e50:	4b70      	ldr	r3, [pc, #448]	@ (8012014 <tcp_receive+0xb0c>)
 8011e52:	68db      	ldr	r3, [r3, #12]
 8011e54:	899b      	ldrh	r3, [r3, #12]
 8011e56:	b29b      	uxth	r3, r3
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f7fa fe79 	bl	800cb50 <lwip_htons>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	b2db      	uxtb	r3, r3
 8011e62:	f003 0303 	and.w	r3, r3, #3
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d001      	beq.n	8011e6e <tcp_receive+0x966>
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	e000      	b.n	8011e70 <tcp_receive+0x968>
 8011e6e:	2300      	movs	r3, #0
 8011e70:	4423      	add	r3, r4
 8011e72:	b29a      	uxth	r2, r3
 8011e74:	4b65      	ldr	r3, [pc, #404]	@ (801200c <tcp_receive+0xb04>)
 8011e76:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011e78:	4b64      	ldr	r3, [pc, #400]	@ (801200c <tcp_receive+0xb04>)
 8011e7a:	881b      	ldrh	r3, [r3, #0]
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	4b64      	ldr	r3, [pc, #400]	@ (8012010 <tcp_receive+0xb08>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	441a      	add	r2, r3
 8011e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e86:	68db      	ldr	r3, [r3, #12]
 8011e88:	685b      	ldr	r3, [r3, #4]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	d006      	beq.n	8011e9c <tcp_receive+0x994>
 8011e8e:	4b62      	ldr	r3, [pc, #392]	@ (8012018 <tcp_receive+0xb10>)
 8011e90:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8011e94:	4961      	ldr	r1, [pc, #388]	@ (801201c <tcp_receive+0xb14>)
 8011e96:	4862      	ldr	r0, [pc, #392]	@ (8012020 <tcp_receive+0xb18>)
 8011e98:	f005 fa0c 	bl	80172b4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011ea0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011ea2:	4b5a      	ldr	r3, [pc, #360]	@ (801200c <tcp_receive+0xb04>)
 8011ea4:	881b      	ldrh	r3, [r3, #0]
 8011ea6:	461a      	mov	r2, r3
 8011ea8:	4b59      	ldr	r3, [pc, #356]	@ (8012010 <tcp_receive+0xb08>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	441a      	add	r2, r3
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011eb6:	4b55      	ldr	r3, [pc, #340]	@ (801200c <tcp_receive+0xb04>)
 8011eb8:	881b      	ldrh	r3, [r3, #0]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d206      	bcs.n	8011ecc <tcp_receive+0x9c4>
 8011ebe:	4b56      	ldr	r3, [pc, #344]	@ (8012018 <tcp_receive+0xb10>)
 8011ec0:	f240 6207 	movw	r2, #1543	@ 0x607
 8011ec4:	4957      	ldr	r1, [pc, #348]	@ (8012024 <tcp_receive+0xb1c>)
 8011ec6:	4856      	ldr	r0, [pc, #344]	@ (8012020 <tcp_receive+0xb18>)
 8011ec8:	f005 f9f4 	bl	80172b4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011ed0:	4b4e      	ldr	r3, [pc, #312]	@ (801200c <tcp_receive+0xb04>)
 8011ed2:	881b      	ldrh	r3, [r3, #0]
 8011ed4:	1ad3      	subs	r3, r2, r3
 8011ed6:	b29a      	uxth	r2, r3
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f7fc ffc5 	bl	800ee6c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011ee2:	4b4c      	ldr	r3, [pc, #304]	@ (8012014 <tcp_receive+0xb0c>)
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	891b      	ldrh	r3, [r3, #8]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d006      	beq.n	8011efa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011eec:	4b49      	ldr	r3, [pc, #292]	@ (8012014 <tcp_receive+0xb0c>)
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	4a4d      	ldr	r2, [pc, #308]	@ (8012028 <tcp_receive+0xb20>)
 8011ef2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011ef4:	4b47      	ldr	r3, [pc, #284]	@ (8012014 <tcp_receive+0xb0c>)
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011efa:	4b46      	ldr	r3, [pc, #280]	@ (8012014 <tcp_receive+0xb0c>)
 8011efc:	68db      	ldr	r3, [r3, #12]
 8011efe:	899b      	ldrh	r3, [r3, #12]
 8011f00:	b29b      	uxth	r3, r3
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7fa fe24 	bl	800cb50 <lwip_htons>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	b2db      	uxtb	r3, r3
 8011f0c:	f003 0301 	and.w	r3, r3, #1
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	f000 80b8 	beq.w	8012086 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011f16:	4b45      	ldr	r3, [pc, #276]	@ (801202c <tcp_receive+0xb24>)
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	f043 0320 	orr.w	r3, r3, #32
 8011f1e:	b2da      	uxtb	r2, r3
 8011f20:	4b42      	ldr	r3, [pc, #264]	@ (801202c <tcp_receive+0xb24>)
 8011f22:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011f24:	e0af      	b.n	8012086 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f2a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f30:	68db      	ldr	r3, [r3, #12]
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	4a36      	ldr	r2, [pc, #216]	@ (8012010 <tcp_receive+0xb08>)
 8011f36:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	891b      	ldrh	r3, [r3, #8]
 8011f3c:	461c      	mov	r4, r3
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	68db      	ldr	r3, [r3, #12]
 8011f42:	899b      	ldrh	r3, [r3, #12]
 8011f44:	b29b      	uxth	r3, r3
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7fa fe02 	bl	800cb50 <lwip_htons>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	b2db      	uxtb	r3, r3
 8011f50:	f003 0303 	and.w	r3, r3, #3
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d001      	beq.n	8011f5c <tcp_receive+0xa54>
 8011f58:	2301      	movs	r3, #1
 8011f5a:	e000      	b.n	8011f5e <tcp_receive+0xa56>
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	191a      	adds	r2, r3, r4
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f64:	441a      	add	r2, r3
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f6e:	461c      	mov	r4, r3
 8011f70:	68bb      	ldr	r3, [r7, #8]
 8011f72:	891b      	ldrh	r3, [r3, #8]
 8011f74:	461d      	mov	r5, r3
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	68db      	ldr	r3, [r3, #12]
 8011f7a:	899b      	ldrh	r3, [r3, #12]
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fa fde6 	bl	800cb50 <lwip_htons>
 8011f84:	4603      	mov	r3, r0
 8011f86:	b2db      	uxtb	r3, r3
 8011f88:	f003 0303 	and.w	r3, r3, #3
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d001      	beq.n	8011f94 <tcp_receive+0xa8c>
 8011f90:	2301      	movs	r3, #1
 8011f92:	e000      	b.n	8011f96 <tcp_receive+0xa8e>
 8011f94:	2300      	movs	r3, #0
 8011f96:	442b      	add	r3, r5
 8011f98:	429c      	cmp	r4, r3
 8011f9a:	d206      	bcs.n	8011faa <tcp_receive+0xaa2>
 8011f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8012018 <tcp_receive+0xb10>)
 8011f9e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8011fa2:	4923      	ldr	r1, [pc, #140]	@ (8012030 <tcp_receive+0xb28>)
 8011fa4:	481e      	ldr	r0, [pc, #120]	@ (8012020 <tcp_receive+0xb18>)
 8011fa6:	f005 f985 	bl	80172b4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011faa:	68bb      	ldr	r3, [r7, #8]
 8011fac:	891b      	ldrh	r3, [r3, #8]
 8011fae:	461c      	mov	r4, r3
 8011fb0:	68bb      	ldr	r3, [r7, #8]
 8011fb2:	68db      	ldr	r3, [r3, #12]
 8011fb4:	899b      	ldrh	r3, [r3, #12]
 8011fb6:	b29b      	uxth	r3, r3
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7fa fdc9 	bl	800cb50 <lwip_htons>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	b2db      	uxtb	r3, r3
 8011fc2:	f003 0303 	and.w	r3, r3, #3
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d001      	beq.n	8011fce <tcp_receive+0xac6>
 8011fca:	2301      	movs	r3, #1
 8011fcc:	e000      	b.n	8011fd0 <tcp_receive+0xac8>
 8011fce:	2300      	movs	r3, #0
 8011fd0:	1919      	adds	r1, r3, r4
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011fd6:	b28b      	uxth	r3, r1
 8011fd8:	1ad3      	subs	r3, r2, r3
 8011fda:	b29a      	uxth	r2, r3
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f7fc ff43 	bl	800ee6c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	685b      	ldr	r3, [r3, #4]
 8011fea:	891b      	ldrh	r3, [r3, #8]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d028      	beq.n	8012042 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8012028 <tcp_receive+0xb20>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d01d      	beq.n	8012034 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8012028 <tcp_receive+0xb20>)
 8011ffa:	681a      	ldr	r2, [r3, #0]
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	685b      	ldr	r3, [r3, #4]
 8012000:	4619      	mov	r1, r3
 8012002:	4610      	mov	r0, r2
 8012004:	f7fc fa60 	bl	800e4c8 <pbuf_cat>
 8012008:	e018      	b.n	801203c <tcp_receive+0xb34>
 801200a:	bf00      	nop
 801200c:	2002748e 	.word	0x2002748e
 8012010:	20027484 	.word	0x20027484
 8012014:	20027464 	.word	0x20027464
 8012018:	08019930 	.word	0x08019930
 801201c:	08019d10 	.word	0x08019d10
 8012020:	0801997c 	.word	0x0801997c
 8012024:	08019d4c 	.word	0x08019d4c
 8012028:	20027494 	.word	0x20027494
 801202c:	20027491 	.word	0x20027491
 8012030:	08019d6c 	.word	0x08019d6c
            } else {
              recv_data = cseg->p;
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	685b      	ldr	r3, [r3, #4]
 8012038:	4a70      	ldr	r2, [pc, #448]	@ (80121fc <tcp_receive+0xcf4>)
 801203a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	2200      	movs	r2, #0
 8012040:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	68db      	ldr	r3, [r3, #12]
 8012046:	899b      	ldrh	r3, [r3, #12]
 8012048:	b29b      	uxth	r3, r3
 801204a:	4618      	mov	r0, r3
 801204c:	f7fa fd80 	bl	800cb50 <lwip_htons>
 8012050:	4603      	mov	r3, r0
 8012052:	b2db      	uxtb	r3, r3
 8012054:	f003 0301 	and.w	r3, r3, #1
 8012058:	2b00      	cmp	r3, #0
 801205a:	d00d      	beq.n	8012078 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801205c:	4b68      	ldr	r3, [pc, #416]	@ (8012200 <tcp_receive+0xcf8>)
 801205e:	781b      	ldrb	r3, [r3, #0]
 8012060:	f043 0320 	orr.w	r3, r3, #32
 8012064:	b2da      	uxtb	r2, r3
 8012066:	4b66      	ldr	r3, [pc, #408]	@ (8012200 <tcp_receive+0xcf8>)
 8012068:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	7d1b      	ldrb	r3, [r3, #20]
 801206e:	2b04      	cmp	r3, #4
 8012070:	d102      	bne.n	8012078 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2207      	movs	r2, #7
 8012076:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	681a      	ldr	r2, [r3, #0]
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8012080:	68b8      	ldr	r0, [r7, #8]
 8012082:	f7fd fbd4 	bl	800f82e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801208a:	2b00      	cmp	r3, #0
 801208c:	d008      	beq.n	80120a0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012092:	68db      	ldr	r3, [r3, #12]
 8012094:	685a      	ldr	r2, [r3, #4]
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801209a:	429a      	cmp	r2, r3
 801209c:	f43f af43 	beq.w	8011f26 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	8b5b      	ldrh	r3, [r3, #26]
 80120a4:	f003 0301 	and.w	r3, r3, #1
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d00e      	beq.n	80120ca <tcp_receive+0xbc2>
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	8b5b      	ldrh	r3, [r3, #26]
 80120b0:	f023 0301 	bic.w	r3, r3, #1
 80120b4:	b29a      	uxth	r2, r3
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	835a      	strh	r2, [r3, #26]
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	8b5b      	ldrh	r3, [r3, #26]
 80120be:	f043 0302 	orr.w	r3, r3, #2
 80120c2:	b29a      	uxth	r2, r3
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80120c8:	e187      	b.n	80123da <tcp_receive+0xed2>
        tcp_ack(pcb);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	8b5b      	ldrh	r3, [r3, #26]
 80120ce:	f043 0301 	orr.w	r3, r3, #1
 80120d2:	b29a      	uxth	r2, r3
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80120d8:	e17f      	b.n	80123da <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d106      	bne.n	80120f0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80120e2:	4848      	ldr	r0, [pc, #288]	@ (8012204 <tcp_receive+0xcfc>)
 80120e4:	f7fd fbbc 	bl	800f860 <tcp_seg_copy>
 80120e8:	4602      	mov	r2, r0
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	675a      	str	r2, [r3, #116]	@ 0x74
 80120ee:	e16c      	b.n	80123ca <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80120f0:	2300      	movs	r3, #0
 80120f2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80120f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80120fa:	e156      	b.n	80123aa <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80120fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120fe:	68db      	ldr	r3, [r3, #12]
 8012100:	685a      	ldr	r2, [r3, #4]
 8012102:	4b41      	ldr	r3, [pc, #260]	@ (8012208 <tcp_receive+0xd00>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	429a      	cmp	r2, r3
 8012108:	d11d      	bne.n	8012146 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801210a:	4b3e      	ldr	r3, [pc, #248]	@ (8012204 <tcp_receive+0xcfc>)
 801210c:	891a      	ldrh	r2, [r3, #8]
 801210e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012110:	891b      	ldrh	r3, [r3, #8]
 8012112:	429a      	cmp	r2, r3
 8012114:	f240 814e 	bls.w	80123b4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012118:	483a      	ldr	r0, [pc, #232]	@ (8012204 <tcp_receive+0xcfc>)
 801211a:	f7fd fba1 	bl	800f860 <tcp_seg_copy>
 801211e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	2b00      	cmp	r3, #0
 8012124:	f000 8148 	beq.w	80123b8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8012128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801212a:	2b00      	cmp	r3, #0
 801212c:	d003      	beq.n	8012136 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801212e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012130:	697a      	ldr	r2, [r7, #20]
 8012132:	601a      	str	r2, [r3, #0]
 8012134:	e002      	b.n	801213c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	697a      	ldr	r2, [r7, #20]
 801213a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801213c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801213e:	6978      	ldr	r0, [r7, #20]
 8012140:	f7ff f8de 	bl	8011300 <tcp_oos_insert_segment>
                }
                break;
 8012144:	e138      	b.n	80123b8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012148:	2b00      	cmp	r3, #0
 801214a:	d117      	bne.n	801217c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801214c:	4b2e      	ldr	r3, [pc, #184]	@ (8012208 <tcp_receive+0xd00>)
 801214e:	681a      	ldr	r2, [r3, #0]
 8012150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012152:	68db      	ldr	r3, [r3, #12]
 8012154:	685b      	ldr	r3, [r3, #4]
 8012156:	1ad3      	subs	r3, r2, r3
 8012158:	2b00      	cmp	r3, #0
 801215a:	da57      	bge.n	801220c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801215c:	4829      	ldr	r0, [pc, #164]	@ (8012204 <tcp_receive+0xcfc>)
 801215e:	f7fd fb7f 	bl	800f860 <tcp_seg_copy>
 8012162:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012164:	69bb      	ldr	r3, [r7, #24]
 8012166:	2b00      	cmp	r3, #0
 8012168:	f000 8128 	beq.w	80123bc <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	69ba      	ldr	r2, [r7, #24]
 8012170:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012172:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012174:	69b8      	ldr	r0, [r7, #24]
 8012176:	f7ff f8c3 	bl	8011300 <tcp_oos_insert_segment>
                  }
                  break;
 801217a:	e11f      	b.n	80123bc <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801217c:	4b22      	ldr	r3, [pc, #136]	@ (8012208 <tcp_receive+0xd00>)
 801217e:	681a      	ldr	r2, [r3, #0]
 8012180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012182:	68db      	ldr	r3, [r3, #12]
 8012184:	685b      	ldr	r3, [r3, #4]
 8012186:	1ad3      	subs	r3, r2, r3
 8012188:	3b01      	subs	r3, #1
 801218a:	2b00      	cmp	r3, #0
 801218c:	db3e      	blt.n	801220c <tcp_receive+0xd04>
 801218e:	4b1e      	ldr	r3, [pc, #120]	@ (8012208 <tcp_receive+0xd00>)
 8012190:	681a      	ldr	r2, [r3, #0]
 8012192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012194:	68db      	ldr	r3, [r3, #12]
 8012196:	685b      	ldr	r3, [r3, #4]
 8012198:	1ad3      	subs	r3, r2, r3
 801219a:	3301      	adds	r3, #1
 801219c:	2b00      	cmp	r3, #0
 801219e:	dc35      	bgt.n	801220c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80121a0:	4818      	ldr	r0, [pc, #96]	@ (8012204 <tcp_receive+0xcfc>)
 80121a2:	f7fd fb5d 	bl	800f860 <tcp_seg_copy>
 80121a6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80121a8:	69fb      	ldr	r3, [r7, #28]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	f000 8108 	beq.w	80123c0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80121b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	685b      	ldr	r3, [r3, #4]
 80121b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80121b8:	8912      	ldrh	r2, [r2, #8]
 80121ba:	441a      	add	r2, r3
 80121bc:	4b12      	ldr	r3, [pc, #72]	@ (8012208 <tcp_receive+0xd00>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	1ad3      	subs	r3, r2, r3
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	dd12      	ble.n	80121ec <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80121c6:	4b10      	ldr	r3, [pc, #64]	@ (8012208 <tcp_receive+0xd00>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	b29a      	uxth	r2, r3
 80121cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121ce:	68db      	ldr	r3, [r3, #12]
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	b29b      	uxth	r3, r3
 80121d4:	1ad3      	subs	r3, r2, r3
 80121d6:	b29a      	uxth	r2, r3
 80121d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121da:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80121dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121de:	685a      	ldr	r2, [r3, #4]
 80121e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121e2:	891b      	ldrh	r3, [r3, #8]
 80121e4:	4619      	mov	r1, r3
 80121e6:	4610      	mov	r0, r2
 80121e8:	f7fb ff1a 	bl	800e020 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80121ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121ee:	69fa      	ldr	r2, [r7, #28]
 80121f0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80121f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80121f4:	69f8      	ldr	r0, [r7, #28]
 80121f6:	f7ff f883 	bl	8011300 <tcp_oos_insert_segment>
                  }
                  break;
 80121fa:	e0e1      	b.n	80123c0 <tcp_receive+0xeb8>
 80121fc:	20027494 	.word	0x20027494
 8012200:	20027491 	.word	0x20027491
 8012204:	20027464 	.word	0x20027464
 8012208:	20027484 	.word	0x20027484
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801220c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801220e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	2b00      	cmp	r3, #0
 8012216:	f040 80c5 	bne.w	80123a4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801221a:	4b7f      	ldr	r3, [pc, #508]	@ (8012418 <tcp_receive+0xf10>)
 801221c:	681a      	ldr	r2, [r3, #0]
 801221e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	685b      	ldr	r3, [r3, #4]
 8012224:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012226:	2b00      	cmp	r3, #0
 8012228:	f340 80bc 	ble.w	80123a4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801222c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801222e:	68db      	ldr	r3, [r3, #12]
 8012230:	899b      	ldrh	r3, [r3, #12]
 8012232:	b29b      	uxth	r3, r3
 8012234:	4618      	mov	r0, r3
 8012236:	f7fa fc8b 	bl	800cb50 <lwip_htons>
 801223a:	4603      	mov	r3, r0
 801223c:	b2db      	uxtb	r3, r3
 801223e:	f003 0301 	and.w	r3, r3, #1
 8012242:	2b00      	cmp	r3, #0
 8012244:	f040 80be 	bne.w	80123c4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012248:	4874      	ldr	r0, [pc, #464]	@ (801241c <tcp_receive+0xf14>)
 801224a:	f7fd fb09 	bl	800f860 <tcp_seg_copy>
 801224e:	4602      	mov	r2, r0
 8012250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012252:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	2b00      	cmp	r3, #0
 801225a:	f000 80b5 	beq.w	80123c8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801225e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012260:	68db      	ldr	r3, [r3, #12]
 8012262:	685b      	ldr	r3, [r3, #4]
 8012264:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012266:	8912      	ldrh	r2, [r2, #8]
 8012268:	441a      	add	r2, r3
 801226a:	4b6b      	ldr	r3, [pc, #428]	@ (8012418 <tcp_receive+0xf10>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	1ad3      	subs	r3, r2, r3
 8012270:	2b00      	cmp	r3, #0
 8012272:	dd12      	ble.n	801229a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012274:	4b68      	ldr	r3, [pc, #416]	@ (8012418 <tcp_receive+0xf10>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	b29a      	uxth	r2, r3
 801227a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801227c:	68db      	ldr	r3, [r3, #12]
 801227e:	685b      	ldr	r3, [r3, #4]
 8012280:	b29b      	uxth	r3, r3
 8012282:	1ad3      	subs	r3, r2, r3
 8012284:	b29a      	uxth	r2, r3
 8012286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012288:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801228a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801228c:	685a      	ldr	r2, [r3, #4]
 801228e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012290:	891b      	ldrh	r3, [r3, #8]
 8012292:	4619      	mov	r1, r3
 8012294:	4610      	mov	r0, r2
 8012296:	f7fb fec3 	bl	800e020 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801229a:	4b61      	ldr	r3, [pc, #388]	@ (8012420 <tcp_receive+0xf18>)
 801229c:	881b      	ldrh	r3, [r3, #0]
 801229e:	461a      	mov	r2, r3
 80122a0:	4b5d      	ldr	r3, [pc, #372]	@ (8012418 <tcp_receive+0xf10>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	441a      	add	r2, r3
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122aa:	6879      	ldr	r1, [r7, #4]
 80122ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80122ae:	440b      	add	r3, r1
 80122b0:	1ad3      	subs	r3, r2, r3
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	f340 8088 	ble.w	80123c8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80122b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	68db      	ldr	r3, [r3, #12]
 80122be:	899b      	ldrh	r3, [r3, #12]
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7fa fc44 	bl	800cb50 <lwip_htons>
 80122c8:	4603      	mov	r3, r0
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	f003 0301 	and.w	r3, r3, #1
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d021      	beq.n	8012318 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80122d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	68db      	ldr	r3, [r3, #12]
 80122da:	899b      	ldrh	r3, [r3, #12]
 80122dc:	b29b      	uxth	r3, r3
 80122de:	b21b      	sxth	r3, r3
 80122e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80122e4:	b21c      	sxth	r4, r3
 80122e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	68db      	ldr	r3, [r3, #12]
 80122ec:	899b      	ldrh	r3, [r3, #12]
 80122ee:	b29b      	uxth	r3, r3
 80122f0:	4618      	mov	r0, r3
 80122f2:	f7fa fc2d 	bl	800cb50 <lwip_htons>
 80122f6:	4603      	mov	r3, r0
 80122f8:	b2db      	uxtb	r3, r3
 80122fa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80122fe:	b29b      	uxth	r3, r3
 8012300:	4618      	mov	r0, r3
 8012302:	f7fa fc25 	bl	800cb50 <lwip_htons>
 8012306:	4603      	mov	r3, r0
 8012308:	b21b      	sxth	r3, r3
 801230a:	4323      	orrs	r3, r4
 801230c:	b21a      	sxth	r2, r3
 801230e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	68db      	ldr	r3, [r3, #12]
 8012314:	b292      	uxth	r2, r2
 8012316:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801231c:	b29a      	uxth	r2, r3
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012322:	4413      	add	r3, r2
 8012324:	b299      	uxth	r1, r3
 8012326:	4b3c      	ldr	r3, [pc, #240]	@ (8012418 <tcp_receive+0xf10>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	b29a      	uxth	r2, r3
 801232c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	1a8a      	subs	r2, r1, r2
 8012332:	b292      	uxth	r2, r2
 8012334:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	685a      	ldr	r2, [r3, #4]
 801233c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	891b      	ldrh	r3, [r3, #8]
 8012342:	4619      	mov	r1, r3
 8012344:	4610      	mov	r0, r2
 8012346:	f7fb fe6b 	bl	800e020 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801234a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	891c      	ldrh	r4, [r3, #8]
 8012350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	68db      	ldr	r3, [r3, #12]
 8012356:	899b      	ldrh	r3, [r3, #12]
 8012358:	b29b      	uxth	r3, r3
 801235a:	4618      	mov	r0, r3
 801235c:	f7fa fbf8 	bl	800cb50 <lwip_htons>
 8012360:	4603      	mov	r3, r0
 8012362:	b2db      	uxtb	r3, r3
 8012364:	f003 0303 	and.w	r3, r3, #3
 8012368:	2b00      	cmp	r3, #0
 801236a:	d001      	beq.n	8012370 <tcp_receive+0xe68>
 801236c:	2301      	movs	r3, #1
 801236e:	e000      	b.n	8012372 <tcp_receive+0xe6a>
 8012370:	2300      	movs	r3, #0
 8012372:	4423      	add	r3, r4
 8012374:	b29a      	uxth	r2, r3
 8012376:	4b2a      	ldr	r3, [pc, #168]	@ (8012420 <tcp_receive+0xf18>)
 8012378:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801237a:	4b29      	ldr	r3, [pc, #164]	@ (8012420 <tcp_receive+0xf18>)
 801237c:	881b      	ldrh	r3, [r3, #0]
 801237e:	461a      	mov	r2, r3
 8012380:	4b25      	ldr	r3, [pc, #148]	@ (8012418 <tcp_receive+0xf10>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	441a      	add	r2, r3
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801238a:	6879      	ldr	r1, [r7, #4]
 801238c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801238e:	440b      	add	r3, r1
 8012390:	429a      	cmp	r2, r3
 8012392:	d019      	beq.n	80123c8 <tcp_receive+0xec0>
 8012394:	4b23      	ldr	r3, [pc, #140]	@ (8012424 <tcp_receive+0xf1c>)
 8012396:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801239a:	4923      	ldr	r1, [pc, #140]	@ (8012428 <tcp_receive+0xf20>)
 801239c:	4823      	ldr	r0, [pc, #140]	@ (801242c <tcp_receive+0xf24>)
 801239e:	f004 ff89 	bl	80172b4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80123a2:	e011      	b.n	80123c8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80123a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80123aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	f47f aea5 	bne.w	80120fc <tcp_receive+0xbf4>
 80123b2:	e00a      	b.n	80123ca <tcp_receive+0xec2>
                break;
 80123b4:	bf00      	nop
 80123b6:	e008      	b.n	80123ca <tcp_receive+0xec2>
                break;
 80123b8:	bf00      	nop
 80123ba:	e006      	b.n	80123ca <tcp_receive+0xec2>
                  break;
 80123bc:	bf00      	nop
 80123be:	e004      	b.n	80123ca <tcp_receive+0xec2>
                  break;
 80123c0:	bf00      	nop
 80123c2:	e002      	b.n	80123ca <tcp_receive+0xec2>
                  break;
 80123c4:	bf00      	nop
 80123c6:	e000      	b.n	80123ca <tcp_receive+0xec2>
                break;
 80123c8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f001 fa30 	bl	8013830 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80123d0:	e003      	b.n	80123da <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80123d2:	6878      	ldr	r0, [r7, #4]
 80123d4:	f001 fa2c 	bl	8013830 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80123d8:	e01a      	b.n	8012410 <tcp_receive+0xf08>
 80123da:	e019      	b.n	8012410 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80123dc:	4b0e      	ldr	r3, [pc, #56]	@ (8012418 <tcp_receive+0xf10>)
 80123de:	681a      	ldr	r2, [r3, #0]
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123e4:	1ad3      	subs	r3, r2, r3
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	db0a      	blt.n	8012400 <tcp_receive+0xef8>
 80123ea:	4b0b      	ldr	r3, [pc, #44]	@ (8012418 <tcp_receive+0xf10>)
 80123ec:	681a      	ldr	r2, [r3, #0]
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123f2:	6879      	ldr	r1, [r7, #4]
 80123f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80123f6:	440b      	add	r3, r1
 80123f8:	1ad3      	subs	r3, r2, r3
 80123fa:	3301      	adds	r3, #1
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	dd07      	ble.n	8012410 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	8b5b      	ldrh	r3, [r3, #26]
 8012404:	f043 0302 	orr.w	r3, r3, #2
 8012408:	b29a      	uxth	r2, r3
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801240e:	e7ff      	b.n	8012410 <tcp_receive+0xf08>
 8012410:	bf00      	nop
 8012412:	3750      	adds	r7, #80	@ 0x50
 8012414:	46bd      	mov	sp, r7
 8012416:	bdb0      	pop	{r4, r5, r7, pc}
 8012418:	20027484 	.word	0x20027484
 801241c:	20027464 	.word	0x20027464
 8012420:	2002748e 	.word	0x2002748e
 8012424:	08019930 	.word	0x08019930
 8012428:	08019cd8 	.word	0x08019cd8
 801242c:	0801997c 	.word	0x0801997c

08012430 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012430:	b480      	push	{r7}
 8012432:	b083      	sub	sp, #12
 8012434:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012436:	4b15      	ldr	r3, [pc, #84]	@ (801248c <tcp_get_next_optbyte+0x5c>)
 8012438:	881b      	ldrh	r3, [r3, #0]
 801243a:	1c5a      	adds	r2, r3, #1
 801243c:	b291      	uxth	r1, r2
 801243e:	4a13      	ldr	r2, [pc, #76]	@ (801248c <tcp_get_next_optbyte+0x5c>)
 8012440:	8011      	strh	r1, [r2, #0]
 8012442:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012444:	4b12      	ldr	r3, [pc, #72]	@ (8012490 <tcp_get_next_optbyte+0x60>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d004      	beq.n	8012456 <tcp_get_next_optbyte+0x26>
 801244c:	4b11      	ldr	r3, [pc, #68]	@ (8012494 <tcp_get_next_optbyte+0x64>)
 801244e:	881b      	ldrh	r3, [r3, #0]
 8012450:	88fa      	ldrh	r2, [r7, #6]
 8012452:	429a      	cmp	r2, r3
 8012454:	d208      	bcs.n	8012468 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012456:	4b10      	ldr	r3, [pc, #64]	@ (8012498 <tcp_get_next_optbyte+0x68>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	3314      	adds	r3, #20
 801245c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801245e:	88fb      	ldrh	r3, [r7, #6]
 8012460:	683a      	ldr	r2, [r7, #0]
 8012462:	4413      	add	r3, r2
 8012464:	781b      	ldrb	r3, [r3, #0]
 8012466:	e00b      	b.n	8012480 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012468:	88fb      	ldrh	r3, [r7, #6]
 801246a:	b2da      	uxtb	r2, r3
 801246c:	4b09      	ldr	r3, [pc, #36]	@ (8012494 <tcp_get_next_optbyte+0x64>)
 801246e:	881b      	ldrh	r3, [r3, #0]
 8012470:	b2db      	uxtb	r3, r3
 8012472:	1ad3      	subs	r3, r2, r3
 8012474:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012476:	4b06      	ldr	r3, [pc, #24]	@ (8012490 <tcp_get_next_optbyte+0x60>)
 8012478:	681a      	ldr	r2, [r3, #0]
 801247a:	797b      	ldrb	r3, [r7, #5]
 801247c:	4413      	add	r3, r2
 801247e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012480:	4618      	mov	r0, r3
 8012482:	370c      	adds	r7, #12
 8012484:	46bd      	mov	sp, r7
 8012486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248a:	4770      	bx	lr
 801248c:	20027480 	.word	0x20027480
 8012490:	2002747c 	.word	0x2002747c
 8012494:	2002747a 	.word	0x2002747a
 8012498:	20027474 	.word	0x20027474

0801249c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b084      	sub	sp, #16
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d106      	bne.n	80124b8 <tcp_parseopt+0x1c>
 80124aa:	4b32      	ldr	r3, [pc, #200]	@ (8012574 <tcp_parseopt+0xd8>)
 80124ac:	f240 727d 	movw	r2, #1917	@ 0x77d
 80124b0:	4931      	ldr	r1, [pc, #196]	@ (8012578 <tcp_parseopt+0xdc>)
 80124b2:	4832      	ldr	r0, [pc, #200]	@ (801257c <tcp_parseopt+0xe0>)
 80124b4:	f004 fefe 	bl	80172b4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80124b8:	4b31      	ldr	r3, [pc, #196]	@ (8012580 <tcp_parseopt+0xe4>)
 80124ba:	881b      	ldrh	r3, [r3, #0]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d056      	beq.n	801256e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80124c0:	4b30      	ldr	r3, [pc, #192]	@ (8012584 <tcp_parseopt+0xe8>)
 80124c2:	2200      	movs	r2, #0
 80124c4:	801a      	strh	r2, [r3, #0]
 80124c6:	e046      	b.n	8012556 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80124c8:	f7ff ffb2 	bl	8012430 <tcp_get_next_optbyte>
 80124cc:	4603      	mov	r3, r0
 80124ce:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80124d0:	7bfb      	ldrb	r3, [r7, #15]
 80124d2:	2b02      	cmp	r3, #2
 80124d4:	d006      	beq.n	80124e4 <tcp_parseopt+0x48>
 80124d6:	2b02      	cmp	r3, #2
 80124d8:	dc2a      	bgt.n	8012530 <tcp_parseopt+0x94>
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d042      	beq.n	8012564 <tcp_parseopt+0xc8>
 80124de:	2b01      	cmp	r3, #1
 80124e0:	d038      	beq.n	8012554 <tcp_parseopt+0xb8>
 80124e2:	e025      	b.n	8012530 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80124e4:	f7ff ffa4 	bl	8012430 <tcp_get_next_optbyte>
 80124e8:	4603      	mov	r3, r0
 80124ea:	2b04      	cmp	r3, #4
 80124ec:	d13c      	bne.n	8012568 <tcp_parseopt+0xcc>
 80124ee:	4b25      	ldr	r3, [pc, #148]	@ (8012584 <tcp_parseopt+0xe8>)
 80124f0:	881b      	ldrh	r3, [r3, #0]
 80124f2:	3301      	adds	r3, #1
 80124f4:	4a22      	ldr	r2, [pc, #136]	@ (8012580 <tcp_parseopt+0xe4>)
 80124f6:	8812      	ldrh	r2, [r2, #0]
 80124f8:	4293      	cmp	r3, r2
 80124fa:	da35      	bge.n	8012568 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80124fc:	f7ff ff98 	bl	8012430 <tcp_get_next_optbyte>
 8012500:	4603      	mov	r3, r0
 8012502:	021b      	lsls	r3, r3, #8
 8012504:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012506:	f7ff ff93 	bl	8012430 <tcp_get_next_optbyte>
 801250a:	4603      	mov	r3, r0
 801250c:	461a      	mov	r2, r3
 801250e:	89bb      	ldrh	r3, [r7, #12]
 8012510:	4313      	orrs	r3, r2
 8012512:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012514:	89bb      	ldrh	r3, [r7, #12]
 8012516:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801251a:	d804      	bhi.n	8012526 <tcp_parseopt+0x8a>
 801251c:	89bb      	ldrh	r3, [r7, #12]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d001      	beq.n	8012526 <tcp_parseopt+0x8a>
 8012522:	89ba      	ldrh	r2, [r7, #12]
 8012524:	e001      	b.n	801252a <tcp_parseopt+0x8e>
 8012526:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801252e:	e012      	b.n	8012556 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012530:	f7ff ff7e 	bl	8012430 <tcp_get_next_optbyte>
 8012534:	4603      	mov	r3, r0
 8012536:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012538:	7afb      	ldrb	r3, [r7, #11]
 801253a:	2b01      	cmp	r3, #1
 801253c:	d916      	bls.n	801256c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801253e:	7afb      	ldrb	r3, [r7, #11]
 8012540:	b29a      	uxth	r2, r3
 8012542:	4b10      	ldr	r3, [pc, #64]	@ (8012584 <tcp_parseopt+0xe8>)
 8012544:	881b      	ldrh	r3, [r3, #0]
 8012546:	4413      	add	r3, r2
 8012548:	b29b      	uxth	r3, r3
 801254a:	3b02      	subs	r3, #2
 801254c:	b29a      	uxth	r2, r3
 801254e:	4b0d      	ldr	r3, [pc, #52]	@ (8012584 <tcp_parseopt+0xe8>)
 8012550:	801a      	strh	r2, [r3, #0]
 8012552:	e000      	b.n	8012556 <tcp_parseopt+0xba>
          break;
 8012554:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012556:	4b0b      	ldr	r3, [pc, #44]	@ (8012584 <tcp_parseopt+0xe8>)
 8012558:	881a      	ldrh	r2, [r3, #0]
 801255a:	4b09      	ldr	r3, [pc, #36]	@ (8012580 <tcp_parseopt+0xe4>)
 801255c:	881b      	ldrh	r3, [r3, #0]
 801255e:	429a      	cmp	r2, r3
 8012560:	d3b2      	bcc.n	80124c8 <tcp_parseopt+0x2c>
 8012562:	e004      	b.n	801256e <tcp_parseopt+0xd2>
          return;
 8012564:	bf00      	nop
 8012566:	e002      	b.n	801256e <tcp_parseopt+0xd2>
            return;
 8012568:	bf00      	nop
 801256a:	e000      	b.n	801256e <tcp_parseopt+0xd2>
            return;
 801256c:	bf00      	nop
      }
    }
  }
}
 801256e:	3710      	adds	r7, #16
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}
 8012574:	08019930 	.word	0x08019930
 8012578:	08019d94 	.word	0x08019d94
 801257c:	0801997c 	.word	0x0801997c
 8012580:	20027478 	.word	0x20027478
 8012584:	20027480 	.word	0x20027480

08012588 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012588:	b480      	push	{r7}
 801258a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801258c:	4b05      	ldr	r3, [pc, #20]	@ (80125a4 <tcp_trigger_input_pcb_close+0x1c>)
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	f043 0310 	orr.w	r3, r3, #16
 8012594:	b2da      	uxtb	r2, r3
 8012596:	4b03      	ldr	r3, [pc, #12]	@ (80125a4 <tcp_trigger_input_pcb_close+0x1c>)
 8012598:	701a      	strb	r2, [r3, #0]
}
 801259a:	bf00      	nop
 801259c:	46bd      	mov	sp, r7
 801259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a2:	4770      	bx	lr
 80125a4:	20027491 	.word	0x20027491

080125a8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b084      	sub	sp, #16
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	60f8      	str	r0, [r7, #12]
 80125b0:	60b9      	str	r1, [r7, #8]
 80125b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d00a      	beq.n	80125d0 <tcp_route+0x28>
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	7a1b      	ldrb	r3, [r3, #8]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d006      	beq.n	80125d0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	7a1b      	ldrb	r3, [r3, #8]
 80125c6:	4618      	mov	r0, r3
 80125c8:	f7fb fb22 	bl	800dc10 <netif_get_by_index>
 80125cc:	4603      	mov	r3, r0
 80125ce:	e003      	b.n	80125d8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f002 ffa3 	bl	801551c <ip4_route>
 80125d6:	4603      	mov	r3, r0
  }
}
 80125d8:	4618      	mov	r0, r3
 80125da:	3710      	adds	r7, #16
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}

080125e0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80125e0:	b590      	push	{r4, r7, lr}
 80125e2:	b087      	sub	sp, #28
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	603b      	str	r3, [r7, #0]
 80125ec:	4613      	mov	r3, r2
 80125ee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d105      	bne.n	8012602 <tcp_create_segment+0x22>
 80125f6:	4b43      	ldr	r3, [pc, #268]	@ (8012704 <tcp_create_segment+0x124>)
 80125f8:	22a3      	movs	r2, #163	@ 0xa3
 80125fa:	4943      	ldr	r1, [pc, #268]	@ (8012708 <tcp_create_segment+0x128>)
 80125fc:	4843      	ldr	r0, [pc, #268]	@ (801270c <tcp_create_segment+0x12c>)
 80125fe:	f004 fe59 	bl	80172b4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d105      	bne.n	8012614 <tcp_create_segment+0x34>
 8012608:	4b3e      	ldr	r3, [pc, #248]	@ (8012704 <tcp_create_segment+0x124>)
 801260a:	22a4      	movs	r2, #164	@ 0xa4
 801260c:	4940      	ldr	r1, [pc, #256]	@ (8012710 <tcp_create_segment+0x130>)
 801260e:	483f      	ldr	r0, [pc, #252]	@ (801270c <tcp_create_segment+0x12c>)
 8012610:	f004 fe50 	bl	80172b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012614:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012618:	009b      	lsls	r3, r3, #2
 801261a:	b2db      	uxtb	r3, r3
 801261c:	f003 0304 	and.w	r3, r3, #4
 8012620:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012622:	2003      	movs	r0, #3
 8012624:	f7fa ff68 	bl	800d4f8 <memp_malloc>
 8012628:	6138      	str	r0, [r7, #16]
 801262a:	693b      	ldr	r3, [r7, #16]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d104      	bne.n	801263a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012630:	68b8      	ldr	r0, [r7, #8]
 8012632:	f7fb fe7b 	bl	800e32c <pbuf_free>
    return NULL;
 8012636:	2300      	movs	r3, #0
 8012638:	e060      	b.n	80126fc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801263a:	693b      	ldr	r3, [r7, #16]
 801263c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012640:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012642:	693b      	ldr	r3, [r7, #16]
 8012644:	2200      	movs	r2, #0
 8012646:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	68ba      	ldr	r2, [r7, #8]
 801264c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	891a      	ldrh	r2, [r3, #8]
 8012652:	7dfb      	ldrb	r3, [r7, #23]
 8012654:	b29b      	uxth	r3, r3
 8012656:	429a      	cmp	r2, r3
 8012658:	d205      	bcs.n	8012666 <tcp_create_segment+0x86>
 801265a:	4b2a      	ldr	r3, [pc, #168]	@ (8012704 <tcp_create_segment+0x124>)
 801265c:	22b0      	movs	r2, #176	@ 0xb0
 801265e:	492d      	ldr	r1, [pc, #180]	@ (8012714 <tcp_create_segment+0x134>)
 8012660:	482a      	ldr	r0, [pc, #168]	@ (801270c <tcp_create_segment+0x12c>)
 8012662:	f004 fe27 	bl	80172b4 <iprintf>
  seg->len = p->tot_len - optlen;
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	891a      	ldrh	r2, [r3, #8]
 801266a:	7dfb      	ldrb	r3, [r7, #23]
 801266c:	b29b      	uxth	r3, r3
 801266e:	1ad3      	subs	r3, r2, r3
 8012670:	b29a      	uxth	r2, r3
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012676:	2114      	movs	r1, #20
 8012678:	68b8      	ldr	r0, [r7, #8]
 801267a:	f7fb fdc1 	bl	800e200 <pbuf_add_header>
 801267e:	4603      	mov	r3, r0
 8012680:	2b00      	cmp	r3, #0
 8012682:	d004      	beq.n	801268e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012684:	6938      	ldr	r0, [r7, #16]
 8012686:	f7fd f8d2 	bl	800f82e <tcp_seg_free>
    return NULL;
 801268a:	2300      	movs	r3, #0
 801268c:	e036      	b.n	80126fc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801268e:	693b      	ldr	r3, [r7, #16]
 8012690:	685b      	ldr	r3, [r3, #4]
 8012692:	685a      	ldr	r2, [r3, #4]
 8012694:	693b      	ldr	r3, [r7, #16]
 8012696:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	8ada      	ldrh	r2, [r3, #22]
 801269c:	693b      	ldr	r3, [r7, #16]
 801269e:	68dc      	ldr	r4, [r3, #12]
 80126a0:	4610      	mov	r0, r2
 80126a2:	f7fa fa55 	bl	800cb50 <lwip_htons>
 80126a6:	4603      	mov	r3, r0
 80126a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	8b1a      	ldrh	r2, [r3, #24]
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	68dc      	ldr	r4, [r3, #12]
 80126b2:	4610      	mov	r0, r2
 80126b4:	f7fa fa4c 	bl	800cb50 <lwip_htons>
 80126b8:	4603      	mov	r3, r0
 80126ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	68dc      	ldr	r4, [r3, #12]
 80126c0:	6838      	ldr	r0, [r7, #0]
 80126c2:	f7fa fa5b 	bl	800cb7c <lwip_htonl>
 80126c6:	4603      	mov	r3, r0
 80126c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80126ca:	7dfb      	ldrb	r3, [r7, #23]
 80126cc:	089b      	lsrs	r3, r3, #2
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	3305      	adds	r3, #5
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	031b      	lsls	r3, r3, #12
 80126d6:	b29a      	uxth	r2, r3
 80126d8:	79fb      	ldrb	r3, [r7, #7]
 80126da:	b29b      	uxth	r3, r3
 80126dc:	4313      	orrs	r3, r2
 80126de:	b29a      	uxth	r2, r3
 80126e0:	693b      	ldr	r3, [r7, #16]
 80126e2:	68dc      	ldr	r4, [r3, #12]
 80126e4:	4610      	mov	r0, r2
 80126e6:	f7fa fa33 	bl	800cb50 <lwip_htons>
 80126ea:	4603      	mov	r3, r0
 80126ec:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	68db      	ldr	r3, [r3, #12]
 80126f2:	2200      	movs	r2, #0
 80126f4:	749a      	strb	r2, [r3, #18]
 80126f6:	2200      	movs	r2, #0
 80126f8:	74da      	strb	r2, [r3, #19]
  return seg;
 80126fa:	693b      	ldr	r3, [r7, #16]
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	371c      	adds	r7, #28
 8012700:	46bd      	mov	sp, r7
 8012702:	bd90      	pop	{r4, r7, pc}
 8012704:	08019db0 	.word	0x08019db0
 8012708:	08019de4 	.word	0x08019de4
 801270c:	08019e04 	.word	0x08019e04
 8012710:	08019e2c 	.word	0x08019e2c
 8012714:	08019e50 	.word	0x08019e50

08012718 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012718:	b590      	push	{r4, r7, lr}
 801271a:	b08b      	sub	sp, #44	@ 0x2c
 801271c:	af02      	add	r7, sp, #8
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	460b      	mov	r3, r1
 8012722:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012724:	2300      	movs	r3, #0
 8012726:	61fb      	str	r3, [r7, #28]
 8012728:	2300      	movs	r3, #0
 801272a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801272c:	2300      	movs	r3, #0
 801272e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d106      	bne.n	8012744 <tcp_split_unsent_seg+0x2c>
 8012736:	4b95      	ldr	r3, [pc, #596]	@ (801298c <tcp_split_unsent_seg+0x274>)
 8012738:	f240 324b 	movw	r2, #843	@ 0x34b
 801273c:	4994      	ldr	r1, [pc, #592]	@ (8012990 <tcp_split_unsent_seg+0x278>)
 801273e:	4895      	ldr	r0, [pc, #596]	@ (8012994 <tcp_split_unsent_seg+0x27c>)
 8012740:	f004 fdb8 	bl	80172b4 <iprintf>

  useg = pcb->unsent;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012748:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801274a:	697b      	ldr	r3, [r7, #20]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d102      	bne.n	8012756 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012750:	f04f 33ff 	mov.w	r3, #4294967295
 8012754:	e116      	b.n	8012984 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012756:	887b      	ldrh	r3, [r7, #2]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d109      	bne.n	8012770 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801275c:	4b8b      	ldr	r3, [pc, #556]	@ (801298c <tcp_split_unsent_seg+0x274>)
 801275e:	f240 3253 	movw	r2, #851	@ 0x353
 8012762:	498d      	ldr	r1, [pc, #564]	@ (8012998 <tcp_split_unsent_seg+0x280>)
 8012764:	488b      	ldr	r0, [pc, #556]	@ (8012994 <tcp_split_unsent_seg+0x27c>)
 8012766:	f004 fda5 	bl	80172b4 <iprintf>
    return ERR_VAL;
 801276a:	f06f 0305 	mvn.w	r3, #5
 801276e:	e109      	b.n	8012984 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012770:	697b      	ldr	r3, [r7, #20]
 8012772:	891b      	ldrh	r3, [r3, #8]
 8012774:	887a      	ldrh	r2, [r7, #2]
 8012776:	429a      	cmp	r2, r3
 8012778:	d301      	bcc.n	801277e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801277a:	2300      	movs	r3, #0
 801277c:	e102      	b.n	8012984 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012782:	887a      	ldrh	r2, [r7, #2]
 8012784:	429a      	cmp	r2, r3
 8012786:	d906      	bls.n	8012796 <tcp_split_unsent_seg+0x7e>
 8012788:	4b80      	ldr	r3, [pc, #512]	@ (801298c <tcp_split_unsent_seg+0x274>)
 801278a:	f240 325b 	movw	r2, #859	@ 0x35b
 801278e:	4983      	ldr	r1, [pc, #524]	@ (801299c <tcp_split_unsent_seg+0x284>)
 8012790:	4880      	ldr	r0, [pc, #512]	@ (8012994 <tcp_split_unsent_seg+0x27c>)
 8012792:	f004 fd8f 	bl	80172b4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	891b      	ldrh	r3, [r3, #8]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d106      	bne.n	80127ac <tcp_split_unsent_seg+0x94>
 801279e:	4b7b      	ldr	r3, [pc, #492]	@ (801298c <tcp_split_unsent_seg+0x274>)
 80127a0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80127a4:	497e      	ldr	r1, [pc, #504]	@ (80129a0 <tcp_split_unsent_seg+0x288>)
 80127a6:	487b      	ldr	r0, [pc, #492]	@ (8012994 <tcp_split_unsent_seg+0x27c>)
 80127a8:	f004 fd84 	bl	80172b4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80127ac:	697b      	ldr	r3, [r7, #20]
 80127ae:	7a9b      	ldrb	r3, [r3, #10]
 80127b0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80127b2:	7bfb      	ldrb	r3, [r7, #15]
 80127b4:	009b      	lsls	r3, r3, #2
 80127b6:	b2db      	uxtb	r3, r3
 80127b8:	f003 0304 	and.w	r3, r3, #4
 80127bc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	891a      	ldrh	r2, [r3, #8]
 80127c2:	887b      	ldrh	r3, [r7, #2]
 80127c4:	1ad3      	subs	r3, r2, r3
 80127c6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80127c8:	7bbb      	ldrb	r3, [r7, #14]
 80127ca:	b29a      	uxth	r2, r3
 80127cc:	89bb      	ldrh	r3, [r7, #12]
 80127ce:	4413      	add	r3, r2
 80127d0:	b29b      	uxth	r3, r3
 80127d2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80127d6:	4619      	mov	r1, r3
 80127d8:	2036      	movs	r0, #54	@ 0x36
 80127da:	f7fb fac3 	bl	800dd64 <pbuf_alloc>
 80127de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80127e0:	693b      	ldr	r3, [r7, #16]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	f000 80b7 	beq.w	8012956 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	685b      	ldr	r3, [r3, #4]
 80127ec:	891a      	ldrh	r2, [r3, #8]
 80127ee:	697b      	ldr	r3, [r7, #20]
 80127f0:	891b      	ldrh	r3, [r3, #8]
 80127f2:	1ad3      	subs	r3, r2, r3
 80127f4:	b29a      	uxth	r2, r3
 80127f6:	887b      	ldrh	r3, [r7, #2]
 80127f8:	4413      	add	r3, r2
 80127fa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	6858      	ldr	r0, [r3, #4]
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	685a      	ldr	r2, [r3, #4]
 8012804:	7bbb      	ldrb	r3, [r7, #14]
 8012806:	18d1      	adds	r1, r2, r3
 8012808:	897b      	ldrh	r3, [r7, #10]
 801280a:	89ba      	ldrh	r2, [r7, #12]
 801280c:	f7fb ff84 	bl	800e718 <pbuf_copy_partial>
 8012810:	4603      	mov	r3, r0
 8012812:	461a      	mov	r2, r3
 8012814:	89bb      	ldrh	r3, [r7, #12]
 8012816:	4293      	cmp	r3, r2
 8012818:	f040 809f 	bne.w	801295a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801281c:	697b      	ldr	r3, [r7, #20]
 801281e:	68db      	ldr	r3, [r3, #12]
 8012820:	899b      	ldrh	r3, [r3, #12]
 8012822:	b29b      	uxth	r3, r3
 8012824:	4618      	mov	r0, r3
 8012826:	f7fa f993 	bl	800cb50 <lwip_htons>
 801282a:	4603      	mov	r3, r0
 801282c:	b2db      	uxtb	r3, r3
 801282e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012832:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012834:	2300      	movs	r3, #0
 8012836:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012838:	7efb      	ldrb	r3, [r7, #27]
 801283a:	f003 0308 	and.w	r3, r3, #8
 801283e:	2b00      	cmp	r3, #0
 8012840:	d007      	beq.n	8012852 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012842:	7efb      	ldrb	r3, [r7, #27]
 8012844:	f023 0308 	bic.w	r3, r3, #8
 8012848:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801284a:	7ebb      	ldrb	r3, [r7, #26]
 801284c:	f043 0308 	orr.w	r3, r3, #8
 8012850:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012852:	7efb      	ldrb	r3, [r7, #27]
 8012854:	f003 0301 	and.w	r3, r3, #1
 8012858:	2b00      	cmp	r3, #0
 801285a:	d007      	beq.n	801286c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801285c:	7efb      	ldrb	r3, [r7, #27]
 801285e:	f023 0301 	bic.w	r3, r3, #1
 8012862:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012864:	7ebb      	ldrb	r3, [r7, #26]
 8012866:	f043 0301 	orr.w	r3, r3, #1
 801286a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	68db      	ldr	r3, [r3, #12]
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	4618      	mov	r0, r3
 8012874:	f7fa f982 	bl	800cb7c <lwip_htonl>
 8012878:	4602      	mov	r2, r0
 801287a:	887b      	ldrh	r3, [r7, #2]
 801287c:	18d1      	adds	r1, r2, r3
 801287e:	7eba      	ldrb	r2, [r7, #26]
 8012880:	7bfb      	ldrb	r3, [r7, #15]
 8012882:	9300      	str	r3, [sp, #0]
 8012884:	460b      	mov	r3, r1
 8012886:	6939      	ldr	r1, [r7, #16]
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f7ff fea9 	bl	80125e0 <tcp_create_segment>
 801288e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012890:	69fb      	ldr	r3, [r7, #28]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d063      	beq.n	801295e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012896:	697b      	ldr	r3, [r7, #20]
 8012898:	685b      	ldr	r3, [r3, #4]
 801289a:	4618      	mov	r0, r3
 801289c:	f7fb fdd4 	bl	800e448 <pbuf_clen>
 80128a0:	4603      	mov	r3, r0
 80128a2:	461a      	mov	r2, r3
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80128aa:	1a9b      	subs	r3, r3, r2
 80128ac:	b29a      	uxth	r2, r3
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	6858      	ldr	r0, [r3, #4]
 80128b8:	697b      	ldr	r3, [r7, #20]
 80128ba:	685b      	ldr	r3, [r3, #4]
 80128bc:	891a      	ldrh	r2, [r3, #8]
 80128be:	89bb      	ldrh	r3, [r7, #12]
 80128c0:	1ad3      	subs	r3, r2, r3
 80128c2:	b29b      	uxth	r3, r3
 80128c4:	4619      	mov	r1, r3
 80128c6:	f7fb fbab 	bl	800e020 <pbuf_realloc>
  useg->len -= remainder;
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	891a      	ldrh	r2, [r3, #8]
 80128ce:	89bb      	ldrh	r3, [r7, #12]
 80128d0:	1ad3      	subs	r3, r2, r3
 80128d2:	b29a      	uxth	r2, r3
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	68db      	ldr	r3, [r3, #12]
 80128dc:	899b      	ldrh	r3, [r3, #12]
 80128de:	b29c      	uxth	r4, r3
 80128e0:	7efb      	ldrb	r3, [r7, #27]
 80128e2:	b29b      	uxth	r3, r3
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7fa f933 	bl	800cb50 <lwip_htons>
 80128ea:	4603      	mov	r3, r0
 80128ec:	461a      	mov	r2, r3
 80128ee:	697b      	ldr	r3, [r7, #20]
 80128f0:	68db      	ldr	r3, [r3, #12]
 80128f2:	4322      	orrs	r2, r4
 80128f4:	b292      	uxth	r2, r2
 80128f6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	685b      	ldr	r3, [r3, #4]
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7fb fda3 	bl	800e448 <pbuf_clen>
 8012902:	4603      	mov	r3, r0
 8012904:	461a      	mov	r2, r3
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801290c:	4413      	add	r3, r2
 801290e:	b29a      	uxth	r2, r3
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012916:	69fb      	ldr	r3, [r7, #28]
 8012918:	685b      	ldr	r3, [r3, #4]
 801291a:	4618      	mov	r0, r3
 801291c:	f7fb fd94 	bl	800e448 <pbuf_clen>
 8012920:	4603      	mov	r3, r0
 8012922:	461a      	mov	r2, r3
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801292a:	4413      	add	r3, r2
 801292c:	b29a      	uxth	r2, r3
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	681a      	ldr	r2, [r3, #0]
 8012938:	69fb      	ldr	r3, [r7, #28]
 801293a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801293c:	697b      	ldr	r3, [r7, #20]
 801293e:	69fa      	ldr	r2, [r7, #28]
 8012940:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012942:	69fb      	ldr	r3, [r7, #28]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d103      	bne.n	8012952 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	2200      	movs	r2, #0
 801294e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012952:	2300      	movs	r3, #0
 8012954:	e016      	b.n	8012984 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012956:	bf00      	nop
 8012958:	e002      	b.n	8012960 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801295a:	bf00      	nop
 801295c:	e000      	b.n	8012960 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801295e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012960:	69fb      	ldr	r3, [r7, #28]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d006      	beq.n	8012974 <tcp_split_unsent_seg+0x25c>
 8012966:	4b09      	ldr	r3, [pc, #36]	@ (801298c <tcp_split_unsent_seg+0x274>)
 8012968:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801296c:	490d      	ldr	r1, [pc, #52]	@ (80129a4 <tcp_split_unsent_seg+0x28c>)
 801296e:	4809      	ldr	r0, [pc, #36]	@ (8012994 <tcp_split_unsent_seg+0x27c>)
 8012970:	f004 fca0 	bl	80172b4 <iprintf>
  if (p != NULL) {
 8012974:	693b      	ldr	r3, [r7, #16]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d002      	beq.n	8012980 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801297a:	6938      	ldr	r0, [r7, #16]
 801297c:	f7fb fcd6 	bl	800e32c <pbuf_free>
  }

  return ERR_MEM;
 8012980:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012984:	4618      	mov	r0, r3
 8012986:	3724      	adds	r7, #36	@ 0x24
 8012988:	46bd      	mov	sp, r7
 801298a:	bd90      	pop	{r4, r7, pc}
 801298c:	08019db0 	.word	0x08019db0
 8012990:	0801a144 	.word	0x0801a144
 8012994:	08019e04 	.word	0x08019e04
 8012998:	0801a168 	.word	0x0801a168
 801299c:	0801a18c 	.word	0x0801a18c
 80129a0:	0801a19c 	.word	0x0801a19c
 80129a4:	0801a1ac 	.word	0x0801a1ac

080129a8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80129a8:	b590      	push	{r4, r7, lr}
 80129aa:	b085      	sub	sp, #20
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d106      	bne.n	80129c4 <tcp_send_fin+0x1c>
 80129b6:	4b21      	ldr	r3, [pc, #132]	@ (8012a3c <tcp_send_fin+0x94>)
 80129b8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80129bc:	4920      	ldr	r1, [pc, #128]	@ (8012a40 <tcp_send_fin+0x98>)
 80129be:	4821      	ldr	r0, [pc, #132]	@ (8012a44 <tcp_send_fin+0x9c>)
 80129c0:	f004 fc78 	bl	80172b4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d02e      	beq.n	8012a2a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80129d0:	60fb      	str	r3, [r7, #12]
 80129d2:	e002      	b.n	80129da <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d1f8      	bne.n	80129d4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	68db      	ldr	r3, [r3, #12]
 80129e6:	899b      	ldrh	r3, [r3, #12]
 80129e8:	b29b      	uxth	r3, r3
 80129ea:	4618      	mov	r0, r3
 80129ec:	f7fa f8b0 	bl	800cb50 <lwip_htons>
 80129f0:	4603      	mov	r3, r0
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	f003 0307 	and.w	r3, r3, #7
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d116      	bne.n	8012a2a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	68db      	ldr	r3, [r3, #12]
 8012a00:	899b      	ldrh	r3, [r3, #12]
 8012a02:	b29c      	uxth	r4, r3
 8012a04:	2001      	movs	r0, #1
 8012a06:	f7fa f8a3 	bl	800cb50 <lwip_htons>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	461a      	mov	r2, r3
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	68db      	ldr	r3, [r3, #12]
 8012a12:	4322      	orrs	r2, r4
 8012a14:	b292      	uxth	r2, r2
 8012a16:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	8b5b      	ldrh	r3, [r3, #26]
 8012a1c:	f043 0320 	orr.w	r3, r3, #32
 8012a20:	b29a      	uxth	r2, r3
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012a26:	2300      	movs	r3, #0
 8012a28:	e004      	b.n	8012a34 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012a2a:	2101      	movs	r1, #1
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f000 f80b 	bl	8012a48 <tcp_enqueue_flags>
 8012a32:	4603      	mov	r3, r0
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	3714      	adds	r7, #20
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd90      	pop	{r4, r7, pc}
 8012a3c:	08019db0 	.word	0x08019db0
 8012a40:	0801a1b8 	.word	0x0801a1b8
 8012a44:	08019e04 	.word	0x08019e04

08012a48 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b08a      	sub	sp, #40	@ 0x28
 8012a4c:	af02      	add	r7, sp, #8
 8012a4e:	6078      	str	r0, [r7, #4]
 8012a50:	460b      	mov	r3, r1
 8012a52:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012a54:	2300      	movs	r3, #0
 8012a56:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012a58:	2300      	movs	r3, #0
 8012a5a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012a5c:	78fb      	ldrb	r3, [r7, #3]
 8012a5e:	f003 0303 	and.w	r3, r3, #3
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d106      	bne.n	8012a74 <tcp_enqueue_flags+0x2c>
 8012a66:	4b67      	ldr	r3, [pc, #412]	@ (8012c04 <tcp_enqueue_flags+0x1bc>)
 8012a68:	f240 4211 	movw	r2, #1041	@ 0x411
 8012a6c:	4966      	ldr	r1, [pc, #408]	@ (8012c08 <tcp_enqueue_flags+0x1c0>)
 8012a6e:	4867      	ldr	r0, [pc, #412]	@ (8012c0c <tcp_enqueue_flags+0x1c4>)
 8012a70:	f004 fc20 	bl	80172b4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d106      	bne.n	8012a88 <tcp_enqueue_flags+0x40>
 8012a7a:	4b62      	ldr	r3, [pc, #392]	@ (8012c04 <tcp_enqueue_flags+0x1bc>)
 8012a7c:	f240 4213 	movw	r2, #1043	@ 0x413
 8012a80:	4963      	ldr	r1, [pc, #396]	@ (8012c10 <tcp_enqueue_flags+0x1c8>)
 8012a82:	4862      	ldr	r0, [pc, #392]	@ (8012c0c <tcp_enqueue_flags+0x1c4>)
 8012a84:	f004 fc16 	bl	80172b4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012a88:	78fb      	ldrb	r3, [r7, #3]
 8012a8a:	f003 0302 	and.w	r3, r3, #2
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d001      	beq.n	8012a96 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012a92:	2301      	movs	r3, #1
 8012a94:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012a96:	7ffb      	ldrb	r3, [r7, #31]
 8012a98:	009b      	lsls	r3, r3, #2
 8012a9a:	b2db      	uxtb	r3, r3
 8012a9c:	f003 0304 	and.w	r3, r3, #4
 8012aa0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012aa2:	7dfb      	ldrb	r3, [r7, #23]
 8012aa4:	b29b      	uxth	r3, r3
 8012aa6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012aaa:	4619      	mov	r1, r3
 8012aac:	2036      	movs	r0, #54	@ 0x36
 8012aae:	f7fb f959 	bl	800dd64 <pbuf_alloc>
 8012ab2:	6138      	str	r0, [r7, #16]
 8012ab4:	693b      	ldr	r3, [r7, #16]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d109      	bne.n	8012ace <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	8b5b      	ldrh	r3, [r3, #26]
 8012abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ac2:	b29a      	uxth	r2, r3
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8012acc:	e095      	b.n	8012bfa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012ace:	693b      	ldr	r3, [r7, #16]
 8012ad0:	895a      	ldrh	r2, [r3, #10]
 8012ad2:	7dfb      	ldrb	r3, [r7, #23]
 8012ad4:	b29b      	uxth	r3, r3
 8012ad6:	429a      	cmp	r2, r3
 8012ad8:	d206      	bcs.n	8012ae8 <tcp_enqueue_flags+0xa0>
 8012ada:	4b4a      	ldr	r3, [pc, #296]	@ (8012c04 <tcp_enqueue_flags+0x1bc>)
 8012adc:	f240 4239 	movw	r2, #1081	@ 0x439
 8012ae0:	494c      	ldr	r1, [pc, #304]	@ (8012c14 <tcp_enqueue_flags+0x1cc>)
 8012ae2:	484a      	ldr	r0, [pc, #296]	@ (8012c0c <tcp_enqueue_flags+0x1c4>)
 8012ae4:	f004 fbe6 	bl	80172b4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8012aec:	78fa      	ldrb	r2, [r7, #3]
 8012aee:	7ffb      	ldrb	r3, [r7, #31]
 8012af0:	9300      	str	r3, [sp, #0]
 8012af2:	460b      	mov	r3, r1
 8012af4:	6939      	ldr	r1, [r7, #16]
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f7ff fd72 	bl	80125e0 <tcp_create_segment>
 8012afc:	60f8      	str	r0, [r7, #12]
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d109      	bne.n	8012b18 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	8b5b      	ldrh	r3, [r3, #26]
 8012b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b0c:	b29a      	uxth	r2, r3
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012b12:	f04f 33ff 	mov.w	r3, #4294967295
 8012b16:	e070      	b.n	8012bfa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	68db      	ldr	r3, [r3, #12]
 8012b1c:	f003 0303 	and.w	r3, r3, #3
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d006      	beq.n	8012b32 <tcp_enqueue_flags+0xea>
 8012b24:	4b37      	ldr	r3, [pc, #220]	@ (8012c04 <tcp_enqueue_flags+0x1bc>)
 8012b26:	f240 4242 	movw	r2, #1090	@ 0x442
 8012b2a:	493b      	ldr	r1, [pc, #236]	@ (8012c18 <tcp_enqueue_flags+0x1d0>)
 8012b2c:	4837      	ldr	r0, [pc, #220]	@ (8012c0c <tcp_enqueue_flags+0x1c4>)
 8012b2e:	f004 fbc1 	bl	80172b4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	891b      	ldrh	r3, [r3, #8]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d006      	beq.n	8012b48 <tcp_enqueue_flags+0x100>
 8012b3a:	4b32      	ldr	r3, [pc, #200]	@ (8012c04 <tcp_enqueue_flags+0x1bc>)
 8012b3c:	f240 4243 	movw	r2, #1091	@ 0x443
 8012b40:	4936      	ldr	r1, [pc, #216]	@ (8012c1c <tcp_enqueue_flags+0x1d4>)
 8012b42:	4832      	ldr	r0, [pc, #200]	@ (8012c0c <tcp_enqueue_flags+0x1c4>)
 8012b44:	f004 fbb6 	bl	80172b4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d103      	bne.n	8012b58 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	68fa      	ldr	r2, [r7, #12]
 8012b54:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012b56:	e00d      	b.n	8012b74 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b5c:	61bb      	str	r3, [r7, #24]
 8012b5e:	e002      	b.n	8012b66 <tcp_enqueue_flags+0x11e>
 8012b60:	69bb      	ldr	r3, [r7, #24]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	61bb      	str	r3, [r7, #24]
 8012b66:	69bb      	ldr	r3, [r7, #24]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d1f8      	bne.n	8012b60 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012b6e:	69bb      	ldr	r3, [r7, #24]
 8012b70:	68fa      	ldr	r2, [r7, #12]
 8012b72:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2200      	movs	r2, #0
 8012b78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012b7c:	78fb      	ldrb	r3, [r7, #3]
 8012b7e:	f003 0302 	and.w	r3, r3, #2
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d104      	bne.n	8012b90 <tcp_enqueue_flags+0x148>
 8012b86:	78fb      	ldrb	r3, [r7, #3]
 8012b88:	f003 0301 	and.w	r3, r3, #1
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d004      	beq.n	8012b9a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012b94:	1c5a      	adds	r2, r3, #1
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012b9a:	78fb      	ldrb	r3, [r7, #3]
 8012b9c:	f003 0301 	and.w	r3, r3, #1
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d006      	beq.n	8012bb2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	8b5b      	ldrh	r3, [r3, #26]
 8012ba8:	f043 0320 	orr.w	r3, r3, #32
 8012bac:	b29a      	uxth	r2, r3
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7fb fc46 	bl	800e448 <pbuf_clen>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	461a      	mov	r2, r3
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012bc6:	4413      	add	r3, r2
 8012bc8:	b29a      	uxth	r2, r3
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d00e      	beq.n	8012bf8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d10a      	bne.n	8012bf8 <tcp_enqueue_flags+0x1b0>
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d106      	bne.n	8012bf8 <tcp_enqueue_flags+0x1b0>
 8012bea:	4b06      	ldr	r3, [pc, #24]	@ (8012c04 <tcp_enqueue_flags+0x1bc>)
 8012bec:	f240 4265 	movw	r2, #1125	@ 0x465
 8012bf0:	490b      	ldr	r1, [pc, #44]	@ (8012c20 <tcp_enqueue_flags+0x1d8>)
 8012bf2:	4806      	ldr	r0, [pc, #24]	@ (8012c0c <tcp_enqueue_flags+0x1c4>)
 8012bf4:	f004 fb5e 	bl	80172b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012bf8:	2300      	movs	r3, #0
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3720      	adds	r7, #32
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	08019db0 	.word	0x08019db0
 8012c08:	0801a1d4 	.word	0x0801a1d4
 8012c0c:	08019e04 	.word	0x08019e04
 8012c10:	0801a22c 	.word	0x0801a22c
 8012c14:	0801a24c 	.word	0x0801a24c
 8012c18:	0801a288 	.word	0x0801a288
 8012c1c:	0801a2a0 	.word	0x0801a2a0
 8012c20:	0801a2cc 	.word	0x0801a2cc

08012c24 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012c24:	b5b0      	push	{r4, r5, r7, lr}
 8012c26:	b08a      	sub	sp, #40	@ 0x28
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d106      	bne.n	8012c40 <tcp_output+0x1c>
 8012c32:	4b8a      	ldr	r3, [pc, #552]	@ (8012e5c <tcp_output+0x238>)
 8012c34:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012c38:	4989      	ldr	r1, [pc, #548]	@ (8012e60 <tcp_output+0x23c>)
 8012c3a:	488a      	ldr	r0, [pc, #552]	@ (8012e64 <tcp_output+0x240>)
 8012c3c:	f004 fb3a 	bl	80172b4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	7d1b      	ldrb	r3, [r3, #20]
 8012c44:	2b01      	cmp	r3, #1
 8012c46:	d106      	bne.n	8012c56 <tcp_output+0x32>
 8012c48:	4b84      	ldr	r3, [pc, #528]	@ (8012e5c <tcp_output+0x238>)
 8012c4a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012c4e:	4986      	ldr	r1, [pc, #536]	@ (8012e68 <tcp_output+0x244>)
 8012c50:	4884      	ldr	r0, [pc, #528]	@ (8012e64 <tcp_output+0x240>)
 8012c52:	f004 fb2f 	bl	80172b4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012c56:	4b85      	ldr	r3, [pc, #532]	@ (8012e6c <tcp_output+0x248>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	687a      	ldr	r2, [r7, #4]
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	d101      	bne.n	8012c64 <tcp_output+0x40>
    return ERR_OK;
 8012c60:	2300      	movs	r3, #0
 8012c62:	e1ce      	b.n	8013002 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012c70:	4293      	cmp	r3, r2
 8012c72:	bf28      	it	cs
 8012c74:	4613      	movcs	r3, r2
 8012c76:	b29b      	uxth	r3, r3
 8012c78:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c7e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d10b      	bne.n	8012c9e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	8b5b      	ldrh	r3, [r3, #26]
 8012c8a:	f003 0302 	and.w	r3, r3, #2
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	f000 81aa 	beq.w	8012fe8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f000 fdcb 	bl	8013830 <tcp_send_empty_ack>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	e1b1      	b.n	8013002 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012c9e:	6879      	ldr	r1, [r7, #4]
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	3304      	adds	r3, #4
 8012ca4:	461a      	mov	r2, r3
 8012ca6:	6878      	ldr	r0, [r7, #4]
 8012ca8:	f7ff fc7e 	bl	80125a8 <tcp_route>
 8012cac:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012cae:	697b      	ldr	r3, [r7, #20]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d102      	bne.n	8012cba <tcp_output+0x96>
    return ERR_RTE;
 8012cb4:	f06f 0303 	mvn.w	r3, #3
 8012cb8:	e1a3      	b.n	8013002 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d003      	beq.n	8012cc8 <tcp_output+0xa4>
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d111      	bne.n	8012cec <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d002      	beq.n	8012cd4 <tcp_output+0xb0>
 8012cce:	697b      	ldr	r3, [r7, #20]
 8012cd0:	3304      	adds	r3, #4
 8012cd2:	e000      	b.n	8012cd6 <tcp_output+0xb2>
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d102      	bne.n	8012ce4 <tcp_output+0xc0>
      return ERR_RTE;
 8012cde:	f06f 0303 	mvn.w	r3, #3
 8012ce2:	e18e      	b.n	8013002 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012ce4:	693b      	ldr	r3, [r7, #16]
 8012ce6:	681a      	ldr	r2, [r3, #0]
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cee:	68db      	ldr	r3, [r3, #12]
 8012cf0:	685b      	ldr	r3, [r3, #4]
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f7f9 ff42 	bl	800cb7c <lwip_htonl>
 8012cf8:	4602      	mov	r2, r0
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012cfe:	1ad3      	subs	r3, r2, r3
 8012d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d02:	8912      	ldrh	r2, [r2, #8]
 8012d04:	4413      	add	r3, r2
 8012d06:	69ba      	ldr	r2, [r7, #24]
 8012d08:	429a      	cmp	r2, r3
 8012d0a:	d227      	bcs.n	8012d5c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012d12:	461a      	mov	r2, r3
 8012d14:	69bb      	ldr	r3, [r7, #24]
 8012d16:	4293      	cmp	r3, r2
 8012d18:	d114      	bne.n	8012d44 <tcp_output+0x120>
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d110      	bne.n	8012d44 <tcp_output+0x120>
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d10b      	bne.n	8012d44 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2201      	movs	r2, #1
 8012d38:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2200      	movs	r2, #0
 8012d40:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	8b5b      	ldrh	r3, [r3, #26]
 8012d48:	f003 0302 	and.w	r3, r3, #2
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	f000 814d 	beq.w	8012fec <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f000 fd6c 	bl	8013830 <tcp_send_empty_ack>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	e152      	b.n	8013002 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2200      	movs	r2, #0
 8012d60:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d68:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012d6a:	6a3b      	ldr	r3, [r7, #32]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	f000 811c 	beq.w	8012faa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012d72:	e002      	b.n	8012d7a <tcp_output+0x156>
 8012d74:	6a3b      	ldr	r3, [r7, #32]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	623b      	str	r3, [r7, #32]
 8012d7a:	6a3b      	ldr	r3, [r7, #32]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d1f8      	bne.n	8012d74 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012d82:	e112      	b.n	8012faa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d86:	68db      	ldr	r3, [r3, #12]
 8012d88:	899b      	ldrh	r3, [r3, #12]
 8012d8a:	b29b      	uxth	r3, r3
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f7f9 fedf 	bl	800cb50 <lwip_htons>
 8012d92:	4603      	mov	r3, r0
 8012d94:	b2db      	uxtb	r3, r3
 8012d96:	f003 0304 	and.w	r3, r3, #4
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d006      	beq.n	8012dac <tcp_output+0x188>
 8012d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8012e5c <tcp_output+0x238>)
 8012da0:	f240 5236 	movw	r2, #1334	@ 0x536
 8012da4:	4932      	ldr	r1, [pc, #200]	@ (8012e70 <tcp_output+0x24c>)
 8012da6:	482f      	ldr	r0, [pc, #188]	@ (8012e64 <tcp_output+0x240>)
 8012da8:	f004 fa84 	bl	80172b4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d01f      	beq.n	8012df4 <tcp_output+0x1d0>
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	8b5b      	ldrh	r3, [r3, #26]
 8012db8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d119      	bne.n	8012df4 <tcp_output+0x1d0>
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d00b      	beq.n	8012de0 <tcp_output+0x1bc>
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d110      	bne.n	8012df4 <tcp_output+0x1d0>
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012dd6:	891a      	ldrh	r2, [r3, #8]
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d209      	bcs.n	8012df4 <tcp_output+0x1d0>
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d004      	beq.n	8012df4 <tcp_output+0x1d0>
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012df0:	2b08      	cmp	r3, #8
 8012df2:	d901      	bls.n	8012df8 <tcp_output+0x1d4>
 8012df4:	2301      	movs	r3, #1
 8012df6:	e000      	b.n	8012dfa <tcp_output+0x1d6>
 8012df8:	2300      	movs	r3, #0
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d106      	bne.n	8012e0c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	8b5b      	ldrh	r3, [r3, #26]
 8012e02:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	f000 80e4 	beq.w	8012fd4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	7d1b      	ldrb	r3, [r3, #20]
 8012e10:	2b02      	cmp	r3, #2
 8012e12:	d00d      	beq.n	8012e30 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e16:	68db      	ldr	r3, [r3, #12]
 8012e18:	899b      	ldrh	r3, [r3, #12]
 8012e1a:	b29c      	uxth	r4, r3
 8012e1c:	2010      	movs	r0, #16
 8012e1e:	f7f9 fe97 	bl	800cb50 <lwip_htons>
 8012e22:	4603      	mov	r3, r0
 8012e24:	461a      	mov	r2, r3
 8012e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e28:	68db      	ldr	r3, [r3, #12]
 8012e2a:	4322      	orrs	r2, r4
 8012e2c:	b292      	uxth	r2, r2
 8012e2e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012e30:	697a      	ldr	r2, [r7, #20]
 8012e32:	6879      	ldr	r1, [r7, #4]
 8012e34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012e36:	f000 f909 	bl	801304c <tcp_output_segment>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d016      	beq.n	8012e74 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	8b5b      	ldrh	r3, [r3, #26]
 8012e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012e4e:	b29a      	uxth	r2, r3
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	835a      	strh	r2, [r3, #26]
      return err;
 8012e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e58:	e0d3      	b.n	8013002 <tcp_output+0x3de>
 8012e5a:	bf00      	nop
 8012e5c:	08019db0 	.word	0x08019db0
 8012e60:	0801a2f4 	.word	0x0801a2f4
 8012e64:	08019e04 	.word	0x08019e04
 8012e68:	0801a30c 	.word	0x0801a30c
 8012e6c:	20027498 	.word	0x20027498
 8012e70:	0801a334 	.word	0x0801a334
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e76:	681a      	ldr	r2, [r3, #0]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	7d1b      	ldrb	r3, [r3, #20]
 8012e80:	2b02      	cmp	r3, #2
 8012e82:	d006      	beq.n	8012e92 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	8b5b      	ldrh	r3, [r3, #26]
 8012e88:	f023 0303 	bic.w	r3, r3, #3
 8012e8c:	b29a      	uxth	r2, r3
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e94:	68db      	ldr	r3, [r3, #12]
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f7f9 fe6f 	bl	800cb7c <lwip_htonl>
 8012e9e:	4604      	mov	r4, r0
 8012ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ea2:	891b      	ldrh	r3, [r3, #8]
 8012ea4:	461d      	mov	r5, r3
 8012ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ea8:	68db      	ldr	r3, [r3, #12]
 8012eaa:	899b      	ldrh	r3, [r3, #12]
 8012eac:	b29b      	uxth	r3, r3
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7f9 fe4e 	bl	800cb50 <lwip_htons>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	b2db      	uxtb	r3, r3
 8012eb8:	f003 0303 	and.w	r3, r3, #3
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d001      	beq.n	8012ec4 <tcp_output+0x2a0>
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	e000      	b.n	8012ec6 <tcp_output+0x2a2>
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	442b      	add	r3, r5
 8012ec8:	4423      	add	r3, r4
 8012eca:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	1ad3      	subs	r3, r2, r3
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	da02      	bge.n	8012ede <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	68ba      	ldr	r2, [r7, #8]
 8012edc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ee0:	891b      	ldrh	r3, [r3, #8]
 8012ee2:	461c      	mov	r4, r3
 8012ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ee6:	68db      	ldr	r3, [r3, #12]
 8012ee8:	899b      	ldrh	r3, [r3, #12]
 8012eea:	b29b      	uxth	r3, r3
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7f9 fe2f 	bl	800cb50 <lwip_htons>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	b2db      	uxtb	r3, r3
 8012ef6:	f003 0303 	and.w	r3, r3, #3
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d001      	beq.n	8012f02 <tcp_output+0x2de>
 8012efe:	2301      	movs	r3, #1
 8012f00:	e000      	b.n	8012f04 <tcp_output+0x2e0>
 8012f02:	2300      	movs	r3, #0
 8012f04:	4423      	add	r3, r4
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d049      	beq.n	8012f9e <tcp_output+0x37a>
      seg->next = NULL;
 8012f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d105      	bne.n	8012f24 <tcp_output+0x300>
        pcb->unacked = seg;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012f1c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8012f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f20:	623b      	str	r3, [r7, #32]
 8012f22:	e03f      	b.n	8012fa4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f26:	68db      	ldr	r3, [r3, #12]
 8012f28:	685b      	ldr	r3, [r3, #4]
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7f9 fe26 	bl	800cb7c <lwip_htonl>
 8012f30:	4604      	mov	r4, r0
 8012f32:	6a3b      	ldr	r3, [r7, #32]
 8012f34:	68db      	ldr	r3, [r3, #12]
 8012f36:	685b      	ldr	r3, [r3, #4]
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f7f9 fe1f 	bl	800cb7c <lwip_htonl>
 8012f3e:	4603      	mov	r3, r0
 8012f40:	1ae3      	subs	r3, r4, r3
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	da24      	bge.n	8012f90 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	3370      	adds	r3, #112	@ 0x70
 8012f4a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012f4c:	e002      	b.n	8012f54 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012f4e:	69fb      	ldr	r3, [r7, #28]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012f54:	69fb      	ldr	r3, [r7, #28]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d011      	beq.n	8012f80 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012f5c:	69fb      	ldr	r3, [r7, #28]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	68db      	ldr	r3, [r3, #12]
 8012f62:	685b      	ldr	r3, [r3, #4]
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7f9 fe09 	bl	800cb7c <lwip_htonl>
 8012f6a:	4604      	mov	r4, r0
 8012f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f6e:	68db      	ldr	r3, [r3, #12]
 8012f70:	685b      	ldr	r3, [r3, #4]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7f9 fe02 	bl	800cb7c <lwip_htonl>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	dbe6      	blt.n	8012f4e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012f80:	69fb      	ldr	r3, [r7, #28]
 8012f82:	681a      	ldr	r2, [r3, #0]
 8012f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f86:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012f88:	69fb      	ldr	r3, [r7, #28]
 8012f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012f8c:	601a      	str	r2, [r3, #0]
 8012f8e:	e009      	b.n	8012fa4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012f90:	6a3b      	ldr	r3, [r7, #32]
 8012f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012f94:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012f96:	6a3b      	ldr	r3, [r7, #32]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	623b      	str	r3, [r7, #32]
 8012f9c:	e002      	b.n	8012fa4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012f9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012fa0:	f7fc fc45 	bl	800f82e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d012      	beq.n	8012fd6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fb2:	68db      	ldr	r3, [r3, #12]
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7f9 fde0 	bl	800cb7c <lwip_htonl>
 8012fbc:	4602      	mov	r2, r0
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012fc2:	1ad3      	subs	r3, r2, r3
 8012fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012fc6:	8912      	ldrh	r2, [r2, #8]
 8012fc8:	4413      	add	r3, r2
  while (seg != NULL &&
 8012fca:	69ba      	ldr	r2, [r7, #24]
 8012fcc:	429a      	cmp	r2, r3
 8012fce:	f4bf aed9 	bcs.w	8012d84 <tcp_output+0x160>
 8012fd2:	e000      	b.n	8012fd6 <tcp_output+0x3b2>
      break;
 8012fd4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d108      	bne.n	8012ff0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012fe6:	e004      	b.n	8012ff2 <tcp_output+0x3ce>
    goto output_done;
 8012fe8:	bf00      	nop
 8012fea:	e002      	b.n	8012ff2 <tcp_output+0x3ce>
    goto output_done;
 8012fec:	bf00      	nop
 8012fee:	e000      	b.n	8012ff2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012ff0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	8b5b      	ldrh	r3, [r3, #26]
 8012ff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012ffa:	b29a      	uxth	r2, r3
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013000:	2300      	movs	r3, #0
}
 8013002:	4618      	mov	r0, r3
 8013004:	3728      	adds	r7, #40	@ 0x28
 8013006:	46bd      	mov	sp, r7
 8013008:	bdb0      	pop	{r4, r5, r7, pc}
 801300a:	bf00      	nop

0801300c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b082      	sub	sp, #8
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d106      	bne.n	8013028 <tcp_output_segment_busy+0x1c>
 801301a:	4b09      	ldr	r3, [pc, #36]	@ (8013040 <tcp_output_segment_busy+0x34>)
 801301c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8013020:	4908      	ldr	r1, [pc, #32]	@ (8013044 <tcp_output_segment_busy+0x38>)
 8013022:	4809      	ldr	r0, [pc, #36]	@ (8013048 <tcp_output_segment_busy+0x3c>)
 8013024:	f004 f946 	bl	80172b4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	685b      	ldr	r3, [r3, #4]
 801302c:	7b9b      	ldrb	r3, [r3, #14]
 801302e:	2b01      	cmp	r3, #1
 8013030:	d001      	beq.n	8013036 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013032:	2301      	movs	r3, #1
 8013034:	e000      	b.n	8013038 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013036:	2300      	movs	r3, #0
}
 8013038:	4618      	mov	r0, r3
 801303a:	3708      	adds	r7, #8
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}
 8013040:	08019db0 	.word	0x08019db0
 8013044:	0801a34c 	.word	0x0801a34c
 8013048:	08019e04 	.word	0x08019e04

0801304c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801304c:	b5b0      	push	{r4, r5, r7, lr}
 801304e:	b08c      	sub	sp, #48	@ 0x30
 8013050:	af04      	add	r7, sp, #16
 8013052:	60f8      	str	r0, [r7, #12]
 8013054:	60b9      	str	r1, [r7, #8]
 8013056:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d106      	bne.n	801306c <tcp_output_segment+0x20>
 801305e:	4b64      	ldr	r3, [pc, #400]	@ (80131f0 <tcp_output_segment+0x1a4>)
 8013060:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8013064:	4963      	ldr	r1, [pc, #396]	@ (80131f4 <tcp_output_segment+0x1a8>)
 8013066:	4864      	ldr	r0, [pc, #400]	@ (80131f8 <tcp_output_segment+0x1ac>)
 8013068:	f004 f924 	bl	80172b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d106      	bne.n	8013080 <tcp_output_segment+0x34>
 8013072:	4b5f      	ldr	r3, [pc, #380]	@ (80131f0 <tcp_output_segment+0x1a4>)
 8013074:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8013078:	4960      	ldr	r1, [pc, #384]	@ (80131fc <tcp_output_segment+0x1b0>)
 801307a:	485f      	ldr	r0, [pc, #380]	@ (80131f8 <tcp_output_segment+0x1ac>)
 801307c:	f004 f91a 	bl	80172b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d106      	bne.n	8013094 <tcp_output_segment+0x48>
 8013086:	4b5a      	ldr	r3, [pc, #360]	@ (80131f0 <tcp_output_segment+0x1a4>)
 8013088:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801308c:	495c      	ldr	r1, [pc, #368]	@ (8013200 <tcp_output_segment+0x1b4>)
 801308e:	485a      	ldr	r0, [pc, #360]	@ (80131f8 <tcp_output_segment+0x1ac>)
 8013090:	f004 f910 	bl	80172b4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013094:	68f8      	ldr	r0, [r7, #12]
 8013096:	f7ff ffb9 	bl	801300c <tcp_output_segment_busy>
 801309a:	4603      	mov	r3, r0
 801309c:	2b00      	cmp	r3, #0
 801309e:	d001      	beq.n	80130a4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80130a0:	2300      	movs	r3, #0
 80130a2:	e0a1      	b.n	80131e8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	68dc      	ldr	r4, [r3, #12]
 80130ac:	4610      	mov	r0, r2
 80130ae:	f7f9 fd65 	bl	800cb7c <lwip_htonl>
 80130b2:	4603      	mov	r3, r0
 80130b4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80130b6:	68bb      	ldr	r3, [r7, #8]
 80130b8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	68dc      	ldr	r4, [r3, #12]
 80130be:	4610      	mov	r0, r2
 80130c0:	f7f9 fd46 	bl	800cb50 <lwip_htons>
 80130c4:	4603      	mov	r3, r0
 80130c6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130cc:	68ba      	ldr	r2, [r7, #8]
 80130ce:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80130d0:	441a      	add	r2, r3
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	68db      	ldr	r3, [r3, #12]
 80130da:	3314      	adds	r3, #20
 80130dc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	7a9b      	ldrb	r3, [r3, #10]
 80130e2:	f003 0301 	and.w	r3, r3, #1
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d015      	beq.n	8013116 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	3304      	adds	r3, #4
 80130ee:	461a      	mov	r2, r3
 80130f0:	6879      	ldr	r1, [r7, #4]
 80130f2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80130f6:	f7fc fe91 	bl	800fe1c <tcp_eff_send_mss_netif>
 80130fa:	4603      	mov	r3, r0
 80130fc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80130fe:	8b7b      	ldrh	r3, [r7, #26]
 8013100:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8013104:	4618      	mov	r0, r3
 8013106:	f7f9 fd39 	bl	800cb7c <lwip_htonl>
 801310a:	4602      	mov	r2, r0
 801310c:	69fb      	ldr	r3, [r7, #28]
 801310e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013110:	69fb      	ldr	r3, [r7, #28]
 8013112:	3304      	adds	r3, #4
 8013114:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801311c:	2b00      	cmp	r3, #0
 801311e:	da02      	bge.n	8013126 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	2200      	movs	r2, #0
 8013124:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801312a:	2b00      	cmp	r3, #0
 801312c:	d10c      	bne.n	8013148 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801312e:	4b35      	ldr	r3, [pc, #212]	@ (8013204 <tcp_output_segment+0x1b8>)
 8013130:	681a      	ldr	r2, [r3, #0]
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	68db      	ldr	r3, [r3, #12]
 801313a:	685b      	ldr	r3, [r3, #4]
 801313c:	4618      	mov	r0, r3
 801313e:	f7f9 fd1d 	bl	800cb7c <lwip_htonl>
 8013142:	4602      	mov	r2, r0
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	68da      	ldr	r2, [r3, #12]
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	685b      	ldr	r3, [r3, #4]
 8013150:	685b      	ldr	r3, [r3, #4]
 8013152:	1ad3      	subs	r3, r2, r3
 8013154:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	685b      	ldr	r3, [r3, #4]
 801315a:	8959      	ldrh	r1, [r3, #10]
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	685b      	ldr	r3, [r3, #4]
 8013160:	8b3a      	ldrh	r2, [r7, #24]
 8013162:	1a8a      	subs	r2, r1, r2
 8013164:	b292      	uxth	r2, r2
 8013166:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	685b      	ldr	r3, [r3, #4]
 801316c:	8919      	ldrh	r1, [r3, #8]
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	8b3a      	ldrh	r2, [r7, #24]
 8013174:	1a8a      	subs	r2, r1, r2
 8013176:	b292      	uxth	r2, r2
 8013178:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	685b      	ldr	r3, [r3, #4]
 801317e:	68fa      	ldr	r2, [r7, #12]
 8013180:	68d2      	ldr	r2, [r2, #12]
 8013182:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	68db      	ldr	r3, [r3, #12]
 8013188:	2200      	movs	r2, #0
 801318a:	741a      	strb	r2, [r3, #16]
 801318c:	2200      	movs	r2, #0
 801318e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	68da      	ldr	r2, [r3, #12]
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	7a9b      	ldrb	r3, [r3, #10]
 8013198:	f003 0301 	and.w	r3, r3, #1
 801319c:	2b00      	cmp	r3, #0
 801319e:	d001      	beq.n	80131a4 <tcp_output_segment+0x158>
 80131a0:	2318      	movs	r3, #24
 80131a2:	e000      	b.n	80131a6 <tcp_output_segment+0x15a>
 80131a4:	2314      	movs	r3, #20
 80131a6:	4413      	add	r3, r2
 80131a8:	69fa      	ldr	r2, [r7, #28]
 80131aa:	429a      	cmp	r2, r3
 80131ac:	d006      	beq.n	80131bc <tcp_output_segment+0x170>
 80131ae:	4b10      	ldr	r3, [pc, #64]	@ (80131f0 <tcp_output_segment+0x1a4>)
 80131b0:	f240 621c 	movw	r2, #1564	@ 0x61c
 80131b4:	4914      	ldr	r1, [pc, #80]	@ (8013208 <tcp_output_segment+0x1bc>)
 80131b6:	4810      	ldr	r0, [pc, #64]	@ (80131f8 <tcp_output_segment+0x1ac>)
 80131b8:	f004 f87c 	bl	80172b4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	6858      	ldr	r0, [r3, #4]
 80131c0:	68b9      	ldr	r1, [r7, #8]
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	1d1c      	adds	r4, r3, #4
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	7add      	ldrb	r5, [r3, #11]
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	7a9b      	ldrb	r3, [r3, #10]
 80131ce:	687a      	ldr	r2, [r7, #4]
 80131d0:	9202      	str	r2, [sp, #8]
 80131d2:	2206      	movs	r2, #6
 80131d4:	9201      	str	r2, [sp, #4]
 80131d6:	9300      	str	r3, [sp, #0]
 80131d8:	462b      	mov	r3, r5
 80131da:	4622      	mov	r2, r4
 80131dc:	f002 fb5c 	bl	8015898 <ip4_output_if>
 80131e0:	4603      	mov	r3, r0
 80131e2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80131e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80131e8:	4618      	mov	r0, r3
 80131ea:	3720      	adds	r7, #32
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bdb0      	pop	{r4, r5, r7, pc}
 80131f0:	08019db0 	.word	0x08019db0
 80131f4:	0801a374 	.word	0x0801a374
 80131f8:	08019e04 	.word	0x08019e04
 80131fc:	0801a394 	.word	0x0801a394
 8013200:	0801a3b4 	.word	0x0801a3b4
 8013204:	2002744c 	.word	0x2002744c
 8013208:	0801a3d8 	.word	0x0801a3d8

0801320c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801320c:	b5b0      	push	{r4, r5, r7, lr}
 801320e:	b084      	sub	sp, #16
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d106      	bne.n	8013228 <tcp_rexmit_rto_prepare+0x1c>
 801321a:	4b31      	ldr	r3, [pc, #196]	@ (80132e0 <tcp_rexmit_rto_prepare+0xd4>)
 801321c:	f240 6263 	movw	r2, #1635	@ 0x663
 8013220:	4930      	ldr	r1, [pc, #192]	@ (80132e4 <tcp_rexmit_rto_prepare+0xd8>)
 8013222:	4831      	ldr	r0, [pc, #196]	@ (80132e8 <tcp_rexmit_rto_prepare+0xdc>)
 8013224:	f004 f846 	bl	80172b4 <iprintf>

  if (pcb->unacked == NULL) {
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801322c:	2b00      	cmp	r3, #0
 801322e:	d102      	bne.n	8013236 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013230:	f06f 0305 	mvn.w	r3, #5
 8013234:	e050      	b.n	80132d8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801323a:	60fb      	str	r3, [r7, #12]
 801323c:	e00b      	b.n	8013256 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801323e:	68f8      	ldr	r0, [r7, #12]
 8013240:	f7ff fee4 	bl	801300c <tcp_output_segment_busy>
 8013244:	4603      	mov	r3, r0
 8013246:	2b00      	cmp	r3, #0
 8013248:	d002      	beq.n	8013250 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801324a:	f06f 0305 	mvn.w	r3, #5
 801324e:	e043      	b.n	80132d8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	60fb      	str	r3, [r7, #12]
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d1ef      	bne.n	801323e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801325e:	68f8      	ldr	r0, [r7, #12]
 8013260:	f7ff fed4 	bl	801300c <tcp_output_segment_busy>
 8013264:	4603      	mov	r3, r0
 8013266:	2b00      	cmp	r3, #0
 8013268:	d002      	beq.n	8013270 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801326a:	f06f 0305 	mvn.w	r3, #5
 801326e:	e033      	b.n	80132d8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2200      	movs	r2, #0
 8013284:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	8b5b      	ldrh	r3, [r3, #26]
 801328a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801328e:	b29a      	uxth	r2, r3
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	68db      	ldr	r3, [r3, #12]
 8013298:	685b      	ldr	r3, [r3, #4]
 801329a:	4618      	mov	r0, r3
 801329c:	f7f9 fc6e 	bl	800cb7c <lwip_htonl>
 80132a0:	4604      	mov	r4, r0
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	891b      	ldrh	r3, [r3, #8]
 80132a6:	461d      	mov	r5, r3
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	68db      	ldr	r3, [r3, #12]
 80132ac:	899b      	ldrh	r3, [r3, #12]
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7f9 fc4d 	bl	800cb50 <lwip_htons>
 80132b6:	4603      	mov	r3, r0
 80132b8:	b2db      	uxtb	r3, r3
 80132ba:	f003 0303 	and.w	r3, r3, #3
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d001      	beq.n	80132c6 <tcp_rexmit_rto_prepare+0xba>
 80132c2:	2301      	movs	r3, #1
 80132c4:	e000      	b.n	80132c8 <tcp_rexmit_rto_prepare+0xbc>
 80132c6:	2300      	movs	r3, #0
 80132c8:	442b      	add	r3, r5
 80132ca:	18e2      	adds	r2, r4, r3
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2200      	movs	r2, #0
 80132d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80132d6:	2300      	movs	r3, #0
}
 80132d8:	4618      	mov	r0, r3
 80132da:	3710      	adds	r7, #16
 80132dc:	46bd      	mov	sp, r7
 80132de:	bdb0      	pop	{r4, r5, r7, pc}
 80132e0:	08019db0 	.word	0x08019db0
 80132e4:	0801a3ec 	.word	0x0801a3ec
 80132e8:	08019e04 	.word	0x08019e04

080132ec <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b082      	sub	sp, #8
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d106      	bne.n	8013308 <tcp_rexmit_rto_commit+0x1c>
 80132fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013330 <tcp_rexmit_rto_commit+0x44>)
 80132fc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013300:	490c      	ldr	r1, [pc, #48]	@ (8013334 <tcp_rexmit_rto_commit+0x48>)
 8013302:	480d      	ldr	r0, [pc, #52]	@ (8013338 <tcp_rexmit_rto_commit+0x4c>)
 8013304:	f003 ffd6 	bl	80172b4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801330e:	2bff      	cmp	r3, #255	@ 0xff
 8013310:	d007      	beq.n	8013322 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013318:	3301      	adds	r3, #1
 801331a:	b2da      	uxtb	r2, r3
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f7ff fc7e 	bl	8012c24 <tcp_output>
}
 8013328:	bf00      	nop
 801332a:	3708      	adds	r7, #8
 801332c:	46bd      	mov	sp, r7
 801332e:	bd80      	pop	{r7, pc}
 8013330:	08019db0 	.word	0x08019db0
 8013334:	0801a410 	.word	0x0801a410
 8013338:	08019e04 	.word	0x08019e04

0801333c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b082      	sub	sp, #8
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d106      	bne.n	8013358 <tcp_rexmit_rto+0x1c>
 801334a:	4b0a      	ldr	r3, [pc, #40]	@ (8013374 <tcp_rexmit_rto+0x38>)
 801334c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8013350:	4909      	ldr	r1, [pc, #36]	@ (8013378 <tcp_rexmit_rto+0x3c>)
 8013352:	480a      	ldr	r0, [pc, #40]	@ (801337c <tcp_rexmit_rto+0x40>)
 8013354:	f003 ffae 	bl	80172b4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013358:	6878      	ldr	r0, [r7, #4]
 801335a:	f7ff ff57 	bl	801320c <tcp_rexmit_rto_prepare>
 801335e:	4603      	mov	r3, r0
 8013360:	2b00      	cmp	r3, #0
 8013362:	d102      	bne.n	801336a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f7ff ffc1 	bl	80132ec <tcp_rexmit_rto_commit>
  }
}
 801336a:	bf00      	nop
 801336c:	3708      	adds	r7, #8
 801336e:	46bd      	mov	sp, r7
 8013370:	bd80      	pop	{r7, pc}
 8013372:	bf00      	nop
 8013374:	08019db0 	.word	0x08019db0
 8013378:	0801a434 	.word	0x0801a434
 801337c:	08019e04 	.word	0x08019e04

08013380 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013380:	b590      	push	{r4, r7, lr}
 8013382:	b085      	sub	sp, #20
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d106      	bne.n	801339c <tcp_rexmit+0x1c>
 801338e:	4b2f      	ldr	r3, [pc, #188]	@ (801344c <tcp_rexmit+0xcc>)
 8013390:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8013394:	492e      	ldr	r1, [pc, #184]	@ (8013450 <tcp_rexmit+0xd0>)
 8013396:	482f      	ldr	r0, [pc, #188]	@ (8013454 <tcp_rexmit+0xd4>)
 8013398:	f003 ff8c 	bl	80172b4 <iprintf>

  if (pcb->unacked == NULL) {
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d102      	bne.n	80133aa <tcp_rexmit+0x2a>
    return ERR_VAL;
 80133a4:	f06f 0305 	mvn.w	r3, #5
 80133a8:	e04c      	b.n	8013444 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133ae:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80133b0:	68b8      	ldr	r0, [r7, #8]
 80133b2:	f7ff fe2b 	bl	801300c <tcp_output_segment_busy>
 80133b6:	4603      	mov	r3, r0
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d002      	beq.n	80133c2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80133bc:	f06f 0305 	mvn.w	r3, #5
 80133c0:	e040      	b.n	8013444 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	681a      	ldr	r2, [r3, #0]
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	336c      	adds	r3, #108	@ 0x6c
 80133ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80133d0:	e002      	b.n	80133d8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d011      	beq.n	8013404 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	68db      	ldr	r3, [r3, #12]
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7f9 fbc7 	bl	800cb7c <lwip_htonl>
 80133ee:	4604      	mov	r4, r0
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	68db      	ldr	r3, [r3, #12]
 80133f4:	685b      	ldr	r3, [r3, #4]
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7f9 fbc0 	bl	800cb7c <lwip_htonl>
 80133fc:	4603      	mov	r3, r0
 80133fe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013400:	2b00      	cmp	r3, #0
 8013402:	dbe6      	blt.n	80133d2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	681a      	ldr	r2, [r3, #0]
 8013408:	68bb      	ldr	r3, [r7, #8]
 801340a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	68ba      	ldr	r2, [r7, #8]
 8013410:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d103      	bne.n	8013422 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	2200      	movs	r2, #0
 801341e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013428:	2bff      	cmp	r3, #255	@ 0xff
 801342a:	d007      	beq.n	801343c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013432:	3301      	adds	r3, #1
 8013434:	b2da      	uxtb	r2, r3
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	2200      	movs	r2, #0
 8013440:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013442:	2300      	movs	r3, #0
}
 8013444:	4618      	mov	r0, r3
 8013446:	3714      	adds	r7, #20
 8013448:	46bd      	mov	sp, r7
 801344a:	bd90      	pop	{r4, r7, pc}
 801344c:	08019db0 	.word	0x08019db0
 8013450:	0801a450 	.word	0x0801a450
 8013454:	08019e04 	.word	0x08019e04

08013458 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b082      	sub	sp, #8
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d106      	bne.n	8013474 <tcp_rexmit_fast+0x1c>
 8013466:	4b2a      	ldr	r3, [pc, #168]	@ (8013510 <tcp_rexmit_fast+0xb8>)
 8013468:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801346c:	4929      	ldr	r1, [pc, #164]	@ (8013514 <tcp_rexmit_fast+0xbc>)
 801346e:	482a      	ldr	r0, [pc, #168]	@ (8013518 <tcp_rexmit_fast+0xc0>)
 8013470:	f003 ff20 	bl	80172b4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013478:	2b00      	cmp	r3, #0
 801347a:	d045      	beq.n	8013508 <tcp_rexmit_fast+0xb0>
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	8b5b      	ldrh	r3, [r3, #26]
 8013480:	f003 0304 	and.w	r3, r3, #4
 8013484:	2b00      	cmp	r3, #0
 8013486:	d13f      	bne.n	8013508 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	f7ff ff79 	bl	8013380 <tcp_rexmit>
 801348e:	4603      	mov	r3, r0
 8013490:	2b00      	cmp	r3, #0
 8013492:	d139      	bne.n	8013508 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80134a0:	4293      	cmp	r3, r2
 80134a2:	bf28      	it	cs
 80134a4:	4613      	movcs	r3, r2
 80134a6:	b29b      	uxth	r3, r3
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	da00      	bge.n	80134ae <tcp_rexmit_fast+0x56>
 80134ac:	3301      	adds	r3, #1
 80134ae:	105b      	asrs	r3, r3, #1
 80134b0:	b29a      	uxth	r2, r3
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80134be:	461a      	mov	r2, r3
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80134c4:	005b      	lsls	r3, r3, #1
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d206      	bcs.n	80134d8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80134ce:	005b      	lsls	r3, r3, #1
 80134d0:	b29a      	uxth	r2, r3
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80134e2:	4619      	mov	r1, r3
 80134e4:	0049      	lsls	r1, r1, #1
 80134e6:	440b      	add	r3, r1
 80134e8:	b29b      	uxth	r3, r3
 80134ea:	4413      	add	r3, r2
 80134ec:	b29a      	uxth	r2, r3
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	8b5b      	ldrh	r3, [r3, #26]
 80134f8:	f043 0304 	orr.w	r3, r3, #4
 80134fc:	b29a      	uxth	r2, r3
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2200      	movs	r2, #0
 8013506:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8013508:	bf00      	nop
 801350a:	3708      	adds	r7, #8
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}
 8013510:	08019db0 	.word	0x08019db0
 8013514:	0801a468 	.word	0x0801a468
 8013518:	08019e04 	.word	0x08019e04

0801351c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b086      	sub	sp, #24
 8013520:	af00      	add	r7, sp, #0
 8013522:	60f8      	str	r0, [r7, #12]
 8013524:	607b      	str	r3, [r7, #4]
 8013526:	460b      	mov	r3, r1
 8013528:	817b      	strh	r3, [r7, #10]
 801352a:	4613      	mov	r3, r2
 801352c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801352e:	897a      	ldrh	r2, [r7, #10]
 8013530:	893b      	ldrh	r3, [r7, #8]
 8013532:	4413      	add	r3, r2
 8013534:	b29b      	uxth	r3, r3
 8013536:	3314      	adds	r3, #20
 8013538:	b29b      	uxth	r3, r3
 801353a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801353e:	4619      	mov	r1, r3
 8013540:	2022      	movs	r0, #34	@ 0x22
 8013542:	f7fa fc0f 	bl	800dd64 <pbuf_alloc>
 8013546:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d04d      	beq.n	80135ea <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801354e:	897b      	ldrh	r3, [r7, #10]
 8013550:	3313      	adds	r3, #19
 8013552:	697a      	ldr	r2, [r7, #20]
 8013554:	8952      	ldrh	r2, [r2, #10]
 8013556:	4293      	cmp	r3, r2
 8013558:	db06      	blt.n	8013568 <tcp_output_alloc_header_common+0x4c>
 801355a:	4b26      	ldr	r3, [pc, #152]	@ (80135f4 <tcp_output_alloc_header_common+0xd8>)
 801355c:	f240 7223 	movw	r2, #1827	@ 0x723
 8013560:	4925      	ldr	r1, [pc, #148]	@ (80135f8 <tcp_output_alloc_header_common+0xdc>)
 8013562:	4826      	ldr	r0, [pc, #152]	@ (80135fc <tcp_output_alloc_header_common+0xe0>)
 8013564:	f003 fea6 	bl	80172b4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	685b      	ldr	r3, [r3, #4]
 801356c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801356e:	8c3b      	ldrh	r3, [r7, #32]
 8013570:	4618      	mov	r0, r3
 8013572:	f7f9 faed 	bl	800cb50 <lwip_htons>
 8013576:	4603      	mov	r3, r0
 8013578:	461a      	mov	r2, r3
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801357e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013580:	4618      	mov	r0, r3
 8013582:	f7f9 fae5 	bl	800cb50 <lwip_htons>
 8013586:	4603      	mov	r3, r0
 8013588:	461a      	mov	r2, r3
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	687a      	ldr	r2, [r7, #4]
 8013592:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013594:	68f8      	ldr	r0, [r7, #12]
 8013596:	f7f9 faf1 	bl	800cb7c <lwip_htonl>
 801359a:	4602      	mov	r2, r0
 801359c:	693b      	ldr	r3, [r7, #16]
 801359e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80135a0:	897b      	ldrh	r3, [r7, #10]
 80135a2:	089b      	lsrs	r3, r3, #2
 80135a4:	b29b      	uxth	r3, r3
 80135a6:	3305      	adds	r3, #5
 80135a8:	b29b      	uxth	r3, r3
 80135aa:	031b      	lsls	r3, r3, #12
 80135ac:	b29a      	uxth	r2, r3
 80135ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	4313      	orrs	r3, r2
 80135b6:	b29b      	uxth	r3, r3
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7f9 fac9 	bl	800cb50 <lwip_htons>
 80135be:	4603      	mov	r3, r0
 80135c0:	461a      	mov	r2, r3
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80135c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7f9 fac1 	bl	800cb50 <lwip_htons>
 80135ce:	4603      	mov	r3, r0
 80135d0:	461a      	mov	r2, r3
 80135d2:	693b      	ldr	r3, [r7, #16]
 80135d4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	2200      	movs	r2, #0
 80135da:	741a      	strb	r2, [r3, #16]
 80135dc:	2200      	movs	r2, #0
 80135de:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80135e0:	693b      	ldr	r3, [r7, #16]
 80135e2:	2200      	movs	r2, #0
 80135e4:	749a      	strb	r2, [r3, #18]
 80135e6:	2200      	movs	r2, #0
 80135e8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80135ea:	697b      	ldr	r3, [r7, #20]
}
 80135ec:	4618      	mov	r0, r3
 80135ee:	3718      	adds	r7, #24
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}
 80135f4:	08019db0 	.word	0x08019db0
 80135f8:	0801a488 	.word	0x0801a488
 80135fc:	08019e04 	.word	0x08019e04

08013600 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013600:	b5b0      	push	{r4, r5, r7, lr}
 8013602:	b08a      	sub	sp, #40	@ 0x28
 8013604:	af04      	add	r7, sp, #16
 8013606:	60f8      	str	r0, [r7, #12]
 8013608:	607b      	str	r3, [r7, #4]
 801360a:	460b      	mov	r3, r1
 801360c:	817b      	strh	r3, [r7, #10]
 801360e:	4613      	mov	r3, r2
 8013610:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d106      	bne.n	8013626 <tcp_output_alloc_header+0x26>
 8013618:	4b15      	ldr	r3, [pc, #84]	@ (8013670 <tcp_output_alloc_header+0x70>)
 801361a:	f240 7242 	movw	r2, #1858	@ 0x742
 801361e:	4915      	ldr	r1, [pc, #84]	@ (8013674 <tcp_output_alloc_header+0x74>)
 8013620:	4815      	ldr	r0, [pc, #84]	@ (8013678 <tcp_output_alloc_header+0x78>)
 8013622:	f003 fe47 	bl	80172b4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	8adb      	ldrh	r3, [r3, #22]
 801362e:	68fa      	ldr	r2, [r7, #12]
 8013630:	8b12      	ldrh	r2, [r2, #24]
 8013632:	68f9      	ldr	r1, [r7, #12]
 8013634:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8013636:	893d      	ldrh	r5, [r7, #8]
 8013638:	897c      	ldrh	r4, [r7, #10]
 801363a:	9103      	str	r1, [sp, #12]
 801363c:	2110      	movs	r1, #16
 801363e:	9102      	str	r1, [sp, #8]
 8013640:	9201      	str	r2, [sp, #4]
 8013642:	9300      	str	r3, [sp, #0]
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	462a      	mov	r2, r5
 8013648:	4621      	mov	r1, r4
 801364a:	f7ff ff67 	bl	801351c <tcp_output_alloc_header_common>
 801364e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013650:	697b      	ldr	r3, [r7, #20]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d006      	beq.n	8013664 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801365a:	68fa      	ldr	r2, [r7, #12]
 801365c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801365e:	441a      	add	r2, r3
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8013664:	697b      	ldr	r3, [r7, #20]
}
 8013666:	4618      	mov	r0, r3
 8013668:	3718      	adds	r7, #24
 801366a:	46bd      	mov	sp, r7
 801366c:	bdb0      	pop	{r4, r5, r7, pc}
 801366e:	bf00      	nop
 8013670:	08019db0 	.word	0x08019db0
 8013674:	0801a4b8 	.word	0x0801a4b8
 8013678:	08019e04 	.word	0x08019e04

0801367c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b088      	sub	sp, #32
 8013680:	af00      	add	r7, sp, #0
 8013682:	60f8      	str	r0, [r7, #12]
 8013684:	60b9      	str	r1, [r7, #8]
 8013686:	4611      	mov	r1, r2
 8013688:	461a      	mov	r2, r3
 801368a:	460b      	mov	r3, r1
 801368c:	71fb      	strb	r3, [r7, #7]
 801368e:	4613      	mov	r3, r2
 8013690:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013692:	2300      	movs	r3, #0
 8013694:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d106      	bne.n	80136aa <tcp_output_fill_options+0x2e>
 801369c:	4b12      	ldr	r3, [pc, #72]	@ (80136e8 <tcp_output_fill_options+0x6c>)
 801369e:	f240 7256 	movw	r2, #1878	@ 0x756
 80136a2:	4912      	ldr	r1, [pc, #72]	@ (80136ec <tcp_output_fill_options+0x70>)
 80136a4:	4812      	ldr	r0, [pc, #72]	@ (80136f0 <tcp_output_fill_options+0x74>)
 80136a6:	f003 fe05 	bl	80172b4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80136aa:	68bb      	ldr	r3, [r7, #8]
 80136ac:	685b      	ldr	r3, [r3, #4]
 80136ae:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80136b0:	69bb      	ldr	r3, [r7, #24]
 80136b2:	3314      	adds	r3, #20
 80136b4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80136b6:	8bfb      	ldrh	r3, [r7, #30]
 80136b8:	009b      	lsls	r3, r3, #2
 80136ba:	461a      	mov	r2, r3
 80136bc:	79fb      	ldrb	r3, [r7, #7]
 80136be:	009b      	lsls	r3, r3, #2
 80136c0:	f003 0304 	and.w	r3, r3, #4
 80136c4:	4413      	add	r3, r2
 80136c6:	3314      	adds	r3, #20
 80136c8:	69ba      	ldr	r2, [r7, #24]
 80136ca:	4413      	add	r3, r2
 80136cc:	697a      	ldr	r2, [r7, #20]
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d006      	beq.n	80136e0 <tcp_output_fill_options+0x64>
 80136d2:	4b05      	ldr	r3, [pc, #20]	@ (80136e8 <tcp_output_fill_options+0x6c>)
 80136d4:	f240 7275 	movw	r2, #1909	@ 0x775
 80136d8:	4906      	ldr	r1, [pc, #24]	@ (80136f4 <tcp_output_fill_options+0x78>)
 80136da:	4805      	ldr	r0, [pc, #20]	@ (80136f0 <tcp_output_fill_options+0x74>)
 80136dc:	f003 fdea 	bl	80172b4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80136e0:	bf00      	nop
 80136e2:	3720      	adds	r7, #32
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}
 80136e8:	08019db0 	.word	0x08019db0
 80136ec:	0801a4e0 	.word	0x0801a4e0
 80136f0:	08019e04 	.word	0x08019e04
 80136f4:	0801a3d8 	.word	0x0801a3d8

080136f8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b08a      	sub	sp, #40	@ 0x28
 80136fc:	af04      	add	r7, sp, #16
 80136fe:	60f8      	str	r0, [r7, #12]
 8013700:	60b9      	str	r1, [r7, #8]
 8013702:	607a      	str	r2, [r7, #4]
 8013704:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d106      	bne.n	801371a <tcp_output_control_segment+0x22>
 801370c:	4b1c      	ldr	r3, [pc, #112]	@ (8013780 <tcp_output_control_segment+0x88>)
 801370e:	f240 7287 	movw	r2, #1927	@ 0x787
 8013712:	491c      	ldr	r1, [pc, #112]	@ (8013784 <tcp_output_control_segment+0x8c>)
 8013714:	481c      	ldr	r0, [pc, #112]	@ (8013788 <tcp_output_control_segment+0x90>)
 8013716:	f003 fdcd 	bl	80172b4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801371a:	683a      	ldr	r2, [r7, #0]
 801371c:	6879      	ldr	r1, [r7, #4]
 801371e:	68f8      	ldr	r0, [r7, #12]
 8013720:	f7fe ff42 	bl	80125a8 <tcp_route>
 8013724:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013726:	693b      	ldr	r3, [r7, #16]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d102      	bne.n	8013732 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801372c:	23fc      	movs	r3, #252	@ 0xfc
 801372e:	75fb      	strb	r3, [r7, #23]
 8013730:	e01c      	b.n	801376c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d006      	beq.n	8013746 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	7adb      	ldrb	r3, [r3, #11]
 801373c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	7a9b      	ldrb	r3, [r3, #10]
 8013742:	757b      	strb	r3, [r7, #21]
 8013744:	e003      	b.n	801374e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013746:	23ff      	movs	r3, #255	@ 0xff
 8013748:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801374a:	2300      	movs	r3, #0
 801374c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801374e:	7dba      	ldrb	r2, [r7, #22]
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	9302      	str	r3, [sp, #8]
 8013754:	2306      	movs	r3, #6
 8013756:	9301      	str	r3, [sp, #4]
 8013758:	7d7b      	ldrb	r3, [r7, #21]
 801375a:	9300      	str	r3, [sp, #0]
 801375c:	4613      	mov	r3, r2
 801375e:	683a      	ldr	r2, [r7, #0]
 8013760:	6879      	ldr	r1, [r7, #4]
 8013762:	68b8      	ldr	r0, [r7, #8]
 8013764:	f002 f898 	bl	8015898 <ip4_output_if>
 8013768:	4603      	mov	r3, r0
 801376a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801376c:	68b8      	ldr	r0, [r7, #8]
 801376e:	f7fa fddd 	bl	800e32c <pbuf_free>
  return err;
 8013772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013776:	4618      	mov	r0, r3
 8013778:	3718      	adds	r7, #24
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}
 801377e:	bf00      	nop
 8013780:	08019db0 	.word	0x08019db0
 8013784:	0801a508 	.word	0x0801a508
 8013788:	08019e04 	.word	0x08019e04

0801378c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801378c:	b590      	push	{r4, r7, lr}
 801378e:	b08b      	sub	sp, #44	@ 0x2c
 8013790:	af04      	add	r7, sp, #16
 8013792:	60f8      	str	r0, [r7, #12]
 8013794:	60b9      	str	r1, [r7, #8]
 8013796:	607a      	str	r2, [r7, #4]
 8013798:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d106      	bne.n	80137ae <tcp_rst+0x22>
 80137a0:	4b1f      	ldr	r3, [pc, #124]	@ (8013820 <tcp_rst+0x94>)
 80137a2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80137a6:	491f      	ldr	r1, [pc, #124]	@ (8013824 <tcp_rst+0x98>)
 80137a8:	481f      	ldr	r0, [pc, #124]	@ (8013828 <tcp_rst+0x9c>)
 80137aa:	f003 fd83 	bl	80172b4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80137ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d106      	bne.n	80137c2 <tcp_rst+0x36>
 80137b4:	4b1a      	ldr	r3, [pc, #104]	@ (8013820 <tcp_rst+0x94>)
 80137b6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80137ba:	491c      	ldr	r1, [pc, #112]	@ (801382c <tcp_rst+0xa0>)
 80137bc:	481a      	ldr	r0, [pc, #104]	@ (8013828 <tcp_rst+0x9c>)
 80137be:	f003 fd79 	bl	80172b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80137c2:	2300      	movs	r3, #0
 80137c4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80137c6:	f246 0308 	movw	r3, #24584	@ 0x6008
 80137ca:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80137cc:	7dfb      	ldrb	r3, [r7, #23]
 80137ce:	b29c      	uxth	r4, r3
 80137d0:	68b8      	ldr	r0, [r7, #8]
 80137d2:	f7f9 f9d3 	bl	800cb7c <lwip_htonl>
 80137d6:	4602      	mov	r2, r0
 80137d8:	8abb      	ldrh	r3, [r7, #20]
 80137da:	9303      	str	r3, [sp, #12]
 80137dc:	2314      	movs	r3, #20
 80137de:	9302      	str	r3, [sp, #8]
 80137e0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80137e2:	9301      	str	r3, [sp, #4]
 80137e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80137e6:	9300      	str	r3, [sp, #0]
 80137e8:	4613      	mov	r3, r2
 80137ea:	2200      	movs	r2, #0
 80137ec:	4621      	mov	r1, r4
 80137ee:	6878      	ldr	r0, [r7, #4]
 80137f0:	f7ff fe94 	bl	801351c <tcp_output_alloc_header_common>
 80137f4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80137f6:	693b      	ldr	r3, [r7, #16]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d00c      	beq.n	8013816 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80137fc:	7dfb      	ldrb	r3, [r7, #23]
 80137fe:	2200      	movs	r2, #0
 8013800:	6939      	ldr	r1, [r7, #16]
 8013802:	68f8      	ldr	r0, [r7, #12]
 8013804:	f7ff ff3a 	bl	801367c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801380a:	683a      	ldr	r2, [r7, #0]
 801380c:	6939      	ldr	r1, [r7, #16]
 801380e:	68f8      	ldr	r0, [r7, #12]
 8013810:	f7ff ff72 	bl	80136f8 <tcp_output_control_segment>
 8013814:	e000      	b.n	8013818 <tcp_rst+0x8c>
    return;
 8013816:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013818:	371c      	adds	r7, #28
 801381a:	46bd      	mov	sp, r7
 801381c:	bd90      	pop	{r4, r7, pc}
 801381e:	bf00      	nop
 8013820:	08019db0 	.word	0x08019db0
 8013824:	0801a534 	.word	0x0801a534
 8013828:	08019e04 	.word	0x08019e04
 801382c:	0801a550 	.word	0x0801a550

08013830 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013830:	b590      	push	{r4, r7, lr}
 8013832:	b087      	sub	sp, #28
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013838:	2300      	movs	r3, #0
 801383a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801383c:	2300      	movs	r3, #0
 801383e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d106      	bne.n	8013854 <tcp_send_empty_ack+0x24>
 8013846:	4b28      	ldr	r3, [pc, #160]	@ (80138e8 <tcp_send_empty_ack+0xb8>)
 8013848:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801384c:	4927      	ldr	r1, [pc, #156]	@ (80138ec <tcp_send_empty_ack+0xbc>)
 801384e:	4828      	ldr	r0, [pc, #160]	@ (80138f0 <tcp_send_empty_ack+0xc0>)
 8013850:	f003 fd30 	bl	80172b4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013854:	7dfb      	ldrb	r3, [r7, #23]
 8013856:	009b      	lsls	r3, r3, #2
 8013858:	b2db      	uxtb	r3, r3
 801385a:	f003 0304 	and.w	r3, r3, #4
 801385e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013860:	7d7b      	ldrb	r3, [r7, #21]
 8013862:	b29c      	uxth	r4, r3
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013868:	4618      	mov	r0, r3
 801386a:	f7f9 f987 	bl	800cb7c <lwip_htonl>
 801386e:	4603      	mov	r3, r0
 8013870:	2200      	movs	r2, #0
 8013872:	4621      	mov	r1, r4
 8013874:	6878      	ldr	r0, [r7, #4]
 8013876:	f7ff fec3 	bl	8013600 <tcp_output_alloc_header>
 801387a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801387c:	693b      	ldr	r3, [r7, #16]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d109      	bne.n	8013896 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	8b5b      	ldrh	r3, [r3, #26]
 8013886:	f043 0303 	orr.w	r3, r3, #3
 801388a:	b29a      	uxth	r2, r3
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013890:	f06f 0301 	mvn.w	r3, #1
 8013894:	e023      	b.n	80138de <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013896:	7dbb      	ldrb	r3, [r7, #22]
 8013898:	7dfa      	ldrb	r2, [r7, #23]
 801389a:	6939      	ldr	r1, [r7, #16]
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f7ff feed 	bl	801367c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80138a2:	687a      	ldr	r2, [r7, #4]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	3304      	adds	r3, #4
 80138a8:	6939      	ldr	r1, [r7, #16]
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f7ff ff24 	bl	80136f8 <tcp_output_control_segment>
 80138b0:	4603      	mov	r3, r0
 80138b2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80138b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d007      	beq.n	80138cc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	8b5b      	ldrh	r3, [r3, #26]
 80138c0:	f043 0303 	orr.w	r3, r3, #3
 80138c4:	b29a      	uxth	r2, r3
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	835a      	strh	r2, [r3, #26]
 80138ca:	e006      	b.n	80138da <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	8b5b      	ldrh	r3, [r3, #26]
 80138d0:	f023 0303 	bic.w	r3, r3, #3
 80138d4:	b29a      	uxth	r2, r3
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80138da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80138de:	4618      	mov	r0, r3
 80138e0:	371c      	adds	r7, #28
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd90      	pop	{r4, r7, pc}
 80138e6:	bf00      	nop
 80138e8:	08019db0 	.word	0x08019db0
 80138ec:	0801a56c 	.word	0x0801a56c
 80138f0:	08019e04 	.word	0x08019e04

080138f4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80138f4:	b590      	push	{r4, r7, lr}
 80138f6:	b087      	sub	sp, #28
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80138fc:	2300      	movs	r3, #0
 80138fe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d106      	bne.n	8013914 <tcp_keepalive+0x20>
 8013906:	4b18      	ldr	r3, [pc, #96]	@ (8013968 <tcp_keepalive+0x74>)
 8013908:	f640 0224 	movw	r2, #2084	@ 0x824
 801390c:	4917      	ldr	r1, [pc, #92]	@ (801396c <tcp_keepalive+0x78>)
 801390e:	4818      	ldr	r0, [pc, #96]	@ (8013970 <tcp_keepalive+0x7c>)
 8013910:	f003 fcd0 	bl	80172b4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013914:	7dfb      	ldrb	r3, [r7, #23]
 8013916:	b29c      	uxth	r4, r3
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801391c:	3b01      	subs	r3, #1
 801391e:	4618      	mov	r0, r3
 8013920:	f7f9 f92c 	bl	800cb7c <lwip_htonl>
 8013924:	4603      	mov	r3, r0
 8013926:	2200      	movs	r2, #0
 8013928:	4621      	mov	r1, r4
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f7ff fe68 	bl	8013600 <tcp_output_alloc_header>
 8013930:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013932:	693b      	ldr	r3, [r7, #16]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d102      	bne.n	801393e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013938:	f04f 33ff 	mov.w	r3, #4294967295
 801393c:	e010      	b.n	8013960 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801393e:	7dfb      	ldrb	r3, [r7, #23]
 8013940:	2200      	movs	r2, #0
 8013942:	6939      	ldr	r1, [r7, #16]
 8013944:	6878      	ldr	r0, [r7, #4]
 8013946:	f7ff fe99 	bl	801367c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801394a:	687a      	ldr	r2, [r7, #4]
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	3304      	adds	r3, #4
 8013950:	6939      	ldr	r1, [r7, #16]
 8013952:	6878      	ldr	r0, [r7, #4]
 8013954:	f7ff fed0 	bl	80136f8 <tcp_output_control_segment>
 8013958:	4603      	mov	r3, r0
 801395a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801395c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013960:	4618      	mov	r0, r3
 8013962:	371c      	adds	r7, #28
 8013964:	46bd      	mov	sp, r7
 8013966:	bd90      	pop	{r4, r7, pc}
 8013968:	08019db0 	.word	0x08019db0
 801396c:	0801a58c 	.word	0x0801a58c
 8013970:	08019e04 	.word	0x08019e04

08013974 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013974:	b590      	push	{r4, r7, lr}
 8013976:	b08b      	sub	sp, #44	@ 0x2c
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801397c:	2300      	movs	r3, #0
 801397e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d106      	bne.n	8013996 <tcp_zero_window_probe+0x22>
 8013988:	4b4c      	ldr	r3, [pc, #304]	@ (8013abc <tcp_zero_window_probe+0x148>)
 801398a:	f640 024f 	movw	r2, #2127	@ 0x84f
 801398e:	494c      	ldr	r1, [pc, #304]	@ (8013ac0 <tcp_zero_window_probe+0x14c>)
 8013990:	484c      	ldr	r0, [pc, #304]	@ (8013ac4 <tcp_zero_window_probe+0x150>)
 8013992:	f003 fc8f 	bl	80172b4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801399a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801399c:	6a3b      	ldr	r3, [r7, #32]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d101      	bne.n	80139a6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80139a2:	2300      	movs	r3, #0
 80139a4:	e086      	b.n	8013ab4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80139ac:	2bff      	cmp	r3, #255	@ 0xff
 80139ae:	d007      	beq.n	80139c0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80139b6:	3301      	adds	r3, #1
 80139b8:	b2da      	uxtb	r2, r3
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80139c0:	6a3b      	ldr	r3, [r7, #32]
 80139c2:	68db      	ldr	r3, [r3, #12]
 80139c4:	899b      	ldrh	r3, [r3, #12]
 80139c6:	b29b      	uxth	r3, r3
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7f9 f8c1 	bl	800cb50 <lwip_htons>
 80139ce:	4603      	mov	r3, r0
 80139d0:	b2db      	uxtb	r3, r3
 80139d2:	f003 0301 	and.w	r3, r3, #1
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d005      	beq.n	80139e6 <tcp_zero_window_probe+0x72>
 80139da:	6a3b      	ldr	r3, [r7, #32]
 80139dc:	891b      	ldrh	r3, [r3, #8]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d101      	bne.n	80139e6 <tcp_zero_window_probe+0x72>
 80139e2:	2301      	movs	r3, #1
 80139e4:	e000      	b.n	80139e8 <tcp_zero_window_probe+0x74>
 80139e6:	2300      	movs	r3, #0
 80139e8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80139ea:	7ffb      	ldrb	r3, [r7, #31]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	bf0c      	ite	eq
 80139f0:	2301      	moveq	r3, #1
 80139f2:	2300      	movne	r3, #0
 80139f4:	b2db      	uxtb	r3, r3
 80139f6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80139f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80139fc:	b299      	uxth	r1, r3
 80139fe:	6a3b      	ldr	r3, [r7, #32]
 8013a00:	68db      	ldr	r3, [r3, #12]
 8013a02:	685b      	ldr	r3, [r3, #4]
 8013a04:	8bba      	ldrh	r2, [r7, #28]
 8013a06:	6878      	ldr	r0, [r7, #4]
 8013a08:	f7ff fdfa 	bl	8013600 <tcp_output_alloc_header>
 8013a0c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013a0e:	69bb      	ldr	r3, [r7, #24]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d102      	bne.n	8013a1a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013a14:	f04f 33ff 	mov.w	r3, #4294967295
 8013a18:	e04c      	b.n	8013ab4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013a1a:	69bb      	ldr	r3, [r7, #24]
 8013a1c:	685b      	ldr	r3, [r3, #4]
 8013a1e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013a20:	7ffb      	ldrb	r3, [r7, #31]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d011      	beq.n	8013a4a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013a26:	697b      	ldr	r3, [r7, #20]
 8013a28:	899b      	ldrh	r3, [r3, #12]
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	b21b      	sxth	r3, r3
 8013a2e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013a32:	b21c      	sxth	r4, r3
 8013a34:	2011      	movs	r0, #17
 8013a36:	f7f9 f88b 	bl	800cb50 <lwip_htons>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	b21b      	sxth	r3, r3
 8013a3e:	4323      	orrs	r3, r4
 8013a40:	b21b      	sxth	r3, r3
 8013a42:	b29a      	uxth	r2, r3
 8013a44:	697b      	ldr	r3, [r7, #20]
 8013a46:	819a      	strh	r2, [r3, #12]
 8013a48:	e010      	b.n	8013a6c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013a4a:	69bb      	ldr	r3, [r7, #24]
 8013a4c:	685b      	ldr	r3, [r3, #4]
 8013a4e:	3314      	adds	r3, #20
 8013a50:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013a52:	6a3b      	ldr	r3, [r7, #32]
 8013a54:	6858      	ldr	r0, [r3, #4]
 8013a56:	6a3b      	ldr	r3, [r7, #32]
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	891a      	ldrh	r2, [r3, #8]
 8013a5c:	6a3b      	ldr	r3, [r7, #32]
 8013a5e:	891b      	ldrh	r3, [r3, #8]
 8013a60:	1ad3      	subs	r3, r2, r3
 8013a62:	b29b      	uxth	r3, r3
 8013a64:	2201      	movs	r2, #1
 8013a66:	6939      	ldr	r1, [r7, #16]
 8013a68:	f7fa fe56 	bl	800e718 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013a6c:	6a3b      	ldr	r3, [r7, #32]
 8013a6e:	68db      	ldr	r3, [r3, #12]
 8013a70:	685b      	ldr	r3, [r3, #4]
 8013a72:	4618      	mov	r0, r3
 8013a74:	f7f9 f882 	bl	800cb7c <lwip_htonl>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	3301      	adds	r3, #1
 8013a7c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	1ad3      	subs	r3, r2, r3
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	da02      	bge.n	8013a90 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	68fa      	ldr	r2, [r7, #12]
 8013a8e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a94:	2200      	movs	r2, #0
 8013a96:	69b9      	ldr	r1, [r7, #24]
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f7ff fdef 	bl	801367c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013a9e:	687a      	ldr	r2, [r7, #4]
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	3304      	adds	r3, #4
 8013aa4:	69b9      	ldr	r1, [r7, #24]
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f7ff fe26 	bl	80136f8 <tcp_output_control_segment>
 8013aac:	4603      	mov	r3, r0
 8013aae:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013ab0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	372c      	adds	r7, #44	@ 0x2c
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd90      	pop	{r4, r7, pc}
 8013abc:	08019db0 	.word	0x08019db0
 8013ac0:	0801a5a8 	.word	0x0801a5a8
 8013ac4:	08019e04 	.word	0x08019e04

08013ac8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013ad0:	f7fa ff10 	bl	800e8f4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8013b00 <tcpip_tcp_timer+0x38>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d103      	bne.n	8013ae4 <tcpip_tcp_timer+0x1c>
 8013adc:	4b09      	ldr	r3, [pc, #36]	@ (8013b04 <tcpip_tcp_timer+0x3c>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d005      	beq.n	8013af0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	4908      	ldr	r1, [pc, #32]	@ (8013b08 <tcpip_tcp_timer+0x40>)
 8013ae8:	20fa      	movs	r0, #250	@ 0xfa
 8013aea:	f000 f8f3 	bl	8013cd4 <sys_timeout>
 8013aee:	e003      	b.n	8013af8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013af0:	4b06      	ldr	r3, [pc, #24]	@ (8013b0c <tcpip_tcp_timer+0x44>)
 8013af2:	2200      	movs	r2, #0
 8013af4:	601a      	str	r2, [r3, #0]
  }
}
 8013af6:	bf00      	nop
 8013af8:	bf00      	nop
 8013afa:	3708      	adds	r7, #8
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}
 8013b00:	20027458 	.word	0x20027458
 8013b04:	2002745c 	.word	0x2002745c
 8013b08:	08013ac9 	.word	0x08013ac9
 8013b0c:	200274a4 	.word	0x200274a4

08013b10 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013b14:	4b0a      	ldr	r3, [pc, #40]	@ (8013b40 <tcp_timer_needed+0x30>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d10f      	bne.n	8013b3c <tcp_timer_needed+0x2c>
 8013b1c:	4b09      	ldr	r3, [pc, #36]	@ (8013b44 <tcp_timer_needed+0x34>)
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d103      	bne.n	8013b2c <tcp_timer_needed+0x1c>
 8013b24:	4b08      	ldr	r3, [pc, #32]	@ (8013b48 <tcp_timer_needed+0x38>)
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d007      	beq.n	8013b3c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013b2c:	4b04      	ldr	r3, [pc, #16]	@ (8013b40 <tcp_timer_needed+0x30>)
 8013b2e:	2201      	movs	r2, #1
 8013b30:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013b32:	2200      	movs	r2, #0
 8013b34:	4905      	ldr	r1, [pc, #20]	@ (8013b4c <tcp_timer_needed+0x3c>)
 8013b36:	20fa      	movs	r0, #250	@ 0xfa
 8013b38:	f000 f8cc 	bl	8013cd4 <sys_timeout>
  }
}
 8013b3c:	bf00      	nop
 8013b3e:	bd80      	pop	{r7, pc}
 8013b40:	200274a4 	.word	0x200274a4
 8013b44:	20027458 	.word	0x20027458
 8013b48:	2002745c 	.word	0x2002745c
 8013b4c:	08013ac9 	.word	0x08013ac9

08013b50 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b086      	sub	sp, #24
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	60f8      	str	r0, [r7, #12]
 8013b58:	60b9      	str	r1, [r7, #8]
 8013b5a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013b5c:	200a      	movs	r0, #10
 8013b5e:	f7f9 fccb 	bl	800d4f8 <memp_malloc>
 8013b62:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013b64:	693b      	ldr	r3, [r7, #16]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d109      	bne.n	8013b7e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013b6a:	693b      	ldr	r3, [r7, #16]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d151      	bne.n	8013c14 <sys_timeout_abs+0xc4>
 8013b70:	4b2a      	ldr	r3, [pc, #168]	@ (8013c1c <sys_timeout_abs+0xcc>)
 8013b72:	22be      	movs	r2, #190	@ 0xbe
 8013b74:	492a      	ldr	r1, [pc, #168]	@ (8013c20 <sys_timeout_abs+0xd0>)
 8013b76:	482b      	ldr	r0, [pc, #172]	@ (8013c24 <sys_timeout_abs+0xd4>)
 8013b78:	f003 fb9c 	bl	80172b4 <iprintf>
    return;
 8013b7c:	e04a      	b.n	8013c14 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013b7e:	693b      	ldr	r3, [r7, #16]
 8013b80:	2200      	movs	r2, #0
 8013b82:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013b84:	693b      	ldr	r3, [r7, #16]
 8013b86:	68ba      	ldr	r2, [r7, #8]
 8013b88:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	687a      	ldr	r2, [r7, #4]
 8013b8e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013b90:	693b      	ldr	r3, [r7, #16]
 8013b92:	68fa      	ldr	r2, [r7, #12]
 8013b94:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013b96:	4b24      	ldr	r3, [pc, #144]	@ (8013c28 <sys_timeout_abs+0xd8>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d103      	bne.n	8013ba6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013b9e:	4a22      	ldr	r2, [pc, #136]	@ (8013c28 <sys_timeout_abs+0xd8>)
 8013ba0:	693b      	ldr	r3, [r7, #16]
 8013ba2:	6013      	str	r3, [r2, #0]
    return;
 8013ba4:	e037      	b.n	8013c16 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013ba6:	693b      	ldr	r3, [r7, #16]
 8013ba8:	685a      	ldr	r2, [r3, #4]
 8013baa:	4b1f      	ldr	r3, [pc, #124]	@ (8013c28 <sys_timeout_abs+0xd8>)
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	685b      	ldr	r3, [r3, #4]
 8013bb0:	1ad3      	subs	r3, r2, r3
 8013bb2:	0fdb      	lsrs	r3, r3, #31
 8013bb4:	f003 0301 	and.w	r3, r3, #1
 8013bb8:	b2db      	uxtb	r3, r3
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d007      	beq.n	8013bce <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8013c28 <sys_timeout_abs+0xd8>)
 8013bc0:	681a      	ldr	r2, [r3, #0]
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013bc6:	4a18      	ldr	r2, [pc, #96]	@ (8013c28 <sys_timeout_abs+0xd8>)
 8013bc8:	693b      	ldr	r3, [r7, #16]
 8013bca:	6013      	str	r3, [r2, #0]
 8013bcc:	e023      	b.n	8013c16 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013bce:	4b16      	ldr	r3, [pc, #88]	@ (8013c28 <sys_timeout_abs+0xd8>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	617b      	str	r3, [r7, #20]
 8013bd4:	e01a      	b.n	8013c0c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013bd6:	697b      	ldr	r3, [r7, #20]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d00b      	beq.n	8013bf6 <sys_timeout_abs+0xa6>
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	685a      	ldr	r2, [r3, #4]
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	685b      	ldr	r3, [r3, #4]
 8013be8:	1ad3      	subs	r3, r2, r3
 8013bea:	0fdb      	lsrs	r3, r3, #31
 8013bec:	f003 0301 	and.w	r3, r3, #1
 8013bf0:	b2db      	uxtb	r3, r3
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d007      	beq.n	8013c06 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	681a      	ldr	r2, [r3, #0]
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	693a      	ldr	r2, [r7, #16]
 8013c02:	601a      	str	r2, [r3, #0]
        break;
 8013c04:	e007      	b.n	8013c16 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013c06:	697b      	ldr	r3, [r7, #20]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	617b      	str	r3, [r7, #20]
 8013c0c:	697b      	ldr	r3, [r7, #20]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d1e1      	bne.n	8013bd6 <sys_timeout_abs+0x86>
 8013c12:	e000      	b.n	8013c16 <sys_timeout_abs+0xc6>
    return;
 8013c14:	bf00      	nop
      }
    }
  }
}
 8013c16:	3718      	adds	r7, #24
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}
 8013c1c:	0801a5cc 	.word	0x0801a5cc
 8013c20:	0801a600 	.word	0x0801a600
 8013c24:	0801a640 	.word	0x0801a640
 8013c28:	2002749c 	.word	0x2002749c

08013c2c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b086      	sub	sp, #24
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013c38:	697b      	ldr	r3, [r7, #20]
 8013c3a:	685b      	ldr	r3, [r3, #4]
 8013c3c:	4798      	blx	r3

  now = sys_now();
 8013c3e:	f7f4 fadb 	bl	80081f8 <sys_now>
 8013c42:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	681a      	ldr	r2, [r3, #0]
 8013c48:	4b0f      	ldr	r3, [pc, #60]	@ (8013c88 <lwip_cyclic_timer+0x5c>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	4413      	add	r3, r2
 8013c4e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013c50:	68fa      	ldr	r2, [r7, #12]
 8013c52:	693b      	ldr	r3, [r7, #16]
 8013c54:	1ad3      	subs	r3, r2, r3
 8013c56:	0fdb      	lsrs	r3, r3, #31
 8013c58:	f003 0301 	and.w	r3, r3, #1
 8013c5c:	b2db      	uxtb	r3, r3
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d009      	beq.n	8013c76 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	681a      	ldr	r2, [r3, #0]
 8013c66:	693b      	ldr	r3, [r7, #16]
 8013c68:	4413      	add	r3, r2
 8013c6a:	687a      	ldr	r2, [r7, #4]
 8013c6c:	4907      	ldr	r1, [pc, #28]	@ (8013c8c <lwip_cyclic_timer+0x60>)
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f7ff ff6e 	bl	8013b50 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013c74:	e004      	b.n	8013c80 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013c76:	687a      	ldr	r2, [r7, #4]
 8013c78:	4904      	ldr	r1, [pc, #16]	@ (8013c8c <lwip_cyclic_timer+0x60>)
 8013c7a:	68f8      	ldr	r0, [r7, #12]
 8013c7c:	f7ff ff68 	bl	8013b50 <sys_timeout_abs>
}
 8013c80:	bf00      	nop
 8013c82:	3718      	adds	r7, #24
 8013c84:	46bd      	mov	sp, r7
 8013c86:	bd80      	pop	{r7, pc}
 8013c88:	200274a0 	.word	0x200274a0
 8013c8c:	08013c2d 	.word	0x08013c2d

08013c90 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b082      	sub	sp, #8
 8013c94:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013c96:	2301      	movs	r3, #1
 8013c98:	607b      	str	r3, [r7, #4]
 8013c9a:	e00e      	b.n	8013cba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8013ccc <sys_timeouts_init+0x3c>)
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	00db      	lsls	r3, r3, #3
 8013ca8:	4a08      	ldr	r2, [pc, #32]	@ (8013ccc <sys_timeouts_init+0x3c>)
 8013caa:	4413      	add	r3, r2
 8013cac:	461a      	mov	r2, r3
 8013cae:	4908      	ldr	r1, [pc, #32]	@ (8013cd0 <sys_timeouts_init+0x40>)
 8013cb0:	f000 f810 	bl	8013cd4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	3301      	adds	r3, #1
 8013cb8:	607b      	str	r3, [r7, #4]
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	2b02      	cmp	r3, #2
 8013cbe:	d9ed      	bls.n	8013c9c <sys_timeouts_init+0xc>
  }
}
 8013cc0:	bf00      	nop
 8013cc2:	bf00      	nop
 8013cc4:	3708      	adds	r7, #8
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}
 8013cca:	bf00      	nop
 8013ccc:	0801b440 	.word	0x0801b440
 8013cd0:	08013c2d 	.word	0x08013c2d

08013cd4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b086      	sub	sp, #24
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	60f8      	str	r0, [r7, #12]
 8013cdc:	60b9      	str	r1, [r7, #8]
 8013cde:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013ce6:	d306      	bcc.n	8013cf6 <sys_timeout+0x22>
 8013ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8013d14 <sys_timeout+0x40>)
 8013cea:	f240 1229 	movw	r2, #297	@ 0x129
 8013cee:	490a      	ldr	r1, [pc, #40]	@ (8013d18 <sys_timeout+0x44>)
 8013cf0:	480a      	ldr	r0, [pc, #40]	@ (8013d1c <sys_timeout+0x48>)
 8013cf2:	f003 fadf 	bl	80172b4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013cf6:	f7f4 fa7f 	bl	80081f8 <sys_now>
 8013cfa:	4602      	mov	r2, r0
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	4413      	add	r3, r2
 8013d00:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013d02:	687a      	ldr	r2, [r7, #4]
 8013d04:	68b9      	ldr	r1, [r7, #8]
 8013d06:	6978      	ldr	r0, [r7, #20]
 8013d08:	f7ff ff22 	bl	8013b50 <sys_timeout_abs>
#endif
}
 8013d0c:	bf00      	nop
 8013d0e:	3718      	adds	r7, #24
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}
 8013d14:	0801a5cc 	.word	0x0801a5cc
 8013d18:	0801a668 	.word	0x0801a668
 8013d1c:	0801a640 	.word	0x0801a640

08013d20 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b084      	sub	sp, #16
 8013d24:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013d26:	f7f4 fa67 	bl	80081f8 <sys_now>
 8013d2a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013d2c:	4b17      	ldr	r3, [pc, #92]	@ (8013d8c <sys_check_timeouts+0x6c>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d022      	beq.n	8013d7e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	685b      	ldr	r3, [r3, #4]
 8013d3c:	68fa      	ldr	r2, [r7, #12]
 8013d3e:	1ad3      	subs	r3, r2, r3
 8013d40:	0fdb      	lsrs	r3, r3, #31
 8013d42:	f003 0301 	and.w	r3, r3, #1
 8013d46:	b2db      	uxtb	r3, r3
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d11a      	bne.n	8013d82 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	4a0e      	ldr	r2, [pc, #56]	@ (8013d8c <sys_check_timeouts+0x6c>)
 8013d52:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	689b      	ldr	r3, [r3, #8]
 8013d58:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	68db      	ldr	r3, [r3, #12]
 8013d5e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	685b      	ldr	r3, [r3, #4]
 8013d64:	4a0a      	ldr	r2, [pc, #40]	@ (8013d90 <sys_check_timeouts+0x70>)
 8013d66:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013d68:	68b9      	ldr	r1, [r7, #8]
 8013d6a:	200a      	movs	r0, #10
 8013d6c:	f7f9 fc3a 	bl	800d5e4 <memp_free>
    if (handler != NULL) {
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d0da      	beq.n	8013d2c <sys_check_timeouts+0xc>
      handler(arg);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	6838      	ldr	r0, [r7, #0]
 8013d7a:	4798      	blx	r3
  do {
 8013d7c:	e7d6      	b.n	8013d2c <sys_check_timeouts+0xc>
      return;
 8013d7e:	bf00      	nop
 8013d80:	e000      	b.n	8013d84 <sys_check_timeouts+0x64>
      return;
 8013d82:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013d84:	3710      	adds	r7, #16
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bd80      	pop	{r7, pc}
 8013d8a:	bf00      	nop
 8013d8c:	2002749c 	.word	0x2002749c
 8013d90:	200274a0 	.word	0x200274a0

08013d94 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b082      	sub	sp, #8
 8013d98:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013d9a:	4b16      	ldr	r3, [pc, #88]	@ (8013df4 <sys_timeouts_sleeptime+0x60>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d102      	bne.n	8013da8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013da2:	f04f 33ff 	mov.w	r3, #4294967295
 8013da6:	e020      	b.n	8013dea <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013da8:	f7f4 fa26 	bl	80081f8 <sys_now>
 8013dac:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013dae:	4b11      	ldr	r3, [pc, #68]	@ (8013df4 <sys_timeouts_sleeptime+0x60>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	685a      	ldr	r2, [r3, #4]
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	1ad3      	subs	r3, r2, r3
 8013db8:	0fdb      	lsrs	r3, r3, #31
 8013dba:	f003 0301 	and.w	r3, r3, #1
 8013dbe:	b2db      	uxtb	r3, r3
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d001      	beq.n	8013dc8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	e010      	b.n	8013dea <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8013df4 <sys_timeouts_sleeptime+0x60>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	685a      	ldr	r2, [r3, #4]
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	1ad3      	subs	r3, r2, r3
 8013dd2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013dd4:	683b      	ldr	r3, [r7, #0]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	da06      	bge.n	8013de8 <sys_timeouts_sleeptime+0x54>
 8013dda:	4b07      	ldr	r3, [pc, #28]	@ (8013df8 <sys_timeouts_sleeptime+0x64>)
 8013ddc:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8013de0:	4906      	ldr	r1, [pc, #24]	@ (8013dfc <sys_timeouts_sleeptime+0x68>)
 8013de2:	4807      	ldr	r0, [pc, #28]	@ (8013e00 <sys_timeouts_sleeptime+0x6c>)
 8013de4:	f003 fa66 	bl	80172b4 <iprintf>
    return ret;
 8013de8:	683b      	ldr	r3, [r7, #0]
  }
}
 8013dea:	4618      	mov	r0, r3
 8013dec:	3708      	adds	r7, #8
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}
 8013df2:	bf00      	nop
 8013df4:	2002749c 	.word	0x2002749c
 8013df8:	0801a5cc 	.word	0x0801a5cc
 8013dfc:	0801a6a0 	.word	0x0801a6a0
 8013e00:	0801a640 	.word	0x0801a640

08013e04 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013e08:	f003 f954 	bl	80170b4 <rand>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	b29b      	uxth	r3, r3
 8013e10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013e14:	b29b      	uxth	r3, r3
 8013e16:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013e1a:	b29a      	uxth	r2, r3
 8013e1c:	4b01      	ldr	r3, [pc, #4]	@ (8013e24 <udp_init+0x20>)
 8013e1e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013e20:	bf00      	nop
 8013e22:	bd80      	pop	{r7, pc}
 8013e24:	2000002c 	.word	0x2000002c

08013e28 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013e28:	b480      	push	{r7}
 8013e2a:	b083      	sub	sp, #12
 8013e2c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013e32:	4b17      	ldr	r3, [pc, #92]	@ (8013e90 <udp_new_port+0x68>)
 8013e34:	881b      	ldrh	r3, [r3, #0]
 8013e36:	1c5a      	adds	r2, r3, #1
 8013e38:	b291      	uxth	r1, r2
 8013e3a:	4a15      	ldr	r2, [pc, #84]	@ (8013e90 <udp_new_port+0x68>)
 8013e3c:	8011      	strh	r1, [r2, #0]
 8013e3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013e42:	4293      	cmp	r3, r2
 8013e44:	d103      	bne.n	8013e4e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013e46:	4b12      	ldr	r3, [pc, #72]	@ (8013e90 <udp_new_port+0x68>)
 8013e48:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013e4c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e4e:	4b11      	ldr	r3, [pc, #68]	@ (8013e94 <udp_new_port+0x6c>)
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	603b      	str	r3, [r7, #0]
 8013e54:	e011      	b.n	8013e7a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	8a5a      	ldrh	r2, [r3, #18]
 8013e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8013e90 <udp_new_port+0x68>)
 8013e5c:	881b      	ldrh	r3, [r3, #0]
 8013e5e:	429a      	cmp	r2, r3
 8013e60:	d108      	bne.n	8013e74 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013e62:	88fb      	ldrh	r3, [r7, #6]
 8013e64:	3301      	adds	r3, #1
 8013e66:	80fb      	strh	r3, [r7, #6]
 8013e68:	88fb      	ldrh	r3, [r7, #6]
 8013e6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013e6e:	d3e0      	bcc.n	8013e32 <udp_new_port+0xa>
        return 0;
 8013e70:	2300      	movs	r3, #0
 8013e72:	e007      	b.n	8013e84 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	68db      	ldr	r3, [r3, #12]
 8013e78:	603b      	str	r3, [r7, #0]
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d1ea      	bne.n	8013e56 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013e80:	4b03      	ldr	r3, [pc, #12]	@ (8013e90 <udp_new_port+0x68>)
 8013e82:	881b      	ldrh	r3, [r3, #0]
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	370c      	adds	r7, #12
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8e:	4770      	bx	lr
 8013e90:	2000002c 	.word	0x2000002c
 8013e94:	200274a8 	.word	0x200274a8

08013e98 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b084      	sub	sp, #16
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	60f8      	str	r0, [r7, #12]
 8013ea0:	60b9      	str	r1, [r7, #8]
 8013ea2:	4613      	mov	r3, r2
 8013ea4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d105      	bne.n	8013eb8 <udp_input_local_match+0x20>
 8013eac:	4b27      	ldr	r3, [pc, #156]	@ (8013f4c <udp_input_local_match+0xb4>)
 8013eae:	2287      	movs	r2, #135	@ 0x87
 8013eb0:	4927      	ldr	r1, [pc, #156]	@ (8013f50 <udp_input_local_match+0xb8>)
 8013eb2:	4828      	ldr	r0, [pc, #160]	@ (8013f54 <udp_input_local_match+0xbc>)
 8013eb4:	f003 f9fe 	bl	80172b4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d105      	bne.n	8013eca <udp_input_local_match+0x32>
 8013ebe:	4b23      	ldr	r3, [pc, #140]	@ (8013f4c <udp_input_local_match+0xb4>)
 8013ec0:	2288      	movs	r2, #136	@ 0x88
 8013ec2:	4925      	ldr	r1, [pc, #148]	@ (8013f58 <udp_input_local_match+0xc0>)
 8013ec4:	4823      	ldr	r0, [pc, #140]	@ (8013f54 <udp_input_local_match+0xbc>)
 8013ec6:	f003 f9f5 	bl	80172b4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	7a1b      	ldrb	r3, [r3, #8]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d00b      	beq.n	8013eea <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	7a1a      	ldrb	r2, [r3, #8]
 8013ed6:	4b21      	ldr	r3, [pc, #132]	@ (8013f5c <udp_input_local_match+0xc4>)
 8013ed8:	685b      	ldr	r3, [r3, #4]
 8013eda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013ede:	3301      	adds	r3, #1
 8013ee0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013ee2:	429a      	cmp	r2, r3
 8013ee4:	d001      	beq.n	8013eea <udp_input_local_match+0x52>
    return 0;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	e02b      	b.n	8013f42 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013eea:	79fb      	ldrb	r3, [r7, #7]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d018      	beq.n	8013f22 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d013      	beq.n	8013f1e <udp_input_local_match+0x86>
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d00f      	beq.n	8013f1e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013efe:	4b17      	ldr	r3, [pc, #92]	@ (8013f5c <udp_input_local_match+0xc4>)
 8013f00:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f06:	d00a      	beq.n	8013f1e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	681a      	ldr	r2, [r3, #0]
 8013f0c:	4b13      	ldr	r3, [pc, #76]	@ (8013f5c <udp_input_local_match+0xc4>)
 8013f0e:	695b      	ldr	r3, [r3, #20]
 8013f10:	405a      	eors	r2, r3
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	3308      	adds	r3, #8
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d110      	bne.n	8013f40 <udp_input_local_match+0xa8>
          return 1;
 8013f1e:	2301      	movs	r3, #1
 8013f20:	e00f      	b.n	8013f42 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d009      	beq.n	8013f3c <udp_input_local_match+0xa4>
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d005      	beq.n	8013f3c <udp_input_local_match+0xa4>
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	681a      	ldr	r2, [r3, #0]
 8013f34:	4b09      	ldr	r3, [pc, #36]	@ (8013f5c <udp_input_local_match+0xc4>)
 8013f36:	695b      	ldr	r3, [r3, #20]
 8013f38:	429a      	cmp	r2, r3
 8013f3a:	d101      	bne.n	8013f40 <udp_input_local_match+0xa8>
        return 1;
 8013f3c:	2301      	movs	r3, #1
 8013f3e:	e000      	b.n	8013f42 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013f40:	2300      	movs	r3, #0
}
 8013f42:	4618      	mov	r0, r3
 8013f44:	3710      	adds	r7, #16
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}
 8013f4a:	bf00      	nop
 8013f4c:	0801a6b4 	.word	0x0801a6b4
 8013f50:	0801a6e4 	.word	0x0801a6e4
 8013f54:	0801a708 	.word	0x0801a708
 8013f58:	0801a730 	.word	0x0801a730
 8013f5c:	2002434c 	.word	0x2002434c

08013f60 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013f60:	b590      	push	{r4, r7, lr}
 8013f62:	b08d      	sub	sp, #52	@ 0x34
 8013f64:	af02      	add	r7, sp, #8
 8013f66:	6078      	str	r0, [r7, #4]
 8013f68:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d105      	bne.n	8013f80 <udp_input+0x20>
 8013f74:	4b7c      	ldr	r3, [pc, #496]	@ (8014168 <udp_input+0x208>)
 8013f76:	22cf      	movs	r2, #207	@ 0xcf
 8013f78:	497c      	ldr	r1, [pc, #496]	@ (801416c <udp_input+0x20c>)
 8013f7a:	487d      	ldr	r0, [pc, #500]	@ (8014170 <udp_input+0x210>)
 8013f7c:	f003 f99a 	bl	80172b4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013f80:	683b      	ldr	r3, [r7, #0]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d105      	bne.n	8013f92 <udp_input+0x32>
 8013f86:	4b78      	ldr	r3, [pc, #480]	@ (8014168 <udp_input+0x208>)
 8013f88:	22d0      	movs	r2, #208	@ 0xd0
 8013f8a:	497a      	ldr	r1, [pc, #488]	@ (8014174 <udp_input+0x214>)
 8013f8c:	4878      	ldr	r0, [pc, #480]	@ (8014170 <udp_input+0x210>)
 8013f8e:	f003 f991 	bl	80172b4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	895b      	ldrh	r3, [r3, #10]
 8013f96:	2b07      	cmp	r3, #7
 8013f98:	d803      	bhi.n	8013fa2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013f9a:	6878      	ldr	r0, [r7, #4]
 8013f9c:	f7fa f9c6 	bl	800e32c <pbuf_free>
    goto end;
 8013fa0:	e0de      	b.n	8014160 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	685b      	ldr	r3, [r3, #4]
 8013fa6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013fa8:	4b73      	ldr	r3, [pc, #460]	@ (8014178 <udp_input+0x218>)
 8013faa:	695b      	ldr	r3, [r3, #20]
 8013fac:	4a72      	ldr	r2, [pc, #456]	@ (8014178 <udp_input+0x218>)
 8013fae:	6812      	ldr	r2, [r2, #0]
 8013fb0:	4611      	mov	r1, r2
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f001 fd48 	bl	8015a48 <ip4_addr_isbroadcast_u32>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013fbc:	697b      	ldr	r3, [r7, #20]
 8013fbe:	881b      	ldrh	r3, [r3, #0]
 8013fc0:	b29b      	uxth	r3, r3
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f7f8 fdc4 	bl	800cb50 <lwip_htons>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	885b      	ldrh	r3, [r3, #2]
 8013fd0:	b29b      	uxth	r3, r3
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7f8 fdbc 	bl	800cb50 <lwip_htons>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013fdc:	2300      	movs	r3, #0
 8013fde:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013fe8:	4b64      	ldr	r3, [pc, #400]	@ (801417c <udp_input+0x21c>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8013fee:	e054      	b.n	801409a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ff2:	8a5b      	ldrh	r3, [r3, #18]
 8013ff4:	89fa      	ldrh	r2, [r7, #14]
 8013ff6:	429a      	cmp	r2, r3
 8013ff8:	d14a      	bne.n	8014090 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013ffa:	7cfb      	ldrb	r3, [r7, #19]
 8013ffc:	461a      	mov	r2, r3
 8013ffe:	6839      	ldr	r1, [r7, #0]
 8014000:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014002:	f7ff ff49 	bl	8013e98 <udp_input_local_match>
 8014006:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014008:	2b00      	cmp	r3, #0
 801400a:	d041      	beq.n	8014090 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801400e:	7c1b      	ldrb	r3, [r3, #16]
 8014010:	f003 0304 	and.w	r3, r3, #4
 8014014:	2b00      	cmp	r3, #0
 8014016:	d11d      	bne.n	8014054 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014018:	69fb      	ldr	r3, [r7, #28]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d102      	bne.n	8014024 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014020:	61fb      	str	r3, [r7, #28]
 8014022:	e017      	b.n	8014054 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014024:	7cfb      	ldrb	r3, [r7, #19]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d014      	beq.n	8014054 <udp_input+0xf4>
 801402a:	4b53      	ldr	r3, [pc, #332]	@ (8014178 <udp_input+0x218>)
 801402c:	695b      	ldr	r3, [r3, #20]
 801402e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014032:	d10f      	bne.n	8014054 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014034:	69fb      	ldr	r3, [r7, #28]
 8014036:	681a      	ldr	r2, [r3, #0]
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	3304      	adds	r3, #4
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	429a      	cmp	r2, r3
 8014040:	d008      	beq.n	8014054 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014044:	681a      	ldr	r2, [r3, #0]
 8014046:	683b      	ldr	r3, [r7, #0]
 8014048:	3304      	adds	r3, #4
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	429a      	cmp	r2, r3
 801404e:	d101      	bne.n	8014054 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014052:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014056:	8a9b      	ldrh	r3, [r3, #20]
 8014058:	8a3a      	ldrh	r2, [r7, #16]
 801405a:	429a      	cmp	r2, r3
 801405c:	d118      	bne.n	8014090 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014060:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014062:	2b00      	cmp	r3, #0
 8014064:	d005      	beq.n	8014072 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014068:	685a      	ldr	r2, [r3, #4]
 801406a:	4b43      	ldr	r3, [pc, #268]	@ (8014178 <udp_input+0x218>)
 801406c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801406e:	429a      	cmp	r2, r3
 8014070:	d10e      	bne.n	8014090 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014072:	6a3b      	ldr	r3, [r7, #32]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d014      	beq.n	80140a2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801407a:	68da      	ldr	r2, [r3, #12]
 801407c:	6a3b      	ldr	r3, [r7, #32]
 801407e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014080:	4b3e      	ldr	r3, [pc, #248]	@ (801417c <udp_input+0x21c>)
 8014082:	681a      	ldr	r2, [r3, #0]
 8014084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014086:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014088:	4a3c      	ldr	r2, [pc, #240]	@ (801417c <udp_input+0x21c>)
 801408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801408c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801408e:	e008      	b.n	80140a2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014092:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014096:	68db      	ldr	r3, [r3, #12]
 8014098:	627b      	str	r3, [r7, #36]	@ 0x24
 801409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801409c:	2b00      	cmp	r3, #0
 801409e:	d1a7      	bne.n	8013ff0 <udp_input+0x90>
 80140a0:	e000      	b.n	80140a4 <udp_input+0x144>
        break;
 80140a2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80140a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d101      	bne.n	80140ae <udp_input+0x14e>
    pcb = uncon_pcb;
 80140aa:	69fb      	ldr	r3, [r7, #28]
 80140ac:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80140ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d002      	beq.n	80140ba <udp_input+0x15a>
    for_us = 1;
 80140b4:	2301      	movs	r3, #1
 80140b6:	76fb      	strb	r3, [r7, #27]
 80140b8:	e00a      	b.n	80140d0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80140ba:	683b      	ldr	r3, [r7, #0]
 80140bc:	3304      	adds	r3, #4
 80140be:	681a      	ldr	r2, [r3, #0]
 80140c0:	4b2d      	ldr	r3, [pc, #180]	@ (8014178 <udp_input+0x218>)
 80140c2:	695b      	ldr	r3, [r3, #20]
 80140c4:	429a      	cmp	r2, r3
 80140c6:	bf0c      	ite	eq
 80140c8:	2301      	moveq	r3, #1
 80140ca:	2300      	movne	r3, #0
 80140cc:	b2db      	uxtb	r3, r3
 80140ce:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80140d0:	7efb      	ldrb	r3, [r7, #27]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d041      	beq.n	801415a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80140d6:	2108      	movs	r1, #8
 80140d8:	6878      	ldr	r0, [r7, #4]
 80140da:	f7fa f8a1 	bl	800e220 <pbuf_remove_header>
 80140de:	4603      	mov	r3, r0
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d00a      	beq.n	80140fa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80140e4:	4b20      	ldr	r3, [pc, #128]	@ (8014168 <udp_input+0x208>)
 80140e6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80140ea:	4925      	ldr	r1, [pc, #148]	@ (8014180 <udp_input+0x220>)
 80140ec:	4820      	ldr	r0, [pc, #128]	@ (8014170 <udp_input+0x210>)
 80140ee:	f003 f8e1 	bl	80172b4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f7fa f91a 	bl	800e32c <pbuf_free>
      goto end;
 80140f8:	e032      	b.n	8014160 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80140fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d012      	beq.n	8014126 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014102:	699b      	ldr	r3, [r3, #24]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d00a      	beq.n	801411e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801410a:	699c      	ldr	r4, [r3, #24]
 801410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801410e:	69d8      	ldr	r0, [r3, #28]
 8014110:	8a3b      	ldrh	r3, [r7, #16]
 8014112:	9300      	str	r3, [sp, #0]
 8014114:	4b1b      	ldr	r3, [pc, #108]	@ (8014184 <udp_input+0x224>)
 8014116:	687a      	ldr	r2, [r7, #4]
 8014118:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801411a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801411c:	e021      	b.n	8014162 <udp_input+0x202>
        pbuf_free(p);
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f7fa f904 	bl	800e32c <pbuf_free>
        goto end;
 8014124:	e01c      	b.n	8014160 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014126:	7cfb      	ldrb	r3, [r7, #19]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d112      	bne.n	8014152 <udp_input+0x1f2>
 801412c:	4b12      	ldr	r3, [pc, #72]	@ (8014178 <udp_input+0x218>)
 801412e:	695b      	ldr	r3, [r3, #20]
 8014130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014134:	2be0      	cmp	r3, #224	@ 0xe0
 8014136:	d00c      	beq.n	8014152 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014138:	4b0f      	ldr	r3, [pc, #60]	@ (8014178 <udp_input+0x218>)
 801413a:	899b      	ldrh	r3, [r3, #12]
 801413c:	3308      	adds	r3, #8
 801413e:	b29b      	uxth	r3, r3
 8014140:	b21b      	sxth	r3, r3
 8014142:	4619      	mov	r1, r3
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f7fa f8de 	bl	800e306 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801414a:	2103      	movs	r1, #3
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f001 f95b 	bl	8015408 <icmp_dest_unreach>
      pbuf_free(p);
 8014152:	6878      	ldr	r0, [r7, #4]
 8014154:	f7fa f8ea 	bl	800e32c <pbuf_free>
  return;
 8014158:	e003      	b.n	8014162 <udp_input+0x202>
    pbuf_free(p);
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f7fa f8e6 	bl	800e32c <pbuf_free>
  return;
 8014160:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014162:	372c      	adds	r7, #44	@ 0x2c
 8014164:	46bd      	mov	sp, r7
 8014166:	bd90      	pop	{r4, r7, pc}
 8014168:	0801a6b4 	.word	0x0801a6b4
 801416c:	0801a758 	.word	0x0801a758
 8014170:	0801a708 	.word	0x0801a708
 8014174:	0801a770 	.word	0x0801a770
 8014178:	2002434c 	.word	0x2002434c
 801417c:	200274a8 	.word	0x200274a8
 8014180:	0801a78c 	.word	0x0801a78c
 8014184:	2002435c 	.word	0x2002435c

08014188 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b086      	sub	sp, #24
 801418c:	af00      	add	r7, sp, #0
 801418e:	60f8      	str	r0, [r7, #12]
 8014190:	60b9      	str	r1, [r7, #8]
 8014192:	4613      	mov	r3, r2
 8014194:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014196:	68bb      	ldr	r3, [r7, #8]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d101      	bne.n	80141a0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801419c:	4b39      	ldr	r3, [pc, #228]	@ (8014284 <udp_bind+0xfc>)
 801419e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d109      	bne.n	80141ba <udp_bind+0x32>
 80141a6:	4b38      	ldr	r3, [pc, #224]	@ (8014288 <udp_bind+0x100>)
 80141a8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80141ac:	4937      	ldr	r1, [pc, #220]	@ (801428c <udp_bind+0x104>)
 80141ae:	4838      	ldr	r0, [pc, #224]	@ (8014290 <udp_bind+0x108>)
 80141b0:	f003 f880 	bl	80172b4 <iprintf>
 80141b4:	f06f 030f 	mvn.w	r3, #15
 80141b8:	e060      	b.n	801427c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80141ba:	2300      	movs	r3, #0
 80141bc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80141be:	4b35      	ldr	r3, [pc, #212]	@ (8014294 <udp_bind+0x10c>)
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	617b      	str	r3, [r7, #20]
 80141c4:	e009      	b.n	80141da <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80141c6:	68fa      	ldr	r2, [r7, #12]
 80141c8:	697b      	ldr	r3, [r7, #20]
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d102      	bne.n	80141d4 <udp_bind+0x4c>
      rebind = 1;
 80141ce:	2301      	movs	r3, #1
 80141d0:	74fb      	strb	r3, [r7, #19]
      break;
 80141d2:	e005      	b.n	80141e0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80141d4:	697b      	ldr	r3, [r7, #20]
 80141d6:	68db      	ldr	r3, [r3, #12]
 80141d8:	617b      	str	r3, [r7, #20]
 80141da:	697b      	ldr	r3, [r7, #20]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d1f2      	bne.n	80141c6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80141e0:	88fb      	ldrh	r3, [r7, #6]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d109      	bne.n	80141fa <udp_bind+0x72>
    port = udp_new_port();
 80141e6:	f7ff fe1f 	bl	8013e28 <udp_new_port>
 80141ea:	4603      	mov	r3, r0
 80141ec:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80141ee:	88fb      	ldrh	r3, [r7, #6]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d12c      	bne.n	801424e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80141f4:	f06f 0307 	mvn.w	r3, #7
 80141f8:	e040      	b.n	801427c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80141fa:	4b26      	ldr	r3, [pc, #152]	@ (8014294 <udp_bind+0x10c>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	617b      	str	r3, [r7, #20]
 8014200:	e022      	b.n	8014248 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014202:	68fa      	ldr	r2, [r7, #12]
 8014204:	697b      	ldr	r3, [r7, #20]
 8014206:	429a      	cmp	r2, r3
 8014208:	d01b      	beq.n	8014242 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801420a:	697b      	ldr	r3, [r7, #20]
 801420c:	8a5b      	ldrh	r3, [r3, #18]
 801420e:	88fa      	ldrh	r2, [r7, #6]
 8014210:	429a      	cmp	r2, r3
 8014212:	d116      	bne.n	8014242 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014214:	697b      	ldr	r3, [r7, #20]
 8014216:	681a      	ldr	r2, [r3, #0]
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801421c:	429a      	cmp	r2, r3
 801421e:	d00d      	beq.n	801423c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d00a      	beq.n	801423c <udp_bind+0xb4>
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d006      	beq.n	801423c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801422e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014230:	2b00      	cmp	r3, #0
 8014232:	d003      	beq.n	801423c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014234:	697b      	ldr	r3, [r7, #20]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d102      	bne.n	8014242 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801423c:	f06f 0307 	mvn.w	r3, #7
 8014240:	e01c      	b.n	801427c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	68db      	ldr	r3, [r3, #12]
 8014246:	617b      	str	r3, [r7, #20]
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d1d9      	bne.n	8014202 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801424e:	68bb      	ldr	r3, [r7, #8]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d002      	beq.n	801425a <udp_bind+0xd2>
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	e000      	b.n	801425c <udp_bind+0xd4>
 801425a:	2300      	movs	r3, #0
 801425c:	68fa      	ldr	r2, [r7, #12]
 801425e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	88fa      	ldrh	r2, [r7, #6]
 8014264:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014266:	7cfb      	ldrb	r3, [r7, #19]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d106      	bne.n	801427a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801426c:	4b09      	ldr	r3, [pc, #36]	@ (8014294 <udp_bind+0x10c>)
 801426e:	681a      	ldr	r2, [r3, #0]
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014274:	4a07      	ldr	r2, [pc, #28]	@ (8014294 <udp_bind+0x10c>)
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801427a:	2300      	movs	r3, #0
}
 801427c:	4618      	mov	r0, r3
 801427e:	3718      	adds	r7, #24
 8014280:	46bd      	mov	sp, r7
 8014282:	bd80      	pop	{r7, pc}
 8014284:	0801b458 	.word	0x0801b458
 8014288:	0801a6b4 	.word	0x0801a6b4
 801428c:	0801a97c 	.word	0x0801a97c
 8014290:	0801a708 	.word	0x0801a708
 8014294:	200274a8 	.word	0x200274a8

08014298 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b084      	sub	sp, #16
 801429c:	af00      	add	r7, sp, #0
 801429e:	60f8      	str	r0, [r7, #12]
 80142a0:	60b9      	str	r1, [r7, #8]
 80142a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d107      	bne.n	80142ba <udp_recv+0x22>
 80142aa:	4b08      	ldr	r3, [pc, #32]	@ (80142cc <udp_recv+0x34>)
 80142ac:	f240 428a 	movw	r2, #1162	@ 0x48a
 80142b0:	4907      	ldr	r1, [pc, #28]	@ (80142d0 <udp_recv+0x38>)
 80142b2:	4808      	ldr	r0, [pc, #32]	@ (80142d4 <udp_recv+0x3c>)
 80142b4:	f002 fffe 	bl	80172b4 <iprintf>
 80142b8:	e005      	b.n	80142c6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	68ba      	ldr	r2, [r7, #8]
 80142be:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	687a      	ldr	r2, [r7, #4]
 80142c4:	61da      	str	r2, [r3, #28]
}
 80142c6:	3710      	adds	r7, #16
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}
 80142cc:	0801a6b4 	.word	0x0801a6b4
 80142d0:	0801a9e8 	.word	0x0801a9e8
 80142d4:	0801a708 	.word	0x0801a708

080142d8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80142de:	2000      	movs	r0, #0
 80142e0:	f7f9 f90a 	bl	800d4f8 <memp_malloc>
 80142e4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d007      	beq.n	80142fc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80142ec:	2220      	movs	r2, #32
 80142ee:	2100      	movs	r1, #0
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f003 f937 	bl	8017564 <memset>
    pcb->ttl = UDP_TTL;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	22ff      	movs	r2, #255	@ 0xff
 80142fa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80142fc:	687b      	ldr	r3, [r7, #4]
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3708      	adds	r7, #8
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}
	...

08014308 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014308:	b480      	push	{r7}
 801430a:	b085      	sub	sp, #20
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
 8014310:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d01e      	beq.n	8014356 <udp_netif_ip_addr_changed+0x4e>
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d01a      	beq.n	8014356 <udp_netif_ip_addr_changed+0x4e>
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d017      	beq.n	8014356 <udp_netif_ip_addr_changed+0x4e>
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d013      	beq.n	8014356 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801432e:	4b0d      	ldr	r3, [pc, #52]	@ (8014364 <udp_netif_ip_addr_changed+0x5c>)
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	60fb      	str	r3, [r7, #12]
 8014334:	e00c      	b.n	8014350 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	681a      	ldr	r2, [r3, #0]
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	429a      	cmp	r2, r3
 8014340:	d103      	bne.n	801434a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014342:	683b      	ldr	r3, [r7, #0]
 8014344:	681a      	ldr	r2, [r3, #0]
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	68db      	ldr	r3, [r3, #12]
 801434e:	60fb      	str	r3, [r7, #12]
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d1ef      	bne.n	8014336 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014356:	bf00      	nop
 8014358:	3714      	adds	r7, #20
 801435a:	46bd      	mov	sp, r7
 801435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014360:	4770      	bx	lr
 8014362:	bf00      	nop
 8014364:	200274a8 	.word	0x200274a8

08014368 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b082      	sub	sp, #8
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014370:	4915      	ldr	r1, [pc, #84]	@ (80143c8 <etharp_free_entry+0x60>)
 8014372:	687a      	ldr	r2, [r7, #4]
 8014374:	4613      	mov	r3, r2
 8014376:	005b      	lsls	r3, r3, #1
 8014378:	4413      	add	r3, r2
 801437a:	00db      	lsls	r3, r3, #3
 801437c:	440b      	add	r3, r1
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d013      	beq.n	80143ac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014384:	4910      	ldr	r1, [pc, #64]	@ (80143c8 <etharp_free_entry+0x60>)
 8014386:	687a      	ldr	r2, [r7, #4]
 8014388:	4613      	mov	r3, r2
 801438a:	005b      	lsls	r3, r3, #1
 801438c:	4413      	add	r3, r2
 801438e:	00db      	lsls	r3, r3, #3
 8014390:	440b      	add	r3, r1
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	4618      	mov	r0, r3
 8014396:	f7f9 ffc9 	bl	800e32c <pbuf_free>
    arp_table[i].q = NULL;
 801439a:	490b      	ldr	r1, [pc, #44]	@ (80143c8 <etharp_free_entry+0x60>)
 801439c:	687a      	ldr	r2, [r7, #4]
 801439e:	4613      	mov	r3, r2
 80143a0:	005b      	lsls	r3, r3, #1
 80143a2:	4413      	add	r3, r2
 80143a4:	00db      	lsls	r3, r3, #3
 80143a6:	440b      	add	r3, r1
 80143a8:	2200      	movs	r2, #0
 80143aa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80143ac:	4906      	ldr	r1, [pc, #24]	@ (80143c8 <etharp_free_entry+0x60>)
 80143ae:	687a      	ldr	r2, [r7, #4]
 80143b0:	4613      	mov	r3, r2
 80143b2:	005b      	lsls	r3, r3, #1
 80143b4:	4413      	add	r3, r2
 80143b6:	00db      	lsls	r3, r3, #3
 80143b8:	440b      	add	r3, r1
 80143ba:	3314      	adds	r3, #20
 80143bc:	2200      	movs	r2, #0
 80143be:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80143c0:	bf00      	nop
 80143c2:	3708      	adds	r7, #8
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd80      	pop	{r7, pc}
 80143c8:	200274ac 	.word	0x200274ac

080143cc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b082      	sub	sp, #8
 80143d0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80143d2:	2300      	movs	r3, #0
 80143d4:	607b      	str	r3, [r7, #4]
 80143d6:	e096      	b.n	8014506 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80143d8:	494f      	ldr	r1, [pc, #316]	@ (8014518 <etharp_tmr+0x14c>)
 80143da:	687a      	ldr	r2, [r7, #4]
 80143dc:	4613      	mov	r3, r2
 80143de:	005b      	lsls	r3, r3, #1
 80143e0:	4413      	add	r3, r2
 80143e2:	00db      	lsls	r3, r3, #3
 80143e4:	440b      	add	r3, r1
 80143e6:	3314      	adds	r3, #20
 80143e8:	781b      	ldrb	r3, [r3, #0]
 80143ea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80143ec:	78fb      	ldrb	r3, [r7, #3]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	f000 8086 	beq.w	8014500 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80143f4:	4948      	ldr	r1, [pc, #288]	@ (8014518 <etharp_tmr+0x14c>)
 80143f6:	687a      	ldr	r2, [r7, #4]
 80143f8:	4613      	mov	r3, r2
 80143fa:	005b      	lsls	r3, r3, #1
 80143fc:	4413      	add	r3, r2
 80143fe:	00db      	lsls	r3, r3, #3
 8014400:	440b      	add	r3, r1
 8014402:	3312      	adds	r3, #18
 8014404:	881b      	ldrh	r3, [r3, #0]
 8014406:	3301      	adds	r3, #1
 8014408:	b298      	uxth	r0, r3
 801440a:	4943      	ldr	r1, [pc, #268]	@ (8014518 <etharp_tmr+0x14c>)
 801440c:	687a      	ldr	r2, [r7, #4]
 801440e:	4613      	mov	r3, r2
 8014410:	005b      	lsls	r3, r3, #1
 8014412:	4413      	add	r3, r2
 8014414:	00db      	lsls	r3, r3, #3
 8014416:	440b      	add	r3, r1
 8014418:	3312      	adds	r3, #18
 801441a:	4602      	mov	r2, r0
 801441c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801441e:	493e      	ldr	r1, [pc, #248]	@ (8014518 <etharp_tmr+0x14c>)
 8014420:	687a      	ldr	r2, [r7, #4]
 8014422:	4613      	mov	r3, r2
 8014424:	005b      	lsls	r3, r3, #1
 8014426:	4413      	add	r3, r2
 8014428:	00db      	lsls	r3, r3, #3
 801442a:	440b      	add	r3, r1
 801442c:	3312      	adds	r3, #18
 801442e:	881b      	ldrh	r3, [r3, #0]
 8014430:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8014434:	d215      	bcs.n	8014462 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014436:	4938      	ldr	r1, [pc, #224]	@ (8014518 <etharp_tmr+0x14c>)
 8014438:	687a      	ldr	r2, [r7, #4]
 801443a:	4613      	mov	r3, r2
 801443c:	005b      	lsls	r3, r3, #1
 801443e:	4413      	add	r3, r2
 8014440:	00db      	lsls	r3, r3, #3
 8014442:	440b      	add	r3, r1
 8014444:	3314      	adds	r3, #20
 8014446:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014448:	2b01      	cmp	r3, #1
 801444a:	d10e      	bne.n	801446a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801444c:	4932      	ldr	r1, [pc, #200]	@ (8014518 <etharp_tmr+0x14c>)
 801444e:	687a      	ldr	r2, [r7, #4]
 8014450:	4613      	mov	r3, r2
 8014452:	005b      	lsls	r3, r3, #1
 8014454:	4413      	add	r3, r2
 8014456:	00db      	lsls	r3, r3, #3
 8014458:	440b      	add	r3, r1
 801445a:	3312      	adds	r3, #18
 801445c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801445e:	2b04      	cmp	r3, #4
 8014460:	d903      	bls.n	801446a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	f7ff ff80 	bl	8014368 <etharp_free_entry>
 8014468:	e04a      	b.n	8014500 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801446a:	492b      	ldr	r1, [pc, #172]	@ (8014518 <etharp_tmr+0x14c>)
 801446c:	687a      	ldr	r2, [r7, #4]
 801446e:	4613      	mov	r3, r2
 8014470:	005b      	lsls	r3, r3, #1
 8014472:	4413      	add	r3, r2
 8014474:	00db      	lsls	r3, r3, #3
 8014476:	440b      	add	r3, r1
 8014478:	3314      	adds	r3, #20
 801447a:	781b      	ldrb	r3, [r3, #0]
 801447c:	2b03      	cmp	r3, #3
 801447e:	d10a      	bne.n	8014496 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014480:	4925      	ldr	r1, [pc, #148]	@ (8014518 <etharp_tmr+0x14c>)
 8014482:	687a      	ldr	r2, [r7, #4]
 8014484:	4613      	mov	r3, r2
 8014486:	005b      	lsls	r3, r3, #1
 8014488:	4413      	add	r3, r2
 801448a:	00db      	lsls	r3, r3, #3
 801448c:	440b      	add	r3, r1
 801448e:	3314      	adds	r3, #20
 8014490:	2204      	movs	r2, #4
 8014492:	701a      	strb	r2, [r3, #0]
 8014494:	e034      	b.n	8014500 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014496:	4920      	ldr	r1, [pc, #128]	@ (8014518 <etharp_tmr+0x14c>)
 8014498:	687a      	ldr	r2, [r7, #4]
 801449a:	4613      	mov	r3, r2
 801449c:	005b      	lsls	r3, r3, #1
 801449e:	4413      	add	r3, r2
 80144a0:	00db      	lsls	r3, r3, #3
 80144a2:	440b      	add	r3, r1
 80144a4:	3314      	adds	r3, #20
 80144a6:	781b      	ldrb	r3, [r3, #0]
 80144a8:	2b04      	cmp	r3, #4
 80144aa:	d10a      	bne.n	80144c2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80144ac:	491a      	ldr	r1, [pc, #104]	@ (8014518 <etharp_tmr+0x14c>)
 80144ae:	687a      	ldr	r2, [r7, #4]
 80144b0:	4613      	mov	r3, r2
 80144b2:	005b      	lsls	r3, r3, #1
 80144b4:	4413      	add	r3, r2
 80144b6:	00db      	lsls	r3, r3, #3
 80144b8:	440b      	add	r3, r1
 80144ba:	3314      	adds	r3, #20
 80144bc:	2202      	movs	r2, #2
 80144be:	701a      	strb	r2, [r3, #0]
 80144c0:	e01e      	b.n	8014500 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80144c2:	4915      	ldr	r1, [pc, #84]	@ (8014518 <etharp_tmr+0x14c>)
 80144c4:	687a      	ldr	r2, [r7, #4]
 80144c6:	4613      	mov	r3, r2
 80144c8:	005b      	lsls	r3, r3, #1
 80144ca:	4413      	add	r3, r2
 80144cc:	00db      	lsls	r3, r3, #3
 80144ce:	440b      	add	r3, r1
 80144d0:	3314      	adds	r3, #20
 80144d2:	781b      	ldrb	r3, [r3, #0]
 80144d4:	2b01      	cmp	r3, #1
 80144d6:	d113      	bne.n	8014500 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80144d8:	490f      	ldr	r1, [pc, #60]	@ (8014518 <etharp_tmr+0x14c>)
 80144da:	687a      	ldr	r2, [r7, #4]
 80144dc:	4613      	mov	r3, r2
 80144de:	005b      	lsls	r3, r3, #1
 80144e0:	4413      	add	r3, r2
 80144e2:	00db      	lsls	r3, r3, #3
 80144e4:	440b      	add	r3, r1
 80144e6:	3308      	adds	r3, #8
 80144e8:	6818      	ldr	r0, [r3, #0]
 80144ea:	687a      	ldr	r2, [r7, #4]
 80144ec:	4613      	mov	r3, r2
 80144ee:	005b      	lsls	r3, r3, #1
 80144f0:	4413      	add	r3, r2
 80144f2:	00db      	lsls	r3, r3, #3
 80144f4:	4a08      	ldr	r2, [pc, #32]	@ (8014518 <etharp_tmr+0x14c>)
 80144f6:	4413      	add	r3, r2
 80144f8:	3304      	adds	r3, #4
 80144fa:	4619      	mov	r1, r3
 80144fc:	f000 fe6e 	bl	80151dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	3301      	adds	r3, #1
 8014504:	607b      	str	r3, [r7, #4]
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	2b09      	cmp	r3, #9
 801450a:	f77f af65 	ble.w	80143d8 <etharp_tmr+0xc>
      }
    }
  }
}
 801450e:	bf00      	nop
 8014510:	bf00      	nop
 8014512:	3708      	adds	r7, #8
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}
 8014518:	200274ac 	.word	0x200274ac

0801451c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b08a      	sub	sp, #40	@ 0x28
 8014520:	af00      	add	r7, sp, #0
 8014522:	60f8      	str	r0, [r7, #12]
 8014524:	460b      	mov	r3, r1
 8014526:	607a      	str	r2, [r7, #4]
 8014528:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801452a:	230a      	movs	r3, #10
 801452c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801452e:	230a      	movs	r3, #10
 8014530:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014532:	230a      	movs	r3, #10
 8014534:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8014536:	2300      	movs	r3, #0
 8014538:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801453a:	230a      	movs	r3, #10
 801453c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801453e:	2300      	movs	r3, #0
 8014540:	83bb      	strh	r3, [r7, #28]
 8014542:	2300      	movs	r3, #0
 8014544:	837b      	strh	r3, [r7, #26]
 8014546:	2300      	movs	r3, #0
 8014548:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801454a:	2300      	movs	r3, #0
 801454c:	843b      	strh	r3, [r7, #32]
 801454e:	e0ae      	b.n	80146ae <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014550:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014554:	49a6      	ldr	r1, [pc, #664]	@ (80147f0 <etharp_find_entry+0x2d4>)
 8014556:	4613      	mov	r3, r2
 8014558:	005b      	lsls	r3, r3, #1
 801455a:	4413      	add	r3, r2
 801455c:	00db      	lsls	r3, r3, #3
 801455e:	440b      	add	r3, r1
 8014560:	3314      	adds	r3, #20
 8014562:	781b      	ldrb	r3, [r3, #0]
 8014564:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014566:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801456a:	2b0a      	cmp	r3, #10
 801456c:	d105      	bne.n	801457a <etharp_find_entry+0x5e>
 801456e:	7dfb      	ldrb	r3, [r7, #23]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d102      	bne.n	801457a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014574:	8c3b      	ldrh	r3, [r7, #32]
 8014576:	847b      	strh	r3, [r7, #34]	@ 0x22
 8014578:	e095      	b.n	80146a6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801457a:	7dfb      	ldrb	r3, [r7, #23]
 801457c:	2b00      	cmp	r3, #0
 801457e:	f000 8092 	beq.w	80146a6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014582:	7dfb      	ldrb	r3, [r7, #23]
 8014584:	2b01      	cmp	r3, #1
 8014586:	d009      	beq.n	801459c <etharp_find_entry+0x80>
 8014588:	7dfb      	ldrb	r3, [r7, #23]
 801458a:	2b01      	cmp	r3, #1
 801458c:	d806      	bhi.n	801459c <etharp_find_entry+0x80>
 801458e:	4b99      	ldr	r3, [pc, #612]	@ (80147f4 <etharp_find_entry+0x2d8>)
 8014590:	f240 1223 	movw	r2, #291	@ 0x123
 8014594:	4998      	ldr	r1, [pc, #608]	@ (80147f8 <etharp_find_entry+0x2dc>)
 8014596:	4899      	ldr	r0, [pc, #612]	@ (80147fc <etharp_find_entry+0x2e0>)
 8014598:	f002 fe8c 	bl	80172b4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d020      	beq.n	80145e4 <etharp_find_entry+0xc8>
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	6819      	ldr	r1, [r3, #0]
 80145a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145aa:	4891      	ldr	r0, [pc, #580]	@ (80147f0 <etharp_find_entry+0x2d4>)
 80145ac:	4613      	mov	r3, r2
 80145ae:	005b      	lsls	r3, r3, #1
 80145b0:	4413      	add	r3, r2
 80145b2:	00db      	lsls	r3, r3, #3
 80145b4:	4403      	add	r3, r0
 80145b6:	3304      	adds	r3, #4
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	4299      	cmp	r1, r3
 80145bc:	d112      	bne.n	80145e4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d00c      	beq.n	80145de <etharp_find_entry+0xc2>
 80145c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145c8:	4989      	ldr	r1, [pc, #548]	@ (80147f0 <etharp_find_entry+0x2d4>)
 80145ca:	4613      	mov	r3, r2
 80145cc:	005b      	lsls	r3, r3, #1
 80145ce:	4413      	add	r3, r2
 80145d0:	00db      	lsls	r3, r3, #3
 80145d2:	440b      	add	r3, r1
 80145d4:	3308      	adds	r3, #8
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	687a      	ldr	r2, [r7, #4]
 80145da:	429a      	cmp	r2, r3
 80145dc:	d102      	bne.n	80145e4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80145de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80145e2:	e100      	b.n	80147e6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80145e4:	7dfb      	ldrb	r3, [r7, #23]
 80145e6:	2b01      	cmp	r3, #1
 80145e8:	d140      	bne.n	801466c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80145ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145ee:	4980      	ldr	r1, [pc, #512]	@ (80147f0 <etharp_find_entry+0x2d4>)
 80145f0:	4613      	mov	r3, r2
 80145f2:	005b      	lsls	r3, r3, #1
 80145f4:	4413      	add	r3, r2
 80145f6:	00db      	lsls	r3, r3, #3
 80145f8:	440b      	add	r3, r1
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d01a      	beq.n	8014636 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014600:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014604:	497a      	ldr	r1, [pc, #488]	@ (80147f0 <etharp_find_entry+0x2d4>)
 8014606:	4613      	mov	r3, r2
 8014608:	005b      	lsls	r3, r3, #1
 801460a:	4413      	add	r3, r2
 801460c:	00db      	lsls	r3, r3, #3
 801460e:	440b      	add	r3, r1
 8014610:	3312      	adds	r3, #18
 8014612:	881b      	ldrh	r3, [r3, #0]
 8014614:	8bba      	ldrh	r2, [r7, #28]
 8014616:	429a      	cmp	r2, r3
 8014618:	d845      	bhi.n	80146a6 <etharp_find_entry+0x18a>
            old_queue = i;
 801461a:	8c3b      	ldrh	r3, [r7, #32]
 801461c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801461e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014622:	4973      	ldr	r1, [pc, #460]	@ (80147f0 <etharp_find_entry+0x2d4>)
 8014624:	4613      	mov	r3, r2
 8014626:	005b      	lsls	r3, r3, #1
 8014628:	4413      	add	r3, r2
 801462a:	00db      	lsls	r3, r3, #3
 801462c:	440b      	add	r3, r1
 801462e:	3312      	adds	r3, #18
 8014630:	881b      	ldrh	r3, [r3, #0]
 8014632:	83bb      	strh	r3, [r7, #28]
 8014634:	e037      	b.n	80146a6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014636:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801463a:	496d      	ldr	r1, [pc, #436]	@ (80147f0 <etharp_find_entry+0x2d4>)
 801463c:	4613      	mov	r3, r2
 801463e:	005b      	lsls	r3, r3, #1
 8014640:	4413      	add	r3, r2
 8014642:	00db      	lsls	r3, r3, #3
 8014644:	440b      	add	r3, r1
 8014646:	3312      	adds	r3, #18
 8014648:	881b      	ldrh	r3, [r3, #0]
 801464a:	8b7a      	ldrh	r2, [r7, #26]
 801464c:	429a      	cmp	r2, r3
 801464e:	d82a      	bhi.n	80146a6 <etharp_find_entry+0x18a>
            old_pending = i;
 8014650:	8c3b      	ldrh	r3, [r7, #32]
 8014652:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8014654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014658:	4965      	ldr	r1, [pc, #404]	@ (80147f0 <etharp_find_entry+0x2d4>)
 801465a:	4613      	mov	r3, r2
 801465c:	005b      	lsls	r3, r3, #1
 801465e:	4413      	add	r3, r2
 8014660:	00db      	lsls	r3, r3, #3
 8014662:	440b      	add	r3, r1
 8014664:	3312      	adds	r3, #18
 8014666:	881b      	ldrh	r3, [r3, #0]
 8014668:	837b      	strh	r3, [r7, #26]
 801466a:	e01c      	b.n	80146a6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801466c:	7dfb      	ldrb	r3, [r7, #23]
 801466e:	2b01      	cmp	r3, #1
 8014670:	d919      	bls.n	80146a6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014672:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014676:	495e      	ldr	r1, [pc, #376]	@ (80147f0 <etharp_find_entry+0x2d4>)
 8014678:	4613      	mov	r3, r2
 801467a:	005b      	lsls	r3, r3, #1
 801467c:	4413      	add	r3, r2
 801467e:	00db      	lsls	r3, r3, #3
 8014680:	440b      	add	r3, r1
 8014682:	3312      	adds	r3, #18
 8014684:	881b      	ldrh	r3, [r3, #0]
 8014686:	8b3a      	ldrh	r2, [r7, #24]
 8014688:	429a      	cmp	r2, r3
 801468a:	d80c      	bhi.n	80146a6 <etharp_find_entry+0x18a>
            old_stable = i;
 801468c:	8c3b      	ldrh	r3, [r7, #32]
 801468e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8014690:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014694:	4956      	ldr	r1, [pc, #344]	@ (80147f0 <etharp_find_entry+0x2d4>)
 8014696:	4613      	mov	r3, r2
 8014698:	005b      	lsls	r3, r3, #1
 801469a:	4413      	add	r3, r2
 801469c:	00db      	lsls	r3, r3, #3
 801469e:	440b      	add	r3, r1
 80146a0:	3312      	adds	r3, #18
 80146a2:	881b      	ldrh	r3, [r3, #0]
 80146a4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80146a6:	8c3b      	ldrh	r3, [r7, #32]
 80146a8:	3301      	adds	r3, #1
 80146aa:	b29b      	uxth	r3, r3
 80146ac:	843b      	strh	r3, [r7, #32]
 80146ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80146b2:	2b09      	cmp	r3, #9
 80146b4:	f77f af4c 	ble.w	8014550 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80146b8:	7afb      	ldrb	r3, [r7, #11]
 80146ba:	f003 0302 	and.w	r3, r3, #2
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d108      	bne.n	80146d4 <etharp_find_entry+0x1b8>
 80146c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80146c6:	2b0a      	cmp	r3, #10
 80146c8:	d107      	bne.n	80146da <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80146ca:	7afb      	ldrb	r3, [r7, #11]
 80146cc:	f003 0301 	and.w	r3, r3, #1
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d102      	bne.n	80146da <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80146d4:	f04f 33ff 	mov.w	r3, #4294967295
 80146d8:	e085      	b.n	80147e6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80146da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80146de:	2b09      	cmp	r3, #9
 80146e0:	dc02      	bgt.n	80146e8 <etharp_find_entry+0x1cc>
    i = empty;
 80146e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80146e4:	843b      	strh	r3, [r7, #32]
 80146e6:	e039      	b.n	801475c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80146e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80146ec:	2b09      	cmp	r3, #9
 80146ee:	dc14      	bgt.n	801471a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80146f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80146f2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80146f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146f8:	493d      	ldr	r1, [pc, #244]	@ (80147f0 <etharp_find_entry+0x2d4>)
 80146fa:	4613      	mov	r3, r2
 80146fc:	005b      	lsls	r3, r3, #1
 80146fe:	4413      	add	r3, r2
 8014700:	00db      	lsls	r3, r3, #3
 8014702:	440b      	add	r3, r1
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d018      	beq.n	801473c <etharp_find_entry+0x220>
 801470a:	4b3a      	ldr	r3, [pc, #232]	@ (80147f4 <etharp_find_entry+0x2d8>)
 801470c:	f240 126d 	movw	r2, #365	@ 0x16d
 8014710:	493b      	ldr	r1, [pc, #236]	@ (8014800 <etharp_find_entry+0x2e4>)
 8014712:	483a      	ldr	r0, [pc, #232]	@ (80147fc <etharp_find_entry+0x2e0>)
 8014714:	f002 fdce 	bl	80172b4 <iprintf>
 8014718:	e010      	b.n	801473c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801471a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801471e:	2b09      	cmp	r3, #9
 8014720:	dc02      	bgt.n	8014728 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014722:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014724:	843b      	strh	r3, [r7, #32]
 8014726:	e009      	b.n	801473c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014728:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801472c:	2b09      	cmp	r3, #9
 801472e:	dc02      	bgt.n	8014736 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014730:	8bfb      	ldrh	r3, [r7, #30]
 8014732:	843b      	strh	r3, [r7, #32]
 8014734:	e002      	b.n	801473c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014736:	f04f 33ff 	mov.w	r3, #4294967295
 801473a:	e054      	b.n	80147e6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801473c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014740:	2b09      	cmp	r3, #9
 8014742:	dd06      	ble.n	8014752 <etharp_find_entry+0x236>
 8014744:	4b2b      	ldr	r3, [pc, #172]	@ (80147f4 <etharp_find_entry+0x2d8>)
 8014746:	f240 127f 	movw	r2, #383	@ 0x17f
 801474a:	492e      	ldr	r1, [pc, #184]	@ (8014804 <etharp_find_entry+0x2e8>)
 801474c:	482b      	ldr	r0, [pc, #172]	@ (80147fc <etharp_find_entry+0x2e0>)
 801474e:	f002 fdb1 	bl	80172b4 <iprintf>
    etharp_free_entry(i);
 8014752:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014756:	4618      	mov	r0, r3
 8014758:	f7ff fe06 	bl	8014368 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801475c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014760:	2b09      	cmp	r3, #9
 8014762:	dd06      	ble.n	8014772 <etharp_find_entry+0x256>
 8014764:	4b23      	ldr	r3, [pc, #140]	@ (80147f4 <etharp_find_entry+0x2d8>)
 8014766:	f240 1283 	movw	r2, #387	@ 0x183
 801476a:	4926      	ldr	r1, [pc, #152]	@ (8014804 <etharp_find_entry+0x2e8>)
 801476c:	4823      	ldr	r0, [pc, #140]	@ (80147fc <etharp_find_entry+0x2e0>)
 801476e:	f002 fda1 	bl	80172b4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014772:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014776:	491e      	ldr	r1, [pc, #120]	@ (80147f0 <etharp_find_entry+0x2d4>)
 8014778:	4613      	mov	r3, r2
 801477a:	005b      	lsls	r3, r3, #1
 801477c:	4413      	add	r3, r2
 801477e:	00db      	lsls	r3, r3, #3
 8014780:	440b      	add	r3, r1
 8014782:	3314      	adds	r3, #20
 8014784:	781b      	ldrb	r3, [r3, #0]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d006      	beq.n	8014798 <etharp_find_entry+0x27c>
 801478a:	4b1a      	ldr	r3, [pc, #104]	@ (80147f4 <etharp_find_entry+0x2d8>)
 801478c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8014790:	491d      	ldr	r1, [pc, #116]	@ (8014808 <etharp_find_entry+0x2ec>)
 8014792:	481a      	ldr	r0, [pc, #104]	@ (80147fc <etharp_find_entry+0x2e0>)
 8014794:	f002 fd8e 	bl	80172b4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d00b      	beq.n	80147b6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801479e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	6819      	ldr	r1, [r3, #0]
 80147a6:	4812      	ldr	r0, [pc, #72]	@ (80147f0 <etharp_find_entry+0x2d4>)
 80147a8:	4613      	mov	r3, r2
 80147aa:	005b      	lsls	r3, r3, #1
 80147ac:	4413      	add	r3, r2
 80147ae:	00db      	lsls	r3, r3, #3
 80147b0:	4403      	add	r3, r0
 80147b2:	3304      	adds	r3, #4
 80147b4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80147b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147ba:	490d      	ldr	r1, [pc, #52]	@ (80147f0 <etharp_find_entry+0x2d4>)
 80147bc:	4613      	mov	r3, r2
 80147be:	005b      	lsls	r3, r3, #1
 80147c0:	4413      	add	r3, r2
 80147c2:	00db      	lsls	r3, r3, #3
 80147c4:	440b      	add	r3, r1
 80147c6:	3312      	adds	r3, #18
 80147c8:	2200      	movs	r2, #0
 80147ca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80147cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147d0:	4907      	ldr	r1, [pc, #28]	@ (80147f0 <etharp_find_entry+0x2d4>)
 80147d2:	4613      	mov	r3, r2
 80147d4:	005b      	lsls	r3, r3, #1
 80147d6:	4413      	add	r3, r2
 80147d8:	00db      	lsls	r3, r3, #3
 80147da:	440b      	add	r3, r1
 80147dc:	3308      	adds	r3, #8
 80147de:	687a      	ldr	r2, [r7, #4]
 80147e0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80147e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	3728      	adds	r7, #40	@ 0x28
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bd80      	pop	{r7, pc}
 80147ee:	bf00      	nop
 80147f0:	200274ac 	.word	0x200274ac
 80147f4:	0801aa18 	.word	0x0801aa18
 80147f8:	0801aa50 	.word	0x0801aa50
 80147fc:	0801aa90 	.word	0x0801aa90
 8014800:	0801aab8 	.word	0x0801aab8
 8014804:	0801aad0 	.word	0x0801aad0
 8014808:	0801aae4 	.word	0x0801aae4

0801480c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b088      	sub	sp, #32
 8014810:	af02      	add	r7, sp, #8
 8014812:	60f8      	str	r0, [r7, #12]
 8014814:	60b9      	str	r1, [r7, #8]
 8014816:	607a      	str	r2, [r7, #4]
 8014818:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014820:	2b06      	cmp	r3, #6
 8014822:	d006      	beq.n	8014832 <etharp_update_arp_entry+0x26>
 8014824:	4b48      	ldr	r3, [pc, #288]	@ (8014948 <etharp_update_arp_entry+0x13c>)
 8014826:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801482a:	4948      	ldr	r1, [pc, #288]	@ (801494c <etharp_update_arp_entry+0x140>)
 801482c:	4848      	ldr	r0, [pc, #288]	@ (8014950 <etharp_update_arp_entry+0x144>)
 801482e:	f002 fd41 	bl	80172b4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014832:	68bb      	ldr	r3, [r7, #8]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d012      	beq.n	801485e <etharp_update_arp_entry+0x52>
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d00e      	beq.n	801485e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	68f9      	ldr	r1, [r7, #12]
 8014846:	4618      	mov	r0, r3
 8014848:	f001 f8fe 	bl	8015a48 <ip4_addr_isbroadcast_u32>
 801484c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801484e:	2b00      	cmp	r3, #0
 8014850:	d105      	bne.n	801485e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014852:	68bb      	ldr	r3, [r7, #8]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801485a:	2be0      	cmp	r3, #224	@ 0xe0
 801485c:	d102      	bne.n	8014864 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801485e:	f06f 030f 	mvn.w	r3, #15
 8014862:	e06c      	b.n	801493e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014864:	78fb      	ldrb	r3, [r7, #3]
 8014866:	68fa      	ldr	r2, [r7, #12]
 8014868:	4619      	mov	r1, r3
 801486a:	68b8      	ldr	r0, [r7, #8]
 801486c:	f7ff fe56 	bl	801451c <etharp_find_entry>
 8014870:	4603      	mov	r3, r0
 8014872:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014874:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014878:	2b00      	cmp	r3, #0
 801487a:	da02      	bge.n	8014882 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801487c:	8afb      	ldrh	r3, [r7, #22]
 801487e:	b25b      	sxtb	r3, r3
 8014880:	e05d      	b.n	801493e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014882:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014886:	4933      	ldr	r1, [pc, #204]	@ (8014954 <etharp_update_arp_entry+0x148>)
 8014888:	4613      	mov	r3, r2
 801488a:	005b      	lsls	r3, r3, #1
 801488c:	4413      	add	r3, r2
 801488e:	00db      	lsls	r3, r3, #3
 8014890:	440b      	add	r3, r1
 8014892:	3314      	adds	r3, #20
 8014894:	2202      	movs	r2, #2
 8014896:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014898:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801489c:	492d      	ldr	r1, [pc, #180]	@ (8014954 <etharp_update_arp_entry+0x148>)
 801489e:	4613      	mov	r3, r2
 80148a0:	005b      	lsls	r3, r3, #1
 80148a2:	4413      	add	r3, r2
 80148a4:	00db      	lsls	r3, r3, #3
 80148a6:	440b      	add	r3, r1
 80148a8:	3308      	adds	r3, #8
 80148aa:	68fa      	ldr	r2, [r7, #12]
 80148ac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80148ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148b2:	4613      	mov	r3, r2
 80148b4:	005b      	lsls	r3, r3, #1
 80148b6:	4413      	add	r3, r2
 80148b8:	00db      	lsls	r3, r3, #3
 80148ba:	3308      	adds	r3, #8
 80148bc:	4a25      	ldr	r2, [pc, #148]	@ (8014954 <etharp_update_arp_entry+0x148>)
 80148be:	4413      	add	r3, r2
 80148c0:	3304      	adds	r3, #4
 80148c2:	2206      	movs	r2, #6
 80148c4:	6879      	ldr	r1, [r7, #4]
 80148c6:	4618      	mov	r0, r3
 80148c8:	f002 ff1f 	bl	801770a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80148cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148d0:	4920      	ldr	r1, [pc, #128]	@ (8014954 <etharp_update_arp_entry+0x148>)
 80148d2:	4613      	mov	r3, r2
 80148d4:	005b      	lsls	r3, r3, #1
 80148d6:	4413      	add	r3, r2
 80148d8:	00db      	lsls	r3, r3, #3
 80148da:	440b      	add	r3, r1
 80148dc:	3312      	adds	r3, #18
 80148de:	2200      	movs	r2, #0
 80148e0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80148e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148e6:	491b      	ldr	r1, [pc, #108]	@ (8014954 <etharp_update_arp_entry+0x148>)
 80148e8:	4613      	mov	r3, r2
 80148ea:	005b      	lsls	r3, r3, #1
 80148ec:	4413      	add	r3, r2
 80148ee:	00db      	lsls	r3, r3, #3
 80148f0:	440b      	add	r3, r1
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d021      	beq.n	801493c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80148f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148fc:	4915      	ldr	r1, [pc, #84]	@ (8014954 <etharp_update_arp_entry+0x148>)
 80148fe:	4613      	mov	r3, r2
 8014900:	005b      	lsls	r3, r3, #1
 8014902:	4413      	add	r3, r2
 8014904:	00db      	lsls	r3, r3, #3
 8014906:	440b      	add	r3, r1
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801490c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014910:	4910      	ldr	r1, [pc, #64]	@ (8014954 <etharp_update_arp_entry+0x148>)
 8014912:	4613      	mov	r3, r2
 8014914:	005b      	lsls	r3, r3, #1
 8014916:	4413      	add	r3, r2
 8014918:	00db      	lsls	r3, r3, #3
 801491a:	440b      	add	r3, r1
 801491c:	2200      	movs	r2, #0
 801491e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014926:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801492a:	9300      	str	r3, [sp, #0]
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	6939      	ldr	r1, [r7, #16]
 8014930:	68f8      	ldr	r0, [r7, #12]
 8014932:	f002 f827 	bl	8016984 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014936:	6938      	ldr	r0, [r7, #16]
 8014938:	f7f9 fcf8 	bl	800e32c <pbuf_free>
  }
  return ERR_OK;
 801493c:	2300      	movs	r3, #0
}
 801493e:	4618      	mov	r0, r3
 8014940:	3718      	adds	r7, #24
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}
 8014946:	bf00      	nop
 8014948:	0801aa18 	.word	0x0801aa18
 801494c:	0801ab10 	.word	0x0801ab10
 8014950:	0801aa90 	.word	0x0801aa90
 8014954:	200274ac 	.word	0x200274ac

08014958 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b084      	sub	sp, #16
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014960:	2300      	movs	r3, #0
 8014962:	60fb      	str	r3, [r7, #12]
 8014964:	e01e      	b.n	80149a4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014966:	4913      	ldr	r1, [pc, #76]	@ (80149b4 <etharp_cleanup_netif+0x5c>)
 8014968:	68fa      	ldr	r2, [r7, #12]
 801496a:	4613      	mov	r3, r2
 801496c:	005b      	lsls	r3, r3, #1
 801496e:	4413      	add	r3, r2
 8014970:	00db      	lsls	r3, r3, #3
 8014972:	440b      	add	r3, r1
 8014974:	3314      	adds	r3, #20
 8014976:	781b      	ldrb	r3, [r3, #0]
 8014978:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801497a:	7afb      	ldrb	r3, [r7, #11]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d00e      	beq.n	801499e <etharp_cleanup_netif+0x46>
 8014980:	490c      	ldr	r1, [pc, #48]	@ (80149b4 <etharp_cleanup_netif+0x5c>)
 8014982:	68fa      	ldr	r2, [r7, #12]
 8014984:	4613      	mov	r3, r2
 8014986:	005b      	lsls	r3, r3, #1
 8014988:	4413      	add	r3, r2
 801498a:	00db      	lsls	r3, r3, #3
 801498c:	440b      	add	r3, r1
 801498e:	3308      	adds	r3, #8
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	687a      	ldr	r2, [r7, #4]
 8014994:	429a      	cmp	r2, r3
 8014996:	d102      	bne.n	801499e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014998:	68f8      	ldr	r0, [r7, #12]
 801499a:	f7ff fce5 	bl	8014368 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	3301      	adds	r3, #1
 80149a2:	60fb      	str	r3, [r7, #12]
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	2b09      	cmp	r3, #9
 80149a8:	dddd      	ble.n	8014966 <etharp_cleanup_netif+0xe>
    }
  }
}
 80149aa:	bf00      	nop
 80149ac:	bf00      	nop
 80149ae:	3710      	adds	r7, #16
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}
 80149b4:	200274ac 	.word	0x200274ac

080149b8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80149b8:	b5b0      	push	{r4, r5, r7, lr}
 80149ba:	b08a      	sub	sp, #40	@ 0x28
 80149bc:	af04      	add	r7, sp, #16
 80149be:	6078      	str	r0, [r7, #4]
 80149c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80149c2:	683b      	ldr	r3, [r7, #0]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d107      	bne.n	80149d8 <etharp_input+0x20>
 80149c8:	4b3d      	ldr	r3, [pc, #244]	@ (8014ac0 <etharp_input+0x108>)
 80149ca:	f240 228a 	movw	r2, #650	@ 0x28a
 80149ce:	493d      	ldr	r1, [pc, #244]	@ (8014ac4 <etharp_input+0x10c>)
 80149d0:	483d      	ldr	r0, [pc, #244]	@ (8014ac8 <etharp_input+0x110>)
 80149d2:	f002 fc6f 	bl	80172b4 <iprintf>
 80149d6:	e06f      	b.n	8014ab8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	685b      	ldr	r3, [r3, #4]
 80149dc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	881b      	ldrh	r3, [r3, #0]
 80149e2:	b29b      	uxth	r3, r3
 80149e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80149e8:	d10c      	bne.n	8014a04 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80149ee:	2b06      	cmp	r3, #6
 80149f0:	d108      	bne.n	8014a04 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80149f2:	693b      	ldr	r3, [r7, #16]
 80149f4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80149f6:	2b04      	cmp	r3, #4
 80149f8:	d104      	bne.n	8014a04 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80149fa:	693b      	ldr	r3, [r7, #16]
 80149fc:	885b      	ldrh	r3, [r3, #2]
 80149fe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014a00:	2b08      	cmp	r3, #8
 8014a02:	d003      	beq.n	8014a0c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f7f9 fc91 	bl	800e32c <pbuf_free>
    return;
 8014a0a:	e055      	b.n	8014ab8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014a0c:	693b      	ldr	r3, [r7, #16]
 8014a0e:	330e      	adds	r3, #14
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014a14:	693b      	ldr	r3, [r7, #16]
 8014a16:	3318      	adds	r3, #24
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	3304      	adds	r3, #4
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d102      	bne.n	8014a2c <etharp_input+0x74>
    for_us = 0;
 8014a26:	2300      	movs	r3, #0
 8014a28:	75fb      	strb	r3, [r7, #23]
 8014a2a:	e009      	b.n	8014a40 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014a2c:	68ba      	ldr	r2, [r7, #8]
 8014a2e:	683b      	ldr	r3, [r7, #0]
 8014a30:	3304      	adds	r3, #4
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	429a      	cmp	r2, r3
 8014a36:	bf0c      	ite	eq
 8014a38:	2301      	moveq	r3, #1
 8014a3a:	2300      	movne	r3, #0
 8014a3c:	b2db      	uxtb	r3, r3
 8014a3e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014a40:	693b      	ldr	r3, [r7, #16]
 8014a42:	f103 0208 	add.w	r2, r3, #8
 8014a46:	7dfb      	ldrb	r3, [r7, #23]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d001      	beq.n	8014a50 <etharp_input+0x98>
 8014a4c:	2301      	movs	r3, #1
 8014a4e:	e000      	b.n	8014a52 <etharp_input+0x9a>
 8014a50:	2302      	movs	r3, #2
 8014a52:	f107 010c 	add.w	r1, r7, #12
 8014a56:	6838      	ldr	r0, [r7, #0]
 8014a58:	f7ff fed8 	bl	801480c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014a5c:	693b      	ldr	r3, [r7, #16]
 8014a5e:	88db      	ldrh	r3, [r3, #6]
 8014a60:	b29b      	uxth	r3, r3
 8014a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014a66:	d003      	beq.n	8014a70 <etharp_input+0xb8>
 8014a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014a6c:	d01e      	beq.n	8014aac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014a6e:	e020      	b.n	8014ab2 <etharp_input+0xfa>
      if (for_us) {
 8014a70:	7dfb      	ldrb	r3, [r7, #23]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d01c      	beq.n	8014ab0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014a7c:	693b      	ldr	r3, [r7, #16]
 8014a7e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014a82:	683b      	ldr	r3, [r7, #0]
 8014a84:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8014a88:	683b      	ldr	r3, [r7, #0]
 8014a8a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014a8c:	693a      	ldr	r2, [r7, #16]
 8014a8e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014a90:	2102      	movs	r1, #2
 8014a92:	9103      	str	r1, [sp, #12]
 8014a94:	f107 010c 	add.w	r1, r7, #12
 8014a98:	9102      	str	r1, [sp, #8]
 8014a9a:	9201      	str	r2, [sp, #4]
 8014a9c:	9300      	str	r3, [sp, #0]
 8014a9e:	462b      	mov	r3, r5
 8014aa0:	4622      	mov	r2, r4
 8014aa2:	4601      	mov	r1, r0
 8014aa4:	6838      	ldr	r0, [r7, #0]
 8014aa6:	f000 faeb 	bl	8015080 <etharp_raw>
      break;
 8014aaa:	e001      	b.n	8014ab0 <etharp_input+0xf8>
      break;
 8014aac:	bf00      	nop
 8014aae:	e000      	b.n	8014ab2 <etharp_input+0xfa>
      break;
 8014ab0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f7f9 fc3a 	bl	800e32c <pbuf_free>
}
 8014ab8:	3718      	adds	r7, #24
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bdb0      	pop	{r4, r5, r7, pc}
 8014abe:	bf00      	nop
 8014ac0:	0801aa18 	.word	0x0801aa18
 8014ac4:	0801ab68 	.word	0x0801ab68
 8014ac8:	0801aa90 	.word	0x0801aa90

08014acc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b086      	sub	sp, #24
 8014ad0:	af02      	add	r7, sp, #8
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	60b9      	str	r1, [r7, #8]
 8014ad6:	4613      	mov	r3, r2
 8014ad8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014ada:	79fa      	ldrb	r2, [r7, #7]
 8014adc:	4944      	ldr	r1, [pc, #272]	@ (8014bf0 <etharp_output_to_arp_index+0x124>)
 8014ade:	4613      	mov	r3, r2
 8014ae0:	005b      	lsls	r3, r3, #1
 8014ae2:	4413      	add	r3, r2
 8014ae4:	00db      	lsls	r3, r3, #3
 8014ae6:	440b      	add	r3, r1
 8014ae8:	3314      	adds	r3, #20
 8014aea:	781b      	ldrb	r3, [r3, #0]
 8014aec:	2b01      	cmp	r3, #1
 8014aee:	d806      	bhi.n	8014afe <etharp_output_to_arp_index+0x32>
 8014af0:	4b40      	ldr	r3, [pc, #256]	@ (8014bf4 <etharp_output_to_arp_index+0x128>)
 8014af2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014af6:	4940      	ldr	r1, [pc, #256]	@ (8014bf8 <etharp_output_to_arp_index+0x12c>)
 8014af8:	4840      	ldr	r0, [pc, #256]	@ (8014bfc <etharp_output_to_arp_index+0x130>)
 8014afa:	f002 fbdb 	bl	80172b4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014afe:	79fa      	ldrb	r2, [r7, #7]
 8014b00:	493b      	ldr	r1, [pc, #236]	@ (8014bf0 <etharp_output_to_arp_index+0x124>)
 8014b02:	4613      	mov	r3, r2
 8014b04:	005b      	lsls	r3, r3, #1
 8014b06:	4413      	add	r3, r2
 8014b08:	00db      	lsls	r3, r3, #3
 8014b0a:	440b      	add	r3, r1
 8014b0c:	3314      	adds	r3, #20
 8014b0e:	781b      	ldrb	r3, [r3, #0]
 8014b10:	2b02      	cmp	r3, #2
 8014b12:	d153      	bne.n	8014bbc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014b14:	79fa      	ldrb	r2, [r7, #7]
 8014b16:	4936      	ldr	r1, [pc, #216]	@ (8014bf0 <etharp_output_to_arp_index+0x124>)
 8014b18:	4613      	mov	r3, r2
 8014b1a:	005b      	lsls	r3, r3, #1
 8014b1c:	4413      	add	r3, r2
 8014b1e:	00db      	lsls	r3, r3, #3
 8014b20:	440b      	add	r3, r1
 8014b22:	3312      	adds	r3, #18
 8014b24:	881b      	ldrh	r3, [r3, #0]
 8014b26:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8014b2a:	d919      	bls.n	8014b60 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014b2c:	79fa      	ldrb	r2, [r7, #7]
 8014b2e:	4613      	mov	r3, r2
 8014b30:	005b      	lsls	r3, r3, #1
 8014b32:	4413      	add	r3, r2
 8014b34:	00db      	lsls	r3, r3, #3
 8014b36:	4a2e      	ldr	r2, [pc, #184]	@ (8014bf0 <etharp_output_to_arp_index+0x124>)
 8014b38:	4413      	add	r3, r2
 8014b3a:	3304      	adds	r3, #4
 8014b3c:	4619      	mov	r1, r3
 8014b3e:	68f8      	ldr	r0, [r7, #12]
 8014b40:	f000 fb4c 	bl	80151dc <etharp_request>
 8014b44:	4603      	mov	r3, r0
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d138      	bne.n	8014bbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014b4a:	79fa      	ldrb	r2, [r7, #7]
 8014b4c:	4928      	ldr	r1, [pc, #160]	@ (8014bf0 <etharp_output_to_arp_index+0x124>)
 8014b4e:	4613      	mov	r3, r2
 8014b50:	005b      	lsls	r3, r3, #1
 8014b52:	4413      	add	r3, r2
 8014b54:	00db      	lsls	r3, r3, #3
 8014b56:	440b      	add	r3, r1
 8014b58:	3314      	adds	r3, #20
 8014b5a:	2203      	movs	r2, #3
 8014b5c:	701a      	strb	r2, [r3, #0]
 8014b5e:	e02d      	b.n	8014bbc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014b60:	79fa      	ldrb	r2, [r7, #7]
 8014b62:	4923      	ldr	r1, [pc, #140]	@ (8014bf0 <etharp_output_to_arp_index+0x124>)
 8014b64:	4613      	mov	r3, r2
 8014b66:	005b      	lsls	r3, r3, #1
 8014b68:	4413      	add	r3, r2
 8014b6a:	00db      	lsls	r3, r3, #3
 8014b6c:	440b      	add	r3, r1
 8014b6e:	3312      	adds	r3, #18
 8014b70:	881b      	ldrh	r3, [r3, #0]
 8014b72:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8014b76:	d321      	bcc.n	8014bbc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014b78:	79fa      	ldrb	r2, [r7, #7]
 8014b7a:	4613      	mov	r3, r2
 8014b7c:	005b      	lsls	r3, r3, #1
 8014b7e:	4413      	add	r3, r2
 8014b80:	00db      	lsls	r3, r3, #3
 8014b82:	4a1b      	ldr	r2, [pc, #108]	@ (8014bf0 <etharp_output_to_arp_index+0x124>)
 8014b84:	4413      	add	r3, r2
 8014b86:	1d19      	adds	r1, r3, #4
 8014b88:	79fa      	ldrb	r2, [r7, #7]
 8014b8a:	4613      	mov	r3, r2
 8014b8c:	005b      	lsls	r3, r3, #1
 8014b8e:	4413      	add	r3, r2
 8014b90:	00db      	lsls	r3, r3, #3
 8014b92:	3308      	adds	r3, #8
 8014b94:	4a16      	ldr	r2, [pc, #88]	@ (8014bf0 <etharp_output_to_arp_index+0x124>)
 8014b96:	4413      	add	r3, r2
 8014b98:	3304      	adds	r3, #4
 8014b9a:	461a      	mov	r2, r3
 8014b9c:	68f8      	ldr	r0, [r7, #12]
 8014b9e:	f000 fafb 	bl	8015198 <etharp_request_dst>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d109      	bne.n	8014bbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014ba8:	79fa      	ldrb	r2, [r7, #7]
 8014baa:	4911      	ldr	r1, [pc, #68]	@ (8014bf0 <etharp_output_to_arp_index+0x124>)
 8014bac:	4613      	mov	r3, r2
 8014bae:	005b      	lsls	r3, r3, #1
 8014bb0:	4413      	add	r3, r2
 8014bb2:	00db      	lsls	r3, r3, #3
 8014bb4:	440b      	add	r3, r1
 8014bb6:	3314      	adds	r3, #20
 8014bb8:	2203      	movs	r2, #3
 8014bba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8014bc2:	79fa      	ldrb	r2, [r7, #7]
 8014bc4:	4613      	mov	r3, r2
 8014bc6:	005b      	lsls	r3, r3, #1
 8014bc8:	4413      	add	r3, r2
 8014bca:	00db      	lsls	r3, r3, #3
 8014bcc:	3308      	adds	r3, #8
 8014bce:	4a08      	ldr	r2, [pc, #32]	@ (8014bf0 <etharp_output_to_arp_index+0x124>)
 8014bd0:	4413      	add	r3, r2
 8014bd2:	3304      	adds	r3, #4
 8014bd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014bd8:	9200      	str	r2, [sp, #0]
 8014bda:	460a      	mov	r2, r1
 8014bdc:	68b9      	ldr	r1, [r7, #8]
 8014bde:	68f8      	ldr	r0, [r7, #12]
 8014be0:	f001 fed0 	bl	8016984 <ethernet_output>
 8014be4:	4603      	mov	r3, r0
}
 8014be6:	4618      	mov	r0, r3
 8014be8:	3710      	adds	r7, #16
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}
 8014bee:	bf00      	nop
 8014bf0:	200274ac 	.word	0x200274ac
 8014bf4:	0801aa18 	.word	0x0801aa18
 8014bf8:	0801ab88 	.word	0x0801ab88
 8014bfc:	0801aa90 	.word	0x0801aa90

08014c00 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b08a      	sub	sp, #40	@ 0x28
 8014c04:	af02      	add	r7, sp, #8
 8014c06:	60f8      	str	r0, [r7, #12]
 8014c08:	60b9      	str	r1, [r7, #8]
 8014c0a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d106      	bne.n	8014c24 <etharp_output+0x24>
 8014c16:	4b73      	ldr	r3, [pc, #460]	@ (8014de4 <etharp_output+0x1e4>)
 8014c18:	f240 321e 	movw	r2, #798	@ 0x31e
 8014c1c:	4972      	ldr	r1, [pc, #456]	@ (8014de8 <etharp_output+0x1e8>)
 8014c1e:	4873      	ldr	r0, [pc, #460]	@ (8014dec <etharp_output+0x1ec>)
 8014c20:	f002 fb48 	bl	80172b4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014c24:	68bb      	ldr	r3, [r7, #8]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d106      	bne.n	8014c38 <etharp_output+0x38>
 8014c2a:	4b6e      	ldr	r3, [pc, #440]	@ (8014de4 <etharp_output+0x1e4>)
 8014c2c:	f240 321f 	movw	r2, #799	@ 0x31f
 8014c30:	496f      	ldr	r1, [pc, #444]	@ (8014df0 <etharp_output+0x1f0>)
 8014c32:	486e      	ldr	r0, [pc, #440]	@ (8014dec <etharp_output+0x1ec>)
 8014c34:	f002 fb3e 	bl	80172b4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d106      	bne.n	8014c4c <etharp_output+0x4c>
 8014c3e:	4b69      	ldr	r3, [pc, #420]	@ (8014de4 <etharp_output+0x1e4>)
 8014c40:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8014c44:	496b      	ldr	r1, [pc, #428]	@ (8014df4 <etharp_output+0x1f4>)
 8014c46:	4869      	ldr	r0, [pc, #420]	@ (8014dec <etharp_output+0x1ec>)
 8014c48:	f002 fb34 	bl	80172b4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	68f9      	ldr	r1, [r7, #12]
 8014c52:	4618      	mov	r0, r3
 8014c54:	f000 fef8 	bl	8015a48 <ip4_addr_isbroadcast_u32>
 8014c58:	4603      	mov	r3, r0
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d002      	beq.n	8014c64 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014c5e:	4b66      	ldr	r3, [pc, #408]	@ (8014df8 <etharp_output+0x1f8>)
 8014c60:	61fb      	str	r3, [r7, #28]
 8014c62:	e0af      	b.n	8014dc4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014c6c:	2be0      	cmp	r3, #224	@ 0xe0
 8014c6e:	d118      	bne.n	8014ca2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014c70:	2301      	movs	r3, #1
 8014c72:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014c74:	2300      	movs	r3, #0
 8014c76:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014c78:	235e      	movs	r3, #94	@ 0x5e
 8014c7a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	3301      	adds	r3, #1
 8014c80:	781b      	ldrb	r3, [r3, #0]
 8014c82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014c86:	b2db      	uxtb	r3, r3
 8014c88:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	3302      	adds	r3, #2
 8014c8e:	781b      	ldrb	r3, [r3, #0]
 8014c90:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	3303      	adds	r3, #3
 8014c96:	781b      	ldrb	r3, [r3, #0]
 8014c98:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014c9a:	f107 0310 	add.w	r3, r7, #16
 8014c9e:	61fb      	str	r3, [r7, #28]
 8014ca0:	e090      	b.n	8014dc4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	681a      	ldr	r2, [r3, #0]
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	3304      	adds	r3, #4
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	405a      	eors	r2, r3
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	3308      	adds	r3, #8
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	4013      	ands	r3, r2
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d012      	beq.n	8014ce0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014cc0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014cc4:	4293      	cmp	r3, r2
 8014cc6:	d00b      	beq.n	8014ce0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	330c      	adds	r3, #12
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d003      	beq.n	8014cda <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	330c      	adds	r3, #12
 8014cd6:	61bb      	str	r3, [r7, #24]
 8014cd8:	e002      	b.n	8014ce0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014cda:	f06f 0303 	mvn.w	r3, #3
 8014cde:	e07d      	b.n	8014ddc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014ce0:	4b46      	ldr	r3, [pc, #280]	@ (8014dfc <etharp_output+0x1fc>)
 8014ce2:	781b      	ldrb	r3, [r3, #0]
 8014ce4:	4619      	mov	r1, r3
 8014ce6:	4a46      	ldr	r2, [pc, #280]	@ (8014e00 <etharp_output+0x200>)
 8014ce8:	460b      	mov	r3, r1
 8014cea:	005b      	lsls	r3, r3, #1
 8014cec:	440b      	add	r3, r1
 8014cee:	00db      	lsls	r3, r3, #3
 8014cf0:	4413      	add	r3, r2
 8014cf2:	3314      	adds	r3, #20
 8014cf4:	781b      	ldrb	r3, [r3, #0]
 8014cf6:	2b01      	cmp	r3, #1
 8014cf8:	d925      	bls.n	8014d46 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014cfa:	4b40      	ldr	r3, [pc, #256]	@ (8014dfc <etharp_output+0x1fc>)
 8014cfc:	781b      	ldrb	r3, [r3, #0]
 8014cfe:	4619      	mov	r1, r3
 8014d00:	4a3f      	ldr	r2, [pc, #252]	@ (8014e00 <etharp_output+0x200>)
 8014d02:	460b      	mov	r3, r1
 8014d04:	005b      	lsls	r3, r3, #1
 8014d06:	440b      	add	r3, r1
 8014d08:	00db      	lsls	r3, r3, #3
 8014d0a:	4413      	add	r3, r2
 8014d0c:	3308      	adds	r3, #8
 8014d0e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014d10:	68fa      	ldr	r2, [r7, #12]
 8014d12:	429a      	cmp	r2, r3
 8014d14:	d117      	bne.n	8014d46 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014d16:	69bb      	ldr	r3, [r7, #24]
 8014d18:	681a      	ldr	r2, [r3, #0]
 8014d1a:	4b38      	ldr	r3, [pc, #224]	@ (8014dfc <etharp_output+0x1fc>)
 8014d1c:	781b      	ldrb	r3, [r3, #0]
 8014d1e:	4618      	mov	r0, r3
 8014d20:	4937      	ldr	r1, [pc, #220]	@ (8014e00 <etharp_output+0x200>)
 8014d22:	4603      	mov	r3, r0
 8014d24:	005b      	lsls	r3, r3, #1
 8014d26:	4403      	add	r3, r0
 8014d28:	00db      	lsls	r3, r3, #3
 8014d2a:	440b      	add	r3, r1
 8014d2c:	3304      	adds	r3, #4
 8014d2e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014d30:	429a      	cmp	r2, r3
 8014d32:	d108      	bne.n	8014d46 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014d34:	4b31      	ldr	r3, [pc, #196]	@ (8014dfc <etharp_output+0x1fc>)
 8014d36:	781b      	ldrb	r3, [r3, #0]
 8014d38:	461a      	mov	r2, r3
 8014d3a:	68b9      	ldr	r1, [r7, #8]
 8014d3c:	68f8      	ldr	r0, [r7, #12]
 8014d3e:	f7ff fec5 	bl	8014acc <etharp_output_to_arp_index>
 8014d42:	4603      	mov	r3, r0
 8014d44:	e04a      	b.n	8014ddc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014d46:	2300      	movs	r3, #0
 8014d48:	75fb      	strb	r3, [r7, #23]
 8014d4a:	e031      	b.n	8014db0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014d4c:	7dfa      	ldrb	r2, [r7, #23]
 8014d4e:	492c      	ldr	r1, [pc, #176]	@ (8014e00 <etharp_output+0x200>)
 8014d50:	4613      	mov	r3, r2
 8014d52:	005b      	lsls	r3, r3, #1
 8014d54:	4413      	add	r3, r2
 8014d56:	00db      	lsls	r3, r3, #3
 8014d58:	440b      	add	r3, r1
 8014d5a:	3314      	adds	r3, #20
 8014d5c:	781b      	ldrb	r3, [r3, #0]
 8014d5e:	2b01      	cmp	r3, #1
 8014d60:	d923      	bls.n	8014daa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014d62:	7dfa      	ldrb	r2, [r7, #23]
 8014d64:	4926      	ldr	r1, [pc, #152]	@ (8014e00 <etharp_output+0x200>)
 8014d66:	4613      	mov	r3, r2
 8014d68:	005b      	lsls	r3, r3, #1
 8014d6a:	4413      	add	r3, r2
 8014d6c:	00db      	lsls	r3, r3, #3
 8014d6e:	440b      	add	r3, r1
 8014d70:	3308      	adds	r3, #8
 8014d72:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014d74:	68fa      	ldr	r2, [r7, #12]
 8014d76:	429a      	cmp	r2, r3
 8014d78:	d117      	bne.n	8014daa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014d7a:	69bb      	ldr	r3, [r7, #24]
 8014d7c:	6819      	ldr	r1, [r3, #0]
 8014d7e:	7dfa      	ldrb	r2, [r7, #23]
 8014d80:	481f      	ldr	r0, [pc, #124]	@ (8014e00 <etharp_output+0x200>)
 8014d82:	4613      	mov	r3, r2
 8014d84:	005b      	lsls	r3, r3, #1
 8014d86:	4413      	add	r3, r2
 8014d88:	00db      	lsls	r3, r3, #3
 8014d8a:	4403      	add	r3, r0
 8014d8c:	3304      	adds	r3, #4
 8014d8e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014d90:	4299      	cmp	r1, r3
 8014d92:	d10a      	bne.n	8014daa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014d94:	4a19      	ldr	r2, [pc, #100]	@ (8014dfc <etharp_output+0x1fc>)
 8014d96:	7dfb      	ldrb	r3, [r7, #23]
 8014d98:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014d9a:	7dfb      	ldrb	r3, [r7, #23]
 8014d9c:	461a      	mov	r2, r3
 8014d9e:	68b9      	ldr	r1, [r7, #8]
 8014da0:	68f8      	ldr	r0, [r7, #12]
 8014da2:	f7ff fe93 	bl	8014acc <etharp_output_to_arp_index>
 8014da6:	4603      	mov	r3, r0
 8014da8:	e018      	b.n	8014ddc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014daa:	7dfb      	ldrb	r3, [r7, #23]
 8014dac:	3301      	adds	r3, #1
 8014dae:	75fb      	strb	r3, [r7, #23]
 8014db0:	7dfb      	ldrb	r3, [r7, #23]
 8014db2:	2b09      	cmp	r3, #9
 8014db4:	d9ca      	bls.n	8014d4c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014db6:	68ba      	ldr	r2, [r7, #8]
 8014db8:	69b9      	ldr	r1, [r7, #24]
 8014dba:	68f8      	ldr	r0, [r7, #12]
 8014dbc:	f000 f822 	bl	8014e04 <etharp_query>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	e00b      	b.n	8014ddc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014dca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014dce:	9300      	str	r3, [sp, #0]
 8014dd0:	69fb      	ldr	r3, [r7, #28]
 8014dd2:	68b9      	ldr	r1, [r7, #8]
 8014dd4:	68f8      	ldr	r0, [r7, #12]
 8014dd6:	f001 fdd5 	bl	8016984 <ethernet_output>
 8014dda:	4603      	mov	r3, r0
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3720      	adds	r7, #32
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}
 8014de4:	0801aa18 	.word	0x0801aa18
 8014de8:	0801ab68 	.word	0x0801ab68
 8014dec:	0801aa90 	.word	0x0801aa90
 8014df0:	0801abb8 	.word	0x0801abb8
 8014df4:	0801ab58 	.word	0x0801ab58
 8014df8:	0801b45c 	.word	0x0801b45c
 8014dfc:	2002759c 	.word	0x2002759c
 8014e00:	200274ac 	.word	0x200274ac

08014e04 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b08c      	sub	sp, #48	@ 0x30
 8014e08:	af02      	add	r7, sp, #8
 8014e0a:	60f8      	str	r0, [r7, #12]
 8014e0c:	60b9      	str	r1, [r7, #8]
 8014e0e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	3326      	adds	r3, #38	@ 0x26
 8014e14:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014e16:	23ff      	movs	r3, #255	@ 0xff
 8014e18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014e20:	68bb      	ldr	r3, [r7, #8]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	68f9      	ldr	r1, [r7, #12]
 8014e26:	4618      	mov	r0, r3
 8014e28:	f000 fe0e 	bl	8015a48 <ip4_addr_isbroadcast_u32>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d10c      	bne.n	8014e4c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014e3a:	2be0      	cmp	r3, #224	@ 0xe0
 8014e3c:	d006      	beq.n	8014e4c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014e3e:	68bb      	ldr	r3, [r7, #8]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d003      	beq.n	8014e4c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d102      	bne.n	8014e52 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014e4c:	f06f 030f 	mvn.w	r3, #15
 8014e50:	e101      	b.n	8015056 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014e52:	68fa      	ldr	r2, [r7, #12]
 8014e54:	2101      	movs	r1, #1
 8014e56:	68b8      	ldr	r0, [r7, #8]
 8014e58:	f7ff fb60 	bl	801451c <etharp_find_entry>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014e60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	da02      	bge.n	8014e6e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014e68:	8a7b      	ldrh	r3, [r7, #18]
 8014e6a:	b25b      	sxtb	r3, r3
 8014e6c:	e0f3      	b.n	8015056 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014e6e:	8a7b      	ldrh	r3, [r7, #18]
 8014e70:	2b7e      	cmp	r3, #126	@ 0x7e
 8014e72:	d906      	bls.n	8014e82 <etharp_query+0x7e>
 8014e74:	4b7a      	ldr	r3, [pc, #488]	@ (8015060 <etharp_query+0x25c>)
 8014e76:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8014e7a:	497a      	ldr	r1, [pc, #488]	@ (8015064 <etharp_query+0x260>)
 8014e7c:	487a      	ldr	r0, [pc, #488]	@ (8015068 <etharp_query+0x264>)
 8014e7e:	f002 fa19 	bl	80172b4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014e82:	8a7b      	ldrh	r3, [r7, #18]
 8014e84:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014e86:	7c7a      	ldrb	r2, [r7, #17]
 8014e88:	4978      	ldr	r1, [pc, #480]	@ (801506c <etharp_query+0x268>)
 8014e8a:	4613      	mov	r3, r2
 8014e8c:	005b      	lsls	r3, r3, #1
 8014e8e:	4413      	add	r3, r2
 8014e90:	00db      	lsls	r3, r3, #3
 8014e92:	440b      	add	r3, r1
 8014e94:	3314      	adds	r3, #20
 8014e96:	781b      	ldrb	r3, [r3, #0]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d115      	bne.n	8014ec8 <etharp_query+0xc4>
    is_new_entry = 1;
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014ea0:	7c7a      	ldrb	r2, [r7, #17]
 8014ea2:	4972      	ldr	r1, [pc, #456]	@ (801506c <etharp_query+0x268>)
 8014ea4:	4613      	mov	r3, r2
 8014ea6:	005b      	lsls	r3, r3, #1
 8014ea8:	4413      	add	r3, r2
 8014eaa:	00db      	lsls	r3, r3, #3
 8014eac:	440b      	add	r3, r1
 8014eae:	3314      	adds	r3, #20
 8014eb0:	2201      	movs	r2, #1
 8014eb2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014eb4:	7c7a      	ldrb	r2, [r7, #17]
 8014eb6:	496d      	ldr	r1, [pc, #436]	@ (801506c <etharp_query+0x268>)
 8014eb8:	4613      	mov	r3, r2
 8014eba:	005b      	lsls	r3, r3, #1
 8014ebc:	4413      	add	r3, r2
 8014ebe:	00db      	lsls	r3, r3, #3
 8014ec0:	440b      	add	r3, r1
 8014ec2:	3308      	adds	r3, #8
 8014ec4:	68fa      	ldr	r2, [r7, #12]
 8014ec6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014ec8:	7c7a      	ldrb	r2, [r7, #17]
 8014eca:	4968      	ldr	r1, [pc, #416]	@ (801506c <etharp_query+0x268>)
 8014ecc:	4613      	mov	r3, r2
 8014ece:	005b      	lsls	r3, r3, #1
 8014ed0:	4413      	add	r3, r2
 8014ed2:	00db      	lsls	r3, r3, #3
 8014ed4:	440b      	add	r3, r1
 8014ed6:	3314      	adds	r3, #20
 8014ed8:	781b      	ldrb	r3, [r3, #0]
 8014eda:	2b01      	cmp	r3, #1
 8014edc:	d011      	beq.n	8014f02 <etharp_query+0xfe>
 8014ede:	7c7a      	ldrb	r2, [r7, #17]
 8014ee0:	4962      	ldr	r1, [pc, #392]	@ (801506c <etharp_query+0x268>)
 8014ee2:	4613      	mov	r3, r2
 8014ee4:	005b      	lsls	r3, r3, #1
 8014ee6:	4413      	add	r3, r2
 8014ee8:	00db      	lsls	r3, r3, #3
 8014eea:	440b      	add	r3, r1
 8014eec:	3314      	adds	r3, #20
 8014eee:	781b      	ldrb	r3, [r3, #0]
 8014ef0:	2b01      	cmp	r3, #1
 8014ef2:	d806      	bhi.n	8014f02 <etharp_query+0xfe>
 8014ef4:	4b5a      	ldr	r3, [pc, #360]	@ (8015060 <etharp_query+0x25c>)
 8014ef6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014efa:	495d      	ldr	r1, [pc, #372]	@ (8015070 <etharp_query+0x26c>)
 8014efc:	485a      	ldr	r0, [pc, #360]	@ (8015068 <etharp_query+0x264>)
 8014efe:	f002 f9d9 	bl	80172b4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014f02:	6a3b      	ldr	r3, [r7, #32]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d102      	bne.n	8014f0e <etharp_query+0x10a>
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d10c      	bne.n	8014f28 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014f0e:	68b9      	ldr	r1, [r7, #8]
 8014f10:	68f8      	ldr	r0, [r7, #12]
 8014f12:	f000 f963 	bl	80151dc <etharp_request>
 8014f16:	4603      	mov	r3, r0
 8014f18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d102      	bne.n	8014f28 <etharp_query+0x124>
      return result;
 8014f22:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014f26:	e096      	b.n	8015056 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d106      	bne.n	8014f3c <etharp_query+0x138>
 8014f2e:	4b4c      	ldr	r3, [pc, #304]	@ (8015060 <etharp_query+0x25c>)
 8014f30:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014f34:	494f      	ldr	r1, [pc, #316]	@ (8015074 <etharp_query+0x270>)
 8014f36:	484c      	ldr	r0, [pc, #304]	@ (8015068 <etharp_query+0x264>)
 8014f38:	f002 f9bc 	bl	80172b4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014f3c:	7c7a      	ldrb	r2, [r7, #17]
 8014f3e:	494b      	ldr	r1, [pc, #300]	@ (801506c <etharp_query+0x268>)
 8014f40:	4613      	mov	r3, r2
 8014f42:	005b      	lsls	r3, r3, #1
 8014f44:	4413      	add	r3, r2
 8014f46:	00db      	lsls	r3, r3, #3
 8014f48:	440b      	add	r3, r1
 8014f4a:	3314      	adds	r3, #20
 8014f4c:	781b      	ldrb	r3, [r3, #0]
 8014f4e:	2b01      	cmp	r3, #1
 8014f50:	d917      	bls.n	8014f82 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014f52:	4a49      	ldr	r2, [pc, #292]	@ (8015078 <etharp_query+0x274>)
 8014f54:	7c7b      	ldrb	r3, [r7, #17]
 8014f56:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014f58:	7c7a      	ldrb	r2, [r7, #17]
 8014f5a:	4613      	mov	r3, r2
 8014f5c:	005b      	lsls	r3, r3, #1
 8014f5e:	4413      	add	r3, r2
 8014f60:	00db      	lsls	r3, r3, #3
 8014f62:	3308      	adds	r3, #8
 8014f64:	4a41      	ldr	r2, [pc, #260]	@ (801506c <etharp_query+0x268>)
 8014f66:	4413      	add	r3, r2
 8014f68:	3304      	adds	r3, #4
 8014f6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014f6e:	9200      	str	r2, [sp, #0]
 8014f70:	697a      	ldr	r2, [r7, #20]
 8014f72:	6879      	ldr	r1, [r7, #4]
 8014f74:	68f8      	ldr	r0, [r7, #12]
 8014f76:	f001 fd05 	bl	8016984 <ethernet_output>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014f80:	e067      	b.n	8015052 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014f82:	7c7a      	ldrb	r2, [r7, #17]
 8014f84:	4939      	ldr	r1, [pc, #228]	@ (801506c <etharp_query+0x268>)
 8014f86:	4613      	mov	r3, r2
 8014f88:	005b      	lsls	r3, r3, #1
 8014f8a:	4413      	add	r3, r2
 8014f8c:	00db      	lsls	r3, r3, #3
 8014f8e:	440b      	add	r3, r1
 8014f90:	3314      	adds	r3, #20
 8014f92:	781b      	ldrb	r3, [r3, #0]
 8014f94:	2b01      	cmp	r3, #1
 8014f96:	d15c      	bne.n	8015052 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014f98:	2300      	movs	r3, #0
 8014f9a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014fa0:	e01c      	b.n	8014fdc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014fa2:	69fb      	ldr	r3, [r7, #28]
 8014fa4:	895a      	ldrh	r2, [r3, #10]
 8014fa6:	69fb      	ldr	r3, [r7, #28]
 8014fa8:	891b      	ldrh	r3, [r3, #8]
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d10a      	bne.n	8014fc4 <etharp_query+0x1c0>
 8014fae:	69fb      	ldr	r3, [r7, #28]
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d006      	beq.n	8014fc4 <etharp_query+0x1c0>
 8014fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8015060 <etharp_query+0x25c>)
 8014fb8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014fbc:	492f      	ldr	r1, [pc, #188]	@ (801507c <etharp_query+0x278>)
 8014fbe:	482a      	ldr	r0, [pc, #168]	@ (8015068 <etharp_query+0x264>)
 8014fc0:	f002 f978 	bl	80172b4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014fc4:	69fb      	ldr	r3, [r7, #28]
 8014fc6:	7b1b      	ldrb	r3, [r3, #12]
 8014fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d002      	beq.n	8014fd6 <etharp_query+0x1d2>
        copy_needed = 1;
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	61bb      	str	r3, [r7, #24]
        break;
 8014fd4:	e005      	b.n	8014fe2 <etharp_query+0x1de>
      }
      p = p->next;
 8014fd6:	69fb      	ldr	r3, [r7, #28]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014fdc:	69fb      	ldr	r3, [r7, #28]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d1df      	bne.n	8014fa2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014fe2:	69bb      	ldr	r3, [r7, #24]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d007      	beq.n	8014ff8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014fe8:	687a      	ldr	r2, [r7, #4]
 8014fea:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014fee:	200e      	movs	r0, #14
 8014ff0:	f7f9 fc04 	bl	800e7fc <pbuf_clone>
 8014ff4:	61f8      	str	r0, [r7, #28]
 8014ff6:	e004      	b.n	8015002 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014ffc:	69f8      	ldr	r0, [r7, #28]
 8014ffe:	f7f9 fa3b 	bl	800e478 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015002:	69fb      	ldr	r3, [r7, #28]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d021      	beq.n	801504c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015008:	7c7a      	ldrb	r2, [r7, #17]
 801500a:	4918      	ldr	r1, [pc, #96]	@ (801506c <etharp_query+0x268>)
 801500c:	4613      	mov	r3, r2
 801500e:	005b      	lsls	r3, r3, #1
 8015010:	4413      	add	r3, r2
 8015012:	00db      	lsls	r3, r3, #3
 8015014:	440b      	add	r3, r1
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d00a      	beq.n	8015032 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801501c:	7c7a      	ldrb	r2, [r7, #17]
 801501e:	4913      	ldr	r1, [pc, #76]	@ (801506c <etharp_query+0x268>)
 8015020:	4613      	mov	r3, r2
 8015022:	005b      	lsls	r3, r3, #1
 8015024:	4413      	add	r3, r2
 8015026:	00db      	lsls	r3, r3, #3
 8015028:	440b      	add	r3, r1
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	4618      	mov	r0, r3
 801502e:	f7f9 f97d 	bl	800e32c <pbuf_free>
      }
      arp_table[i].q = p;
 8015032:	7c7a      	ldrb	r2, [r7, #17]
 8015034:	490d      	ldr	r1, [pc, #52]	@ (801506c <etharp_query+0x268>)
 8015036:	4613      	mov	r3, r2
 8015038:	005b      	lsls	r3, r3, #1
 801503a:	4413      	add	r3, r2
 801503c:	00db      	lsls	r3, r3, #3
 801503e:	440b      	add	r3, r1
 8015040:	69fa      	ldr	r2, [r7, #28]
 8015042:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015044:	2300      	movs	r3, #0
 8015046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801504a:	e002      	b.n	8015052 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801504c:	23ff      	movs	r3, #255	@ 0xff
 801504e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8015052:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8015056:	4618      	mov	r0, r3
 8015058:	3728      	adds	r7, #40	@ 0x28
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}
 801505e:	bf00      	nop
 8015060:	0801aa18 	.word	0x0801aa18
 8015064:	0801abc4 	.word	0x0801abc4
 8015068:	0801aa90 	.word	0x0801aa90
 801506c:	200274ac 	.word	0x200274ac
 8015070:	0801abd4 	.word	0x0801abd4
 8015074:	0801abb8 	.word	0x0801abb8
 8015078:	2002759c 	.word	0x2002759c
 801507c:	0801abfc 	.word	0x0801abfc

08015080 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b08a      	sub	sp, #40	@ 0x28
 8015084:	af02      	add	r7, sp, #8
 8015086:	60f8      	str	r0, [r7, #12]
 8015088:	60b9      	str	r1, [r7, #8]
 801508a:	607a      	str	r2, [r7, #4]
 801508c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801508e:	2300      	movs	r3, #0
 8015090:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d106      	bne.n	80150a6 <etharp_raw+0x26>
 8015098:	4b3a      	ldr	r3, [pc, #232]	@ (8015184 <etharp_raw+0x104>)
 801509a:	f240 4257 	movw	r2, #1111	@ 0x457
 801509e:	493a      	ldr	r1, [pc, #232]	@ (8015188 <etharp_raw+0x108>)
 80150a0:	483a      	ldr	r0, [pc, #232]	@ (801518c <etharp_raw+0x10c>)
 80150a2:	f002 f907 	bl	80172b4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80150a6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80150aa:	211c      	movs	r1, #28
 80150ac:	200e      	movs	r0, #14
 80150ae:	f7f8 fe59 	bl	800dd64 <pbuf_alloc>
 80150b2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80150b4:	69bb      	ldr	r3, [r7, #24]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d102      	bne.n	80150c0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80150ba:	f04f 33ff 	mov.w	r3, #4294967295
 80150be:	e05d      	b.n	801517c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80150c0:	69bb      	ldr	r3, [r7, #24]
 80150c2:	895b      	ldrh	r3, [r3, #10]
 80150c4:	2b1b      	cmp	r3, #27
 80150c6:	d806      	bhi.n	80150d6 <etharp_raw+0x56>
 80150c8:	4b2e      	ldr	r3, [pc, #184]	@ (8015184 <etharp_raw+0x104>)
 80150ca:	f240 4262 	movw	r2, #1122	@ 0x462
 80150ce:	4930      	ldr	r1, [pc, #192]	@ (8015190 <etharp_raw+0x110>)
 80150d0:	482e      	ldr	r0, [pc, #184]	@ (801518c <etharp_raw+0x10c>)
 80150d2:	f002 f8ef 	bl	80172b4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80150d6:	69bb      	ldr	r3, [r7, #24]
 80150d8:	685b      	ldr	r3, [r3, #4]
 80150da:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80150dc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80150de:	4618      	mov	r0, r3
 80150e0:	f7f7 fd36 	bl	800cb50 <lwip_htons>
 80150e4:	4603      	mov	r3, r0
 80150e6:	461a      	mov	r2, r3
 80150e8:	697b      	ldr	r3, [r7, #20]
 80150ea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80150f2:	2b06      	cmp	r3, #6
 80150f4:	d006      	beq.n	8015104 <etharp_raw+0x84>
 80150f6:	4b23      	ldr	r3, [pc, #140]	@ (8015184 <etharp_raw+0x104>)
 80150f8:	f240 4269 	movw	r2, #1129	@ 0x469
 80150fc:	4925      	ldr	r1, [pc, #148]	@ (8015194 <etharp_raw+0x114>)
 80150fe:	4823      	ldr	r0, [pc, #140]	@ (801518c <etharp_raw+0x10c>)
 8015100:	f002 f8d8 	bl	80172b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015104:	697b      	ldr	r3, [r7, #20]
 8015106:	3308      	adds	r3, #8
 8015108:	2206      	movs	r2, #6
 801510a:	6839      	ldr	r1, [r7, #0]
 801510c:	4618      	mov	r0, r3
 801510e:	f002 fafc 	bl	801770a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015112:	697b      	ldr	r3, [r7, #20]
 8015114:	3312      	adds	r3, #18
 8015116:	2206      	movs	r2, #6
 8015118:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801511a:	4618      	mov	r0, r3
 801511c:	f002 faf5 	bl	801770a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	330e      	adds	r3, #14
 8015124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015126:	6812      	ldr	r2, [r2, #0]
 8015128:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801512a:	697b      	ldr	r3, [r7, #20]
 801512c:	3318      	adds	r3, #24
 801512e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015130:	6812      	ldr	r2, [r2, #0]
 8015132:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015134:	697b      	ldr	r3, [r7, #20]
 8015136:	2200      	movs	r2, #0
 8015138:	701a      	strb	r2, [r3, #0]
 801513a:	2200      	movs	r2, #0
 801513c:	f042 0201 	orr.w	r2, r2, #1
 8015140:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015142:	697b      	ldr	r3, [r7, #20]
 8015144:	2200      	movs	r2, #0
 8015146:	f042 0208 	orr.w	r2, r2, #8
 801514a:	709a      	strb	r2, [r3, #2]
 801514c:	2200      	movs	r2, #0
 801514e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015150:	697b      	ldr	r3, [r7, #20]
 8015152:	2206      	movs	r2, #6
 8015154:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015156:	697b      	ldr	r3, [r7, #20]
 8015158:	2204      	movs	r2, #4
 801515a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801515c:	f640 0306 	movw	r3, #2054	@ 0x806
 8015160:	9300      	str	r3, [sp, #0]
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	68ba      	ldr	r2, [r7, #8]
 8015166:	69b9      	ldr	r1, [r7, #24]
 8015168:	68f8      	ldr	r0, [r7, #12]
 801516a:	f001 fc0b 	bl	8016984 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801516e:	69b8      	ldr	r0, [r7, #24]
 8015170:	f7f9 f8dc 	bl	800e32c <pbuf_free>
  p = NULL;
 8015174:	2300      	movs	r3, #0
 8015176:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015178:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801517c:	4618      	mov	r0, r3
 801517e:	3720      	adds	r7, #32
 8015180:	46bd      	mov	sp, r7
 8015182:	bd80      	pop	{r7, pc}
 8015184:	0801aa18 	.word	0x0801aa18
 8015188:	0801ab68 	.word	0x0801ab68
 801518c:	0801aa90 	.word	0x0801aa90
 8015190:	0801ac18 	.word	0x0801ac18
 8015194:	0801ac4c 	.word	0x0801ac4c

08015198 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b088      	sub	sp, #32
 801519c:	af04      	add	r7, sp, #16
 801519e:	60f8      	str	r0, [r7, #12]
 80151a0:	60b9      	str	r1, [r7, #8]
 80151a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80151b4:	2201      	movs	r2, #1
 80151b6:	9203      	str	r2, [sp, #12]
 80151b8:	68ba      	ldr	r2, [r7, #8]
 80151ba:	9202      	str	r2, [sp, #8]
 80151bc:	4a06      	ldr	r2, [pc, #24]	@ (80151d8 <etharp_request_dst+0x40>)
 80151be:	9201      	str	r2, [sp, #4]
 80151c0:	9300      	str	r3, [sp, #0]
 80151c2:	4603      	mov	r3, r0
 80151c4:	687a      	ldr	r2, [r7, #4]
 80151c6:	68f8      	ldr	r0, [r7, #12]
 80151c8:	f7ff ff5a 	bl	8015080 <etharp_raw>
 80151cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80151ce:	4618      	mov	r0, r3
 80151d0:	3710      	adds	r7, #16
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}
 80151d6:	bf00      	nop
 80151d8:	0801b464 	.word	0x0801b464

080151dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b082      	sub	sp, #8
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
 80151e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80151e6:	4a05      	ldr	r2, [pc, #20]	@ (80151fc <etharp_request+0x20>)
 80151e8:	6839      	ldr	r1, [r7, #0]
 80151ea:	6878      	ldr	r0, [r7, #4]
 80151ec:	f7ff ffd4 	bl	8015198 <etharp_request_dst>
 80151f0:	4603      	mov	r3, r0
}
 80151f2:	4618      	mov	r0, r3
 80151f4:	3708      	adds	r7, #8
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bd80      	pop	{r7, pc}
 80151fa:	bf00      	nop
 80151fc:	0801b45c 	.word	0x0801b45c

08015200 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b08e      	sub	sp, #56	@ 0x38
 8015204:	af04      	add	r7, sp, #16
 8015206:	6078      	str	r0, [r7, #4]
 8015208:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801520a:	4b79      	ldr	r3, [pc, #484]	@ (80153f0 <icmp_input+0x1f0>)
 801520c:	689b      	ldr	r3, [r3, #8]
 801520e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015212:	781b      	ldrb	r3, [r3, #0]
 8015214:	f003 030f 	and.w	r3, r3, #15
 8015218:	b2db      	uxtb	r3, r3
 801521a:	009b      	lsls	r3, r3, #2
 801521c:	b2db      	uxtb	r3, r3
 801521e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8015220:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015222:	2b13      	cmp	r3, #19
 8015224:	f240 80cd 	bls.w	80153c2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	895b      	ldrh	r3, [r3, #10]
 801522c:	2b03      	cmp	r3, #3
 801522e:	f240 80ca 	bls.w	80153c6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	685b      	ldr	r3, [r3, #4]
 8015236:	781b      	ldrb	r3, [r3, #0]
 8015238:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801523c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015240:	2b00      	cmp	r3, #0
 8015242:	f000 80b7 	beq.w	80153b4 <icmp_input+0x1b4>
 8015246:	2b08      	cmp	r3, #8
 8015248:	f040 80b7 	bne.w	80153ba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801524c:	4b69      	ldr	r3, [pc, #420]	@ (80153f4 <icmp_input+0x1f4>)
 801524e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015250:	4b67      	ldr	r3, [pc, #412]	@ (80153f0 <icmp_input+0x1f0>)
 8015252:	695b      	ldr	r3, [r3, #20]
 8015254:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015258:	2be0      	cmp	r3, #224	@ 0xe0
 801525a:	f000 80bb 	beq.w	80153d4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801525e:	4b64      	ldr	r3, [pc, #400]	@ (80153f0 <icmp_input+0x1f0>)
 8015260:	695b      	ldr	r3, [r3, #20]
 8015262:	4a63      	ldr	r2, [pc, #396]	@ (80153f0 <icmp_input+0x1f0>)
 8015264:	6812      	ldr	r2, [r2, #0]
 8015266:	4611      	mov	r1, r2
 8015268:	4618      	mov	r0, r3
 801526a:	f000 fbed 	bl	8015a48 <ip4_addr_isbroadcast_u32>
 801526e:	4603      	mov	r3, r0
 8015270:	2b00      	cmp	r3, #0
 8015272:	f040 80b1 	bne.w	80153d8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	891b      	ldrh	r3, [r3, #8]
 801527a:	2b07      	cmp	r3, #7
 801527c:	f240 80a5 	bls.w	80153ca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015280:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015282:	330e      	adds	r3, #14
 8015284:	4619      	mov	r1, r3
 8015286:	6878      	ldr	r0, [r7, #4]
 8015288:	f7f8 ffba 	bl	800e200 <pbuf_add_header>
 801528c:	4603      	mov	r3, r0
 801528e:	2b00      	cmp	r3, #0
 8015290:	d04b      	beq.n	801532a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	891a      	ldrh	r2, [r3, #8]
 8015296:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015298:	4413      	add	r3, r2
 801529a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	891b      	ldrh	r3, [r3, #8]
 80152a0:	8b7a      	ldrh	r2, [r7, #26]
 80152a2:	429a      	cmp	r2, r3
 80152a4:	f0c0 809a 	bcc.w	80153dc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80152a8:	8b7b      	ldrh	r3, [r7, #26]
 80152aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80152ae:	4619      	mov	r1, r3
 80152b0:	200e      	movs	r0, #14
 80152b2:	f7f8 fd57 	bl	800dd64 <pbuf_alloc>
 80152b6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80152b8:	697b      	ldr	r3, [r7, #20]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	f000 8090 	beq.w	80153e0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80152c0:	697b      	ldr	r3, [r7, #20]
 80152c2:	895b      	ldrh	r3, [r3, #10]
 80152c4:	461a      	mov	r2, r3
 80152c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80152c8:	3308      	adds	r3, #8
 80152ca:	429a      	cmp	r2, r3
 80152cc:	d203      	bcs.n	80152d6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80152ce:	6978      	ldr	r0, [r7, #20]
 80152d0:	f7f9 f82c 	bl	800e32c <pbuf_free>
          goto icmperr;
 80152d4:	e085      	b.n	80153e2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80152d6:	697b      	ldr	r3, [r7, #20]
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80152dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80152de:	4618      	mov	r0, r3
 80152e0:	f002 fa13 	bl	801770a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80152e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80152e6:	4619      	mov	r1, r3
 80152e8:	6978      	ldr	r0, [r7, #20]
 80152ea:	f7f8 ff99 	bl	800e220 <pbuf_remove_header>
 80152ee:	4603      	mov	r3, r0
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d009      	beq.n	8015308 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80152f4:	4b40      	ldr	r3, [pc, #256]	@ (80153f8 <icmp_input+0x1f8>)
 80152f6:	22b6      	movs	r2, #182	@ 0xb6
 80152f8:	4940      	ldr	r1, [pc, #256]	@ (80153fc <icmp_input+0x1fc>)
 80152fa:	4841      	ldr	r0, [pc, #260]	@ (8015400 <icmp_input+0x200>)
 80152fc:	f001 ffda 	bl	80172b4 <iprintf>
          pbuf_free(r);
 8015300:	6978      	ldr	r0, [r7, #20]
 8015302:	f7f9 f813 	bl	800e32c <pbuf_free>
          goto icmperr;
 8015306:	e06c      	b.n	80153e2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015308:	6879      	ldr	r1, [r7, #4]
 801530a:	6978      	ldr	r0, [r7, #20]
 801530c:	f7f9 f932 	bl	800e574 <pbuf_copy>
 8015310:	4603      	mov	r3, r0
 8015312:	2b00      	cmp	r3, #0
 8015314:	d003      	beq.n	801531e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015316:	6978      	ldr	r0, [r7, #20]
 8015318:	f7f9 f808 	bl	800e32c <pbuf_free>
          goto icmperr;
 801531c:	e061      	b.n	80153e2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801531e:	6878      	ldr	r0, [r7, #4]
 8015320:	f7f9 f804 	bl	800e32c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015324:	697b      	ldr	r3, [r7, #20]
 8015326:	607b      	str	r3, [r7, #4]
 8015328:	e00f      	b.n	801534a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801532a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801532c:	330e      	adds	r3, #14
 801532e:	4619      	mov	r1, r3
 8015330:	6878      	ldr	r0, [r7, #4]
 8015332:	f7f8 ff75 	bl	800e220 <pbuf_remove_header>
 8015336:	4603      	mov	r3, r0
 8015338:	2b00      	cmp	r3, #0
 801533a:	d006      	beq.n	801534a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801533c:	4b2e      	ldr	r3, [pc, #184]	@ (80153f8 <icmp_input+0x1f8>)
 801533e:	22c7      	movs	r2, #199	@ 0xc7
 8015340:	4930      	ldr	r1, [pc, #192]	@ (8015404 <icmp_input+0x204>)
 8015342:	482f      	ldr	r0, [pc, #188]	@ (8015400 <icmp_input+0x200>)
 8015344:	f001 ffb6 	bl	80172b4 <iprintf>
          goto icmperr;
 8015348:	e04b      	b.n	80153e2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	685b      	ldr	r3, [r3, #4]
 801534e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015350:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015352:	4619      	mov	r1, r3
 8015354:	6878      	ldr	r0, [r7, #4]
 8015356:	f7f8 ff53 	bl	800e200 <pbuf_add_header>
 801535a:	4603      	mov	r3, r0
 801535c:	2b00      	cmp	r3, #0
 801535e:	d12b      	bne.n	80153b8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	685b      	ldr	r3, [r3, #4]
 8015364:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015366:	69fb      	ldr	r3, [r7, #28]
 8015368:	681a      	ldr	r2, [r3, #0]
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801536e:	4b20      	ldr	r3, [pc, #128]	@ (80153f0 <icmp_input+0x1f0>)
 8015370:	691a      	ldr	r2, [r3, #16]
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015376:	693b      	ldr	r3, [r7, #16]
 8015378:	2200      	movs	r2, #0
 801537a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	2200      	movs	r2, #0
 8015380:	709a      	strb	r2, [r3, #2]
 8015382:	2200      	movs	r2, #0
 8015384:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	22ff      	movs	r2, #255	@ 0xff
 801538a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	2200      	movs	r2, #0
 8015390:	729a      	strb	r2, [r3, #10]
 8015392:	2200      	movs	r2, #0
 8015394:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015396:	683b      	ldr	r3, [r7, #0]
 8015398:	9302      	str	r3, [sp, #8]
 801539a:	2301      	movs	r3, #1
 801539c:	9301      	str	r3, [sp, #4]
 801539e:	2300      	movs	r3, #0
 80153a0:	9300      	str	r3, [sp, #0]
 80153a2:	23ff      	movs	r3, #255	@ 0xff
 80153a4:	2200      	movs	r2, #0
 80153a6:	69f9      	ldr	r1, [r7, #28]
 80153a8:	6878      	ldr	r0, [r7, #4]
 80153aa:	f000 fa75 	bl	8015898 <ip4_output_if>
 80153ae:	4603      	mov	r3, r0
 80153b0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80153b2:	e001      	b.n	80153b8 <icmp_input+0x1b8>
      break;
 80153b4:	bf00      	nop
 80153b6:	e000      	b.n	80153ba <icmp_input+0x1ba>
      break;
 80153b8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80153ba:	6878      	ldr	r0, [r7, #4]
 80153bc:	f7f8 ffb6 	bl	800e32c <pbuf_free>
  return;
 80153c0:	e013      	b.n	80153ea <icmp_input+0x1ea>
    goto lenerr;
 80153c2:	bf00      	nop
 80153c4:	e002      	b.n	80153cc <icmp_input+0x1cc>
    goto lenerr;
 80153c6:	bf00      	nop
 80153c8:	e000      	b.n	80153cc <icmp_input+0x1cc>
        goto lenerr;
 80153ca:	bf00      	nop
lenerr:
  pbuf_free(p);
 80153cc:	6878      	ldr	r0, [r7, #4]
 80153ce:	f7f8 ffad 	bl	800e32c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80153d2:	e00a      	b.n	80153ea <icmp_input+0x1ea>
        goto icmperr;
 80153d4:	bf00      	nop
 80153d6:	e004      	b.n	80153e2 <icmp_input+0x1e2>
        goto icmperr;
 80153d8:	bf00      	nop
 80153da:	e002      	b.n	80153e2 <icmp_input+0x1e2>
          goto icmperr;
 80153dc:	bf00      	nop
 80153de:	e000      	b.n	80153e2 <icmp_input+0x1e2>
          goto icmperr;
 80153e0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80153e2:	6878      	ldr	r0, [r7, #4]
 80153e4:	f7f8 ffa2 	bl	800e32c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80153e8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80153ea:	3728      	adds	r7, #40	@ 0x28
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}
 80153f0:	2002434c 	.word	0x2002434c
 80153f4:	20024360 	.word	0x20024360
 80153f8:	0801ac90 	.word	0x0801ac90
 80153fc:	0801acc8 	.word	0x0801acc8
 8015400:	0801ad00 	.word	0x0801ad00
 8015404:	0801ad28 	.word	0x0801ad28

08015408 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b082      	sub	sp, #8
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
 8015410:	460b      	mov	r3, r1
 8015412:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015414:	78fb      	ldrb	r3, [r7, #3]
 8015416:	461a      	mov	r2, r3
 8015418:	2103      	movs	r1, #3
 801541a:	6878      	ldr	r0, [r7, #4]
 801541c:	f000 f814 	bl	8015448 <icmp_send_response>
}
 8015420:	bf00      	nop
 8015422:	3708      	adds	r7, #8
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}

08015428 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b082      	sub	sp, #8
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	460b      	mov	r3, r1
 8015432:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015434:	78fb      	ldrb	r3, [r7, #3]
 8015436:	461a      	mov	r2, r3
 8015438:	210b      	movs	r1, #11
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f000 f804 	bl	8015448 <icmp_send_response>
}
 8015440:	bf00      	nop
 8015442:	3708      	adds	r7, #8
 8015444:	46bd      	mov	sp, r7
 8015446:	bd80      	pop	{r7, pc}

08015448 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b08c      	sub	sp, #48	@ 0x30
 801544c:	af04      	add	r7, sp, #16
 801544e:	6078      	str	r0, [r7, #4]
 8015450:	460b      	mov	r3, r1
 8015452:	70fb      	strb	r3, [r7, #3]
 8015454:	4613      	mov	r3, r2
 8015456:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015458:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801545c:	2124      	movs	r1, #36	@ 0x24
 801545e:	2022      	movs	r0, #34	@ 0x22
 8015460:	f7f8 fc80 	bl	800dd64 <pbuf_alloc>
 8015464:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015466:	69fb      	ldr	r3, [r7, #28]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d04c      	beq.n	8015506 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801546c:	69fb      	ldr	r3, [r7, #28]
 801546e:	895b      	ldrh	r3, [r3, #10]
 8015470:	2b23      	cmp	r3, #35	@ 0x23
 8015472:	d806      	bhi.n	8015482 <icmp_send_response+0x3a>
 8015474:	4b26      	ldr	r3, [pc, #152]	@ (8015510 <icmp_send_response+0xc8>)
 8015476:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801547a:	4926      	ldr	r1, [pc, #152]	@ (8015514 <icmp_send_response+0xcc>)
 801547c:	4826      	ldr	r0, [pc, #152]	@ (8015518 <icmp_send_response+0xd0>)
 801547e:	f001 ff19 	bl	80172b4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015488:	69fb      	ldr	r3, [r7, #28]
 801548a:	685b      	ldr	r3, [r3, #4]
 801548c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801548e:	697b      	ldr	r3, [r7, #20]
 8015490:	78fa      	ldrb	r2, [r7, #3]
 8015492:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	78ba      	ldrb	r2, [r7, #2]
 8015498:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801549a:	697b      	ldr	r3, [r7, #20]
 801549c:	2200      	movs	r2, #0
 801549e:	711a      	strb	r2, [r3, #4]
 80154a0:	2200      	movs	r2, #0
 80154a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	2200      	movs	r2, #0
 80154a8:	719a      	strb	r2, [r3, #6]
 80154aa:	2200      	movs	r2, #0
 80154ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80154ae:	69fb      	ldr	r3, [r7, #28]
 80154b0:	685b      	ldr	r3, [r3, #4]
 80154b2:	f103 0008 	add.w	r0, r3, #8
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	685b      	ldr	r3, [r3, #4]
 80154ba:	221c      	movs	r2, #28
 80154bc:	4619      	mov	r1, r3
 80154be:	f002 f924 	bl	801770a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80154c2:	69bb      	ldr	r3, [r7, #24]
 80154c4:	68db      	ldr	r3, [r3, #12]
 80154c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80154c8:	f107 030c 	add.w	r3, r7, #12
 80154cc:	4618      	mov	r0, r3
 80154ce:	f000 f825 	bl	801551c <ip4_route>
 80154d2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80154d4:	693b      	ldr	r3, [r7, #16]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d011      	beq.n	80154fe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80154da:	697b      	ldr	r3, [r7, #20]
 80154dc:	2200      	movs	r2, #0
 80154de:	709a      	strb	r2, [r3, #2]
 80154e0:	2200      	movs	r2, #0
 80154e2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80154e4:	f107 020c 	add.w	r2, r7, #12
 80154e8:	693b      	ldr	r3, [r7, #16]
 80154ea:	9302      	str	r3, [sp, #8]
 80154ec:	2301      	movs	r3, #1
 80154ee:	9301      	str	r3, [sp, #4]
 80154f0:	2300      	movs	r3, #0
 80154f2:	9300      	str	r3, [sp, #0]
 80154f4:	23ff      	movs	r3, #255	@ 0xff
 80154f6:	2100      	movs	r1, #0
 80154f8:	69f8      	ldr	r0, [r7, #28]
 80154fa:	f000 f9cd 	bl	8015898 <ip4_output_if>
  }
  pbuf_free(q);
 80154fe:	69f8      	ldr	r0, [r7, #28]
 8015500:	f7f8 ff14 	bl	800e32c <pbuf_free>
 8015504:	e000      	b.n	8015508 <icmp_send_response+0xc0>
    return;
 8015506:	bf00      	nop
}
 8015508:	3720      	adds	r7, #32
 801550a:	46bd      	mov	sp, r7
 801550c:	bd80      	pop	{r7, pc}
 801550e:	bf00      	nop
 8015510:	0801ac90 	.word	0x0801ac90
 8015514:	0801ad5c 	.word	0x0801ad5c
 8015518:	0801ad00 	.word	0x0801ad00

0801551c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801551c:	b480      	push	{r7}
 801551e:	b085      	sub	sp, #20
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015524:	4b33      	ldr	r3, [pc, #204]	@ (80155f4 <ip4_route+0xd8>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	60fb      	str	r3, [r7, #12]
 801552a:	e036      	b.n	801559a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015532:	f003 0301 	and.w	r3, r3, #1
 8015536:	b2db      	uxtb	r3, r3
 8015538:	2b00      	cmp	r3, #0
 801553a:	d02b      	beq.n	8015594 <ip4_route+0x78>
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015542:	089b      	lsrs	r3, r3, #2
 8015544:	f003 0301 	and.w	r3, r3, #1
 8015548:	b2db      	uxtb	r3, r3
 801554a:	2b00      	cmp	r3, #0
 801554c:	d022      	beq.n	8015594 <ip4_route+0x78>
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	3304      	adds	r3, #4
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d01d      	beq.n	8015594 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	681a      	ldr	r2, [r3, #0]
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	3304      	adds	r3, #4
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	405a      	eors	r2, r3
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	3308      	adds	r3, #8
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	4013      	ands	r3, r2
 801556c:	2b00      	cmp	r3, #0
 801556e:	d101      	bne.n	8015574 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	e038      	b.n	80155e6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801557a:	f003 0302 	and.w	r3, r3, #2
 801557e:	2b00      	cmp	r3, #0
 8015580:	d108      	bne.n	8015594 <ip4_route+0x78>
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681a      	ldr	r2, [r3, #0]
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	330c      	adds	r3, #12
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	429a      	cmp	r2, r3
 801558e:	d101      	bne.n	8015594 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	e028      	b.n	80155e6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	60fb      	str	r3, [r7, #12]
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d1c5      	bne.n	801552c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80155a0:	4b15      	ldr	r3, [pc, #84]	@ (80155f8 <ip4_route+0xdc>)
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d01a      	beq.n	80155de <ip4_route+0xc2>
 80155a8:	4b13      	ldr	r3, [pc, #76]	@ (80155f8 <ip4_route+0xdc>)
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80155b0:	f003 0301 	and.w	r3, r3, #1
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d012      	beq.n	80155de <ip4_route+0xc2>
 80155b8:	4b0f      	ldr	r3, [pc, #60]	@ (80155f8 <ip4_route+0xdc>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80155c0:	f003 0304 	and.w	r3, r3, #4
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d00a      	beq.n	80155de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80155c8:	4b0b      	ldr	r3, [pc, #44]	@ (80155f8 <ip4_route+0xdc>)
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	3304      	adds	r3, #4
 80155ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d004      	beq.n	80155de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	b2db      	uxtb	r3, r3
 80155da:	2b7f      	cmp	r3, #127	@ 0x7f
 80155dc:	d101      	bne.n	80155e2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80155de:	2300      	movs	r3, #0
 80155e0:	e001      	b.n	80155e6 <ip4_route+0xca>
  }

  return netif_default;
 80155e2:	4b05      	ldr	r3, [pc, #20]	@ (80155f8 <ip4_route+0xdc>)
 80155e4:	681b      	ldr	r3, [r3, #0]
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	3714      	adds	r7, #20
 80155ea:	46bd      	mov	sp, r7
 80155ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f0:	4770      	bx	lr
 80155f2:	bf00      	nop
 80155f4:	20027440 	.word	0x20027440
 80155f8:	20027444 	.word	0x20027444

080155fc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b082      	sub	sp, #8
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801560a:	f003 0301 	and.w	r3, r3, #1
 801560e:	b2db      	uxtb	r3, r3
 8015610:	2b00      	cmp	r3, #0
 8015612:	d016      	beq.n	8015642 <ip4_input_accept+0x46>
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	3304      	adds	r3, #4
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d011      	beq.n	8015642 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801561e:	4b0b      	ldr	r3, [pc, #44]	@ (801564c <ip4_input_accept+0x50>)
 8015620:	695a      	ldr	r2, [r3, #20]
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	3304      	adds	r3, #4
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	429a      	cmp	r2, r3
 801562a:	d008      	beq.n	801563e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801562c:	4b07      	ldr	r3, [pc, #28]	@ (801564c <ip4_input_accept+0x50>)
 801562e:	695b      	ldr	r3, [r3, #20]
 8015630:	6879      	ldr	r1, [r7, #4]
 8015632:	4618      	mov	r0, r3
 8015634:	f000 fa08 	bl	8015a48 <ip4_addr_isbroadcast_u32>
 8015638:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801563a:	2b00      	cmp	r3, #0
 801563c:	d001      	beq.n	8015642 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801563e:	2301      	movs	r3, #1
 8015640:	e000      	b.n	8015644 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015642:	2300      	movs	r3, #0
}
 8015644:	4618      	mov	r0, r3
 8015646:	3708      	adds	r7, #8
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}
 801564c:	2002434c 	.word	0x2002434c

08015650 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b086      	sub	sp, #24
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
 8015658:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	685b      	ldr	r3, [r3, #4]
 801565e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015660:	697b      	ldr	r3, [r7, #20]
 8015662:	781b      	ldrb	r3, [r3, #0]
 8015664:	091b      	lsrs	r3, r3, #4
 8015666:	b2db      	uxtb	r3, r3
 8015668:	2b04      	cmp	r3, #4
 801566a:	d004      	beq.n	8015676 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801566c:	6878      	ldr	r0, [r7, #4]
 801566e:	f7f8 fe5d 	bl	800e32c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015672:	2300      	movs	r3, #0
 8015674:	e107      	b.n	8015886 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015676:	697b      	ldr	r3, [r7, #20]
 8015678:	781b      	ldrb	r3, [r3, #0]
 801567a:	f003 030f 	and.w	r3, r3, #15
 801567e:	b2db      	uxtb	r3, r3
 8015680:	009b      	lsls	r3, r3, #2
 8015682:	b2db      	uxtb	r3, r3
 8015684:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015686:	697b      	ldr	r3, [r7, #20]
 8015688:	885b      	ldrh	r3, [r3, #2]
 801568a:	b29b      	uxth	r3, r3
 801568c:	4618      	mov	r0, r3
 801568e:	f7f7 fa5f 	bl	800cb50 <lwip_htons>
 8015692:	4603      	mov	r3, r0
 8015694:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	891b      	ldrh	r3, [r3, #8]
 801569a:	89ba      	ldrh	r2, [r7, #12]
 801569c:	429a      	cmp	r2, r3
 801569e:	d204      	bcs.n	80156aa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80156a0:	89bb      	ldrh	r3, [r7, #12]
 80156a2:	4619      	mov	r1, r3
 80156a4:	6878      	ldr	r0, [r7, #4]
 80156a6:	f7f8 fcbb 	bl	800e020 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	895b      	ldrh	r3, [r3, #10]
 80156ae:	89fa      	ldrh	r2, [r7, #14]
 80156b0:	429a      	cmp	r2, r3
 80156b2:	d807      	bhi.n	80156c4 <ip4_input+0x74>
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	891b      	ldrh	r3, [r3, #8]
 80156b8:	89ba      	ldrh	r2, [r7, #12]
 80156ba:	429a      	cmp	r2, r3
 80156bc:	d802      	bhi.n	80156c4 <ip4_input+0x74>
 80156be:	89fb      	ldrh	r3, [r7, #14]
 80156c0:	2b13      	cmp	r3, #19
 80156c2:	d804      	bhi.n	80156ce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f7f8 fe31 	bl	800e32c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80156ca:	2300      	movs	r3, #0
 80156cc:	e0db      	b.n	8015886 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80156ce:	697b      	ldr	r3, [r7, #20]
 80156d0:	691b      	ldr	r3, [r3, #16]
 80156d2:	4a6f      	ldr	r2, [pc, #444]	@ (8015890 <ip4_input+0x240>)
 80156d4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80156d6:	697b      	ldr	r3, [r7, #20]
 80156d8:	68db      	ldr	r3, [r3, #12]
 80156da:	4a6d      	ldr	r2, [pc, #436]	@ (8015890 <ip4_input+0x240>)
 80156dc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80156de:	4b6c      	ldr	r3, [pc, #432]	@ (8015890 <ip4_input+0x240>)
 80156e0:	695b      	ldr	r3, [r3, #20]
 80156e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80156e6:	2be0      	cmp	r3, #224	@ 0xe0
 80156e8:	d112      	bne.n	8015710 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80156ea:	683b      	ldr	r3, [r7, #0]
 80156ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80156f0:	f003 0301 	and.w	r3, r3, #1
 80156f4:	b2db      	uxtb	r3, r3
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d007      	beq.n	801570a <ip4_input+0xba>
 80156fa:	683b      	ldr	r3, [r7, #0]
 80156fc:	3304      	adds	r3, #4
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d002      	beq.n	801570a <ip4_input+0xba>
      netif = inp;
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	613b      	str	r3, [r7, #16]
 8015708:	e02a      	b.n	8015760 <ip4_input+0x110>
    } else {
      netif = NULL;
 801570a:	2300      	movs	r3, #0
 801570c:	613b      	str	r3, [r7, #16]
 801570e:	e027      	b.n	8015760 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015710:	6838      	ldr	r0, [r7, #0]
 8015712:	f7ff ff73 	bl	80155fc <ip4_input_accept>
 8015716:	4603      	mov	r3, r0
 8015718:	2b00      	cmp	r3, #0
 801571a:	d002      	beq.n	8015722 <ip4_input+0xd2>
      netif = inp;
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	613b      	str	r3, [r7, #16]
 8015720:	e01e      	b.n	8015760 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015722:	2300      	movs	r3, #0
 8015724:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015726:	4b5a      	ldr	r3, [pc, #360]	@ (8015890 <ip4_input+0x240>)
 8015728:	695b      	ldr	r3, [r3, #20]
 801572a:	b2db      	uxtb	r3, r3
 801572c:	2b7f      	cmp	r3, #127	@ 0x7f
 801572e:	d017      	beq.n	8015760 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015730:	4b58      	ldr	r3, [pc, #352]	@ (8015894 <ip4_input+0x244>)
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	613b      	str	r3, [r7, #16]
 8015736:	e00e      	b.n	8015756 <ip4_input+0x106>
          if (netif == inp) {
 8015738:	693a      	ldr	r2, [r7, #16]
 801573a:	683b      	ldr	r3, [r7, #0]
 801573c:	429a      	cmp	r2, r3
 801573e:	d006      	beq.n	801574e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015740:	6938      	ldr	r0, [r7, #16]
 8015742:	f7ff ff5b 	bl	80155fc <ip4_input_accept>
 8015746:	4603      	mov	r3, r0
 8015748:	2b00      	cmp	r3, #0
 801574a:	d108      	bne.n	801575e <ip4_input+0x10e>
 801574c:	e000      	b.n	8015750 <ip4_input+0x100>
            continue;
 801574e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015750:	693b      	ldr	r3, [r7, #16]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	613b      	str	r3, [r7, #16]
 8015756:	693b      	ldr	r3, [r7, #16]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d1ed      	bne.n	8015738 <ip4_input+0xe8>
 801575c:	e000      	b.n	8015760 <ip4_input+0x110>
            break;
 801575e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015760:	4b4b      	ldr	r3, [pc, #300]	@ (8015890 <ip4_input+0x240>)
 8015762:	691b      	ldr	r3, [r3, #16]
 8015764:	6839      	ldr	r1, [r7, #0]
 8015766:	4618      	mov	r0, r3
 8015768:	f000 f96e 	bl	8015a48 <ip4_addr_isbroadcast_u32>
 801576c:	4603      	mov	r3, r0
 801576e:	2b00      	cmp	r3, #0
 8015770:	d105      	bne.n	801577e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015772:	4b47      	ldr	r3, [pc, #284]	@ (8015890 <ip4_input+0x240>)
 8015774:	691b      	ldr	r3, [r3, #16]
 8015776:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801577a:	2be0      	cmp	r3, #224	@ 0xe0
 801577c:	d104      	bne.n	8015788 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801577e:	6878      	ldr	r0, [r7, #4]
 8015780:	f7f8 fdd4 	bl	800e32c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015784:	2300      	movs	r3, #0
 8015786:	e07e      	b.n	8015886 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d104      	bne.n	8015798 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f7f8 fdcc 	bl	800e32c <pbuf_free>
    return ERR_OK;
 8015794:	2300      	movs	r3, #0
 8015796:	e076      	b.n	8015886 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015798:	697b      	ldr	r3, [r7, #20]
 801579a:	88db      	ldrh	r3, [r3, #6]
 801579c:	b29b      	uxth	r3, r3
 801579e:	461a      	mov	r2, r3
 80157a0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80157a4:	4013      	ands	r3, r2
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d00b      	beq.n	80157c2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80157aa:	6878      	ldr	r0, [r7, #4]
 80157ac:	f000 fd22 	bl	80161f4 <ip4_reass>
 80157b0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d101      	bne.n	80157bc <ip4_input+0x16c>
      return ERR_OK;
 80157b8:	2300      	movs	r3, #0
 80157ba:	e064      	b.n	8015886 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	685b      	ldr	r3, [r3, #4]
 80157c0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80157c2:	4a33      	ldr	r2, [pc, #204]	@ (8015890 <ip4_input+0x240>)
 80157c4:	693b      	ldr	r3, [r7, #16]
 80157c6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80157c8:	4a31      	ldr	r2, [pc, #196]	@ (8015890 <ip4_input+0x240>)
 80157ca:	683b      	ldr	r3, [r7, #0]
 80157cc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80157ce:	4a30      	ldr	r2, [pc, #192]	@ (8015890 <ip4_input+0x240>)
 80157d0:	697b      	ldr	r3, [r7, #20]
 80157d2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80157d4:	697b      	ldr	r3, [r7, #20]
 80157d6:	781b      	ldrb	r3, [r3, #0]
 80157d8:	f003 030f 	and.w	r3, r3, #15
 80157dc:	b2db      	uxtb	r3, r3
 80157de:	009b      	lsls	r3, r3, #2
 80157e0:	b2db      	uxtb	r3, r3
 80157e2:	461a      	mov	r2, r3
 80157e4:	4b2a      	ldr	r3, [pc, #168]	@ (8015890 <ip4_input+0x240>)
 80157e6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80157e8:	89fb      	ldrh	r3, [r7, #14]
 80157ea:	4619      	mov	r1, r3
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	f7f8 fd17 	bl	800e220 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80157f2:	697b      	ldr	r3, [r7, #20]
 80157f4:	7a5b      	ldrb	r3, [r3, #9]
 80157f6:	2b11      	cmp	r3, #17
 80157f8:	d006      	beq.n	8015808 <ip4_input+0x1b8>
 80157fa:	2b11      	cmp	r3, #17
 80157fc:	dc13      	bgt.n	8015826 <ip4_input+0x1d6>
 80157fe:	2b01      	cmp	r3, #1
 8015800:	d00c      	beq.n	801581c <ip4_input+0x1cc>
 8015802:	2b06      	cmp	r3, #6
 8015804:	d005      	beq.n	8015812 <ip4_input+0x1c2>
 8015806:	e00e      	b.n	8015826 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015808:	6839      	ldr	r1, [r7, #0]
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f7fe fba8 	bl	8013f60 <udp_input>
        break;
 8015810:	e026      	b.n	8015860 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015812:	6839      	ldr	r1, [r7, #0]
 8015814:	6878      	ldr	r0, [r7, #4]
 8015816:	f7fa fbbf 	bl	800ff98 <tcp_input>
        break;
 801581a:	e021      	b.n	8015860 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801581c:	6839      	ldr	r1, [r7, #0]
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	f7ff fcee 	bl	8015200 <icmp_input>
        break;
 8015824:	e01c      	b.n	8015860 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015826:	4b1a      	ldr	r3, [pc, #104]	@ (8015890 <ip4_input+0x240>)
 8015828:	695b      	ldr	r3, [r3, #20]
 801582a:	6939      	ldr	r1, [r7, #16]
 801582c:	4618      	mov	r0, r3
 801582e:	f000 f90b 	bl	8015a48 <ip4_addr_isbroadcast_u32>
 8015832:	4603      	mov	r3, r0
 8015834:	2b00      	cmp	r3, #0
 8015836:	d10f      	bne.n	8015858 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015838:	4b15      	ldr	r3, [pc, #84]	@ (8015890 <ip4_input+0x240>)
 801583a:	695b      	ldr	r3, [r3, #20]
 801583c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015840:	2be0      	cmp	r3, #224	@ 0xe0
 8015842:	d009      	beq.n	8015858 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015844:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015848:	4619      	mov	r1, r3
 801584a:	6878      	ldr	r0, [r7, #4]
 801584c:	f7f8 fd5b 	bl	800e306 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015850:	2102      	movs	r1, #2
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	f7ff fdd8 	bl	8015408 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015858:	6878      	ldr	r0, [r7, #4]
 801585a:	f7f8 fd67 	bl	800e32c <pbuf_free>
        break;
 801585e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015860:	4b0b      	ldr	r3, [pc, #44]	@ (8015890 <ip4_input+0x240>)
 8015862:	2200      	movs	r2, #0
 8015864:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015866:	4b0a      	ldr	r3, [pc, #40]	@ (8015890 <ip4_input+0x240>)
 8015868:	2200      	movs	r2, #0
 801586a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801586c:	4b08      	ldr	r3, [pc, #32]	@ (8015890 <ip4_input+0x240>)
 801586e:	2200      	movs	r2, #0
 8015870:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015872:	4b07      	ldr	r3, [pc, #28]	@ (8015890 <ip4_input+0x240>)
 8015874:	2200      	movs	r2, #0
 8015876:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015878:	4b05      	ldr	r3, [pc, #20]	@ (8015890 <ip4_input+0x240>)
 801587a:	2200      	movs	r2, #0
 801587c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801587e:	4b04      	ldr	r3, [pc, #16]	@ (8015890 <ip4_input+0x240>)
 8015880:	2200      	movs	r2, #0
 8015882:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015884:	2300      	movs	r3, #0
}
 8015886:	4618      	mov	r0, r3
 8015888:	3718      	adds	r7, #24
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}
 801588e:	bf00      	nop
 8015890:	2002434c 	.word	0x2002434c
 8015894:	20027440 	.word	0x20027440

08015898 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b08a      	sub	sp, #40	@ 0x28
 801589c:	af04      	add	r7, sp, #16
 801589e:	60f8      	str	r0, [r7, #12]
 80158a0:	60b9      	str	r1, [r7, #8]
 80158a2:	607a      	str	r2, [r7, #4]
 80158a4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80158a6:	68bb      	ldr	r3, [r7, #8]
 80158a8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d009      	beq.n	80158c4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d003      	beq.n	80158be <ip4_output_if+0x26>
 80158b6:	68bb      	ldr	r3, [r7, #8]
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d102      	bne.n	80158c4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80158be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158c0:	3304      	adds	r3, #4
 80158c2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80158c4:	78fa      	ldrb	r2, [r7, #3]
 80158c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158c8:	9302      	str	r3, [sp, #8]
 80158ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80158ce:	9301      	str	r3, [sp, #4]
 80158d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80158d4:	9300      	str	r3, [sp, #0]
 80158d6:	4613      	mov	r3, r2
 80158d8:	687a      	ldr	r2, [r7, #4]
 80158da:	6979      	ldr	r1, [r7, #20]
 80158dc:	68f8      	ldr	r0, [r7, #12]
 80158de:	f000 f805 	bl	80158ec <ip4_output_if_src>
 80158e2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80158e4:	4618      	mov	r0, r3
 80158e6:	3718      	adds	r7, #24
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bd80      	pop	{r7, pc}

080158ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b088      	sub	sp, #32
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	60f8      	str	r0, [r7, #12]
 80158f4:	60b9      	str	r1, [r7, #8]
 80158f6:	607a      	str	r2, [r7, #4]
 80158f8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	7b9b      	ldrb	r3, [r3, #14]
 80158fe:	2b01      	cmp	r3, #1
 8015900:	d006      	beq.n	8015910 <ip4_output_if_src+0x24>
 8015902:	4b4b      	ldr	r3, [pc, #300]	@ (8015a30 <ip4_output_if_src+0x144>)
 8015904:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8015908:	494a      	ldr	r1, [pc, #296]	@ (8015a34 <ip4_output_if_src+0x148>)
 801590a:	484b      	ldr	r0, [pc, #300]	@ (8015a38 <ip4_output_if_src+0x14c>)
 801590c:	f001 fcd2 	bl	80172b4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d060      	beq.n	80159d8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015916:	2314      	movs	r3, #20
 8015918:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801591a:	2114      	movs	r1, #20
 801591c:	68f8      	ldr	r0, [r7, #12]
 801591e:	f7f8 fc6f 	bl	800e200 <pbuf_add_header>
 8015922:	4603      	mov	r3, r0
 8015924:	2b00      	cmp	r3, #0
 8015926:	d002      	beq.n	801592e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015928:	f06f 0301 	mvn.w	r3, #1
 801592c:	e07c      	b.n	8015a28 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	685b      	ldr	r3, [r3, #4]
 8015932:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	895b      	ldrh	r3, [r3, #10]
 8015938:	2b13      	cmp	r3, #19
 801593a:	d806      	bhi.n	801594a <ip4_output_if_src+0x5e>
 801593c:	4b3c      	ldr	r3, [pc, #240]	@ (8015a30 <ip4_output_if_src+0x144>)
 801593e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8015942:	493e      	ldr	r1, [pc, #248]	@ (8015a3c <ip4_output_if_src+0x150>)
 8015944:	483c      	ldr	r0, [pc, #240]	@ (8015a38 <ip4_output_if_src+0x14c>)
 8015946:	f001 fcb5 	bl	80172b4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801594a:	69fb      	ldr	r3, [r7, #28]
 801594c:	78fa      	ldrb	r2, [r7, #3]
 801594e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015950:	69fb      	ldr	r3, [r7, #28]
 8015952:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015956:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	681a      	ldr	r2, [r3, #0]
 801595c:	69fb      	ldr	r3, [r7, #28]
 801595e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015960:	8b7b      	ldrh	r3, [r7, #26]
 8015962:	089b      	lsrs	r3, r3, #2
 8015964:	b29b      	uxth	r3, r3
 8015966:	b2db      	uxtb	r3, r3
 8015968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801596c:	b2da      	uxtb	r2, r3
 801596e:	69fb      	ldr	r3, [r7, #28]
 8015970:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015972:	69fb      	ldr	r3, [r7, #28]
 8015974:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015978:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	891b      	ldrh	r3, [r3, #8]
 801597e:	4618      	mov	r0, r3
 8015980:	f7f7 f8e6 	bl	800cb50 <lwip_htons>
 8015984:	4603      	mov	r3, r0
 8015986:	461a      	mov	r2, r3
 8015988:	69fb      	ldr	r3, [r7, #28]
 801598a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801598c:	69fb      	ldr	r3, [r7, #28]
 801598e:	2200      	movs	r2, #0
 8015990:	719a      	strb	r2, [r3, #6]
 8015992:	2200      	movs	r2, #0
 8015994:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015996:	4b2a      	ldr	r3, [pc, #168]	@ (8015a40 <ip4_output_if_src+0x154>)
 8015998:	881b      	ldrh	r3, [r3, #0]
 801599a:	4618      	mov	r0, r3
 801599c:	f7f7 f8d8 	bl	800cb50 <lwip_htons>
 80159a0:	4603      	mov	r3, r0
 80159a2:	461a      	mov	r2, r3
 80159a4:	69fb      	ldr	r3, [r7, #28]
 80159a6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80159a8:	4b25      	ldr	r3, [pc, #148]	@ (8015a40 <ip4_output_if_src+0x154>)
 80159aa:	881b      	ldrh	r3, [r3, #0]
 80159ac:	3301      	adds	r3, #1
 80159ae:	b29a      	uxth	r2, r3
 80159b0:	4b23      	ldr	r3, [pc, #140]	@ (8015a40 <ip4_output_if_src+0x154>)
 80159b2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80159b4:	68bb      	ldr	r3, [r7, #8]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d104      	bne.n	80159c4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80159ba:	4b22      	ldr	r3, [pc, #136]	@ (8015a44 <ip4_output_if_src+0x158>)
 80159bc:	681a      	ldr	r2, [r3, #0]
 80159be:	69fb      	ldr	r3, [r7, #28]
 80159c0:	60da      	str	r2, [r3, #12]
 80159c2:	e003      	b.n	80159cc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	681a      	ldr	r2, [r3, #0]
 80159c8:	69fb      	ldr	r3, [r7, #28]
 80159ca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80159cc:	69fb      	ldr	r3, [r7, #28]
 80159ce:	2200      	movs	r2, #0
 80159d0:	729a      	strb	r2, [r3, #10]
 80159d2:	2200      	movs	r2, #0
 80159d4:	72da      	strb	r2, [r3, #11]
 80159d6:	e00f      	b.n	80159f8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	895b      	ldrh	r3, [r3, #10]
 80159dc:	2b13      	cmp	r3, #19
 80159de:	d802      	bhi.n	80159e6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80159e0:	f06f 0301 	mvn.w	r3, #1
 80159e4:	e020      	b.n	8015a28 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	685b      	ldr	r3, [r3, #4]
 80159ea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80159ec:	69fb      	ldr	r3, [r7, #28]
 80159ee:	691b      	ldr	r3, [r3, #16]
 80159f0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80159f2:	f107 0314 	add.w	r3, r7, #20
 80159f6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80159f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d00c      	beq.n	8015a1a <ip4_output_if_src+0x12e>
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	891a      	ldrh	r2, [r3, #8]
 8015a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a06:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015a08:	429a      	cmp	r2, r3
 8015a0a:	d906      	bls.n	8015a1a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015a0c:	687a      	ldr	r2, [r7, #4]
 8015a0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015a10:	68f8      	ldr	r0, [r7, #12]
 8015a12:	f000 fde3 	bl	80165dc <ip4_frag>
 8015a16:	4603      	mov	r3, r0
 8015a18:	e006      	b.n	8015a28 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a1c:	695b      	ldr	r3, [r3, #20]
 8015a1e:	687a      	ldr	r2, [r7, #4]
 8015a20:	68f9      	ldr	r1, [r7, #12]
 8015a22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015a24:	4798      	blx	r3
 8015a26:	4603      	mov	r3, r0
}
 8015a28:	4618      	mov	r0, r3
 8015a2a:	3720      	adds	r7, #32
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}
 8015a30:	0801ad88 	.word	0x0801ad88
 8015a34:	0801adbc 	.word	0x0801adbc
 8015a38:	0801adc8 	.word	0x0801adc8
 8015a3c:	0801adf0 	.word	0x0801adf0
 8015a40:	2002759e 	.word	0x2002759e
 8015a44:	0801b458 	.word	0x0801b458

08015a48 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015a48:	b480      	push	{r7}
 8015a4a:	b085      	sub	sp, #20
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
 8015a50:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a5c:	d002      	beq.n	8015a64 <ip4_addr_isbroadcast_u32+0x1c>
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d101      	bne.n	8015a68 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015a64:	2301      	movs	r3, #1
 8015a66:	e02a      	b.n	8015abe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015a68:	683b      	ldr	r3, [r7, #0]
 8015a6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015a6e:	f003 0302 	and.w	r3, r3, #2
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d101      	bne.n	8015a7a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015a76:	2300      	movs	r3, #0
 8015a78:	e021      	b.n	8015abe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015a7a:	683b      	ldr	r3, [r7, #0]
 8015a7c:	3304      	adds	r3, #4
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	687a      	ldr	r2, [r7, #4]
 8015a82:	429a      	cmp	r2, r3
 8015a84:	d101      	bne.n	8015a8a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015a86:	2300      	movs	r3, #0
 8015a88:	e019      	b.n	8015abe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015a8a:	68fa      	ldr	r2, [r7, #12]
 8015a8c:	683b      	ldr	r3, [r7, #0]
 8015a8e:	3304      	adds	r3, #4
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	405a      	eors	r2, r3
 8015a94:	683b      	ldr	r3, [r7, #0]
 8015a96:	3308      	adds	r3, #8
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	4013      	ands	r3, r2
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d10d      	bne.n	8015abc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	3308      	adds	r3, #8
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	43da      	mvns	r2, r3
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015aac:	683b      	ldr	r3, [r7, #0]
 8015aae:	3308      	adds	r3, #8
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015ab4:	429a      	cmp	r2, r3
 8015ab6:	d101      	bne.n	8015abc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015ab8:	2301      	movs	r3, #1
 8015aba:	e000      	b.n	8015abe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015abc:	2300      	movs	r3, #0
  }
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3714      	adds	r7, #20
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac8:	4770      	bx	lr
	...

08015acc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b082      	sub	sp, #8
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8015ad4:	2210      	movs	r2, #16
 8015ad6:	4904      	ldr	r1, [pc, #16]	@ (8015ae8 <ip4addr_ntoa+0x1c>)
 8015ad8:	6878      	ldr	r0, [r7, #4]
 8015ada:	f000 f807 	bl	8015aec <ip4addr_ntoa_r>
 8015ade:	4603      	mov	r3, r0
}
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	3708      	adds	r7, #8
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	bd80      	pop	{r7, pc}
 8015ae8:	200275a0 	.word	0x200275a0

08015aec <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8015aec:	b480      	push	{r7}
 8015aee:	b08d      	sub	sp, #52	@ 0x34
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	60f8      	str	r0, [r7, #12]
 8015af4:	60b9      	str	r1, [r7, #8]
 8015af6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8015af8:	2300      	movs	r3, #0
 8015afa:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8015b02:	68bb      	ldr	r3, [r7, #8]
 8015b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8015b06:	f107 0318 	add.w	r3, r7, #24
 8015b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015b12:	e058      	b.n	8015bc6 <ip4addr_ntoa_r+0xda>
    i = 0;
 8015b14:	2300      	movs	r3, #0
 8015b16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8015b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b1c:	781a      	ldrb	r2, [r3, #0]
 8015b1e:	4b32      	ldr	r3, [pc, #200]	@ (8015be8 <ip4addr_ntoa_r+0xfc>)
 8015b20:	fba3 1302 	umull	r1, r3, r3, r2
 8015b24:	08d9      	lsrs	r1, r3, #3
 8015b26:	460b      	mov	r3, r1
 8015b28:	009b      	lsls	r3, r3, #2
 8015b2a:	440b      	add	r3, r1
 8015b2c:	005b      	lsls	r3, r3, #1
 8015b2e:	1ad3      	subs	r3, r2, r3
 8015b30:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8015b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b34:	781b      	ldrb	r3, [r3, #0]
 8015b36:	4a2c      	ldr	r2, [pc, #176]	@ (8015be8 <ip4addr_ntoa_r+0xfc>)
 8015b38:	fba2 2303 	umull	r2, r3, r2, r3
 8015b3c:	08db      	lsrs	r3, r3, #3
 8015b3e:	b2da      	uxtb	r2, r3
 8015b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b42:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8015b44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b48:	1c5a      	adds	r2, r3, #1
 8015b4a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8015b4e:	4619      	mov	r1, r3
 8015b50:	7ffb      	ldrb	r3, [r7, #31]
 8015b52:	3330      	adds	r3, #48	@ 0x30
 8015b54:	b2da      	uxtb	r2, r3
 8015b56:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8015b5a:	443b      	add	r3, r7
 8015b5c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8015b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b62:	781b      	ldrb	r3, [r3, #0]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d1d8      	bne.n	8015b1a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8015b68:	e011      	b.n	8015b8e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8015b6a:	6a3b      	ldr	r3, [r7, #32]
 8015b6c:	1c5a      	adds	r2, r3, #1
 8015b6e:	623a      	str	r2, [r7, #32]
 8015b70:	687a      	ldr	r2, [r7, #4]
 8015b72:	429a      	cmp	r2, r3
 8015b74:	dc01      	bgt.n	8015b7a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8015b76:	2300      	movs	r3, #0
 8015b78:	e030      	b.n	8015bdc <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8015b7a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8015b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b80:	1c59      	adds	r1, r3, #1
 8015b82:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8015b84:	3230      	adds	r2, #48	@ 0x30
 8015b86:	443a      	add	r2, r7
 8015b88:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8015b8c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8015b8e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b92:	1e5a      	subs	r2, r3, #1
 8015b94:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d1e6      	bne.n	8015b6a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8015b9c:	6a3b      	ldr	r3, [r7, #32]
 8015b9e:	1c5a      	adds	r2, r3, #1
 8015ba0:	623a      	str	r2, [r7, #32]
 8015ba2:	687a      	ldr	r2, [r7, #4]
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	dc01      	bgt.n	8015bac <ip4addr_ntoa_r+0xc0>
      return NULL;
 8015ba8:	2300      	movs	r3, #0
 8015baa:	e017      	b.n	8015bdc <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8015bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bae:	1c5a      	adds	r2, r3, #1
 8015bb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8015bb2:	222e      	movs	r2, #46	@ 0x2e
 8015bb4:	701a      	strb	r2, [r3, #0]
    ap++;
 8015bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bb8:	3301      	adds	r3, #1
 8015bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8015bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015bc0:	3301      	adds	r3, #1
 8015bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015bca:	2b03      	cmp	r3, #3
 8015bcc:	d9a2      	bls.n	8015b14 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8015bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bd0:	3b01      	subs	r3, #1
 8015bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	701a      	strb	r2, [r3, #0]
  return buf;
 8015bda:	68bb      	ldr	r3, [r7, #8]
}
 8015bdc:	4618      	mov	r0, r3
 8015bde:	3734      	adds	r7, #52	@ 0x34
 8015be0:	46bd      	mov	sp, r7
 8015be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be6:	4770      	bx	lr
 8015be8:	cccccccd 	.word	0xcccccccd

08015bec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b084      	sub	sp, #16
 8015bf0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015bf6:	4b12      	ldr	r3, [pc, #72]	@ (8015c40 <ip_reass_tmr+0x54>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015bfc:	e018      	b.n	8015c30 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	7fdb      	ldrb	r3, [r3, #31]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d00b      	beq.n	8015c1e <ip_reass_tmr+0x32>
      r->timer--;
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	7fdb      	ldrb	r3, [r3, #31]
 8015c0a:	3b01      	subs	r3, #1
 8015c0c:	b2da      	uxtb	r2, r3
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	60fb      	str	r3, [r7, #12]
 8015c1c:	e008      	b.n	8015c30 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015c28:	68b9      	ldr	r1, [r7, #8]
 8015c2a:	6878      	ldr	r0, [r7, #4]
 8015c2c:	f000 f80a 	bl	8015c44 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d1e3      	bne.n	8015bfe <ip_reass_tmr+0x12>
    }
  }
}
 8015c36:	bf00      	nop
 8015c38:	bf00      	nop
 8015c3a:	3710      	adds	r7, #16
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	bd80      	pop	{r7, pc}
 8015c40:	200275b0 	.word	0x200275b0

08015c44 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b088      	sub	sp, #32
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
 8015c4c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015c52:	683a      	ldr	r2, [r7, #0]
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	429a      	cmp	r2, r3
 8015c58:	d105      	bne.n	8015c66 <ip_reass_free_complete_datagram+0x22>
 8015c5a:	4b45      	ldr	r3, [pc, #276]	@ (8015d70 <ip_reass_free_complete_datagram+0x12c>)
 8015c5c:	22ab      	movs	r2, #171	@ 0xab
 8015c5e:	4945      	ldr	r1, [pc, #276]	@ (8015d74 <ip_reass_free_complete_datagram+0x130>)
 8015c60:	4845      	ldr	r0, [pc, #276]	@ (8015d78 <ip_reass_free_complete_datagram+0x134>)
 8015c62:	f001 fb27 	bl	80172b4 <iprintf>
  if (prev != NULL) {
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d00a      	beq.n	8015c82 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015c6c:	683b      	ldr	r3, [r7, #0]
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	687a      	ldr	r2, [r7, #4]
 8015c72:	429a      	cmp	r2, r3
 8015c74:	d005      	beq.n	8015c82 <ip_reass_free_complete_datagram+0x3e>
 8015c76:	4b3e      	ldr	r3, [pc, #248]	@ (8015d70 <ip_reass_free_complete_datagram+0x12c>)
 8015c78:	22ad      	movs	r2, #173	@ 0xad
 8015c7a:	4940      	ldr	r1, [pc, #256]	@ (8015d7c <ip_reass_free_complete_datagram+0x138>)
 8015c7c:	483e      	ldr	r0, [pc, #248]	@ (8015d78 <ip_reass_free_complete_datagram+0x134>)
 8015c7e:	f001 fb19 	bl	80172b4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	685b      	ldr	r3, [r3, #4]
 8015c86:	685b      	ldr	r3, [r3, #4]
 8015c88:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015c8a:	697b      	ldr	r3, [r7, #20]
 8015c8c:	889b      	ldrh	r3, [r3, #4]
 8015c8e:	b29b      	uxth	r3, r3
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d12a      	bne.n	8015cea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	685b      	ldr	r3, [r3, #4]
 8015c98:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015c9a:	697b      	ldr	r3, [r7, #20]
 8015c9c:	681a      	ldr	r2, [r3, #0]
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015ca2:	69bb      	ldr	r3, [r7, #24]
 8015ca4:	6858      	ldr	r0, [r3, #4]
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	3308      	adds	r3, #8
 8015caa:	2214      	movs	r2, #20
 8015cac:	4619      	mov	r1, r3
 8015cae:	f001 fd2c 	bl	801770a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015cb2:	2101      	movs	r1, #1
 8015cb4:	69b8      	ldr	r0, [r7, #24]
 8015cb6:	f7ff fbb7 	bl	8015428 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015cba:	69b8      	ldr	r0, [r7, #24]
 8015cbc:	f7f8 fbc4 	bl	800e448 <pbuf_clen>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015cc4:	8bfa      	ldrh	r2, [r7, #30]
 8015cc6:	8a7b      	ldrh	r3, [r7, #18]
 8015cc8:	4413      	add	r3, r2
 8015cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015cce:	db05      	blt.n	8015cdc <ip_reass_free_complete_datagram+0x98>
 8015cd0:	4b27      	ldr	r3, [pc, #156]	@ (8015d70 <ip_reass_free_complete_datagram+0x12c>)
 8015cd2:	22bc      	movs	r2, #188	@ 0xbc
 8015cd4:	492a      	ldr	r1, [pc, #168]	@ (8015d80 <ip_reass_free_complete_datagram+0x13c>)
 8015cd6:	4828      	ldr	r0, [pc, #160]	@ (8015d78 <ip_reass_free_complete_datagram+0x134>)
 8015cd8:	f001 faec 	bl	80172b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015cdc:	8bfa      	ldrh	r2, [r7, #30]
 8015cde:	8a7b      	ldrh	r3, [r7, #18]
 8015ce0:	4413      	add	r3, r2
 8015ce2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015ce4:	69b8      	ldr	r0, [r7, #24]
 8015ce6:	f7f8 fb21 	bl	800e32c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	685b      	ldr	r3, [r3, #4]
 8015cee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015cf0:	e01f      	b.n	8015d32 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015cf2:	69bb      	ldr	r3, [r7, #24]
 8015cf4:	685b      	ldr	r3, [r3, #4]
 8015cf6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015cf8:	69bb      	ldr	r3, [r7, #24]
 8015cfa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015cfc:	697b      	ldr	r3, [r7, #20]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015d02:	68f8      	ldr	r0, [r7, #12]
 8015d04:	f7f8 fba0 	bl	800e448 <pbuf_clen>
 8015d08:	4603      	mov	r3, r0
 8015d0a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015d0c:	8bfa      	ldrh	r2, [r7, #30]
 8015d0e:	8a7b      	ldrh	r3, [r7, #18]
 8015d10:	4413      	add	r3, r2
 8015d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015d16:	db05      	blt.n	8015d24 <ip_reass_free_complete_datagram+0xe0>
 8015d18:	4b15      	ldr	r3, [pc, #84]	@ (8015d70 <ip_reass_free_complete_datagram+0x12c>)
 8015d1a:	22cc      	movs	r2, #204	@ 0xcc
 8015d1c:	4918      	ldr	r1, [pc, #96]	@ (8015d80 <ip_reass_free_complete_datagram+0x13c>)
 8015d1e:	4816      	ldr	r0, [pc, #88]	@ (8015d78 <ip_reass_free_complete_datagram+0x134>)
 8015d20:	f001 fac8 	bl	80172b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015d24:	8bfa      	ldrh	r2, [r7, #30]
 8015d26:	8a7b      	ldrh	r3, [r7, #18]
 8015d28:	4413      	add	r3, r2
 8015d2a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015d2c:	68f8      	ldr	r0, [r7, #12]
 8015d2e:	f7f8 fafd 	bl	800e32c <pbuf_free>
  while (p != NULL) {
 8015d32:	69bb      	ldr	r3, [r7, #24]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d1dc      	bne.n	8015cf2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015d38:	6839      	ldr	r1, [r7, #0]
 8015d3a:	6878      	ldr	r0, [r7, #4]
 8015d3c:	f000 f8c2 	bl	8015ec4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015d40:	4b10      	ldr	r3, [pc, #64]	@ (8015d84 <ip_reass_free_complete_datagram+0x140>)
 8015d42:	881b      	ldrh	r3, [r3, #0]
 8015d44:	8bfa      	ldrh	r2, [r7, #30]
 8015d46:	429a      	cmp	r2, r3
 8015d48:	d905      	bls.n	8015d56 <ip_reass_free_complete_datagram+0x112>
 8015d4a:	4b09      	ldr	r3, [pc, #36]	@ (8015d70 <ip_reass_free_complete_datagram+0x12c>)
 8015d4c:	22d2      	movs	r2, #210	@ 0xd2
 8015d4e:	490e      	ldr	r1, [pc, #56]	@ (8015d88 <ip_reass_free_complete_datagram+0x144>)
 8015d50:	4809      	ldr	r0, [pc, #36]	@ (8015d78 <ip_reass_free_complete_datagram+0x134>)
 8015d52:	f001 faaf 	bl	80172b4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015d56:	4b0b      	ldr	r3, [pc, #44]	@ (8015d84 <ip_reass_free_complete_datagram+0x140>)
 8015d58:	881a      	ldrh	r2, [r3, #0]
 8015d5a:	8bfb      	ldrh	r3, [r7, #30]
 8015d5c:	1ad3      	subs	r3, r2, r3
 8015d5e:	b29a      	uxth	r2, r3
 8015d60:	4b08      	ldr	r3, [pc, #32]	@ (8015d84 <ip_reass_free_complete_datagram+0x140>)
 8015d62:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015d64:	8bfb      	ldrh	r3, [r7, #30]
}
 8015d66:	4618      	mov	r0, r3
 8015d68:	3720      	adds	r7, #32
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}
 8015d6e:	bf00      	nop
 8015d70:	0801ae20 	.word	0x0801ae20
 8015d74:	0801ae5c 	.word	0x0801ae5c
 8015d78:	0801ae68 	.word	0x0801ae68
 8015d7c:	0801ae90 	.word	0x0801ae90
 8015d80:	0801aea4 	.word	0x0801aea4
 8015d84:	200275b4 	.word	0x200275b4
 8015d88:	0801aec4 	.word	0x0801aec4

08015d8c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b08a      	sub	sp, #40	@ 0x28
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
 8015d94:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015d96:	2300      	movs	r3, #0
 8015d98:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015d9e:	2300      	movs	r3, #0
 8015da0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015da2:	2300      	movs	r3, #0
 8015da4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015da6:	2300      	movs	r3, #0
 8015da8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015daa:	4b28      	ldr	r3, [pc, #160]	@ (8015e4c <ip_reass_remove_oldest_datagram+0xc0>)
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015db0:	e030      	b.n	8015e14 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015db4:	695a      	ldr	r2, [r3, #20]
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	68db      	ldr	r3, [r3, #12]
 8015dba:	429a      	cmp	r2, r3
 8015dbc:	d10c      	bne.n	8015dd8 <ip_reass_remove_oldest_datagram+0x4c>
 8015dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dc0:	699a      	ldr	r2, [r3, #24]
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	691b      	ldr	r3, [r3, #16]
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d106      	bne.n	8015dd8 <ip_reass_remove_oldest_datagram+0x4c>
 8015dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dcc:	899a      	ldrh	r2, [r3, #12]
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	889b      	ldrh	r3, [r3, #4]
 8015dd2:	b29b      	uxth	r3, r3
 8015dd4:	429a      	cmp	r2, r3
 8015dd6:	d014      	beq.n	8015e02 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015dd8:	693b      	ldr	r3, [r7, #16]
 8015dda:	3301      	adds	r3, #1
 8015ddc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015dde:	6a3b      	ldr	r3, [r7, #32]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d104      	bne.n	8015dee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015de6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015de8:	69fb      	ldr	r3, [r7, #28]
 8015dea:	61bb      	str	r3, [r7, #24]
 8015dec:	e009      	b.n	8015e02 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015df0:	7fda      	ldrb	r2, [r3, #31]
 8015df2:	6a3b      	ldr	r3, [r7, #32]
 8015df4:	7fdb      	ldrb	r3, [r3, #31]
 8015df6:	429a      	cmp	r2, r3
 8015df8:	d803      	bhi.n	8015e02 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dfc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015dfe:	69fb      	ldr	r3, [r7, #28]
 8015e00:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d001      	beq.n	8015e0e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e0c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d1cb      	bne.n	8015db2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015e1a:	6a3b      	ldr	r3, [r7, #32]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d008      	beq.n	8015e32 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015e20:	69b9      	ldr	r1, [r7, #24]
 8015e22:	6a38      	ldr	r0, [r7, #32]
 8015e24:	f7ff ff0e 	bl	8015c44 <ip_reass_free_complete_datagram>
 8015e28:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015e2a:	697a      	ldr	r2, [r7, #20]
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	4413      	add	r3, r2
 8015e30:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015e32:	697a      	ldr	r2, [r7, #20]
 8015e34:	683b      	ldr	r3, [r7, #0]
 8015e36:	429a      	cmp	r2, r3
 8015e38:	da02      	bge.n	8015e40 <ip_reass_remove_oldest_datagram+0xb4>
 8015e3a:	693b      	ldr	r3, [r7, #16]
 8015e3c:	2b01      	cmp	r3, #1
 8015e3e:	dcac      	bgt.n	8015d9a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015e40:	697b      	ldr	r3, [r7, #20]
}
 8015e42:	4618      	mov	r0, r3
 8015e44:	3728      	adds	r7, #40	@ 0x28
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}
 8015e4a:	bf00      	nop
 8015e4c:	200275b0 	.word	0x200275b0

08015e50 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b084      	sub	sp, #16
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
 8015e58:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015e5a:	2004      	movs	r0, #4
 8015e5c:	f7f7 fb4c 	bl	800d4f8 <memp_malloc>
 8015e60:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d110      	bne.n	8015e8a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015e68:	6839      	ldr	r1, [r7, #0]
 8015e6a:	6878      	ldr	r0, [r7, #4]
 8015e6c:	f7ff ff8e 	bl	8015d8c <ip_reass_remove_oldest_datagram>
 8015e70:	4602      	mov	r2, r0
 8015e72:	683b      	ldr	r3, [r7, #0]
 8015e74:	4293      	cmp	r3, r2
 8015e76:	dc03      	bgt.n	8015e80 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015e78:	2004      	movs	r0, #4
 8015e7a:	f7f7 fb3d 	bl	800d4f8 <memp_malloc>
 8015e7e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d101      	bne.n	8015e8a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015e86:	2300      	movs	r3, #0
 8015e88:	e016      	b.n	8015eb8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015e8a:	2220      	movs	r2, #32
 8015e8c:	2100      	movs	r1, #0
 8015e8e:	68f8      	ldr	r0, [r7, #12]
 8015e90:	f001 fb68 	bl	8017564 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	220f      	movs	r2, #15
 8015e98:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015e9a:	4b09      	ldr	r3, [pc, #36]	@ (8015ec0 <ip_reass_enqueue_new_datagram+0x70>)
 8015e9c:	681a      	ldr	r2, [r3, #0]
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015ea2:	4a07      	ldr	r2, [pc, #28]	@ (8015ec0 <ip_reass_enqueue_new_datagram+0x70>)
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	3308      	adds	r3, #8
 8015eac:	2214      	movs	r2, #20
 8015eae:	6879      	ldr	r1, [r7, #4]
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f001 fc2a 	bl	801770a <memcpy>
  return ipr;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
}
 8015eb8:	4618      	mov	r0, r3
 8015eba:	3710      	adds	r7, #16
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	bd80      	pop	{r7, pc}
 8015ec0:	200275b0 	.word	0x200275b0

08015ec4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b082      	sub	sp, #8
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015ece:	4b10      	ldr	r3, [pc, #64]	@ (8015f10 <ip_reass_dequeue_datagram+0x4c>)
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	687a      	ldr	r2, [r7, #4]
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	d104      	bne.n	8015ee2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	4a0c      	ldr	r2, [pc, #48]	@ (8015f10 <ip_reass_dequeue_datagram+0x4c>)
 8015ede:	6013      	str	r3, [r2, #0]
 8015ee0:	e00d      	b.n	8015efe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d106      	bne.n	8015ef6 <ip_reass_dequeue_datagram+0x32>
 8015ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8015f14 <ip_reass_dequeue_datagram+0x50>)
 8015eea:	f240 1245 	movw	r2, #325	@ 0x145
 8015eee:	490a      	ldr	r1, [pc, #40]	@ (8015f18 <ip_reass_dequeue_datagram+0x54>)
 8015ef0:	480a      	ldr	r0, [pc, #40]	@ (8015f1c <ip_reass_dequeue_datagram+0x58>)
 8015ef2:	f001 f9df 	bl	80172b4 <iprintf>
    prev->next = ipr->next;
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	681a      	ldr	r2, [r3, #0]
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015efe:	6879      	ldr	r1, [r7, #4]
 8015f00:	2004      	movs	r0, #4
 8015f02:	f7f7 fb6f 	bl	800d5e4 <memp_free>
}
 8015f06:	bf00      	nop
 8015f08:	3708      	adds	r7, #8
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}
 8015f0e:	bf00      	nop
 8015f10:	200275b0 	.word	0x200275b0
 8015f14:	0801ae20 	.word	0x0801ae20
 8015f18:	0801aee8 	.word	0x0801aee8
 8015f1c:	0801ae68 	.word	0x0801ae68

08015f20 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b08c      	sub	sp, #48	@ 0x30
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	60f8      	str	r0, [r7, #12]
 8015f28:	60b9      	str	r1, [r7, #8]
 8015f2a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015f30:	2301      	movs	r3, #1
 8015f32:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	685b      	ldr	r3, [r3, #4]
 8015f38:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015f3a:	69fb      	ldr	r3, [r7, #28]
 8015f3c:	885b      	ldrh	r3, [r3, #2]
 8015f3e:	b29b      	uxth	r3, r3
 8015f40:	4618      	mov	r0, r3
 8015f42:	f7f6 fe05 	bl	800cb50 <lwip_htons>
 8015f46:	4603      	mov	r3, r0
 8015f48:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015f4a:	69fb      	ldr	r3, [r7, #28]
 8015f4c:	781b      	ldrb	r3, [r3, #0]
 8015f4e:	f003 030f 	and.w	r3, r3, #15
 8015f52:	b2db      	uxtb	r3, r3
 8015f54:	009b      	lsls	r3, r3, #2
 8015f56:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015f58:	7e7b      	ldrb	r3, [r7, #25]
 8015f5a:	b29b      	uxth	r3, r3
 8015f5c:	8b7a      	ldrh	r2, [r7, #26]
 8015f5e:	429a      	cmp	r2, r3
 8015f60:	d202      	bcs.n	8015f68 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f62:	f04f 33ff 	mov.w	r3, #4294967295
 8015f66:	e135      	b.n	80161d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015f68:	7e7b      	ldrb	r3, [r7, #25]
 8015f6a:	b29b      	uxth	r3, r3
 8015f6c:	8b7a      	ldrh	r2, [r7, #26]
 8015f6e:	1ad3      	subs	r3, r2, r3
 8015f70:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015f72:	69fb      	ldr	r3, [r7, #28]
 8015f74:	88db      	ldrh	r3, [r3, #6]
 8015f76:	b29b      	uxth	r3, r3
 8015f78:	4618      	mov	r0, r3
 8015f7a:	f7f6 fde9 	bl	800cb50 <lwip_htons>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f84:	b29b      	uxth	r3, r3
 8015f86:	00db      	lsls	r3, r3, #3
 8015f88:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015f8a:	68bb      	ldr	r3, [r7, #8]
 8015f8c:	685b      	ldr	r3, [r3, #4]
 8015f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8015f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f92:	2200      	movs	r2, #0
 8015f94:	701a      	strb	r2, [r3, #0]
 8015f96:	2200      	movs	r2, #0
 8015f98:	705a      	strb	r2, [r3, #1]
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	709a      	strb	r2, [r3, #2]
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fa4:	8afa      	ldrh	r2, [r7, #22]
 8015fa6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015fa8:	8afa      	ldrh	r2, [r7, #22]
 8015faa:	8b7b      	ldrh	r3, [r7, #26]
 8015fac:	4413      	add	r3, r2
 8015fae:	b29a      	uxth	r2, r3
 8015fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fb2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fb6:	88db      	ldrh	r3, [r3, #6]
 8015fb8:	b29b      	uxth	r3, r3
 8015fba:	8afa      	ldrh	r2, [r7, #22]
 8015fbc:	429a      	cmp	r2, r3
 8015fbe:	d902      	bls.n	8015fc6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8015fc4:	e106      	b.n	80161d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	685b      	ldr	r3, [r3, #4]
 8015fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8015fcc:	e068      	b.n	80160a0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fd0:	685b      	ldr	r3, [r3, #4]
 8015fd2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fd6:	889b      	ldrh	r3, [r3, #4]
 8015fd8:	b29a      	uxth	r2, r3
 8015fda:	693b      	ldr	r3, [r7, #16]
 8015fdc:	889b      	ldrh	r3, [r3, #4]
 8015fde:	b29b      	uxth	r3, r3
 8015fe0:	429a      	cmp	r2, r3
 8015fe2:	d235      	bcs.n	8016050 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015fe8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d020      	beq.n	8016032 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ff2:	889b      	ldrh	r3, [r3, #4]
 8015ff4:	b29a      	uxth	r2, r3
 8015ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ff8:	88db      	ldrh	r3, [r3, #6]
 8015ffa:	b29b      	uxth	r3, r3
 8015ffc:	429a      	cmp	r2, r3
 8015ffe:	d307      	bcc.n	8016010 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016002:	88db      	ldrh	r3, [r3, #6]
 8016004:	b29a      	uxth	r2, r3
 8016006:	693b      	ldr	r3, [r7, #16]
 8016008:	889b      	ldrh	r3, [r3, #4]
 801600a:	b29b      	uxth	r3, r3
 801600c:	429a      	cmp	r2, r3
 801600e:	d902      	bls.n	8016016 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016010:	f04f 33ff 	mov.w	r3, #4294967295
 8016014:	e0de      	b.n	80161d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016018:	68ba      	ldr	r2, [r7, #8]
 801601a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801601c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801601e:	88db      	ldrh	r3, [r3, #6]
 8016020:	b29a      	uxth	r2, r3
 8016022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016024:	889b      	ldrh	r3, [r3, #4]
 8016026:	b29b      	uxth	r3, r3
 8016028:	429a      	cmp	r2, r3
 801602a:	d03d      	beq.n	80160a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801602c:	2300      	movs	r3, #0
 801602e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016030:	e03a      	b.n	80160a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016034:	88db      	ldrh	r3, [r3, #6]
 8016036:	b29a      	uxth	r2, r3
 8016038:	693b      	ldr	r3, [r7, #16]
 801603a:	889b      	ldrh	r3, [r3, #4]
 801603c:	b29b      	uxth	r3, r3
 801603e:	429a      	cmp	r2, r3
 8016040:	d902      	bls.n	8016048 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016042:	f04f 33ff 	mov.w	r3, #4294967295
 8016046:	e0c5      	b.n	80161d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	68ba      	ldr	r2, [r7, #8]
 801604c:	605a      	str	r2, [r3, #4]
      break;
 801604e:	e02b      	b.n	80160a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016052:	889b      	ldrh	r3, [r3, #4]
 8016054:	b29a      	uxth	r2, r3
 8016056:	693b      	ldr	r3, [r7, #16]
 8016058:	889b      	ldrh	r3, [r3, #4]
 801605a:	b29b      	uxth	r3, r3
 801605c:	429a      	cmp	r2, r3
 801605e:	d102      	bne.n	8016066 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016060:	f04f 33ff 	mov.w	r3, #4294967295
 8016064:	e0b6      	b.n	80161d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016068:	889b      	ldrh	r3, [r3, #4]
 801606a:	b29a      	uxth	r2, r3
 801606c:	693b      	ldr	r3, [r7, #16]
 801606e:	88db      	ldrh	r3, [r3, #6]
 8016070:	b29b      	uxth	r3, r3
 8016072:	429a      	cmp	r2, r3
 8016074:	d202      	bcs.n	801607c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016076:	f04f 33ff 	mov.w	r3, #4294967295
 801607a:	e0ab      	b.n	80161d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801607c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801607e:	2b00      	cmp	r3, #0
 8016080:	d009      	beq.n	8016096 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016084:	88db      	ldrh	r3, [r3, #6]
 8016086:	b29a      	uxth	r2, r3
 8016088:	693b      	ldr	r3, [r7, #16]
 801608a:	889b      	ldrh	r3, [r3, #4]
 801608c:	b29b      	uxth	r3, r3
 801608e:	429a      	cmp	r2, r3
 8016090:	d001      	beq.n	8016096 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016092:	2300      	movs	r3, #0
 8016094:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016096:	693b      	ldr	r3, [r7, #16]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801609c:	693b      	ldr	r3, [r7, #16]
 801609e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80160a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d193      	bne.n	8015fce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80160a6:	e000      	b.n	80160aa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80160a8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80160aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d12d      	bne.n	801610c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80160b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d01c      	beq.n	80160f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80160b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160b8:	88db      	ldrh	r3, [r3, #6]
 80160ba:	b29a      	uxth	r2, r3
 80160bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160be:	889b      	ldrh	r3, [r3, #4]
 80160c0:	b29b      	uxth	r3, r3
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d906      	bls.n	80160d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80160c6:	4b45      	ldr	r3, [pc, #276]	@ (80161dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80160c8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80160cc:	4944      	ldr	r1, [pc, #272]	@ (80161e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80160ce:	4845      	ldr	r0, [pc, #276]	@ (80161e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80160d0:	f001 f8f0 	bl	80172b4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80160d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160d6:	68ba      	ldr	r2, [r7, #8]
 80160d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80160da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160dc:	88db      	ldrh	r3, [r3, #6]
 80160de:	b29a      	uxth	r2, r3
 80160e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160e2:	889b      	ldrh	r3, [r3, #4]
 80160e4:	b29b      	uxth	r3, r3
 80160e6:	429a      	cmp	r2, r3
 80160e8:	d010      	beq.n	801610c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80160ea:	2300      	movs	r3, #0
 80160ec:	623b      	str	r3, [r7, #32]
 80160ee:	e00d      	b.n	801610c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	685b      	ldr	r3, [r3, #4]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d006      	beq.n	8016106 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80160f8:	4b38      	ldr	r3, [pc, #224]	@ (80161dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80160fa:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80160fe:	493a      	ldr	r1, [pc, #232]	@ (80161e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016100:	4838      	ldr	r0, [pc, #224]	@ (80161e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016102:	f001 f8d7 	bl	80172b4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	68ba      	ldr	r2, [r7, #8]
 801610a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d105      	bne.n	801611e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	7f9b      	ldrb	r3, [r3, #30]
 8016116:	f003 0301 	and.w	r3, r3, #1
 801611a:	2b00      	cmp	r3, #0
 801611c:	d059      	beq.n	80161d2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801611e:	6a3b      	ldr	r3, [r7, #32]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d04f      	beq.n	80161c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	685b      	ldr	r3, [r3, #4]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d006      	beq.n	801613a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	685b      	ldr	r3, [r3, #4]
 8016130:	685b      	ldr	r3, [r3, #4]
 8016132:	889b      	ldrh	r3, [r3, #4]
 8016134:	b29b      	uxth	r3, r3
 8016136:	2b00      	cmp	r3, #0
 8016138:	d002      	beq.n	8016140 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801613a:	2300      	movs	r3, #0
 801613c:	623b      	str	r3, [r7, #32]
 801613e:	e041      	b.n	80161c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016142:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801614a:	e012      	b.n	8016172 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801614e:	685b      	ldr	r3, [r3, #4]
 8016150:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8016152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016154:	88db      	ldrh	r3, [r3, #6]
 8016156:	b29a      	uxth	r2, r3
 8016158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801615a:	889b      	ldrh	r3, [r3, #4]
 801615c:	b29b      	uxth	r3, r3
 801615e:	429a      	cmp	r2, r3
 8016160:	d002      	beq.n	8016168 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016162:	2300      	movs	r3, #0
 8016164:	623b      	str	r3, [r7, #32]
            break;
 8016166:	e007      	b.n	8016178 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801616a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801616c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016174:	2b00      	cmp	r3, #0
 8016176:	d1e9      	bne.n	801614c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016178:	6a3b      	ldr	r3, [r7, #32]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d022      	beq.n	80161c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	685b      	ldr	r3, [r3, #4]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d106      	bne.n	8016194 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016186:	4b15      	ldr	r3, [pc, #84]	@ (80161dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016188:	f240 12df 	movw	r2, #479	@ 0x1df
 801618c:	4917      	ldr	r1, [pc, #92]	@ (80161ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801618e:	4815      	ldr	r0, [pc, #84]	@ (80161e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016190:	f001 f890 	bl	80172b4 <iprintf>
          LWIP_ASSERT("sanity check",
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	685b      	ldr	r3, [r3, #4]
 8016198:	685b      	ldr	r3, [r3, #4]
 801619a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801619c:	429a      	cmp	r2, r3
 801619e:	d106      	bne.n	80161ae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80161a0:	4b0e      	ldr	r3, [pc, #56]	@ (80161dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80161a2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80161a6:	4911      	ldr	r1, [pc, #68]	@ (80161ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80161a8:	480e      	ldr	r0, [pc, #56]	@ (80161e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80161aa:	f001 f883 	bl	80172b4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80161ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d006      	beq.n	80161c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80161b6:	4b09      	ldr	r3, [pc, #36]	@ (80161dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80161b8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80161bc:	490c      	ldr	r1, [pc, #48]	@ (80161f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80161be:	4809      	ldr	r0, [pc, #36]	@ (80161e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80161c0:	f001 f878 	bl	80172b4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80161c4:	6a3b      	ldr	r3, [r7, #32]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	bf14      	ite	ne
 80161ca:	2301      	movne	r3, #1
 80161cc:	2300      	moveq	r3, #0
 80161ce:	b2db      	uxtb	r3, r3
 80161d0:	e000      	b.n	80161d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80161d2:	2300      	movs	r3, #0
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	3730      	adds	r7, #48	@ 0x30
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}
 80161dc:	0801ae20 	.word	0x0801ae20
 80161e0:	0801af04 	.word	0x0801af04
 80161e4:	0801ae68 	.word	0x0801ae68
 80161e8:	0801af24 	.word	0x0801af24
 80161ec:	0801af5c 	.word	0x0801af5c
 80161f0:	0801af6c 	.word	0x0801af6c

080161f4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b08e      	sub	sp, #56	@ 0x38
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	685b      	ldr	r3, [r3, #4]
 8016200:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016204:	781b      	ldrb	r3, [r3, #0]
 8016206:	f003 030f 	and.w	r3, r3, #15
 801620a:	b2db      	uxtb	r3, r3
 801620c:	009b      	lsls	r3, r3, #2
 801620e:	b2db      	uxtb	r3, r3
 8016210:	2b14      	cmp	r3, #20
 8016212:	f040 8171 	bne.w	80164f8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016218:	88db      	ldrh	r3, [r3, #6]
 801621a:	b29b      	uxth	r3, r3
 801621c:	4618      	mov	r0, r3
 801621e:	f7f6 fc97 	bl	800cb50 <lwip_htons>
 8016222:	4603      	mov	r3, r0
 8016224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016228:	b29b      	uxth	r3, r3
 801622a:	00db      	lsls	r3, r3, #3
 801622c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801622e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016230:	885b      	ldrh	r3, [r3, #2]
 8016232:	b29b      	uxth	r3, r3
 8016234:	4618      	mov	r0, r3
 8016236:	f7f6 fc8b 	bl	800cb50 <lwip_htons>
 801623a:	4603      	mov	r3, r0
 801623c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801623e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016240:	781b      	ldrb	r3, [r3, #0]
 8016242:	f003 030f 	and.w	r3, r3, #15
 8016246:	b2db      	uxtb	r3, r3
 8016248:	009b      	lsls	r3, r3, #2
 801624a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801624e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016252:	b29b      	uxth	r3, r3
 8016254:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016256:	429a      	cmp	r2, r3
 8016258:	f0c0 8150 	bcc.w	80164fc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801625c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016260:	b29b      	uxth	r3, r3
 8016262:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016264:	1ad3      	subs	r3, r2, r3
 8016266:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016268:	6878      	ldr	r0, [r7, #4]
 801626a:	f7f8 f8ed 	bl	800e448 <pbuf_clen>
 801626e:	4603      	mov	r3, r0
 8016270:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016272:	4b8c      	ldr	r3, [pc, #560]	@ (80164a4 <ip4_reass+0x2b0>)
 8016274:	881b      	ldrh	r3, [r3, #0]
 8016276:	461a      	mov	r2, r3
 8016278:	8c3b      	ldrh	r3, [r7, #32]
 801627a:	4413      	add	r3, r2
 801627c:	2b0a      	cmp	r3, #10
 801627e:	dd10      	ble.n	80162a2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016280:	8c3b      	ldrh	r3, [r7, #32]
 8016282:	4619      	mov	r1, r3
 8016284:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016286:	f7ff fd81 	bl	8015d8c <ip_reass_remove_oldest_datagram>
 801628a:	4603      	mov	r3, r0
 801628c:	2b00      	cmp	r3, #0
 801628e:	f000 8137 	beq.w	8016500 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016292:	4b84      	ldr	r3, [pc, #528]	@ (80164a4 <ip4_reass+0x2b0>)
 8016294:	881b      	ldrh	r3, [r3, #0]
 8016296:	461a      	mov	r2, r3
 8016298:	8c3b      	ldrh	r3, [r7, #32]
 801629a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801629c:	2b0a      	cmp	r3, #10
 801629e:	f300 812f 	bgt.w	8016500 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80162a2:	4b81      	ldr	r3, [pc, #516]	@ (80164a8 <ip4_reass+0x2b4>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80162a8:	e015      	b.n	80162d6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80162aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162ac:	695a      	ldr	r2, [r3, #20]
 80162ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162b0:	68db      	ldr	r3, [r3, #12]
 80162b2:	429a      	cmp	r2, r3
 80162b4:	d10c      	bne.n	80162d0 <ip4_reass+0xdc>
 80162b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162b8:	699a      	ldr	r2, [r3, #24]
 80162ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162bc:	691b      	ldr	r3, [r3, #16]
 80162be:	429a      	cmp	r2, r3
 80162c0:	d106      	bne.n	80162d0 <ip4_reass+0xdc>
 80162c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162c4:	899a      	ldrh	r2, [r3, #12]
 80162c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162c8:	889b      	ldrh	r3, [r3, #4]
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	429a      	cmp	r2, r3
 80162ce:	d006      	beq.n	80162de <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80162d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80162d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d1e6      	bne.n	80162aa <ip4_reass+0xb6>
 80162dc:	e000      	b.n	80162e0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80162de:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80162e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d109      	bne.n	80162fa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80162e6:	8c3b      	ldrh	r3, [r7, #32]
 80162e8:	4619      	mov	r1, r3
 80162ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80162ec:	f7ff fdb0 	bl	8015e50 <ip_reass_enqueue_new_datagram>
 80162f0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80162f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d11c      	bne.n	8016332 <ip4_reass+0x13e>
      goto nullreturn;
 80162f8:	e105      	b.n	8016506 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80162fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162fc:	88db      	ldrh	r3, [r3, #6]
 80162fe:	b29b      	uxth	r3, r3
 8016300:	4618      	mov	r0, r3
 8016302:	f7f6 fc25 	bl	800cb50 <lwip_htons>
 8016306:	4603      	mov	r3, r0
 8016308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801630c:	2b00      	cmp	r3, #0
 801630e:	d110      	bne.n	8016332 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016312:	89db      	ldrh	r3, [r3, #14]
 8016314:	4618      	mov	r0, r3
 8016316:	f7f6 fc1b 	bl	800cb50 <lwip_htons>
 801631a:	4603      	mov	r3, r0
 801631c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016320:	2b00      	cmp	r3, #0
 8016322:	d006      	beq.n	8016332 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016326:	3308      	adds	r3, #8
 8016328:	2214      	movs	r2, #20
 801632a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801632c:	4618      	mov	r0, r3
 801632e:	f001 f9ec 	bl	801770a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016334:	88db      	ldrh	r3, [r3, #6]
 8016336:	b29b      	uxth	r3, r3
 8016338:	f003 0320 	and.w	r3, r3, #32
 801633c:	2b00      	cmp	r3, #0
 801633e:	bf0c      	ite	eq
 8016340:	2301      	moveq	r3, #1
 8016342:	2300      	movne	r3, #0
 8016344:	b2db      	uxtb	r3, r3
 8016346:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016348:	69fb      	ldr	r3, [r7, #28]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d00e      	beq.n	801636c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801634e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016350:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016352:	4413      	add	r3, r2
 8016354:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016356:	8b7a      	ldrh	r2, [r7, #26]
 8016358:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801635a:	429a      	cmp	r2, r3
 801635c:	f0c0 80a0 	bcc.w	80164a0 <ip4_reass+0x2ac>
 8016360:	8b7b      	ldrh	r3, [r7, #26]
 8016362:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8016366:	4293      	cmp	r3, r2
 8016368:	f200 809a 	bhi.w	80164a0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801636c:	69fa      	ldr	r2, [r7, #28]
 801636e:	6879      	ldr	r1, [r7, #4]
 8016370:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016372:	f7ff fdd5 	bl	8015f20 <ip_reass_chain_frag_into_datagram_and_validate>
 8016376:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016378:	697b      	ldr	r3, [r7, #20]
 801637a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801637e:	f000 809b 	beq.w	80164b8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016382:	4b48      	ldr	r3, [pc, #288]	@ (80164a4 <ip4_reass+0x2b0>)
 8016384:	881a      	ldrh	r2, [r3, #0]
 8016386:	8c3b      	ldrh	r3, [r7, #32]
 8016388:	4413      	add	r3, r2
 801638a:	b29a      	uxth	r2, r3
 801638c:	4b45      	ldr	r3, [pc, #276]	@ (80164a4 <ip4_reass+0x2b0>)
 801638e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016390:	69fb      	ldr	r3, [r7, #28]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d00d      	beq.n	80163b2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016396:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016398:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801639a:	4413      	add	r3, r2
 801639c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163a0:	8a7a      	ldrh	r2, [r7, #18]
 80163a2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80163a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163a6:	7f9b      	ldrb	r3, [r3, #30]
 80163a8:	f043 0301 	orr.w	r3, r3, #1
 80163ac:	b2da      	uxtb	r2, r3
 80163ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163b0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80163b2:	697b      	ldr	r3, [r7, #20]
 80163b4:	2b01      	cmp	r3, #1
 80163b6:	d171      	bne.n	801649c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80163b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163ba:	8b9b      	ldrh	r3, [r3, #28]
 80163bc:	3314      	adds	r3, #20
 80163be:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80163c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163c2:	685b      	ldr	r3, [r3, #4]
 80163c4:	685b      	ldr	r3, [r3, #4]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80163ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163cc:	685b      	ldr	r3, [r3, #4]
 80163ce:	685b      	ldr	r3, [r3, #4]
 80163d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80163d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163d4:	3308      	adds	r3, #8
 80163d6:	2214      	movs	r2, #20
 80163d8:	4619      	mov	r1, r3
 80163da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80163dc:	f001 f995 	bl	801770a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80163e0:	8a3b      	ldrh	r3, [r7, #16]
 80163e2:	4618      	mov	r0, r3
 80163e4:	f7f6 fbb4 	bl	800cb50 <lwip_htons>
 80163e8:	4603      	mov	r3, r0
 80163ea:	461a      	mov	r2, r3
 80163ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163ee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80163f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163f2:	2200      	movs	r2, #0
 80163f4:	719a      	strb	r2, [r3, #6]
 80163f6:	2200      	movs	r2, #0
 80163f8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80163fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163fc:	2200      	movs	r2, #0
 80163fe:	729a      	strb	r2, [r3, #10]
 8016400:	2200      	movs	r2, #0
 8016402:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016406:	685b      	ldr	r3, [r3, #4]
 8016408:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801640a:	e00d      	b.n	8016428 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801640c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801640e:	685b      	ldr	r3, [r3, #4]
 8016410:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016412:	2114      	movs	r1, #20
 8016414:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016416:	f7f7 ff03 	bl	800e220 <pbuf_remove_header>
      pbuf_cat(p, r);
 801641a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801641c:	6878      	ldr	r0, [r7, #4]
 801641e:	f7f8 f853 	bl	800e4c8 <pbuf_cat>
      r = iprh->next_pbuf;
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8016428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801642a:	2b00      	cmp	r3, #0
 801642c:	d1ee      	bne.n	801640c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801642e:	4b1e      	ldr	r3, [pc, #120]	@ (80164a8 <ip4_reass+0x2b4>)
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016434:	429a      	cmp	r2, r3
 8016436:	d102      	bne.n	801643e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016438:	2300      	movs	r3, #0
 801643a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801643c:	e010      	b.n	8016460 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801643e:	4b1a      	ldr	r3, [pc, #104]	@ (80164a8 <ip4_reass+0x2b4>)
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016444:	e007      	b.n	8016456 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801644c:	429a      	cmp	r2, r3
 801644e:	d006      	beq.n	801645e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016458:	2b00      	cmp	r3, #0
 801645a:	d1f4      	bne.n	8016446 <ip4_reass+0x252>
 801645c:	e000      	b.n	8016460 <ip4_reass+0x26c>
          break;
 801645e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016460:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016462:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016464:	f7ff fd2e 	bl	8015ec4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	f7f7 ffed 	bl	800e448 <pbuf_clen>
 801646e:	4603      	mov	r3, r0
 8016470:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016472:	4b0c      	ldr	r3, [pc, #48]	@ (80164a4 <ip4_reass+0x2b0>)
 8016474:	881b      	ldrh	r3, [r3, #0]
 8016476:	8c3a      	ldrh	r2, [r7, #32]
 8016478:	429a      	cmp	r2, r3
 801647a:	d906      	bls.n	801648a <ip4_reass+0x296>
 801647c:	4b0b      	ldr	r3, [pc, #44]	@ (80164ac <ip4_reass+0x2b8>)
 801647e:	f240 229b 	movw	r2, #667	@ 0x29b
 8016482:	490b      	ldr	r1, [pc, #44]	@ (80164b0 <ip4_reass+0x2bc>)
 8016484:	480b      	ldr	r0, [pc, #44]	@ (80164b4 <ip4_reass+0x2c0>)
 8016486:	f000 ff15 	bl	80172b4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801648a:	4b06      	ldr	r3, [pc, #24]	@ (80164a4 <ip4_reass+0x2b0>)
 801648c:	881a      	ldrh	r2, [r3, #0]
 801648e:	8c3b      	ldrh	r3, [r7, #32]
 8016490:	1ad3      	subs	r3, r2, r3
 8016492:	b29a      	uxth	r2, r3
 8016494:	4b03      	ldr	r3, [pc, #12]	@ (80164a4 <ip4_reass+0x2b0>)
 8016496:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	e038      	b.n	801650e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801649c:	2300      	movs	r3, #0
 801649e:	e036      	b.n	801650e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80164a0:	bf00      	nop
 80164a2:	e00a      	b.n	80164ba <ip4_reass+0x2c6>
 80164a4:	200275b4 	.word	0x200275b4
 80164a8:	200275b0 	.word	0x200275b0
 80164ac:	0801ae20 	.word	0x0801ae20
 80164b0:	0801af90 	.word	0x0801af90
 80164b4:	0801ae68 	.word	0x0801ae68
    goto nullreturn_ipr;
 80164b8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80164ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d106      	bne.n	80164ce <ip4_reass+0x2da>
 80164c0:	4b15      	ldr	r3, [pc, #84]	@ (8016518 <ip4_reass+0x324>)
 80164c2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80164c6:	4915      	ldr	r1, [pc, #84]	@ (801651c <ip4_reass+0x328>)
 80164c8:	4815      	ldr	r0, [pc, #84]	@ (8016520 <ip4_reass+0x32c>)
 80164ca:	f000 fef3 	bl	80172b4 <iprintf>
  if (ipr->p == NULL) {
 80164ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164d0:	685b      	ldr	r3, [r3, #4]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d116      	bne.n	8016504 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80164d6:	4b13      	ldr	r3, [pc, #76]	@ (8016524 <ip4_reass+0x330>)
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80164dc:	429a      	cmp	r2, r3
 80164de:	d006      	beq.n	80164ee <ip4_reass+0x2fa>
 80164e0:	4b0d      	ldr	r3, [pc, #52]	@ (8016518 <ip4_reass+0x324>)
 80164e2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80164e6:	4910      	ldr	r1, [pc, #64]	@ (8016528 <ip4_reass+0x334>)
 80164e8:	480d      	ldr	r0, [pc, #52]	@ (8016520 <ip4_reass+0x32c>)
 80164ea:	f000 fee3 	bl	80172b4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80164ee:	2100      	movs	r1, #0
 80164f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80164f2:	f7ff fce7 	bl	8015ec4 <ip_reass_dequeue_datagram>
 80164f6:	e006      	b.n	8016506 <ip4_reass+0x312>
    goto nullreturn;
 80164f8:	bf00      	nop
 80164fa:	e004      	b.n	8016506 <ip4_reass+0x312>
    goto nullreturn;
 80164fc:	bf00      	nop
 80164fe:	e002      	b.n	8016506 <ip4_reass+0x312>
      goto nullreturn;
 8016500:	bf00      	nop
 8016502:	e000      	b.n	8016506 <ip4_reass+0x312>
  }

nullreturn:
 8016504:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016506:	6878      	ldr	r0, [r7, #4]
 8016508:	f7f7 ff10 	bl	800e32c <pbuf_free>
  return NULL;
 801650c:	2300      	movs	r3, #0
}
 801650e:	4618      	mov	r0, r3
 8016510:	3738      	adds	r7, #56	@ 0x38
 8016512:	46bd      	mov	sp, r7
 8016514:	bd80      	pop	{r7, pc}
 8016516:	bf00      	nop
 8016518:	0801ae20 	.word	0x0801ae20
 801651c:	0801afac 	.word	0x0801afac
 8016520:	0801ae68 	.word	0x0801ae68
 8016524:	200275b0 	.word	0x200275b0
 8016528:	0801afb8 	.word	0x0801afb8

0801652c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016530:	2005      	movs	r0, #5
 8016532:	f7f6 ffe1 	bl	800d4f8 <memp_malloc>
 8016536:	4603      	mov	r3, r0
}
 8016538:	4618      	mov	r0, r3
 801653a:	bd80      	pop	{r7, pc}

0801653c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b082      	sub	sp, #8
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d106      	bne.n	8016558 <ip_frag_free_pbuf_custom_ref+0x1c>
 801654a:	4b07      	ldr	r3, [pc, #28]	@ (8016568 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801654c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8016550:	4906      	ldr	r1, [pc, #24]	@ (801656c <ip_frag_free_pbuf_custom_ref+0x30>)
 8016552:	4807      	ldr	r0, [pc, #28]	@ (8016570 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016554:	f000 feae 	bl	80172b4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016558:	6879      	ldr	r1, [r7, #4]
 801655a:	2005      	movs	r0, #5
 801655c:	f7f7 f842 	bl	800d5e4 <memp_free>
}
 8016560:	bf00      	nop
 8016562:	3708      	adds	r7, #8
 8016564:	46bd      	mov	sp, r7
 8016566:	bd80      	pop	{r7, pc}
 8016568:	0801ae20 	.word	0x0801ae20
 801656c:	0801afd8 	.word	0x0801afd8
 8016570:	0801ae68 	.word	0x0801ae68

08016574 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b084      	sub	sp, #16
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d106      	bne.n	8016594 <ipfrag_free_pbuf_custom+0x20>
 8016586:	4b11      	ldr	r3, [pc, #68]	@ (80165cc <ipfrag_free_pbuf_custom+0x58>)
 8016588:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801658c:	4910      	ldr	r1, [pc, #64]	@ (80165d0 <ipfrag_free_pbuf_custom+0x5c>)
 801658e:	4811      	ldr	r0, [pc, #68]	@ (80165d4 <ipfrag_free_pbuf_custom+0x60>)
 8016590:	f000 fe90 	bl	80172b4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016594:	68fa      	ldr	r2, [r7, #12]
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	429a      	cmp	r2, r3
 801659a:	d006      	beq.n	80165aa <ipfrag_free_pbuf_custom+0x36>
 801659c:	4b0b      	ldr	r3, [pc, #44]	@ (80165cc <ipfrag_free_pbuf_custom+0x58>)
 801659e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80165a2:	490d      	ldr	r1, [pc, #52]	@ (80165d8 <ipfrag_free_pbuf_custom+0x64>)
 80165a4:	480b      	ldr	r0, [pc, #44]	@ (80165d4 <ipfrag_free_pbuf_custom+0x60>)
 80165a6:	f000 fe85 	bl	80172b4 <iprintf>
  if (pcr->original != NULL) {
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	695b      	ldr	r3, [r3, #20]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d004      	beq.n	80165bc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	695b      	ldr	r3, [r3, #20]
 80165b6:	4618      	mov	r0, r3
 80165b8:	f7f7 feb8 	bl	800e32c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80165bc:	68f8      	ldr	r0, [r7, #12]
 80165be:	f7ff ffbd 	bl	801653c <ip_frag_free_pbuf_custom_ref>
}
 80165c2:	bf00      	nop
 80165c4:	3710      	adds	r7, #16
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd80      	pop	{r7, pc}
 80165ca:	bf00      	nop
 80165cc:	0801ae20 	.word	0x0801ae20
 80165d0:	0801afe4 	.word	0x0801afe4
 80165d4:	0801ae68 	.word	0x0801ae68
 80165d8:	0801aff0 	.word	0x0801aff0

080165dc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b094      	sub	sp, #80	@ 0x50
 80165e0:	af02      	add	r7, sp, #8
 80165e2:	60f8      	str	r0, [r7, #12]
 80165e4:	60b9      	str	r1, [r7, #8]
 80165e6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80165e8:	2300      	movs	r3, #0
 80165ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80165ee:	68bb      	ldr	r3, [r7, #8]
 80165f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80165f2:	3b14      	subs	r3, #20
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	da00      	bge.n	80165fa <ip4_frag+0x1e>
 80165f8:	3307      	adds	r3, #7
 80165fa:	10db      	asrs	r3, r3, #3
 80165fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80165fe:	2314      	movs	r3, #20
 8016600:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	685b      	ldr	r3, [r3, #4]
 8016606:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8016608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801660a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801660e:	781b      	ldrb	r3, [r3, #0]
 8016610:	f003 030f 	and.w	r3, r3, #15
 8016614:	b2db      	uxtb	r3, r3
 8016616:	009b      	lsls	r3, r3, #2
 8016618:	b2db      	uxtb	r3, r3
 801661a:	2b14      	cmp	r3, #20
 801661c:	d002      	beq.n	8016624 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801661e:	f06f 0305 	mvn.w	r3, #5
 8016622:	e110      	b.n	8016846 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	895b      	ldrh	r3, [r3, #10]
 8016628:	2b13      	cmp	r3, #19
 801662a:	d809      	bhi.n	8016640 <ip4_frag+0x64>
 801662c:	4b88      	ldr	r3, [pc, #544]	@ (8016850 <ip4_frag+0x274>)
 801662e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8016632:	4988      	ldr	r1, [pc, #544]	@ (8016854 <ip4_frag+0x278>)
 8016634:	4888      	ldr	r0, [pc, #544]	@ (8016858 <ip4_frag+0x27c>)
 8016636:	f000 fe3d 	bl	80172b4 <iprintf>
 801663a:	f06f 0305 	mvn.w	r3, #5
 801663e:	e102      	b.n	8016846 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016642:	88db      	ldrh	r3, [r3, #6]
 8016644:	b29b      	uxth	r3, r3
 8016646:	4618      	mov	r0, r3
 8016648:	f7f6 fa82 	bl	800cb50 <lwip_htons>
 801664c:	4603      	mov	r3, r0
 801664e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8016650:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016652:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016656:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801665a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801665c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016660:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	891b      	ldrh	r3, [r3, #8]
 8016666:	3b14      	subs	r3, #20
 8016668:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801666c:	e0e1      	b.n	8016832 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801666e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016670:	00db      	lsls	r3, r3, #3
 8016672:	b29b      	uxth	r3, r3
 8016674:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016678:	4293      	cmp	r3, r2
 801667a:	bf28      	it	cs
 801667c:	4613      	movcs	r3, r2
 801667e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016680:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016684:	2114      	movs	r1, #20
 8016686:	200e      	movs	r0, #14
 8016688:	f7f7 fb6c 	bl	800dd64 <pbuf_alloc>
 801668c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016690:	2b00      	cmp	r3, #0
 8016692:	f000 80d5 	beq.w	8016840 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016698:	895b      	ldrh	r3, [r3, #10]
 801669a:	2b13      	cmp	r3, #19
 801669c:	d806      	bhi.n	80166ac <ip4_frag+0xd0>
 801669e:	4b6c      	ldr	r3, [pc, #432]	@ (8016850 <ip4_frag+0x274>)
 80166a0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80166a4:	496d      	ldr	r1, [pc, #436]	@ (801685c <ip4_frag+0x280>)
 80166a6:	486c      	ldr	r0, [pc, #432]	@ (8016858 <ip4_frag+0x27c>)
 80166a8:	f000 fe04 	bl	80172b4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80166ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166ae:	685b      	ldr	r3, [r3, #4]
 80166b0:	2214      	movs	r2, #20
 80166b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80166b4:	4618      	mov	r0, r3
 80166b6:	f001 f828 	bl	801770a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80166ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166bc:	685b      	ldr	r3, [r3, #4]
 80166be:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80166c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80166c2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80166c6:	e064      	b.n	8016792 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	895a      	ldrh	r2, [r3, #10]
 80166cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80166ce:	1ad3      	subs	r3, r2, r3
 80166d0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	895b      	ldrh	r3, [r3, #10]
 80166d6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80166d8:	429a      	cmp	r2, r3
 80166da:	d906      	bls.n	80166ea <ip4_frag+0x10e>
 80166dc:	4b5c      	ldr	r3, [pc, #368]	@ (8016850 <ip4_frag+0x274>)
 80166de:	f240 322d 	movw	r2, #813	@ 0x32d
 80166e2:	495f      	ldr	r1, [pc, #380]	@ (8016860 <ip4_frag+0x284>)
 80166e4:	485c      	ldr	r0, [pc, #368]	@ (8016858 <ip4_frag+0x27c>)
 80166e6:	f000 fde5 	bl	80172b4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80166ea:	8bfa      	ldrh	r2, [r7, #30]
 80166ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80166f0:	4293      	cmp	r3, r2
 80166f2:	bf28      	it	cs
 80166f4:	4613      	movcs	r3, r2
 80166f6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80166fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d105      	bne.n	801670e <ip4_frag+0x132>
        poff = 0;
 8016702:	2300      	movs	r3, #0
 8016704:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	60fb      	str	r3, [r7, #12]
        continue;
 801670c:	e041      	b.n	8016792 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801670e:	f7ff ff0d 	bl	801652c <ip_frag_alloc_pbuf_custom_ref>
 8016712:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016714:	69bb      	ldr	r3, [r7, #24]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d103      	bne.n	8016722 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801671a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801671c:	f7f7 fe06 	bl	800e32c <pbuf_free>
        goto memerr;
 8016720:	e08f      	b.n	8016842 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016722:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016728:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801672a:	4413      	add	r3, r2
 801672c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016730:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016734:	9201      	str	r2, [sp, #4]
 8016736:	9300      	str	r3, [sp, #0]
 8016738:	4603      	mov	r3, r0
 801673a:	2241      	movs	r2, #65	@ 0x41
 801673c:	2000      	movs	r0, #0
 801673e:	f7f7 fc3b 	bl	800dfb8 <pbuf_alloced_custom>
 8016742:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016744:	697b      	ldr	r3, [r7, #20]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d106      	bne.n	8016758 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801674a:	69b8      	ldr	r0, [r7, #24]
 801674c:	f7ff fef6 	bl	801653c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016750:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016752:	f7f7 fdeb 	bl	800e32c <pbuf_free>
        goto memerr;
 8016756:	e074      	b.n	8016842 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016758:	68f8      	ldr	r0, [r7, #12]
 801675a:	f7f7 fe8d 	bl	800e478 <pbuf_ref>
      pcr->original = p;
 801675e:	69bb      	ldr	r3, [r7, #24]
 8016760:	68fa      	ldr	r2, [r7, #12]
 8016762:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016764:	69bb      	ldr	r3, [r7, #24]
 8016766:	4a3f      	ldr	r2, [pc, #252]	@ (8016864 <ip4_frag+0x288>)
 8016768:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801676a:	6979      	ldr	r1, [r7, #20]
 801676c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801676e:	f7f7 feab 	bl	800e4c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016772:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8016776:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801677a:	1ad3      	subs	r3, r2, r3
 801677c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8016780:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016784:	2b00      	cmp	r3, #0
 8016786:	d004      	beq.n	8016792 <ip4_frag+0x1b6>
        poff = 0;
 8016788:	2300      	movs	r3, #0
 801678a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016792:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016796:	2b00      	cmp	r3, #0
 8016798:	d196      	bne.n	80166c8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801679a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801679c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80167a0:	4413      	add	r3, r2
 80167a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80167a4:	68bb      	ldr	r3, [r7, #8]
 80167a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80167a8:	f1a3 0213 	sub.w	r2, r3, #19
 80167ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80167b0:	429a      	cmp	r2, r3
 80167b2:	bfcc      	ite	gt
 80167b4:	2301      	movgt	r3, #1
 80167b6:	2300      	movle	r3, #0
 80167b8:	b2db      	uxtb	r3, r3
 80167ba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80167bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80167c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80167c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80167c6:	6a3b      	ldr	r3, [r7, #32]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d002      	beq.n	80167d2 <ip4_frag+0x1f6>
 80167cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d003      	beq.n	80167da <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80167d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80167d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80167d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80167da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80167dc:	4618      	mov	r0, r3
 80167de:	f7f6 f9b7 	bl	800cb50 <lwip_htons>
 80167e2:	4603      	mov	r3, r0
 80167e4:	461a      	mov	r2, r3
 80167e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167e8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80167ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80167ec:	3314      	adds	r3, #20
 80167ee:	b29b      	uxth	r3, r3
 80167f0:	4618      	mov	r0, r3
 80167f2:	f7f6 f9ad 	bl	800cb50 <lwip_htons>
 80167f6:	4603      	mov	r3, r0
 80167f8:	461a      	mov	r2, r3
 80167fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167fc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80167fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016800:	2200      	movs	r2, #0
 8016802:	729a      	strb	r2, [r3, #10]
 8016804:	2200      	movs	r2, #0
 8016806:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016808:	68bb      	ldr	r3, [r7, #8]
 801680a:	695b      	ldr	r3, [r3, #20]
 801680c:	687a      	ldr	r2, [r7, #4]
 801680e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016810:	68b8      	ldr	r0, [r7, #8]
 8016812:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016814:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016816:	f7f7 fd89 	bl	800e32c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801681a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801681e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016820:	1ad3      	subs	r3, r2, r3
 8016822:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8016826:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801682a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801682c:	4413      	add	r3, r2
 801682e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016832:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016836:	2b00      	cmp	r3, #0
 8016838:	f47f af19 	bne.w	801666e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801683c:	2300      	movs	r3, #0
 801683e:	e002      	b.n	8016846 <ip4_frag+0x26a>
      goto memerr;
 8016840:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016842:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016846:	4618      	mov	r0, r3
 8016848:	3748      	adds	r7, #72	@ 0x48
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}
 801684e:	bf00      	nop
 8016850:	0801ae20 	.word	0x0801ae20
 8016854:	0801affc 	.word	0x0801affc
 8016858:	0801ae68 	.word	0x0801ae68
 801685c:	0801b018 	.word	0x0801b018
 8016860:	0801b038 	.word	0x0801b038
 8016864:	08016575 	.word	0x08016575

08016868 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b086      	sub	sp, #24
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
 8016870:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016872:	230e      	movs	r3, #14
 8016874:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	895b      	ldrh	r3, [r3, #10]
 801687a:	2b0e      	cmp	r3, #14
 801687c:	d96e      	bls.n	801695c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	7bdb      	ldrb	r3, [r3, #15]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d106      	bne.n	8016894 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016886:	683b      	ldr	r3, [r7, #0]
 8016888:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801688c:	3301      	adds	r3, #1
 801688e:	b2da      	uxtb	r2, r3
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	685b      	ldr	r3, [r3, #4]
 8016898:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801689a:	693b      	ldr	r3, [r7, #16]
 801689c:	7b1a      	ldrb	r2, [r3, #12]
 801689e:	7b5b      	ldrb	r3, [r3, #13]
 80168a0:	021b      	lsls	r3, r3, #8
 80168a2:	4313      	orrs	r3, r2
 80168a4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80168a6:	693b      	ldr	r3, [r7, #16]
 80168a8:	781b      	ldrb	r3, [r3, #0]
 80168aa:	f003 0301 	and.w	r3, r3, #1
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d023      	beq.n	80168fa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80168b2:	693b      	ldr	r3, [r7, #16]
 80168b4:	781b      	ldrb	r3, [r3, #0]
 80168b6:	2b01      	cmp	r3, #1
 80168b8:	d10f      	bne.n	80168da <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80168ba:	693b      	ldr	r3, [r7, #16]
 80168bc:	785b      	ldrb	r3, [r3, #1]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d11b      	bne.n	80168fa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80168c2:	693b      	ldr	r3, [r7, #16]
 80168c4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80168c6:	2b5e      	cmp	r3, #94	@ 0x5e
 80168c8:	d117      	bne.n	80168fa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	7b5b      	ldrb	r3, [r3, #13]
 80168ce:	f043 0310 	orr.w	r3, r3, #16
 80168d2:	b2da      	uxtb	r2, r3
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	735a      	strb	r2, [r3, #13]
 80168d8:	e00f      	b.n	80168fa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80168da:	693b      	ldr	r3, [r7, #16]
 80168dc:	2206      	movs	r2, #6
 80168de:	4928      	ldr	r1, [pc, #160]	@ (8016980 <ethernet_input+0x118>)
 80168e0:	4618      	mov	r0, r3
 80168e2:	f000 fe2f 	bl	8017544 <memcmp>
 80168e6:	4603      	mov	r3, r0
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d106      	bne.n	80168fa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	7b5b      	ldrb	r3, [r3, #13]
 80168f0:	f043 0308 	orr.w	r3, r3, #8
 80168f4:	b2da      	uxtb	r2, r3
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80168fa:	89fb      	ldrh	r3, [r7, #14]
 80168fc:	2b08      	cmp	r3, #8
 80168fe:	d003      	beq.n	8016908 <ethernet_input+0xa0>
 8016900:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8016904:	d014      	beq.n	8016930 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016906:	e032      	b.n	801696e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016908:	683b      	ldr	r3, [r7, #0]
 801690a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801690e:	f003 0308 	and.w	r3, r3, #8
 8016912:	2b00      	cmp	r3, #0
 8016914:	d024      	beq.n	8016960 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016916:	8afb      	ldrh	r3, [r7, #22]
 8016918:	4619      	mov	r1, r3
 801691a:	6878      	ldr	r0, [r7, #4]
 801691c:	f7f7 fc80 	bl	800e220 <pbuf_remove_header>
 8016920:	4603      	mov	r3, r0
 8016922:	2b00      	cmp	r3, #0
 8016924:	d11e      	bne.n	8016964 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016926:	6839      	ldr	r1, [r7, #0]
 8016928:	6878      	ldr	r0, [r7, #4]
 801692a:	f7fe fe91 	bl	8015650 <ip4_input>
      break;
 801692e:	e013      	b.n	8016958 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016930:	683b      	ldr	r3, [r7, #0]
 8016932:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016936:	f003 0308 	and.w	r3, r3, #8
 801693a:	2b00      	cmp	r3, #0
 801693c:	d014      	beq.n	8016968 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801693e:	8afb      	ldrh	r3, [r7, #22]
 8016940:	4619      	mov	r1, r3
 8016942:	6878      	ldr	r0, [r7, #4]
 8016944:	f7f7 fc6c 	bl	800e220 <pbuf_remove_header>
 8016948:	4603      	mov	r3, r0
 801694a:	2b00      	cmp	r3, #0
 801694c:	d10e      	bne.n	801696c <ethernet_input+0x104>
        etharp_input(p, netif);
 801694e:	6839      	ldr	r1, [r7, #0]
 8016950:	6878      	ldr	r0, [r7, #4]
 8016952:	f7fe f831 	bl	80149b8 <etharp_input>
      break;
 8016956:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016958:	2300      	movs	r3, #0
 801695a:	e00c      	b.n	8016976 <ethernet_input+0x10e>
    goto free_and_return;
 801695c:	bf00      	nop
 801695e:	e006      	b.n	801696e <ethernet_input+0x106>
        goto free_and_return;
 8016960:	bf00      	nop
 8016962:	e004      	b.n	801696e <ethernet_input+0x106>
        goto free_and_return;
 8016964:	bf00      	nop
 8016966:	e002      	b.n	801696e <ethernet_input+0x106>
        goto free_and_return;
 8016968:	bf00      	nop
 801696a:	e000      	b.n	801696e <ethernet_input+0x106>
        goto free_and_return;
 801696c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801696e:	6878      	ldr	r0, [r7, #4]
 8016970:	f7f7 fcdc 	bl	800e32c <pbuf_free>
  return ERR_OK;
 8016974:	2300      	movs	r3, #0
}
 8016976:	4618      	mov	r0, r3
 8016978:	3718      	adds	r7, #24
 801697a:	46bd      	mov	sp, r7
 801697c:	bd80      	pop	{r7, pc}
 801697e:	bf00      	nop
 8016980:	0801b45c 	.word	0x0801b45c

08016984 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016984:	b580      	push	{r7, lr}
 8016986:	b086      	sub	sp, #24
 8016988:	af00      	add	r7, sp, #0
 801698a:	60f8      	str	r0, [r7, #12]
 801698c:	60b9      	str	r1, [r7, #8]
 801698e:	607a      	str	r2, [r7, #4]
 8016990:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016992:	8c3b      	ldrh	r3, [r7, #32]
 8016994:	4618      	mov	r0, r3
 8016996:	f7f6 f8db 	bl	800cb50 <lwip_htons>
 801699a:	4603      	mov	r3, r0
 801699c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801699e:	210e      	movs	r1, #14
 80169a0:	68b8      	ldr	r0, [r7, #8]
 80169a2:	f7f7 fc2d 	bl	800e200 <pbuf_add_header>
 80169a6:	4603      	mov	r3, r0
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d125      	bne.n	80169f8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80169ac:	68bb      	ldr	r3, [r7, #8]
 80169ae:	685b      	ldr	r3, [r3, #4]
 80169b0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80169b2:	693b      	ldr	r3, [r7, #16]
 80169b4:	8afa      	ldrh	r2, [r7, #22]
 80169b6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80169b8:	693b      	ldr	r3, [r7, #16]
 80169ba:	2206      	movs	r2, #6
 80169bc:	6839      	ldr	r1, [r7, #0]
 80169be:	4618      	mov	r0, r3
 80169c0:	f000 fea3 	bl	801770a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80169c4:	693b      	ldr	r3, [r7, #16]
 80169c6:	3306      	adds	r3, #6
 80169c8:	2206      	movs	r2, #6
 80169ca:	6879      	ldr	r1, [r7, #4]
 80169cc:	4618      	mov	r0, r3
 80169ce:	f000 fe9c 	bl	801770a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80169d8:	2b06      	cmp	r3, #6
 80169da:	d006      	beq.n	80169ea <ethernet_output+0x66>
 80169dc:	4b0a      	ldr	r3, [pc, #40]	@ (8016a08 <ethernet_output+0x84>)
 80169de:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80169e2:	490a      	ldr	r1, [pc, #40]	@ (8016a0c <ethernet_output+0x88>)
 80169e4:	480a      	ldr	r0, [pc, #40]	@ (8016a10 <ethernet_output+0x8c>)
 80169e6:	f000 fc65 	bl	80172b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	699b      	ldr	r3, [r3, #24]
 80169ee:	68b9      	ldr	r1, [r7, #8]
 80169f0:	68f8      	ldr	r0, [r7, #12]
 80169f2:	4798      	blx	r3
 80169f4:	4603      	mov	r3, r0
 80169f6:	e002      	b.n	80169fe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80169f8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80169fa:	f06f 0301 	mvn.w	r3, #1
}
 80169fe:	4618      	mov	r0, r3
 8016a00:	3718      	adds	r7, #24
 8016a02:	46bd      	mov	sp, r7
 8016a04:	bd80      	pop	{r7, pc}
 8016a06:	bf00      	nop
 8016a08:	0801b048 	.word	0x0801b048
 8016a0c:	0801b080 	.word	0x0801b080
 8016a10:	0801b0b4 	.word	0x0801b0b4

08016a14 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b082      	sub	sp, #8
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
 8016a1c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8016a1e:	683b      	ldr	r3, [r7, #0]
 8016a20:	2200      	movs	r2, #0
 8016a22:	2104      	movs	r1, #4
 8016a24:	4618      	mov	r0, r3
 8016a26:	f7f2 fa1f 	bl	8008e68 <osMessageQueueNew>
 8016a2a:	4602      	mov	r2, r0
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d102      	bne.n	8016a3e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016a38:	f04f 33ff 	mov.w	r3, #4294967295
 8016a3c:	e000      	b.n	8016a40 <sys_mbox_new+0x2c>

  return ERR_OK;
 8016a3e:	2300      	movs	r3, #0
}
 8016a40:	4618      	mov	r0, r3
 8016a42:	3708      	adds	r7, #8
 8016a44:	46bd      	mov	sp, r7
 8016a46:	bd80      	pop	{r7, pc}

08016a48 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b084      	sub	sp, #16
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
 8016a50:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	6818      	ldr	r0, [r3, #0]
 8016a56:	4639      	mov	r1, r7
 8016a58:	2300      	movs	r3, #0
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	f7f2 fa8a 	bl	8008f74 <osMessageQueuePut>
 8016a60:	4603      	mov	r3, r0
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d102      	bne.n	8016a6c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8016a66:	2300      	movs	r3, #0
 8016a68:	73fb      	strb	r3, [r7, #15]
 8016a6a:	e001      	b.n	8016a70 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016a6c:	23ff      	movs	r3, #255	@ 0xff
 8016a6e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016a74:	4618      	mov	r0, r3
 8016a76:	3710      	adds	r7, #16
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bd80      	pop	{r7, pc}

08016a7c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	b086      	sub	sp, #24
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	60f8      	str	r0, [r7, #12]
 8016a84:	60b9      	str	r1, [r7, #8]
 8016a86:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016a88:	f7f1 fe50 	bl	800872c <osKernelGetTickCount>
 8016a8c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d013      	beq.n	8016abc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	6818      	ldr	r0, [r3, #0]
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	68b9      	ldr	r1, [r7, #8]
 8016a9e:	f7f2 fadd 	bl	800905c <osMessageQueueGet>
 8016aa2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8016aa4:	693b      	ldr	r3, [r7, #16]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d105      	bne.n	8016ab6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8016aaa:	f7f1 fe3f 	bl	800872c <osKernelGetTickCount>
 8016aae:	4602      	mov	r2, r0
 8016ab0:	697b      	ldr	r3, [r7, #20]
 8016ab2:	1ad3      	subs	r3, r2, r3
 8016ab4:	e00f      	b.n	8016ad6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8016aba:	e00c      	b.n	8016ad6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	6818      	ldr	r0, [r3, #0]
 8016ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8016ac4:	2200      	movs	r2, #0
 8016ac6:	68b9      	ldr	r1, [r7, #8]
 8016ac8:	f7f2 fac8 	bl	800905c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8016acc:	f7f1 fe2e 	bl	800872c <osKernelGetTickCount>
 8016ad0:	4602      	mov	r2, r0
 8016ad2:	697b      	ldr	r3, [r7, #20]
 8016ad4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	3718      	adds	r7, #24
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}

08016ade <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016ade:	b480      	push	{r7}
 8016ae0:	b083      	sub	sp, #12
 8016ae2:	af00      	add	r7, sp, #0
 8016ae4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d101      	bne.n	8016af2 <sys_mbox_valid+0x14>
    return 0;
 8016aee:	2300      	movs	r3, #0
 8016af0:	e000      	b.n	8016af4 <sys_mbox_valid+0x16>
  else
    return 1;
 8016af2:	2301      	movs	r3, #1
}
 8016af4:	4618      	mov	r0, r3
 8016af6:	370c      	adds	r7, #12
 8016af8:	46bd      	mov	sp, r7
 8016afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016afe:	4770      	bx	lr

08016b00 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8016b04:	2000      	movs	r0, #0
 8016b06:	f7f1 ff0d 	bl	8008924 <osMutexNew>
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	4a01      	ldr	r2, [pc, #4]	@ (8016b14 <sys_init+0x14>)
 8016b0e:	6013      	str	r3, [r2, #0]
#endif
}
 8016b10:	bf00      	nop
 8016b12:	bd80      	pop	{r7, pc}
 8016b14:	200275b8 	.word	0x200275b8

08016b18 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b082      	sub	sp, #8
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016b20:	2000      	movs	r0, #0
 8016b22:	f7f1 feff 	bl	8008924 <osMutexNew>
 8016b26:	4602      	mov	r2, r0
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d102      	bne.n	8016b3a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016b34:	f04f 33ff 	mov.w	r3, #4294967295
 8016b38:	e000      	b.n	8016b3c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016b3a:	2300      	movs	r3, #0
}
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	3708      	adds	r7, #8
 8016b40:	46bd      	mov	sp, r7
 8016b42:	bd80      	pop	{r7, pc}

08016b44 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016b44:	b580      	push	{r7, lr}
 8016b46:	b082      	sub	sp, #8
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	f04f 31ff 	mov.w	r1, #4294967295
 8016b54:	4618      	mov	r0, r3
 8016b56:	f7f1 ff7f 	bl	8008a58 <osMutexAcquire>
#endif
}
 8016b5a:	bf00      	nop
 8016b5c:	3708      	adds	r7, #8
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	bd80      	pop	{r7, pc}

08016b62 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016b62:	b580      	push	{r7, lr}
 8016b64:	b082      	sub	sp, #8
 8016b66:	af00      	add	r7, sp, #0
 8016b68:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	4618      	mov	r0, r3
 8016b70:	f7f1 ffd0 	bl	8008b14 <osMutexRelease>
}
 8016b74:	bf00      	nop
 8016b76:	3708      	adds	r7, #8
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}

08016b7c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b08e      	sub	sp, #56	@ 0x38
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	60f8      	str	r0, [r7, #12]
 8016b84:	60b9      	str	r1, [r7, #8]
 8016b86:	607a      	str	r2, [r7, #4]
 8016b88:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8016b8a:	f107 0314 	add.w	r3, r7, #20
 8016b8e:	2224      	movs	r2, #36	@ 0x24
 8016b90:	2100      	movs	r1, #0
 8016b92:	4618      	mov	r0, r3
 8016b94:	f000 fce6 	bl	8017564 <memset>
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	617b      	str	r3, [r7, #20]
 8016b9c:	683b      	ldr	r3, [r7, #0]
 8016b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8016ba4:	f107 0314 	add.w	r3, r7, #20
 8016ba8:	461a      	mov	r2, r3
 8016baa:	6879      	ldr	r1, [r7, #4]
 8016bac:	68b8      	ldr	r0, [r7, #8]
 8016bae:	f7f1 fde5 	bl	800877c <osThreadNew>
 8016bb2:	4603      	mov	r3, r0
#endif
}
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	3738      	adds	r7, #56	@ 0x38
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	bd80      	pop	{r7, pc}

08016bbc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016bc0:	4b04      	ldr	r3, [pc, #16]	@ (8016bd4 <sys_arch_protect+0x18>)
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f7f1 ff45 	bl	8008a58 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8016bce:	2301      	movs	r3, #1
}
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	bd80      	pop	{r7, pc}
 8016bd4:	200275b8 	.word	0x200275b8

08016bd8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b082      	sub	sp, #8
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016be0:	4b04      	ldr	r3, [pc, #16]	@ (8016bf4 <sys_arch_unprotect+0x1c>)
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7f1 ff95 	bl	8008b14 <osMutexRelease>
}
 8016bea:	bf00      	nop
 8016bec:	3708      	adds	r7, #8
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	bd80      	pop	{r7, pc}
 8016bf2:	bf00      	nop
 8016bf4:	200275b8 	.word	0x200275b8

08016bf8 <uart_testing>:
#define TIMEOUT 	1000 	// ticks (30  millis).

#define UART_SENDER 		(&huart2)
#define UART_RECEIVER 		(&huart4)

result_pro_t uart_testing(test_command_t* command){
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8016bfe:	af00      	add	r7, sp, #0
 8016c00:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016c04:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8016c08:	6018      	str	r0, [r3, #0]
 8016c0a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016c0e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016c12:	6019      	str	r1, [r3, #0]


	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 8016c14:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016c22:	461a      	mov	r2, r3
 8016c24:	2100      	movs	r1, #0
 8016c26:	f000 fc9d 	bl	8017564 <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 8016c2a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016c2e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8016c32:	4618      	mov	r0, r3
 8016c34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016c38:	461a      	mov	r2, r3
 8016c3a:	2100      	movs	r1, #0
 8016c3c:	f000 fc92 	bl	8017564 <memset>

	result_pro_t response;
	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 8016c40:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016c44:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d118      	bne.n	8016c80 <uart_testing+0x88>
        printf("UART_TEST: Received NULL command pointer. Skipping.\n");
 8016c4e:	48bc      	ldr	r0, [pc, #752]	@ (8016f40 <uart_testing+0x348>)
 8016c50:	f000 fb98 	bl	8017384 <puts>
        response.test_result = TEST_ERR;
 8016c54:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016c58:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8016c5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016c60:	809a      	strh	r2, [r3, #4]
        return response;
 8016c62:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016c66:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8016c6a:	6819      	ldr	r1, [r3, #0]
 8016c6c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016c70:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8016c74:	460b      	mov	r3, r1
 8016c76:	6810      	ldr	r0, [r2, #0]
 8016c78:	6018      	str	r0, [r3, #0]
 8016c7a:	8892      	ldrh	r2, [r2, #4]
 8016c7c:	809a      	strh	r2, [r3, #4]
 8016c7e:	e1b2      	b.n	8016fe6 <uart_testing+0x3ee>
	}

	response.test_id = command->test_id;
 8016c80:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016c84:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	681a      	ldr	r2, [r3, #0]
 8016c8c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016c90:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8016c94:	601a      	str	r2, [r3, #0]
	// Copy pattern to TX buffer
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 8016c96:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016c9a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	1dd9      	adds	r1, r3, #7
 8016ca2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016ca6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	799b      	ldrb	r3, [r3, #6]
 8016cae:	461a      	mov	r2, r3
 8016cb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	f000 fd28 	bl	801770a <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 8016cba:	2300      	movs	r3, #0
 8016cbc:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8016cc0:	e16b      	b.n	8016f9a <uart_testing+0x3a2>
	    printf("UART_TEST: Iteration %u/%u --\n", i + 1, command->iterations);
 8016cc2:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8016cc6:	1c59      	adds	r1, r3, #1
 8016cc8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016ccc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	795b      	ldrb	r3, [r3, #5]
 8016cd4:	461a      	mov	r2, r3
 8016cd6:	489b      	ldr	r0, [pc, #620]	@ (8016f44 <uart_testing+0x34c>)
 8016cd8:	f000 faec 	bl	80172b4 <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 8016cdc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016ce0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	799b      	ldrb	r3, [r3, #6]
 8016ce8:	461a      	mov	r2, r3
 8016cea:	f107 0310 	add.w	r3, r7, #16
 8016cee:	2100      	movs	r1, #0
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	f000 fc37 	bl	8017564 <memset>

	    // --- 1. START RECEIVE DMA FIRST ---
	    HAL_StatusTypeDef rx_status = HAL_UART_Receive_DMA(UART_RECEIVER, rx_buffer, command->bit_pattern_length);
 8016cf6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016cfa:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	799b      	ldrb	r3, [r3, #6]
 8016d02:	461a      	mov	r2, r3
 8016d04:	f107 0310 	add.w	r3, r7, #16
 8016d08:	4619      	mov	r1, r3
 8016d0a:	488f      	ldr	r0, [pc, #572]	@ (8016f48 <uart_testing+0x350>)
 8016d0c:	f7ef f8a6 	bl	8005e5c <HAL_UART_Receive_DMA>
 8016d10:	4603      	mov	r3, r0
 8016d12:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
	    printf("RX DMA start status: %d\n", rx_status);
 8016d16:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8016d1a:	4619      	mov	r1, r3
 8016d1c:	488b      	ldr	r0, [pc, #556]	@ (8016f4c <uart_testing+0x354>)
 8016d1e:	f000 fac9 	bl	80172b4 <iprintf>
	    if (rx_status != HAL_OK) {
 8016d22:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d021      	beq.n	8016d6e <uart_testing+0x176>
	        printf("Failed to start receive DMA: %d\n", rx_status);
 8016d2a:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8016d2e:	4619      	mov	r1, r3
 8016d30:	4887      	ldr	r0, [pc, #540]	@ (8016f50 <uart_testing+0x358>)
 8016d32:	f000 fabf 	bl	80172b4 <iprintf>
	        response.test_result = TEST_FAIL;
 8016d36:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016d3a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8016d3e:	22ff      	movs	r2, #255	@ 0xff
 8016d40:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 8016d42:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016d46:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016d4a:	6818      	ldr	r0, [r3, #0]
 8016d4c:	f7f5 fc42 	bl	800c5d4 <vPortFree>
	        return response;
 8016d50:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016d54:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8016d58:	6819      	ldr	r1, [r3, #0]
 8016d5a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016d5e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8016d62:	460b      	mov	r3, r1
 8016d64:	6810      	ldr	r0, [r2, #0]
 8016d66:	6018      	str	r0, [r3, #0]
 8016d68:	8892      	ldrh	r2, [r2, #4]
 8016d6a:	809a      	strh	r2, [r3, #4]
 8016d6c:	e13b      	b.n	8016fe6 <uart_testing+0x3ee>
	    }

	    // --- 2. TRANSMIT a block of data via DMA ---
	    HAL_StatusTypeDef tx_status = HAL_UART_Transmit_DMA(UART_SENDER, tx_buffer, command->bit_pattern_length);
 8016d6e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016d72:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	799b      	ldrb	r3, [r3, #6]
 8016d7a:	461a      	mov	r2, r3
 8016d7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016d80:	4619      	mov	r1, r3
 8016d82:	4874      	ldr	r0, [pc, #464]	@ (8016f54 <uart_testing+0x35c>)
 8016d84:	f7ee ffee 	bl	8005d64 <HAL_UART_Transmit_DMA>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
	    printf("TX DMA start status: %d\n", tx_status);
 8016d8e:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 8016d92:	4619      	mov	r1, r3
 8016d94:	4870      	ldr	r0, [pc, #448]	@ (8016f58 <uart_testing+0x360>)
 8016d96:	f000 fa8d 	bl	80172b4 <iprintf>
	    if (tx_status != HAL_OK) {
 8016d9a:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d024      	beq.n	8016dec <uart_testing+0x1f4>
	        printf("Failed to send DMA on UART sender: %d\n", tx_status);
 8016da2:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 8016da6:	4619      	mov	r1, r3
 8016da8:	486c      	ldr	r0, [pc, #432]	@ (8016f5c <uart_testing+0x364>)
 8016daa:	f000 fa83 	bl	80172b4 <iprintf>
	        response.test_result = TEST_FAIL;
 8016dae:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016db2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8016db6:	22ff      	movs	r2, #255	@ 0xff
 8016db8:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 8016dba:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016dbe:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016dc2:	6818      	ldr	r0, [r3, #0]
 8016dc4:	f7f5 fc06 	bl	800c5d4 <vPortFree>
	        HAL_UART_DMAStop(UART_RECEIVER); // Stop the pending receive
 8016dc8:	485f      	ldr	r0, [pc, #380]	@ (8016f48 <uart_testing+0x350>)
 8016dca:	f7ef f88b 	bl	8005ee4 <HAL_UART_DMAStop>
	        return response;
 8016dce:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016dd2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8016dd6:	6819      	ldr	r1, [r3, #0]
 8016dd8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016ddc:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8016de0:	460b      	mov	r3, r1
 8016de2:	6810      	ldr	r0, [r2, #0]
 8016de4:	6018      	str	r0, [r3, #0]
 8016de6:	8892      	ldrh	r2, [r2, #4]
 8016de8:	809a      	strh	r2, [r3, #4]
 8016dea:	e0fc      	b.n	8016fe6 <uart_testing+0x3ee>
	    }

	    // --- 3. WAIT FOR BOTH TX AND RX DMA COMPLETION ---
	    if (xSemaphoreTake(xUartTxSemaphoreHandle, pdMS_TO_TICKS(TIMEOUT)) != pdPASS) {
 8016dec:	4b5c      	ldr	r3, [pc, #368]	@ (8016f60 <uart_testing+0x368>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016df4:	4618      	mov	r0, r3
 8016df6:	f7f3 f845 	bl	8009e84 <xQueueSemaphoreTake>
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	2b01      	cmp	r3, #1
 8016dfe:	d021      	beq.n	8016e44 <uart_testing+0x24c>
	         printf("TX DMA timeout\n");
 8016e00:	4858      	ldr	r0, [pc, #352]	@ (8016f64 <uart_testing+0x36c>)
 8016e02:	f000 fabf 	bl	8017384 <puts>
	         response.test_result = TEST_FAIL;
 8016e06:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016e0a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8016e0e:	22ff      	movs	r2, #255	@ 0xff
 8016e10:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 8016e12:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016e16:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016e1a:	6818      	ldr	r0, [r3, #0]
 8016e1c:	f7f5 fbda 	bl	800c5d4 <vPortFree>
	         HAL_UART_DMAStop(UART_RECEIVER); // Stop the pending receive
 8016e20:	4849      	ldr	r0, [pc, #292]	@ (8016f48 <uart_testing+0x350>)
 8016e22:	f7ef f85f 	bl	8005ee4 <HAL_UART_DMAStop>
	         return response;
 8016e26:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016e2a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8016e2e:	6819      	ldr	r1, [r3, #0]
 8016e30:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016e34:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8016e38:	460b      	mov	r3, r1
 8016e3a:	6810      	ldr	r0, [r2, #0]
 8016e3c:	6018      	str	r0, [r3, #0]
 8016e3e:	8892      	ldrh	r2, [r2, #4]
 8016e40:	809a      	strh	r2, [r3, #4]
 8016e42:	e0d0      	b.n	8016fe6 <uart_testing+0x3ee>
	    }

	    if (xSemaphoreTake(xUartRxSemaphoreHandle, pdMS_TO_TICKS(TIMEOUT)) != pdPASS) {
 8016e44:	4b48      	ldr	r3, [pc, #288]	@ (8016f68 <uart_testing+0x370>)
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	f7f3 f819 	bl	8009e84 <xQueueSemaphoreTake>
 8016e52:	4603      	mov	r3, r0
 8016e54:	2b01      	cmp	r3, #1
 8016e56:	d021      	beq.n	8016e9c <uart_testing+0x2a4>
	        printf("RX DMA timeout\n");
 8016e58:	4844      	ldr	r0, [pc, #272]	@ (8016f6c <uart_testing+0x374>)
 8016e5a:	f000 fa93 	bl	8017384 <puts>
	        response.test_result = TEST_FAIL;
 8016e5e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016e62:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8016e66:	22ff      	movs	r2, #255	@ 0xff
 8016e68:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 8016e6a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016e6e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016e72:	6818      	ldr	r0, [r3, #0]
 8016e74:	f7f5 fbae 	bl	800c5d4 <vPortFree>
	        HAL_UART_DMAStop(UART_RECEIVER); // CRITICAL: Stop the stuck receive
 8016e78:	4833      	ldr	r0, [pc, #204]	@ (8016f48 <uart_testing+0x350>)
 8016e7a:	f7ef f833 	bl	8005ee4 <HAL_UART_DMAStop>
	        return response;
 8016e7e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016e82:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8016e86:	6819      	ldr	r1, [r3, #0]
 8016e88:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016e8c:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8016e90:	460b      	mov	r3, r1
 8016e92:	6810      	ldr	r0, [r2, #0]
 8016e94:	6018      	str	r0, [r3, #0]
 8016e96:	8892      	ldrh	r2, [r2, #4]
 8016e98:	809a      	strh	r2, [r3, #4]
 8016e9a:	e0a4      	b.n	8016fe6 <uart_testing+0x3ee>
	    }

	    // --- 4. COMPARE SENT vs. RECEIVED data ---
	    // ... your comparison code ...
	    int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 8016e9c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016ea0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	799b      	ldrb	r3, [r3, #6]
 8016ea8:	461a      	mov	r2, r3
 8016eaa:	f107 0110 	add.w	r1, r7, #16
 8016eae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f000 fb46 	bl	8017544 <memcmp>
 8016eb8:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
	    if (comp != 0) {
 8016ebc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d05b      	beq.n	8016f7c <uart_testing+0x384>
	        printf("Data mismatch on iteration %u.\n", i + 1);
 8016ec4:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8016ec8:	3301      	adds	r3, #1
 8016eca:	4619      	mov	r1, r3
 8016ecc:	4828      	ldr	r0, [pc, #160]	@ (8016f70 <uart_testing+0x378>)
 8016ece:	f000 f9f1 	bl	80172b4 <iprintf>
	        printf("Sent: %.*s\n", command->bit_pattern_length, tx_buffer);
 8016ed2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016ed6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	799b      	ldrb	r3, [r3, #6]
 8016ede:	4619      	mov	r1, r3
 8016ee0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016ee4:	461a      	mov	r2, r3
 8016ee6:	4823      	ldr	r0, [pc, #140]	@ (8016f74 <uart_testing+0x37c>)
 8016ee8:	f000 f9e4 	bl	80172b4 <iprintf>
	        printf("Recv: %.*s\n", command->bit_pattern_length, rx_buffer);
 8016eec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016ef0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	799b      	ldrb	r3, [r3, #6]
 8016ef8:	4619      	mov	r1, r3
 8016efa:	f107 0310 	add.w	r3, r7, #16
 8016efe:	461a      	mov	r2, r3
 8016f00:	481d      	ldr	r0, [pc, #116]	@ (8016f78 <uart_testing+0x380>)
 8016f02:	f000 f9d7 	bl	80172b4 <iprintf>
	        response.test_result = TEST_FAIL;
 8016f06:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016f0a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8016f0e:	22ff      	movs	r2, #255	@ 0xff
 8016f10:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 8016f12:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016f16:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016f1a:	6818      	ldr	r0, [r3, #0]
 8016f1c:	f7f5 fb5a 	bl	800c5d4 <vPortFree>
	        return response;
 8016f20:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016f24:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8016f28:	6819      	ldr	r1, [r3, #0]
 8016f2a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016f2e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8016f32:	460b      	mov	r3, r1
 8016f34:	6810      	ldr	r0, [r2, #0]
 8016f36:	6018      	str	r0, [r3, #0]
 8016f38:	8892      	ldrh	r2, [r2, #4]
 8016f3a:	809a      	strh	r2, [r3, #4]
 8016f3c:	e053      	b.n	8016fe6 <uart_testing+0x3ee>
 8016f3e:	bf00      	nop
 8016f40:	0801b0dc 	.word	0x0801b0dc
 8016f44:	0801b110 	.word	0x0801b110
 8016f48:	2000023c 	.word	0x2000023c
 8016f4c:	0801b130 	.word	0x0801b130
 8016f50:	0801b14c 	.word	0x0801b14c
 8016f54:	200002c4 	.word	0x200002c4
 8016f58:	0801b170 	.word	0x0801b170
 8016f5c:	0801b18c 	.word	0x0801b18c
 8016f60:	20000a74 	.word	0x20000a74
 8016f64:	0801b1b4 	.word	0x0801b1b4
 8016f68:	20000a70 	.word	0x20000a70
 8016f6c:	0801b1c4 	.word	0x0801b1c4
 8016f70:	0801b1d4 	.word	0x0801b1d4
 8016f74:	0801b1f4 	.word	0x0801b1f4
 8016f78:	0801b200 	.word	0x0801b200
	    }
	    printf("Data Match on iteration %u.\n", i + 1);
 8016f7c:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8016f80:	3301      	adds	r3, #1
 8016f82:	4619      	mov	r1, r3
 8016f84:	481c      	ldr	r0, [pc, #112]	@ (8016ff8 <uart_testing+0x400>)
 8016f86:	f000 f995 	bl	80172b4 <iprintf>

        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 8016f8a:	200a      	movs	r0, #10
 8016f8c:	f7f1 fc9c 	bl	80088c8 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 8016f90:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8016f94:	3301      	adds	r3, #1
 8016f96:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8016f9a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016f9e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	795b      	ldrb	r3, [r3, #5]
 8016fa6:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 8016faa:	429a      	cmp	r2, r3
 8016fac:	f4ff ae89 	bcc.w	8016cc2 <uart_testing+0xca>
	}
    response.test_result = TEST_PASS;
 8016fb0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016fb4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8016fb8:	2201      	movs	r2, #1
 8016fba:	809a      	strh	r2, [r3, #4]
    vPortFree(command);
 8016fbc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016fc0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016fc4:	6818      	ldr	r0, [r3, #0]
 8016fc6:	f7f5 fb05 	bl	800c5d4 <vPortFree>
    return response;
 8016fca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016fce:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8016fd2:	6819      	ldr	r1, [r3, #0]
 8016fd4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016fd8:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8016fdc:	460b      	mov	r3, r1
 8016fde:	6810      	ldr	r0, [r2, #0]
 8016fe0:	6018      	str	r0, [r3, #0]
 8016fe2:	8892      	ldrh	r2, [r2, #4]
 8016fe4:	809a      	strh	r2, [r3, #4]
}
 8016fe6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016fea:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8016fee:	6818      	ldr	r0, [r3, #0]
 8016ff0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	bd80      	pop	{r7, pc}
 8016ff8:	0801b20c 	.word	0x0801b20c

08016ffc <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b084      	sub	sp, #16
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8017004:	2300      	movs	r3, #0
 8017006:	60fb      	str	r3, [r7, #12]
    printf("TX callback fired\n");
 8017008:	480f      	ldr	r0, [pc, #60]	@ (8017048 <HAL_UART_TxCpltCallback+0x4c>)
 801700a:	f000 f9bb 	bl	8017384 <puts>

    if (huart->Instance == UART_SENDER->Instance) // Check the instance of your sender UART
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	681a      	ldr	r2, [r3, #0]
 8017012:	4b0e      	ldr	r3, [pc, #56]	@ (801704c <HAL_UART_TxCpltCallback+0x50>)
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	429a      	cmp	r2, r3
 8017018:	d107      	bne.n	801702a <HAL_UART_TxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(xUartTxSemaphoreHandle, &xHigherPriorityTaskWoken);
 801701a:	4b0d      	ldr	r3, [pc, #52]	@ (8017050 <HAL_UART_TxCpltCallback+0x54>)
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	f107 020c 	add.w	r2, r7, #12
 8017022:	4611      	mov	r1, r2
 8017024:	4618      	mov	r0, r3
 8017026:	f7f2 fdac 	bl	8009b82 <xQueueGiveFromISR>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d007      	beq.n	8017040 <HAL_UART_TxCpltCallback+0x44>
 8017030:	4b08      	ldr	r3, [pc, #32]	@ (8017054 <HAL_UART_TxCpltCallback+0x58>)
 8017032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017036:	601a      	str	r2, [r3, #0]
 8017038:	f3bf 8f4f 	dsb	sy
 801703c:	f3bf 8f6f 	isb	sy

}
 8017040:	bf00      	nop
 8017042:	3710      	adds	r7, #16
 8017044:	46bd      	mov	sp, r7
 8017046:	bd80      	pop	{r7, pc}
 8017048:	0801b22c 	.word	0x0801b22c
 801704c:	200002c4 	.word	0x200002c4
 8017050:	20000a74 	.word	0x20000a74
 8017054:	e000ed04 	.word	0xe000ed04

08017058 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8017058:	b580      	push	{r7, lr}
 801705a:	b084      	sub	sp, #16
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8017060:	2300      	movs	r3, #0
 8017062:	60fb      	str	r3, [r7, #12]
    printf("RX callback fired\n");
 8017064:	480f      	ldr	r0, [pc, #60]	@ (80170a4 <HAL_UART_RxCpltCallback+0x4c>)
 8017066:	f000 f98d 	bl	8017384 <puts>

    if (huart->Instance == UART_RECEIVER->Instance) // Check the instance of your receiver UART
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	681a      	ldr	r2, [r3, #0]
 801706e:	4b0e      	ldr	r3, [pc, #56]	@ (80170a8 <HAL_UART_RxCpltCallback+0x50>)
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	429a      	cmp	r2, r3
 8017074:	d107      	bne.n	8017086 <HAL_UART_RxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(xUartRxSemaphoreHandle, &xHigherPriorityTaskWoken);
 8017076:	4b0d      	ldr	r3, [pc, #52]	@ (80170ac <HAL_UART_RxCpltCallback+0x54>)
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	f107 020c 	add.w	r2, r7, #12
 801707e:	4611      	mov	r1, r2
 8017080:	4618      	mov	r0, r3
 8017082:	f7f2 fd7e 	bl	8009b82 <xQueueGiveFromISR>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d007      	beq.n	801709c <HAL_UART_RxCpltCallback+0x44>
 801708c:	4b08      	ldr	r3, [pc, #32]	@ (80170b0 <HAL_UART_RxCpltCallback+0x58>)
 801708e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017092:	601a      	str	r2, [r3, #0]
 8017094:	f3bf 8f4f 	dsb	sy
 8017098:	f3bf 8f6f 	isb	sy
}
 801709c:	bf00      	nop
 801709e:	3710      	adds	r7, #16
 80170a0:	46bd      	mov	sp, r7
 80170a2:	bd80      	pop	{r7, pc}
 80170a4:	0801b240 	.word	0x0801b240
 80170a8:	2000023c 	.word	0x2000023c
 80170ac:	20000a70 	.word	0x20000a70
 80170b0:	e000ed04 	.word	0xe000ed04

080170b4 <rand>:
 80170b4:	4b16      	ldr	r3, [pc, #88]	@ (8017110 <rand+0x5c>)
 80170b6:	b510      	push	{r4, lr}
 80170b8:	681c      	ldr	r4, [r3, #0]
 80170ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80170bc:	b9b3      	cbnz	r3, 80170ec <rand+0x38>
 80170be:	2018      	movs	r0, #24
 80170c0:	f000 fb9a 	bl	80177f8 <malloc>
 80170c4:	4602      	mov	r2, r0
 80170c6:	6320      	str	r0, [r4, #48]	@ 0x30
 80170c8:	b920      	cbnz	r0, 80170d4 <rand+0x20>
 80170ca:	4b12      	ldr	r3, [pc, #72]	@ (8017114 <rand+0x60>)
 80170cc:	4812      	ldr	r0, [pc, #72]	@ (8017118 <rand+0x64>)
 80170ce:	2152      	movs	r1, #82	@ 0x52
 80170d0:	f000 fb2a 	bl	8017728 <__assert_func>
 80170d4:	4911      	ldr	r1, [pc, #68]	@ (801711c <rand+0x68>)
 80170d6:	4b12      	ldr	r3, [pc, #72]	@ (8017120 <rand+0x6c>)
 80170d8:	e9c0 1300 	strd	r1, r3, [r0]
 80170dc:	4b11      	ldr	r3, [pc, #68]	@ (8017124 <rand+0x70>)
 80170de:	6083      	str	r3, [r0, #8]
 80170e0:	230b      	movs	r3, #11
 80170e2:	8183      	strh	r3, [r0, #12]
 80170e4:	2100      	movs	r1, #0
 80170e6:	2001      	movs	r0, #1
 80170e8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80170ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80170ee:	480e      	ldr	r0, [pc, #56]	@ (8017128 <rand+0x74>)
 80170f0:	690b      	ldr	r3, [r1, #16]
 80170f2:	694c      	ldr	r4, [r1, #20]
 80170f4:	4a0d      	ldr	r2, [pc, #52]	@ (801712c <rand+0x78>)
 80170f6:	4358      	muls	r0, r3
 80170f8:	fb02 0004 	mla	r0, r2, r4, r0
 80170fc:	fba3 3202 	umull	r3, r2, r3, r2
 8017100:	3301      	adds	r3, #1
 8017102:	eb40 0002 	adc.w	r0, r0, r2
 8017106:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801710a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801710e:	bd10      	pop	{r4, pc}
 8017110:	2000003c 	.word	0x2000003c
 8017114:	0801b46a 	.word	0x0801b46a
 8017118:	0801b481 	.word	0x0801b481
 801711c:	abcd330e 	.word	0xabcd330e
 8017120:	e66d1234 	.word	0xe66d1234
 8017124:	0005deec 	.word	0x0005deec
 8017128:	5851f42d 	.word	0x5851f42d
 801712c:	4c957f2d 	.word	0x4c957f2d

08017130 <std>:
 8017130:	2300      	movs	r3, #0
 8017132:	b510      	push	{r4, lr}
 8017134:	4604      	mov	r4, r0
 8017136:	e9c0 3300 	strd	r3, r3, [r0]
 801713a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801713e:	6083      	str	r3, [r0, #8]
 8017140:	8181      	strh	r1, [r0, #12]
 8017142:	6643      	str	r3, [r0, #100]	@ 0x64
 8017144:	81c2      	strh	r2, [r0, #14]
 8017146:	6183      	str	r3, [r0, #24]
 8017148:	4619      	mov	r1, r3
 801714a:	2208      	movs	r2, #8
 801714c:	305c      	adds	r0, #92	@ 0x5c
 801714e:	f000 fa09 	bl	8017564 <memset>
 8017152:	4b0d      	ldr	r3, [pc, #52]	@ (8017188 <std+0x58>)
 8017154:	6263      	str	r3, [r4, #36]	@ 0x24
 8017156:	4b0d      	ldr	r3, [pc, #52]	@ (801718c <std+0x5c>)
 8017158:	62a3      	str	r3, [r4, #40]	@ 0x28
 801715a:	4b0d      	ldr	r3, [pc, #52]	@ (8017190 <std+0x60>)
 801715c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801715e:	4b0d      	ldr	r3, [pc, #52]	@ (8017194 <std+0x64>)
 8017160:	6323      	str	r3, [r4, #48]	@ 0x30
 8017162:	4b0d      	ldr	r3, [pc, #52]	@ (8017198 <std+0x68>)
 8017164:	6224      	str	r4, [r4, #32]
 8017166:	429c      	cmp	r4, r3
 8017168:	d006      	beq.n	8017178 <std+0x48>
 801716a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801716e:	4294      	cmp	r4, r2
 8017170:	d002      	beq.n	8017178 <std+0x48>
 8017172:	33d0      	adds	r3, #208	@ 0xd0
 8017174:	429c      	cmp	r4, r3
 8017176:	d105      	bne.n	8017184 <std+0x54>
 8017178:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801717c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017180:	f000 bac0 	b.w	8017704 <__retarget_lock_init_recursive>
 8017184:	bd10      	pop	{r4, pc}
 8017186:	bf00      	nop
 8017188:	08017395 	.word	0x08017395
 801718c:	080173b7 	.word	0x080173b7
 8017190:	080173ef 	.word	0x080173ef
 8017194:	08017413 	.word	0x08017413
 8017198:	200275bc 	.word	0x200275bc

0801719c <stdio_exit_handler>:
 801719c:	4a02      	ldr	r2, [pc, #8]	@ (80171a8 <stdio_exit_handler+0xc>)
 801719e:	4903      	ldr	r1, [pc, #12]	@ (80171ac <stdio_exit_handler+0x10>)
 80171a0:	4803      	ldr	r0, [pc, #12]	@ (80171b0 <stdio_exit_handler+0x14>)
 80171a2:	f000 b869 	b.w	8017278 <_fwalk_sglue>
 80171a6:	bf00      	nop
 80171a8:	20000030 	.word	0x20000030
 80171ac:	08018009 	.word	0x08018009
 80171b0:	20000040 	.word	0x20000040

080171b4 <cleanup_stdio>:
 80171b4:	6841      	ldr	r1, [r0, #4]
 80171b6:	4b0c      	ldr	r3, [pc, #48]	@ (80171e8 <cleanup_stdio+0x34>)
 80171b8:	4299      	cmp	r1, r3
 80171ba:	b510      	push	{r4, lr}
 80171bc:	4604      	mov	r4, r0
 80171be:	d001      	beq.n	80171c4 <cleanup_stdio+0x10>
 80171c0:	f000 ff22 	bl	8018008 <_fflush_r>
 80171c4:	68a1      	ldr	r1, [r4, #8]
 80171c6:	4b09      	ldr	r3, [pc, #36]	@ (80171ec <cleanup_stdio+0x38>)
 80171c8:	4299      	cmp	r1, r3
 80171ca:	d002      	beq.n	80171d2 <cleanup_stdio+0x1e>
 80171cc:	4620      	mov	r0, r4
 80171ce:	f000 ff1b 	bl	8018008 <_fflush_r>
 80171d2:	68e1      	ldr	r1, [r4, #12]
 80171d4:	4b06      	ldr	r3, [pc, #24]	@ (80171f0 <cleanup_stdio+0x3c>)
 80171d6:	4299      	cmp	r1, r3
 80171d8:	d004      	beq.n	80171e4 <cleanup_stdio+0x30>
 80171da:	4620      	mov	r0, r4
 80171dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171e0:	f000 bf12 	b.w	8018008 <_fflush_r>
 80171e4:	bd10      	pop	{r4, pc}
 80171e6:	bf00      	nop
 80171e8:	200275bc 	.word	0x200275bc
 80171ec:	20027624 	.word	0x20027624
 80171f0:	2002768c 	.word	0x2002768c

080171f4 <global_stdio_init.part.0>:
 80171f4:	b510      	push	{r4, lr}
 80171f6:	4b0b      	ldr	r3, [pc, #44]	@ (8017224 <global_stdio_init.part.0+0x30>)
 80171f8:	4c0b      	ldr	r4, [pc, #44]	@ (8017228 <global_stdio_init.part.0+0x34>)
 80171fa:	4a0c      	ldr	r2, [pc, #48]	@ (801722c <global_stdio_init.part.0+0x38>)
 80171fc:	601a      	str	r2, [r3, #0]
 80171fe:	4620      	mov	r0, r4
 8017200:	2200      	movs	r2, #0
 8017202:	2104      	movs	r1, #4
 8017204:	f7ff ff94 	bl	8017130 <std>
 8017208:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801720c:	2201      	movs	r2, #1
 801720e:	2109      	movs	r1, #9
 8017210:	f7ff ff8e 	bl	8017130 <std>
 8017214:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017218:	2202      	movs	r2, #2
 801721a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801721e:	2112      	movs	r1, #18
 8017220:	f7ff bf86 	b.w	8017130 <std>
 8017224:	200276f4 	.word	0x200276f4
 8017228:	200275bc 	.word	0x200275bc
 801722c:	0801719d 	.word	0x0801719d

08017230 <__sfp_lock_acquire>:
 8017230:	4801      	ldr	r0, [pc, #4]	@ (8017238 <__sfp_lock_acquire+0x8>)
 8017232:	f000 ba68 	b.w	8017706 <__retarget_lock_acquire_recursive>
 8017236:	bf00      	nop
 8017238:	200276fd 	.word	0x200276fd

0801723c <__sfp_lock_release>:
 801723c:	4801      	ldr	r0, [pc, #4]	@ (8017244 <__sfp_lock_release+0x8>)
 801723e:	f000 ba63 	b.w	8017708 <__retarget_lock_release_recursive>
 8017242:	bf00      	nop
 8017244:	200276fd 	.word	0x200276fd

08017248 <__sinit>:
 8017248:	b510      	push	{r4, lr}
 801724a:	4604      	mov	r4, r0
 801724c:	f7ff fff0 	bl	8017230 <__sfp_lock_acquire>
 8017250:	6a23      	ldr	r3, [r4, #32]
 8017252:	b11b      	cbz	r3, 801725c <__sinit+0x14>
 8017254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017258:	f7ff bff0 	b.w	801723c <__sfp_lock_release>
 801725c:	4b04      	ldr	r3, [pc, #16]	@ (8017270 <__sinit+0x28>)
 801725e:	6223      	str	r3, [r4, #32]
 8017260:	4b04      	ldr	r3, [pc, #16]	@ (8017274 <__sinit+0x2c>)
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d1f5      	bne.n	8017254 <__sinit+0xc>
 8017268:	f7ff ffc4 	bl	80171f4 <global_stdio_init.part.0>
 801726c:	e7f2      	b.n	8017254 <__sinit+0xc>
 801726e:	bf00      	nop
 8017270:	080171b5 	.word	0x080171b5
 8017274:	200276f4 	.word	0x200276f4

08017278 <_fwalk_sglue>:
 8017278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801727c:	4607      	mov	r7, r0
 801727e:	4688      	mov	r8, r1
 8017280:	4614      	mov	r4, r2
 8017282:	2600      	movs	r6, #0
 8017284:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017288:	f1b9 0901 	subs.w	r9, r9, #1
 801728c:	d505      	bpl.n	801729a <_fwalk_sglue+0x22>
 801728e:	6824      	ldr	r4, [r4, #0]
 8017290:	2c00      	cmp	r4, #0
 8017292:	d1f7      	bne.n	8017284 <_fwalk_sglue+0xc>
 8017294:	4630      	mov	r0, r6
 8017296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801729a:	89ab      	ldrh	r3, [r5, #12]
 801729c:	2b01      	cmp	r3, #1
 801729e:	d907      	bls.n	80172b0 <_fwalk_sglue+0x38>
 80172a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80172a4:	3301      	adds	r3, #1
 80172a6:	d003      	beq.n	80172b0 <_fwalk_sglue+0x38>
 80172a8:	4629      	mov	r1, r5
 80172aa:	4638      	mov	r0, r7
 80172ac:	47c0      	blx	r8
 80172ae:	4306      	orrs	r6, r0
 80172b0:	3568      	adds	r5, #104	@ 0x68
 80172b2:	e7e9      	b.n	8017288 <_fwalk_sglue+0x10>

080172b4 <iprintf>:
 80172b4:	b40f      	push	{r0, r1, r2, r3}
 80172b6:	b507      	push	{r0, r1, r2, lr}
 80172b8:	4906      	ldr	r1, [pc, #24]	@ (80172d4 <iprintf+0x20>)
 80172ba:	ab04      	add	r3, sp, #16
 80172bc:	6808      	ldr	r0, [r1, #0]
 80172be:	f853 2b04 	ldr.w	r2, [r3], #4
 80172c2:	6881      	ldr	r1, [r0, #8]
 80172c4:	9301      	str	r3, [sp, #4]
 80172c6:	f000 fb77 	bl	80179b8 <_vfiprintf_r>
 80172ca:	b003      	add	sp, #12
 80172cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80172d0:	b004      	add	sp, #16
 80172d2:	4770      	bx	lr
 80172d4:	2000003c 	.word	0x2000003c

080172d8 <_puts_r>:
 80172d8:	6a03      	ldr	r3, [r0, #32]
 80172da:	b570      	push	{r4, r5, r6, lr}
 80172dc:	6884      	ldr	r4, [r0, #8]
 80172de:	4605      	mov	r5, r0
 80172e0:	460e      	mov	r6, r1
 80172e2:	b90b      	cbnz	r3, 80172e8 <_puts_r+0x10>
 80172e4:	f7ff ffb0 	bl	8017248 <__sinit>
 80172e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80172ea:	07db      	lsls	r3, r3, #31
 80172ec:	d405      	bmi.n	80172fa <_puts_r+0x22>
 80172ee:	89a3      	ldrh	r3, [r4, #12]
 80172f0:	0598      	lsls	r0, r3, #22
 80172f2:	d402      	bmi.n	80172fa <_puts_r+0x22>
 80172f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80172f6:	f000 fa06 	bl	8017706 <__retarget_lock_acquire_recursive>
 80172fa:	89a3      	ldrh	r3, [r4, #12]
 80172fc:	0719      	lsls	r1, r3, #28
 80172fe:	d502      	bpl.n	8017306 <_puts_r+0x2e>
 8017300:	6923      	ldr	r3, [r4, #16]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d135      	bne.n	8017372 <_puts_r+0x9a>
 8017306:	4621      	mov	r1, r4
 8017308:	4628      	mov	r0, r5
 801730a:	f000 f8c5 	bl	8017498 <__swsetup_r>
 801730e:	b380      	cbz	r0, 8017372 <_puts_r+0x9a>
 8017310:	f04f 35ff 	mov.w	r5, #4294967295
 8017314:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017316:	07da      	lsls	r2, r3, #31
 8017318:	d405      	bmi.n	8017326 <_puts_r+0x4e>
 801731a:	89a3      	ldrh	r3, [r4, #12]
 801731c:	059b      	lsls	r3, r3, #22
 801731e:	d402      	bmi.n	8017326 <_puts_r+0x4e>
 8017320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017322:	f000 f9f1 	bl	8017708 <__retarget_lock_release_recursive>
 8017326:	4628      	mov	r0, r5
 8017328:	bd70      	pop	{r4, r5, r6, pc}
 801732a:	2b00      	cmp	r3, #0
 801732c:	da04      	bge.n	8017338 <_puts_r+0x60>
 801732e:	69a2      	ldr	r2, [r4, #24]
 8017330:	429a      	cmp	r2, r3
 8017332:	dc17      	bgt.n	8017364 <_puts_r+0x8c>
 8017334:	290a      	cmp	r1, #10
 8017336:	d015      	beq.n	8017364 <_puts_r+0x8c>
 8017338:	6823      	ldr	r3, [r4, #0]
 801733a:	1c5a      	adds	r2, r3, #1
 801733c:	6022      	str	r2, [r4, #0]
 801733e:	7019      	strb	r1, [r3, #0]
 8017340:	68a3      	ldr	r3, [r4, #8]
 8017342:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017346:	3b01      	subs	r3, #1
 8017348:	60a3      	str	r3, [r4, #8]
 801734a:	2900      	cmp	r1, #0
 801734c:	d1ed      	bne.n	801732a <_puts_r+0x52>
 801734e:	2b00      	cmp	r3, #0
 8017350:	da11      	bge.n	8017376 <_puts_r+0x9e>
 8017352:	4622      	mov	r2, r4
 8017354:	210a      	movs	r1, #10
 8017356:	4628      	mov	r0, r5
 8017358:	f000 f85f 	bl	801741a <__swbuf_r>
 801735c:	3001      	adds	r0, #1
 801735e:	d0d7      	beq.n	8017310 <_puts_r+0x38>
 8017360:	250a      	movs	r5, #10
 8017362:	e7d7      	b.n	8017314 <_puts_r+0x3c>
 8017364:	4622      	mov	r2, r4
 8017366:	4628      	mov	r0, r5
 8017368:	f000 f857 	bl	801741a <__swbuf_r>
 801736c:	3001      	adds	r0, #1
 801736e:	d1e7      	bne.n	8017340 <_puts_r+0x68>
 8017370:	e7ce      	b.n	8017310 <_puts_r+0x38>
 8017372:	3e01      	subs	r6, #1
 8017374:	e7e4      	b.n	8017340 <_puts_r+0x68>
 8017376:	6823      	ldr	r3, [r4, #0]
 8017378:	1c5a      	adds	r2, r3, #1
 801737a:	6022      	str	r2, [r4, #0]
 801737c:	220a      	movs	r2, #10
 801737e:	701a      	strb	r2, [r3, #0]
 8017380:	e7ee      	b.n	8017360 <_puts_r+0x88>
	...

08017384 <puts>:
 8017384:	4b02      	ldr	r3, [pc, #8]	@ (8017390 <puts+0xc>)
 8017386:	4601      	mov	r1, r0
 8017388:	6818      	ldr	r0, [r3, #0]
 801738a:	f7ff bfa5 	b.w	80172d8 <_puts_r>
 801738e:	bf00      	nop
 8017390:	2000003c 	.word	0x2000003c

08017394 <__sread>:
 8017394:	b510      	push	{r4, lr}
 8017396:	460c      	mov	r4, r1
 8017398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801739c:	f000 f96a 	bl	8017674 <_read_r>
 80173a0:	2800      	cmp	r0, #0
 80173a2:	bfab      	itete	ge
 80173a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80173a6:	89a3      	ldrhlt	r3, [r4, #12]
 80173a8:	181b      	addge	r3, r3, r0
 80173aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80173ae:	bfac      	ite	ge
 80173b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80173b2:	81a3      	strhlt	r3, [r4, #12]
 80173b4:	bd10      	pop	{r4, pc}

080173b6 <__swrite>:
 80173b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173ba:	461f      	mov	r7, r3
 80173bc:	898b      	ldrh	r3, [r1, #12]
 80173be:	05db      	lsls	r3, r3, #23
 80173c0:	4605      	mov	r5, r0
 80173c2:	460c      	mov	r4, r1
 80173c4:	4616      	mov	r6, r2
 80173c6:	d505      	bpl.n	80173d4 <__swrite+0x1e>
 80173c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173cc:	2302      	movs	r3, #2
 80173ce:	2200      	movs	r2, #0
 80173d0:	f000 f93e 	bl	8017650 <_lseek_r>
 80173d4:	89a3      	ldrh	r3, [r4, #12]
 80173d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80173da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80173de:	81a3      	strh	r3, [r4, #12]
 80173e0:	4632      	mov	r2, r6
 80173e2:	463b      	mov	r3, r7
 80173e4:	4628      	mov	r0, r5
 80173e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173ea:	f000 b955 	b.w	8017698 <_write_r>

080173ee <__sseek>:
 80173ee:	b510      	push	{r4, lr}
 80173f0:	460c      	mov	r4, r1
 80173f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173f6:	f000 f92b 	bl	8017650 <_lseek_r>
 80173fa:	1c43      	adds	r3, r0, #1
 80173fc:	89a3      	ldrh	r3, [r4, #12]
 80173fe:	bf15      	itete	ne
 8017400:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017402:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017406:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801740a:	81a3      	strheq	r3, [r4, #12]
 801740c:	bf18      	it	ne
 801740e:	81a3      	strhne	r3, [r4, #12]
 8017410:	bd10      	pop	{r4, pc}

08017412 <__sclose>:
 8017412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017416:	f000 b8ad 	b.w	8017574 <_close_r>

0801741a <__swbuf_r>:
 801741a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801741c:	460e      	mov	r6, r1
 801741e:	4614      	mov	r4, r2
 8017420:	4605      	mov	r5, r0
 8017422:	b118      	cbz	r0, 801742c <__swbuf_r+0x12>
 8017424:	6a03      	ldr	r3, [r0, #32]
 8017426:	b90b      	cbnz	r3, 801742c <__swbuf_r+0x12>
 8017428:	f7ff ff0e 	bl	8017248 <__sinit>
 801742c:	69a3      	ldr	r3, [r4, #24]
 801742e:	60a3      	str	r3, [r4, #8]
 8017430:	89a3      	ldrh	r3, [r4, #12]
 8017432:	071a      	lsls	r2, r3, #28
 8017434:	d501      	bpl.n	801743a <__swbuf_r+0x20>
 8017436:	6923      	ldr	r3, [r4, #16]
 8017438:	b943      	cbnz	r3, 801744c <__swbuf_r+0x32>
 801743a:	4621      	mov	r1, r4
 801743c:	4628      	mov	r0, r5
 801743e:	f000 f82b 	bl	8017498 <__swsetup_r>
 8017442:	b118      	cbz	r0, 801744c <__swbuf_r+0x32>
 8017444:	f04f 37ff 	mov.w	r7, #4294967295
 8017448:	4638      	mov	r0, r7
 801744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801744c:	6823      	ldr	r3, [r4, #0]
 801744e:	6922      	ldr	r2, [r4, #16]
 8017450:	1a98      	subs	r0, r3, r2
 8017452:	6963      	ldr	r3, [r4, #20]
 8017454:	b2f6      	uxtb	r6, r6
 8017456:	4283      	cmp	r3, r0
 8017458:	4637      	mov	r7, r6
 801745a:	dc05      	bgt.n	8017468 <__swbuf_r+0x4e>
 801745c:	4621      	mov	r1, r4
 801745e:	4628      	mov	r0, r5
 8017460:	f000 fdd2 	bl	8018008 <_fflush_r>
 8017464:	2800      	cmp	r0, #0
 8017466:	d1ed      	bne.n	8017444 <__swbuf_r+0x2a>
 8017468:	68a3      	ldr	r3, [r4, #8]
 801746a:	3b01      	subs	r3, #1
 801746c:	60a3      	str	r3, [r4, #8]
 801746e:	6823      	ldr	r3, [r4, #0]
 8017470:	1c5a      	adds	r2, r3, #1
 8017472:	6022      	str	r2, [r4, #0]
 8017474:	701e      	strb	r6, [r3, #0]
 8017476:	6962      	ldr	r2, [r4, #20]
 8017478:	1c43      	adds	r3, r0, #1
 801747a:	429a      	cmp	r2, r3
 801747c:	d004      	beq.n	8017488 <__swbuf_r+0x6e>
 801747e:	89a3      	ldrh	r3, [r4, #12]
 8017480:	07db      	lsls	r3, r3, #31
 8017482:	d5e1      	bpl.n	8017448 <__swbuf_r+0x2e>
 8017484:	2e0a      	cmp	r6, #10
 8017486:	d1df      	bne.n	8017448 <__swbuf_r+0x2e>
 8017488:	4621      	mov	r1, r4
 801748a:	4628      	mov	r0, r5
 801748c:	f000 fdbc 	bl	8018008 <_fflush_r>
 8017490:	2800      	cmp	r0, #0
 8017492:	d0d9      	beq.n	8017448 <__swbuf_r+0x2e>
 8017494:	e7d6      	b.n	8017444 <__swbuf_r+0x2a>
	...

08017498 <__swsetup_r>:
 8017498:	b538      	push	{r3, r4, r5, lr}
 801749a:	4b29      	ldr	r3, [pc, #164]	@ (8017540 <__swsetup_r+0xa8>)
 801749c:	4605      	mov	r5, r0
 801749e:	6818      	ldr	r0, [r3, #0]
 80174a0:	460c      	mov	r4, r1
 80174a2:	b118      	cbz	r0, 80174ac <__swsetup_r+0x14>
 80174a4:	6a03      	ldr	r3, [r0, #32]
 80174a6:	b90b      	cbnz	r3, 80174ac <__swsetup_r+0x14>
 80174a8:	f7ff fece 	bl	8017248 <__sinit>
 80174ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174b0:	0719      	lsls	r1, r3, #28
 80174b2:	d422      	bmi.n	80174fa <__swsetup_r+0x62>
 80174b4:	06da      	lsls	r2, r3, #27
 80174b6:	d407      	bmi.n	80174c8 <__swsetup_r+0x30>
 80174b8:	2209      	movs	r2, #9
 80174ba:	602a      	str	r2, [r5, #0]
 80174bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80174c0:	81a3      	strh	r3, [r4, #12]
 80174c2:	f04f 30ff 	mov.w	r0, #4294967295
 80174c6:	e033      	b.n	8017530 <__swsetup_r+0x98>
 80174c8:	0758      	lsls	r0, r3, #29
 80174ca:	d512      	bpl.n	80174f2 <__swsetup_r+0x5a>
 80174cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80174ce:	b141      	cbz	r1, 80174e2 <__swsetup_r+0x4a>
 80174d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80174d4:	4299      	cmp	r1, r3
 80174d6:	d002      	beq.n	80174de <__swsetup_r+0x46>
 80174d8:	4628      	mov	r0, r5
 80174da:	f000 f943 	bl	8017764 <_free_r>
 80174de:	2300      	movs	r3, #0
 80174e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80174e2:	89a3      	ldrh	r3, [r4, #12]
 80174e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80174e8:	81a3      	strh	r3, [r4, #12]
 80174ea:	2300      	movs	r3, #0
 80174ec:	6063      	str	r3, [r4, #4]
 80174ee:	6923      	ldr	r3, [r4, #16]
 80174f0:	6023      	str	r3, [r4, #0]
 80174f2:	89a3      	ldrh	r3, [r4, #12]
 80174f4:	f043 0308 	orr.w	r3, r3, #8
 80174f8:	81a3      	strh	r3, [r4, #12]
 80174fa:	6923      	ldr	r3, [r4, #16]
 80174fc:	b94b      	cbnz	r3, 8017512 <__swsetup_r+0x7a>
 80174fe:	89a3      	ldrh	r3, [r4, #12]
 8017500:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017508:	d003      	beq.n	8017512 <__swsetup_r+0x7a>
 801750a:	4621      	mov	r1, r4
 801750c:	4628      	mov	r0, r5
 801750e:	f000 fddb 	bl	80180c8 <__smakebuf_r>
 8017512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017516:	f013 0201 	ands.w	r2, r3, #1
 801751a:	d00a      	beq.n	8017532 <__swsetup_r+0x9a>
 801751c:	2200      	movs	r2, #0
 801751e:	60a2      	str	r2, [r4, #8]
 8017520:	6962      	ldr	r2, [r4, #20]
 8017522:	4252      	negs	r2, r2
 8017524:	61a2      	str	r2, [r4, #24]
 8017526:	6922      	ldr	r2, [r4, #16]
 8017528:	b942      	cbnz	r2, 801753c <__swsetup_r+0xa4>
 801752a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801752e:	d1c5      	bne.n	80174bc <__swsetup_r+0x24>
 8017530:	bd38      	pop	{r3, r4, r5, pc}
 8017532:	0799      	lsls	r1, r3, #30
 8017534:	bf58      	it	pl
 8017536:	6962      	ldrpl	r2, [r4, #20]
 8017538:	60a2      	str	r2, [r4, #8]
 801753a:	e7f4      	b.n	8017526 <__swsetup_r+0x8e>
 801753c:	2000      	movs	r0, #0
 801753e:	e7f7      	b.n	8017530 <__swsetup_r+0x98>
 8017540:	2000003c 	.word	0x2000003c

08017544 <memcmp>:
 8017544:	b510      	push	{r4, lr}
 8017546:	3901      	subs	r1, #1
 8017548:	4402      	add	r2, r0
 801754a:	4290      	cmp	r0, r2
 801754c:	d101      	bne.n	8017552 <memcmp+0xe>
 801754e:	2000      	movs	r0, #0
 8017550:	e005      	b.n	801755e <memcmp+0x1a>
 8017552:	7803      	ldrb	r3, [r0, #0]
 8017554:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017558:	42a3      	cmp	r3, r4
 801755a:	d001      	beq.n	8017560 <memcmp+0x1c>
 801755c:	1b18      	subs	r0, r3, r4
 801755e:	bd10      	pop	{r4, pc}
 8017560:	3001      	adds	r0, #1
 8017562:	e7f2      	b.n	801754a <memcmp+0x6>

08017564 <memset>:
 8017564:	4402      	add	r2, r0
 8017566:	4603      	mov	r3, r0
 8017568:	4293      	cmp	r3, r2
 801756a:	d100      	bne.n	801756e <memset+0xa>
 801756c:	4770      	bx	lr
 801756e:	f803 1b01 	strb.w	r1, [r3], #1
 8017572:	e7f9      	b.n	8017568 <memset+0x4>

08017574 <_close_r>:
 8017574:	b538      	push	{r3, r4, r5, lr}
 8017576:	4d06      	ldr	r5, [pc, #24]	@ (8017590 <_close_r+0x1c>)
 8017578:	2300      	movs	r3, #0
 801757a:	4604      	mov	r4, r0
 801757c:	4608      	mov	r0, r1
 801757e:	602b      	str	r3, [r5, #0]
 8017580:	f7ea f994 	bl	80018ac <_close>
 8017584:	1c43      	adds	r3, r0, #1
 8017586:	d102      	bne.n	801758e <_close_r+0x1a>
 8017588:	682b      	ldr	r3, [r5, #0]
 801758a:	b103      	cbz	r3, 801758e <_close_r+0x1a>
 801758c:	6023      	str	r3, [r4, #0]
 801758e:	bd38      	pop	{r3, r4, r5, pc}
 8017590:	200276f8 	.word	0x200276f8

08017594 <_reclaim_reent>:
 8017594:	4b2d      	ldr	r3, [pc, #180]	@ (801764c <_reclaim_reent+0xb8>)
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	4283      	cmp	r3, r0
 801759a:	b570      	push	{r4, r5, r6, lr}
 801759c:	4604      	mov	r4, r0
 801759e:	d053      	beq.n	8017648 <_reclaim_reent+0xb4>
 80175a0:	69c3      	ldr	r3, [r0, #28]
 80175a2:	b31b      	cbz	r3, 80175ec <_reclaim_reent+0x58>
 80175a4:	68db      	ldr	r3, [r3, #12]
 80175a6:	b163      	cbz	r3, 80175c2 <_reclaim_reent+0x2e>
 80175a8:	2500      	movs	r5, #0
 80175aa:	69e3      	ldr	r3, [r4, #28]
 80175ac:	68db      	ldr	r3, [r3, #12]
 80175ae:	5959      	ldr	r1, [r3, r5]
 80175b0:	b9b1      	cbnz	r1, 80175e0 <_reclaim_reent+0x4c>
 80175b2:	3504      	adds	r5, #4
 80175b4:	2d80      	cmp	r5, #128	@ 0x80
 80175b6:	d1f8      	bne.n	80175aa <_reclaim_reent+0x16>
 80175b8:	69e3      	ldr	r3, [r4, #28]
 80175ba:	4620      	mov	r0, r4
 80175bc:	68d9      	ldr	r1, [r3, #12]
 80175be:	f000 f8d1 	bl	8017764 <_free_r>
 80175c2:	69e3      	ldr	r3, [r4, #28]
 80175c4:	6819      	ldr	r1, [r3, #0]
 80175c6:	b111      	cbz	r1, 80175ce <_reclaim_reent+0x3a>
 80175c8:	4620      	mov	r0, r4
 80175ca:	f000 f8cb 	bl	8017764 <_free_r>
 80175ce:	69e3      	ldr	r3, [r4, #28]
 80175d0:	689d      	ldr	r5, [r3, #8]
 80175d2:	b15d      	cbz	r5, 80175ec <_reclaim_reent+0x58>
 80175d4:	4629      	mov	r1, r5
 80175d6:	4620      	mov	r0, r4
 80175d8:	682d      	ldr	r5, [r5, #0]
 80175da:	f000 f8c3 	bl	8017764 <_free_r>
 80175de:	e7f8      	b.n	80175d2 <_reclaim_reent+0x3e>
 80175e0:	680e      	ldr	r6, [r1, #0]
 80175e2:	4620      	mov	r0, r4
 80175e4:	f000 f8be 	bl	8017764 <_free_r>
 80175e8:	4631      	mov	r1, r6
 80175ea:	e7e1      	b.n	80175b0 <_reclaim_reent+0x1c>
 80175ec:	6961      	ldr	r1, [r4, #20]
 80175ee:	b111      	cbz	r1, 80175f6 <_reclaim_reent+0x62>
 80175f0:	4620      	mov	r0, r4
 80175f2:	f000 f8b7 	bl	8017764 <_free_r>
 80175f6:	69e1      	ldr	r1, [r4, #28]
 80175f8:	b111      	cbz	r1, 8017600 <_reclaim_reent+0x6c>
 80175fa:	4620      	mov	r0, r4
 80175fc:	f000 f8b2 	bl	8017764 <_free_r>
 8017600:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017602:	b111      	cbz	r1, 801760a <_reclaim_reent+0x76>
 8017604:	4620      	mov	r0, r4
 8017606:	f000 f8ad 	bl	8017764 <_free_r>
 801760a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801760c:	b111      	cbz	r1, 8017614 <_reclaim_reent+0x80>
 801760e:	4620      	mov	r0, r4
 8017610:	f000 f8a8 	bl	8017764 <_free_r>
 8017614:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017616:	b111      	cbz	r1, 801761e <_reclaim_reent+0x8a>
 8017618:	4620      	mov	r0, r4
 801761a:	f000 f8a3 	bl	8017764 <_free_r>
 801761e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017620:	b111      	cbz	r1, 8017628 <_reclaim_reent+0x94>
 8017622:	4620      	mov	r0, r4
 8017624:	f000 f89e 	bl	8017764 <_free_r>
 8017628:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801762a:	b111      	cbz	r1, 8017632 <_reclaim_reent+0x9e>
 801762c:	4620      	mov	r0, r4
 801762e:	f000 f899 	bl	8017764 <_free_r>
 8017632:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017634:	b111      	cbz	r1, 801763c <_reclaim_reent+0xa8>
 8017636:	4620      	mov	r0, r4
 8017638:	f000 f894 	bl	8017764 <_free_r>
 801763c:	6a23      	ldr	r3, [r4, #32]
 801763e:	b11b      	cbz	r3, 8017648 <_reclaim_reent+0xb4>
 8017640:	4620      	mov	r0, r4
 8017642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017646:	4718      	bx	r3
 8017648:	bd70      	pop	{r4, r5, r6, pc}
 801764a:	bf00      	nop
 801764c:	2000003c 	.word	0x2000003c

08017650 <_lseek_r>:
 8017650:	b538      	push	{r3, r4, r5, lr}
 8017652:	4d07      	ldr	r5, [pc, #28]	@ (8017670 <_lseek_r+0x20>)
 8017654:	4604      	mov	r4, r0
 8017656:	4608      	mov	r0, r1
 8017658:	4611      	mov	r1, r2
 801765a:	2200      	movs	r2, #0
 801765c:	602a      	str	r2, [r5, #0]
 801765e:	461a      	mov	r2, r3
 8017660:	f7ea f94b 	bl	80018fa <_lseek>
 8017664:	1c43      	adds	r3, r0, #1
 8017666:	d102      	bne.n	801766e <_lseek_r+0x1e>
 8017668:	682b      	ldr	r3, [r5, #0]
 801766a:	b103      	cbz	r3, 801766e <_lseek_r+0x1e>
 801766c:	6023      	str	r3, [r4, #0]
 801766e:	bd38      	pop	{r3, r4, r5, pc}
 8017670:	200276f8 	.word	0x200276f8

08017674 <_read_r>:
 8017674:	b538      	push	{r3, r4, r5, lr}
 8017676:	4d07      	ldr	r5, [pc, #28]	@ (8017694 <_read_r+0x20>)
 8017678:	4604      	mov	r4, r0
 801767a:	4608      	mov	r0, r1
 801767c:	4611      	mov	r1, r2
 801767e:	2200      	movs	r2, #0
 8017680:	602a      	str	r2, [r5, #0]
 8017682:	461a      	mov	r2, r3
 8017684:	f7ea f8d9 	bl	800183a <_read>
 8017688:	1c43      	adds	r3, r0, #1
 801768a:	d102      	bne.n	8017692 <_read_r+0x1e>
 801768c:	682b      	ldr	r3, [r5, #0]
 801768e:	b103      	cbz	r3, 8017692 <_read_r+0x1e>
 8017690:	6023      	str	r3, [r4, #0]
 8017692:	bd38      	pop	{r3, r4, r5, pc}
 8017694:	200276f8 	.word	0x200276f8

08017698 <_write_r>:
 8017698:	b538      	push	{r3, r4, r5, lr}
 801769a:	4d07      	ldr	r5, [pc, #28]	@ (80176b8 <_write_r+0x20>)
 801769c:	4604      	mov	r4, r0
 801769e:	4608      	mov	r0, r1
 80176a0:	4611      	mov	r1, r2
 80176a2:	2200      	movs	r2, #0
 80176a4:	602a      	str	r2, [r5, #0]
 80176a6:	461a      	mov	r2, r3
 80176a8:	f7ea f8e4 	bl	8001874 <_write>
 80176ac:	1c43      	adds	r3, r0, #1
 80176ae:	d102      	bne.n	80176b6 <_write_r+0x1e>
 80176b0:	682b      	ldr	r3, [r5, #0]
 80176b2:	b103      	cbz	r3, 80176b6 <_write_r+0x1e>
 80176b4:	6023      	str	r3, [r4, #0]
 80176b6:	bd38      	pop	{r3, r4, r5, pc}
 80176b8:	200276f8 	.word	0x200276f8

080176bc <__libc_init_array>:
 80176bc:	b570      	push	{r4, r5, r6, lr}
 80176be:	4d0d      	ldr	r5, [pc, #52]	@ (80176f4 <__libc_init_array+0x38>)
 80176c0:	4c0d      	ldr	r4, [pc, #52]	@ (80176f8 <__libc_init_array+0x3c>)
 80176c2:	1b64      	subs	r4, r4, r5
 80176c4:	10a4      	asrs	r4, r4, #2
 80176c6:	2600      	movs	r6, #0
 80176c8:	42a6      	cmp	r6, r4
 80176ca:	d109      	bne.n	80176e0 <__libc_init_array+0x24>
 80176cc:	4d0b      	ldr	r5, [pc, #44]	@ (80176fc <__libc_init_array+0x40>)
 80176ce:	4c0c      	ldr	r4, [pc, #48]	@ (8017700 <__libc_init_array+0x44>)
 80176d0:	f000 fdb4 	bl	801823c <_init>
 80176d4:	1b64      	subs	r4, r4, r5
 80176d6:	10a4      	asrs	r4, r4, #2
 80176d8:	2600      	movs	r6, #0
 80176da:	42a6      	cmp	r6, r4
 80176dc:	d105      	bne.n	80176ea <__libc_init_array+0x2e>
 80176de:	bd70      	pop	{r4, r5, r6, pc}
 80176e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80176e4:	4798      	blx	r3
 80176e6:	3601      	adds	r6, #1
 80176e8:	e7ee      	b.n	80176c8 <__libc_init_array+0xc>
 80176ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80176ee:	4798      	blx	r3
 80176f0:	3601      	adds	r6, #1
 80176f2:	e7f2      	b.n	80176da <__libc_init_array+0x1e>
 80176f4:	0801b550 	.word	0x0801b550
 80176f8:	0801b550 	.word	0x0801b550
 80176fc:	0801b550 	.word	0x0801b550
 8017700:	0801b554 	.word	0x0801b554

08017704 <__retarget_lock_init_recursive>:
 8017704:	4770      	bx	lr

08017706 <__retarget_lock_acquire_recursive>:
 8017706:	4770      	bx	lr

08017708 <__retarget_lock_release_recursive>:
 8017708:	4770      	bx	lr

0801770a <memcpy>:
 801770a:	440a      	add	r2, r1
 801770c:	4291      	cmp	r1, r2
 801770e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017712:	d100      	bne.n	8017716 <memcpy+0xc>
 8017714:	4770      	bx	lr
 8017716:	b510      	push	{r4, lr}
 8017718:	f811 4b01 	ldrb.w	r4, [r1], #1
 801771c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017720:	4291      	cmp	r1, r2
 8017722:	d1f9      	bne.n	8017718 <memcpy+0xe>
 8017724:	bd10      	pop	{r4, pc}
	...

08017728 <__assert_func>:
 8017728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801772a:	4614      	mov	r4, r2
 801772c:	461a      	mov	r2, r3
 801772e:	4b09      	ldr	r3, [pc, #36]	@ (8017754 <__assert_func+0x2c>)
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	4605      	mov	r5, r0
 8017734:	68d8      	ldr	r0, [r3, #12]
 8017736:	b14c      	cbz	r4, 801774c <__assert_func+0x24>
 8017738:	4b07      	ldr	r3, [pc, #28]	@ (8017758 <__assert_func+0x30>)
 801773a:	9100      	str	r1, [sp, #0]
 801773c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017740:	4906      	ldr	r1, [pc, #24]	@ (801775c <__assert_func+0x34>)
 8017742:	462b      	mov	r3, r5
 8017744:	f000 fc88 	bl	8018058 <fiprintf>
 8017748:	f000 fd2c 	bl	80181a4 <abort>
 801774c:	4b04      	ldr	r3, [pc, #16]	@ (8017760 <__assert_func+0x38>)
 801774e:	461c      	mov	r4, r3
 8017750:	e7f3      	b.n	801773a <__assert_func+0x12>
 8017752:	bf00      	nop
 8017754:	2000003c 	.word	0x2000003c
 8017758:	0801b4d9 	.word	0x0801b4d9
 801775c:	0801b4e6 	.word	0x0801b4e6
 8017760:	0801b514 	.word	0x0801b514

08017764 <_free_r>:
 8017764:	b538      	push	{r3, r4, r5, lr}
 8017766:	4605      	mov	r5, r0
 8017768:	2900      	cmp	r1, #0
 801776a:	d041      	beq.n	80177f0 <_free_r+0x8c>
 801776c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017770:	1f0c      	subs	r4, r1, #4
 8017772:	2b00      	cmp	r3, #0
 8017774:	bfb8      	it	lt
 8017776:	18e4      	addlt	r4, r4, r3
 8017778:	f000 f8e8 	bl	801794c <__malloc_lock>
 801777c:	4a1d      	ldr	r2, [pc, #116]	@ (80177f4 <_free_r+0x90>)
 801777e:	6813      	ldr	r3, [r2, #0]
 8017780:	b933      	cbnz	r3, 8017790 <_free_r+0x2c>
 8017782:	6063      	str	r3, [r4, #4]
 8017784:	6014      	str	r4, [r2, #0]
 8017786:	4628      	mov	r0, r5
 8017788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801778c:	f000 b8e4 	b.w	8017958 <__malloc_unlock>
 8017790:	42a3      	cmp	r3, r4
 8017792:	d908      	bls.n	80177a6 <_free_r+0x42>
 8017794:	6820      	ldr	r0, [r4, #0]
 8017796:	1821      	adds	r1, r4, r0
 8017798:	428b      	cmp	r3, r1
 801779a:	bf01      	itttt	eq
 801779c:	6819      	ldreq	r1, [r3, #0]
 801779e:	685b      	ldreq	r3, [r3, #4]
 80177a0:	1809      	addeq	r1, r1, r0
 80177a2:	6021      	streq	r1, [r4, #0]
 80177a4:	e7ed      	b.n	8017782 <_free_r+0x1e>
 80177a6:	461a      	mov	r2, r3
 80177a8:	685b      	ldr	r3, [r3, #4]
 80177aa:	b10b      	cbz	r3, 80177b0 <_free_r+0x4c>
 80177ac:	42a3      	cmp	r3, r4
 80177ae:	d9fa      	bls.n	80177a6 <_free_r+0x42>
 80177b0:	6811      	ldr	r1, [r2, #0]
 80177b2:	1850      	adds	r0, r2, r1
 80177b4:	42a0      	cmp	r0, r4
 80177b6:	d10b      	bne.n	80177d0 <_free_r+0x6c>
 80177b8:	6820      	ldr	r0, [r4, #0]
 80177ba:	4401      	add	r1, r0
 80177bc:	1850      	adds	r0, r2, r1
 80177be:	4283      	cmp	r3, r0
 80177c0:	6011      	str	r1, [r2, #0]
 80177c2:	d1e0      	bne.n	8017786 <_free_r+0x22>
 80177c4:	6818      	ldr	r0, [r3, #0]
 80177c6:	685b      	ldr	r3, [r3, #4]
 80177c8:	6053      	str	r3, [r2, #4]
 80177ca:	4408      	add	r0, r1
 80177cc:	6010      	str	r0, [r2, #0]
 80177ce:	e7da      	b.n	8017786 <_free_r+0x22>
 80177d0:	d902      	bls.n	80177d8 <_free_r+0x74>
 80177d2:	230c      	movs	r3, #12
 80177d4:	602b      	str	r3, [r5, #0]
 80177d6:	e7d6      	b.n	8017786 <_free_r+0x22>
 80177d8:	6820      	ldr	r0, [r4, #0]
 80177da:	1821      	adds	r1, r4, r0
 80177dc:	428b      	cmp	r3, r1
 80177de:	bf04      	itt	eq
 80177e0:	6819      	ldreq	r1, [r3, #0]
 80177e2:	685b      	ldreq	r3, [r3, #4]
 80177e4:	6063      	str	r3, [r4, #4]
 80177e6:	bf04      	itt	eq
 80177e8:	1809      	addeq	r1, r1, r0
 80177ea:	6021      	streq	r1, [r4, #0]
 80177ec:	6054      	str	r4, [r2, #4]
 80177ee:	e7ca      	b.n	8017786 <_free_r+0x22>
 80177f0:	bd38      	pop	{r3, r4, r5, pc}
 80177f2:	bf00      	nop
 80177f4:	20027704 	.word	0x20027704

080177f8 <malloc>:
 80177f8:	4b02      	ldr	r3, [pc, #8]	@ (8017804 <malloc+0xc>)
 80177fa:	4601      	mov	r1, r0
 80177fc:	6818      	ldr	r0, [r3, #0]
 80177fe:	f000 b825 	b.w	801784c <_malloc_r>
 8017802:	bf00      	nop
 8017804:	2000003c 	.word	0x2000003c

08017808 <sbrk_aligned>:
 8017808:	b570      	push	{r4, r5, r6, lr}
 801780a:	4e0f      	ldr	r6, [pc, #60]	@ (8017848 <sbrk_aligned+0x40>)
 801780c:	460c      	mov	r4, r1
 801780e:	6831      	ldr	r1, [r6, #0]
 8017810:	4605      	mov	r5, r0
 8017812:	b911      	cbnz	r1, 801781a <sbrk_aligned+0x12>
 8017814:	f000 fcb6 	bl	8018184 <_sbrk_r>
 8017818:	6030      	str	r0, [r6, #0]
 801781a:	4621      	mov	r1, r4
 801781c:	4628      	mov	r0, r5
 801781e:	f000 fcb1 	bl	8018184 <_sbrk_r>
 8017822:	1c43      	adds	r3, r0, #1
 8017824:	d103      	bne.n	801782e <sbrk_aligned+0x26>
 8017826:	f04f 34ff 	mov.w	r4, #4294967295
 801782a:	4620      	mov	r0, r4
 801782c:	bd70      	pop	{r4, r5, r6, pc}
 801782e:	1cc4      	adds	r4, r0, #3
 8017830:	f024 0403 	bic.w	r4, r4, #3
 8017834:	42a0      	cmp	r0, r4
 8017836:	d0f8      	beq.n	801782a <sbrk_aligned+0x22>
 8017838:	1a21      	subs	r1, r4, r0
 801783a:	4628      	mov	r0, r5
 801783c:	f000 fca2 	bl	8018184 <_sbrk_r>
 8017840:	3001      	adds	r0, #1
 8017842:	d1f2      	bne.n	801782a <sbrk_aligned+0x22>
 8017844:	e7ef      	b.n	8017826 <sbrk_aligned+0x1e>
 8017846:	bf00      	nop
 8017848:	20027700 	.word	0x20027700

0801784c <_malloc_r>:
 801784c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017850:	1ccd      	adds	r5, r1, #3
 8017852:	f025 0503 	bic.w	r5, r5, #3
 8017856:	3508      	adds	r5, #8
 8017858:	2d0c      	cmp	r5, #12
 801785a:	bf38      	it	cc
 801785c:	250c      	movcc	r5, #12
 801785e:	2d00      	cmp	r5, #0
 8017860:	4606      	mov	r6, r0
 8017862:	db01      	blt.n	8017868 <_malloc_r+0x1c>
 8017864:	42a9      	cmp	r1, r5
 8017866:	d904      	bls.n	8017872 <_malloc_r+0x26>
 8017868:	230c      	movs	r3, #12
 801786a:	6033      	str	r3, [r6, #0]
 801786c:	2000      	movs	r0, #0
 801786e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017872:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017948 <_malloc_r+0xfc>
 8017876:	f000 f869 	bl	801794c <__malloc_lock>
 801787a:	f8d8 3000 	ldr.w	r3, [r8]
 801787e:	461c      	mov	r4, r3
 8017880:	bb44      	cbnz	r4, 80178d4 <_malloc_r+0x88>
 8017882:	4629      	mov	r1, r5
 8017884:	4630      	mov	r0, r6
 8017886:	f7ff ffbf 	bl	8017808 <sbrk_aligned>
 801788a:	1c43      	adds	r3, r0, #1
 801788c:	4604      	mov	r4, r0
 801788e:	d158      	bne.n	8017942 <_malloc_r+0xf6>
 8017890:	f8d8 4000 	ldr.w	r4, [r8]
 8017894:	4627      	mov	r7, r4
 8017896:	2f00      	cmp	r7, #0
 8017898:	d143      	bne.n	8017922 <_malloc_r+0xd6>
 801789a:	2c00      	cmp	r4, #0
 801789c:	d04b      	beq.n	8017936 <_malloc_r+0xea>
 801789e:	6823      	ldr	r3, [r4, #0]
 80178a0:	4639      	mov	r1, r7
 80178a2:	4630      	mov	r0, r6
 80178a4:	eb04 0903 	add.w	r9, r4, r3
 80178a8:	f000 fc6c 	bl	8018184 <_sbrk_r>
 80178ac:	4581      	cmp	r9, r0
 80178ae:	d142      	bne.n	8017936 <_malloc_r+0xea>
 80178b0:	6821      	ldr	r1, [r4, #0]
 80178b2:	1a6d      	subs	r5, r5, r1
 80178b4:	4629      	mov	r1, r5
 80178b6:	4630      	mov	r0, r6
 80178b8:	f7ff ffa6 	bl	8017808 <sbrk_aligned>
 80178bc:	3001      	adds	r0, #1
 80178be:	d03a      	beq.n	8017936 <_malloc_r+0xea>
 80178c0:	6823      	ldr	r3, [r4, #0]
 80178c2:	442b      	add	r3, r5
 80178c4:	6023      	str	r3, [r4, #0]
 80178c6:	f8d8 3000 	ldr.w	r3, [r8]
 80178ca:	685a      	ldr	r2, [r3, #4]
 80178cc:	bb62      	cbnz	r2, 8017928 <_malloc_r+0xdc>
 80178ce:	f8c8 7000 	str.w	r7, [r8]
 80178d2:	e00f      	b.n	80178f4 <_malloc_r+0xa8>
 80178d4:	6822      	ldr	r2, [r4, #0]
 80178d6:	1b52      	subs	r2, r2, r5
 80178d8:	d420      	bmi.n	801791c <_malloc_r+0xd0>
 80178da:	2a0b      	cmp	r2, #11
 80178dc:	d917      	bls.n	801790e <_malloc_r+0xc2>
 80178de:	1961      	adds	r1, r4, r5
 80178e0:	42a3      	cmp	r3, r4
 80178e2:	6025      	str	r5, [r4, #0]
 80178e4:	bf18      	it	ne
 80178e6:	6059      	strne	r1, [r3, #4]
 80178e8:	6863      	ldr	r3, [r4, #4]
 80178ea:	bf08      	it	eq
 80178ec:	f8c8 1000 	streq.w	r1, [r8]
 80178f0:	5162      	str	r2, [r4, r5]
 80178f2:	604b      	str	r3, [r1, #4]
 80178f4:	4630      	mov	r0, r6
 80178f6:	f000 f82f 	bl	8017958 <__malloc_unlock>
 80178fa:	f104 000b 	add.w	r0, r4, #11
 80178fe:	1d23      	adds	r3, r4, #4
 8017900:	f020 0007 	bic.w	r0, r0, #7
 8017904:	1ac2      	subs	r2, r0, r3
 8017906:	bf1c      	itt	ne
 8017908:	1a1b      	subne	r3, r3, r0
 801790a:	50a3      	strne	r3, [r4, r2]
 801790c:	e7af      	b.n	801786e <_malloc_r+0x22>
 801790e:	6862      	ldr	r2, [r4, #4]
 8017910:	42a3      	cmp	r3, r4
 8017912:	bf0c      	ite	eq
 8017914:	f8c8 2000 	streq.w	r2, [r8]
 8017918:	605a      	strne	r2, [r3, #4]
 801791a:	e7eb      	b.n	80178f4 <_malloc_r+0xa8>
 801791c:	4623      	mov	r3, r4
 801791e:	6864      	ldr	r4, [r4, #4]
 8017920:	e7ae      	b.n	8017880 <_malloc_r+0x34>
 8017922:	463c      	mov	r4, r7
 8017924:	687f      	ldr	r7, [r7, #4]
 8017926:	e7b6      	b.n	8017896 <_malloc_r+0x4a>
 8017928:	461a      	mov	r2, r3
 801792a:	685b      	ldr	r3, [r3, #4]
 801792c:	42a3      	cmp	r3, r4
 801792e:	d1fb      	bne.n	8017928 <_malloc_r+0xdc>
 8017930:	2300      	movs	r3, #0
 8017932:	6053      	str	r3, [r2, #4]
 8017934:	e7de      	b.n	80178f4 <_malloc_r+0xa8>
 8017936:	230c      	movs	r3, #12
 8017938:	6033      	str	r3, [r6, #0]
 801793a:	4630      	mov	r0, r6
 801793c:	f000 f80c 	bl	8017958 <__malloc_unlock>
 8017940:	e794      	b.n	801786c <_malloc_r+0x20>
 8017942:	6005      	str	r5, [r0, #0]
 8017944:	e7d6      	b.n	80178f4 <_malloc_r+0xa8>
 8017946:	bf00      	nop
 8017948:	20027704 	.word	0x20027704

0801794c <__malloc_lock>:
 801794c:	4801      	ldr	r0, [pc, #4]	@ (8017954 <__malloc_lock+0x8>)
 801794e:	f7ff beda 	b.w	8017706 <__retarget_lock_acquire_recursive>
 8017952:	bf00      	nop
 8017954:	200276fc 	.word	0x200276fc

08017958 <__malloc_unlock>:
 8017958:	4801      	ldr	r0, [pc, #4]	@ (8017960 <__malloc_unlock+0x8>)
 801795a:	f7ff bed5 	b.w	8017708 <__retarget_lock_release_recursive>
 801795e:	bf00      	nop
 8017960:	200276fc 	.word	0x200276fc

08017964 <__sfputc_r>:
 8017964:	6893      	ldr	r3, [r2, #8]
 8017966:	3b01      	subs	r3, #1
 8017968:	2b00      	cmp	r3, #0
 801796a:	b410      	push	{r4}
 801796c:	6093      	str	r3, [r2, #8]
 801796e:	da08      	bge.n	8017982 <__sfputc_r+0x1e>
 8017970:	6994      	ldr	r4, [r2, #24]
 8017972:	42a3      	cmp	r3, r4
 8017974:	db01      	blt.n	801797a <__sfputc_r+0x16>
 8017976:	290a      	cmp	r1, #10
 8017978:	d103      	bne.n	8017982 <__sfputc_r+0x1e>
 801797a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801797e:	f7ff bd4c 	b.w	801741a <__swbuf_r>
 8017982:	6813      	ldr	r3, [r2, #0]
 8017984:	1c58      	adds	r0, r3, #1
 8017986:	6010      	str	r0, [r2, #0]
 8017988:	7019      	strb	r1, [r3, #0]
 801798a:	4608      	mov	r0, r1
 801798c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017990:	4770      	bx	lr

08017992 <__sfputs_r>:
 8017992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017994:	4606      	mov	r6, r0
 8017996:	460f      	mov	r7, r1
 8017998:	4614      	mov	r4, r2
 801799a:	18d5      	adds	r5, r2, r3
 801799c:	42ac      	cmp	r4, r5
 801799e:	d101      	bne.n	80179a4 <__sfputs_r+0x12>
 80179a0:	2000      	movs	r0, #0
 80179a2:	e007      	b.n	80179b4 <__sfputs_r+0x22>
 80179a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179a8:	463a      	mov	r2, r7
 80179aa:	4630      	mov	r0, r6
 80179ac:	f7ff ffda 	bl	8017964 <__sfputc_r>
 80179b0:	1c43      	adds	r3, r0, #1
 80179b2:	d1f3      	bne.n	801799c <__sfputs_r+0xa>
 80179b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080179b8 <_vfiprintf_r>:
 80179b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179bc:	460d      	mov	r5, r1
 80179be:	b09d      	sub	sp, #116	@ 0x74
 80179c0:	4614      	mov	r4, r2
 80179c2:	4698      	mov	r8, r3
 80179c4:	4606      	mov	r6, r0
 80179c6:	b118      	cbz	r0, 80179d0 <_vfiprintf_r+0x18>
 80179c8:	6a03      	ldr	r3, [r0, #32]
 80179ca:	b90b      	cbnz	r3, 80179d0 <_vfiprintf_r+0x18>
 80179cc:	f7ff fc3c 	bl	8017248 <__sinit>
 80179d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80179d2:	07d9      	lsls	r1, r3, #31
 80179d4:	d405      	bmi.n	80179e2 <_vfiprintf_r+0x2a>
 80179d6:	89ab      	ldrh	r3, [r5, #12]
 80179d8:	059a      	lsls	r2, r3, #22
 80179da:	d402      	bmi.n	80179e2 <_vfiprintf_r+0x2a>
 80179dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80179de:	f7ff fe92 	bl	8017706 <__retarget_lock_acquire_recursive>
 80179e2:	89ab      	ldrh	r3, [r5, #12]
 80179e4:	071b      	lsls	r3, r3, #28
 80179e6:	d501      	bpl.n	80179ec <_vfiprintf_r+0x34>
 80179e8:	692b      	ldr	r3, [r5, #16]
 80179ea:	b99b      	cbnz	r3, 8017a14 <_vfiprintf_r+0x5c>
 80179ec:	4629      	mov	r1, r5
 80179ee:	4630      	mov	r0, r6
 80179f0:	f7ff fd52 	bl	8017498 <__swsetup_r>
 80179f4:	b170      	cbz	r0, 8017a14 <_vfiprintf_r+0x5c>
 80179f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80179f8:	07dc      	lsls	r4, r3, #31
 80179fa:	d504      	bpl.n	8017a06 <_vfiprintf_r+0x4e>
 80179fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017a00:	b01d      	add	sp, #116	@ 0x74
 8017a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a06:	89ab      	ldrh	r3, [r5, #12]
 8017a08:	0598      	lsls	r0, r3, #22
 8017a0a:	d4f7      	bmi.n	80179fc <_vfiprintf_r+0x44>
 8017a0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017a0e:	f7ff fe7b 	bl	8017708 <__retarget_lock_release_recursive>
 8017a12:	e7f3      	b.n	80179fc <_vfiprintf_r+0x44>
 8017a14:	2300      	movs	r3, #0
 8017a16:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a18:	2320      	movs	r3, #32
 8017a1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017a1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a22:	2330      	movs	r3, #48	@ 0x30
 8017a24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017bd4 <_vfiprintf_r+0x21c>
 8017a28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017a2c:	f04f 0901 	mov.w	r9, #1
 8017a30:	4623      	mov	r3, r4
 8017a32:	469a      	mov	sl, r3
 8017a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a38:	b10a      	cbz	r2, 8017a3e <_vfiprintf_r+0x86>
 8017a3a:	2a25      	cmp	r2, #37	@ 0x25
 8017a3c:	d1f9      	bne.n	8017a32 <_vfiprintf_r+0x7a>
 8017a3e:	ebba 0b04 	subs.w	fp, sl, r4
 8017a42:	d00b      	beq.n	8017a5c <_vfiprintf_r+0xa4>
 8017a44:	465b      	mov	r3, fp
 8017a46:	4622      	mov	r2, r4
 8017a48:	4629      	mov	r1, r5
 8017a4a:	4630      	mov	r0, r6
 8017a4c:	f7ff ffa1 	bl	8017992 <__sfputs_r>
 8017a50:	3001      	adds	r0, #1
 8017a52:	f000 80a7 	beq.w	8017ba4 <_vfiprintf_r+0x1ec>
 8017a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017a58:	445a      	add	r2, fp
 8017a5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8017a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	f000 809f 	beq.w	8017ba4 <_vfiprintf_r+0x1ec>
 8017a66:	2300      	movs	r3, #0
 8017a68:	f04f 32ff 	mov.w	r2, #4294967295
 8017a6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a70:	f10a 0a01 	add.w	sl, sl, #1
 8017a74:	9304      	str	r3, [sp, #16]
 8017a76:	9307      	str	r3, [sp, #28]
 8017a78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017a7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8017a7e:	4654      	mov	r4, sl
 8017a80:	2205      	movs	r2, #5
 8017a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a86:	4853      	ldr	r0, [pc, #332]	@ (8017bd4 <_vfiprintf_r+0x21c>)
 8017a88:	f7e8 fbc2 	bl	8000210 <memchr>
 8017a8c:	9a04      	ldr	r2, [sp, #16]
 8017a8e:	b9d8      	cbnz	r0, 8017ac8 <_vfiprintf_r+0x110>
 8017a90:	06d1      	lsls	r1, r2, #27
 8017a92:	bf44      	itt	mi
 8017a94:	2320      	movmi	r3, #32
 8017a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017a9a:	0713      	lsls	r3, r2, #28
 8017a9c:	bf44      	itt	mi
 8017a9e:	232b      	movmi	r3, #43	@ 0x2b
 8017aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8017aa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8017aaa:	d015      	beq.n	8017ad8 <_vfiprintf_r+0x120>
 8017aac:	9a07      	ldr	r2, [sp, #28]
 8017aae:	4654      	mov	r4, sl
 8017ab0:	2000      	movs	r0, #0
 8017ab2:	f04f 0c0a 	mov.w	ip, #10
 8017ab6:	4621      	mov	r1, r4
 8017ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017abc:	3b30      	subs	r3, #48	@ 0x30
 8017abe:	2b09      	cmp	r3, #9
 8017ac0:	d94b      	bls.n	8017b5a <_vfiprintf_r+0x1a2>
 8017ac2:	b1b0      	cbz	r0, 8017af2 <_vfiprintf_r+0x13a>
 8017ac4:	9207      	str	r2, [sp, #28]
 8017ac6:	e014      	b.n	8017af2 <_vfiprintf_r+0x13a>
 8017ac8:	eba0 0308 	sub.w	r3, r0, r8
 8017acc:	fa09 f303 	lsl.w	r3, r9, r3
 8017ad0:	4313      	orrs	r3, r2
 8017ad2:	9304      	str	r3, [sp, #16]
 8017ad4:	46a2      	mov	sl, r4
 8017ad6:	e7d2      	b.n	8017a7e <_vfiprintf_r+0xc6>
 8017ad8:	9b03      	ldr	r3, [sp, #12]
 8017ada:	1d19      	adds	r1, r3, #4
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	9103      	str	r1, [sp, #12]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	bfbb      	ittet	lt
 8017ae4:	425b      	neglt	r3, r3
 8017ae6:	f042 0202 	orrlt.w	r2, r2, #2
 8017aea:	9307      	strge	r3, [sp, #28]
 8017aec:	9307      	strlt	r3, [sp, #28]
 8017aee:	bfb8      	it	lt
 8017af0:	9204      	strlt	r2, [sp, #16]
 8017af2:	7823      	ldrb	r3, [r4, #0]
 8017af4:	2b2e      	cmp	r3, #46	@ 0x2e
 8017af6:	d10a      	bne.n	8017b0e <_vfiprintf_r+0x156>
 8017af8:	7863      	ldrb	r3, [r4, #1]
 8017afa:	2b2a      	cmp	r3, #42	@ 0x2a
 8017afc:	d132      	bne.n	8017b64 <_vfiprintf_r+0x1ac>
 8017afe:	9b03      	ldr	r3, [sp, #12]
 8017b00:	1d1a      	adds	r2, r3, #4
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	9203      	str	r2, [sp, #12]
 8017b06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017b0a:	3402      	adds	r4, #2
 8017b0c:	9305      	str	r3, [sp, #20]
 8017b0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017be4 <_vfiprintf_r+0x22c>
 8017b12:	7821      	ldrb	r1, [r4, #0]
 8017b14:	2203      	movs	r2, #3
 8017b16:	4650      	mov	r0, sl
 8017b18:	f7e8 fb7a 	bl	8000210 <memchr>
 8017b1c:	b138      	cbz	r0, 8017b2e <_vfiprintf_r+0x176>
 8017b1e:	9b04      	ldr	r3, [sp, #16]
 8017b20:	eba0 000a 	sub.w	r0, r0, sl
 8017b24:	2240      	movs	r2, #64	@ 0x40
 8017b26:	4082      	lsls	r2, r0
 8017b28:	4313      	orrs	r3, r2
 8017b2a:	3401      	adds	r4, #1
 8017b2c:	9304      	str	r3, [sp, #16]
 8017b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b32:	4829      	ldr	r0, [pc, #164]	@ (8017bd8 <_vfiprintf_r+0x220>)
 8017b34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017b38:	2206      	movs	r2, #6
 8017b3a:	f7e8 fb69 	bl	8000210 <memchr>
 8017b3e:	2800      	cmp	r0, #0
 8017b40:	d03f      	beq.n	8017bc2 <_vfiprintf_r+0x20a>
 8017b42:	4b26      	ldr	r3, [pc, #152]	@ (8017bdc <_vfiprintf_r+0x224>)
 8017b44:	bb1b      	cbnz	r3, 8017b8e <_vfiprintf_r+0x1d6>
 8017b46:	9b03      	ldr	r3, [sp, #12]
 8017b48:	3307      	adds	r3, #7
 8017b4a:	f023 0307 	bic.w	r3, r3, #7
 8017b4e:	3308      	adds	r3, #8
 8017b50:	9303      	str	r3, [sp, #12]
 8017b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b54:	443b      	add	r3, r7
 8017b56:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b58:	e76a      	b.n	8017a30 <_vfiprintf_r+0x78>
 8017b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b5e:	460c      	mov	r4, r1
 8017b60:	2001      	movs	r0, #1
 8017b62:	e7a8      	b.n	8017ab6 <_vfiprintf_r+0xfe>
 8017b64:	2300      	movs	r3, #0
 8017b66:	3401      	adds	r4, #1
 8017b68:	9305      	str	r3, [sp, #20]
 8017b6a:	4619      	mov	r1, r3
 8017b6c:	f04f 0c0a 	mov.w	ip, #10
 8017b70:	4620      	mov	r0, r4
 8017b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b76:	3a30      	subs	r2, #48	@ 0x30
 8017b78:	2a09      	cmp	r2, #9
 8017b7a:	d903      	bls.n	8017b84 <_vfiprintf_r+0x1cc>
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d0c6      	beq.n	8017b0e <_vfiprintf_r+0x156>
 8017b80:	9105      	str	r1, [sp, #20]
 8017b82:	e7c4      	b.n	8017b0e <_vfiprintf_r+0x156>
 8017b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8017b88:	4604      	mov	r4, r0
 8017b8a:	2301      	movs	r3, #1
 8017b8c:	e7f0      	b.n	8017b70 <_vfiprintf_r+0x1b8>
 8017b8e:	ab03      	add	r3, sp, #12
 8017b90:	9300      	str	r3, [sp, #0]
 8017b92:	462a      	mov	r2, r5
 8017b94:	4b12      	ldr	r3, [pc, #72]	@ (8017be0 <_vfiprintf_r+0x228>)
 8017b96:	a904      	add	r1, sp, #16
 8017b98:	4630      	mov	r0, r6
 8017b9a:	f3af 8000 	nop.w
 8017b9e:	4607      	mov	r7, r0
 8017ba0:	1c78      	adds	r0, r7, #1
 8017ba2:	d1d6      	bne.n	8017b52 <_vfiprintf_r+0x19a>
 8017ba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ba6:	07d9      	lsls	r1, r3, #31
 8017ba8:	d405      	bmi.n	8017bb6 <_vfiprintf_r+0x1fe>
 8017baa:	89ab      	ldrh	r3, [r5, #12]
 8017bac:	059a      	lsls	r2, r3, #22
 8017bae:	d402      	bmi.n	8017bb6 <_vfiprintf_r+0x1fe>
 8017bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017bb2:	f7ff fda9 	bl	8017708 <__retarget_lock_release_recursive>
 8017bb6:	89ab      	ldrh	r3, [r5, #12]
 8017bb8:	065b      	lsls	r3, r3, #25
 8017bba:	f53f af1f 	bmi.w	80179fc <_vfiprintf_r+0x44>
 8017bbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017bc0:	e71e      	b.n	8017a00 <_vfiprintf_r+0x48>
 8017bc2:	ab03      	add	r3, sp, #12
 8017bc4:	9300      	str	r3, [sp, #0]
 8017bc6:	462a      	mov	r2, r5
 8017bc8:	4b05      	ldr	r3, [pc, #20]	@ (8017be0 <_vfiprintf_r+0x228>)
 8017bca:	a904      	add	r1, sp, #16
 8017bcc:	4630      	mov	r0, r6
 8017bce:	f000 f879 	bl	8017cc4 <_printf_i>
 8017bd2:	e7e4      	b.n	8017b9e <_vfiprintf_r+0x1e6>
 8017bd4:	0801b515 	.word	0x0801b515
 8017bd8:	0801b51f 	.word	0x0801b51f
 8017bdc:	00000000 	.word	0x00000000
 8017be0:	08017993 	.word	0x08017993
 8017be4:	0801b51b 	.word	0x0801b51b

08017be8 <_printf_common>:
 8017be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bec:	4616      	mov	r6, r2
 8017bee:	4698      	mov	r8, r3
 8017bf0:	688a      	ldr	r2, [r1, #8]
 8017bf2:	690b      	ldr	r3, [r1, #16]
 8017bf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017bf8:	4293      	cmp	r3, r2
 8017bfa:	bfb8      	it	lt
 8017bfc:	4613      	movlt	r3, r2
 8017bfe:	6033      	str	r3, [r6, #0]
 8017c00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017c04:	4607      	mov	r7, r0
 8017c06:	460c      	mov	r4, r1
 8017c08:	b10a      	cbz	r2, 8017c0e <_printf_common+0x26>
 8017c0a:	3301      	adds	r3, #1
 8017c0c:	6033      	str	r3, [r6, #0]
 8017c0e:	6823      	ldr	r3, [r4, #0]
 8017c10:	0699      	lsls	r1, r3, #26
 8017c12:	bf42      	ittt	mi
 8017c14:	6833      	ldrmi	r3, [r6, #0]
 8017c16:	3302      	addmi	r3, #2
 8017c18:	6033      	strmi	r3, [r6, #0]
 8017c1a:	6825      	ldr	r5, [r4, #0]
 8017c1c:	f015 0506 	ands.w	r5, r5, #6
 8017c20:	d106      	bne.n	8017c30 <_printf_common+0x48>
 8017c22:	f104 0a19 	add.w	sl, r4, #25
 8017c26:	68e3      	ldr	r3, [r4, #12]
 8017c28:	6832      	ldr	r2, [r6, #0]
 8017c2a:	1a9b      	subs	r3, r3, r2
 8017c2c:	42ab      	cmp	r3, r5
 8017c2e:	dc26      	bgt.n	8017c7e <_printf_common+0x96>
 8017c30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017c34:	6822      	ldr	r2, [r4, #0]
 8017c36:	3b00      	subs	r3, #0
 8017c38:	bf18      	it	ne
 8017c3a:	2301      	movne	r3, #1
 8017c3c:	0692      	lsls	r2, r2, #26
 8017c3e:	d42b      	bmi.n	8017c98 <_printf_common+0xb0>
 8017c40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017c44:	4641      	mov	r1, r8
 8017c46:	4638      	mov	r0, r7
 8017c48:	47c8      	blx	r9
 8017c4a:	3001      	adds	r0, #1
 8017c4c:	d01e      	beq.n	8017c8c <_printf_common+0xa4>
 8017c4e:	6823      	ldr	r3, [r4, #0]
 8017c50:	6922      	ldr	r2, [r4, #16]
 8017c52:	f003 0306 	and.w	r3, r3, #6
 8017c56:	2b04      	cmp	r3, #4
 8017c58:	bf02      	ittt	eq
 8017c5a:	68e5      	ldreq	r5, [r4, #12]
 8017c5c:	6833      	ldreq	r3, [r6, #0]
 8017c5e:	1aed      	subeq	r5, r5, r3
 8017c60:	68a3      	ldr	r3, [r4, #8]
 8017c62:	bf0c      	ite	eq
 8017c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017c68:	2500      	movne	r5, #0
 8017c6a:	4293      	cmp	r3, r2
 8017c6c:	bfc4      	itt	gt
 8017c6e:	1a9b      	subgt	r3, r3, r2
 8017c70:	18ed      	addgt	r5, r5, r3
 8017c72:	2600      	movs	r6, #0
 8017c74:	341a      	adds	r4, #26
 8017c76:	42b5      	cmp	r5, r6
 8017c78:	d11a      	bne.n	8017cb0 <_printf_common+0xc8>
 8017c7a:	2000      	movs	r0, #0
 8017c7c:	e008      	b.n	8017c90 <_printf_common+0xa8>
 8017c7e:	2301      	movs	r3, #1
 8017c80:	4652      	mov	r2, sl
 8017c82:	4641      	mov	r1, r8
 8017c84:	4638      	mov	r0, r7
 8017c86:	47c8      	blx	r9
 8017c88:	3001      	adds	r0, #1
 8017c8a:	d103      	bne.n	8017c94 <_printf_common+0xac>
 8017c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c94:	3501      	adds	r5, #1
 8017c96:	e7c6      	b.n	8017c26 <_printf_common+0x3e>
 8017c98:	18e1      	adds	r1, r4, r3
 8017c9a:	1c5a      	adds	r2, r3, #1
 8017c9c:	2030      	movs	r0, #48	@ 0x30
 8017c9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017ca2:	4422      	add	r2, r4
 8017ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017ca8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017cac:	3302      	adds	r3, #2
 8017cae:	e7c7      	b.n	8017c40 <_printf_common+0x58>
 8017cb0:	2301      	movs	r3, #1
 8017cb2:	4622      	mov	r2, r4
 8017cb4:	4641      	mov	r1, r8
 8017cb6:	4638      	mov	r0, r7
 8017cb8:	47c8      	blx	r9
 8017cba:	3001      	adds	r0, #1
 8017cbc:	d0e6      	beq.n	8017c8c <_printf_common+0xa4>
 8017cbe:	3601      	adds	r6, #1
 8017cc0:	e7d9      	b.n	8017c76 <_printf_common+0x8e>
	...

08017cc4 <_printf_i>:
 8017cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017cc8:	7e0f      	ldrb	r7, [r1, #24]
 8017cca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017ccc:	2f78      	cmp	r7, #120	@ 0x78
 8017cce:	4691      	mov	r9, r2
 8017cd0:	4680      	mov	r8, r0
 8017cd2:	460c      	mov	r4, r1
 8017cd4:	469a      	mov	sl, r3
 8017cd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017cda:	d807      	bhi.n	8017cec <_printf_i+0x28>
 8017cdc:	2f62      	cmp	r7, #98	@ 0x62
 8017cde:	d80a      	bhi.n	8017cf6 <_printf_i+0x32>
 8017ce0:	2f00      	cmp	r7, #0
 8017ce2:	f000 80d1 	beq.w	8017e88 <_printf_i+0x1c4>
 8017ce6:	2f58      	cmp	r7, #88	@ 0x58
 8017ce8:	f000 80b8 	beq.w	8017e5c <_printf_i+0x198>
 8017cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017cf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017cf4:	e03a      	b.n	8017d6c <_printf_i+0xa8>
 8017cf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017cfa:	2b15      	cmp	r3, #21
 8017cfc:	d8f6      	bhi.n	8017cec <_printf_i+0x28>
 8017cfe:	a101      	add	r1, pc, #4	@ (adr r1, 8017d04 <_printf_i+0x40>)
 8017d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017d04:	08017d5d 	.word	0x08017d5d
 8017d08:	08017d71 	.word	0x08017d71
 8017d0c:	08017ced 	.word	0x08017ced
 8017d10:	08017ced 	.word	0x08017ced
 8017d14:	08017ced 	.word	0x08017ced
 8017d18:	08017ced 	.word	0x08017ced
 8017d1c:	08017d71 	.word	0x08017d71
 8017d20:	08017ced 	.word	0x08017ced
 8017d24:	08017ced 	.word	0x08017ced
 8017d28:	08017ced 	.word	0x08017ced
 8017d2c:	08017ced 	.word	0x08017ced
 8017d30:	08017e6f 	.word	0x08017e6f
 8017d34:	08017d9b 	.word	0x08017d9b
 8017d38:	08017e29 	.word	0x08017e29
 8017d3c:	08017ced 	.word	0x08017ced
 8017d40:	08017ced 	.word	0x08017ced
 8017d44:	08017e91 	.word	0x08017e91
 8017d48:	08017ced 	.word	0x08017ced
 8017d4c:	08017d9b 	.word	0x08017d9b
 8017d50:	08017ced 	.word	0x08017ced
 8017d54:	08017ced 	.word	0x08017ced
 8017d58:	08017e31 	.word	0x08017e31
 8017d5c:	6833      	ldr	r3, [r6, #0]
 8017d5e:	1d1a      	adds	r2, r3, #4
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	6032      	str	r2, [r6, #0]
 8017d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017d68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017d6c:	2301      	movs	r3, #1
 8017d6e:	e09c      	b.n	8017eaa <_printf_i+0x1e6>
 8017d70:	6833      	ldr	r3, [r6, #0]
 8017d72:	6820      	ldr	r0, [r4, #0]
 8017d74:	1d19      	adds	r1, r3, #4
 8017d76:	6031      	str	r1, [r6, #0]
 8017d78:	0606      	lsls	r6, r0, #24
 8017d7a:	d501      	bpl.n	8017d80 <_printf_i+0xbc>
 8017d7c:	681d      	ldr	r5, [r3, #0]
 8017d7e:	e003      	b.n	8017d88 <_printf_i+0xc4>
 8017d80:	0645      	lsls	r5, r0, #25
 8017d82:	d5fb      	bpl.n	8017d7c <_printf_i+0xb8>
 8017d84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017d88:	2d00      	cmp	r5, #0
 8017d8a:	da03      	bge.n	8017d94 <_printf_i+0xd0>
 8017d8c:	232d      	movs	r3, #45	@ 0x2d
 8017d8e:	426d      	negs	r5, r5
 8017d90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017d94:	4858      	ldr	r0, [pc, #352]	@ (8017ef8 <_printf_i+0x234>)
 8017d96:	230a      	movs	r3, #10
 8017d98:	e011      	b.n	8017dbe <_printf_i+0xfa>
 8017d9a:	6821      	ldr	r1, [r4, #0]
 8017d9c:	6833      	ldr	r3, [r6, #0]
 8017d9e:	0608      	lsls	r0, r1, #24
 8017da0:	f853 5b04 	ldr.w	r5, [r3], #4
 8017da4:	d402      	bmi.n	8017dac <_printf_i+0xe8>
 8017da6:	0649      	lsls	r1, r1, #25
 8017da8:	bf48      	it	mi
 8017daa:	b2ad      	uxthmi	r5, r5
 8017dac:	2f6f      	cmp	r7, #111	@ 0x6f
 8017dae:	4852      	ldr	r0, [pc, #328]	@ (8017ef8 <_printf_i+0x234>)
 8017db0:	6033      	str	r3, [r6, #0]
 8017db2:	bf14      	ite	ne
 8017db4:	230a      	movne	r3, #10
 8017db6:	2308      	moveq	r3, #8
 8017db8:	2100      	movs	r1, #0
 8017dba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017dbe:	6866      	ldr	r6, [r4, #4]
 8017dc0:	60a6      	str	r6, [r4, #8]
 8017dc2:	2e00      	cmp	r6, #0
 8017dc4:	db05      	blt.n	8017dd2 <_printf_i+0x10e>
 8017dc6:	6821      	ldr	r1, [r4, #0]
 8017dc8:	432e      	orrs	r6, r5
 8017dca:	f021 0104 	bic.w	r1, r1, #4
 8017dce:	6021      	str	r1, [r4, #0]
 8017dd0:	d04b      	beq.n	8017e6a <_printf_i+0x1a6>
 8017dd2:	4616      	mov	r6, r2
 8017dd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8017dd8:	fb03 5711 	mls	r7, r3, r1, r5
 8017ddc:	5dc7      	ldrb	r7, [r0, r7]
 8017dde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017de2:	462f      	mov	r7, r5
 8017de4:	42bb      	cmp	r3, r7
 8017de6:	460d      	mov	r5, r1
 8017de8:	d9f4      	bls.n	8017dd4 <_printf_i+0x110>
 8017dea:	2b08      	cmp	r3, #8
 8017dec:	d10b      	bne.n	8017e06 <_printf_i+0x142>
 8017dee:	6823      	ldr	r3, [r4, #0]
 8017df0:	07df      	lsls	r7, r3, #31
 8017df2:	d508      	bpl.n	8017e06 <_printf_i+0x142>
 8017df4:	6923      	ldr	r3, [r4, #16]
 8017df6:	6861      	ldr	r1, [r4, #4]
 8017df8:	4299      	cmp	r1, r3
 8017dfa:	bfde      	ittt	le
 8017dfc:	2330      	movle	r3, #48	@ 0x30
 8017dfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017e02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017e06:	1b92      	subs	r2, r2, r6
 8017e08:	6122      	str	r2, [r4, #16]
 8017e0a:	f8cd a000 	str.w	sl, [sp]
 8017e0e:	464b      	mov	r3, r9
 8017e10:	aa03      	add	r2, sp, #12
 8017e12:	4621      	mov	r1, r4
 8017e14:	4640      	mov	r0, r8
 8017e16:	f7ff fee7 	bl	8017be8 <_printf_common>
 8017e1a:	3001      	adds	r0, #1
 8017e1c:	d14a      	bne.n	8017eb4 <_printf_i+0x1f0>
 8017e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8017e22:	b004      	add	sp, #16
 8017e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e28:	6823      	ldr	r3, [r4, #0]
 8017e2a:	f043 0320 	orr.w	r3, r3, #32
 8017e2e:	6023      	str	r3, [r4, #0]
 8017e30:	4832      	ldr	r0, [pc, #200]	@ (8017efc <_printf_i+0x238>)
 8017e32:	2778      	movs	r7, #120	@ 0x78
 8017e34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017e38:	6823      	ldr	r3, [r4, #0]
 8017e3a:	6831      	ldr	r1, [r6, #0]
 8017e3c:	061f      	lsls	r7, r3, #24
 8017e3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8017e42:	d402      	bmi.n	8017e4a <_printf_i+0x186>
 8017e44:	065f      	lsls	r7, r3, #25
 8017e46:	bf48      	it	mi
 8017e48:	b2ad      	uxthmi	r5, r5
 8017e4a:	6031      	str	r1, [r6, #0]
 8017e4c:	07d9      	lsls	r1, r3, #31
 8017e4e:	bf44      	itt	mi
 8017e50:	f043 0320 	orrmi.w	r3, r3, #32
 8017e54:	6023      	strmi	r3, [r4, #0]
 8017e56:	b11d      	cbz	r5, 8017e60 <_printf_i+0x19c>
 8017e58:	2310      	movs	r3, #16
 8017e5a:	e7ad      	b.n	8017db8 <_printf_i+0xf4>
 8017e5c:	4826      	ldr	r0, [pc, #152]	@ (8017ef8 <_printf_i+0x234>)
 8017e5e:	e7e9      	b.n	8017e34 <_printf_i+0x170>
 8017e60:	6823      	ldr	r3, [r4, #0]
 8017e62:	f023 0320 	bic.w	r3, r3, #32
 8017e66:	6023      	str	r3, [r4, #0]
 8017e68:	e7f6      	b.n	8017e58 <_printf_i+0x194>
 8017e6a:	4616      	mov	r6, r2
 8017e6c:	e7bd      	b.n	8017dea <_printf_i+0x126>
 8017e6e:	6833      	ldr	r3, [r6, #0]
 8017e70:	6825      	ldr	r5, [r4, #0]
 8017e72:	6961      	ldr	r1, [r4, #20]
 8017e74:	1d18      	adds	r0, r3, #4
 8017e76:	6030      	str	r0, [r6, #0]
 8017e78:	062e      	lsls	r6, r5, #24
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	d501      	bpl.n	8017e82 <_printf_i+0x1be>
 8017e7e:	6019      	str	r1, [r3, #0]
 8017e80:	e002      	b.n	8017e88 <_printf_i+0x1c4>
 8017e82:	0668      	lsls	r0, r5, #25
 8017e84:	d5fb      	bpl.n	8017e7e <_printf_i+0x1ba>
 8017e86:	8019      	strh	r1, [r3, #0]
 8017e88:	2300      	movs	r3, #0
 8017e8a:	6123      	str	r3, [r4, #16]
 8017e8c:	4616      	mov	r6, r2
 8017e8e:	e7bc      	b.n	8017e0a <_printf_i+0x146>
 8017e90:	6833      	ldr	r3, [r6, #0]
 8017e92:	1d1a      	adds	r2, r3, #4
 8017e94:	6032      	str	r2, [r6, #0]
 8017e96:	681e      	ldr	r6, [r3, #0]
 8017e98:	6862      	ldr	r2, [r4, #4]
 8017e9a:	2100      	movs	r1, #0
 8017e9c:	4630      	mov	r0, r6
 8017e9e:	f7e8 f9b7 	bl	8000210 <memchr>
 8017ea2:	b108      	cbz	r0, 8017ea8 <_printf_i+0x1e4>
 8017ea4:	1b80      	subs	r0, r0, r6
 8017ea6:	6060      	str	r0, [r4, #4]
 8017ea8:	6863      	ldr	r3, [r4, #4]
 8017eaa:	6123      	str	r3, [r4, #16]
 8017eac:	2300      	movs	r3, #0
 8017eae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017eb2:	e7aa      	b.n	8017e0a <_printf_i+0x146>
 8017eb4:	6923      	ldr	r3, [r4, #16]
 8017eb6:	4632      	mov	r2, r6
 8017eb8:	4649      	mov	r1, r9
 8017eba:	4640      	mov	r0, r8
 8017ebc:	47d0      	blx	sl
 8017ebe:	3001      	adds	r0, #1
 8017ec0:	d0ad      	beq.n	8017e1e <_printf_i+0x15a>
 8017ec2:	6823      	ldr	r3, [r4, #0]
 8017ec4:	079b      	lsls	r3, r3, #30
 8017ec6:	d413      	bmi.n	8017ef0 <_printf_i+0x22c>
 8017ec8:	68e0      	ldr	r0, [r4, #12]
 8017eca:	9b03      	ldr	r3, [sp, #12]
 8017ecc:	4298      	cmp	r0, r3
 8017ece:	bfb8      	it	lt
 8017ed0:	4618      	movlt	r0, r3
 8017ed2:	e7a6      	b.n	8017e22 <_printf_i+0x15e>
 8017ed4:	2301      	movs	r3, #1
 8017ed6:	4632      	mov	r2, r6
 8017ed8:	4649      	mov	r1, r9
 8017eda:	4640      	mov	r0, r8
 8017edc:	47d0      	blx	sl
 8017ede:	3001      	adds	r0, #1
 8017ee0:	d09d      	beq.n	8017e1e <_printf_i+0x15a>
 8017ee2:	3501      	adds	r5, #1
 8017ee4:	68e3      	ldr	r3, [r4, #12]
 8017ee6:	9903      	ldr	r1, [sp, #12]
 8017ee8:	1a5b      	subs	r3, r3, r1
 8017eea:	42ab      	cmp	r3, r5
 8017eec:	dcf2      	bgt.n	8017ed4 <_printf_i+0x210>
 8017eee:	e7eb      	b.n	8017ec8 <_printf_i+0x204>
 8017ef0:	2500      	movs	r5, #0
 8017ef2:	f104 0619 	add.w	r6, r4, #25
 8017ef6:	e7f5      	b.n	8017ee4 <_printf_i+0x220>
 8017ef8:	0801b526 	.word	0x0801b526
 8017efc:	0801b537 	.word	0x0801b537

08017f00 <__sflush_r>:
 8017f00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f08:	0716      	lsls	r6, r2, #28
 8017f0a:	4605      	mov	r5, r0
 8017f0c:	460c      	mov	r4, r1
 8017f0e:	d454      	bmi.n	8017fba <__sflush_r+0xba>
 8017f10:	684b      	ldr	r3, [r1, #4]
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	dc02      	bgt.n	8017f1c <__sflush_r+0x1c>
 8017f16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	dd48      	ble.n	8017fae <__sflush_r+0xae>
 8017f1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017f1e:	2e00      	cmp	r6, #0
 8017f20:	d045      	beq.n	8017fae <__sflush_r+0xae>
 8017f22:	2300      	movs	r3, #0
 8017f24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017f28:	682f      	ldr	r7, [r5, #0]
 8017f2a:	6a21      	ldr	r1, [r4, #32]
 8017f2c:	602b      	str	r3, [r5, #0]
 8017f2e:	d030      	beq.n	8017f92 <__sflush_r+0x92>
 8017f30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017f32:	89a3      	ldrh	r3, [r4, #12]
 8017f34:	0759      	lsls	r1, r3, #29
 8017f36:	d505      	bpl.n	8017f44 <__sflush_r+0x44>
 8017f38:	6863      	ldr	r3, [r4, #4]
 8017f3a:	1ad2      	subs	r2, r2, r3
 8017f3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017f3e:	b10b      	cbz	r3, 8017f44 <__sflush_r+0x44>
 8017f40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017f42:	1ad2      	subs	r2, r2, r3
 8017f44:	2300      	movs	r3, #0
 8017f46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017f48:	6a21      	ldr	r1, [r4, #32]
 8017f4a:	4628      	mov	r0, r5
 8017f4c:	47b0      	blx	r6
 8017f4e:	1c43      	adds	r3, r0, #1
 8017f50:	89a3      	ldrh	r3, [r4, #12]
 8017f52:	d106      	bne.n	8017f62 <__sflush_r+0x62>
 8017f54:	6829      	ldr	r1, [r5, #0]
 8017f56:	291d      	cmp	r1, #29
 8017f58:	d82b      	bhi.n	8017fb2 <__sflush_r+0xb2>
 8017f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8018004 <__sflush_r+0x104>)
 8017f5c:	40ca      	lsrs	r2, r1
 8017f5e:	07d6      	lsls	r6, r2, #31
 8017f60:	d527      	bpl.n	8017fb2 <__sflush_r+0xb2>
 8017f62:	2200      	movs	r2, #0
 8017f64:	6062      	str	r2, [r4, #4]
 8017f66:	04d9      	lsls	r1, r3, #19
 8017f68:	6922      	ldr	r2, [r4, #16]
 8017f6a:	6022      	str	r2, [r4, #0]
 8017f6c:	d504      	bpl.n	8017f78 <__sflush_r+0x78>
 8017f6e:	1c42      	adds	r2, r0, #1
 8017f70:	d101      	bne.n	8017f76 <__sflush_r+0x76>
 8017f72:	682b      	ldr	r3, [r5, #0]
 8017f74:	b903      	cbnz	r3, 8017f78 <__sflush_r+0x78>
 8017f76:	6560      	str	r0, [r4, #84]	@ 0x54
 8017f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017f7a:	602f      	str	r7, [r5, #0]
 8017f7c:	b1b9      	cbz	r1, 8017fae <__sflush_r+0xae>
 8017f7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017f82:	4299      	cmp	r1, r3
 8017f84:	d002      	beq.n	8017f8c <__sflush_r+0x8c>
 8017f86:	4628      	mov	r0, r5
 8017f88:	f7ff fbec 	bl	8017764 <_free_r>
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017f90:	e00d      	b.n	8017fae <__sflush_r+0xae>
 8017f92:	2301      	movs	r3, #1
 8017f94:	4628      	mov	r0, r5
 8017f96:	47b0      	blx	r6
 8017f98:	4602      	mov	r2, r0
 8017f9a:	1c50      	adds	r0, r2, #1
 8017f9c:	d1c9      	bne.n	8017f32 <__sflush_r+0x32>
 8017f9e:	682b      	ldr	r3, [r5, #0]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d0c6      	beq.n	8017f32 <__sflush_r+0x32>
 8017fa4:	2b1d      	cmp	r3, #29
 8017fa6:	d001      	beq.n	8017fac <__sflush_r+0xac>
 8017fa8:	2b16      	cmp	r3, #22
 8017faa:	d11e      	bne.n	8017fea <__sflush_r+0xea>
 8017fac:	602f      	str	r7, [r5, #0]
 8017fae:	2000      	movs	r0, #0
 8017fb0:	e022      	b.n	8017ff8 <__sflush_r+0xf8>
 8017fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017fb6:	b21b      	sxth	r3, r3
 8017fb8:	e01b      	b.n	8017ff2 <__sflush_r+0xf2>
 8017fba:	690f      	ldr	r7, [r1, #16]
 8017fbc:	2f00      	cmp	r7, #0
 8017fbe:	d0f6      	beq.n	8017fae <__sflush_r+0xae>
 8017fc0:	0793      	lsls	r3, r2, #30
 8017fc2:	680e      	ldr	r6, [r1, #0]
 8017fc4:	bf08      	it	eq
 8017fc6:	694b      	ldreq	r3, [r1, #20]
 8017fc8:	600f      	str	r7, [r1, #0]
 8017fca:	bf18      	it	ne
 8017fcc:	2300      	movne	r3, #0
 8017fce:	eba6 0807 	sub.w	r8, r6, r7
 8017fd2:	608b      	str	r3, [r1, #8]
 8017fd4:	f1b8 0f00 	cmp.w	r8, #0
 8017fd8:	dde9      	ble.n	8017fae <__sflush_r+0xae>
 8017fda:	6a21      	ldr	r1, [r4, #32]
 8017fdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017fde:	4643      	mov	r3, r8
 8017fe0:	463a      	mov	r2, r7
 8017fe2:	4628      	mov	r0, r5
 8017fe4:	47b0      	blx	r6
 8017fe6:	2800      	cmp	r0, #0
 8017fe8:	dc08      	bgt.n	8017ffc <__sflush_r+0xfc>
 8017fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ff2:	81a3      	strh	r3, [r4, #12]
 8017ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ffc:	4407      	add	r7, r0
 8017ffe:	eba8 0800 	sub.w	r8, r8, r0
 8018002:	e7e7      	b.n	8017fd4 <__sflush_r+0xd4>
 8018004:	20400001 	.word	0x20400001

08018008 <_fflush_r>:
 8018008:	b538      	push	{r3, r4, r5, lr}
 801800a:	690b      	ldr	r3, [r1, #16]
 801800c:	4605      	mov	r5, r0
 801800e:	460c      	mov	r4, r1
 8018010:	b913      	cbnz	r3, 8018018 <_fflush_r+0x10>
 8018012:	2500      	movs	r5, #0
 8018014:	4628      	mov	r0, r5
 8018016:	bd38      	pop	{r3, r4, r5, pc}
 8018018:	b118      	cbz	r0, 8018022 <_fflush_r+0x1a>
 801801a:	6a03      	ldr	r3, [r0, #32]
 801801c:	b90b      	cbnz	r3, 8018022 <_fflush_r+0x1a>
 801801e:	f7ff f913 	bl	8017248 <__sinit>
 8018022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018026:	2b00      	cmp	r3, #0
 8018028:	d0f3      	beq.n	8018012 <_fflush_r+0xa>
 801802a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801802c:	07d0      	lsls	r0, r2, #31
 801802e:	d404      	bmi.n	801803a <_fflush_r+0x32>
 8018030:	0599      	lsls	r1, r3, #22
 8018032:	d402      	bmi.n	801803a <_fflush_r+0x32>
 8018034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018036:	f7ff fb66 	bl	8017706 <__retarget_lock_acquire_recursive>
 801803a:	4628      	mov	r0, r5
 801803c:	4621      	mov	r1, r4
 801803e:	f7ff ff5f 	bl	8017f00 <__sflush_r>
 8018042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018044:	07da      	lsls	r2, r3, #31
 8018046:	4605      	mov	r5, r0
 8018048:	d4e4      	bmi.n	8018014 <_fflush_r+0xc>
 801804a:	89a3      	ldrh	r3, [r4, #12]
 801804c:	059b      	lsls	r3, r3, #22
 801804e:	d4e1      	bmi.n	8018014 <_fflush_r+0xc>
 8018050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018052:	f7ff fb59 	bl	8017708 <__retarget_lock_release_recursive>
 8018056:	e7dd      	b.n	8018014 <_fflush_r+0xc>

08018058 <fiprintf>:
 8018058:	b40e      	push	{r1, r2, r3}
 801805a:	b503      	push	{r0, r1, lr}
 801805c:	4601      	mov	r1, r0
 801805e:	ab03      	add	r3, sp, #12
 8018060:	4805      	ldr	r0, [pc, #20]	@ (8018078 <fiprintf+0x20>)
 8018062:	f853 2b04 	ldr.w	r2, [r3], #4
 8018066:	6800      	ldr	r0, [r0, #0]
 8018068:	9301      	str	r3, [sp, #4]
 801806a:	f7ff fca5 	bl	80179b8 <_vfiprintf_r>
 801806e:	b002      	add	sp, #8
 8018070:	f85d eb04 	ldr.w	lr, [sp], #4
 8018074:	b003      	add	sp, #12
 8018076:	4770      	bx	lr
 8018078:	2000003c 	.word	0x2000003c

0801807c <__swhatbuf_r>:
 801807c:	b570      	push	{r4, r5, r6, lr}
 801807e:	460c      	mov	r4, r1
 8018080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018084:	2900      	cmp	r1, #0
 8018086:	b096      	sub	sp, #88	@ 0x58
 8018088:	4615      	mov	r5, r2
 801808a:	461e      	mov	r6, r3
 801808c:	da0d      	bge.n	80180aa <__swhatbuf_r+0x2e>
 801808e:	89a3      	ldrh	r3, [r4, #12]
 8018090:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018094:	f04f 0100 	mov.w	r1, #0
 8018098:	bf14      	ite	ne
 801809a:	2340      	movne	r3, #64	@ 0x40
 801809c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80180a0:	2000      	movs	r0, #0
 80180a2:	6031      	str	r1, [r6, #0]
 80180a4:	602b      	str	r3, [r5, #0]
 80180a6:	b016      	add	sp, #88	@ 0x58
 80180a8:	bd70      	pop	{r4, r5, r6, pc}
 80180aa:	466a      	mov	r2, sp
 80180ac:	f000 f848 	bl	8018140 <_fstat_r>
 80180b0:	2800      	cmp	r0, #0
 80180b2:	dbec      	blt.n	801808e <__swhatbuf_r+0x12>
 80180b4:	9901      	ldr	r1, [sp, #4]
 80180b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80180ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80180be:	4259      	negs	r1, r3
 80180c0:	4159      	adcs	r1, r3
 80180c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80180c6:	e7eb      	b.n	80180a0 <__swhatbuf_r+0x24>

080180c8 <__smakebuf_r>:
 80180c8:	898b      	ldrh	r3, [r1, #12]
 80180ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80180cc:	079d      	lsls	r5, r3, #30
 80180ce:	4606      	mov	r6, r0
 80180d0:	460c      	mov	r4, r1
 80180d2:	d507      	bpl.n	80180e4 <__smakebuf_r+0x1c>
 80180d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80180d8:	6023      	str	r3, [r4, #0]
 80180da:	6123      	str	r3, [r4, #16]
 80180dc:	2301      	movs	r3, #1
 80180de:	6163      	str	r3, [r4, #20]
 80180e0:	b003      	add	sp, #12
 80180e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180e4:	ab01      	add	r3, sp, #4
 80180e6:	466a      	mov	r2, sp
 80180e8:	f7ff ffc8 	bl	801807c <__swhatbuf_r>
 80180ec:	9f00      	ldr	r7, [sp, #0]
 80180ee:	4605      	mov	r5, r0
 80180f0:	4639      	mov	r1, r7
 80180f2:	4630      	mov	r0, r6
 80180f4:	f7ff fbaa 	bl	801784c <_malloc_r>
 80180f8:	b948      	cbnz	r0, 801810e <__smakebuf_r+0x46>
 80180fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180fe:	059a      	lsls	r2, r3, #22
 8018100:	d4ee      	bmi.n	80180e0 <__smakebuf_r+0x18>
 8018102:	f023 0303 	bic.w	r3, r3, #3
 8018106:	f043 0302 	orr.w	r3, r3, #2
 801810a:	81a3      	strh	r3, [r4, #12]
 801810c:	e7e2      	b.n	80180d4 <__smakebuf_r+0xc>
 801810e:	89a3      	ldrh	r3, [r4, #12]
 8018110:	6020      	str	r0, [r4, #0]
 8018112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018116:	81a3      	strh	r3, [r4, #12]
 8018118:	9b01      	ldr	r3, [sp, #4]
 801811a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801811e:	b15b      	cbz	r3, 8018138 <__smakebuf_r+0x70>
 8018120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018124:	4630      	mov	r0, r6
 8018126:	f000 f81d 	bl	8018164 <_isatty_r>
 801812a:	b128      	cbz	r0, 8018138 <__smakebuf_r+0x70>
 801812c:	89a3      	ldrh	r3, [r4, #12]
 801812e:	f023 0303 	bic.w	r3, r3, #3
 8018132:	f043 0301 	orr.w	r3, r3, #1
 8018136:	81a3      	strh	r3, [r4, #12]
 8018138:	89a3      	ldrh	r3, [r4, #12]
 801813a:	431d      	orrs	r5, r3
 801813c:	81a5      	strh	r5, [r4, #12]
 801813e:	e7cf      	b.n	80180e0 <__smakebuf_r+0x18>

08018140 <_fstat_r>:
 8018140:	b538      	push	{r3, r4, r5, lr}
 8018142:	4d07      	ldr	r5, [pc, #28]	@ (8018160 <_fstat_r+0x20>)
 8018144:	2300      	movs	r3, #0
 8018146:	4604      	mov	r4, r0
 8018148:	4608      	mov	r0, r1
 801814a:	4611      	mov	r1, r2
 801814c:	602b      	str	r3, [r5, #0]
 801814e:	f7e9 fbb9 	bl	80018c4 <_fstat>
 8018152:	1c43      	adds	r3, r0, #1
 8018154:	d102      	bne.n	801815c <_fstat_r+0x1c>
 8018156:	682b      	ldr	r3, [r5, #0]
 8018158:	b103      	cbz	r3, 801815c <_fstat_r+0x1c>
 801815a:	6023      	str	r3, [r4, #0]
 801815c:	bd38      	pop	{r3, r4, r5, pc}
 801815e:	bf00      	nop
 8018160:	200276f8 	.word	0x200276f8

08018164 <_isatty_r>:
 8018164:	b538      	push	{r3, r4, r5, lr}
 8018166:	4d06      	ldr	r5, [pc, #24]	@ (8018180 <_isatty_r+0x1c>)
 8018168:	2300      	movs	r3, #0
 801816a:	4604      	mov	r4, r0
 801816c:	4608      	mov	r0, r1
 801816e:	602b      	str	r3, [r5, #0]
 8018170:	f7e9 fbb8 	bl	80018e4 <_isatty>
 8018174:	1c43      	adds	r3, r0, #1
 8018176:	d102      	bne.n	801817e <_isatty_r+0x1a>
 8018178:	682b      	ldr	r3, [r5, #0]
 801817a:	b103      	cbz	r3, 801817e <_isatty_r+0x1a>
 801817c:	6023      	str	r3, [r4, #0]
 801817e:	bd38      	pop	{r3, r4, r5, pc}
 8018180:	200276f8 	.word	0x200276f8

08018184 <_sbrk_r>:
 8018184:	b538      	push	{r3, r4, r5, lr}
 8018186:	4d06      	ldr	r5, [pc, #24]	@ (80181a0 <_sbrk_r+0x1c>)
 8018188:	2300      	movs	r3, #0
 801818a:	4604      	mov	r4, r0
 801818c:	4608      	mov	r0, r1
 801818e:	602b      	str	r3, [r5, #0]
 8018190:	f7e9 fbc0 	bl	8001914 <_sbrk>
 8018194:	1c43      	adds	r3, r0, #1
 8018196:	d102      	bne.n	801819e <_sbrk_r+0x1a>
 8018198:	682b      	ldr	r3, [r5, #0]
 801819a:	b103      	cbz	r3, 801819e <_sbrk_r+0x1a>
 801819c:	6023      	str	r3, [r4, #0]
 801819e:	bd38      	pop	{r3, r4, r5, pc}
 80181a0:	200276f8 	.word	0x200276f8

080181a4 <abort>:
 80181a4:	b508      	push	{r3, lr}
 80181a6:	2006      	movs	r0, #6
 80181a8:	f000 f82c 	bl	8018204 <raise>
 80181ac:	2001      	movs	r0, #1
 80181ae:	f7e9 fb39 	bl	8001824 <_exit>

080181b2 <_raise_r>:
 80181b2:	291f      	cmp	r1, #31
 80181b4:	b538      	push	{r3, r4, r5, lr}
 80181b6:	4605      	mov	r5, r0
 80181b8:	460c      	mov	r4, r1
 80181ba:	d904      	bls.n	80181c6 <_raise_r+0x14>
 80181bc:	2316      	movs	r3, #22
 80181be:	6003      	str	r3, [r0, #0]
 80181c0:	f04f 30ff 	mov.w	r0, #4294967295
 80181c4:	bd38      	pop	{r3, r4, r5, pc}
 80181c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80181c8:	b112      	cbz	r2, 80181d0 <_raise_r+0x1e>
 80181ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80181ce:	b94b      	cbnz	r3, 80181e4 <_raise_r+0x32>
 80181d0:	4628      	mov	r0, r5
 80181d2:	f000 f831 	bl	8018238 <_getpid_r>
 80181d6:	4622      	mov	r2, r4
 80181d8:	4601      	mov	r1, r0
 80181da:	4628      	mov	r0, r5
 80181dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181e0:	f000 b818 	b.w	8018214 <_kill_r>
 80181e4:	2b01      	cmp	r3, #1
 80181e6:	d00a      	beq.n	80181fe <_raise_r+0x4c>
 80181e8:	1c59      	adds	r1, r3, #1
 80181ea:	d103      	bne.n	80181f4 <_raise_r+0x42>
 80181ec:	2316      	movs	r3, #22
 80181ee:	6003      	str	r3, [r0, #0]
 80181f0:	2001      	movs	r0, #1
 80181f2:	e7e7      	b.n	80181c4 <_raise_r+0x12>
 80181f4:	2100      	movs	r1, #0
 80181f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80181fa:	4620      	mov	r0, r4
 80181fc:	4798      	blx	r3
 80181fe:	2000      	movs	r0, #0
 8018200:	e7e0      	b.n	80181c4 <_raise_r+0x12>
	...

08018204 <raise>:
 8018204:	4b02      	ldr	r3, [pc, #8]	@ (8018210 <raise+0xc>)
 8018206:	4601      	mov	r1, r0
 8018208:	6818      	ldr	r0, [r3, #0]
 801820a:	f7ff bfd2 	b.w	80181b2 <_raise_r>
 801820e:	bf00      	nop
 8018210:	2000003c 	.word	0x2000003c

08018214 <_kill_r>:
 8018214:	b538      	push	{r3, r4, r5, lr}
 8018216:	4d07      	ldr	r5, [pc, #28]	@ (8018234 <_kill_r+0x20>)
 8018218:	2300      	movs	r3, #0
 801821a:	4604      	mov	r4, r0
 801821c:	4608      	mov	r0, r1
 801821e:	4611      	mov	r1, r2
 8018220:	602b      	str	r3, [r5, #0]
 8018222:	f7e9 faed 	bl	8001800 <_kill>
 8018226:	1c43      	adds	r3, r0, #1
 8018228:	d102      	bne.n	8018230 <_kill_r+0x1c>
 801822a:	682b      	ldr	r3, [r5, #0]
 801822c:	b103      	cbz	r3, 8018230 <_kill_r+0x1c>
 801822e:	6023      	str	r3, [r4, #0]
 8018230:	bd38      	pop	{r3, r4, r5, pc}
 8018232:	bf00      	nop
 8018234:	200276f8 	.word	0x200276f8

08018238 <_getpid_r>:
 8018238:	f7e9 bada 	b.w	80017f0 <_getpid>

0801823c <_init>:
 801823c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801823e:	bf00      	nop
 8018240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018242:	bc08      	pop	{r3}
 8018244:	469e      	mov	lr, r3
 8018246:	4770      	bx	lr

08018248 <_fini>:
 8018248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801824a:	bf00      	nop
 801824c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801824e:	bc08      	pop	{r3}
 8018250:	469e      	mov	lr, r3
 8018252:	4770      	bx	lr
